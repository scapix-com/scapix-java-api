// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/charset/CharsetEncoder.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CS_ISO_8859_1_ENCODER_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CS_ISO_8859_1_ENCODER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::cs { class ISO_8859_1_Encoder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::cs::ISO_8859_1_Encoder>
{
	static constexpr fixed_string class_name = "sun/nio/cs/ISO_8859_1$Encoder";
	using base_classes = std::tuple<scapix::java_api::java::nio::charset::CharsetEncoder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_ISO_8859_1_ENCODER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CS_ISO_8859_1_ENCODER)
#define SCAPIX_JAVA_API_SUN_NIO_CS_ISO_8859_1_ENCODER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::nio::cs::ISO_8859_1_Encoder : public jni::object_base<"sun/nio/cs/ISO_8859_1$Encoder",
	java::nio::charset::CharsetEncoder>
{
public:

	jboolean canEncode(jchar c) { return call_method<"canEncode", jboolean>(c); }
	jboolean isLegalReplacement(jni::ref<jni::array<jbyte>> repl) { return call_method<"isLegalReplacement", jboolean>(repl); }

protected:

	ISO_8859_1_Encoder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_ISO_8859_1_ENCODER
