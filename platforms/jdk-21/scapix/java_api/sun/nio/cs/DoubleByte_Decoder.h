// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/charset/CharsetDecoder.h>
#include <scapix/java_api/sun/nio/cs/DelegatableDecoder.h>
#include <scapix/java_api/sun/nio/cs/ArrayDecoder.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_DECODER_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_DECODER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::cs { class DoubleByte_Decoder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::cs::DoubleByte_Decoder>
{
	static constexpr fixed_string class_name = "sun/nio/cs/DoubleByte$Decoder";
	using base_classes = std::tuple<scapix::java_api::java::nio::charset::CharsetDecoder, scapix::java_api::sun::nio::cs::DelegatableDecoder, scapix::java_api::sun::nio::cs::ArrayDecoder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_DECODER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_DECODER)
#define SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_DECODER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/CharBuffer.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/nio/charset/CoderResult.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::nio::cs::DoubleByte_Decoder : public jni::object_base<"sun/nio/cs/DoubleByte$Decoder",
	java::nio::charset::CharsetDecoder,
	sun::nio::cs::DelegatableDecoder,
	sun::nio::cs::ArrayDecoder>
{
public:

	static jni::ref<sun::nio::cs::DoubleByte_Decoder> new_object(jni::ref<java::nio::charset::Charset> cs, jfloat avgcpb, jfloat maxcpb, jni::ref<jni::array<jni::array<jchar>>> b2c, jni::ref<jni::array<jchar>> b2cSB, jint b2Min, jint b2Max, jboolean isASCIICompatible) { return base_::new_object(cs, avgcpb, maxcpb, b2c, b2cSB, b2Min, b2Max, isASCIICompatible); }
	static jni::ref<sun::nio::cs::DoubleByte_Decoder> new_object(jni::ref<java::nio::charset::Charset> cs, jni::ref<jni::array<jni::array<jchar>>> b2c, jni::ref<jni::array<jchar>> b2cSB, jint b2Min, jint b2Max, jboolean isASCIICompatible) { return base_::new_object(cs, b2c, b2cSB, b2Min, b2Max, isASCIICompatible); }
	static jni::ref<sun::nio::cs::DoubleByte_Decoder> new_object(jni::ref<java::nio::charset::Charset> cs, jni::ref<jni::array<jni::array<jchar>>> b2c, jni::ref<jni::array<jchar>> b2cSB, jint b2Min, jint b2Max) { return base_::new_object(cs, b2c, b2cSB, b2Min, b2Max); }
	jni::ref<java::nio::charset::CoderResult> decodeLoop(jni::ref<java::nio::ByteBuffer> src, jni::ref<java::nio::CharBuffer> dst) { return call_method<"decodeLoop", jni::ref<java::nio::charset::CoderResult>>(src, dst); }
	jint decode(jni::ref<jni::array<jbyte>> src, jint sp, jint len, jni::ref<jni::array<jchar>> dst) { return call_method<"decode", jint>(src, sp, len, dst); }
	jboolean isASCIICompatible() { return call_method<"isASCIICompatible", jboolean>(); }
	void implReset() { return call_method<"implReset", void>(); }
	jni::ref<java::nio::charset::CoderResult> implFlush(jni::ref<java::nio::CharBuffer> out) { return call_method<"implFlush", jni::ref<java::nio::charset::CoderResult>>(out); }
	jchar decodeSingle(jint b) { return call_method<"decodeSingle", jchar>(b); }
	jchar decodeDouble(jint b1, jint b2) { return call_method<"decodeDouble", jchar>(b1, b2); }

protected:

	DoubleByte_Decoder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_DECODER
