// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CS_SURROGATE_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CS_SURROGATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::cs { class Surrogate; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::cs::Surrogate>
{
	static constexpr fixed_string class_name = "sun/nio/cs/Surrogate";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_SURROGATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CS_SURROGATE)
#define SCAPIX_JAVA_API_SUN_NIO_CS_SURROGATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/nio/cs/Surrogate_Generator.h>
#include <scapix/java_api/sun/nio/cs/Surrogate_Parser.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::nio::cs::Surrogate : public jni::object_base<"sun/nio/cs/Surrogate",
	java::lang::Object>
{
public:

	using Generator = Surrogate_Generator;
	using Parser = Surrogate_Parser;

	static jchar MIN_HIGH() { return get_static_field<"MIN_HIGH", jchar>(); }
	static jchar MAX_HIGH() { return get_static_field<"MAX_HIGH", jchar>(); }
	static jchar MIN_LOW() { return get_static_field<"MIN_LOW", jchar>(); }
	static jchar MAX_LOW() { return get_static_field<"MAX_LOW", jchar>(); }
	static jchar MIN() { return get_static_field<"MIN", jchar>(); }
	static jchar MAX() { return get_static_field<"MAX", jchar>(); }
	static jint UCS4_MIN() { return get_static_field<"UCS4_MIN", jint>(); }
	static jint UCS4_MAX() { return get_static_field<"UCS4_MAX", jint>(); }

	static jboolean isHigh(jint c) { return call_static_method<"isHigh", jboolean>(c); }
	static jboolean isLow(jint c) { return call_static_method<"isLow", jboolean>(c); }
	static jboolean is(jint c) { return call_static_method<"is", jboolean>(c); }
	static jboolean neededFor(jint uc) { return call_static_method<"neededFor", jboolean>(uc); }
	static jchar high(jint uc) { return call_static_method<"high", jchar>(uc); }
	static jchar low(jint uc) { return call_static_method<"low", jchar>(uc); }
	static jint toUCS4(jchar c, jchar d) { return call_static_method<"toUCS4", jint>(c, d); }

protected:

	Surrogate(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_SURROGATE
