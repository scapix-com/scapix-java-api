// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_UTIL_LOCALE_PROVIDER_TIMEZONENAMEUTILITY_FWD
#define SCAPIX_JAVA_API_SUN_UTIL_LOCALE_PROVIDER_TIMEZONENAMEUTILITY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::util::locale::provider { class TimeZoneNameUtility; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::util::locale::provider::TimeZoneNameUtility>
{
	static constexpr fixed_string class_name = "sun/util/locale/provider/TimeZoneNameUtility";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOCALE_PROVIDER_TIMEZONENAMEUTILITY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_UTIL_LOCALE_PROVIDER_TIMEZONENAMEUTILITY)
#define SCAPIX_JAVA_API_SUN_UTIL_LOCALE_PROVIDER_TIMEZONENAMEUTILITY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Optional.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::util::locale::provider::TimeZoneNameUtility : public jni::object_base<"sun/util/locale/provider/TimeZoneNameUtility",
	java::lang::Object>
{
public:

	static jni::ref<jni::array<jni::array<java::lang::String>>> getZoneStrings(jni::ref<java::util::Locale> locale) { return call_static_method<"getZoneStrings", jni::ref<jni::array<jni::array<java::lang::String>>>>(locale); }
	static jni::ref<jni::array<java::lang::String>> retrieveDisplayNames(jni::ref<java::lang::String> id, jni::ref<java::util::Locale> locale) { return call_static_method<"retrieveDisplayNames", jni::ref<jni::array<java::lang::String>>>(id, locale); }
	static jni::ref<java::lang::String> retrieveGenericDisplayName(jni::ref<java::lang::String> id, jint style, jni::ref<java::util::Locale> locale) { return call_static_method<"retrieveGenericDisplayName", jni::ref<java::lang::String>>(id, style, locale); }
	static jni::ref<java::lang::String> retrieveDisplayName(jni::ref<java::lang::String> id, jboolean daylight, jint style, jni::ref<java::util::Locale> locale) { return call_static_method<"retrieveDisplayName", jni::ref<java::lang::String>>(id, daylight, style, locale); }
	static jni::ref<java::util::Optional> convertLDMLShortID(jni::ref<java::lang::String> shortID) { return call_static_method<"convertLDMLShortID", jni::ref<java::util::Optional>>(shortID); }
	static jni::ref<java::util::Optional> canonicalTZID(jni::ref<java::lang::String> id) { return call_static_method<"canonicalTZID", jni::ref<java::util::Optional>>(id); }

protected:

	TimeZoneNameUtility(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOCALE_PROVIDER_TIMEZONENAMEUTILITY
