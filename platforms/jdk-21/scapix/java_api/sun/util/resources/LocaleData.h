// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_UTIL_RESOURCES_LOCALEDATA_FWD
#define SCAPIX_JAVA_API_SUN_UTIL_RESOURCES_LOCALEDATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::util::resources { class LocaleData; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::util::resources::LocaleData>
{
	static constexpr fixed_string class_name = "sun/util/resources/LocaleData";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_RESOURCES_LOCALEDATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_UTIL_RESOURCES_LOCALEDATA)
#define SCAPIX_JAVA_API_SUN_UTIL_RESOURCES_LOCALEDATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/ResourceBundle.h>
#include <scapix/java_api/sun/util/locale/provider/LocaleProviderAdapter_Type.h>
#include <scapix/java_api/sun/util/resources/OpenListResourceBundle.h>
#include <scapix/java_api/sun/util/resources/ParallelListResourceBundle.h>
#include <scapix/java_api/sun/util/resources/TimeZoneNamesBundle.h>
#include <scapix/java_api/sun/util/resources/LocaleData_SupplementaryResourceBundleProvider.h>
#include <scapix/java_api/sun/util/resources/LocaleData_CommonResourceBundleProvider.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::util::resources::LocaleData : public jni::object_base<"sun/util/resources/LocaleData",
	java::lang::Object>
{
public:

	using SupplementaryResourceBundleProvider = LocaleData_SupplementaryResourceBundleProvider;
	using CommonResourceBundleProvider = LocaleData_CommonResourceBundleProvider;

	static jni::ref<sun::util::resources::LocaleData> new_object(jni::ref<sun::util::locale::provider::LocaleProviderAdapter_Type> type) { return base_::new_object(type); }
	jni::ref<java::util::ResourceBundle> getCalendarData(jni::ref<java::util::Locale> locale) { return call_method<"getCalendarData", jni::ref<java::util::ResourceBundle>>(locale); }
	jni::ref<sun::util::resources::OpenListResourceBundle> getCurrencyNames(jni::ref<java::util::Locale> locale) { return call_method<"getCurrencyNames", jni::ref<sun::util::resources::OpenListResourceBundle>>(locale); }
	jni::ref<sun::util::resources::OpenListResourceBundle> getLocaleNames(jni::ref<java::util::Locale> locale) { return call_method<"getLocaleNames", jni::ref<sun::util::resources::OpenListResourceBundle>>(locale); }
	jni::ref<sun::util::resources::TimeZoneNamesBundle> getTimeZoneNames(jni::ref<java::util::Locale> locale) { return call_method<"getTimeZoneNames", jni::ref<sun::util::resources::TimeZoneNamesBundle>>(locale); }
	jni::ref<java::util::ResourceBundle> getBreakIteratorInfo(jni::ref<java::util::Locale> locale) { return call_method<"getBreakIteratorInfo", jni::ref<java::util::ResourceBundle>>(locale); }
	jni::ref<java::util::ResourceBundle> getBreakIteratorResources(jni::ref<java::util::Locale> locale) { return call_method<"getBreakIteratorResources", jni::ref<java::util::ResourceBundle>>(locale); }
	jni::ref<java::util::ResourceBundle> getCollationData(jni::ref<java::util::Locale> locale) { return call_method<"getCollationData", jni::ref<java::util::ResourceBundle>>(locale); }
	jni::ref<java::util::ResourceBundle> getDateFormatData(jni::ref<java::util::Locale> locale) { return call_method<"getDateFormatData", jni::ref<java::util::ResourceBundle>>(locale); }
	void setSupplementary(jni::ref<sun::util::resources::ParallelListResourceBundle> formatData) { return call_method<"setSupplementary", void>(formatData); }
	jni::ref<java::util::ResourceBundle> getNumberFormatData(jni::ref<java::util::Locale> locale) { return call_method<"getNumberFormatData", jni::ref<java::util::ResourceBundle>>(locale); }
	static jni::ref<java::util::ResourceBundle> getBundle(jni::ref<java::lang::String> baseName, jni::ref<java::util::Locale> locale) { return call_static_method<"getBundle", jni::ref<java::util::ResourceBundle>>(baseName, locale); }

protected:

	LocaleData(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_RESOURCES_LOCALEDATA
