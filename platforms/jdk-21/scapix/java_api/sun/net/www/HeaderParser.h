// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_WWW_HEADERPARSER_FWD
#define SCAPIX_JAVA_API_SUN_NET_WWW_HEADERPARSER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net::www { class HeaderParser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::www::HeaderParser>
{
	static constexpr fixed_string class_name = "sun/net/www/HeaderParser";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_HEADERPARSER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_WWW_HEADERPARSER)
#define SCAPIX_JAVA_API_SUN_NET_WWW_HEADERPARSER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/OptionalInt.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::www::HeaderParser : public jni::object_base<"sun/net/www/HeaderParser",
	java::lang::Object>
{
public:

	static jni::ref<sun::net::www::HeaderParser> new_object(jni::ref<java::lang::String> raw) { return base_::new_object(raw); }
	jni::ref<sun::net::www::HeaderParser> subsequence(jint start, jint end) { return call_method<"subsequence", jni::ref<sun::net::www::HeaderParser>>(start, end); }
	jni::ref<java::lang::String> findKey(jint i) { return call_method<"findKey", jni::ref<java::lang::String>>(i); }
	jni::ref<java::lang::String> findValue(jint i) { return call_method<"findValue", jni::ref<java::lang::String>>(i); }
	jni::ref<java::lang::String> findValue(jni::ref<java::lang::String> key) { return call_method<"findValue", jni::ref<java::lang::String>>(key); }
	jni::ref<java::lang::String> findValue(jni::ref<java::lang::String> k, jni::ref<java::lang::String> Default) { return call_method<"findValue", jni::ref<java::lang::String>>(k, Default); }
	jni::ref<java::util::Iterator> keys() { return call_method<"keys", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::util::Iterator> values() { return call_method<"values", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint findInt(jni::ref<java::lang::String> k, jint Default) { return call_method<"findInt", jint>(k, Default); }
	jni::ref<java::util::OptionalInt> findInt(jni::ref<java::lang::String> k) { return call_method<"findInt", jni::ref<java::util::OptionalInt>>(k); }

protected:

	HeaderParser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_HEADERPARSER
