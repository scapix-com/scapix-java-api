// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/security/x509/Extension.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_X509_ISSUINGDISTRIBUTIONPOINTEXTENSION_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_ISSUINGDISTRIBUTIONPOINTEXTENSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::x509 { class IssuingDistributionPointExtension; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::x509::IssuingDistributionPointExtension>
{
	static constexpr fixed_string class_name = "sun/security/x509/IssuingDistributionPointExtension";
	using base_classes = std::tuple<scapix::java_api::sun::security::x509::Extension>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_ISSUINGDISTRIBUTIONPOINTEXTENSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_X509_ISSUINGDISTRIBUTIONPOINTEXTENSION)
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_ISSUINGDISTRIBUTIONPOINTEXTENSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/security/util/DerOutputStream.h>
#include <scapix/java_api/sun/security/x509/DistributionPointName.h>
#include <scapix/java_api/sun/security/x509/ReasonFlags.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::x509::IssuingDistributionPointExtension : public jni::object_base<"sun/security/x509/IssuingDistributionPointExtension",
	sun::security::x509::Extension>
{
public:

	static jni::ref<java::lang::String> NAME() { return get_static_field<"NAME", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::security::x509::IssuingDistributionPointExtension> new_object(jni::ref<sun::security::x509::DistributionPointName> distributionPoint, jni::ref<sun::security::x509::ReasonFlags> revocationReasons, jboolean hasOnlyUserCerts, jboolean hasOnlyCACerts, jboolean hasOnlyAttributeCerts, jboolean isIndirectCRL) { return base_::new_object(distributionPoint, revocationReasons, hasOnlyUserCerts, hasOnlyCACerts, hasOnlyAttributeCerts, isIndirectCRL); }
	static jni::ref<sun::security::x509::IssuingDistributionPointExtension> new_object(jni::ref<java::lang::Boolean> critical, jni::ref<java::lang::Object> value) { return base_::new_object(critical, value); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void encode(jni::ref<sun::security::util::DerOutputStream> out) { return call_method<"encode", void>(out); }
	void setRevocationReasons(jni::ref<sun::security::x509::ReasonFlags> val) { return call_method<"setRevocationReasons", void>(val); }
	jni::ref<sun::security::x509::DistributionPointName> getDistributionPoint() { return call_method<"getDistributionPoint", jni::ref<sun::security::x509::DistributionPointName>>(); }
	jni::ref<sun::security::x509::ReasonFlags> getRevocationReasons() { return call_method<"getRevocationReasons", jni::ref<sun::security::x509::ReasonFlags>>(); }
	jboolean hasOnlyUserCerts() { return call_method<"hasOnlyUserCerts", jboolean>(); }
	jboolean hasOnlyCACerts() { return call_method<"hasOnlyCACerts", jboolean>(); }
	jboolean hasOnlyAttributeCerts() { return call_method<"hasOnlyAttributeCerts", jboolean>(); }
	jboolean isIndirectCRL() { return call_method<"isIndirectCRL", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	IssuingDistributionPointExtension(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_ISSUINGDISTRIBUTIONPOINTEXTENSION
