// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::util { class DerInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::util::DerInputStream>
{
	static constexpr fixed_string class_name = "sun/security/util/DerInputStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERINPUTSTREAM)
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/sun/security/util/BitArray.h>
#include <scapix/java_api/sun/security/util/DerValue.h>
#include <scapix/java_api/sun/security/util/ObjectIdentifier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::util::DerInputStream : public jni::object_base<"sun/security/util/DerInputStream",
	java::lang::Object>
{
public:

	static jni::ref<sun::security::util::DerInputStream> new_object(jni::ref<jni::array<jbyte>> data, jint start, jint length, jboolean allowBER) { return base_::new_object(data, start, length, allowBER); }
	static jni::ref<sun::security::util::DerInputStream> new_object(jni::ref<jni::array<jbyte>> data) { return base_::new_object(data); }
	static jni::ref<sun::security::util::DerInputStream> new_object(jni::ref<jni::array<jbyte>> data, jint offset, jint len) { return base_::new_object(data, offset, len); }
	jni::ref<jni::array<jbyte>> toByteArray() { return call_method<"toByteArray", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<sun::security::util::DerValue> getDerValue() { return call_method<"getDerValue", jni::ref<sun::security::util::DerValue>>(); }
	jint getInteger() { return call_method<"getInteger", jint>(); }
	jni::ref<java::math::BigInteger> getBigInteger() { return call_method<"getBigInteger", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getPositiveBigInteger() { return call_method<"getPositiveBigInteger", jni::ref<java::math::BigInteger>>(); }
	jint getEnumerated() { return call_method<"getEnumerated", jint>(); }
	jni::ref<jni::array<jbyte>> getBitString() { return call_method<"getBitString", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<sun::security::util::BitArray> getUnalignedBitString() { return call_method<"getUnalignedBitString", jni::ref<sun::security::util::BitArray>>(); }
	jni::ref<jni::array<jbyte>> getOctetString() { return call_method<"getOctetString", jni::ref<jni::array<jbyte>>>(); }
	void getNull() { return call_method<"getNull", void>(); }
	jni::ref<sun::security::util::ObjectIdentifier> getOID() { return call_method<"getOID", jni::ref<sun::security::util::ObjectIdentifier>>(); }
	jni::ref<java::lang::String> getUTF8String() { return call_method<"getUTF8String", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPrintableString() { return call_method<"getPrintableString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getT61String() { return call_method<"getT61String", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getBMPString() { return call_method<"getBMPString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getIA5String() { return call_method<"getIA5String", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getGeneralString() { return call_method<"getGeneralString", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Date> getUTCTime() { return call_method<"getUTCTime", jni::ref<java::util::Date>>(); }
	jni::ref<java::util::Date> getGeneralizedTime() { return call_method<"getGeneralizedTime", jni::ref<java::util::Date>>(); }
	jni::ref<jni::array<sun::security::util::DerValue>> getSequence(jint startLen) { return call_method<"getSequence", jni::ref<jni::array<sun::security::util::DerValue>>>(startLen); }
	jni::ref<jni::array<sun::security::util::DerValue>> getSet(jint startLen) { return call_method<"getSet", jni::ref<jni::array<sun::security::util::DerValue>>>(startLen); }
	jni::ref<jni::array<sun::security::util::DerValue>> getSet(jint startLen, jboolean implicit) { return call_method<"getSet", jni::ref<jni::array<sun::security::util::DerValue>>>(startLen, implicit); }
	jint peekByte() { return call_method<"peekByte", jint>(); }
	void mark(jint readAheadLimit) { return call_method<"mark", void>(readAheadLimit); }
	void reset() { return call_method<"reset", void>(); }
	jint available() { return call_method<"available", jint>(); }
	void atEnd() { return call_method<"atEnd", void>(); }
	jni::ref<java::util::Optional> getOptional(jbyte tag) { return call_method<"getOptional", jni::ref<java::util::Optional>>(tag); }
	jboolean seeOptionalContextSpecific(jint n) { return call_method<"seeOptionalContextSpecific", jboolean>(n); }
	jni::ref<java::util::Optional> getOptionalExplicitContextSpecific(jint n) { return call_method<"getOptionalExplicitContextSpecific", jni::ref<java::util::Optional>>(n); }
	jni::ref<java::util::Optional> getOptionalImplicitContextSpecific(jint n, jbyte tag) { return call_method<"getOptionalImplicitContextSpecific", jni::ref<java::util::Optional>>(n, tag); }

protected:

	DerInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERINPUTSTREAM
