// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_TEXT_UCOMPACTINTARRAY_FWD
#define SCAPIX_JAVA_API_SUN_TEXT_UCOMPACTINTARRAY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::text { class UCompactIntArray; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::text::UCompactIntArray>
{
	static constexpr fixed_string class_name = "sun/text/UCompactIntArray";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_UCOMPACTINTARRAY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_TEXT_UCOMPACTINTARRAY)
#define SCAPIX_JAVA_API_SUN_TEXT_UCOMPACTINTARRAY

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::text::UCompactIntArray : public jni::object_base<"sun/text/UCompactIntArray",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<sun::text::UCompactIntArray> new_object() { return base_::new_object(); }
	static jni::ref<sun::text::UCompactIntArray> new_object(jint defaultValue) { return base_::new_object(defaultValue); }
	jint elementAt(jint index) { return call_method<"elementAt", jint>(index); }
	void setElementAt(jint index, jint value) { return call_method<"setElementAt", void>(index, value); }
	void compact() { return call_method<"compact", void>(); }
	jint getKSize() { return call_method<"getKSize", jint>(); }

protected:

	UCompactIntArray(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_UCOMPACTINTARRAY
