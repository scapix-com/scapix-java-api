// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/file/spi/FileSystemProvider.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_JRTFS_JRTFILESYSTEMPROVIDER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_JRTFS_JRTFILESYSTEMPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::jrtfs { class JrtFileSystemProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::jrtfs::JrtFileSystemProvider>
{
	static constexpr fixed_string class_name = "jdk/internal/jrtfs/JrtFileSystemProvider";
	using base_classes = std::tuple<scapix::java_api::java::nio::file::spi::FileSystemProvider>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JRTFS_JRTFILESYSTEMPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_JRTFS_JRTFILESYSTEMPROVIDER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_JRTFS_JRTFILESYSTEMPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/nio/channels/AsynchronousFileChannel.h>
#include <scapix/java_api/java/nio/channels/FileChannel.h>
#include <scapix/java_api/java/nio/channels/SeekableByteChannel.h>
#include <scapix/java_api/java/nio/file/AccessMode.h>
#include <scapix/java_api/java/nio/file/CopyOption.h>
#include <scapix/java_api/java/nio/file/DirectoryStream.h>
#include <scapix/java_api/java/nio/file/DirectoryStream_Filter.h>
#include <scapix/java_api/java/nio/file/FileStore.h>
#include <scapix/java_api/java/nio/file/FileSystem.h>
#include <scapix/java_api/java/nio/file/LinkOption.h>
#include <scapix/java_api/java/nio/file/OpenOption.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/nio/file/attribute/BasicFileAttributes.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttribute.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttributeView.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::jrtfs::JrtFileSystemProvider : public jni::object_base<"jdk/internal/jrtfs/JrtFileSystemProvider",
	java::nio::file::spi::FileSystemProvider>
{
public:

	static jni::ref<jdk::internal::jrtfs::JrtFileSystemProvider> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> getScheme() { return call_method<"getScheme", jni::ref<java::lang::String>>(); }
	jni::ref<java::nio::file::FileSystem> newFileSystem(jni::ref<java::net::URI> uri, jni::ref<java::util::Map> env) { return call_method<"newFileSystem", jni::ref<java::nio::file::FileSystem>>(uri, env); }
	jni::ref<java::nio::file::Path> getPath(jni::ref<java::net::URI> uri) { return call_method<"getPath", jni::ref<java::nio::file::Path>>(uri); }
	jni::ref<java::nio::file::FileSystem> getFileSystem(jni::ref<java::net::URI> uri) { return call_method<"getFileSystem", jni::ref<java::nio::file::FileSystem>>(uri); }
	void checkAccess(jni::ref<java::nio::file::Path> path, jni::ref<jni::array<java::nio::file::AccessMode>> modes) { return call_method<"checkAccess", void>(path, modes); }
	jni::ref<java::nio::file::Path> readSymbolicLink(jni::ref<java::nio::file::Path> link) { return call_method<"readSymbolicLink", jni::ref<java::nio::file::Path>>(link); }
	void copy(jni::ref<java::nio::file::Path> src, jni::ref<java::nio::file::Path> target, jni::ref<jni::array<java::nio::file::CopyOption>> options) { return call_method<"copy", void>(src, target, options); }
	void createDirectory(jni::ref<java::nio::file::Path> path, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_method<"createDirectory", void>(path, attrs); }
	void delete_(jni::ref<java::nio::file::Path> path) { return call_method<"delete", void>(path); }
	jni::ref<java::nio::file::attribute::FileAttributeView> getFileAttributeView(jni::ref<java::nio::file::Path> path, jni::ref<java::lang::Class> type, jni::ref<jni::array<java::nio::file::LinkOption>> options) { return call_method<"getFileAttributeView", jni::ref<java::nio::file::attribute::FileAttributeView>>(path, type, options); }
	jni::ref<java::nio::file::FileStore> getFileStore(jni::ref<java::nio::file::Path> path) { return call_method<"getFileStore", jni::ref<java::nio::file::FileStore>>(path); }
	jboolean isHidden(jni::ref<java::nio::file::Path> path) { return call_method<"isHidden", jboolean>(path); }
	jboolean isSameFile(jni::ref<java::nio::file::Path> path, jni::ref<java::nio::file::Path> other) { return call_method<"isSameFile", jboolean>(path, other); }
	void move(jni::ref<java::nio::file::Path> src, jni::ref<java::nio::file::Path> target, jni::ref<jni::array<java::nio::file::CopyOption>> options) { return call_method<"move", void>(src, target, options); }
	jni::ref<java::nio::channels::AsynchronousFileChannel> newAsynchronousFileChannel(jni::ref<java::nio::file::Path> path, jni::ref<java::util::Set> options, jni::ref<java::util::concurrent::ExecutorService> exec, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_method<"newAsynchronousFileChannel", jni::ref<java::nio::channels::AsynchronousFileChannel>>(path, options, exec, attrs); }
	jni::ref<java::nio::channels::SeekableByteChannel> newByteChannel(jni::ref<java::nio::file::Path> path, jni::ref<java::util::Set> options, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_method<"newByteChannel", jni::ref<java::nio::channels::SeekableByteChannel>>(path, options, attrs); }
	jni::ref<java::nio::file::DirectoryStream> newDirectoryStream(jni::ref<java::nio::file::Path> path, jni::ref<java::nio::file::DirectoryStream_Filter> filter) { return call_method<"newDirectoryStream", jni::ref<java::nio::file::DirectoryStream>>(path, filter); }
	jni::ref<java::nio::channels::FileChannel> newFileChannel(jni::ref<java::nio::file::Path> path, jni::ref<java::util::Set> options, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_method<"newFileChannel", jni::ref<java::nio::channels::FileChannel>>(path, options, attrs); }
	jni::ref<java::io::InputStream> newInputStream(jni::ref<java::nio::file::Path> path, jni::ref<jni::array<java::nio::file::OpenOption>> options) { return call_method<"newInputStream", jni::ref<java::io::InputStream>>(path, options); }
	jni::ref<java::io::OutputStream> newOutputStream(jni::ref<java::nio::file::Path> path, jni::ref<jni::array<java::nio::file::OpenOption>> options) { return call_method<"newOutputStream", jni::ref<java::io::OutputStream>>(path, options); }
	jni::ref<java::nio::file::attribute::BasicFileAttributes> readAttributes(jni::ref<java::nio::file::Path> path, jni::ref<java::lang::Class> type, jni::ref<jni::array<java::nio::file::LinkOption>> options) { return call_method<"readAttributes", jni::ref<java::nio::file::attribute::BasicFileAttributes>>(path, type, options); }
	jni::ref<java::util::Map> readAttributes(jni::ref<java::nio::file::Path> path, jni::ref<java::lang::String> attribute, jni::ref<jni::array<java::nio::file::LinkOption>> options) { return call_method<"readAttributes", jni::ref<java::util::Map>>(path, attribute, options); }
	void setAttribute(jni::ref<java::nio::file::Path> path, jni::ref<java::lang::String> attribute, jni::ref<java::lang::Object> value, jni::ref<jni::array<java::nio::file::LinkOption>> options) { return call_method<"setAttribute", void>(path, attribute, value, options); }

protected:

	JrtFileSystemProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JRTFS_JRTFILESYSTEMPROVIDER
