// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTIONFACTORY_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTIONFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::reflect { class ReflectionFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::reflect::ReflectionFactory>
{
	static constexpr fixed_string class_name = "jdk/internal/reflect/ReflectionFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTIONFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTIONFACTORY)
#define SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTIONFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Executable.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/jdk/internal/reflect/ConstructorAccessor.h>
#include <scapix/java_api/jdk/internal/reflect/FieldAccessor.h>
#include <scapix/java_api/jdk/internal/reflect/MethodAccessor.h>
#include <scapix/java_api/jdk/internal/reflect/ReflectionFactory_GetReflectionFactoryAction.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::reflect::ReflectionFactory : public jni::object_base<"jdk/internal/reflect/ReflectionFactory",
	java::lang::Object>
{
public:

	using GetReflectionFactoryAction = ReflectionFactory_GetReflectionFactoryAction;

	static jni::ref<jdk::internal::reflect::ReflectionFactory> getReflectionFactory() { return call_static_method<"getReflectionFactory", jni::ref<jdk::internal::reflect::ReflectionFactory>>(); }
	jni::ref<jdk::internal::reflect::FieldAccessor> newFieldAccessor(jni::ref<java::lang::reflect::Field> field, jboolean override) { return call_method<"newFieldAccessor", jni::ref<jdk::internal::reflect::FieldAccessor>>(field, override); }
	jni::ref<jdk::internal::reflect::MethodAccessor> newMethodAccessor(jni::ref<java::lang::reflect::Method> method, jboolean callerSensitive) { return call_method<"newMethodAccessor", jni::ref<jdk::internal::reflect::MethodAccessor>>(method, callerSensitive); }
	jni::ref<jdk::internal::reflect::ConstructorAccessor> newConstructorAccessor(jni::ref<java::lang::reflect::Constructor> c) { return call_method<"newConstructorAccessor", jni::ref<jdk::internal::reflect::ConstructorAccessor>>(c); }
	jni::ref<java::lang::reflect::Constructor> newConstructor(jni::ref<java::lang::Class> declaringClass, jni::ref<jni::array<java::lang::Class>> parameterTypes, jni::ref<jni::array<java::lang::Class>> checkedExceptions, jint modifiers, jint slot, jni::ref<java::lang::String> signature, jni::ref<jni::array<jbyte>> annotations, jni::ref<jni::array<jbyte>> parameterAnnotations) { return call_method<"newConstructor", jni::ref<java::lang::reflect::Constructor>>(declaringClass, parameterTypes, checkedExceptions, modifiers, slot, signature, annotations, parameterAnnotations); }
	jni::ref<jdk::internal::reflect::ConstructorAccessor> getConstructorAccessor(jni::ref<java::lang::reflect::Constructor> c) { return call_method<"getConstructorAccessor", jni::ref<jdk::internal::reflect::ConstructorAccessor>>(c); }
	void setConstructorAccessor(jni::ref<java::lang::reflect::Constructor> c, jni::ref<jdk::internal::reflect::ConstructorAccessor> accessor) { return call_method<"setConstructorAccessor", void>(c, accessor); }
	jni::ref<java::lang::reflect::Method> copyMethod(jni::ref<java::lang::reflect::Method> arg) { return call_method<"copyMethod", jni::ref<java::lang::reflect::Method>>(arg); }
	jni::ref<java::lang::reflect::Method> leafCopyMethod(jni::ref<java::lang::reflect::Method> arg) { return call_method<"leafCopyMethod", jni::ref<java::lang::reflect::Method>>(arg); }
	jni::ref<java::lang::reflect::Field> copyField(jni::ref<java::lang::reflect::Field> arg) { return call_method<"copyField", jni::ref<java::lang::reflect::Field>>(arg); }
	jni::ref<java::lang::reflect::Constructor> copyConstructor(jni::ref<java::lang::reflect::Constructor> arg) { return call_method<"copyConstructor", jni::ref<java::lang::reflect::Constructor>>(arg); }
	jni::ref<jni::array<jbyte>> getExecutableTypeAnnotationBytes(jni::ref<java::lang::reflect::Executable> ex) { return call_method<"getExecutableTypeAnnotationBytes", jni::ref<jni::array<jbyte>>>(ex); }
	jni::ref<jni::array<java::lang::Class>> getExecutableSharedParameterTypes(jni::ref<java::lang::reflect::Executable> ex) { return call_method<"getExecutableSharedParameterTypes", jni::ref<jni::array<java::lang::Class>>>(ex); }
	jni::ref<java::lang::Object> newInstance(jni::ref<java::lang::reflect::Constructor> ctor, jni::ref<jni::array<java::lang::Object>> args, jni::ref<java::lang::Class> caller) { return call_method<"newInstance", jni::ref<java::lang::Object>>(ctor, args, caller); }
	jni::ref<java::lang::reflect::Constructor> newConstructorForExternalization(jni::ref<java::lang::Class> cl) { return call_method<"newConstructorForExternalization", jni::ref<java::lang::reflect::Constructor>>(cl); }
	jni::ref<java::lang::reflect::Constructor> newConstructorForSerialization(jni::ref<java::lang::Class> cl, jni::ref<java::lang::reflect::Constructor> constructorToCall) { return call_method<"newConstructorForSerialization", jni::ref<java::lang::reflect::Constructor>>(cl, constructorToCall); }
	jni::ref<java::lang::reflect::Constructor> newConstructorForSerialization(jni::ref<java::lang::Class> cl) { return call_method<"newConstructorForSerialization", jni::ref<java::lang::reflect::Constructor>>(cl); }
	jni::ref<java::lang::invoke::MethodHandle> readObjectForSerialization(jni::ref<java::lang::Class> cl) { return call_method<"readObjectForSerialization", jni::ref<java::lang::invoke::MethodHandle>>(cl); }
	jni::ref<java::lang::invoke::MethodHandle> readObjectNoDataForSerialization(jni::ref<java::lang::Class> cl) { return call_method<"readObjectNoDataForSerialization", jni::ref<java::lang::invoke::MethodHandle>>(cl); }
	jni::ref<java::lang::invoke::MethodHandle> writeObjectForSerialization(jni::ref<java::lang::Class> cl) { return call_method<"writeObjectForSerialization", jni::ref<java::lang::invoke::MethodHandle>>(cl); }
	jni::ref<java::lang::invoke::MethodHandle> writeReplaceForSerialization(jni::ref<java::lang::Class> cl) { return call_method<"writeReplaceForSerialization", jni::ref<java::lang::invoke::MethodHandle>>(cl); }
	jni::ref<java::lang::invoke::MethodHandle> readResolveForSerialization(jni::ref<java::lang::Class> cl) { return call_method<"readResolveForSerialization", jni::ref<java::lang::invoke::MethodHandle>>(cl); }
	jboolean hasStaticInitializerForSerialization(jni::ref<java::lang::Class> cl) { return call_method<"hasStaticInitializerForSerialization", jboolean>(cl); }
	jni::ref<java::lang::reflect::Constructor> newOptionalDataExceptionForSerialization() { return call_method<"newOptionalDataExceptionForSerialization", jni::ref<java::lang::reflect::Constructor>>(); }

protected:

	ReflectionFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTIONFACTORY
