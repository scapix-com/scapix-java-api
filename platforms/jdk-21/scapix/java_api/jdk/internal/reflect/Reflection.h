// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTION_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::reflect { class Reflection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::reflect::Reflection>
{
	static constexpr fixed_string class_name = "jdk/internal/reflect/Reflection";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTION)
#define SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/IllegalAccessException.h>
#include <scapix/java_api/java/lang/Module.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::reflect::Reflection : public jni::object_base<"jdk/internal/reflect/Reflection",
	java::lang::Object>
{
public:

	static jni::ref<java::util::Set> ALL_MEMBERS() { return get_static_field<"ALL_MEMBERS", jni::ref<java::util::Set>>(); }

	static jni::ref<jdk::internal::reflect::Reflection> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::Class> getCallerClass() { return call_static_method<"getCallerClass", jni::ref<java::lang::Class>>(); }
	static jint getClassAccessFlags(jni::ref<java::lang::Class> p1) { return call_static_method<"getClassAccessFlags", jint>(p1); }
	static void ensureMemberAccess(jni::ref<java::lang::Class> currentClass, jni::ref<java::lang::Class> memberClass, jni::ref<java::lang::Class> targetClass, jint modifiers) { return call_static_method<"ensureMemberAccess", void>(currentClass, memberClass, targetClass, modifiers); }
	static void ensureNativeAccess(jni::ref<java::lang::Class> currentClass, jni::ref<java::lang::Class> owner, jni::ref<java::lang::String> methodName) { return call_static_method<"ensureNativeAccess", void>(currentClass, owner, methodName); }
	static jboolean verifyMemberAccess(jni::ref<java::lang::Class> currentClass, jni::ref<java::lang::Class> memberClass, jni::ref<java::lang::Class> targetClass, jint modifiers) { return call_static_method<"verifyMemberAccess", jboolean>(currentClass, memberClass, targetClass, modifiers); }
	static jboolean verifyPublicMemberAccess(jni::ref<java::lang::Class> memberClass, jint modifiers) { return call_static_method<"verifyPublicMemberAccess", jboolean>(memberClass, modifiers); }
	static jboolean verifyModuleAccess(jni::ref<java::lang::Module> currentModule, jni::ref<java::lang::Class> memberClass) { return call_static_method<"verifyModuleAccess", jboolean>(currentModule, memberClass); }
	static void registerFieldsToFilter(jni::ref<java::lang::Class> containingClass, jni::ref<java::util::Set> fieldNames) { return call_static_method<"registerFieldsToFilter", void>(containingClass, fieldNames); }
	static void registerMethodsToFilter(jni::ref<java::lang::Class> containingClass, jni::ref<java::util::Set> methodNames) { return call_static_method<"registerMethodsToFilter", void>(containingClass, methodNames); }
	static jni::ref<jni::array<java::lang::reflect::Field>> filterFields(jni::ref<java::lang::Class> containingClass, jni::ref<jni::array<java::lang::reflect::Field>> fields) { return call_static_method<"filterFields", jni::ref<jni::array<java::lang::reflect::Field>>>(containingClass, fields); }
	static jni::ref<jni::array<java::lang::reflect::Method>> filterMethods(jni::ref<java::lang::Class> containingClass, jni::ref<jni::array<java::lang::reflect::Method>> methods) { return call_static_method<"filterMethods", jni::ref<jni::array<java::lang::reflect::Method>>>(containingClass, methods); }
	static jboolean isCallerSensitive(jni::ref<java::lang::reflect::Method> m) { return call_static_method<"isCallerSensitive", jboolean>(m); }
	static jboolean isTrustedFinalField(jni::ref<java::lang::reflect::Field> field) { return call_static_method<"isTrustedFinalField", jboolean>(field); }
	static jni::ref<java::lang::IllegalAccessException> newIllegalAccessException(jni::ref<java::lang::Class> currentClass, jni::ref<java::lang::Class> memberClass, jni::ref<java::lang::Class> targetClass, jint modifiers) { return call_static_method<"newIllegalAccessException", jni::ref<java::lang::IllegalAccessException>>(currentClass, memberClass, targetClass, modifiers); }
	static jboolean areNestMates(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"areNestMates", jboolean>(p1, p2); }

protected:

	Reflection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_REFLECT_REFLECTION
