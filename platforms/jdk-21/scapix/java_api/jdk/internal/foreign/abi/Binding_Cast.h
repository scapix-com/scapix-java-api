// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/jdk/internal/foreign/abi/Binding.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_CAST_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_CAST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::foreign::abi { class Binding_Cast; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::foreign::abi::Binding_Cast>
{
	static constexpr fixed_string class_name = "jdk/internal/foreign/abi/Binding$Cast";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum, scapix::java_api::jdk::internal::foreign::abi::Binding>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_CAST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_CAST)
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_CAST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/foreign/SegmentAllocator.h>
#include <scapix/java_api/java/util/Deque.h>
#include <scapix/java_api/jdk/internal/foreign/abi/BindingInterpreter_LoadFunc.h>
#include <scapix/java_api/jdk/internal/foreign/abi/BindingInterpreter_StoreFunc.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::foreign::abi::Binding_Cast : public jni::object_base<"jdk/internal/foreign/abi/Binding$Cast",
	java::lang::Enum,
	jdk::internal::foreign::abi::Binding>
{
public:

	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> INT_TO_BOOLEAN() { return get_static_field<"INT_TO_BOOLEAN", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(); }
	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> INT_TO_BYTE() { return get_static_field<"INT_TO_BYTE", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(); }
	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> INT_TO_CHAR() { return get_static_field<"INT_TO_CHAR", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(); }
	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> INT_TO_SHORT() { return get_static_field<"INT_TO_SHORT", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(); }
	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> BOOLEAN_TO_INT() { return get_static_field<"BOOLEAN_TO_INT", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(); }
	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> BYTE_TO_INT() { return get_static_field<"BYTE_TO_INT", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(); }
	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> CHAR_TO_INT() { return get_static_field<"CHAR_TO_INT", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(); }
	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> SHORT_TO_INT() { return get_static_field<"SHORT_TO_INT", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(); }

	static jni::ref<jni::array<jdk::internal::foreign::abi::Binding_Cast>> values() { return call_static_method<"values", jni::ref<jni::array<jdk::internal::foreign::abi::Binding_Cast>>>(); }
	static jni::ref<jdk::internal::foreign::abi::Binding_Cast> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<jdk::internal::foreign::abi::Binding_Cast>>(name); }
	jni::ref<java::lang::Class> fromType() { return call_method<"fromType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> toType() { return call_method<"toType", jni::ref<java::lang::Class>>(); }
	void verify(jni::ref<java::util::Deque> stack) { return call_method<"verify", void>(stack); }
	void interpret(jni::ref<java::util::Deque> stack, jni::ref<jdk::internal::foreign::abi::BindingInterpreter_StoreFunc> storeFunc, jni::ref<jdk::internal::foreign::abi::BindingInterpreter_LoadFunc> loadFunc, jni::ref<java::lang::foreign::SegmentAllocator> allocator) { return call_method<"interpret", void>(stack, storeFunc, loadFunc, allocator); }

protected:

	Binding_Cast(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_CAST
