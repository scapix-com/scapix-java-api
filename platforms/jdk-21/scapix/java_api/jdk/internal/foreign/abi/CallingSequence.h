// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_CALLINGSEQUENCE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_CALLINGSEQUENCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::foreign::abi { class CallingSequence; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::foreign::abi::CallingSequence>
{
	static constexpr fixed_string class_name = "jdk/internal/foreign/abi/CallingSequence";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_CALLINGSEQUENCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_CALLINGSEQUENCE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_CALLINGSEQUENCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/foreign/FunctionDescriptor.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#include <scapix/java_api/jdk/internal/foreign/abi/LinkerOptions.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::foreign::abi::CallingSequence : public jni::object_base<"jdk/internal/foreign/abi/CallingSequence",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::foreign::abi::CallingSequence> new_object(jboolean forUpcall, jni::ref<java::lang::invoke::MethodType> callerMethodType, jni::ref<java::lang::invoke::MethodType> calleeMethodType, jni::ref<java::lang::foreign::FunctionDescriptor> desc, jboolean needsReturnBuffer, jlong returnBufferSize, jlong p7, jni::ref<java::util::List> allocationSize, jni::ref<java::util::List> p9, jni::ref<jdk::internal::foreign::abi::LinkerOptions> argumentBindings) { return base_::new_object(forUpcall, callerMethodType, calleeMethodType, desc, needsReturnBuffer, returnBufferSize, p7, allocationSize, p9, argumentBindings); }
	jint argumentBindingsCount() { return call_method<"argumentBindingsCount", jint>(); }
	jni::ref<java::util::List> argumentBindings(jint i) { return call_method<"argumentBindings", jni::ref<java::util::List>>(i); }
	jni::ref<java::util::stream::Stream> argumentBindings() { return call_method<"argumentBindings", jni::ref<java::util::stream::Stream>>(); }
	jni::ref<java::util::List> returnBindings() { return call_method<"returnBindings", jni::ref<java::util::List>>(); }
	jboolean forUpcall() { return call_method<"forUpcall", jboolean>(); }
	jboolean forDowncall() { return call_method<"forDowncall", jboolean>(); }
	jni::ref<java::lang::invoke::MethodType> callerMethodType() { return call_method<"callerMethodType", jni::ref<java::lang::invoke::MethodType>>(); }
	jni::ref<java::lang::invoke::MethodType> calleeMethodType() { return call_method<"calleeMethodType", jni::ref<java::lang::invoke::MethodType>>(); }
	jni::ref<java::lang::foreign::FunctionDescriptor> functionDesc() { return call_method<"functionDesc", jni::ref<java::lang::foreign::FunctionDescriptor>>(); }
	jboolean needsReturnBuffer() { return call_method<"needsReturnBuffer", jboolean>(); }
	jlong returnBufferSize() { return call_method<"returnBufferSize", jlong>(); }
	jlong allocationSize() { return call_method<"allocationSize", jlong>(); }
	jboolean hasReturnBindings() { return call_method<"hasReturnBindings", jboolean>(); }
	jint capturedStateMask() { return call_method<"capturedStateMask", jint>(); }
	jboolean needsTransition() { return call_method<"needsTransition", jboolean>(); }
	jint numLeadingParams() { return call_method<"numLeadingParams", jint>(); }
	jni::ref<java::lang::String> asString() { return call_method<"asString", jni::ref<java::lang::String>>(); }

protected:

	CallingSequence(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_CALLINGSEQUENCE
