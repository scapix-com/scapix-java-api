// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/foreign/MemorySegment_Scope.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_MEMORYSESSIONIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_MEMORYSESSIONIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::foreign { class MemorySessionImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::foreign::MemorySessionImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/foreign/MemorySessionImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::foreign::MemorySegment_Scope>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_MEMORYSESSIONIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_MEMORYSESSIONIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_MEMORYSESSIONIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/lang/foreign/Arena.h>
#include <scapix/java_api/java/lang/foreign/MemorySegment.h>
#include <scapix/java_api/java/lang/ref/Cleaner.h>
#include <scapix/java_api/jdk/internal/foreign/MemorySessionImpl_ResourceList_ResourceCleanup.h>
#include <scapix/java_api/jdk/internal/foreign/MemorySessionImpl_ResourceList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::foreign::MemorySessionImpl : public jni::object_base<"jdk/internal/foreign/MemorySessionImpl",
	java::lang::Object,
	java::lang::foreign::MemorySegment_Scope>
{
public:

	using ResourceList = MemorySessionImpl_ResourceList;

	static jni::ref<jdk::internal::foreign::MemorySessionImpl> GLOBAL() { return get_static_field<"GLOBAL", jni::ref<jdk::internal::foreign::MemorySessionImpl>>(); }

	jni::ref<java::lang::foreign::Arena> asArena() { return call_method<"asArena", jni::ref<java::lang::foreign::Arena>>(); }
	static jni::ref<jdk::internal::foreign::MemorySessionImpl> toMemorySession(jni::ref<java::lang::foreign::Arena> arena) { return call_static_method<"toMemorySession", jni::ref<jdk::internal::foreign::MemorySessionImpl>>(arena); }
	jboolean isCloseableBy(jni::ref<java::lang::Thread> thread) { return call_method<"isCloseableBy", jboolean>(thread); }
	void addCloseAction(jni::ref<java::lang::Runnable> runnable) { return call_method<"addCloseAction", void>(runnable); }
	void addOrCleanupIfFail(jni::ref<jdk::internal::foreign::MemorySessionImpl_ResourceList_ResourceCleanup> resource) { return call_method<"addOrCleanupIfFail", void>(resource); }
	static jni::ref<jdk::internal::foreign::MemorySessionImpl> createConfined(jni::ref<java::lang::Thread> thread) { return call_static_method<"createConfined", jni::ref<jdk::internal::foreign::MemorySessionImpl>>(thread); }
	static jni::ref<jdk::internal::foreign::MemorySessionImpl> createShared() { return call_static_method<"createShared", jni::ref<jdk::internal::foreign::MemorySessionImpl>>(); }
	static jni::ref<jdk::internal::foreign::MemorySessionImpl> createImplicit(jni::ref<java::lang::ref::Cleaner> cleaner) { return call_static_method<"createImplicit", jni::ref<jdk::internal::foreign::MemorySessionImpl>>(cleaner); }
	jni::ref<java::lang::foreign::MemorySegment> allocate(jlong byteSize, jlong p2) { return call_method<"allocate", jni::ref<java::lang::foreign::MemorySegment>>(byteSize, p2); }
	void release0() { return call_method<"release0", void>(); }
	void acquire0() { return call_method<"acquire0", void>(); }
	void whileAlive(jni::ref<java::lang::Runnable> action) { return call_method<"whileAlive", void>(action); }
	jni::ref<java::lang::Thread> ownerThread() { return call_method<"ownerThread", jni::ref<java::lang::Thread>>(); }
	jboolean isAccessibleBy(jni::ref<java::lang::Thread> thread) { return call_method<"isAccessibleBy", jboolean>(thread); }
	jboolean isAlive() { return call_method<"isAlive", jboolean>(); }
	void checkValidStateRaw() { return call_method<"checkValidStateRaw", void>(); }
	void checkValidState() { return call_method<"checkValidState", void>(); }
	static void checkValidState(jni::ref<java::lang::foreign::MemorySegment> segment) { return call_static_method<"checkValidState", void>(segment); }
	jboolean isCloseable() { return call_method<"isCloseable", jboolean>(); }
	void close() { return call_method<"close", void>(); }
	static jni::ref<jdk::internal::foreign::MemorySessionImpl> heapSession(jni::ref<java::lang::Object> ref) { return call_static_method<"heapSession", jni::ref<jdk::internal::foreign::MemorySessionImpl>>(ref); }

protected:

	MemorySessionImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_MEMORYSESSIONIMPL
