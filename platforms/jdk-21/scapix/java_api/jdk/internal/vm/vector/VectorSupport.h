// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_VM_VECTOR_VECTORSUPPORT_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_VM_VECTOR_VECTORSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::vm::vector { class VectorSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::vm::vector::VectorSupport>
{
	static constexpr fixed_string class_name = "jdk/internal/vm/vector/VectorSupport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_VM_VECTOR_VECTORSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_VM_VECTOR_VECTORSUPPORT)
#define SCAPIX_JAVA_API_JDK_INTERNAL_VM_VECTOR_VECTORSUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_BinaryOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_CompressExpandOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_FromBitsCoercedOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_IndexOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_IndexPartiallyInUpperRangeOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_LoadOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_LoadVectorMaskedOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_LoadVectorOperationWithMap.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_ReductionOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_ShuffleIotaOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_ShuffleToVectorOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_StoreVectorMaskedOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_StoreVectorOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_StoreVectorOperationWithMap.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_TernaryOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_UnaryOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VecExtractOp.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VecInsertOp.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_Vector.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorBlendOp.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorBroadcastIntOp.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorCompareOp.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorConvertOp.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorMask.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorMaskOp.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorPayload.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorRearrangeOp.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorShuffle.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorSpecies.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::vm::vector::VectorSupport : public jni::object_base<"jdk/internal/vm/vector/VectorSupport",
	java::lang::Object>
{
public:

	using FromBitsCoercedOperation = VectorSupport_FromBitsCoercedOperation;
	using VectorSpecies = VectorSupport_VectorSpecies;
	using VectorPayload = VectorSupport_VectorPayload;
	using IndexPartiallyInUpperRangeOperation = VectorSupport_IndexPartiallyInUpperRangeOperation;
	using VectorMask = VectorSupport_VectorMask;
	using ShuffleIotaOperation = VectorSupport_ShuffleIotaOperation;
	using VectorShuffle = VectorSupport_VectorShuffle;
	using ShuffleToVectorOperation = VectorSupport_ShuffleToVectorOperation;
	using Vector = VectorSupport_Vector;
	using IndexOperation = VectorSupport_IndexOperation;
	using ReductionOperation = VectorSupport_ReductionOperation;
	using VecExtractOp = VectorSupport_VecExtractOp;
	using VecInsertOp = VectorSupport_VecInsertOp;
	using UnaryOperation = VectorSupport_UnaryOperation;
	using BinaryOperation = VectorSupport_BinaryOperation;
	using TernaryOperation = VectorSupport_TernaryOperation;
	using LoadOperation = VectorSupport_LoadOperation;
	using LoadVectorMaskedOperation = VectorSupport_LoadVectorMaskedOperation;
	using LoadVectorOperationWithMap = VectorSupport_LoadVectorOperationWithMap;
	using StoreVectorOperation = VectorSupport_StoreVectorOperation;
	using StoreVectorMaskedOperation = VectorSupport_StoreVectorMaskedOperation;
	using StoreVectorOperationWithMap = VectorSupport_StoreVectorOperationWithMap;
	using VectorCompareOp = VectorSupport_VectorCompareOp;
	using VectorRearrangeOp = VectorSupport_VectorRearrangeOp;
	using VectorBlendOp = VectorSupport_VectorBlendOp;
	using VectorBroadcastIntOp = VectorSupport_VectorBroadcastIntOp;
	using VectorConvertOp = VectorSupport_VectorConvertOp;
	using CompressExpandOperation = VectorSupport_CompressExpandOperation;
	using VectorMaskOp = VectorSupport_VectorMaskOp;

	static jint VECTOR_OP_ABS() { return get_static_field<"VECTOR_OP_ABS", jint>(); }
	static jint VECTOR_OP_NEG() { return get_static_field<"VECTOR_OP_NEG", jint>(); }
	static jint VECTOR_OP_SQRT() { return get_static_field<"VECTOR_OP_SQRT", jint>(); }
	static jint VECTOR_OP_BIT_COUNT() { return get_static_field<"VECTOR_OP_BIT_COUNT", jint>(); }
	static jint VECTOR_OP_ADD() { return get_static_field<"VECTOR_OP_ADD", jint>(); }
	static jint VECTOR_OP_SUB() { return get_static_field<"VECTOR_OP_SUB", jint>(); }
	static jint VECTOR_OP_MUL() { return get_static_field<"VECTOR_OP_MUL", jint>(); }
	static jint VECTOR_OP_DIV() { return get_static_field<"VECTOR_OP_DIV", jint>(); }
	static jint VECTOR_OP_MIN() { return get_static_field<"VECTOR_OP_MIN", jint>(); }
	static jint VECTOR_OP_MAX() { return get_static_field<"VECTOR_OP_MAX", jint>(); }
	static jint VECTOR_OP_AND() { return get_static_field<"VECTOR_OP_AND", jint>(); }
	static jint VECTOR_OP_OR() { return get_static_field<"VECTOR_OP_OR", jint>(); }
	static jint VECTOR_OP_XOR() { return get_static_field<"VECTOR_OP_XOR", jint>(); }
	static jint VECTOR_OP_FMA() { return get_static_field<"VECTOR_OP_FMA", jint>(); }
	static jint VECTOR_OP_LSHIFT() { return get_static_field<"VECTOR_OP_LSHIFT", jint>(); }
	static jint VECTOR_OP_RSHIFT() { return get_static_field<"VECTOR_OP_RSHIFT", jint>(); }
	static jint VECTOR_OP_URSHIFT() { return get_static_field<"VECTOR_OP_URSHIFT", jint>(); }
	static jint VECTOR_OP_CAST() { return get_static_field<"VECTOR_OP_CAST", jint>(); }
	static jint VECTOR_OP_UCAST() { return get_static_field<"VECTOR_OP_UCAST", jint>(); }
	static jint VECTOR_OP_REINTERPRET() { return get_static_field<"VECTOR_OP_REINTERPRET", jint>(); }
	static jint VECTOR_OP_MASK_TRUECOUNT() { return get_static_field<"VECTOR_OP_MASK_TRUECOUNT", jint>(); }
	static jint VECTOR_OP_MASK_FIRSTTRUE() { return get_static_field<"VECTOR_OP_MASK_FIRSTTRUE", jint>(); }
	static jint VECTOR_OP_MASK_LASTTRUE() { return get_static_field<"VECTOR_OP_MASK_LASTTRUE", jint>(); }
	static jint VECTOR_OP_MASK_TOLONG() { return get_static_field<"VECTOR_OP_MASK_TOLONG", jint>(); }
	static jint VECTOR_OP_LROTATE() { return get_static_field<"VECTOR_OP_LROTATE", jint>(); }
	static jint VECTOR_OP_RROTATE() { return get_static_field<"VECTOR_OP_RROTATE", jint>(); }
	static jint VECTOR_OP_COMPRESS() { return get_static_field<"VECTOR_OP_COMPRESS", jint>(); }
	static jint VECTOR_OP_EXPAND() { return get_static_field<"VECTOR_OP_EXPAND", jint>(); }
	static jint VECTOR_OP_MASK_COMPRESS() { return get_static_field<"VECTOR_OP_MASK_COMPRESS", jint>(); }
	static jint VECTOR_OP_TZ_COUNT() { return get_static_field<"VECTOR_OP_TZ_COUNT", jint>(); }
	static jint VECTOR_OP_LZ_COUNT() { return get_static_field<"VECTOR_OP_LZ_COUNT", jint>(); }
	static jint VECTOR_OP_REVERSE() { return get_static_field<"VECTOR_OP_REVERSE", jint>(); }
	static jint VECTOR_OP_REVERSE_BYTES() { return get_static_field<"VECTOR_OP_REVERSE_BYTES", jint>(); }
	static jint VECTOR_OP_COMPRESS_BITS() { return get_static_field<"VECTOR_OP_COMPRESS_BITS", jint>(); }
	static jint VECTOR_OP_EXPAND_BITS() { return get_static_field<"VECTOR_OP_EXPAND_BITS", jint>(); }
	static jint VECTOR_OP_TAN() { return get_static_field<"VECTOR_OP_TAN", jint>(); }
	static jint VECTOR_OP_TANH() { return get_static_field<"VECTOR_OP_TANH", jint>(); }
	static jint VECTOR_OP_SIN() { return get_static_field<"VECTOR_OP_SIN", jint>(); }
	static jint VECTOR_OP_SINH() { return get_static_field<"VECTOR_OP_SINH", jint>(); }
	static jint VECTOR_OP_COS() { return get_static_field<"VECTOR_OP_COS", jint>(); }
	static jint VECTOR_OP_COSH() { return get_static_field<"VECTOR_OP_COSH", jint>(); }
	static jint VECTOR_OP_ASIN() { return get_static_field<"VECTOR_OP_ASIN", jint>(); }
	static jint VECTOR_OP_ACOS() { return get_static_field<"VECTOR_OP_ACOS", jint>(); }
	static jint VECTOR_OP_ATAN() { return get_static_field<"VECTOR_OP_ATAN", jint>(); }
	static jint VECTOR_OP_ATAN2() { return get_static_field<"VECTOR_OP_ATAN2", jint>(); }
	static jint VECTOR_OP_CBRT() { return get_static_field<"VECTOR_OP_CBRT", jint>(); }
	static jint VECTOR_OP_LOG() { return get_static_field<"VECTOR_OP_LOG", jint>(); }
	static jint VECTOR_OP_LOG10() { return get_static_field<"VECTOR_OP_LOG10", jint>(); }
	static jint VECTOR_OP_LOG1P() { return get_static_field<"VECTOR_OP_LOG1P", jint>(); }
	static jint VECTOR_OP_POW() { return get_static_field<"VECTOR_OP_POW", jint>(); }
	static jint VECTOR_OP_EXP() { return get_static_field<"VECTOR_OP_EXP", jint>(); }
	static jint VECTOR_OP_EXPM1() { return get_static_field<"VECTOR_OP_EXPM1", jint>(); }
	static jint VECTOR_OP_HYPOT() { return get_static_field<"VECTOR_OP_HYPOT", jint>(); }
	static jint BT_eq() { return get_static_field<"BT_eq", jint>(); }
	static jint BT_ne() { return get_static_field<"BT_ne", jint>(); }
	static jint BT_le() { return get_static_field<"BT_le", jint>(); }
	static jint BT_ge() { return get_static_field<"BT_ge", jint>(); }
	static jint BT_lt() { return get_static_field<"BT_lt", jint>(); }
	static jint BT_gt() { return get_static_field<"BT_gt", jint>(); }
	static jint BT_overflow() { return get_static_field<"BT_overflow", jint>(); }
	static jint BT_no_overflow() { return get_static_field<"BT_no_overflow", jint>(); }
	static jint BT_unsigned_compare() { return get_static_field<"BT_unsigned_compare", jint>(); }
	static jint BT_ule() { return get_static_field<"BT_ule", jint>(); }
	static jint BT_uge() { return get_static_field<"BT_uge", jint>(); }
	static jint BT_ult() { return get_static_field<"BT_ult", jint>(); }
	static jint BT_ugt() { return get_static_field<"BT_ugt", jint>(); }
	static jint MODE_BROADCAST() { return get_static_field<"MODE_BROADCAST", jint>(); }
	static jint MODE_BITS_COERCED_LONG_TO_MASK() { return get_static_field<"MODE_BITS_COERCED_LONG_TO_MASK", jint>(); }
	static jint T_FLOAT() { return get_static_field<"T_FLOAT", jint>(); }
	static jint T_DOUBLE() { return get_static_field<"T_DOUBLE", jint>(); }
	static jint T_BYTE() { return get_static_field<"T_BYTE", jint>(); }
	static jint T_SHORT() { return get_static_field<"T_SHORT", jint>(); }
	static jint T_INT() { return get_static_field<"T_INT", jint>(); }
	static jint T_LONG() { return get_static_field<"T_LONG", jint>(); }

	static jni::ref<jdk::internal::vm::vector::VectorSupport> new_object() { return base_::new_object(); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> fromBitsCoerced(jni::ref<java::lang::Class> vmClass, jni::ref<java::lang::Class> eClass, jint length, jlong bits, jint p5, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorSpecies> mode, jni::ref<jdk::internal::vm::vector::VectorSupport_FromBitsCoercedOperation> s) { return call_static_method<"fromBitsCoerced", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload>>(vmClass, eClass, length, bits, p5, mode, s); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> indexPartiallyInUpperRange(jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jlong offset, jlong p5, jni::ref<jdk::internal::vm::vector::VectorSupport_IndexPartiallyInUpperRangeOperation> limit) { return call_static_method<"indexPartiallyInUpperRange", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask>>(mClass, eClass, length, offset, p5, limit); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorShuffle> shuffleIota(jni::ref<java::lang::Class> eClass, jni::ref<java::lang::Class> shClass, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorSpecies> s, jint length, jint start, jint step, jint wrap, jni::ref<jdk::internal::vm::vector::VectorSupport_ShuffleIotaOperation> defaultImpl) { return call_static_method<"shuffleIota", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorShuffle>>(eClass, shClass, s, length, start, step, wrap, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> shuffleToVector(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> eClass, jni::ref<java::lang::Class> shClass, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorShuffle> sh, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_ShuffleToVectorOperation> defaultImpl) { return call_static_method<"shuffleToVector", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(vClass, eClass, shClass, sh, length, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> indexVector(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jint step, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorSpecies> s, jni::ref<jdk::internal::vm::vector::VectorSupport_IndexOperation> defaultImpl) { return call_static_method<"indexVector", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(vClass, eClass, length, v, step, s, defaultImpl); }
	static jlong reductionCoerced(jint oprId, jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_ReductionOperation> defaultImpl) { return call_static_method<"reductionCoerced", jlong>(oprId, vClass, mClass, eClass, length, v, m, defaultImpl); }
	static jlong extract(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jint i, jni::ref<jdk::internal::vm::vector::VectorSupport_VecExtractOp> defaultImpl) { return call_static_method<"extract", jlong>(vClass, eClass, length, v, i, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> insert(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jint i, jlong val, jni::ref<jdk::internal::vm::vector::VectorSupport_VecInsertOp> p7) { return call_static_method<"insert", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(vClass, eClass, length, v, i, val, p7); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> unaryOp(jint oprId, jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_UnaryOperation> defaultImpl) { return call_static_method<"unaryOp", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(oprId, vClass, mClass, eClass, length, v, m, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> binaryOp(jint oprId, jni::ref<java::lang::Class> vmClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> v1, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> v2, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_BinaryOperation> defaultImpl) { return call_static_method<"binaryOp", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload>>(oprId, vmClass, mClass, eClass, length, v1, v2, m, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> ternaryOp(jint oprId, jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v1, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v2, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v3, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_TernaryOperation> defaultImpl) { return call_static_method<"ternaryOp", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(oprId, vClass, mClass, eClass, length, v1, v2, v3, m, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> load(jni::ref<java::lang::Class> vmClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<java::lang::Object> base, jlong offset, jni::ref<java::lang::Object> p6, jlong container, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorSpecies> index, jni::ref<jdk::internal::vm::vector::VectorSupport_LoadOperation> p9) { return call_static_method<"load", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload>>(vmClass, eClass, length, base, offset, p6, container, index, p9); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> loadMasked(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<java::lang::Object> base, jlong offset, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> p7, jint m, jni::ref<java::lang::Object> offsetInRange, jlong container, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorSpecies> index, jni::ref<jdk::internal::vm::vector::VectorSupport_LoadVectorMaskedOperation> p12) { return call_static_method<"loadMasked", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(vClass, mClass, eClass, length, base, offset, p7, m, offsetInRange, container, index, p12); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> loadWithMap(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<java::lang::Class> vectorIndexClass, jni::ref<java::lang::Object> base, jlong offset, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> p8, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> index_vector, jni::ref<java::lang::Object> m, jint container, jni::ref<jni::array<jint>> index, jint indexMap, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorSpecies> indexM, jni::ref<jdk::internal::vm::vector::VectorSupport_LoadVectorOperationWithMap> s) { return call_static_method<"loadWithMap", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(vClass, mClass, eClass, length, vectorIndexClass, base, offset, p8, index_vector, m, container, index, indexMap, indexM, s); }
	static void store(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<java::lang::Object> base, jlong offset, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> p6, jni::ref<java::lang::Object> v, jlong container, jni::ref<jdk::internal::vm::vector::VectorSupport_StoreVectorOperation> index) { return call_static_method<"store", void>(vClass, eClass, length, base, offset, p6, v, container, index); }
	static void storeMasked(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<java::lang::Object> base, jlong offset, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> p7, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> v, jni::ref<java::lang::Object> m, jlong container, jni::ref<jdk::internal::vm::vector::VectorSupport_StoreVectorMaskedOperation> index) { return call_static_method<"storeMasked", void>(vClass, mClass, eClass, length, base, offset, p7, v, m, container, index); }
	static void storeWithMap(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<java::lang::Class> vectorIndexClass, jni::ref<java::lang::Object> base, jlong offset, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> p8, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> index_vector, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> v, jni::ref<java::lang::Object> m, jint container, jni::ref<jni::array<jint>> index, jint indexMap, jni::ref<jdk::internal::vm::vector::VectorSupport_StoreVectorOperationWithMap> indexM) { return call_static_method<"storeWithMap", void>(vClass, mClass, eClass, length, vectorIndexClass, base, offset, p8, index_vector, v, m, container, index, indexMap, indexM); }
	static jboolean test(jint cond, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m1, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m2, jni::ref<java::util::function::BiFunction> defaultImpl) { return call_static_method<"test", jboolean>(cond, mClass, eClass, length, m1, m2, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> compare(jint cond, jni::ref<java::lang::Class> vectorClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v1, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v2, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorCompareOp> defaultImpl) { return call_static_method<"compare", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask>>(cond, vectorClass, mClass, eClass, length, v1, v2, m, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> rearrangeOp(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> shClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorShuffle> sh, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorRearrangeOp> defaultImpl) { return call_static_method<"rearrangeOp", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(vClass, shClass, mClass, eClass, length, v, sh, m, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> blend(jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v1, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v2, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorBlendOp> defaultImpl) { return call_static_method<"blend", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(vClass, mClass, eClass, length, v1, v2, m, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> broadcastInt(jint opr, jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jint n, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorBroadcastIntOp> defaultImpl) { return call_static_method<"broadcastInt", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(opr, vClass, mClass, eClass, length, v, n, m, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> convert(jint oprId, jni::ref<java::lang::Class> fromVectorClass, jni::ref<java::lang::Class> fromeClass, jint fromVLen, jni::ref<java::lang::Class> toVectorClass, jni::ref<java::lang::Class> toeClass, jint toVLen, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> v, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorSpecies> s, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorConvertOp> defaultImpl) { return call_static_method<"convert", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload>>(oprId, fromVectorClass, fromeClass, fromVLen, toVectorClass, toeClass, toVLen, v, s, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> compressExpandOp(jint opr, jni::ref<java::lang::Class> vClass, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_CompressExpandOperation> defaultImpl) { return call_static_method<"compressExpandOp", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload>>(opr, vClass, mClass, eClass, length, v, m, defaultImpl); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> maybeRebox(jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload> v) { return call_static_method<"maybeRebox", jni::ref<jdk::internal::vm::vector::VectorSupport_VectorPayload>>(v); }
	static jlong maskReductionCoerced(jint oper, jni::ref<java::lang::Class> mClass, jni::ref<java::lang::Class> eClass, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMask> m, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorMaskOp> defaultImpl) { return call_static_method<"maskReductionCoerced", jlong>(oper, mClass, eClass, length, m, defaultImpl); }
	static jint getMaxLaneCount(jni::ref<java::lang::Class> p1) { return call_static_method<"getMaxLaneCount", jint>(p1); }
	static jboolean isNonCapturingLambda(jni::ref<java::lang::Object> o) { return call_static_method<"isNonCapturingLambda", jboolean>(o); }

protected:

	VectorSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_VM_VECTOR_VECTORSUPPORT
