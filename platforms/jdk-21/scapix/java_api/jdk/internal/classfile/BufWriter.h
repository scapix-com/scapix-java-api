// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_BUFWRITER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_BUFWRITER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile { class BufWriter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::BufWriter>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/BufWriter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_BUFWRITER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_BUFWRITER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_BUFWRITER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/ConstantPool.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/ConstantPoolBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/PoolEntry.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::BufWriter : public jni::object_base<"jdk/internal/classfile/BufWriter",
	java::lang::Object>
{
public:

	jni::ref<jdk::internal::classfile::constantpool::ConstantPoolBuilder> constantPool() { return call_method<"constantPool", jni::ref<jdk::internal::classfile::constantpool::ConstantPoolBuilder>>(); }
	jboolean canWriteDirect(jni::ref<jdk::internal::classfile::constantpool::ConstantPool> p1) { return call_method<"canWriteDirect", jboolean>(p1); }
	void reserveSpace(jint p1) { return call_method<"reserveSpace", void>(p1); }
	void writeU1(jint p1) { return call_method<"writeU1", void>(p1); }
	void writeU2(jint p1) { return call_method<"writeU2", void>(p1); }
	void writeInt(jint p1) { return call_method<"writeInt", void>(p1); }
	void writeFloat(jfloat p1) { return call_method<"writeFloat", void>(p1); }
	void writeLong(jlong p1) { return call_method<"writeLong", void>(p1); }
	void writeDouble(jdouble p1) { return call_method<"writeDouble", void>(p1); }
	void writeBytes(jni::ref<jni::array<jbyte>> p1) { return call_method<"writeBytes", void>(p1); }
	void writeBytes(jni::ref<jdk::internal::classfile::BufWriter> p1) { return call_method<"writeBytes", void>(p1); }
	void writeBytes(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"writeBytes", void>(p1, p2, p3); }
	void patchInt(jint p1, jint p2, jint p3) { return call_method<"patchInt", void>(p1, p2, p3); }
	void writeIntBytes(jint p1, jlong p2) { return call_method<"writeIntBytes", void>(p1, p2); }
	void writeIndex(jni::ref<jdk::internal::classfile::constantpool::PoolEntry> p1) { return call_method<"writeIndex", void>(p1); }
	void writeIndexOrZero(jni::ref<jdk::internal::classfile::constantpool::PoolEntry> p1) { return call_method<"writeIndexOrZero", void>(p1); }
	void writeList(jni::ref<java::util::List> p1) { return call_method<"writeList", void>(p1); }
	void writeListIndices(jni::ref<java::util::List> p1) { return call_method<"writeListIndices", void>(p1); }
	jint size() { return call_method<"size", jint>(); }
	jni::ref<java::nio::ByteBuffer> asByteBuffer() { return call_method<"asByteBuffer", jni::ref<java::nio::ByteBuffer>>(); }
	void copyTo(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_method<"copyTo", void>(p1, p2); }

protected:

	BufWriter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_BUFWRITER
