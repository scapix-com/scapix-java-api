// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/classfile/CompoundElement.h>
#include <scapix/java_api/jdk/internal/classfile/AttributedElement.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSMODEL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile { class ClassModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::ClassModel>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/ClassModel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::classfile::CompoundElement, scapix::java_api::jdk::internal::classfile::AttributedElement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSMODEL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/jdk/internal/classfile/AccessFlags.h>
#include <scapix/java_api/jdk/internal/classfile/ClassHierarchyResolver.h>
#include <scapix/java_api/jdk/internal/classfile/ClassTransform.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/ClassEntry.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/ConstantPool.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::ClassModel : public jni::object_base<"jdk/internal/classfile/ClassModel",
	java::lang::Object,
	jdk::internal::classfile::CompoundElement,
	jdk::internal::classfile::AttributedElement>
{
public:

	jni::ref<jdk::internal::classfile::constantpool::ConstantPool> constantPool() { return call_method<"constantPool", jni::ref<jdk::internal::classfile::constantpool::ConstantPool>>(); }
	jni::ref<jdk::internal::classfile::AccessFlags> flags() { return call_method<"flags", jni::ref<jdk::internal::classfile::AccessFlags>>(); }
	jni::ref<jdk::internal::classfile::constantpool::ClassEntry> thisClass() { return call_method<"thisClass", jni::ref<jdk::internal::classfile::constantpool::ClassEntry>>(); }
	jint majorVersion() { return call_method<"majorVersion", jint>(); }
	jint minorVersion() { return call_method<"minorVersion", jint>(); }
	jni::ref<java::util::List> fields() { return call_method<"fields", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> methods() { return call_method<"methods", jni::ref<java::util::List>>(); }
	jni::ref<java::util::Optional> superclass() { return call_method<"superclass", jni::ref<java::util::Optional>>(); }
	jni::ref<java::util::List> interfaces() { return call_method<"interfaces", jni::ref<java::util::List>>(); }
	jni::ref<jni::array<jbyte>> transform(jni::ref<jdk::internal::classfile::ClassTransform> p1) { return call_method<"transform", jni::ref<jni::array<jbyte>>>(p1); }
	jboolean isModuleInfo() { return call_method<"isModuleInfo", jboolean>(); }
	jni::ref<java::util::List> verify(jni::ref<java::util::function::Consumer> debugOutput) { return call_method<"verify", jni::ref<java::util::List>>(debugOutput); }
	jni::ref<java::util::List> verify(jni::ref<jdk::internal::classfile::ClassHierarchyResolver> classHierarchyResolver, jni::ref<java::util::function::Consumer> debugOutput) { return call_method<"verify", jni::ref<java::util::List>>(classHierarchyResolver, debugOutput); }

protected:

	ClassModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSMODEL
