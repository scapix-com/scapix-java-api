// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ATTRIBUTE_MODULEATTRIBUTE_MODULEATTRIBUTEBUILDER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ATTRIBUTE_MODULEATTRIBUTE_MODULEATTRIBUTEBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::attribute { class ModuleAttribute_ModuleAttributeBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/attribute/ModuleAttribute$ModuleAttributeBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ATTRIBUTE_MODULEATTRIBUTE_MODULEATTRIBUTEBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ATTRIBUTE_MODULEATTRIBUTE_MODULEATTRIBUTEBUILDER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ATTRIBUTE_MODULEATTRIBUTE_MODULEATTRIBUTEBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/lang/constant/ModuleDesc.h>
#include <scapix/java_api/java/lang/constant/PackageDesc.h>
#include <scapix/java_api/java/lang/reflect/AccessFlag.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/jdk/internal/classfile/attribute/ModuleAttribute.h>
#include <scapix/java_api/jdk/internal/classfile/attribute/ModuleExportInfo.h>
#include <scapix/java_api/jdk/internal/classfile/attribute/ModuleOpenInfo.h>
#include <scapix/java_api/jdk/internal/classfile/attribute/ModuleProvideInfo.h>
#include <scapix/java_api/jdk/internal/classfile/attribute/ModuleRequireInfo.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/ClassEntry.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder : public jni::object_base<"jdk/internal/classfile/attribute/ModuleAttribute$ModuleAttributeBuilder",
	java::lang::Object>
{
public:

	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> moduleName(jni::ref<java::lang::constant::ModuleDesc> p1) { return call_method<"moduleName", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> moduleFlags(jint p1) { return call_method<"moduleFlags", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> moduleFlags(jni::ref<jni::array<java::lang::reflect::AccessFlag>> moduleFlags) { return call_method<"moduleFlags", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(moduleFlags); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> moduleVersion(jni::ref<java::lang::String> p1) { return call_method<"moduleVersion", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> requires_(jni::ref<java::lang::constant::ModuleDesc> p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"requires", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1, p2, p3); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> requires_(jni::ref<java::lang::constant::ModuleDesc> module, jni::ref<java::util::Collection> requiresFlags, jni::ref<java::lang::String> version) { return call_method<"requires", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(module, requiresFlags, version); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> requires_(jni::ref<jdk::internal::classfile::attribute::ModuleRequireInfo> p1) { return call_method<"requires", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> exports(jni::ref<java::lang::constant::PackageDesc> p1, jint p2, jni::ref<jni::array<java::lang::constant::ModuleDesc>> p3) { return call_method<"exports", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1, p2, p3); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> exports(jni::ref<java::lang::constant::PackageDesc> pkge, jni::ref<java::util::Collection> exportsFlags, jni::ref<jni::array<java::lang::constant::ModuleDesc>> exportsToModules) { return call_method<"exports", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(pkge, exportsFlags, exportsToModules); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> exports(jni::ref<jdk::internal::classfile::attribute::ModuleExportInfo> p1) { return call_method<"exports", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> opens(jni::ref<java::lang::constant::PackageDesc> p1, jint p2, jni::ref<jni::array<java::lang::constant::ModuleDesc>> p3) { return call_method<"opens", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1, p2, p3); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> opens(jni::ref<java::lang::constant::PackageDesc> pkge, jni::ref<java::util::Collection> opensFlags, jni::ref<jni::array<java::lang::constant::ModuleDesc>> opensToModules) { return call_method<"opens", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(pkge, opensFlags, opensToModules); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> opens(jni::ref<jdk::internal::classfile::attribute::ModuleOpenInfo> p1) { return call_method<"opens", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> uses(jni::ref<java::lang::constant::ClassDesc> p1) { return call_method<"uses", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> uses(jni::ref<jdk::internal::classfile::constantpool::ClassEntry> p1) { return call_method<"uses", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> provides(jni::ref<java::lang::constant::ClassDesc> p1, jni::ref<jni::array<java::lang::constant::ClassDesc>> p2) { return call_method<"provides", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1, p2); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder> provides(jni::ref<jdk::internal::classfile::attribute::ModuleProvideInfo> p1) { return call_method<"provides", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute_ModuleAttributeBuilder>>(p1); }
	jni::ref<jdk::internal::classfile::attribute::ModuleAttribute> build() { return call_method<"build", jni::ref<jdk::internal::classfile::attribute::ModuleAttribute>>(); }

protected:

	ModuleAttribute_ModuleAttributeBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ATTRIBUTE_MODULEATTRIBUTE_MODULEATTRIBUTEBUILDER
