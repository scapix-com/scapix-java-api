// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/classfile/ClassElement.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSFILEVERSION_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSFILEVERSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile { class ClassfileVersion; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::ClassfileVersion>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/ClassfileVersion";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::classfile::ClassElement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSFILEVERSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSFILEVERSION)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSFILEVERSION

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::ClassfileVersion : public jni::object_base<"jdk/internal/classfile/ClassfileVersion",
	java::lang::Object,
	jdk::internal::classfile::ClassElement>
{
public:

	jint majorVersion() { return call_method<"majorVersion", jint>(); }
	jint minorVersion() { return call_method<"minorVersion", jint>(); }
	static jni::ref<jdk::internal::classfile::ClassfileVersion> of(jint majorVersion, jint minorVersion) { return call_static_method<"of", jni::ref<jdk::internal::classfile::ClassfileVersion>>(majorVersion, minorVersion); }

protected:

	ClassfileVersion(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_CLASSFILEVERSION
