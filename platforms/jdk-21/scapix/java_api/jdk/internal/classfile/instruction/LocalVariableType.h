// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/classfile/PseudoInstruction.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_INSTRUCTION_LOCALVARIABLETYPE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_INSTRUCTION_LOCALVARIABLETYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::instruction { class LocalVariableType; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::instruction::LocalVariableType>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/instruction/LocalVariableType";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::classfile::PseudoInstruction>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_INSTRUCTION_LOCALVARIABLETYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_INSTRUCTION_LOCALVARIABLETYPE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_INSTRUCTION_LOCALVARIABLETYPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/jdk/internal/classfile/BufWriter.h>
#include <scapix/java_api/jdk/internal/classfile/Label.h>
#include <scapix/java_api/jdk/internal/classfile/Signature.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/Utf8Entry.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::instruction::LocalVariableType : public jni::object_base<"jdk/internal/classfile/instruction/LocalVariableType",
	java::lang::Object,
	jdk::internal::classfile::PseudoInstruction>
{
public:

	jint slot() { return call_method<"slot", jint>(); }
	jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> name() { return call_method<"name", jni::ref<jdk::internal::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> signature() { return call_method<"signature", jni::ref<jdk::internal::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<jdk::internal::classfile::Signature> signatureSymbol() { return call_method<"signatureSymbol", jni::ref<jdk::internal::classfile::Signature>>(); }
	jni::ref<jdk::internal::classfile::Label> startScope() { return call_method<"startScope", jni::ref<jdk::internal::classfile::Label>>(); }
	jni::ref<jdk::internal::classfile::Label> endScope() { return call_method<"endScope", jni::ref<jdk::internal::classfile::Label>>(); }
	jboolean writeTo(jni::ref<jdk::internal::classfile::BufWriter> p1) { return call_method<"writeTo", jboolean>(p1); }
	static jni::ref<jdk::internal::classfile::instruction::LocalVariableType> of(jint slot, jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> nameEntry, jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> signatureEntry, jni::ref<jdk::internal::classfile::Label> startScope, jni::ref<jdk::internal::classfile::Label> endScope) { return call_static_method<"of", jni::ref<jdk::internal::classfile::instruction::LocalVariableType>>(slot, nameEntry, signatureEntry, startScope, endScope); }
	static jni::ref<jdk::internal::classfile::instruction::LocalVariableType> of(jint slot, jni::ref<java::lang::String> name, jni::ref<jdk::internal::classfile::Signature> signature, jni::ref<jdk::internal::classfile::Label> startScope, jni::ref<jdk::internal::classfile::Label> endScope) { return call_static_method<"of", jni::ref<jdk::internal::classfile::instruction::LocalVariableType>>(slot, name, signature, startScope, endScope); }

protected:

	LocalVariableType(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_INSTRUCTION_LOCALVARIABLETYPE
