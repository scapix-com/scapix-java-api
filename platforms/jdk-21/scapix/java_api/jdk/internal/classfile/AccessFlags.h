// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/classfile/ClassElement.h>
#include <scapix/java_api/jdk/internal/classfile/MethodElement.h>
#include <scapix/java_api/jdk/internal/classfile/FieldElement.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ACCESSFLAGS_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ACCESSFLAGS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile { class AccessFlags; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::AccessFlags>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/AccessFlags";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::classfile::ClassElement, scapix::java_api::jdk::internal::classfile::MethodElement, scapix::java_api::jdk::internal::classfile::FieldElement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ACCESSFLAGS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ACCESSFLAGS)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ACCESSFLAGS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/reflect/AccessFlag.h>
#include <scapix/java_api/java/lang/reflect/AccessFlag_Location.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::AccessFlags : public jni::object_base<"jdk/internal/classfile/AccessFlags",
	java::lang::Object,
	jdk::internal::classfile::ClassElement,
	jdk::internal::classfile::MethodElement,
	jdk::internal::classfile::FieldElement>
{
public:

	jint flagsMask() { return call_method<"flagsMask", jint>(); }
	jni::ref<java::util::Set> flags() { return call_method<"flags", jni::ref<java::util::Set>>(); }
	jboolean has(jni::ref<java::lang::reflect::AccessFlag> p1) { return call_method<"has", jboolean>(p1); }
	jni::ref<java::lang::reflect::AccessFlag_Location> location() { return call_method<"location", jni::ref<java::lang::reflect::AccessFlag_Location>>(); }
	static jni::ref<jdk::internal::classfile::AccessFlags> ofClass(jint mask) { return call_static_method<"ofClass", jni::ref<jdk::internal::classfile::AccessFlags>>(mask); }
	static jni::ref<jdk::internal::classfile::AccessFlags> ofClass(jni::ref<jni::array<java::lang::reflect::AccessFlag>> flags) { return call_static_method<"ofClass", jni::ref<jdk::internal::classfile::AccessFlags>>(flags); }
	static jni::ref<jdk::internal::classfile::AccessFlags> ofField(jint mask) { return call_static_method<"ofField", jni::ref<jdk::internal::classfile::AccessFlags>>(mask); }
	static jni::ref<jdk::internal::classfile::AccessFlags> ofField(jni::ref<jni::array<java::lang::reflect::AccessFlag>> flags) { return call_static_method<"ofField", jni::ref<jdk::internal::classfile::AccessFlags>>(flags); }
	static jni::ref<jdk::internal::classfile::AccessFlags> ofMethod(jint mask) { return call_static_method<"ofMethod", jni::ref<jdk::internal::classfile::AccessFlags>>(mask); }
	static jni::ref<jdk::internal::classfile::AccessFlags> ofMethod(jni::ref<jni::array<java::lang::reflect::AccessFlag>> flags) { return call_static_method<"ofMethod", jni::ref<jdk::internal::classfile::AccessFlags>>(flags); }

protected:

	AccessFlags(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_ACCESSFLAGS
