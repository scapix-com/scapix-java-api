// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/classfile/CodeBuilder_CatchBuilder.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CATCHBUILDERIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CATCHBUILDERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class CatchBuilderImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::CatchBuilderImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/CatchBuilderImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::classfile::CodeBuilder_CatchBuilder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CATCHBUILDERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CATCHBUILDERIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CATCHBUILDERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/jdk/internal/classfile/CodeBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/Label.h>
#include <scapix/java_api/jdk/internal/classfile/impl/BlockCodeBuilderImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::CatchBuilderImpl : public jni::object_base<"jdk/internal/classfile/impl/CatchBuilderImpl",
	java::lang::Object,
	jdk::internal::classfile::CodeBuilder_CatchBuilder>
{
public:

	static jni::ref<jdk::internal::classfile::impl::CatchBuilderImpl> new_object(jni::ref<jdk::internal::classfile::CodeBuilder> b, jni::ref<jdk::internal::classfile::impl::BlockCodeBuilderImpl> tryBlock, jni::ref<jdk::internal::classfile::Label> tryCatchEnd) { return base_::new_object(b, tryBlock, tryCatchEnd); }
	jni::ref<jdk::internal::classfile::CodeBuilder_CatchBuilder> catching(jni::ref<java::lang::constant::ClassDesc> exceptionType, jni::ref<java::util::function::Consumer> catchHandler) { return call_method<"catching", jni::ref<jdk::internal::classfile::CodeBuilder_CatchBuilder>>(exceptionType, catchHandler); }
	jni::ref<jdk::internal::classfile::CodeBuilder_CatchBuilder> catchingMulti(jni::ref<java::util::List> exceptionTypes, jni::ref<java::util::function::Consumer> catchHandler) { return call_method<"catchingMulti", jni::ref<jdk::internal::classfile::CodeBuilder_CatchBuilder>>(exceptionTypes, catchHandler); }
	void catchingAll(jni::ref<java::util::function::Consumer> catchAllHandler) { return call_method<"catchingAll", void>(catchAllHandler); }
	void finish() { return call_method<"finish", void>(); }

protected:

	CatchBuilderImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CATCHBUILDERIMPL
