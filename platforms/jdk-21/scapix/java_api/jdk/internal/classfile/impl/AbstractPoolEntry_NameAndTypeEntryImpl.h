// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractPoolEntry_AbstractRefsEntry.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/NameAndTypeEntry.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPOOLENTRY_NAMEANDTYPEENTRYIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPOOLENTRY_NAMEANDTYPEENTRYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class AbstractPoolEntry_NameAndTypeEntryImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::AbstractPoolEntry_NameAndTypeEntryImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/AbstractPoolEntry$NameAndTypeEntryImpl";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractPoolEntry_AbstractRefsEntry, scapix::java_api::jdk::internal::classfile::constantpool::NameAndTypeEntry>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPOOLENTRY_NAMEANDTYPEENTRYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPOOLENTRY_NAMEANDTYPEENTRYIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPOOLENTRY_NAMEANDTYPEENTRYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/lang/constant/MethodTypeDesc.h>
#include <scapix/java_api/java/lang/invoke/TypeDescriptor.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/ConstantPoolBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/Utf8Entry.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::AbstractPoolEntry_NameAndTypeEntryImpl : public jni::object_base<"jdk/internal/classfile/impl/AbstractPoolEntry$NameAndTypeEntryImpl",
	jdk::internal::classfile::impl::AbstractPoolEntry_AbstractRefsEntry,
	jdk::internal::classfile::constantpool::NameAndTypeEntry>
{
public:

	jni::ref<java::lang::invoke::TypeDescriptor> typeSym() { return get_field<"typeSym", jni::ref<java::lang::invoke::TypeDescriptor>>(); }
	void typeSym(jni::ref<java::lang::invoke::TypeDescriptor> v) { set_field<"typeSym", jni::ref<java::lang::invoke::TypeDescriptor>>(v); }

	jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> name() { return call_method<"name", jni::ref<jdk::internal::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> type() { return call_method<"type", jni::ref<jdk::internal::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<java::lang::constant::ClassDesc> fieldTypeSymbol() { return call_method<"fieldTypeSymbol", jni::ref<java::lang::constant::ClassDesc>>(); }
	jni::ref<java::lang::constant::MethodTypeDesc> methodTypeSymbol() { return call_method<"methodTypeSymbol", jni::ref<java::lang::constant::MethodTypeDesc>>(); }
	jni::ref<jdk::internal::classfile::constantpool::NameAndTypeEntry> clone(jni::ref<jdk::internal::classfile::constantpool::ConstantPoolBuilder> cp) { return call_method<"clone", jni::ref<jdk::internal::classfile::constantpool::NameAndTypeEntry>>(cp); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }

protected:

	AbstractPoolEntry_NameAndTypeEntryImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPOOLENTRY_NAMEANDTYPEENTRYIMPL
