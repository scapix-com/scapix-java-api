// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/classfile/ClassBuilder.h>
#include <scapix/java_api/java/util/function/Consumer.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CHAINEDCLASSBUILDER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CHAINEDCLASSBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class ChainedClassBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::ChainedClassBuilder>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/ChainedClassBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::classfile::ClassBuilder, scapix::java_api::java::util::function::Consumer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CHAINEDCLASSBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CHAINEDCLASSBUILDER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CHAINEDCLASSBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/jdk/internal/classfile/ClassElement.h>
#include <scapix/java_api/jdk/internal/classfile/FieldModel.h>
#include <scapix/java_api/jdk/internal/classfile/FieldTransform.h>
#include <scapix/java_api/jdk/internal/classfile/MethodModel.h>
#include <scapix/java_api/jdk/internal/classfile/MethodTransform.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/ConstantPoolBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/Utf8Entry.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::ChainedClassBuilder : public jni::object_base<"jdk/internal/classfile/impl/ChainedClassBuilder",
	java::lang::Object,
	jdk::internal::classfile::ClassBuilder,
	java::util::function::Consumer>
{
public:

	static jni::ref<jdk::internal::classfile::impl::ChainedClassBuilder> new_object(jni::ref<jdk::internal::classfile::ClassBuilder> downstream, jni::ref<java::util::function::Consumer> consumer) { return base_::new_object(downstream, consumer); }
	jni::ref<jdk::internal::classfile::ClassBuilder> with(jni::ref<jdk::internal::classfile::ClassElement> element) { return call_method<"with", jni::ref<jdk::internal::classfile::ClassBuilder>>(element); }
	jni::ref<java::util::Optional> original() { return call_method<"original", jni::ref<java::util::Optional>>(); }
	jni::ref<jdk::internal::classfile::ClassBuilder> withField(jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> name, jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> descriptor, jni::ref<java::util::function::Consumer> handler) { return call_method<"withField", jni::ref<jdk::internal::classfile::ClassBuilder>>(name, descriptor, handler); }
	jni::ref<jdk::internal::classfile::ClassBuilder> transformField(jni::ref<jdk::internal::classfile::FieldModel> field, jni::ref<jdk::internal::classfile::FieldTransform> transform) { return call_method<"transformField", jni::ref<jdk::internal::classfile::ClassBuilder>>(field, transform); }
	jni::ref<jdk::internal::classfile::ClassBuilder> withMethod(jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> name, jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> descriptor, jint flags, jni::ref<java::util::function::Consumer> handler) { return call_method<"withMethod", jni::ref<jdk::internal::classfile::ClassBuilder>>(name, descriptor, flags, handler); }
	jni::ref<jdk::internal::classfile::ClassBuilder> transformMethod(jni::ref<jdk::internal::classfile::MethodModel> method, jni::ref<jdk::internal::classfile::MethodTransform> transform) { return call_method<"transformMethod", jni::ref<jdk::internal::classfile::ClassBuilder>>(method, transform); }
	jni::ref<jdk::internal::classfile::constantpool::ConstantPoolBuilder> constantPool() { return call_method<"constantPool", jni::ref<jdk::internal::classfile::constantpool::ConstantPoolBuilder>>(); }

protected:

	ChainedClassBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CHAINEDCLASSBUILDER
