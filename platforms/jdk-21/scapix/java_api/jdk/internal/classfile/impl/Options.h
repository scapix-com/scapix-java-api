// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_OPTIONS_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_OPTIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class Options; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::Options>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/Options";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_OPTIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_OPTIONS)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_OPTIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/jdk/internal/classfile/ClassHierarchyResolver.h>
#include <scapix/java_api/jdk/internal/classfile/impl/Options_OptionValue.h>
#include <scapix/java_api/jdk/internal/classfile/impl/Options_Key.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::Options : public jni::object_base<"jdk/internal/classfile/impl/Options",
	java::lang::Object>
{
public:

	using OptionValue = Options_OptionValue;
	using Key = Options_Key;

	jni::ref<java::lang::Boolean> generateStackmaps() { return get_field<"generateStackmaps", jni::ref<java::lang::Boolean>>(); }
	void generateStackmaps(jni::ref<java::lang::Boolean> v) { set_field<"generateStackmaps", jni::ref<java::lang::Boolean>>(v); }
	jni::ref<java::lang::Boolean> processDebug() { return get_field<"processDebug", jni::ref<java::lang::Boolean>>(); }
	void processDebug(jni::ref<java::lang::Boolean> v) { set_field<"processDebug", jni::ref<java::lang::Boolean>>(v); }
	jni::ref<java::lang::Boolean> processLineNumbers() { return get_field<"processLineNumbers", jni::ref<java::lang::Boolean>>(); }
	void processLineNumbers(jni::ref<java::lang::Boolean> v) { set_field<"processLineNumbers", jni::ref<java::lang::Boolean>>(v); }
	jni::ref<java::lang::Boolean> processUnknownAttributes() { return get_field<"processUnknownAttributes", jni::ref<java::lang::Boolean>>(); }
	void processUnknownAttributes(jni::ref<java::lang::Boolean> v) { set_field<"processUnknownAttributes", jni::ref<java::lang::Boolean>>(v); }
	jni::ref<java::lang::Boolean> cpSharing() { return get_field<"cpSharing", jni::ref<java::lang::Boolean>>(); }
	void cpSharing(jni::ref<java::lang::Boolean> v) { set_field<"cpSharing", jni::ref<java::lang::Boolean>>(v); }
	jni::ref<java::lang::Boolean> fixJumps() { return get_field<"fixJumps", jni::ref<java::lang::Boolean>>(); }
	void fixJumps(jni::ref<java::lang::Boolean> v) { set_field<"fixJumps", jni::ref<java::lang::Boolean>>(v); }
	jni::ref<java::lang::Boolean> patchCode() { return get_field<"patchCode", jni::ref<java::lang::Boolean>>(); }
	void patchCode(jni::ref<java::lang::Boolean> v) { set_field<"patchCode", jni::ref<java::lang::Boolean>>(v); }
	jni::ref<java::lang::Boolean> filterDeadLabels() { return get_field<"filterDeadLabels", jni::ref<java::lang::Boolean>>(); }
	void filterDeadLabels(jni::ref<java::lang::Boolean> v) { set_field<"filterDeadLabels", jni::ref<java::lang::Boolean>>(v); }
	jni::ref<jdk::internal::classfile::ClassHierarchyResolver> classHierarchyResolver() { return get_field<"classHierarchyResolver", jni::ref<jdk::internal::classfile::ClassHierarchyResolver>>(); }
	void classHierarchyResolver(jni::ref<jdk::internal::classfile::ClassHierarchyResolver> v) { set_field<"classHierarchyResolver", jni::ref<jdk::internal::classfile::ClassHierarchyResolver>>(v); }
	jni::ref<java::util::function::Function> attributeMapper() { return get_field<"attributeMapper", jni::ref<java::util::function::Function>>(); }
	void attributeMapper(jni::ref<java::util::function::Function> v) { set_field<"attributeMapper", jni::ref<java::util::function::Function>>(v); }

	static jni::ref<jdk::internal::classfile::impl::Options> new_object(jni::ref<java::util::Collection> options) { return base_::new_object(options); }

protected:

	Options(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_OPTIONS
