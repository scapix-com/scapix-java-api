// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/classfile/impl/TerminalCodeBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/impl/LabelContext.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BUFFEREDCODEBUILDER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BUFFEREDCODEBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class BufferedCodeBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::BufferedCodeBuilder>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/BufferedCodeBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::classfile::impl::TerminalCodeBuilder, scapix::java_api::jdk::internal::classfile::impl::LabelContext>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BUFFEREDCODEBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BUFFEREDCODEBUILDER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BUFFEREDCODEBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/jdk/internal/classfile/CodeBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/CodeElement.h>
#include <scapix/java_api/jdk/internal/classfile/CodeModel.h>
#include <scapix/java_api/jdk/internal/classfile/Label.h>
#include <scapix/java_api/jdk/internal/classfile/TypeKind.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/ConstantPoolBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/impl/MethodInfo.h>
#include <scapix/java_api/jdk/internal/classfile/impl/SplitConstantPool.h>
#include <scapix/java_api/jdk/internal/classfile/impl/BufferedCodeBuilder_Model.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::BufferedCodeBuilder : public jni::object_base<"jdk/internal/classfile/impl/BufferedCodeBuilder",
	java::lang::Object,
	jdk::internal::classfile::impl::TerminalCodeBuilder,
	jdk::internal::classfile::impl::LabelContext>
{
public:

	using Model = BufferedCodeBuilder_Model;

	static jni::ref<jdk::internal::classfile::impl::BufferedCodeBuilder> new_object(jni::ref<jdk::internal::classfile::impl::MethodInfo> methodInfo, jni::ref<jdk::internal::classfile::impl::SplitConstantPool> constantPool, jni::ref<jdk::internal::classfile::CodeModel> original) { return base_::new_object(methodInfo, constantPool, original); }
	jni::ref<java::util::Optional> original() { return call_method<"original", jni::ref<java::util::Optional>>(); }
	jni::ref<jdk::internal::classfile::Label> newLabel() { return call_method<"newLabel", jni::ref<jdk::internal::classfile::Label>>(); }
	jni::ref<jdk::internal::classfile::Label> startLabel() { return call_method<"startLabel", jni::ref<jdk::internal::classfile::Label>>(); }
	jni::ref<jdk::internal::classfile::Label> endLabel() { return call_method<"endLabel", jni::ref<jdk::internal::classfile::Label>>(); }
	jint receiverSlot() { return call_method<"receiverSlot", jint>(); }
	jint parameterSlot(jint paramNo) { return call_method<"parameterSlot", jint>(paramNo); }
	jint curTopLocal() { return call_method<"curTopLocal", jint>(); }
	jint allocateLocal(jni::ref<jdk::internal::classfile::TypeKind> typeKind) { return call_method<"allocateLocal", jint>(typeKind); }
	jni::ref<jdk::internal::classfile::Label> getLabel(jint bci) { return call_method<"getLabel", jni::ref<jdk::internal::classfile::Label>>(bci); }
	jint labelToBci(jni::ref<jdk::internal::classfile::Label> label) { return call_method<"labelToBci", jint>(label); }
	void setLabelTarget(jni::ref<jdk::internal::classfile::Label> label, jint bci) { return call_method<"setLabelTarget", void>(label, bci); }
	jni::ref<jdk::internal::classfile::constantpool::ConstantPoolBuilder> constantPool() { return call_method<"constantPool", jni::ref<jdk::internal::classfile::constantpool::ConstantPoolBuilder>>(); }
	jni::ref<jdk::internal::classfile::CodeBuilder> with(jni::ref<jdk::internal::classfile::CodeElement> element) { return call_method<"with", jni::ref<jdk::internal::classfile::CodeBuilder>>(element); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<jdk::internal::classfile::impl::BufferedCodeBuilder> run(jni::ref<java::util::function::Consumer> handler) { return call_method<"run", jni::ref<jdk::internal::classfile::impl::BufferedCodeBuilder>>(handler); }
	jni::ref<jdk::internal::classfile::CodeModel> toModel() { return call_method<"toModel", jni::ref<jdk::internal::classfile::CodeModel>>(); }

protected:

	BufferedCodeBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BUFFEREDCODEBUILDER
