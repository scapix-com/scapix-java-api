// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/classfile/components/CodeStackTracker.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODESTACKTRACKERIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODESTACKTRACKERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class CodeStackTrackerImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::CodeStackTrackerImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/CodeStackTrackerImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::classfile::components::CodeStackTracker>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODESTACKTRACKERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODESTACKTRACKERIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODESTACKTRACKERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/jdk/internal/classfile/CodeBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/CodeElement.h>
#include <scapix/java_api/jdk/internal/classfile/TypeKind.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::CodeStackTrackerImpl : public jni::object_base<"jdk/internal/classfile/impl/CodeStackTrackerImpl",
	java::lang::Object,
	jdk::internal::classfile::components::CodeStackTracker>
{
public:

	static jni::ref<jdk::internal::classfile::impl::CodeStackTrackerImpl> new_object(jni::ref<jni::array<jdk::internal::classfile::TypeKind>> initialStack) { return base_::new_object(initialStack); }
	jni::ref<java::util::Optional> stack() { return call_method<"stack", jni::ref<java::util::Optional>>(); }
	jni::ref<java::util::Optional> maxStackSize() { return call_method<"maxStackSize", jni::ref<java::util::Optional>>(); }
	void accept(jni::ref<jdk::internal::classfile::CodeBuilder> cb, jni::ref<jdk::internal::classfile::CodeElement> el) { return call_method<"accept", void>(cb, el); }

protected:

	CodeStackTrackerImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODESTACKTRACKERIMPL
