// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractPseudoInstruction_AbstractLocalPseudo.h>
#include <scapix/java_api/jdk/internal/classfile/instruction/LocalVariable.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDLOCALVARIABLE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDLOCALVARIABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class AbstractPseudoInstruction_UnboundLocalVariable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::AbstractPseudoInstruction_UnboundLocalVariable>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/AbstractPseudoInstruction$UnboundLocalVariable";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractPseudoInstruction_AbstractLocalPseudo, scapix::java_api::jdk::internal::classfile::instruction::LocalVariable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDLOCALVARIABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDLOCALVARIABLE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDLOCALVARIABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/jdk/internal/classfile/Label.h>
#include <scapix/java_api/jdk/internal/classfile/constantpool/Utf8Entry.h>
#include <scapix/java_api/jdk/internal/classfile/impl/DirectCodeBuilder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::AbstractPseudoInstruction_UnboundLocalVariable : public jni::object_base<"jdk/internal/classfile/impl/AbstractPseudoInstruction$UnboundLocalVariable",
	jdk::internal::classfile::impl::AbstractPseudoInstruction_AbstractLocalPseudo,
	jdk::internal::classfile::instruction::LocalVariable>
{
public:

	static jni::ref<jdk::internal::classfile::impl::AbstractPseudoInstruction_UnboundLocalVariable> new_object(jint slot, jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> name, jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> descriptor, jni::ref<jdk::internal::classfile::Label> startScope, jni::ref<jdk::internal::classfile::Label> endScope) { return base_::new_object(slot, name, descriptor, startScope, endScope); }
	jni::ref<jdk::internal::classfile::constantpool::Utf8Entry> type() { return call_method<"type", jni::ref<jdk::internal::classfile::constantpool::Utf8Entry>>(); }
	void writeTo(jni::ref<jdk::internal::classfile::impl::DirectCodeBuilder> writer) { return call_method<"writeTo", void>(writer); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AbstractPseudoInstruction_UnboundLocalVariable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDLOCALVARIABLE
