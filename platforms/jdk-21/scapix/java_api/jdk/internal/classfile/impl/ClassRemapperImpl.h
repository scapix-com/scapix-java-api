// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Record.h>
#include <scapix/java_api/jdk/internal/classfile/components/ClassRemapper.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSREMAPPERIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSREMAPPERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class ClassRemapperImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::ClassRemapperImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/ClassRemapperImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Record, scapix::java_api::jdk::internal::classfile::components::ClassRemapper>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSREMAPPERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSREMAPPERIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSREMAPPERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/jdk/internal/classfile/ClassBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/ClassElement.h>
#include <scapix/java_api/jdk/internal/classfile/CodeTransform.h>
#include <scapix/java_api/jdk/internal/classfile/FieldTransform.h>
#include <scapix/java_api/jdk/internal/classfile/MethodTransform.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::ClassRemapperImpl : public jni::object_base<"jdk/internal/classfile/impl/ClassRemapperImpl",
	java::lang::Record,
	jdk::internal::classfile::components::ClassRemapper>
{
public:

	static jni::ref<jdk::internal::classfile::impl::ClassRemapperImpl> new_object(jni::ref<java::util::function::Function> mapFunction) { return base_::new_object(mapFunction); }
	void accept(jni::ref<jdk::internal::classfile::ClassBuilder> clb, jni::ref<jdk::internal::classfile::ClassElement> cle) { return call_method<"accept", void>(clb, cle); }
	jni::ref<jdk::internal::classfile::FieldTransform> asFieldTransform() { return call_method<"asFieldTransform", jni::ref<jdk::internal::classfile::FieldTransform>>(); }
	jni::ref<jdk::internal::classfile::MethodTransform> asMethodTransform() { return call_method<"asMethodTransform", jni::ref<jdk::internal::classfile::MethodTransform>>(); }
	jni::ref<jdk::internal::classfile::CodeTransform> asCodeTransform() { return call_method<"asCodeTransform", jni::ref<jdk::internal::classfile::CodeTransform>>(); }
	jni::ref<java::lang::constant::ClassDesc> map(jni::ref<java::lang::constant::ClassDesc> desc) { return call_method<"map", jni::ref<java::lang::constant::ClassDesc>>(desc); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jni::ref<java::util::function::Function> mapFunction() { return call_method<"mapFunction", jni::ref<java::util::function::Function>>(); }

protected:

	ClassRemapperImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSREMAPPERIMPL
