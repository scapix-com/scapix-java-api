// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractPseudoInstruction.h>
#include <scapix/java_api/jdk/internal/classfile/instruction/CharacterRange.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDCHARACTERRANGE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDCHARACTERRANGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class AbstractPseudoInstruction_UnboundCharacterRange; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::AbstractPseudoInstruction_UnboundCharacterRange>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/AbstractPseudoInstruction$UnboundCharacterRange";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractPseudoInstruction, scapix::java_api::jdk::internal::classfile::instruction::CharacterRange>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDCHARACTERRANGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDCHARACTERRANGE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDCHARACTERRANGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/jdk/internal/classfile/Label.h>
#include <scapix/java_api/jdk/internal/classfile/impl/DirectCodeBuilder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::AbstractPseudoInstruction_UnboundCharacterRange : public jni::object_base<"jdk/internal/classfile/impl/AbstractPseudoInstruction$UnboundCharacterRange",
	jdk::internal::classfile::impl::AbstractPseudoInstruction,
	jdk::internal::classfile::instruction::CharacterRange>
{
public:

	jni::ref<jdk::internal::classfile::Label> startScope_() { return get_field<"startScope", jni::ref<jdk::internal::classfile::Label>>(); }
	jni::ref<jdk::internal::classfile::Label> endScope_() { return get_field<"endScope", jni::ref<jdk::internal::classfile::Label>>(); }
	jint characterRangeStart_() { return get_field<"characterRangeStart", jint>(); }
	jint characterRangeEnd_() { return get_field<"characterRangeEnd", jint>(); }
	jint flags_() { return get_field<"flags", jint>(); }

	static jni::ref<jdk::internal::classfile::impl::AbstractPseudoInstruction_UnboundCharacterRange> new_object(jni::ref<jdk::internal::classfile::Label> startScope, jni::ref<jdk::internal::classfile::Label> endScope, jint characterRangeStart, jint characterRangeEnd, jint flags) { return base_::new_object(startScope, endScope, characterRangeStart, characterRangeEnd, flags); }
	jni::ref<jdk::internal::classfile::Label> startScope() { return call_method<"startScope", jni::ref<jdk::internal::classfile::Label>>(); }
	jni::ref<jdk::internal::classfile::Label> endScope() { return call_method<"endScope", jni::ref<jdk::internal::classfile::Label>>(); }
	jint characterRangeStart() { return call_method<"characterRangeStart", jint>(); }
	jint characterRangeEnd() { return call_method<"characterRangeEnd", jint>(); }
	jint flags() { return call_method<"flags", jint>(); }
	void writeTo(jni::ref<jdk::internal::classfile::impl::DirectCodeBuilder> writer) { return call_method<"writeTo", void>(writer); }

protected:

	AbstractPseudoInstruction_UnboundCharacterRange(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_UNBOUNDCHARACTERRANGE
