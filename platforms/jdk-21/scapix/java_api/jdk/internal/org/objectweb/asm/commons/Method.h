// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_METHOD_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_METHOD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::commons { class Method; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::commons::Method>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/commons/Method";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_METHOD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_METHOD)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_METHOD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Type.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::commons::Method : public jni::object_base<"jdk/internal/org/objectweb/asm/commons/Method",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> new_object(jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor) { return base_::new_object(name, descriptor); }
	static jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> new_object(jni::ref<java::lang::String> name, jni::ref<jdk::internal::org::objectweb::asm_::Type> returnType, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>> argumentTypes) { return base_::new_object(name, returnType, argumentTypes); }
	static jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> getMethod(jni::ref<java::lang::reflect::Method> method) { return call_static_method<"getMethod", jni::ref<jdk::internal::org::objectweb::asm_::commons::Method>>(method); }
	static jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> getMethod(jni::ref<java::lang::reflect::Constructor> constructor) { return call_static_method<"getMethod", jni::ref<jdk::internal::org::objectweb::asm_::commons::Method>>(constructor); }
	static jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> getMethod(jni::ref<java::lang::String> method) { return call_static_method<"getMethod", jni::ref<jdk::internal::org::objectweb::asm_::commons::Method>>(method); }
	static jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> getMethod(jni::ref<java::lang::String> method, jboolean defaultPackage) { return call_static_method<"getMethod", jni::ref<jdk::internal::org::objectweb::asm_::commons::Method>>(method, defaultPackage); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDescriptor() { return call_method<"getDescriptor", jni::ref<java::lang::String>>(); }
	jni::ref<jdk::internal::org::objectweb::asm_::Type> getReturnType() { return call_method<"getReturnType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>> getArgumentTypes() { return call_method<"getArgumentTypes", jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	Method(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_METHOD
