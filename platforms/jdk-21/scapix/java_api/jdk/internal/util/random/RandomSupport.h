// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_RANDOM_RANDOMSUPPORT_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_RANDOM_RANDOMSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util::random { class RandomSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::random::RandomSupport>
{
	static constexpr fixed_string class_name = "jdk/internal/util/random/RandomSupport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_RANDOM_RANDOMSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_RANDOM_RANDOMSUPPORT)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_RANDOM_RANDOMSUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/random/RandomGenerator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_AbstractSplittableWithBrineGenerator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_AbstractSplittableGenerator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_AbstractArbitrarilyJumpableGenerator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_AbstractSpliteratorGenerator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_RandomDoublesSpliterator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_RandomLongsSpliterator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_RandomIntsSpliterator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_RandomSpliterator.h>
#include <scapix/java_api/jdk/internal/util/random/RandomSupport_RandomGeneratorProperties.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::random::RandomSupport : public jni::object_base<"jdk/internal/util/random/RandomSupport",
	java::lang::Object>
{
public:

	using AbstractSplittableWithBrineGenerator = RandomSupport_AbstractSplittableWithBrineGenerator;
	using AbstractSplittableGenerator = RandomSupport_AbstractSplittableGenerator;
	using AbstractArbitrarilyJumpableGenerator = RandomSupport_AbstractArbitrarilyJumpableGenerator;
	using AbstractSpliteratorGenerator = RandomSupport_AbstractSpliteratorGenerator;
	using RandomDoublesSpliterator = RandomSupport_RandomDoublesSpliterator;
	using RandomLongsSpliterator = RandomSupport_RandomLongsSpliterator;
	using RandomIntsSpliterator = RandomSupport_RandomIntsSpliterator;
	using RandomSpliterator = RandomSupport_RandomSpliterator;
	using RandomGeneratorProperties = RandomSupport_RandomGeneratorProperties;

	static jni::ref<java::lang::String> BAD_SIZE() { return get_static_field<"BAD_SIZE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BAD_DISTANCE() { return get_static_field<"BAD_DISTANCE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BAD_BOUND() { return get_static_field<"BAD_BOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BAD_FLOATING_BOUND() { return get_static_field<"BAD_FLOATING_BOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BAD_RANGE() { return get_static_field<"BAD_RANGE", jni::ref<java::lang::String>>(); }
	static jint GOLDEN_RATIO_32() { return get_static_field<"GOLDEN_RATIO_32", jint>(); }
	static jlong GOLDEN_RATIO_64() { return get_static_field<"GOLDEN_RATIO_64", jlong>(); }
	static jint SILVER_RATIO_32() { return get_static_field<"SILVER_RATIO_32", jint>(); }
	static jlong SILVER_RATIO_64() { return get_static_field<"SILVER_RATIO_64", jlong>(); }

	static void checkStreamSize(jlong streamSize) { return call_static_method<"checkStreamSize", void>(streamSize); }
	static void checkBound(jfloat bound) { return call_static_method<"checkBound", void>(bound); }
	static void checkBound(jdouble bound) { return call_static_method<"checkBound", void>(bound); }
	static void checkBound(jint bound) { return call_static_method<"checkBound", void>(bound); }
	static void checkBound(jlong bound) { return call_static_method<"checkBound", void>(bound); }
	static void checkRange(jfloat origin, jfloat bound) { return call_static_method<"checkRange", void>(origin, bound); }
	static void checkRange(jdouble origin, jdouble p2) { return call_static_method<"checkRange", void>(origin, p2); }
	static void checkRange(jint origin, jint bound) { return call_static_method<"checkRange", void>(origin, bound); }
	static void checkRange(jlong origin, jlong p2) { return call_static_method<"checkRange", void>(origin, p2); }
	static jni::ref<jni::array<jlong>> convertSeedBytesToLongs(jni::ref<jni::array<jbyte>> seed, jint n, jint z) { return call_static_method<"convertSeedBytesToLongs", jni::ref<jni::array<jlong>>>(seed, n, z); }
	static jni::ref<jni::array<jint>> convertSeedBytesToInts(jni::ref<jni::array<jbyte>> seed, jint n, jint z) { return call_static_method<"convertSeedBytesToInts", jni::ref<jni::array<jint>>>(seed, n, z); }
	static jlong boundedNextLong(jni::ref<java::util::random::RandomGenerator> rng, jlong origin, jlong p3) { return call_static_method<"boundedNextLong", jlong>(rng, origin, p3); }
	static jlong boundedNextLong(jni::ref<java::util::random::RandomGenerator> rng, jlong bound) { return call_static_method<"boundedNextLong", jlong>(rng, bound); }
	static jint boundedNextInt(jni::ref<java::util::random::RandomGenerator> rng, jint origin, jint bound) { return call_static_method<"boundedNextInt", jint>(rng, origin, bound); }
	static jint boundedNextInt(jni::ref<java::util::random::RandomGenerator> rng, jint bound) { return call_static_method<"boundedNextInt", jint>(rng, bound); }
	static jdouble boundedNextDouble(jni::ref<java::util::random::RandomGenerator> rng, jdouble origin, jdouble p3) { return call_static_method<"boundedNextDouble", jdouble>(rng, origin, p3); }
	static jdouble boundedNextDouble(jni::ref<java::util::random::RandomGenerator> rng, jdouble bound) { return call_static_method<"boundedNextDouble", jdouble>(rng, bound); }
	static jfloat boundedNextFloat(jni::ref<java::util::random::RandomGenerator> rng, jfloat origin, jfloat bound) { return call_static_method<"boundedNextFloat", jfloat>(rng, origin, bound); }
	static jfloat boundedNextFloat(jni::ref<java::util::random::RandomGenerator> rng, jfloat bound) { return call_static_method<"boundedNextFloat", jfloat>(rng, bound); }
	static jlong initialSeed() { return call_static_method<"initialSeed", jlong>(); }
	static jlong mixMurmur64(jlong z) { return call_static_method<"mixMurmur64", jlong>(z); }
	static jlong mixStafford13(jlong z) { return call_static_method<"mixStafford13", jlong>(z); }
	static jlong mixLea64(jlong z) { return call_static_method<"mixLea64", jlong>(z); }
	static jint mixMurmur32(jint z) { return call_static_method<"mixMurmur32", jint>(z); }
	static jint mixLea32(jint z) { return call_static_method<"mixLea32", jint>(z); }
	static jdouble computeNextExponential(jni::ref<java::util::random::RandomGenerator> rng) { return call_static_method<"computeNextExponential", jdouble>(rng); }
	static jdouble computeNextGaussian(jni::ref<java::util::random::RandomGenerator> rng) { return call_static_method<"computeNextGaussian", jdouble>(rng); }

protected:

	RandomSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_RANDOM_RANDOMSUPPORT
