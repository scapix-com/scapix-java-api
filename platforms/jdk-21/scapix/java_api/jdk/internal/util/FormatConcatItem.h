// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_FORMATCONCATITEM_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_FORMATCONCATITEM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util { class FormatConcatItem; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::FormatConcatItem>
{
	static constexpr fixed_string class_name = "jdk/internal/util/FormatConcatItem";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_FORMATCONCATITEM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_FORMATCONCATITEM)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_FORMATCONCATITEM

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::FormatConcatItem : public jni::object_base<"jdk/internal/util/FormatConcatItem",
	java::lang::Object>
{
public:

	jlong mix(jlong p1) { return call_method<"mix", jlong>(p1); }
	jlong prepend(jlong p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"prepend", jlong>(p1, p2); }

protected:

	FormatConcatItem(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_FORMATCONCATITEM
