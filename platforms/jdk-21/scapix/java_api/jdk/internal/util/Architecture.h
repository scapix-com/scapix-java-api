// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARCHITECTURE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARCHITECTURE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util { class Architecture; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::Architecture>
{
	static constexpr fixed_string class_name = "jdk/internal/util/Architecture";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARCHITECTURE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARCHITECTURE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARCHITECTURE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::Architecture : public jni::object_base<"jdk/internal/util/Architecture",
	java::lang::Enum>
{
public:

	static jni::ref<jdk::internal::util::Architecture> AARCH64() { return get_static_field<"AARCH64", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> ARM() { return get_static_field<"ARM", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> LOONGARCH64() { return get_static_field<"LOONGARCH64", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> MIPSEL() { return get_static_field<"MIPSEL", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> MIPS64EL() { return get_static_field<"MIPS64EL", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> OTHER() { return get_static_field<"OTHER", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> PPC() { return get_static_field<"PPC", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> PPC64() { return get_static_field<"PPC64", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> PPC64LE() { return get_static_field<"PPC64LE", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> RISCV64() { return get_static_field<"RISCV64", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> S390() { return get_static_field<"S390", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> SPARCV9() { return get_static_field<"SPARCV9", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> X86() { return get_static_field<"X86", jni::ref<jdk::internal::util::Architecture>>(); }
	static jni::ref<jdk::internal::util::Architecture> X64() { return get_static_field<"X64", jni::ref<jdk::internal::util::Architecture>>(); }

	static jni::ref<jni::array<jdk::internal::util::Architecture>> values() { return call_static_method<"values", jni::ref<jni::array<jdk::internal::util::Architecture>>>(); }
	static jni::ref<jdk::internal::util::Architecture> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<jdk::internal::util::Architecture>>(name); }
	jint addressSize() { return call_method<"addressSize", jint>(); }
	jni::ref<java::nio::ByteOrder> byteOrder() { return call_method<"byteOrder", jni::ref<java::nio::ByteOrder>>(); }
	static jni::ref<jdk::internal::util::Architecture> lookupByName(jni::ref<java::lang::String> archName) { return call_static_method<"lookupByName", jni::ref<jdk::internal::util::Architecture>>(archName); }
	static jboolean isX64() { return call_static_method<"isX64", jboolean>(); }
	static jboolean isX86() { return call_static_method<"isX86", jboolean>(); }
	static jboolean isRISCV64() { return call_static_method<"isRISCV64", jboolean>(); }
	static jboolean isLOONGARCH64() { return call_static_method<"isLOONGARCH64", jboolean>(); }
	static jboolean isS390() { return call_static_method<"isS390", jboolean>(); }
	static jboolean isPPC() { return call_static_method<"isPPC", jboolean>(); }
	static jboolean isPPC64() { return call_static_method<"isPPC64", jboolean>(); }
	static jboolean isPPC64LE() { return call_static_method<"isPPC64LE", jboolean>(); }
	static jboolean isARM() { return call_static_method<"isARM", jboolean>(); }
	static jboolean isAARCH64() { return call_static_method<"isAARCH64", jboolean>(); }
	static jboolean isMIPSEL() { return call_static_method<"isMIPSEL", jboolean>(); }
	static jboolean isMIPS64EL() { return call_static_method<"isMIPS64EL", jboolean>(); }
	static jboolean isSPARCV9() { return call_static_method<"isSPARCV9", jboolean>(); }
	static jni::ref<jdk::internal::util::Architecture> current() { return call_static_method<"current", jni::ref<jdk::internal::util::Architecture>>(); }
	static jboolean is64bit() { return call_static_method<"is64bit", jboolean>(); }
	static jboolean isLittleEndian() { return call_static_method<"isLittleEndian", jboolean>(); }

protected:

	Architecture(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARCHITECTURE
