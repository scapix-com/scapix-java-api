// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_BYTEARRAY_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_BYTEARRAY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util { class ByteArray; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::ByteArray>
{
	static constexpr fixed_string class_name = "jdk/internal/util/ByteArray";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_BYTEARRAY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_BYTEARRAY)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_BYTEARRAY

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::ByteArray : public jni::object_base<"jdk/internal/util/ByteArray",
	java::lang::Object>
{
public:

	static jboolean getBoolean(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getBoolean", jboolean>(array, offset); }
	static jchar getChar(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getChar", jchar>(array, offset); }
	static jshort getShort(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getShort", jshort>(array, offset); }
	static jint getUnsignedShort(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getUnsignedShort", jint>(array, offset); }
	static jint getInt(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getInt", jint>(array, offset); }
	static jfloat getFloat(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getFloat", jfloat>(array, offset); }
	static jfloat getFloatRaw(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getFloatRaw", jfloat>(array, offset); }
	static jlong getLong(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getLong", jlong>(array, offset); }
	static jdouble getDouble(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getDouble", jdouble>(array, offset); }
	static jdouble getDoubleRaw(jni::ref<jni::array<jbyte>> array, jint offset) { return call_static_method<"getDoubleRaw", jdouble>(array, offset); }
	static void setBoolean(jni::ref<jni::array<jbyte>> array, jint offset, jboolean value) { return call_static_method<"setBoolean", void>(array, offset, value); }
	static void setChar(jni::ref<jni::array<jbyte>> array, jint offset, jchar value) { return call_static_method<"setChar", void>(array, offset, value); }
	static void setShort(jni::ref<jni::array<jbyte>> array, jint offset, jshort value) { return call_static_method<"setShort", void>(array, offset, value); }
	static void setUnsignedShort(jni::ref<jni::array<jbyte>> array, jint offset, jint value) { return call_static_method<"setUnsignedShort", void>(array, offset, value); }
	static void setInt(jni::ref<jni::array<jbyte>> array, jint offset, jint value) { return call_static_method<"setInt", void>(array, offset, value); }
	static void setFloat(jni::ref<jni::array<jbyte>> array, jint offset, jfloat value) { return call_static_method<"setFloat", void>(array, offset, value); }
	static void setFloatRaw(jni::ref<jni::array<jbyte>> array, jint offset, jfloat value) { return call_static_method<"setFloatRaw", void>(array, offset, value); }
	static void setLong(jni::ref<jni::array<jbyte>> array, jint offset, jlong value) { return call_static_method<"setLong", void>(array, offset, value); }
	static void setDouble(jni::ref<jni::array<jbyte>> array, jint offset, jdouble value) { return call_static_method<"setDouble", void>(array, offset, value); }
	static void setDoubleRaw(jni::ref<jni::array<jbyte>> array, jint offset, jdouble value) { return call_static_method<"setDoubleRaw", void>(array, offset, value); }

protected:

	ByteArray(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_BYTEARRAY
