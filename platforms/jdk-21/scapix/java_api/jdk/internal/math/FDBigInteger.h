// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MATH_FDBIGINTEGER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MATH_FDBIGINTEGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::math { class FDBigInteger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::math::FDBigInteger>
{
	static constexpr fixed_string class_name = "jdk/internal/math/FDBigInteger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MATH_FDBIGINTEGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MATH_FDBIGINTEGER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MATH_FDBIGINTEGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::math::FDBigInteger : public jni::object_base<"jdk/internal/math/FDBigInteger",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::math::FDBigInteger> ZERO() { return get_static_field<"ZERO", jni::ref<jdk::internal::math::FDBigInteger>>(); }

	static jni::ref<jdk::internal::math::FDBigInteger> new_object(jlong lValue, jni::ref<jni::array<jchar>> p2, jint digits, jint kDigits) { return base_::new_object(lValue, p2, digits, kDigits); }
	static jni::ref<jdk::internal::math::FDBigInteger> valueOfPow52(jint p5, jint p2) { return call_static_method<"valueOfPow52", jni::ref<jdk::internal::math::FDBigInteger>>(p5, p2); }
	static jni::ref<jdk::internal::math::FDBigInteger> valueOfMulPow52(jlong value, jint p2, jint p5) { return call_static_method<"valueOfMulPow52", jni::ref<jdk::internal::math::FDBigInteger>>(value, p2, p5); }
	jint getNormalizationBias() { return call_method<"getNormalizationBias", jint>(); }
	jni::ref<jdk::internal::math::FDBigInteger> leftShift(jint shift) { return call_method<"leftShift", jni::ref<jdk::internal::math::FDBigInteger>>(shift); }
	jint quoRemIteration(jni::ref<jdk::internal::math::FDBigInteger> S) { return call_method<"quoRemIteration", jint>(S); }
	jni::ref<jdk::internal::math::FDBigInteger> multBy10() { return call_method<"multBy10", jni::ref<jdk::internal::math::FDBigInteger>>(); }
	jni::ref<jdk::internal::math::FDBigInteger> multByPow52(jint p5, jint p2) { return call_method<"multByPow52", jni::ref<jdk::internal::math::FDBigInteger>>(p5, p2); }
	jni::ref<jdk::internal::math::FDBigInteger> leftInplaceSub(jni::ref<jdk::internal::math::FDBigInteger> subtrahend) { return call_method<"leftInplaceSub", jni::ref<jdk::internal::math::FDBigInteger>>(subtrahend); }
	jni::ref<jdk::internal::math::FDBigInteger> rightInplaceSub(jni::ref<jdk::internal::math::FDBigInteger> subtrahend) { return call_method<"rightInplaceSub", jni::ref<jdk::internal::math::FDBigInteger>>(subtrahend); }
	jint cmp(jni::ref<jdk::internal::math::FDBigInteger> other) { return call_method<"cmp", jint>(other); }
	jint cmpPow52(jint p5, jint p2) { return call_method<"cmpPow52", jint>(p5, p2); }
	jint addAndCmp(jni::ref<jdk::internal::math::FDBigInteger> x, jni::ref<jdk::internal::math::FDBigInteger> y) { return call_method<"addAndCmp", jint>(x, y); }
	void makeImmutable() { return call_method<"makeImmutable", void>(); }
	jni::ref<java::lang::String> toHexString() { return call_method<"toHexString", jni::ref<java::lang::String>>(); }
	jni::ref<java::math::BigInteger> toBigInteger() { return call_method<"toBigInteger", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	FDBigInteger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MATH_FDBIGINTEGER
