// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGESTREAM_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGESTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::jimage { class ImageStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::jimage::ImageStream>
{
	static constexpr fixed_string class_name = "jdk/internal/jimage/ImageStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGESTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGESTREAM)
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGESTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::jimage::ImageStream : public jni::object_base<"jdk/internal/jimage/ImageStream",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::jimage::ImageStream> new_object() { return base_::new_object(); }
	static jni::ref<jdk::internal::jimage::ImageStream> new_object(jint size) { return base_::new_object(size); }
	static jni::ref<jdk::internal::jimage::ImageStream> new_object(jni::ref<jni::array<jbyte>> bytes) { return base_::new_object(bytes); }
	static jni::ref<jdk::internal::jimage::ImageStream> new_object(jni::ref<java::nio::ByteOrder> byteOrder) { return base_::new_object(byteOrder); }
	static jni::ref<jdk::internal::jimage::ImageStream> new_object(jint size, jni::ref<java::nio::ByteOrder> byteOrder) { return base_::new_object(size, byteOrder); }
	static jni::ref<jdk::internal::jimage::ImageStream> new_object(jni::ref<jni::array<jbyte>> bytes, jni::ref<java::nio::ByteOrder> byteOrder) { return base_::new_object(bytes, byteOrder); }
	static jni::ref<jdk::internal::jimage::ImageStream> new_object(jni::ref<java::nio::ByteBuffer> buffer) { return base_::new_object(buffer); }
	jni::ref<jdk::internal::jimage::ImageStream> align(jint alignment) { return call_method<"align", jni::ref<jdk::internal::jimage::ImageStream>>(alignment); }
	void ensure(jint needs) { return call_method<"ensure", void>(needs); }
	jboolean hasByte() { return call_method<"hasByte", jboolean>(); }
	jboolean hasBytes(jint needs) { return call_method<"hasBytes", jboolean>(needs); }
	void skip(jint n) { return call_method<"skip", void>(n); }
	jint get() { return call_method<"get", jint>(); }
	void get(jni::ref<jni::array<jbyte>> bytes, jint offset, jint size) { return call_method<"get", void>(bytes, offset, size); }
	jint getShort() { return call_method<"getShort", jint>(); }
	jint getInt() { return call_method<"getInt", jint>(); }
	jlong getLong() { return call_method<"getLong", jlong>(); }
	jni::ref<jdk::internal::jimage::ImageStream> put(jbyte byt) { return call_method<"put", jni::ref<jdk::internal::jimage::ImageStream>>(byt); }
	jni::ref<jdk::internal::jimage::ImageStream> put(jint byt) { return call_method<"put", jni::ref<jdk::internal::jimage::ImageStream>>(byt); }
	jni::ref<jdk::internal::jimage::ImageStream> put(jni::ref<jni::array<jbyte>> bytes, jint offset, jint size) { return call_method<"put", jni::ref<jdk::internal::jimage::ImageStream>>(bytes, offset, size); }
	jni::ref<jdk::internal::jimage::ImageStream> put(jni::ref<jdk::internal::jimage::ImageStream> stream) { return call_method<"put", jni::ref<jdk::internal::jimage::ImageStream>>(stream); }
	jni::ref<jdk::internal::jimage::ImageStream> putShort(jshort value) { return call_method<"putShort", jni::ref<jdk::internal::jimage::ImageStream>>(value); }
	jni::ref<jdk::internal::jimage::ImageStream> putShort(jint value) { return call_method<"putShort", jni::ref<jdk::internal::jimage::ImageStream>>(value); }
	jni::ref<jdk::internal::jimage::ImageStream> putInt(jint value) { return call_method<"putInt", jni::ref<jdk::internal::jimage::ImageStream>>(value); }
	jni::ref<jdk::internal::jimage::ImageStream> putLong(jlong value) { return call_method<"putLong", jni::ref<jdk::internal::jimage::ImageStream>>(value); }
	jni::ref<java::nio::ByteBuffer> getBuffer() { return call_method<"getBuffer", jni::ref<java::nio::ByteBuffer>>(); }
	jint getPosition() { return call_method<"getPosition", jint>(); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jni::ref<jni::array<jbyte>> getBytes() { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(); }
	void setPosition(jint offset) { return call_method<"setPosition", void>(offset); }
	jni::ref<jni::array<jbyte>> toArray() { return call_method<"toArray", jni::ref<jni::array<jbyte>>>(); }

protected:

	ImageStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGESTREAM
