// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_COMPRESSEDRESOURCEHEADER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_COMPRESSEDRESOURCEHEADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::jimage::decompressor { class CompressedResourceHeader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::jimage::decompressor::CompressedResourceHeader>
{
	static constexpr fixed_string class_name = "jdk/internal/jimage/decompressor/CompressedResourceHeader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_COMPRESSEDRESOURCEHEADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_COMPRESSEDRESOURCEHEADER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_COMPRESSEDRESOURCEHEADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/jdk/internal/jimage/decompressor/ResourceDecompressor_StringsProvider.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::jimage::decompressor::CompressedResourceHeader : public jni::object_base<"jdk/internal/jimage/decompressor/CompressedResourceHeader",
	java::lang::Object>
{
public:

	static jint MAGIC() { return get_static_field<"MAGIC", jint>(); }

	static jni::ref<jdk::internal::jimage::decompressor::CompressedResourceHeader> new_object(jlong compressedSize, jlong p2, jint uncompressedSize, jint p4, jboolean decompressorNameOffset) { return base_::new_object(compressedSize, p2, uncompressedSize, p4, decompressorNameOffset); }
	jboolean isTerminal() { return call_method<"isTerminal", jboolean>(); }
	jint getDecompressorNameOffset() { return call_method<"getDecompressorNameOffset", jint>(); }
	jint getContentOffset() { return call_method<"getContentOffset", jint>(); }
	jni::ref<java::lang::String> getStoredContent(jni::ref<jdk::internal::jimage::decompressor::ResourceDecompressor_StringsProvider> provider) { return call_method<"getStoredContent", jni::ref<java::lang::String>>(provider); }
	jlong getUncompressedSize() { return call_method<"getUncompressedSize", jlong>(); }
	jlong getResourceSize() { return call_method<"getResourceSize", jlong>(); }
	jni::ref<jni::array<jbyte>> getBytes(jni::ref<java::nio::ByteOrder> order) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(order); }
	static jint getSize() { return call_static_method<"getSize", jint>(); }
	static jni::ref<jdk::internal::jimage::decompressor::CompressedResourceHeader> readFromResource(jni::ref<java::nio::ByteOrder> order, jni::ref<jni::array<jbyte>> resource) { return call_static_method<"readFromResource", jni::ref<jdk::internal::jimage::decompressor::CompressedResourceHeader>>(order, resource); }

protected:

	CompressedResourceHeader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_COMPRESSEDRESOURCEHEADER
