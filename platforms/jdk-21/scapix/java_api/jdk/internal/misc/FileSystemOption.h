// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MISC_FILESYSTEMOPTION_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_FILESYSTEMOPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::misc { class FileSystemOption; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::misc::FileSystemOption>
{
	static constexpr fixed_string class_name = "jdk/internal/misc/FileSystemOption";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_FILESYSTEMOPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MISC_FILESYSTEMOPTION)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_FILESYSTEMOPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/file/CopyOption.h>
#include <scapix/java_api/java/nio/file/OpenOption.h>
#include <scapix/java_api/java/nio/file/WatchEvent_Modifier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::misc::FileSystemOption : public jni::object_base<"jdk/internal/misc/FileSystemOption",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::misc::FileSystemOption> INTERRUPTIBLE() { return get_static_field<"INTERRUPTIBLE", jni::ref<jdk::internal::misc::FileSystemOption>>(); }
	static jni::ref<jdk::internal::misc::FileSystemOption> NOSHARE_READ() { return get_static_field<"NOSHARE_READ", jni::ref<jdk::internal::misc::FileSystemOption>>(); }
	static jni::ref<jdk::internal::misc::FileSystemOption> NOSHARE_WRITE() { return get_static_field<"NOSHARE_WRITE", jni::ref<jdk::internal::misc::FileSystemOption>>(); }
	static jni::ref<jdk::internal::misc::FileSystemOption> NOSHARE_DELETE() { return get_static_field<"NOSHARE_DELETE", jni::ref<jdk::internal::misc::FileSystemOption>>(); }
	static jni::ref<jdk::internal::misc::FileSystemOption> FILE_TREE() { return get_static_field<"FILE_TREE", jni::ref<jdk::internal::misc::FileSystemOption>>(); }
	static jni::ref<jdk::internal::misc::FileSystemOption> DIRECT() { return get_static_field<"DIRECT", jni::ref<jdk::internal::misc::FileSystemOption>>(); }
	static jni::ref<jdk::internal::misc::FileSystemOption> SENSITIVITY_HIGH() { return get_static_field<"SENSITIVITY_HIGH", jni::ref<jdk::internal::misc::FileSystemOption>>(); }
	static jni::ref<jdk::internal::misc::FileSystemOption> SENSITIVITY_MEDIUM() { return get_static_field<"SENSITIVITY_MEDIUM", jni::ref<jdk::internal::misc::FileSystemOption>>(); }
	static jni::ref<jdk::internal::misc::FileSystemOption> SENSITIVITY_LOW() { return get_static_field<"SENSITIVITY_LOW", jni::ref<jdk::internal::misc::FileSystemOption>>(); }

	void register_(jni::ref<java::nio::file::OpenOption> option) { return call_method<"register", void>(option); }
	void register_(jni::ref<java::nio::file::CopyOption> option) { return call_method<"register", void>(option); }
	void register_(jni::ref<java::nio::file::WatchEvent_Modifier> option) { return call_method<"register", void>(option); }
	void register_(jni::ref<java::nio::file::WatchEvent_Modifier> option, jni::ref<java::lang::Object> param) { return call_method<"register", void>(option, param); }

protected:

	FileSystemOption(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_FILESYSTEMOPTION
