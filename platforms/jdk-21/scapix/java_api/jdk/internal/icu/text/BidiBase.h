// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_BIDIBASE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_BIDIBASE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::icu::text { class BidiBase; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::icu::text::BidiBase>
{
	static constexpr fixed_string class_name = "jdk/internal/icu/text/BidiBase";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_BIDIBASE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_BIDIBASE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_BIDIBASE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/text/Bidi.h>
#include <scapix/java_api/jdk/internal/icu/text/BidiBase_BidiPairedBracketType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::icu::text::BidiBase : public jni::object_base<"jdk/internal/icu/text/BidiBase",
	java::lang::Object>
{
public:

	using BidiPairedBracketType = BidiBase_BidiPairedBracketType;

	static jbyte LEVEL_DEFAULT_LTR() { return get_static_field<"LEVEL_DEFAULT_LTR", jbyte>(); }
	static jbyte LEVEL_DEFAULT_RTL() { return get_static_field<"LEVEL_DEFAULT_RTL", jbyte>(); }
	static jbyte MAX_EXPLICIT_LEVEL() { return get_static_field<"MAX_EXPLICIT_LEVEL", jbyte>(); }
	static jbyte LEVEL_OVERRIDE() { return get_static_field<"LEVEL_OVERRIDE", jbyte>(); }
	static jint MAP_NOWHERE() { return get_static_field<"MAP_NOWHERE", jint>(); }
	static jbyte LTR() { return get_static_field<"LTR", jbyte>(); }
	static jbyte RTL() { return get_static_field<"RTL", jbyte>(); }
	static jbyte MIXED() { return get_static_field<"MIXED", jbyte>(); }
	static jshort KEEP_BASE_COMBINING() { return get_static_field<"KEEP_BASE_COMBINING", jshort>(); }
	static jshort DO_MIRRORING() { return get_static_field<"DO_MIRRORING", jshort>(); }
	static jshort INSERT_LRM_FOR_NUMERIC() { return get_static_field<"INSERT_LRM_FOR_NUMERIC", jshort>(); }
	static jshort REMOVE_BIDI_CONTROLS() { return get_static_field<"REMOVE_BIDI_CONTROLS", jshort>(); }
	static jshort OUTPUT_REVERSE() { return get_static_field<"OUTPUT_REVERSE", jshort>(); }
	static jint BIDI_PAIRED_BRACKET_TYPE() { return get_static_field<"BIDI_PAIRED_BRACKET_TYPE", jint>(); }
	jint length() { return get_field<"length", jint>(); }
	void length(jint v) { set_field<"length", jint>(v); }
	static jint DIRECTION_DEFAULT_RIGHT_TO_LEFT() { return get_static_field<"DIRECTION_DEFAULT_RIGHT_TO_LEFT", jint>(); }

	static jni::ref<jdk::internal::icu::text::BidiBase> new_object(jint maxLength, jint maxRunCount) { return base_::new_object(maxLength, maxRunCount); }
	jboolean isInverse() { return call_method<"isInverse", jboolean>(); }
	void setPara(jni::ref<java::text::AttributedCharacterIterator> paragraph) { return call_method<"setPara", void>(paragraph); }
	void orderParagraphsLTR(jboolean ordarParaLTR) { return call_method<"orderParagraphsLTR", void>(ordarParaLTR); }
	jbyte getDirection() { return call_method<"getDirection", jbyte>(); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jbyte getParaLevel() { return call_method<"getParaLevel", jbyte>(); }
	jint getCustomizedClass(jint c) { return call_method<"getCustomizedClass", jint>(c); }
	jni::ref<java::text::Bidi> setLine(jni::ref<java::text::Bidi> bidi, jni::ref<jdk::internal::icu::text::BidiBase> bidiBase, jni::ref<java::text::Bidi> newBidi, jni::ref<jdk::internal::icu::text::BidiBase> newBidiBase, jint start, jint limit) { return call_method<"setLine", jni::ref<java::text::Bidi>>(bidi, bidiBase, newBidi, newBidiBase, start, limit); }
	jbyte getLevelAt(jint charIndex) { return call_method<"getLevelAt", jbyte>(charIndex); }
	jint countRuns() { return call_method<"countRuns", jint>(); }
	static jni::ref<jdk::internal::icu::text::BidiBase> new_object(jni::ref<jni::array<jchar>> text, jint textStart, jni::ref<jni::array<jbyte>> embeddings, jint embStart, jint paragraphLength, jint flags) { return base_::new_object(text, textStart, embeddings, embStart, paragraphLength, flags); }
	jboolean isMixed() { return call_method<"isMixed", jboolean>(); }
	jboolean isLeftToRight() { return call_method<"isLeftToRight", jboolean>(); }
	jboolean isRightToLeft() { return call_method<"isRightToLeft", jboolean>(); }
	jboolean baseIsLeftToRight() { return call_method<"baseIsLeftToRight", jboolean>(); }
	jint getBaseLevel() { return call_method<"getBaseLevel", jint>(); }
	jint getRunLevel(jint run) { return call_method<"getRunLevel", jint>(run); }
	jint getRunStart(jint run) { return call_method<"getRunStart", jint>(run); }
	jint getRunLimit(jint run) { return call_method<"getRunLimit", jint>(run); }
	static jboolean requiresBidi(jni::ref<jni::array<jchar>> text, jint start, jint limit) { return call_static_method<"requiresBidi", jboolean>(text, start, limit); }
	static void reorderVisually(jni::ref<jni::array<jbyte>> levels, jint levelStart, jni::ref<jni::array<java::lang::Object>> objects, jint objectStart, jint count) { return call_static_method<"reorderVisually", void>(levels, levelStart, objects, objectStart, count); }
	jni::ref<java::lang::String> writeReordered(jint options) { return call_method<"writeReordered", jni::ref<java::lang::String>>(options); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	BidiBase(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_BIDIBASE
