// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_NORMALIZERBASE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_NORMALIZERBASE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::icu::text { class NormalizerBase; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::icu::text::NormalizerBase>
{
	static constexpr fixed_string class_name = "jdk/internal/icu/text/NormalizerBase";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_NORMALIZERBASE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_NORMALIZERBASE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_NORMALIZERBASE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/CharacterIterator.h>
#include <scapix/java_api/java/text/Normalizer_Form.h>
#include <scapix/java_api/jdk/internal/icu/text/NormalizerBase_Mode.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::icu::text::NormalizerBase : public jni::object_base<"jdk/internal/icu/text/NormalizerBase",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using Mode = NormalizerBase_Mode;

	static jint UNICODE_3_2() { return get_static_field<"UNICODE_3_2", jint>(); }
	static jint UNICODE_3_2_0_ORIGINAL() { return get_static_field<"UNICODE_3_2_0_ORIGINAL", jint>(); }
	static jint UNICODE_LATEST() { return get_static_field<"UNICODE_LATEST", jint>(); }
	static jint DONE() { return get_static_field<"DONE", jint>(); }
	static jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> NONE() { return get_static_field<"NONE", jni::ref<jdk::internal::icu::text::NormalizerBase_Mode>>(); }
	static jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> NFD() { return get_static_field<"NFD", jni::ref<jdk::internal::icu::text::NormalizerBase_Mode>>(); }
	static jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> NFKD() { return get_static_field<"NFKD", jni::ref<jdk::internal::icu::text::NormalizerBase_Mode>>(); }
	static jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> NFC() { return get_static_field<"NFC", jni::ref<jdk::internal::icu::text::NormalizerBase_Mode>>(); }
	static jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> NFKC() { return get_static_field<"NFKC", jni::ref<jdk::internal::icu::text::NormalizerBase_Mode>>(); }

	static jni::ref<jdk::internal::icu::text::NormalizerBase> new_object(jni::ref<java::lang::String> str, jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> mode, jint opt) { return base_::new_object(str, mode, opt); }
	static jni::ref<jdk::internal::icu::text::NormalizerBase> new_object(jni::ref<java::lang::String> str, jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> mode) { return base_::new_object(str, mode); }
	static jni::ref<jdk::internal::icu::text::NormalizerBase> new_object(jni::ref<java::text::CharacterIterator> iter, jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> mode, jint opt) { return base_::new_object(iter, mode, opt); }
	static jni::ref<jdk::internal::icu::text::NormalizerBase> new_object(jni::ref<java::text::CharacterIterator> iter, jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> mode) { return base_::new_object(iter, mode); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::String> normalize(jni::ref<java::lang::String> str, jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> mode, jint options) { return call_static_method<"normalize", jni::ref<java::lang::String>>(str, mode, options); }
	static jni::ref<java::lang::String> normalize(jni::ref<java::lang::String> str, jni::ref<java::text::Normalizer_Form> form) { return call_static_method<"normalize", jni::ref<java::lang::String>>(str, form); }
	static jni::ref<java::lang::String> normalize(jni::ref<java::lang::String> str, jni::ref<java::text::Normalizer_Form> form, jint options) { return call_static_method<"normalize", jni::ref<java::lang::String>>(str, form, options); }
	static jboolean isNormalized(jni::ref<java::lang::String> str, jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> mode, jint options) { return call_static_method<"isNormalized", jboolean>(str, mode, options); }
	static jboolean isNormalized(jni::ref<java::lang::String> str, jni::ref<java::text::Normalizer_Form> form) { return call_static_method<"isNormalized", jboolean>(str, form); }
	static jboolean isNormalized(jni::ref<java::lang::String> str, jni::ref<java::text::Normalizer_Form> form, jint options) { return call_static_method<"isNormalized", jboolean>(str, form, options); }
	jint current() { return call_method<"current", jint>(); }
	jint next() { return call_method<"next", jint>(); }
	jint previous() { return call_method<"previous", jint>(); }
	void reset() { return call_method<"reset", void>(); }
	void setIndexOnly(jint index) { return call_method<"setIndexOnly", void>(index); }
	jint setIndex(jint index) { return call_method<"setIndex", jint>(index); }
	jint getBeginIndex() { return call_method<"getBeginIndex", jint>(); }
	jint getEndIndex() { return call_method<"getEndIndex", jint>(); }
	jint getIndex() { return call_method<"getIndex", jint>(); }
	jint endIndex() { return call_method<"endIndex", jint>(); }
	void setMode(jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> newMode) { return call_method<"setMode", void>(newMode); }
	jni::ref<jdk::internal::icu::text::NormalizerBase_Mode> getMode() { return call_method<"getMode", jni::ref<jdk::internal::icu::text::NormalizerBase_Mode>>(); }
	void setText(jni::ref<java::lang::String> newText) { return call_method<"setText", void>(newText); }
	void setText(jni::ref<java::text::CharacterIterator> newText) { return call_method<"setText", void>(newText); }

protected:

	NormalizerBase(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_TEXT_NORMALIZERBASE
