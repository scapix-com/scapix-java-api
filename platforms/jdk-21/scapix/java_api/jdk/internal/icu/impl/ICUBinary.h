// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_ICUBINARY_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_ICUBINARY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::icu::impl { class ICUBinary; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::icu::impl::ICUBinary>
{
	static constexpr fixed_string class_name = "jdk/internal/icu/impl/ICUBinary";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_ICUBINARY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_ICUBINARY)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_ICUBINARY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/jdk/internal/icu/impl/ICUBinary_Authenticate.h>
#include <scapix/java_api/jdk/internal/icu/util/VersionInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::icu::impl::ICUBinary : public jni::object_base<"jdk/internal/icu/impl/ICUBinary",
	java::lang::Object>
{
public:

	using Authenticate = ICUBinary_Authenticate;

	static jni::ref<jdk::internal::icu::impl::ICUBinary> new_object() { return base_::new_object(); }
	static jni::ref<java::nio::ByteBuffer> getRequiredData(jni::ref<java::lang::String> itemPath) { return call_static_method<"getRequiredData", jni::ref<java::nio::ByteBuffer>>(itemPath); }
	static jni::ref<jdk::internal::icu::util::VersionInfo> readHeaderAndDataVersion(jni::ref<java::nio::ByteBuffer> bytes, jint dataFormat, jni::ref<jdk::internal::icu::impl::ICUBinary_Authenticate> authenticate) { return call_static_method<"readHeaderAndDataVersion", jni::ref<jdk::internal::icu::util::VersionInfo>>(bytes, dataFormat, authenticate); }
	static jni::ref<jni::array<jbyte>> readHeader(jni::ref<java::io::InputStream> inputStream, jni::ref<jni::array<jbyte>> dataFormatIDExpected, jni::ref<jdk::internal::icu::impl::ICUBinary_Authenticate> authenticate) { return call_static_method<"readHeader", jni::ref<jni::array<jbyte>>>(inputStream, dataFormatIDExpected, authenticate); }
	static jint readHeader(jni::ref<java::nio::ByteBuffer> bytes, jint dataFormat, jni::ref<jdk::internal::icu::impl::ICUBinary_Authenticate> authenticate) { return call_static_method<"readHeader", jint>(bytes, dataFormat, authenticate); }
	static void skipBytes(jni::ref<java::nio::ByteBuffer> bytes, jint skipLength) { return call_static_method<"skipBytes", void>(bytes, skipLength); }
	static jni::ref<jni::array<jbyte>> getBytes(jni::ref<java::nio::ByteBuffer> bytes, jint length, jint additionalSkipLength) { return call_static_method<"getBytes", jni::ref<jni::array<jbyte>>>(bytes, length, additionalSkipLength); }
	static jni::ref<java::lang::String> getString(jni::ref<java::nio::ByteBuffer> bytes, jint length, jint additionalSkipLength) { return call_static_method<"getString", jni::ref<java::lang::String>>(bytes, length, additionalSkipLength); }
	static jni::ref<jni::array<jchar>> getChars(jni::ref<java::nio::ByteBuffer> bytes, jint length, jint additionalSkipLength) { return call_static_method<"getChars", jni::ref<jni::array<jchar>>>(bytes, length, additionalSkipLength); }
	static jni::ref<jni::array<jint>> getInts(jni::ref<java::nio::ByteBuffer> bytes, jint length, jint additionalSkipLength) { return call_static_method<"getInts", jni::ref<jni::array<jint>>>(bytes, length, additionalSkipLength); }
	static jni::ref<jdk::internal::icu::util::VersionInfo> getVersionInfoFromCompactInt(jint version) { return call_static_method<"getVersionInfoFromCompactInt", jni::ref<jdk::internal::icu::util::VersionInfo>>(version); }

protected:

	ICUBinary(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_ICUBINARY
