// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/icu/text/Normalizer2.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_NORM2ALLMODES_NORMALIZER2WITHIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_NORM2ALLMODES_NORMALIZER2WITHIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::icu::impl { class Norm2AllModes_Normalizer2WithImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::icu::impl::Norm2AllModes_Normalizer2WithImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/icu/impl/Norm2AllModes$Normalizer2WithImpl";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::icu::text::Normalizer2>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_NORM2ALLMODES_NORMALIZER2WITHIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_NORM2ALLMODES_NORMALIZER2WITHIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_NORM2ALLMODES_NORMALIZER2WITHIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/jdk/internal/icu/impl/NormalizerImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::icu::impl::Norm2AllModes_Normalizer2WithImpl : public jni::object_base<"jdk/internal/icu/impl/Norm2AllModes$Normalizer2WithImpl",
	jdk::internal::icu::text::Normalizer2>
{
public:

	jni::ref<jdk::internal::icu::impl::NormalizerImpl> impl() { return get_field<"impl", jni::ref<jdk::internal::icu::impl::NormalizerImpl>>(); }

	static jni::ref<jdk::internal::icu::impl::Norm2AllModes_Normalizer2WithImpl> new_object(jni::ref<jdk::internal::icu::impl::NormalizerImpl> ni) { return base_::new_object(ni); }
	jni::ref<java::lang::StringBuilder> normalize(jni::ref<java::lang::CharSequence> src, jni::ref<java::lang::StringBuilder> dest) { return call_method<"normalize", jni::ref<java::lang::StringBuilder>>(src, dest); }
	jni::ref<java::lang::Appendable> normalize(jni::ref<java::lang::CharSequence> src, jni::ref<java::lang::Appendable> dest) { return call_method<"normalize", jni::ref<java::lang::Appendable>>(src, dest); }
	jni::ref<java::lang::StringBuilder> normalizeSecondAndAppend(jni::ref<java::lang::StringBuilder> first, jni::ref<java::lang::CharSequence> second) { return call_method<"normalizeSecondAndAppend", jni::ref<java::lang::StringBuilder>>(first, second); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::StringBuilder> first, jni::ref<java::lang::CharSequence> second) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(first, second); }
	jni::ref<java::lang::StringBuilder> normalizeSecondAndAppend(jni::ref<java::lang::StringBuilder> first, jni::ref<java::lang::CharSequence> second, jboolean doNormalize) { return call_method<"normalizeSecondAndAppend", jni::ref<java::lang::StringBuilder>>(first, second, doNormalize); }
	jni::ref<java::lang::String> getDecomposition(jint c) { return call_method<"getDecomposition", jni::ref<java::lang::String>>(c); }
	jint getCombiningClass(jint c) { return call_method<"getCombiningClass", jint>(c); }
	jboolean isNormalized(jni::ref<java::lang::CharSequence> s) { return call_method<"isNormalized", jboolean>(s); }

protected:

	Norm2AllModes_Normalizer2WithImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_NORM2ALLMODES_NORMALIZER2WITHIMPL
