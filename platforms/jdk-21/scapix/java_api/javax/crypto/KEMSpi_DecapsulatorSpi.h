// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_CRYPTO_KEMSPI_DECAPSULATORSPI_FWD
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_KEMSPI_DECAPSULATORSPI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::crypto { class KEMSpi_DecapsulatorSpi; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::crypto::KEMSpi_DecapsulatorSpi>
{
	static constexpr fixed_string class_name = "javax/crypto/KEMSpi$DecapsulatorSpi";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_KEMSPI_DECAPSULATORSPI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_CRYPTO_KEMSPI_DECAPSULATORSPI)
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_KEMSPI_DECAPSULATORSPI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/crypto/SecretKey.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::crypto::KEMSpi_DecapsulatorSpi : public jni::object_base<"javax/crypto/KEMSpi$DecapsulatorSpi",
	java::lang::Object>
{
public:

	jni::ref<javax::crypto::SecretKey> engineDecapsulate(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jni::ref<java::lang::String> p4) { return call_method<"engineDecapsulate", jni::ref<javax::crypto::SecretKey>>(p1, p2, p3, p4); }
	jint engineSecretSize() { return call_method<"engineSecretSize", jint>(); }
	jint engineEncapsulationSize() { return call_method<"engineEncapsulationSize", jint>(); }

protected:

	KEMSpi_DecapsulatorSpi(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_KEMSPI_DECAPSULATORSPI
