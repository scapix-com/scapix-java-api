// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_CRYPTO_KEM_FWD
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_KEM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::crypto { class KEM; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::crypto::KEM>
{
	static constexpr fixed_string class_name = "javax/crypto/KEM";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_KEM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_CRYPTO_KEM)
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_KEM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#include <scapix/java_api/javax/crypto/KEM_Decapsulator.h>
#include <scapix/java_api/javax/crypto/KEM_Encapsulator.h>
#include <scapix/java_api/javax/crypto/KEM_Encapsulated.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::crypto::KEM : public jni::object_base<"javax/crypto/KEM",
	java::lang::Object>
{
public:

	using Encapsulator = KEM_Encapsulator;
	using Decapsulator = KEM_Decapsulator;
	using Encapsulated = KEM_Encapsulated;

	static jni::ref<javax::crypto::KEM> getInstance(jni::ref<java::lang::String> algorithm) { return call_static_method<"getInstance", jni::ref<javax::crypto::KEM>>(algorithm); }
	static jni::ref<javax::crypto::KEM> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::security::Provider> provider) { return call_static_method<"getInstance", jni::ref<javax::crypto::KEM>>(algorithm, provider); }
	static jni::ref<javax::crypto::KEM> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::lang::String> provider) { return call_static_method<"getInstance", jni::ref<javax::crypto::KEM>>(algorithm, provider); }
	jni::ref<javax::crypto::KEM_Encapsulator> newEncapsulator(jni::ref<java::security::PublicKey> publicKey) { return call_method<"newEncapsulator", jni::ref<javax::crypto::KEM_Encapsulator>>(publicKey); }
	jni::ref<javax::crypto::KEM_Encapsulator> newEncapsulator(jni::ref<java::security::PublicKey> publicKey, jni::ref<java::security::SecureRandom> secureRandom) { return call_method<"newEncapsulator", jni::ref<javax::crypto::KEM_Encapsulator>>(publicKey, secureRandom); }
	jni::ref<javax::crypto::KEM_Encapsulator> newEncapsulator(jni::ref<java::security::PublicKey> publicKey, jni::ref<java::security::spec::AlgorithmParameterSpec> spec, jni::ref<java::security::SecureRandom> secureRandom) { return call_method<"newEncapsulator", jni::ref<javax::crypto::KEM_Encapsulator>>(publicKey, spec, secureRandom); }
	jni::ref<javax::crypto::KEM_Decapsulator> newDecapsulator(jni::ref<java::security::PrivateKey> privateKey) { return call_method<"newDecapsulator", jni::ref<javax::crypto::KEM_Decapsulator>>(privateKey); }
	jni::ref<javax::crypto::KEM_Decapsulator> newDecapsulator(jni::ref<java::security::PrivateKey> privateKey, jni::ref<java::security::spec::AlgorithmParameterSpec> spec) { return call_method<"newDecapsulator", jni::ref<javax::crypto::KEM_Decapsulator>>(privateKey, spec); }
	jni::ref<java::lang::String> getAlgorithm() { return call_method<"getAlgorithm", jni::ref<java::lang::String>>(); }

protected:

	KEM(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_KEM
