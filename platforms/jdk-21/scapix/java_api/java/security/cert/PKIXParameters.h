// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/security/cert/CertPathParameters.h>

#ifndef SCAPIX_JAVA_API_JAVA_SECURITY_CERT_PKIXPARAMETERS_FWD
#define SCAPIX_JAVA_API_JAVA_SECURITY_CERT_PKIXPARAMETERS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::security::cert { class PKIXParameters; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::security::cert::PKIXParameters>
{
	static constexpr fixed_string class_name = "java/security/cert/PKIXParameters";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::security::cert::CertPathParameters>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_CERT_PKIXPARAMETERS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SECURITY_CERT_PKIXPARAMETERS)
#define SCAPIX_JAVA_API_JAVA_SECURITY_CERT_PKIXPARAMETERS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/KeyStore.h>
#include <scapix/java_api/java/security/cert/CertSelector.h>
#include <scapix/java_api/java/security/cert/CertStore.h>
#include <scapix/java_api/java/security/cert/PKIXCertPathChecker.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::security::cert::PKIXParameters : public jni::object_base<"java/security/cert/PKIXParameters",
	java::lang::Object,
	java::security::cert::CertPathParameters>
{
public:

	static jni::ref<java::security::cert::PKIXParameters> new_object(jni::ref<java::util::Set> trustAnchors) { return base_::new_object(trustAnchors); }
	static jni::ref<java::security::cert::PKIXParameters> new_object(jni::ref<java::security::KeyStore> keystore) { return base_::new_object(keystore); }
	jni::ref<java::util::Set> getTrustAnchors() { return call_method<"getTrustAnchors", jni::ref<java::util::Set>>(); }
	void setTrustAnchors(jni::ref<java::util::Set> trustAnchors) { return call_method<"setTrustAnchors", void>(trustAnchors); }
	jni::ref<java::util::Set> getInitialPolicies() { return call_method<"getInitialPolicies", jni::ref<java::util::Set>>(); }
	void setInitialPolicies(jni::ref<java::util::Set> initialPolicies) { return call_method<"setInitialPolicies", void>(initialPolicies); }
	void setCertStores(jni::ref<java::util::List> stores) { return call_method<"setCertStores", void>(stores); }
	void addCertStore(jni::ref<java::security::cert::CertStore> store) { return call_method<"addCertStore", void>(store); }
	jni::ref<java::util::List> getCertStores() { return call_method<"getCertStores", jni::ref<java::util::List>>(); }
	void setRevocationEnabled(jboolean val) { return call_method<"setRevocationEnabled", void>(val); }
	jboolean isRevocationEnabled() { return call_method<"isRevocationEnabled", jboolean>(); }
	void setExplicitPolicyRequired(jboolean val) { return call_method<"setExplicitPolicyRequired", void>(val); }
	jboolean isExplicitPolicyRequired() { return call_method<"isExplicitPolicyRequired", jboolean>(); }
	void setPolicyMappingInhibited(jboolean val) { return call_method<"setPolicyMappingInhibited", void>(val); }
	jboolean isPolicyMappingInhibited() { return call_method<"isPolicyMappingInhibited", jboolean>(); }
	void setAnyPolicyInhibited(jboolean val) { return call_method<"setAnyPolicyInhibited", void>(val); }
	jboolean isAnyPolicyInhibited() { return call_method<"isAnyPolicyInhibited", jboolean>(); }
	void setPolicyQualifiersRejected(jboolean qualifiersRejected) { return call_method<"setPolicyQualifiersRejected", void>(qualifiersRejected); }
	jboolean getPolicyQualifiersRejected() { return call_method<"getPolicyQualifiersRejected", jboolean>(); }
	jni::ref<java::util::Date> getDate() { return call_method<"getDate", jni::ref<java::util::Date>>(); }
	void setDate(jni::ref<java::util::Date> date) { return call_method<"setDate", void>(date); }
	void setCertPathCheckers(jni::ref<java::util::List> checkers) { return call_method<"setCertPathCheckers", void>(checkers); }
	jni::ref<java::util::List> getCertPathCheckers() { return call_method<"getCertPathCheckers", jni::ref<java::util::List>>(); }
	void addCertPathChecker(jni::ref<java::security::cert::PKIXCertPathChecker> checker) { return call_method<"addCertPathChecker", void>(checker); }
	jni::ref<java::lang::String> getSigProvider() { return call_method<"getSigProvider", jni::ref<java::lang::String>>(); }
	void setSigProvider(jni::ref<java::lang::String> sigProvider) { return call_method<"setSigProvider", void>(sigProvider); }
	jni::ref<java::security::cert::CertSelector> getTargetCertConstraints() { return call_method<"getTargetCertConstraints", jni::ref<java::security::cert::CertSelector>>(); }
	void setTargetCertConstraints(jni::ref<java::security::cert::CertSelector> selector) { return call_method<"setTargetCertConstraints", void>(selector); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	PKIXParameters(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_CERT_PKIXPARAMETERS
