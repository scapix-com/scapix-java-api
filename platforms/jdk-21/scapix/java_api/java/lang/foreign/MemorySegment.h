// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_MEMORYSEGMENT_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_MEMORYSEGMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::foreign { class MemorySegment; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::foreign::MemorySegment>
{
	static constexpr fixed_string class_name = "java/lang/foreign/MemorySegment";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_MEMORYSEGMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_MEMORYSEGMENT)
#define SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_MEMORYSEGMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/lang/foreign/AddressLayout.h>
#include <scapix/java_api/java/lang/foreign/Arena.h>
#include <scapix/java_api/java/lang/foreign/MemoryLayout.h>
#include <scapix/java_api/java/lang/foreign/MemorySegment_Scope.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout_OfBoolean.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout_OfByte.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout_OfChar.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout_OfDouble.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout_OfFloat.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout_OfInt.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout_OfLong.h>
#include <scapix/java_api/java/lang/foreign/ValueLayout_OfShort.h>
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::foreign::MemorySegment : public jni::object_base<"java/lang/foreign/MemorySegment",
	java::lang::Object>
{
public:

	using Scope = MemorySegment_Scope;

	static jni::ref<java::lang::foreign::MemorySegment> NULL() { return get_static_field<"NULL", jni::ref<java::lang::foreign::MemorySegment>>(); }

	jlong address() { return call_method<"address", jlong>(); }
	jni::ref<java::util::Optional> heapBase() { return call_method<"heapBase", jni::ref<java::util::Optional>>(); }
	jni::ref<java::util::Spliterator> spliterator(jni::ref<java::lang::foreign::MemoryLayout> p1) { return call_method<"spliterator", jni::ref<java::util::Spliterator>>(p1); }
	jni::ref<java::util::stream::Stream> elements(jni::ref<java::lang::foreign::MemoryLayout> p1) { return call_method<"elements", jni::ref<java::util::stream::Stream>>(p1); }
	jni::ref<java::lang::foreign::MemorySegment_Scope> scope() { return call_method<"scope", jni::ref<java::lang::foreign::MemorySegment_Scope>>(); }
	jboolean isAccessibleBy(jni::ref<java::lang::Thread> p1) { return call_method<"isAccessibleBy", jboolean>(p1); }
	jlong byteSize() { return call_method<"byteSize", jlong>(); }
	jni::ref<java::lang::foreign::MemorySegment> asSlice(jlong p1, jlong p2) { return call_method<"asSlice", jni::ref<java::lang::foreign::MemorySegment>>(p1, p2); }
	jni::ref<java::lang::foreign::MemorySegment> asSlice(jlong p1, jlong p2, jlong p3) { return call_method<"asSlice", jni::ref<java::lang::foreign::MemorySegment>>(p1, p2, p3); }
	jni::ref<java::lang::foreign::MemorySegment> asSlice(jlong offset, jni::ref<java::lang::foreign::MemoryLayout> p2) { return call_method<"asSlice", jni::ref<java::lang::foreign::MemorySegment>>(offset, p2); }
	jni::ref<java::lang::foreign::MemorySegment> asSlice(jlong p1) { return call_method<"asSlice", jni::ref<java::lang::foreign::MemorySegment>>(p1); }
	jni::ref<java::lang::foreign::MemorySegment> reinterpret(jlong p1) { return call_method<"reinterpret", jni::ref<java::lang::foreign::MemorySegment>>(p1); }
	jni::ref<java::lang::foreign::MemorySegment> reinterpret(jni::ref<java::lang::foreign::Arena> p1, jni::ref<java::util::function::Consumer> p2) { return call_method<"reinterpret", jni::ref<java::lang::foreign::MemorySegment>>(p1, p2); }
	jni::ref<java::lang::foreign::MemorySegment> reinterpret(jlong p1, jni::ref<java::lang::foreign::Arena> p2, jni::ref<java::util::function::Consumer> p3) { return call_method<"reinterpret", jni::ref<java::lang::foreign::MemorySegment>>(p1, p2, p3); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	jni::ref<java::lang::foreign::MemorySegment> asReadOnly() { return call_method<"asReadOnly", jni::ref<java::lang::foreign::MemorySegment>>(); }
	jboolean isNative() { return call_method<"isNative", jboolean>(); }
	jboolean isMapped() { return call_method<"isMapped", jboolean>(); }
	jni::ref<java::util::Optional> asOverlappingSlice(jni::ref<java::lang::foreign::MemorySegment> p1) { return call_method<"asOverlappingSlice", jni::ref<java::util::Optional>>(p1); }
	jlong segmentOffset(jni::ref<java::lang::foreign::MemorySegment> p1) { return call_method<"segmentOffset", jlong>(p1); }
	jni::ref<java::lang::foreign::MemorySegment> fill(jbyte p1) { return call_method<"fill", jni::ref<java::lang::foreign::MemorySegment>>(p1); }
	jni::ref<java::lang::foreign::MemorySegment> copyFrom(jni::ref<java::lang::foreign::MemorySegment> src) { return call_method<"copyFrom", jni::ref<java::lang::foreign::MemorySegment>>(src); }
	jlong mismatch(jni::ref<java::lang::foreign::MemorySegment> other) { return call_method<"mismatch", jlong>(other); }
	jboolean isLoaded() { return call_method<"isLoaded", jboolean>(); }
	void load() { return call_method<"load", void>(); }
	void unload() { return call_method<"unload", void>(); }
	void force() { return call_method<"force", void>(); }
	jni::ref<java::nio::ByteBuffer> asByteBuffer() { return call_method<"asByteBuffer", jni::ref<java::nio::ByteBuffer>>(); }
	jni::ref<jni::array<jbyte>> toArray(jni::ref<java::lang::foreign::ValueLayout_OfByte> p1) { return call_method<"toArray", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jshort>> toArray(jni::ref<java::lang::foreign::ValueLayout_OfShort> p1) { return call_method<"toArray", jni::ref<jni::array<jshort>>>(p1); }
	jni::ref<jni::array<jchar>> toArray(jni::ref<java::lang::foreign::ValueLayout_OfChar> p1) { return call_method<"toArray", jni::ref<jni::array<jchar>>>(p1); }
	jni::ref<jni::array<jint>> toArray(jni::ref<java::lang::foreign::ValueLayout_OfInt> p1) { return call_method<"toArray", jni::ref<jni::array<jint>>>(p1); }
	jni::ref<jni::array<jfloat>> toArray(jni::ref<java::lang::foreign::ValueLayout_OfFloat> p1) { return call_method<"toArray", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<jni::array<jlong>> toArray(jni::ref<java::lang::foreign::ValueLayout_OfLong> p1) { return call_method<"toArray", jni::ref<jni::array<jlong>>>(p1); }
	jni::ref<jni::array<jdouble>> toArray(jni::ref<java::lang::foreign::ValueLayout_OfDouble> p1) { return call_method<"toArray", jni::ref<jni::array<jdouble>>>(p1); }
	jni::ref<java::lang::String> getUtf8String(jlong offset) { return call_method<"getUtf8String", jni::ref<java::lang::String>>(offset); }
	void setUtf8String(jlong offset, jni::ref<java::lang::String> p2) { return call_method<"setUtf8String", void>(offset, p2); }
	static jni::ref<java::lang::foreign::MemorySegment> ofBuffer(jni::ref<java::nio::Buffer> buffer) { return call_static_method<"ofBuffer", jni::ref<java::lang::foreign::MemorySegment>>(buffer); }
	static jni::ref<java::lang::foreign::MemorySegment> ofArray(jni::ref<jni::array<jbyte>> byteArray) { return call_static_method<"ofArray", jni::ref<java::lang::foreign::MemorySegment>>(byteArray); }
	static jni::ref<java::lang::foreign::MemorySegment> ofArray(jni::ref<jni::array<jchar>> charArray) { return call_static_method<"ofArray", jni::ref<java::lang::foreign::MemorySegment>>(charArray); }
	static jni::ref<java::lang::foreign::MemorySegment> ofArray(jni::ref<jni::array<jshort>> shortArray) { return call_static_method<"ofArray", jni::ref<java::lang::foreign::MemorySegment>>(shortArray); }
	static jni::ref<java::lang::foreign::MemorySegment> ofArray(jni::ref<jni::array<jint>> intArray) { return call_static_method<"ofArray", jni::ref<java::lang::foreign::MemorySegment>>(intArray); }
	static jni::ref<java::lang::foreign::MemorySegment> ofArray(jni::ref<jni::array<jfloat>> floatArray) { return call_static_method<"ofArray", jni::ref<java::lang::foreign::MemorySegment>>(floatArray); }
	static jni::ref<java::lang::foreign::MemorySegment> ofArray(jni::ref<jni::array<jlong>> longArray) { return call_static_method<"ofArray", jni::ref<java::lang::foreign::MemorySegment>>(longArray); }
	static jni::ref<java::lang::foreign::MemorySegment> ofArray(jni::ref<jni::array<jdouble>> doubleArray) { return call_static_method<"ofArray", jni::ref<java::lang::foreign::MemorySegment>>(doubleArray); }
	static jni::ref<java::lang::foreign::MemorySegment> ofAddress(jlong address) { return call_static_method<"ofAddress", jni::ref<java::lang::foreign::MemorySegment>>(address); }
	static void copy(jni::ref<java::lang::foreign::MemorySegment> srcSegment, jlong srcOffset, jni::ref<java::lang::foreign::MemorySegment> p3, jlong dstSegment, jlong dstOffset) { return call_static_method<"copy", void>(srcSegment, srcOffset, p3, dstSegment, dstOffset); }
	static void copy(jni::ref<java::lang::foreign::MemorySegment> srcSegment, jni::ref<java::lang::foreign::ValueLayout> srcElementLayout, jlong srcOffset, jni::ref<java::lang::foreign::MemorySegment> p4, jni::ref<java::lang::foreign::ValueLayout> dstSegment, jlong dstElementLayout, jlong dstOffset) { return call_static_method<"copy", void>(srcSegment, srcElementLayout, srcOffset, p4, dstSegment, dstElementLayout, dstOffset); }
	jbyte get(jni::ref<java::lang::foreign::ValueLayout_OfByte> layout, jlong offset) { return call_method<"get", jbyte>(layout, offset); }
	void set(jni::ref<java::lang::foreign::ValueLayout_OfByte> layout, jlong offset, jbyte p3) { return call_method<"set", void>(layout, offset, p3); }
	jboolean get(jni::ref<java::lang::foreign::ValueLayout_OfBoolean> layout, jlong offset) { return call_method<"get", jboolean>(layout, offset); }
	void set(jni::ref<java::lang::foreign::ValueLayout_OfBoolean> layout, jlong offset, jboolean p3) { return call_method<"set", void>(layout, offset, p3); }
	jchar get(jni::ref<java::lang::foreign::ValueLayout_OfChar> layout, jlong offset) { return call_method<"get", jchar>(layout, offset); }
	void set(jni::ref<java::lang::foreign::ValueLayout_OfChar> layout, jlong offset, jchar p3) { return call_method<"set", void>(layout, offset, p3); }
	jshort get(jni::ref<java::lang::foreign::ValueLayout_OfShort> layout, jlong offset) { return call_method<"get", jshort>(layout, offset); }
	void set(jni::ref<java::lang::foreign::ValueLayout_OfShort> layout, jlong offset, jshort p3) { return call_method<"set", void>(layout, offset, p3); }
	jint get(jni::ref<java::lang::foreign::ValueLayout_OfInt> layout, jlong offset) { return call_method<"get", jint>(layout, offset); }
	void set(jni::ref<java::lang::foreign::ValueLayout_OfInt> layout, jlong offset, jint p3) { return call_method<"set", void>(layout, offset, p3); }
	jfloat get(jni::ref<java::lang::foreign::ValueLayout_OfFloat> layout, jlong offset) { return call_method<"get", jfloat>(layout, offset); }
	void set(jni::ref<java::lang::foreign::ValueLayout_OfFloat> layout, jlong offset, jfloat p3) { return call_method<"set", void>(layout, offset, p3); }
	jlong get(jni::ref<java::lang::foreign::ValueLayout_OfLong> layout, jlong offset) { return call_method<"get", jlong>(layout, offset); }
	void set(jni::ref<java::lang::foreign::ValueLayout_OfLong> layout, jlong offset, jlong p3) { return call_method<"set", void>(layout, offset, p3); }
	jdouble get(jni::ref<java::lang::foreign::ValueLayout_OfDouble> layout, jlong offset) { return call_method<"get", jdouble>(layout, offset); }
	void set(jni::ref<java::lang::foreign::ValueLayout_OfDouble> layout, jlong offset, jdouble p3) { return call_method<"set", void>(layout, offset, p3); }
	jni::ref<java::lang::foreign::MemorySegment> get(jni::ref<java::lang::foreign::AddressLayout> layout, jlong offset) { return call_method<"get", jni::ref<java::lang::foreign::MemorySegment>>(layout, offset); }
	void set(jni::ref<java::lang::foreign::AddressLayout> layout, jlong offset, jni::ref<java::lang::foreign::MemorySegment> p3) { return call_method<"set", void>(layout, offset, p3); }
	jbyte getAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfByte> layout, jlong index) { return call_method<"getAtIndex", jbyte>(layout, index); }
	jboolean getAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfBoolean> layout, jlong index) { return call_method<"getAtIndex", jboolean>(layout, index); }
	jchar getAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfChar> layout, jlong index) { return call_method<"getAtIndex", jchar>(layout, index); }
	void setAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfChar> layout, jlong index, jchar p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	jshort getAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfShort> layout, jlong index) { return call_method<"getAtIndex", jshort>(layout, index); }
	void setAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfByte> layout, jlong index, jbyte p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	void setAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfBoolean> layout, jlong index, jboolean p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	void setAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfShort> layout, jlong index, jshort p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	jint getAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfInt> layout, jlong index) { return call_method<"getAtIndex", jint>(layout, index); }
	void setAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfInt> layout, jlong index, jint p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	jfloat getAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfFloat> layout, jlong index) { return call_method<"getAtIndex", jfloat>(layout, index); }
	void setAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfFloat> layout, jlong index, jfloat p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	jlong getAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfLong> layout, jlong index) { return call_method<"getAtIndex", jlong>(layout, index); }
	void setAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfLong> layout, jlong index, jlong p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	jdouble getAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfDouble> layout, jlong index) { return call_method<"getAtIndex", jdouble>(layout, index); }
	void setAtIndex(jni::ref<java::lang::foreign::ValueLayout_OfDouble> layout, jlong index, jdouble p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	jni::ref<java::lang::foreign::MemorySegment> getAtIndex(jni::ref<java::lang::foreign::AddressLayout> layout, jlong index) { return call_method<"getAtIndex", jni::ref<java::lang::foreign::MemorySegment>>(layout, index); }
	void setAtIndex(jni::ref<java::lang::foreign::AddressLayout> layout, jlong index, jni::ref<java::lang::foreign::MemorySegment> p3) { return call_method<"setAtIndex", void>(layout, index, p3); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	static void copy(jni::ref<java::lang::foreign::MemorySegment> srcSegment, jni::ref<java::lang::foreign::ValueLayout> srcLayout, jlong srcOffset, jni::ref<java::lang::Object> p4, jint dstArray, jint dstIndex) { return call_static_method<"copy", void>(srcSegment, srcLayout, srcOffset, p4, dstArray, dstIndex); }
	static void copy(jni::ref<java::lang::Object> srcArray, jint srcIndex, jni::ref<java::lang::foreign::MemorySegment> dstSegment, jni::ref<java::lang::foreign::ValueLayout> dstLayout, jlong dstOffset, jint p6) { return call_static_method<"copy", void>(srcArray, srcIndex, dstSegment, dstLayout, dstOffset, p6); }
	static jlong mismatch(jni::ref<java::lang::foreign::MemorySegment> srcSegment, jlong srcFromOffset, jlong p3, jni::ref<java::lang::foreign::MemorySegment> srcToOffset, jlong p5, jlong dstSegment) { return call_static_method<"mismatch", jlong>(srcSegment, srcFromOffset, p3, srcToOffset, p5, dstSegment); }

protected:

	MemorySegment(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_MEMORYSEGMENT
