// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class StringTemplate_Processor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::StringTemplate_Processor>
{
	static constexpr fixed_string class_name = "java/lang/StringTemplate$Processor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR)
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/StringTemplate.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/java/lang/StringTemplate_Processor_Linkage.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::StringTemplate_Processor : public jni::object_base<"java/lang/StringTemplate$Processor",
	java::lang::Object>
{
public:

	using Linkage = StringTemplate_Processor_Linkage;

	jni::ref<java::lang::Object> process(jni::ref<java::lang::StringTemplate> p1) { return call_method<"process", jni::ref<java::lang::Object>>(p1); }
	static jni::ref<java::lang::StringTemplate_Processor> of(jni::ref<java::util::function::Function> process) { return call_static_method<"of", jni::ref<java::lang::StringTemplate_Processor>>(process); }

protected:

	StringTemplate_Processor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR
