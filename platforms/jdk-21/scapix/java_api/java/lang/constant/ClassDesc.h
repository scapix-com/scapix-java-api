// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/constant/ConstantDesc.h>
#include <scapix/java_api/java/lang/invoke/TypeDescriptor_OfField.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_CLASSDESC_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_CLASSDESC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::constant { class ClassDesc; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::constant::ClassDesc>
{
	static constexpr fixed_string class_name = "java/lang/constant/ClassDesc";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::constant::ConstantDesc, scapix::java_api::java::lang::invoke::TypeDescriptor_OfField>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_CLASSDESC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_CLASSDESC)
#define SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_CLASSDESC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::constant::ClassDesc : public jni::object_base<"java/lang/constant/ClassDesc",
	java::lang::Object,
	java::lang::constant::ConstantDesc,
	java::lang::invoke::TypeDescriptor_OfField>
{
public:

	static jni::ref<java::lang::constant::ClassDesc> of(jni::ref<java::lang::String> name) { return call_static_method<"of", jni::ref<java::lang::constant::ClassDesc>>(name); }
	static jni::ref<java::lang::constant::ClassDesc> ofInternalName(jni::ref<java::lang::String> name) { return call_static_method<"ofInternalName", jni::ref<java::lang::constant::ClassDesc>>(name); }
	static jni::ref<java::lang::constant::ClassDesc> of(jni::ref<java::lang::String> packageName, jni::ref<java::lang::String> className) { return call_static_method<"of", jni::ref<java::lang::constant::ClassDesc>>(packageName, className); }
	static jni::ref<java::lang::constant::ClassDesc> ofDescriptor(jni::ref<java::lang::String> descriptor) { return call_static_method<"ofDescriptor", jni::ref<java::lang::constant::ClassDesc>>(descriptor); }
	jni::ref<java::lang::constant::ClassDesc> arrayType() { return call_method<"arrayType", jni::ref<java::lang::constant::ClassDesc>>(); }
	jni::ref<java::lang::constant::ClassDesc> arrayType(jint rank) { return call_method<"arrayType", jni::ref<java::lang::constant::ClassDesc>>(rank); }
	jni::ref<java::lang::constant::ClassDesc> nested(jni::ref<java::lang::String> nestedName) { return call_method<"nested", jni::ref<java::lang::constant::ClassDesc>>(nestedName); }
	jni::ref<java::lang::constant::ClassDesc> nested(jni::ref<java::lang::String> firstNestedName, jni::ref<jni::array<java::lang::String>> moreNestedNames) { return call_method<"nested", jni::ref<java::lang::constant::ClassDesc>>(firstNestedName, moreNestedNames); }
	jboolean isArray() { return call_method<"isArray", jboolean>(); }
	jboolean isPrimitive() { return call_method<"isPrimitive", jboolean>(); }
	jboolean isClassOrInterface() { return call_method<"isClassOrInterface", jboolean>(); }
	jni::ref<java::lang::constant::ClassDesc> componentType() { return call_method<"componentType", jni::ref<java::lang::constant::ClassDesc>>(); }
	jni::ref<java::lang::String> packageName() { return call_method<"packageName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> displayName() { return call_method<"displayName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> descriptorString() { return call_method<"descriptorString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Class> resolveConstantDesc(jni::ref<java::lang::invoke::MethodHandles_Lookup> p1) { return call_method<"resolveConstantDesc", jni::ref<java::lang::Class>>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	ClassDesc(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_CLASSDESC
