// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_THREAD_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_THREAD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Thread; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Thread>
{
	static constexpr fixed_string class_name = "java/lang/Thread";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Runnable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_THREAD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_THREAD)
#define SCAPIX_JAVA_API_JAVA_LANG_THREAD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/StackTraceElement.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread_Builder_OfPlatform.h>
#include <scapix/java_api/java/lang/Thread_Builder_OfVirtual.h>
#include <scapix/java_api/java/lang/Thread_State.h>
#include <scapix/java_api/java/lang/Thread_UncaughtExceptionHandler.h>
#include <scapix/java_api/java/lang/ThreadGroup.h>
#include <scapix/java_api/java/time/Duration.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/lang/Thread_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Thread : public jni::object_base<"java/lang/Thread",
	java::lang::Object,
	java::lang::Runnable>
{
public:

	using UncaughtExceptionHandler = Thread_UncaughtExceptionHandler;
	using State = Thread_State;
	using Builder = Thread_Builder;

	static jint MIN_PRIORITY() { return get_static_field<"MIN_PRIORITY", jint>(); }
	static jint NORM_PRIORITY() { return get_static_field<"NORM_PRIORITY", jint>(); }
	static jint MAX_PRIORITY() { return get_static_field<"MAX_PRIORITY", jint>(); }

	static jni::ref<java::lang::Thread> currentThread() { return call_static_method<"currentThread", jni::ref<java::lang::Thread>>(); }
	static void yield() { return call_static_method<"yield", void>(); }
	static void sleep(jlong millis) { return call_static_method<"sleep", void>(millis); }
	static void sleep(jlong millis, jint p2) { return call_static_method<"sleep", void>(millis, p2); }
	static void sleep(jni::ref<java::time::Duration> duration) { return call_static_method<"sleep", void>(duration); }
	static void onSpinWait() { return call_static_method<"onSpinWait", void>(); }
	static jni::ref<java::lang::Thread_Builder_OfPlatform> ofPlatform() { return call_static_method<"ofPlatform", jni::ref<java::lang::Thread_Builder_OfPlatform>>(); }
	static jni::ref<java::lang::Thread_Builder_OfVirtual> ofVirtual() { return call_static_method<"ofVirtual", jni::ref<java::lang::Thread_Builder_OfVirtual>>(); }
	static jni::ref<java::lang::Thread> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::Thread> new_object(jni::ref<java::lang::Runnable> task) { return base_::new_object(task); }
	static jni::ref<java::lang::Thread> new_object(jni::ref<java::lang::ThreadGroup> group, jni::ref<java::lang::Runnable> task) { return base_::new_object(group, task); }
	static jni::ref<java::lang::Thread> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	static jni::ref<java::lang::Thread> new_object(jni::ref<java::lang::ThreadGroup> group, jni::ref<java::lang::String> name) { return base_::new_object(group, name); }
	static jni::ref<java::lang::Thread> new_object(jni::ref<java::lang::Runnable> task, jni::ref<java::lang::String> name) { return base_::new_object(task, name); }
	static jni::ref<java::lang::Thread> new_object(jni::ref<java::lang::ThreadGroup> group, jni::ref<java::lang::Runnable> task, jni::ref<java::lang::String> name) { return base_::new_object(group, task, name); }
	static jni::ref<java::lang::Thread> new_object(jni::ref<java::lang::ThreadGroup> group, jni::ref<java::lang::Runnable> task, jni::ref<java::lang::String> name, jlong stackSize) { return base_::new_object(group, task, name, stackSize); }
	static jni::ref<java::lang::Thread> new_object(jni::ref<java::lang::ThreadGroup> group, jni::ref<java::lang::Runnable> task, jni::ref<java::lang::String> name, jlong stackSize, jboolean p5) { return base_::new_object(group, task, name, stackSize, p5); }
	static jni::ref<java::lang::Thread> startVirtualThread(jni::ref<java::lang::Runnable> task) { return call_static_method<"startVirtualThread", jni::ref<java::lang::Thread>>(task); }
	jboolean isVirtual() { return call_method<"isVirtual", jboolean>(); }
	void start() { return call_method<"start", void>(); }
	void run() { return call_method<"run", void>(); }
	void stop() { return call_method<"stop", void>(); }
	void interrupt() { return call_method<"interrupt", void>(); }
	static jboolean interrupted() { return call_static_method<"interrupted", jboolean>(); }
	jboolean isInterrupted() { return call_method<"isInterrupted", jboolean>(); }
	jboolean isAlive() { return call_method<"isAlive", jboolean>(); }
	void suspend() { return call_method<"suspend", void>(); }
	void resume() { return call_method<"resume", void>(); }
	void setPriority(jint newPriority) { return call_method<"setPriority", void>(newPriority); }
	jint getPriority() { return call_method<"getPriority", jint>(); }
	void setName(jni::ref<java::lang::String> name) { return call_method<"setName", void>(name); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::ThreadGroup> getThreadGroup() { return call_method<"getThreadGroup", jni::ref<java::lang::ThreadGroup>>(); }
	static jint activeCount() { return call_static_method<"activeCount", jint>(); }
	static jint enumerate(jni::ref<jni::array<java::lang::Thread>> tarray) { return call_static_method<"enumerate", jint>(tarray); }
	jint countStackFrames() { return call_method<"countStackFrames", jint>(); }
	void join(jlong millis) { return call_method<"join", void>(millis); }
	void join(jlong millis, jint p2) { return call_method<"join", void>(millis, p2); }
	void join() { return call_method<"join", void>(); }
	jboolean join(jni::ref<java::time::Duration> duration) { return call_method<"join", jboolean>(duration); }
	static void dumpStack() { return call_static_method<"dumpStack", void>(); }
	void setDaemon(jboolean on) { return call_method<"setDaemon", void>(on); }
	jboolean isDaemon() { return call_method<"isDaemon", jboolean>(); }
	void checkAccess() { return call_method<"checkAccess", void>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::ClassLoader> getContextClassLoader() { return call_method<"getContextClassLoader", jni::ref<java::lang::ClassLoader>>(); }
	void setContextClassLoader(jni::ref<java::lang::ClassLoader> cl) { return call_method<"setContextClassLoader", void>(cl); }
	static jboolean holdsLock(jni::ref<java::lang::Object> p1) { return call_static_method<"holdsLock", jboolean>(p1); }
	jni::ref<jni::array<java::lang::StackTraceElement>> getStackTrace() { return call_method<"getStackTrace", jni::ref<jni::array<java::lang::StackTraceElement>>>(); }
	static jni::ref<java::util::Map> getAllStackTraces() { return call_static_method<"getAllStackTraces", jni::ref<java::util::Map>>(); }
	jlong getId() { return call_method<"getId", jlong>(); }
	jlong threadId() { return call_method<"threadId", jlong>(); }
	jni::ref<java::lang::Thread_State> getState() { return call_method<"getState", jni::ref<java::lang::Thread_State>>(); }
	static void setDefaultUncaughtExceptionHandler(jni::ref<java::lang::Thread_UncaughtExceptionHandler> ueh) { return call_static_method<"setDefaultUncaughtExceptionHandler", void>(ueh); }
	static jni::ref<java::lang::Thread_UncaughtExceptionHandler> getDefaultUncaughtExceptionHandler() { return call_static_method<"getDefaultUncaughtExceptionHandler", jni::ref<java::lang::Thread_UncaughtExceptionHandler>>(); }
	jni::ref<java::lang::Thread_UncaughtExceptionHandler> getUncaughtExceptionHandler() { return call_method<"getUncaughtExceptionHandler", jni::ref<java::lang::Thread_UncaughtExceptionHandler>>(); }
	void setUncaughtExceptionHandler(jni::ref<java::lang::Thread_UncaughtExceptionHandler> ueh) { return call_method<"setUncaughtExceptionHandler", void>(ueh); }

protected:

	Thread(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_THREAD
