// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_LINKAGE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_LINKAGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class StringTemplate_Processor_Linkage; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::StringTemplate_Processor_Linkage>
{
	static constexpr fixed_string class_name = "java/lang/StringTemplate$Processor$Linkage";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_LINKAGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_LINKAGE)
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_LINKAGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::StringTemplate_Processor_Linkage : public jni::object_base<"java/lang/StringTemplate$Processor$Linkage",
	java::lang::Object>
{
public:

	jni::ref<java::lang::invoke::MethodHandle> linkage(jni::ref<java::util::List> p1, jni::ref<java::lang::invoke::MethodType> p2) { return call_method<"linkage", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2); }

protected:

	StringTemplate_Processor_Linkage(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_PROCESSOR_LINKAGE
