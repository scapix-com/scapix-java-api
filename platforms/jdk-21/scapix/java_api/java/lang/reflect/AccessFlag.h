// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ACCESSFLAG_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ACCESSFLAG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class AccessFlag; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::AccessFlag>
{
	static constexpr fixed_string class_name = "java/lang/reflect/AccessFlag";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ACCESSFLAG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ACCESSFLAG)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ACCESSFLAG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/AccessFlag_Location.h>
#include <scapix/java_api/java/lang/reflect/ClassFileFormatVersion.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::AccessFlag : public jni::object_base<"java/lang/reflect/AccessFlag",
	java::lang::Enum>
{
public:

	using Location = AccessFlag_Location;

	static jni::ref<java::lang::reflect::AccessFlag> PUBLIC() { return get_static_field<"PUBLIC", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> PRIVATE() { return get_static_field<"PRIVATE", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> PROTECTED() { return get_static_field<"PROTECTED", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> STATIC() { return get_static_field<"STATIC", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> FINAL() { return get_static_field<"FINAL", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> SUPER() { return get_static_field<"SUPER", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> OPEN() { return get_static_field<"OPEN", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> TRANSITIVE() { return get_static_field<"TRANSITIVE", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> SYNCHRONIZED() { return get_static_field<"SYNCHRONIZED", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> STATIC_PHASE() { return get_static_field<"STATIC_PHASE", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> VOLATILE() { return get_static_field<"VOLATILE", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> BRIDGE() { return get_static_field<"BRIDGE", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> TRANSIENT() { return get_static_field<"TRANSIENT", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> VARARGS() { return get_static_field<"VARARGS", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> NATIVE() { return get_static_field<"NATIVE", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> INTERFACE() { return get_static_field<"INTERFACE", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> ABSTRACT() { return get_static_field<"ABSTRACT", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> STRICT() { return get_static_field<"STRICT", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> SYNTHETIC() { return get_static_field<"SYNTHETIC", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> ANNOTATION() { return get_static_field<"ANNOTATION", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> ENUM() { return get_static_field<"ENUM", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> MANDATED() { return get_static_field<"MANDATED", jni::ref<java::lang::reflect::AccessFlag>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> MODULE() { return get_static_field<"MODULE", jni::ref<java::lang::reflect::AccessFlag>>(); }

	static jni::ref<jni::array<java::lang::reflect::AccessFlag>> values() { return call_static_method<"values", jni::ref<jni::array<java::lang::reflect::AccessFlag>>>(); }
	static jni::ref<java::lang::reflect::AccessFlag> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<java::lang::reflect::AccessFlag>>(name); }
	jint mask() { return call_method<"mask", jint>(); }
	jboolean sourceModifier() { return call_method<"sourceModifier", jboolean>(); }
	jni::ref<java::util::Set> locations() { return call_method<"locations", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> locations(jni::ref<java::lang::reflect::ClassFileFormatVersion> cffv) { return call_method<"locations", jni::ref<java::util::Set>>(cffv); }
	static jni::ref<java::util::Set> maskToAccessFlags(jint mask, jni::ref<java::lang::reflect::AccessFlag_Location> location) { return call_static_method<"maskToAccessFlags", jni::ref<java::util::Set>>(mask, location); }

protected:

	AccessFlag(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ACCESSFLAG
