// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/reflect/AccessibleObject.h>
#include <scapix/java_api/java/lang/reflect/Member.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_FIELD_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_FIELD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class Field; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::Field>
{
	static constexpr fixed_string class_name = "java/lang/reflect/Field";
	using base_classes = std::tuple<scapix::java_api::java::lang::reflect::AccessibleObject, scapix::java_api::java::lang::reflect::Member>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_FIELD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_FIELD)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_FIELD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedType.h>
#include <scapix/java_api/java/lang/reflect/Type.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::Field : public jni::object_base<"java/lang/reflect/Field",
	java::lang::reflect::AccessibleObject,
	java::lang::reflect::Member>
{
public:

	void setAccessible(jboolean flag) { return call_method<"setAccessible", void>(flag); }
	jni::ref<java::lang::Class> getDeclaringClass() { return call_method<"getDeclaringClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getModifiers() { return call_method<"getModifiers", jint>(); }
	jni::ref<java::util::Set> accessFlags() { return call_method<"accessFlags", jni::ref<java::util::Set>>(); }
	jboolean isEnumConstant() { return call_method<"isEnumConstant", jboolean>(); }
	jboolean isSynthetic() { return call_method<"isSynthetic", jboolean>(); }
	jni::ref<java::lang::Class> getType() { return call_method<"getType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::reflect::Type> getGenericType() { return call_method<"getGenericType", jni::ref<java::lang::reflect::Type>>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toGenericString() { return call_method<"toGenericString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> obj) { return call_method<"get", jni::ref<java::lang::Object>>(obj); }
	jboolean getBoolean(jni::ref<java::lang::Object> obj) { return call_method<"getBoolean", jboolean>(obj); }
	jbyte getByte(jni::ref<java::lang::Object> obj) { return call_method<"getByte", jbyte>(obj); }
	jchar getChar(jni::ref<java::lang::Object> obj) { return call_method<"getChar", jchar>(obj); }
	jshort getShort(jni::ref<java::lang::Object> obj) { return call_method<"getShort", jshort>(obj); }
	jint getInt(jni::ref<java::lang::Object> obj) { return call_method<"getInt", jint>(obj); }
	jlong getLong(jni::ref<java::lang::Object> obj) { return call_method<"getLong", jlong>(obj); }
	jfloat getFloat(jni::ref<java::lang::Object> obj) { return call_method<"getFloat", jfloat>(obj); }
	jdouble getDouble(jni::ref<java::lang::Object> obj) { return call_method<"getDouble", jdouble>(obj); }
	void set(jni::ref<java::lang::Object> obj, jni::ref<java::lang::Object> value) { return call_method<"set", void>(obj, value); }
	void setBoolean(jni::ref<java::lang::Object> obj, jboolean z) { return call_method<"setBoolean", void>(obj, z); }
	void setByte(jni::ref<java::lang::Object> obj, jbyte b) { return call_method<"setByte", void>(obj, b); }
	void setChar(jni::ref<java::lang::Object> obj, jchar c) { return call_method<"setChar", void>(obj, c); }
	void setShort(jni::ref<java::lang::Object> obj, jshort s) { return call_method<"setShort", void>(obj, s); }
	void setInt(jni::ref<java::lang::Object> obj, jint i) { return call_method<"setInt", void>(obj, i); }
	void setLong(jni::ref<java::lang::Object> obj, jlong l) { return call_method<"setLong", void>(obj, l); }
	void setFloat(jni::ref<java::lang::Object> obj, jfloat f) { return call_method<"setFloat", void>(obj, f); }
	void setDouble(jni::ref<java::lang::Object> obj, jdouble d) { return call_method<"setDouble", void>(obj, d); }
	jni::ref<java::lang::annotation::Annotation> getAnnotation(jni::ref<java::lang::Class> annotationClass) { return call_method<"getAnnotation", jni::ref<java::lang::annotation::Annotation>>(annotationClass); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getAnnotationsByType(jni::ref<java::lang::Class> annotationClass) { return call_method<"getAnnotationsByType", jni::ref<jni::array<java::lang::annotation::Annotation>>>(annotationClass); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getDeclaredAnnotations() { return call_method<"getDeclaredAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(); }
	jni::ref<java::lang::reflect::AnnotatedType> getAnnotatedType() { return call_method<"getAnnotatedType", jni::ref<java::lang::reflect::AnnotatedType>>(); }

protected:

	Field(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_FIELD
