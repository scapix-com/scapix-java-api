// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/access/JavaLangReflectAccess.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class ReflectAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::ReflectAccess>
{
	static constexpr fixed_string class_name = "java/lang/reflect/ReflectAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::access::JavaLangReflectAccess>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/AccessibleObject.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Executable.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/jdk/internal/reflect/ConstructorAccessor.h>
#include <scapix/java_api/jdk/internal/reflect/MethodAccessor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::reflect::ReflectAccess : public jni::object_base<"java/lang/reflect/ReflectAccess",
	java::lang::Object,
	jdk::internal::access::JavaLangReflectAccess>
{
public:

	jni::ref<java::lang::reflect::Constructor> newConstructor(jni::ref<java::lang::Class> declaringClass, jni::ref<jni::array<java::lang::Class>> parameterTypes, jni::ref<jni::array<java::lang::Class>> checkedExceptions, jint modifiers, jint slot, jni::ref<java::lang::String> signature, jni::ref<jni::array<jbyte>> annotations, jni::ref<jni::array<jbyte>> parameterAnnotations) { return call_method<"newConstructor", jni::ref<java::lang::reflect::Constructor>>(declaringClass, parameterTypes, checkedExceptions, modifiers, slot, signature, annotations, parameterAnnotations); }
	jni::ref<jdk::internal::reflect::MethodAccessor> getMethodAccessor(jni::ref<java::lang::reflect::Method> m) { return call_method<"getMethodAccessor", jni::ref<jdk::internal::reflect::MethodAccessor>>(m); }
	void setMethodAccessor(jni::ref<java::lang::reflect::Method> m, jni::ref<jdk::internal::reflect::MethodAccessor> accessor) { return call_method<"setMethodAccessor", void>(m, accessor); }
	jni::ref<jdk::internal::reflect::ConstructorAccessor> getConstructorAccessor(jni::ref<java::lang::reflect::Constructor> c) { return call_method<"getConstructorAccessor", jni::ref<jdk::internal::reflect::ConstructorAccessor>>(c); }
	void setConstructorAccessor(jni::ref<java::lang::reflect::Constructor> c, jni::ref<jdk::internal::reflect::ConstructorAccessor> accessor) { return call_method<"setConstructorAccessor", void>(c, accessor); }
	jint getConstructorSlot(jni::ref<java::lang::reflect::Constructor> c) { return call_method<"getConstructorSlot", jint>(c); }
	jni::ref<java::lang::String> getConstructorSignature(jni::ref<java::lang::reflect::Constructor> c) { return call_method<"getConstructorSignature", jni::ref<java::lang::String>>(c); }
	jni::ref<jni::array<jbyte>> getConstructorAnnotations(jni::ref<java::lang::reflect::Constructor> c) { return call_method<"getConstructorAnnotations", jni::ref<jni::array<jbyte>>>(c); }
	jni::ref<jni::array<jbyte>> getConstructorParameterAnnotations(jni::ref<java::lang::reflect::Constructor> c) { return call_method<"getConstructorParameterAnnotations", jni::ref<jni::array<jbyte>>>(c); }
	jni::ref<jni::array<jbyte>> getExecutableTypeAnnotationBytes(jni::ref<java::lang::reflect::Executable> ex) { return call_method<"getExecutableTypeAnnotationBytes", jni::ref<jni::array<jbyte>>>(ex); }
	jni::ref<jni::array<java::lang::Class>> getExecutableSharedParameterTypes(jni::ref<java::lang::reflect::Executable> ex) { return call_method<"getExecutableSharedParameterTypes", jni::ref<jni::array<java::lang::Class>>>(ex); }
	jni::ref<java::lang::reflect::Method> copyMethod(jni::ref<java::lang::reflect::Method> arg) { return call_method<"copyMethod", jni::ref<java::lang::reflect::Method>>(arg); }
	jni::ref<java::lang::reflect::Method> leafCopyMethod(jni::ref<java::lang::reflect::Method> arg) { return call_method<"leafCopyMethod", jni::ref<java::lang::reflect::Method>>(arg); }
	jni::ref<java::lang::reflect::Field> copyField(jni::ref<java::lang::reflect::Field> arg) { return call_method<"copyField", jni::ref<java::lang::reflect::Field>>(arg); }
	jni::ref<java::lang::reflect::Constructor> copyConstructor(jni::ref<java::lang::reflect::Constructor> arg) { return call_method<"copyConstructor", jni::ref<java::lang::reflect::Constructor>>(arg); }
	jni::ref<java::lang::reflect::AccessibleObject> getRoot(jni::ref<java::lang::reflect::AccessibleObject> obj) { return call_method<"getRoot", jni::ref<java::lang::reflect::AccessibleObject>>(obj); }
	jboolean isTrustedFinalField(jni::ref<java::lang::reflect::Field> f) { return call_method<"isTrustedFinalField", jboolean>(f); }
	jni::ref<java::lang::Object> newInstance(jni::ref<java::lang::reflect::Constructor> ctor, jni::ref<jni::array<java::lang::Object>> args, jni::ref<java::lang::Class> caller) { return call_method<"newInstance", jni::ref<java::lang::Object>>(ctor, args, caller); }
	jni::ref<java::lang::Object> invokeDefault(jni::ref<java::lang::Object> proxy, jni::ref<java::lang::reflect::Method> method, jni::ref<jni::array<java::lang::Object>> args, jni::ref<java::lang::Class> caller) { return call_method<"invokeDefault", jni::ref<java::lang::Object>>(proxy, method, args, caller); }

protected:

	ReflectAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS
