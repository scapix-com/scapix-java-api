// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_INVOCATIONHANDLER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_INVOCATIONHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class InvocationHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::InvocationHandler>
{
	static constexpr fixed_string class_name = "java/lang/reflect/InvocationHandler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_INVOCATIONHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_INVOCATIONHANDLER)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_INVOCATIONHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::InvocationHandler : public jni::object_base<"java/lang/reflect/InvocationHandler",
	java::lang::Object>
{
public:

	jni::ref<java::lang::Object> invoke(jni::ref<java::lang::Object> p1, jni::ref<java::lang::reflect::Method> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_method<"invoke", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jni::ref<java::lang::Object> invokeDefault(jni::ref<java::lang::Object> proxy, jni::ref<java::lang::reflect::Method> method, jni::ref<jni::array<java::lang::Object>> args) { return call_static_method<"invokeDefault", jni::ref<java::lang::Object>>(proxy, method, args); }

protected:

	InvocationHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_INVOCATIONHANDLER
