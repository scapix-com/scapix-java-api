// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_CLASSFILEFORMATVERSION_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_CLASSFILEFORMATVERSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class ClassFileFormatVersion; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::ClassFileFormatVersion>
{
	static constexpr fixed_string class_name = "java/lang/reflect/ClassFileFormatVersion";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_CLASSFILEFORMATVERSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_CLASSFILEFORMATVERSION)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_CLASSFILEFORMATVERSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runtime_Version.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::ClassFileFormatVersion : public jni::object_base<"java/lang/reflect/ClassFileFormatVersion",
	java::lang::Enum>
{
public:

	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_0() { return get_static_field<"RELEASE_0", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_1() { return get_static_field<"RELEASE_1", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_2() { return get_static_field<"RELEASE_2", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_3() { return get_static_field<"RELEASE_3", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_4() { return get_static_field<"RELEASE_4", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_5() { return get_static_field<"RELEASE_5", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_6() { return get_static_field<"RELEASE_6", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_7() { return get_static_field<"RELEASE_7", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_8() { return get_static_field<"RELEASE_8", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_9() { return get_static_field<"RELEASE_9", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_10() { return get_static_field<"RELEASE_10", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_11() { return get_static_field<"RELEASE_11", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_12() { return get_static_field<"RELEASE_12", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_13() { return get_static_field<"RELEASE_13", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_14() { return get_static_field<"RELEASE_14", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_15() { return get_static_field<"RELEASE_15", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_16() { return get_static_field<"RELEASE_16", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_17() { return get_static_field<"RELEASE_17", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_18() { return get_static_field<"RELEASE_18", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_19() { return get_static_field<"RELEASE_19", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_20() { return get_static_field<"RELEASE_20", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> RELEASE_21() { return get_static_field<"RELEASE_21", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }

	static jni::ref<jni::array<java::lang::reflect::ClassFileFormatVersion>> values() { return call_static_method<"values", jni::ref<jni::array<java::lang::reflect::ClassFileFormatVersion>>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(name); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> latest() { return call_static_method<"latest", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(); }
	jint major() { return call_method<"major", jint>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> valueOf(jni::ref<java::lang::Runtime_Version> rv) { return call_static_method<"valueOf", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(rv); }
	jni::ref<java::lang::Runtime_Version> runtimeVersion() { return call_method<"runtimeVersion", jni::ref<java::lang::Runtime_Version>>(); }
	static jni::ref<java::lang::reflect::ClassFileFormatVersion> fromMajor(jint major) { return call_static_method<"fromMajor", jni::ref<java::lang::reflect::ClassFileFormatVersion>>(major); }

protected:

	ClassFileFormatVersion(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_CLASSFILEFORMATVERSION
