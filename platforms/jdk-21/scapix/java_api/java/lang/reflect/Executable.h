// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/reflect/AccessibleObject.h>
#include <scapix/java_api/java/lang/reflect/Member.h>
#include <scapix/java_api/java/lang/reflect/GenericDeclaration.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_EXECUTABLE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_EXECUTABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class Executable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::Executable>
{
	static constexpr fixed_string class_name = "java/lang/reflect/Executable";
	using base_classes = std::tuple<scapix::java_api::java::lang::reflect::AccessibleObject, scapix::java_api::java::lang::reflect::Member, scapix::java_api::java::lang::reflect::GenericDeclaration>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_EXECUTABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_EXECUTABLE)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_EXECUTABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedType.h>
#include <scapix/java_api/java/lang/reflect/Parameter.h>
#include <scapix/java_api/java/lang/reflect/Type.h>
#include <scapix/java_api/java/lang/reflect/TypeVariable.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::Executable : public jni::object_base<"java/lang/reflect/Executable",
	java::lang::reflect::AccessibleObject,
	java::lang::reflect::Member,
	java::lang::reflect::GenericDeclaration>
{
public:

	jni::ref<java::lang::Class> getDeclaringClass() { return call_method<"getDeclaringClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getModifiers() { return call_method<"getModifiers", jint>(); }
	jni::ref<java::util::Set> accessFlags() { return call_method<"accessFlags", jni::ref<java::util::Set>>(); }
	jni::ref<jni::array<java::lang::reflect::TypeVariable>> getTypeParameters() { return call_method<"getTypeParameters", jni::ref<jni::array<java::lang::reflect::TypeVariable>>>(); }
	jni::ref<jni::array<java::lang::Class>> getParameterTypes() { return call_method<"getParameterTypes", jni::ref<jni::array<java::lang::Class>>>(); }
	jint getParameterCount() { return call_method<"getParameterCount", jint>(); }
	jni::ref<jni::array<java::lang::reflect::Type>> getGenericParameterTypes() { return call_method<"getGenericParameterTypes", jni::ref<jni::array<java::lang::reflect::Type>>>(); }
	jni::ref<jni::array<java::lang::reflect::Parameter>> getParameters() { return call_method<"getParameters", jni::ref<jni::array<java::lang::reflect::Parameter>>>(); }
	jni::ref<jni::array<java::lang::Class>> getExceptionTypes() { return call_method<"getExceptionTypes", jni::ref<jni::array<java::lang::Class>>>(); }
	jni::ref<jni::array<java::lang::reflect::Type>> getGenericExceptionTypes() { return call_method<"getGenericExceptionTypes", jni::ref<jni::array<java::lang::reflect::Type>>>(); }
	jni::ref<java::lang::String> toGenericString() { return call_method<"toGenericString", jni::ref<java::lang::String>>(); }
	jboolean isVarArgs() { return call_method<"isVarArgs", jboolean>(); }
	jboolean isSynthetic() { return call_method<"isSynthetic", jboolean>(); }
	jni::ref<jni::array<jni::array<java::lang::annotation::Annotation>>> getParameterAnnotations() { return call_method<"getParameterAnnotations", jni::ref<jni::array<jni::array<java::lang::annotation::Annotation>>>>(); }
	jni::ref<java::lang::annotation::Annotation> getAnnotation(jni::ref<java::lang::Class> annotationClass) { return call_method<"getAnnotation", jni::ref<java::lang::annotation::Annotation>>(annotationClass); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getAnnotationsByType(jni::ref<java::lang::Class> annotationClass) { return call_method<"getAnnotationsByType", jni::ref<jni::array<java::lang::annotation::Annotation>>>(annotationClass); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getDeclaredAnnotations() { return call_method<"getDeclaredAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(); }
	jni::ref<java::lang::reflect::AnnotatedType> getAnnotatedReturnType() { return call_method<"getAnnotatedReturnType", jni::ref<java::lang::reflect::AnnotatedType>>(); }
	jni::ref<java::lang::reflect::AnnotatedType> getAnnotatedReceiverType() { return call_method<"getAnnotatedReceiverType", jni::ref<java::lang::reflect::AnnotatedType>>(); }
	jni::ref<jni::array<java::lang::reflect::AnnotatedType>> getAnnotatedParameterTypes() { return call_method<"getAnnotatedParameterTypes", jni::ref<jni::array<java::lang::reflect::AnnotatedType>>>(); }
	jni::ref<jni::array<java::lang::reflect::AnnotatedType>> getAnnotatedExceptionTypes() { return call_method<"getAnnotatedExceptionTypes", jni::ref<jni::array<java::lang::reflect::AnnotatedType>>>(); }

protected:

	Executable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_EXECUTABLE
