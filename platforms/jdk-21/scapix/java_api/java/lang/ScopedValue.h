// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_SCOPEDVALUE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_SCOPEDVALUE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class ScopedValue; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::ScopedValue>
{
	static constexpr fixed_string class_name = "java/lang/ScopedValue";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_SCOPEDVALUE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_SCOPEDVALUE)
#define SCAPIX_JAVA_API_JAVA_LANG_SCOPEDVALUE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/ScopedValue_Carrier.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::ScopedValue : public jni::object_base<"java/lang/ScopedValue",
	java::lang::Object>
{
public:

	using Carrier = ScopedValue_Carrier;

	jint hashCode() { return call_method<"hashCode", jint>(); }
	static jni::ref<java::lang::ScopedValue_Carrier> where(jni::ref<java::lang::ScopedValue> key, jni::ref<java::lang::Object> value) { return call_static_method<"where", jni::ref<java::lang::ScopedValue_Carrier>>(key, value); }
	static jni::ref<java::lang::Object> callWhere(jni::ref<java::lang::ScopedValue> key, jni::ref<java::lang::Object> value, jni::ref<java::util::concurrent::Callable> op) { return call_static_method<"callWhere", jni::ref<java::lang::Object>>(key, value, op); }
	static jni::ref<java::lang::Object> getWhere(jni::ref<java::lang::ScopedValue> key, jni::ref<java::lang::Object> value, jni::ref<java::util::function::Supplier> op) { return call_static_method<"getWhere", jni::ref<java::lang::Object>>(key, value, op); }
	static void runWhere(jni::ref<java::lang::ScopedValue> key, jni::ref<java::lang::Object> value, jni::ref<java::lang::Runnable> op) { return call_static_method<"runWhere", void>(key, value, op); }
	static jni::ref<java::lang::ScopedValue> newInstance() { return call_static_method<"newInstance", jni::ref<java::lang::ScopedValue>>(); }
	jni::ref<java::lang::Object> get() { return call_method<"get", jni::ref<java::lang::Object>>(); }
	jboolean isBound() { return call_method<"isBound", jboolean>(); }
	jni::ref<java::lang::Object> orElse(jni::ref<java::lang::Object> other) { return call_method<"orElse", jni::ref<java::lang::Object>>(other); }
	jni::ref<java::lang::Object> orElseThrow(jni::ref<java::util::function::Supplier> exceptionSupplier) { return call_method<"orElseThrow", jni::ref<java::lang::Object>>(exceptionSupplier); }

protected:

	ScopedValue(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_SCOPEDVALUE
