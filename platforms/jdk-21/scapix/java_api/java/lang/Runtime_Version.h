// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_RUNTIME_VERSION_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_RUNTIME_VERSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Runtime_Version; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Runtime_Version>
{
	static constexpr fixed_string class_name = "java/lang/Runtime$Version";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_RUNTIME_VERSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_RUNTIME_VERSION)
#define SCAPIX_JAVA_API_JAVA_LANG_RUNTIME_VERSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Runtime_Version : public jni::object_base<"java/lang/Runtime$Version",
	java::lang::Object,
	java::lang::Comparable>
{
public:

	static jni::ref<java::lang::Runtime_Version> parse(jni::ref<java::lang::String> s) { return call_static_method<"parse", jni::ref<java::lang::Runtime_Version>>(s); }
	jint feature() { return call_method<"feature", jint>(); }
	jint interim() { return call_method<"interim", jint>(); }
	jint update() { return call_method<"update", jint>(); }
	jint patch() { return call_method<"patch", jint>(); }
	jint major() { return call_method<"major", jint>(); }
	jint minor() { return call_method<"minor", jint>(); }
	jint security() { return call_method<"security", jint>(); }
	jni::ref<java::util::List> version() { return call_method<"version", jni::ref<java::util::List>>(); }
	jni::ref<java::util::Optional> pre() { return call_method<"pre", jni::ref<java::util::Optional>>(); }
	jni::ref<java::util::Optional> build() { return call_method<"build", jni::ref<java::util::Optional>>(); }
	jni::ref<java::util::Optional> optional() { return call_method<"optional", jni::ref<java::util::Optional>>(); }
	jint compareTo(jni::ref<java::lang::Runtime_Version> obj) { return call_method<"compareTo", jint>(obj); }
	jint compareToIgnoreOptional(jni::ref<java::lang::Runtime_Version> obj) { return call_method<"compareToIgnoreOptional", jint>(obj); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jboolean equalsIgnoreOptional(jni::ref<java::lang::Object> obj) { return call_method<"equalsIgnoreOptional", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	Runtime_Version(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_RUNTIME_VERSION
