// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_REQUIRES_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_REQUIRES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::module { class ModuleDescriptor_Requires; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::module::ModuleDescriptor_Requires>
{
	static constexpr fixed_string class_name = "java/lang/module/ModuleDescriptor$Requires";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_REQUIRES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_REQUIRES)
#define SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_REQUIRES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Requires_Modifier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::module::ModuleDescriptor_Requires : public jni::object_base<"java/lang/module/ModuleDescriptor$Requires",
	java::lang::Object,
	java::lang::Comparable>
{
public:

	using Modifier = ModuleDescriptor_Requires_Modifier;

	jni::ref<java::util::Set> modifiers() { return call_method<"modifiers", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> accessFlags() { return call_method<"accessFlags", jni::ref<java::util::Set>>(); }
	jni::ref<java::lang::String> name() { return call_method<"name", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Optional> compiledVersion() { return call_method<"compiledVersion", jni::ref<java::util::Optional>>(); }
	jni::ref<java::util::Optional> rawCompiledVersion() { return call_method<"rawCompiledVersion", jni::ref<java::util::Optional>>(); }
	jint compareTo(jni::ref<java::lang::module::ModuleDescriptor_Requires> that) { return call_method<"compareTo", jint>(that); }
	jboolean equals(jni::ref<java::lang::Object> ob) { return call_method<"equals", jboolean>(ob); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ModuleDescriptor_Requires(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_REQUIRES
