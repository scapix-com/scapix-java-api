// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Random.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_THREADLOCALRANDOMPROXY_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_THREADLOCALRANDOMPROXY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ThreadLocalRandom_ThreadLocalRandomProxy; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ThreadLocalRandom_ThreadLocalRandomProxy>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ThreadLocalRandom$ThreadLocalRandomProxy";
	using base_classes = std::tuple<scapix::java_api::java::util::Random>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_THREADLOCALRANDOMPROXY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_THREADLOCALRANDOMPROXY)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_THREADLOCALRANDOMPROXY

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::concurrent::ThreadLocalRandom_ThreadLocalRandomProxy : public jni::object_base<"java/util/concurrent/ThreadLocalRandom$ThreadLocalRandomProxy",
	java::util::Random>
{
public:

	jint nextInt() { return call_method<"nextInt", jint>(); }
	jlong nextLong() { return call_method<"nextLong", jlong>(); }
	jdouble nextDouble() { return call_method<"nextDouble", jdouble>(); }

protected:

	ThreadLocalRandom_ThreadLocalRandomProxy(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_THREADLOCALRANDOMPROXY
