// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/Flow_Publisher.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SUBMISSIONPUBLISHER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SUBMISSIONPUBLISHER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class SubmissionPublisher; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::SubmissionPublisher>
{
	static constexpr fixed_string class_name = "java/util/concurrent/SubmissionPublisher";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::Flow_Publisher, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SUBMISSIONPUBLISHER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SUBMISSIONPUBLISHER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SUBMISSIONPUBLISHER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/CompletableFuture.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/concurrent/Flow_Subscriber.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiPredicate.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::SubmissionPublisher : public jni::object_base<"java/util/concurrent/SubmissionPublisher",
	java::lang::Object,
	java::util::concurrent::Flow_Publisher,
	java::lang::AutoCloseable>
{
public:

	static jni::ref<java::util::concurrent::SubmissionPublisher> new_object(jni::ref<java::util::concurrent::Executor> executor, jint maxBufferCapacity, jni::ref<java::util::function::BiConsumer> handler) { return base_::new_object(executor, maxBufferCapacity, handler); }
	static jni::ref<java::util::concurrent::SubmissionPublisher> new_object(jni::ref<java::util::concurrent::Executor> executor, jint maxBufferCapacity) { return base_::new_object(executor, maxBufferCapacity); }
	static jni::ref<java::util::concurrent::SubmissionPublisher> new_object() { return base_::new_object(); }
	void subscribe(jni::ref<java::util::concurrent::Flow_Subscriber> subscriber) { return call_method<"subscribe", void>(subscriber); }
	jint submit(jni::ref<java::lang::Object> item) { return call_method<"submit", jint>(item); }
	jint offer(jni::ref<java::lang::Object> item, jni::ref<java::util::function::BiPredicate> onDrop) { return call_method<"offer", jint>(item, onDrop); }
	jint offer(jni::ref<java::lang::Object> item, jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p3, jni::ref<java::util::function::BiPredicate> unit) { return call_method<"offer", jint>(item, timeout, p3, unit); }
	void close() { return call_method<"close", void>(); }
	void closeExceptionally(jni::ref<java::lang::Throwable> error) { return call_method<"closeExceptionally", void>(error); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	jni::ref<java::lang::Throwable> getClosedException() { return call_method<"getClosedException", jni::ref<java::lang::Throwable>>(); }
	jboolean hasSubscribers() { return call_method<"hasSubscribers", jboolean>(); }
	jint getNumberOfSubscribers() { return call_method<"getNumberOfSubscribers", jint>(); }
	jni::ref<java::util::concurrent::Executor> getExecutor() { return call_method<"getExecutor", jni::ref<java::util::concurrent::Executor>>(); }
	jint getMaxBufferCapacity() { return call_method<"getMaxBufferCapacity", jint>(); }
	jni::ref<java::util::List> getSubscribers() { return call_method<"getSubscribers", jni::ref<java::util::List>>(); }
	jboolean isSubscribed(jni::ref<java::util::concurrent::Flow_Subscriber> subscriber) { return call_method<"isSubscribed", jboolean>(subscriber); }
	jlong estimateMinimumDemand() { return call_method<"estimateMinimumDemand", jlong>(); }
	jint estimateMaximumLag() { return call_method<"estimateMaximumLag", jint>(); }
	jni::ref<java::util::concurrent::CompletableFuture> consume(jni::ref<java::util::function::Consumer> consumer) { return call_method<"consume", jni::ref<java::util::concurrent::CompletableFuture>>(consumer); }

protected:

	SubmissionPublisher(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SUBMISSIONPUBLISHER
