// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/ForkJoinWorkerThread.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_INNOCUOUSFORKJOINWORKERTHREAD_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_INNOCUOUSFORKJOINWORKERTHREAD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ForkJoinWorkerThread_InnocuousForkJoinWorkerThread; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ForkJoinWorkerThread_InnocuousForkJoinWorkerThread>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ForkJoinWorkerThread$InnocuousForkJoinWorkerThread";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::ForkJoinWorkerThread>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_INNOCUOUSFORKJOINWORKERTHREAD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_INNOCUOUSFORKJOINWORKERTHREAD)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_INNOCUOUSFORKJOINWORKERTHREAD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Thread_UncaughtExceptionHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::concurrent::ForkJoinWorkerThread_InnocuousForkJoinWorkerThread : public jni::object_base<"java/util/concurrent/ForkJoinWorkerThread$InnocuousForkJoinWorkerThread",
	java::util::concurrent::ForkJoinWorkerThread>
{
public:

	void setUncaughtExceptionHandler(jni::ref<java::lang::Thread_UncaughtExceptionHandler> x) { return call_method<"setUncaughtExceptionHandler", void>(x); }
	void setContextClassLoader(jni::ref<java::lang::ClassLoader> cl) { return call_method<"setContextClassLoader", void>(cl); }

protected:

	ForkJoinWorkerThread_InnocuousForkJoinWorkerThread(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINWORKERTHREAD_INNOCUOUSFORKJOINWORKERTHREAD
