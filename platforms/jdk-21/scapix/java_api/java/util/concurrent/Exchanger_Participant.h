// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/ThreadLocal.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXCHANGER_PARTICIPANT_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXCHANGER_PARTICIPANT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class Exchanger_Participant; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::Exchanger_Participant>
{
	static constexpr fixed_string class_name = "java/util/concurrent/Exchanger$Participant";
	using base_classes = std::tuple<scapix::java_api::java::lang::ThreadLocal>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXCHANGER_PARTICIPANT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXCHANGER_PARTICIPANT)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXCHANGER_PARTICIPANT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/Exchanger_Node.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::concurrent::Exchanger_Participant : public jni::object_base<"java/util/concurrent/Exchanger$Participant",
	java::lang::ThreadLocal>
{
public:

	jni::ref<java::util::concurrent::Exchanger_Node> initialValue() { return call_method<"initialValue", jni::ref<java::util::concurrent::Exchanger_Node>>(); }

protected:

	Exchanger_Participant(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXCHANGER_PARTICIPANT
