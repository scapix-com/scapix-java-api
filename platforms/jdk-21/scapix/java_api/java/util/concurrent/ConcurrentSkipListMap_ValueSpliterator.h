// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/ConcurrentSkipListMap_CSLMSpliterator.h>
#include <scapix/java_api/java/util/Spliterator.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_VALUESPLITERATOR_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_VALUESPLITERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ConcurrentSkipListMap_ValueSpliterator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ConcurrentSkipListMap_ValueSpliterator>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ConcurrentSkipListMap$ValueSpliterator";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::ConcurrentSkipListMap_CSLMSpliterator, scapix::java_api::java::util::Spliterator>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_VALUESPLITERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_VALUESPLITERATOR)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_VALUESPLITERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/function/Consumer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::concurrent::ConcurrentSkipListMap_ValueSpliterator : public jni::object_base<"java/util/concurrent/ConcurrentSkipListMap$ValueSpliterator",
	java::util::concurrent::ConcurrentSkipListMap_CSLMSpliterator,
	java::util::Spliterator>
{
public:

	jni::ref<java::util::concurrent::ConcurrentSkipListMap_ValueSpliterator> trySplit() { return call_method<"trySplit", jni::ref<java::util::concurrent::ConcurrentSkipListMap_ValueSpliterator>>(); }
	void forEachRemaining(jni::ref<java::util::function::Consumer> action) { return call_method<"forEachRemaining", void>(action); }
	jboolean tryAdvance(jni::ref<java::util::function::Consumer> action) { return call_method<"tryAdvance", jboolean>(action); }
	jint characteristics() { return call_method<"characteristics", jint>(); }

protected:

	ConcurrentSkipListMap_ValueSpliterator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_VALUESPLITERATOR
