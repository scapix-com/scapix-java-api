// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/Streams_AbstractStreamBuilderImpl.h>
#include <scapix/java_api/java/util/stream/Stream_Builder.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_STREAMS_STREAMBUILDERIMPL_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_STREAMS_STREAMBUILDERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class Streams_StreamBuilderImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::Streams_StreamBuilderImpl>
{
	static constexpr fixed_string class_name = "java/util/stream/Streams$StreamBuilderImpl";
	using base_classes = std::tuple<scapix::java_api::java::util::stream::Streams_AbstractStreamBuilderImpl, scapix::java_api::java::util::stream::Stream_Builder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_STREAMS_STREAMBUILDERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_STREAMS_STREAMBUILDERIMPL)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_STREAMS_STREAMBUILDERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::Streams_StreamBuilderImpl : public jni::object_base<"java/util/stream/Streams$StreamBuilderImpl",
	java::util::stream::Streams_AbstractStreamBuilderImpl,
	java::util::stream::Stream_Builder>
{
public:

	void accept(jni::ref<java::lang::Object> t) { return call_method<"accept", void>(t); }
	jni::ref<java::util::stream::Stream_Builder> add(jni::ref<java::lang::Object> t) { return call_method<"add", jni::ref<java::util::stream::Stream_Builder>>(t); }
	jni::ref<java::util::stream::Stream> build() { return call_method<"build", jni::ref<java::util::stream::Stream>>(); }
	jboolean tryAdvance(jni::ref<java::util::function::Consumer> action) { return call_method<"tryAdvance", jboolean>(action); }
	void forEachRemaining(jni::ref<java::util::function::Consumer> action) { return call_method<"forEachRemaining", void>(action); }

protected:

	Streams_StreamBuilderImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_STREAMS_STREAMBUILDERIMPL
