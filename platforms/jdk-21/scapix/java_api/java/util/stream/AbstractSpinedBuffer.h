// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTSPINEDBUFFER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTSPINEDBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class AbstractSpinedBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::AbstractSpinedBuffer>
{
	static constexpr fixed_string class_name = "java/util/stream/AbstractSpinedBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTSPINEDBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTSPINEDBUFFER)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTSPINEDBUFFER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::AbstractSpinedBuffer : public jni::object_base<"java/util/stream/AbstractSpinedBuffer",
	java::lang::Object>
{
public:

	static jint MIN_CHUNK_POWER() { return get_static_field<"MIN_CHUNK_POWER", jint>(); }
	static jint MIN_CHUNK_SIZE() { return get_static_field<"MIN_CHUNK_SIZE", jint>(); }
	static jint MAX_CHUNK_POWER() { return get_static_field<"MAX_CHUNK_POWER", jint>(); }
	static jint MIN_SPINE_SIZE() { return get_static_field<"MIN_SPINE_SIZE", jint>(); }

	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jlong count() { return call_method<"count", jlong>(); }
	void clear() { return call_method<"clear", void>(); }

protected:

	AbstractSpinedBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTSPINEDBUFFER
