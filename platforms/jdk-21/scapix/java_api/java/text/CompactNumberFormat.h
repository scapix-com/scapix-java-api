// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/text/NumberFormat.h>

#ifndef SCAPIX_JAVA_API_JAVA_TEXT_COMPACTNUMBERFORMAT_FWD
#define SCAPIX_JAVA_API_JAVA_TEXT_COMPACTNUMBERFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::text { class CompactNumberFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::text::CompactNumberFormat>
{
	static constexpr fixed_string class_name = "java/text/CompactNumberFormat";
	using base_classes = std::tuple<scapix::java_api::java::text::NumberFormat>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_COMPACTNUMBERFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TEXT_COMPACTNUMBERFORMAT)
#define SCAPIX_JAVA_API_JAVA_TEXT_COMPACTNUMBERFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/math/RoundingMode.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/text/DecimalFormatSymbols.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::text::CompactNumberFormat : public jni::object_base<"java/text/CompactNumberFormat",
	java::text::NumberFormat>
{
public:

	static jni::ref<java::text::CompactNumberFormat> new_object(jni::ref<java::lang::String> decimalPattern, jni::ref<java::text::DecimalFormatSymbols> symbols, jni::ref<jni::array<java::lang::String>> compactPatterns) { return base_::new_object(decimalPattern, symbols, compactPatterns); }
	static jni::ref<java::text::CompactNumberFormat> new_object(jni::ref<java::lang::String> decimalPattern, jni::ref<java::text::DecimalFormatSymbols> symbols, jni::ref<jni::array<java::lang::String>> compactPatterns, jni::ref<java::lang::String> pluralRules) { return base_::new_object(decimalPattern, symbols, compactPatterns, pluralRules); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<java::lang::Object> number, jni::ref<java::lang::StringBuffer> toAppendTo, jni::ref<java::text::FieldPosition> fieldPosition) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(number, toAppendTo, fieldPosition); }
	jni::ref<java::lang::StringBuffer> format(jdouble number, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> result) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(number, p2, result); }
	jni::ref<java::lang::StringBuffer> format(jlong number, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> result) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(number, p2, result); }
	jni::ref<java::text::AttributedCharacterIterator> formatToCharacterIterator(jni::ref<java::lang::Object> obj) { return call_method<"formatToCharacterIterator", jni::ref<java::text::AttributedCharacterIterator>>(obj); }
	jni::ref<java::lang::Number> parse(jni::ref<java::lang::String> text, jni::ref<java::text::ParsePosition> pos) { return call_method<"parse", jni::ref<java::lang::Number>>(text, pos); }
	void setMaximumIntegerDigits(jint newValue) { return call_method<"setMaximumIntegerDigits", void>(newValue); }
	void setMinimumIntegerDigits(jint newValue) { return call_method<"setMinimumIntegerDigits", void>(newValue); }
	void setMinimumFractionDigits(jint newValue) { return call_method<"setMinimumFractionDigits", void>(newValue); }
	void setMaximumFractionDigits(jint newValue) { return call_method<"setMaximumFractionDigits", void>(newValue); }
	jni::ref<java::math::RoundingMode> getRoundingMode() { return call_method<"getRoundingMode", jni::ref<java::math::RoundingMode>>(); }
	void setRoundingMode(jni::ref<java::math::RoundingMode> roundingMode) { return call_method<"setRoundingMode", void>(roundingMode); }
	jint getGroupingSize() { return call_method<"getGroupingSize", jint>(); }
	void setGroupingSize(jint newValue) { return call_method<"setGroupingSize", void>(newValue); }
	jboolean isGroupingUsed() { return call_method<"isGroupingUsed", jboolean>(); }
	void setGroupingUsed(jboolean newValue) { return call_method<"setGroupingUsed", void>(newValue); }
	jboolean isParseIntegerOnly() { return call_method<"isParseIntegerOnly", jboolean>(); }
	void setParseIntegerOnly(jboolean value) { return call_method<"setParseIntegerOnly", void>(value); }
	jboolean isParseBigDecimal() { return call_method<"isParseBigDecimal", jboolean>(); }
	void setParseBigDecimal(jboolean newValue) { return call_method<"setParseBigDecimal", void>(newValue); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::text::CompactNumberFormat> clone() { return call_method<"clone", jni::ref<java::text::CompactNumberFormat>>(); }

protected:

	CompactNumberFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_COMPACTNUMBERFORMAT
