// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_NETWORKINTERFACE_FWD
#define SCAPIX_JAVA_API_JAVA_NET_NETWORKINTERFACE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class NetworkInterface; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::NetworkInterface>
{
	static constexpr fixed_string class_name = "java/net/NetworkInterface";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_NETWORKINTERFACE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_NETWORKINTERFACE)
#define SCAPIX_JAVA_API_JAVA_NET_NETWORKINTERFACE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::net::NetworkInterface : public jni::object_base<"java/net/NetworkInterface",
	java::lang::Object>
{
public:

	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Enumeration> getInetAddresses() { return call_method<"getInetAddresses", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::util::stream::Stream> inetAddresses() { return call_method<"inetAddresses", jni::ref<java::util::stream::Stream>>(); }
	jni::ref<java::util::List> getInterfaceAddresses() { return call_method<"getInterfaceAddresses", jni::ref<java::util::List>>(); }
	jni::ref<java::util::Enumeration> getSubInterfaces() { return call_method<"getSubInterfaces", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::util::stream::Stream> subInterfaces() { return call_method<"subInterfaces", jni::ref<java::util::stream::Stream>>(); }
	jni::ref<java::net::NetworkInterface> getParent() { return call_method<"getParent", jni::ref<java::net::NetworkInterface>>(); }
	jint getIndex() { return call_method<"getIndex", jint>(); }
	jni::ref<java::lang::String> getDisplayName() { return call_method<"getDisplayName", jni::ref<java::lang::String>>(); }
	static jni::ref<java::net::NetworkInterface> getByName(jni::ref<java::lang::String> name) { return call_static_method<"getByName", jni::ref<java::net::NetworkInterface>>(name); }
	static jni::ref<java::net::NetworkInterface> getByIndex(jint index) { return call_static_method<"getByIndex", jni::ref<java::net::NetworkInterface>>(index); }
	static jni::ref<java::net::NetworkInterface> getByInetAddress(jni::ref<java::net::InetAddress> addr) { return call_static_method<"getByInetAddress", jni::ref<java::net::NetworkInterface>>(addr); }
	static jni::ref<java::util::Enumeration> getNetworkInterfaces() { return call_static_method<"getNetworkInterfaces", jni::ref<java::util::Enumeration>>(); }
	static jni::ref<java::util::stream::Stream> networkInterfaces() { return call_static_method<"networkInterfaces", jni::ref<java::util::stream::Stream>>(); }
	jboolean isUp() { return call_method<"isUp", jboolean>(); }
	jboolean isLoopback() { return call_method<"isLoopback", jboolean>(); }
	jboolean isPointToPoint() { return call_method<"isPointToPoint", jboolean>(); }
	jboolean supportsMulticast() { return call_method<"supportsMulticast", jboolean>(); }
	jni::ref<jni::array<jbyte>> getHardwareAddress() { return call_method<"getHardwareAddress", jni::ref<jni::array<jbyte>>>(); }
	jint getMTU() { return call_method<"getMTU", jint>(); }
	jboolean isVirtual() { return call_method<"isVirtual", jboolean>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	NetworkInterface(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_NETWORKINTERFACE
