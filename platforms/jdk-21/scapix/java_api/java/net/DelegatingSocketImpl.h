// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/net/SocketImpl.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_DELEGATINGSOCKETIMPL_FWD
#define SCAPIX_JAVA_API_JAVA_NET_DELEGATINGSOCKETIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class DelegatingSocketImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::DelegatingSocketImpl>
{
	static constexpr fixed_string class_name = "java/net/DelegatingSocketImpl";
	using base_classes = std::tuple<scapix::java_api::java::net::SocketImpl>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_DELEGATINGSOCKETIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_DELEGATINGSOCKETIMPL)
#define SCAPIX_JAVA_API_JAVA_NET_DELEGATINGSOCKETIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::net::DelegatingSocketImpl : public jni::object_base<"java/net/DelegatingSocketImpl",
	java::net::SocketImpl>
{
public:

	void setOption(jint optID, jni::ref<java::lang::Object> value) { return call_method<"setOption", void>(optID, value); }
	jni::ref<java::lang::Object> getOption(jint optID) { return call_method<"getOption", jni::ref<java::lang::Object>>(optID); }

protected:

	DelegatingSocketImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_DELEGATINGSOCKETIMPL
