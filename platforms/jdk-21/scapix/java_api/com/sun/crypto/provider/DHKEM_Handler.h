// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Record.h>
#include <scapix/java_api/javax/crypto/KEMSpi_EncapsulatorSpi.h>
#include <scapix/java_api/javax/crypto/KEMSpi_DecapsulatorSpi.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_DHKEM_HANDLER_FWD
#define SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_DHKEM_HANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::crypto::provider { class DHKEM_Handler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::crypto::provider::DHKEM_Handler>
{
	static constexpr fixed_string class_name = "com/sun/crypto/provider/DHKEM$Handler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Record, scapix::java_api::javax::crypto::KEMSpi_EncapsulatorSpi, scapix::java_api::javax::crypto::KEMSpi_DecapsulatorSpi>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_DHKEM_HANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_DHKEM_HANDLER)
#define SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_DHKEM_HANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/crypto/provider/DHKEM_Params.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/javax/crypto/KEM_Encapsulated.h>
#include <scapix/java_api/javax/crypto/SecretKey.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::crypto::provider::DHKEM_Handler : public jni::object_base<"com/sun/crypto/provider/DHKEM$Handler",
	java::lang::Record,
	javax::crypto::KEMSpi_EncapsulatorSpi,
	javax::crypto::KEMSpi_DecapsulatorSpi>
{
public:

	jni::ref<javax::crypto::KEM_Encapsulated> engineEncapsulate(jint from, jint to, jni::ref<java::lang::String> algorithm) { return call_method<"engineEncapsulate", jni::ref<javax::crypto::KEM_Encapsulated>>(from, to, algorithm); }
	jni::ref<javax::crypto::SecretKey> engineDecapsulate(jni::ref<jni::array<jbyte>> encapsulation, jint from, jint to, jni::ref<java::lang::String> algorithm) { return call_method<"engineDecapsulate", jni::ref<javax::crypto::SecretKey>>(encapsulation, from, to, algorithm); }
	jint engineSecretSize() { return call_method<"engineSecretSize", jint>(); }
	jint engineEncapsulationSize() { return call_method<"engineEncapsulationSize", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jni::ref<com::sun::crypto::provider::DHKEM_Params> params() { return call_method<"params", jni::ref<com::sun::crypto::provider::DHKEM_Params>>(); }
	jni::ref<java::security::SecureRandom> secureRandom() { return call_method<"secureRandom", jni::ref<java::security::SecureRandom>>(); }
	jni::ref<java::security::PrivateKey> skR() { return call_method<"skR", jni::ref<java::security::PrivateKey>>(); }
	jni::ref<java::security::PublicKey> pkR() { return call_method<"pkR", jni::ref<java::security::PublicKey>>(); }

protected:

	DHKEM_Handler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_DHKEM_HANDLER
