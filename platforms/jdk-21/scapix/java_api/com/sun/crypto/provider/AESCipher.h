// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/crypto/CipherSpi.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_AESCIPHER_FWD
#define SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_AESCIPHER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::crypto::provider { class AESCipher; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::crypto::provider::AESCipher>
{
	static constexpr fixed_string class_name = "com/sun/crypto/provider/AESCipher";
	using base_classes = std::tuple<scapix::java_api::javax::crypto::CipherSpi>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_AESCIPHER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_AESCIPHER)
#define SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_AESCIPHER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES256_CFB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES192_CFB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES128_CFB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES256_OFB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES192_OFB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES128_OFB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES256_CBC_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES192_CBC_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES128_CBC_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES256_ECB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES192_ECB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_AES128_ECB_NoPadding.h>
#include <scapix/java_api/com/sun/crypto/provider/AESCipher_General.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::crypto::provider::AESCipher : public jni::object_base<"com/sun/crypto/provider/AESCipher",
	javax::crypto::CipherSpi>
{
public:

	using AES256_CFB_NoPadding = AESCipher_AES256_CFB_NoPadding;
	using AES192_CFB_NoPadding = AESCipher_AES192_CFB_NoPadding;
	using AES128_CFB_NoPadding = AESCipher_AES128_CFB_NoPadding;
	using AES256_OFB_NoPadding = AESCipher_AES256_OFB_NoPadding;
	using AES192_OFB_NoPadding = AESCipher_AES192_OFB_NoPadding;
	using AES128_OFB_NoPadding = AESCipher_AES128_OFB_NoPadding;
	using AES256_CBC_NoPadding = AESCipher_AES256_CBC_NoPadding;
	using AES192_CBC_NoPadding = AESCipher_AES192_CBC_NoPadding;
	using AES128_CBC_NoPadding = AESCipher_AES128_CBC_NoPadding;
	using AES256_ECB_NoPadding = AESCipher_AES256_ECB_NoPadding;
	using AES192_ECB_NoPadding = AESCipher_AES192_ECB_NoPadding;
	using AES128_ECB_NoPadding = AESCipher_AES128_ECB_NoPadding;
	using General = AESCipher_General;


protected:

	AESCipher(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CRYPTO_PROVIDER_AESCIPHER
