// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/xml/sax/Parser.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>

#ifndef SCAPIX_JAVA_API_ORG_XML_SAX_HELPERS_XMLREADERADAPTER_FWD
#define SCAPIX_JAVA_API_ORG_XML_SAX_HELPERS_XMLREADERADAPTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::xml::sax::helpers { class XMLReaderAdapter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::xml::sax::helpers::XMLReaderAdapter>
{
	static constexpr fixed_string class_name = "org/xml/sax/helpers/XMLReaderAdapter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::xml::sax::Parser, scapix::java_api::org::xml::sax::ContentHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XML_SAX_HELPERS_XMLREADERADAPTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_XML_SAX_HELPERS_XMLREADERADAPTER)
#define SCAPIX_JAVA_API_ORG_XML_SAX_HELPERS_XMLREADERADAPTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/org/xml/sax/DocumentHandler.h>
#include <scapix/java_api/org/xml/sax/EntityResolver.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#include <scapix/java_api/org/xml/sax/XMLReader.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::xml::sax::helpers::XMLReaderAdapter : public jni::object_base<"org/xml/sax/helpers/XMLReaderAdapter",
	java::lang::Object,
	org::xml::sax::Parser,
	org::xml::sax::ContentHandler>
{
public:

	static jni::ref<org::xml::sax::helpers::XMLReaderAdapter> new_object() { return base_::new_object(); }
	static jni::ref<org::xml::sax::helpers::XMLReaderAdapter> new_object(jni::ref<org::xml::sax::XMLReader> xmlReader) { return base_::new_object(xmlReader); }
	void setLocale(jni::ref<java::util::Locale> locale) { return call_method<"setLocale", void>(locale); }
	void setEntityResolver(jni::ref<org::xml::sax::EntityResolver> resolver) { return call_method<"setEntityResolver", void>(resolver); }
	void setDTDHandler(jni::ref<org::xml::sax::DTDHandler> handler) { return call_method<"setDTDHandler", void>(handler); }
	void setDocumentHandler(jni::ref<org::xml::sax::DocumentHandler> handler) { return call_method<"setDocumentHandler", void>(handler); }
	void setErrorHandler(jni::ref<org::xml::sax::ErrorHandler> handler) { return call_method<"setErrorHandler", void>(handler); }
	void parse(jni::ref<java::lang::String> systemId) { return call_method<"parse", void>(systemId); }
	void parse(jni::ref<org::xml::sax::InputSource> input) { return call_method<"parse", void>(input); }
	void setDocumentLocator(jni::ref<org::xml::sax::Locator> locator) { return call_method<"setDocumentLocator", void>(locator); }
	void startDocument() { return call_method<"startDocument", void>(); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void startPrefixMapping(jni::ref<java::lang::String> prefix, jni::ref<java::lang::String> uri) { return call_method<"startPrefixMapping", void>(prefix, uri); }
	void endPrefixMapping(jni::ref<java::lang::String> prefix) { return call_method<"endPrefixMapping", void>(prefix); }
	void startElement(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName, jni::ref<java::lang::String> qName, jni::ref<org::xml::sax::Attributes> atts) { return call_method<"startElement", void>(uri, localName, qName, atts); }
	void endElement(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName, jni::ref<java::lang::String> qName) { return call_method<"endElement", void>(uri, localName, qName); }
	void characters(jni::ref<jni::array<jchar>> ch, jint start, jint length) { return call_method<"characters", void>(ch, start, length); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> ch, jint start, jint length) { return call_method<"ignorableWhitespace", void>(ch, start, length); }
	void processingInstruction(jni::ref<java::lang::String> target, jni::ref<java::lang::String> data) { return call_method<"processingInstruction", void>(target, data); }
	void skippedEntity(jni::ref<java::lang::String> name) { return call_method<"skippedEntity", void>(name); }

protected:

	XMLReaderAdapter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XML_SAX_HELPERS_XMLREADERADAPTER
