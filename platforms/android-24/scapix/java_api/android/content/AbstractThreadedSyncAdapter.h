// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class AbstractThreadedSyncAdapter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::AbstractThreadedSyncAdapter>
{
	static constexpr fixed_string class_name = "android/content/AbstractThreadedSyncAdapter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/accounts/Account.h>
#include <scapix/java_api/android/content/ContentProviderClient.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/SyncResult.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::AbstractThreadedSyncAdapter : public jni::object_base<"android/content/AbstractThreadedSyncAdapter",
	java::lang::Object>
{
public:

	static jint LOG_SYNC_DETAILS() { return get_static_field<"LOG_SYNC_DETAILS", jint>(); }

	static jni::ref<android::content::AbstractThreadedSyncAdapter> new_object(jni::ref<android::content::Context> context, jboolean autoInitialize) { return base_::new_object(context, autoInitialize); }
	static jni::ref<android::content::AbstractThreadedSyncAdapter> new_object(jni::ref<android::content::Context> context, jboolean autoInitialize, jboolean allowParallelSyncs) { return base_::new_object(context, autoInitialize, allowParallelSyncs); }
	jni::ref<android::content::Context> getContext() { return call_method<"getContext", jni::ref<android::content::Context>>(); }
	jni::ref<android::os::IBinder> getSyncAdapterBinder() { return call_method<"getSyncAdapterBinder", jni::ref<android::os::IBinder>>(); }
	void onPerformSync(jni::ref<android::accounts::Account> p1, jni::ref<android::os::Bundle> p2, jni::ref<java::lang::String> p3, jni::ref<android::content::ContentProviderClient> p4, jni::ref<android::content::SyncResult> p5) { return call_method<"onPerformSync", void>(p1, p2, p3, p4, p5); }
	void onSecurityException(jni::ref<android::accounts::Account> account, jni::ref<android::os::Bundle> extras, jni::ref<java::lang::String> authority, jni::ref<android::content::SyncResult> syncResult) { return call_method<"onSecurityException", void>(account, extras, authority, syncResult); }
	void onSyncCanceled() { return call_method<"onSyncCanceled", void>(); }
	void onSyncCanceled(jni::ref<java::lang::Thread> thread) { return call_method<"onSyncCanceled", void>(thread); }

protected:

	AbstractThreadedSyncAdapter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_ABSTRACTTHREADEDSYNCADAPTER
