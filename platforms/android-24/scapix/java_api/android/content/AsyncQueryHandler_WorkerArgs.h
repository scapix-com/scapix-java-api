// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_ASYNCQUERYHANDLER_WORKERARGS_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_ASYNCQUERYHANDLER_WORKERARGS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class AsyncQueryHandler_WorkerArgs; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::AsyncQueryHandler_WorkerArgs>
{
	static constexpr fixed_string class_name = "android/content/AsyncQueryHandler$WorkerArgs";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_ASYNCQUERYHANDLER_WORKERARGS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_ASYNCQUERYHANDLER_WORKERARGS)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_ASYNCQUERYHANDLER_WORKERARGS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::AsyncQueryHandler_WorkerArgs : public jni::object_base<"android/content/AsyncQueryHandler$WorkerArgs",
	java::lang::Object>
{
public:

	jni::ref<java::lang::Object> cookie() { return get_field<"cookie", jni::ref<java::lang::Object>>(); }
	void cookie(jni::ref<java::lang::Object> v) { set_field<"cookie", jni::ref<java::lang::Object>>(v); }
	jni::ref<android::os::Handler> handler() { return get_field<"handler", jni::ref<android::os::Handler>>(); }
	void handler(jni::ref<android::os::Handler> v) { set_field<"handler", jni::ref<android::os::Handler>>(v); }
	jni::ref<java::lang::String> orderBy() { return get_field<"orderBy", jni::ref<java::lang::String>>(); }
	void orderBy(jni::ref<java::lang::String> v) { set_field<"orderBy", jni::ref<java::lang::String>>(v); }
	jni::ref<jni::array<java::lang::String>> projection() { return get_field<"projection", jni::ref<jni::array<java::lang::String>>>(); }
	void projection(jni::ref<jni::array<java::lang::String>> v) { set_field<"projection", jni::ref<jni::array<java::lang::String>>>(v); }
	jni::ref<java::lang::Object> result() { return get_field<"result", jni::ref<java::lang::Object>>(); }
	void result(jni::ref<java::lang::Object> v) { set_field<"result", jni::ref<java::lang::Object>>(v); }
	jni::ref<java::lang::String> selection() { return get_field<"selection", jni::ref<java::lang::String>>(); }
	void selection(jni::ref<java::lang::String> v) { set_field<"selection", jni::ref<java::lang::String>>(v); }
	jni::ref<jni::array<java::lang::String>> selectionArgs() { return get_field<"selectionArgs", jni::ref<jni::array<java::lang::String>>>(); }
	void selectionArgs(jni::ref<jni::array<java::lang::String>> v) { set_field<"selectionArgs", jni::ref<jni::array<java::lang::String>>>(v); }
	jni::ref<android::net::Uri> uri() { return get_field<"uri", jni::ref<android::net::Uri>>(); }
	void uri(jni::ref<android::net::Uri> v) { set_field<"uri", jni::ref<android::net::Uri>>(v); }
	jni::ref<android::content::ContentValues> values() { return get_field<"values", jni::ref<android::content::ContentValues>>(); }
	void values(jni::ref<android::content::ContentValues> v) { set_field<"values", jni::ref<android::content::ContentValues>>(v); }


protected:

	AsyncQueryHandler_WorkerArgs(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_ASYNCQUERYHANDLER_WORKERARGS
