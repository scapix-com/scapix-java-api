// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_JSONWRITER_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_JSONWRITER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class JsonWriter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::JsonWriter>
{
	static constexpr fixed_string class_name = "android/util/JsonWriter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_JSONWRITER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_JSONWRITER)
#define SCAPIX_JAVA_API_ANDROID_UTIL_JSONWRITER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::JsonWriter : public jni::object_base<"android/util/JsonWriter",
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jni::ref<android::util::JsonWriter> new_object(jni::ref<java::io::Writer> out) { return base_::new_object(out); }
	void setIndent(jni::ref<java::lang::String> indent) { return call_method<"setIndent", void>(indent); }
	void setLenient(jboolean lenient) { return call_method<"setLenient", void>(lenient); }
	jboolean isLenient() { return call_method<"isLenient", jboolean>(); }
	jni::ref<android::util::JsonWriter> beginArray() { return call_method<"beginArray", jni::ref<android::util::JsonWriter>>(); }
	jni::ref<android::util::JsonWriter> endArray() { return call_method<"endArray", jni::ref<android::util::JsonWriter>>(); }
	jni::ref<android::util::JsonWriter> beginObject() { return call_method<"beginObject", jni::ref<android::util::JsonWriter>>(); }
	jni::ref<android::util::JsonWriter> endObject() { return call_method<"endObject", jni::ref<android::util::JsonWriter>>(); }
	jni::ref<android::util::JsonWriter> name(jni::ref<java::lang::String> name) { return call_method<"name", jni::ref<android::util::JsonWriter>>(name); }
	jni::ref<android::util::JsonWriter> value(jni::ref<java::lang::String> value) { return call_method<"value", jni::ref<android::util::JsonWriter>>(value); }
	jni::ref<android::util::JsonWriter> nullValue() { return call_method<"nullValue", jni::ref<android::util::JsonWriter>>(); }
	jni::ref<android::util::JsonWriter> value(jboolean value) { return call_method<"value", jni::ref<android::util::JsonWriter>>(value); }
	jni::ref<android::util::JsonWriter> value(jdouble value) { return call_method<"value", jni::ref<android::util::JsonWriter>>(value); }
	jni::ref<android::util::JsonWriter> value(jlong value) { return call_method<"value", jni::ref<android::util::JsonWriter>>(value); }
	jni::ref<android::util::JsonWriter> value(jni::ref<java::lang::Number> value) { return call_method<"value", jni::ref<android::util::JsonWriter>>(value); }
	void flush() { return call_method<"flush", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	JsonWriter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_JSONWRITER
