// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth { class BluetoothGattCharacteristic; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::BluetoothGattCharacteristic>
{
	static constexpr fixed_string class_name = "android/bluetooth/BluetoothGattCharacteristic";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/BluetoothGattDescriptor.h>
#include <scapix/java_api/android/bluetooth/BluetoothGattService.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Float.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/UUID.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::BluetoothGattCharacteristic : public jni::object_base<"android/bluetooth/BluetoothGattCharacteristic",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint FORMAT_FLOAT() { return get_static_field<"FORMAT_FLOAT", jint>(); }
	static jint FORMAT_SFLOAT() { return get_static_field<"FORMAT_SFLOAT", jint>(); }
	static jint FORMAT_SINT16() { return get_static_field<"FORMAT_SINT16", jint>(); }
	static jint FORMAT_SINT32() { return get_static_field<"FORMAT_SINT32", jint>(); }
	static jint FORMAT_SINT8() { return get_static_field<"FORMAT_SINT8", jint>(); }
	static jint FORMAT_UINT16() { return get_static_field<"FORMAT_UINT16", jint>(); }
	static jint FORMAT_UINT32() { return get_static_field<"FORMAT_UINT32", jint>(); }
	static jint FORMAT_UINT8() { return get_static_field<"FORMAT_UINT8", jint>(); }
	static jint PERMISSION_READ() { return get_static_field<"PERMISSION_READ", jint>(); }
	static jint PERMISSION_READ_ENCRYPTED() { return get_static_field<"PERMISSION_READ_ENCRYPTED", jint>(); }
	static jint PERMISSION_READ_ENCRYPTED_MITM() { return get_static_field<"PERMISSION_READ_ENCRYPTED_MITM", jint>(); }
	static jint PERMISSION_WRITE() { return get_static_field<"PERMISSION_WRITE", jint>(); }
	static jint PERMISSION_WRITE_ENCRYPTED() { return get_static_field<"PERMISSION_WRITE_ENCRYPTED", jint>(); }
	static jint PERMISSION_WRITE_ENCRYPTED_MITM() { return get_static_field<"PERMISSION_WRITE_ENCRYPTED_MITM", jint>(); }
	static jint PERMISSION_WRITE_SIGNED() { return get_static_field<"PERMISSION_WRITE_SIGNED", jint>(); }
	static jint PERMISSION_WRITE_SIGNED_MITM() { return get_static_field<"PERMISSION_WRITE_SIGNED_MITM", jint>(); }
	static jint PROPERTY_BROADCAST() { return get_static_field<"PROPERTY_BROADCAST", jint>(); }
	static jint PROPERTY_EXTENDED_PROPS() { return get_static_field<"PROPERTY_EXTENDED_PROPS", jint>(); }
	static jint PROPERTY_INDICATE() { return get_static_field<"PROPERTY_INDICATE", jint>(); }
	static jint PROPERTY_NOTIFY() { return get_static_field<"PROPERTY_NOTIFY", jint>(); }
	static jint PROPERTY_READ() { return get_static_field<"PROPERTY_READ", jint>(); }
	static jint PROPERTY_SIGNED_WRITE() { return get_static_field<"PROPERTY_SIGNED_WRITE", jint>(); }
	static jint PROPERTY_WRITE() { return get_static_field<"PROPERTY_WRITE", jint>(); }
	static jint PROPERTY_WRITE_NO_RESPONSE() { return get_static_field<"PROPERTY_WRITE_NO_RESPONSE", jint>(); }
	static jint WRITE_TYPE_DEFAULT() { return get_static_field<"WRITE_TYPE_DEFAULT", jint>(); }
	static jint WRITE_TYPE_NO_RESPONSE() { return get_static_field<"WRITE_TYPE_NO_RESPONSE", jint>(); }
	static jint WRITE_TYPE_SIGNED() { return get_static_field<"WRITE_TYPE_SIGNED", jint>(); }

	static jni::ref<android::bluetooth::BluetoothGattCharacteristic> new_object(jni::ref<java::util::UUID> uuid, jint properties, jint permissions) { return base_::new_object(uuid, properties, permissions); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	jboolean addDescriptor(jni::ref<android::bluetooth::BluetoothGattDescriptor> descriptor) { return call_method<"addDescriptor", jboolean>(descriptor); }
	jni::ref<android::bluetooth::BluetoothGattService> getService() { return call_method<"getService", jni::ref<android::bluetooth::BluetoothGattService>>(); }
	jni::ref<java::util::UUID> getUuid() { return call_method<"getUuid", jni::ref<java::util::UUID>>(); }
	jint getInstanceId() { return call_method<"getInstanceId", jint>(); }
	jint getProperties() { return call_method<"getProperties", jint>(); }
	jint getPermissions() { return call_method<"getPermissions", jint>(); }
	jint getWriteType() { return call_method<"getWriteType", jint>(); }
	void setWriteType(jint writeType) { return call_method<"setWriteType", void>(writeType); }
	jni::ref<java::util::List> getDescriptors() { return call_method<"getDescriptors", jni::ref<java::util::List>>(); }
	jni::ref<android::bluetooth::BluetoothGattDescriptor> getDescriptor(jni::ref<java::util::UUID> uuid) { return call_method<"getDescriptor", jni::ref<android::bluetooth::BluetoothGattDescriptor>>(uuid); }
	jni::ref<jni::array<jbyte>> getValue() { return call_method<"getValue", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::Integer> getIntValue(jint formatType, jint offset) { return call_method<"getIntValue", jni::ref<java::lang::Integer>>(formatType, offset); }
	jni::ref<java::lang::Float> getFloatValue(jint formatType, jint offset) { return call_method<"getFloatValue", jni::ref<java::lang::Float>>(formatType, offset); }
	jni::ref<java::lang::String> getStringValue(jint offset) { return call_method<"getStringValue", jni::ref<java::lang::String>>(offset); }
	jboolean setValue(jni::ref<jni::array<jbyte>> value) { return call_method<"setValue", jboolean>(value); }
	jboolean setValue(jint value, jint formatType, jint offset) { return call_method<"setValue", jboolean>(value, formatType, offset); }
	jboolean setValue(jint mantissa, jint exponent, jint formatType, jint offset) { return call_method<"setValue", jboolean>(mantissa, exponent, formatType, offset); }
	jboolean setValue(jni::ref<java::lang::String> value) { return call_method<"setValue", jboolean>(value); }
	jint describeContents() { return call_method<"describeContents", jint>(); }

protected:

	BluetoothGattCharacteristic(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTCHARACTERISTIC
