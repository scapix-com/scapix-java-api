// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_HANDLER_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_HANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class Handler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::Handler>
{
	static constexpr fixed_string class_name = "android/os/Handler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_HANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_HANDLER)
#define SCAPIX_JAVA_API_ANDROID_OS_HANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Handler_Callback.h>
#include <scapix/java_api/android/os/Looper.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::Handler : public jni::object_base<"android/os/Handler",
	java::lang::Object>
{
public:

	using Callback = Handler_Callback;

	static jni::ref<android::os::Handler> new_object() { return base_::new_object(); }
	static jni::ref<android::os::Handler> new_object(jni::ref<android::os::Handler_Callback> callback) { return base_::new_object(callback); }
	static jni::ref<android::os::Handler> new_object(jni::ref<android::os::Looper> looper) { return base_::new_object(looper); }
	static jni::ref<android::os::Handler> new_object(jni::ref<android::os::Looper> looper, jni::ref<android::os::Handler_Callback> callback) { return base_::new_object(looper, callback); }
	void handleMessage(jni::ref<android::os::Message> msg) { return call_method<"handleMessage", void>(msg); }
	void dispatchMessage(jni::ref<android::os::Message> msg) { return call_method<"dispatchMessage", void>(msg); }
	jni::ref<java::lang::String> getMessageName(jni::ref<android::os::Message> message) { return call_method<"getMessageName", jni::ref<java::lang::String>>(message); }
	jni::ref<android::os::Message> obtainMessage() { return call_method<"obtainMessage", jni::ref<android::os::Message>>(); }
	jni::ref<android::os::Message> obtainMessage(jint what) { return call_method<"obtainMessage", jni::ref<android::os::Message>>(what); }
	jni::ref<android::os::Message> obtainMessage(jint what, jni::ref<java::lang::Object> obj) { return call_method<"obtainMessage", jni::ref<android::os::Message>>(what, obj); }
	jni::ref<android::os::Message> obtainMessage(jint what, jint arg1, jint arg2) { return call_method<"obtainMessage", jni::ref<android::os::Message>>(what, arg1, arg2); }
	jni::ref<android::os::Message> obtainMessage(jint what, jint arg1, jint arg2, jni::ref<java::lang::Object> obj) { return call_method<"obtainMessage", jni::ref<android::os::Message>>(what, arg1, arg2, obj); }
	jboolean post(jni::ref<java::lang::Runnable> r) { return call_method<"post", jboolean>(r); }
	jboolean postAtTime(jni::ref<java::lang::Runnable> r, jlong uptimeMillis) { return call_method<"postAtTime", jboolean>(r, uptimeMillis); }
	jboolean postAtTime(jni::ref<java::lang::Runnable> r, jni::ref<java::lang::Object> token, jlong uptimeMillis) { return call_method<"postAtTime", jboolean>(r, token, uptimeMillis); }
	jboolean postDelayed(jni::ref<java::lang::Runnable> r, jlong delayMillis) { return call_method<"postDelayed", jboolean>(r, delayMillis); }
	jboolean postAtFrontOfQueue(jni::ref<java::lang::Runnable> r) { return call_method<"postAtFrontOfQueue", jboolean>(r); }
	void removeCallbacks(jni::ref<java::lang::Runnable> r) { return call_method<"removeCallbacks", void>(r); }
	void removeCallbacks(jni::ref<java::lang::Runnable> r, jni::ref<java::lang::Object> token) { return call_method<"removeCallbacks", void>(r, token); }
	jboolean sendMessage(jni::ref<android::os::Message> msg) { return call_method<"sendMessage", jboolean>(msg); }
	jboolean sendEmptyMessage(jint what) { return call_method<"sendEmptyMessage", jboolean>(what); }
	jboolean sendEmptyMessageDelayed(jint what, jlong delayMillis) { return call_method<"sendEmptyMessageDelayed", jboolean>(what, delayMillis); }
	jboolean sendEmptyMessageAtTime(jint what, jlong uptimeMillis) { return call_method<"sendEmptyMessageAtTime", jboolean>(what, uptimeMillis); }
	jboolean sendMessageDelayed(jni::ref<android::os::Message> msg, jlong delayMillis) { return call_method<"sendMessageDelayed", jboolean>(msg, delayMillis); }
	jboolean sendMessageAtTime(jni::ref<android::os::Message> msg, jlong uptimeMillis) { return call_method<"sendMessageAtTime", jboolean>(msg, uptimeMillis); }
	jboolean sendMessageAtFrontOfQueue(jni::ref<android::os::Message> msg) { return call_method<"sendMessageAtFrontOfQueue", jboolean>(msg); }
	void removeMessages(jint what) { return call_method<"removeMessages", void>(what); }
	void removeMessages(jint what, jni::ref<java::lang::Object> object) { return call_method<"removeMessages", void>(what, object); }
	void removeCallbacksAndMessages(jni::ref<java::lang::Object> token) { return call_method<"removeCallbacksAndMessages", void>(token); }
	jboolean hasMessages(jint what) { return call_method<"hasMessages", jboolean>(what); }
	jboolean hasMessages(jint what, jni::ref<java::lang::Object> object) { return call_method<"hasMessages", jboolean>(what, object); }
	jni::ref<android::os::Looper> getLooper() { return call_method<"getLooper", jni::ref<android::os::Looper>>(); }
	void dump(jni::ref<android::util::Printer> pw, jni::ref<java::lang::String> prefix) { return call_method<"dump", void>(pw, prefix); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Handler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_HANDLER
