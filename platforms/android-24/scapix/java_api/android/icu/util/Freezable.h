// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_UTIL_FREEZABLE_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_UTIL_FREEZABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::util { class Freezable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::util::Freezable>
{
	static constexpr fixed_string class_name = "android/icu/util/Freezable";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_UTIL_FREEZABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_UTIL_FREEZABLE)
#define SCAPIX_JAVA_API_ANDROID_ICU_UTIL_FREEZABLE

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::util::Freezable : public jni::object_base<"android/icu/util/Freezable",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	jboolean isFrozen() { return call_method<"isFrozen", jboolean>(); }
	jni::ref<java::lang::Object> freeze() { return call_method<"freeze", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> cloneAsThawed() { return call_method<"cloneAsThawed", jni::ref<java::lang::Object>>(); }

protected:

	Freezable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_UTIL_FREEZABLE
