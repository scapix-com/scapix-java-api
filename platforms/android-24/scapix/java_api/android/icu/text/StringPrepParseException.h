// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/text/ParseException.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_STRINGPREPPARSEEXCEPTION_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_STRINGPREPPARSEEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class StringPrepParseException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::StringPrepParseException>
{
	static constexpr fixed_string class_name = "android/icu/text/StringPrepParseException";
	using base_classes = std::tuple<scapix::java_api::java::text::ParseException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_STRINGPREPPARSEEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_STRINGPREPPARSEEXCEPTION)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_STRINGPREPPARSEEXCEPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::StringPrepParseException : public jni::object_base<"android/icu/text/StringPrepParseException",
	java::text::ParseException>
{
public:

	static jint ACE_PREFIX_ERROR() { return get_static_field<"ACE_PREFIX_ERROR", jint>(); }
	static jint BUFFER_OVERFLOW_ERROR() { return get_static_field<"BUFFER_OVERFLOW_ERROR", jint>(); }
	static jint CHECK_BIDI_ERROR() { return get_static_field<"CHECK_BIDI_ERROR", jint>(); }
	static jint DOMAIN_NAME_TOO_LONG_ERROR() { return get_static_field<"DOMAIN_NAME_TOO_LONG_ERROR", jint>(); }
	static jint ILLEGAL_CHAR_FOUND() { return get_static_field<"ILLEGAL_CHAR_FOUND", jint>(); }
	static jint INVALID_CHAR_FOUND() { return get_static_field<"INVALID_CHAR_FOUND", jint>(); }
	static jint LABEL_TOO_LONG_ERROR() { return get_static_field<"LABEL_TOO_LONG_ERROR", jint>(); }
	static jint PROHIBITED_ERROR() { return get_static_field<"PROHIBITED_ERROR", jint>(); }
	static jint STD3_ASCII_RULES_ERROR() { return get_static_field<"STD3_ASCII_RULES_ERROR", jint>(); }
	static jint UNASSIGNED_ERROR() { return get_static_field<"UNASSIGNED_ERROR", jint>(); }
	static jint VERIFICATION_ERROR() { return get_static_field<"VERIFICATION_ERROR", jint>(); }
	static jint ZERO_LENGTH_LABEL() { return get_static_field<"ZERO_LENGTH_LABEL", jint>(); }

	static jni::ref<android::icu::text::StringPrepParseException> new_object(jni::ref<java::lang::String> message, jint error) { return base_::new_object(message, error); }
	static jni::ref<android::icu::text::StringPrepParseException> new_object(jni::ref<java::lang::String> message, jint error, jni::ref<java::lang::String> rules, jint pos) { return base_::new_object(message, error, rules, pos); }
	static jni::ref<android::icu::text::StringPrepParseException> new_object(jni::ref<java::lang::String> message, jint error, jni::ref<java::lang::String> rules, jint pos, jint lineNumber) { return base_::new_object(message, error, rules, pos, lineNumber); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint getError() { return call_method<"getError", jint>(); }

protected:

	StringPrepParseException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_STRINGPREPPARSEEXCEPTION
