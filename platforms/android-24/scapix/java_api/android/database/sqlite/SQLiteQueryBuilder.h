// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::database::sqlite { class SQLiteQueryBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::database::sqlite::SQLiteQueryBuilder>
{
	static constexpr fixed_string class_name = "android/database/sqlite/SQLiteQueryBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER)
#define SCAPIX_JAVA_API_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase_CursorFactory.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::database::sqlite::SQLiteQueryBuilder : public jni::object_base<"android/database/sqlite/SQLiteQueryBuilder",
	java::lang::Object>
{
public:

	static jni::ref<android::database::sqlite::SQLiteQueryBuilder> new_object() { return base_::new_object(); }
	void setDistinct(jboolean distinct) { return call_method<"setDistinct", void>(distinct); }
	jni::ref<java::lang::String> getTables() { return call_method<"getTables", jni::ref<java::lang::String>>(); }
	void setTables(jni::ref<java::lang::String> inTables) { return call_method<"setTables", void>(inTables); }
	void appendWhere(jni::ref<java::lang::CharSequence> inWhere) { return call_method<"appendWhere", void>(inWhere); }
	void appendWhereEscapeString(jni::ref<java::lang::String> inWhere) { return call_method<"appendWhereEscapeString", void>(inWhere); }
	void setProjectionMap(jni::ref<java::util::Map> columnMap) { return call_method<"setProjectionMap", void>(columnMap); }
	void setCursorFactory(jni::ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory) { return call_method<"setCursorFactory", void>(factory); }
	void setStrict(jboolean flag) { return call_method<"setStrict", void>(flag); }
	static jni::ref<java::lang::String> buildQueryString(jboolean distinct, jni::ref<java::lang::String> tables, jni::ref<jni::array<java::lang::String>> columns, jni::ref<java::lang::String> where, jni::ref<java::lang::String> groupBy, jni::ref<java::lang::String> having, jni::ref<java::lang::String> orderBy, jni::ref<java::lang::String> limit) { return call_static_method<"buildQueryString", jni::ref<java::lang::String>>(distinct, tables, columns, where, groupBy, having, orderBy, limit); }
	static void appendColumns(jni::ref<java::lang::StringBuilder> s, jni::ref<jni::array<java::lang::String>> columns) { return call_static_method<"appendColumns", void>(s, columns); }
	jni::ref<android::database::Cursor> query(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<jni::array<java::lang::String>> projectionIn, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> groupBy, jni::ref<java::lang::String> having, jni::ref<java::lang::String> sortOrder) { return call_method<"query", jni::ref<android::database::Cursor>>(db, projectionIn, selection, selectionArgs, groupBy, having, sortOrder); }
	jni::ref<android::database::Cursor> query(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<jni::array<java::lang::String>> projectionIn, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> groupBy, jni::ref<java::lang::String> having, jni::ref<java::lang::String> sortOrder, jni::ref<java::lang::String> limit) { return call_method<"query", jni::ref<android::database::Cursor>>(db, projectionIn, selection, selectionArgs, groupBy, having, sortOrder, limit); }
	jni::ref<android::database::Cursor> query(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<jni::array<java::lang::String>> projectionIn, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> groupBy, jni::ref<java::lang::String> having, jni::ref<java::lang::String> sortOrder, jni::ref<java::lang::String> limit, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"query", jni::ref<android::database::Cursor>>(db, projectionIn, selection, selectionArgs, groupBy, having, sortOrder, limit, cancellationSignal); }
	jni::ref<java::lang::String> buildQuery(jni::ref<jni::array<java::lang::String>> projectionIn, jni::ref<java::lang::String> selection, jni::ref<java::lang::String> groupBy, jni::ref<java::lang::String> having, jni::ref<java::lang::String> sortOrder, jni::ref<java::lang::String> limit) { return call_method<"buildQuery", jni::ref<java::lang::String>>(projectionIn, selection, groupBy, having, sortOrder, limit); }
	jni::ref<java::lang::String> buildQuery(jni::ref<jni::array<java::lang::String>> projectionIn, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> groupBy, jni::ref<java::lang::String> having, jni::ref<java::lang::String> sortOrder, jni::ref<java::lang::String> limit) { return call_method<"buildQuery", jni::ref<java::lang::String>>(projectionIn, selection, selectionArgs, groupBy, having, sortOrder, limit); }
	jni::ref<java::lang::String> buildUnionSubQuery(jni::ref<java::lang::String> typeDiscriminatorColumn, jni::ref<jni::array<java::lang::String>> unionColumns, jni::ref<java::util::Set> columnsPresentInTable, jint computedColumnsOffset, jni::ref<java::lang::String> typeDiscriminatorValue, jni::ref<java::lang::String> selection, jni::ref<java::lang::String> groupBy, jni::ref<java::lang::String> having) { return call_method<"buildUnionSubQuery", jni::ref<java::lang::String>>(typeDiscriminatorColumn, unionColumns, columnsPresentInTable, computedColumnsOffset, typeDiscriminatorValue, selection, groupBy, having); }
	jni::ref<java::lang::String> buildUnionSubQuery(jni::ref<java::lang::String> typeDiscriminatorColumn, jni::ref<jni::array<java::lang::String>> unionColumns, jni::ref<java::util::Set> columnsPresentInTable, jint computedColumnsOffset, jni::ref<java::lang::String> typeDiscriminatorValue, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> groupBy, jni::ref<java::lang::String> having) { return call_method<"buildUnionSubQuery", jni::ref<java::lang::String>>(typeDiscriminatorColumn, unionColumns, columnsPresentInTable, computedColumnsOffset, typeDiscriminatorValue, selection, selectionArgs, groupBy, having); }
	jni::ref<java::lang::String> buildUnionQuery(jni::ref<jni::array<java::lang::String>> subQueries, jni::ref<java::lang::String> sortOrder, jni::ref<java::lang::String> limit) { return call_method<"buildUnionQuery", jni::ref<java::lang::String>>(subQueries, sortOrder, limit); }

protected:

	SQLiteQueryBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_SQLITE_SQLITEQUERYBUILDER
