// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/LinearLayout.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_TABLELAYOUT_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_TABLELAYOUT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class TableLayout; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::TableLayout>
{
	static constexpr fixed_string class_name = "android/widget/TableLayout";
	using base_classes = std::tuple<scapix::java_api::android::widget::LinearLayout>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_TABLELAYOUT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_TABLELAYOUT)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_TABLELAYOUT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/ViewGroup_OnHierarchyChangeListener.h>
#include <scapix/java_api/android/widget/TableLayout_LayoutParams.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::TableLayout : public jni::object_base<"android/widget/TableLayout",
	android::widget::LinearLayout>
{
public:

	using LayoutParams = TableLayout_LayoutParams;

	static jni::ref<android::widget::TableLayout> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::TableLayout> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	void setOnHierarchyChangeListener(jni::ref<android::view::ViewGroup_OnHierarchyChangeListener> listener) { return call_method<"setOnHierarchyChangeListener", void>(listener); }
	void requestLayout() { return call_method<"requestLayout", void>(); }
	jboolean isShrinkAllColumns() { return call_method<"isShrinkAllColumns", jboolean>(); }
	void setShrinkAllColumns(jboolean shrinkAllColumns) { return call_method<"setShrinkAllColumns", void>(shrinkAllColumns); }
	jboolean isStretchAllColumns() { return call_method<"isStretchAllColumns", jboolean>(); }
	void setStretchAllColumns(jboolean stretchAllColumns) { return call_method<"setStretchAllColumns", void>(stretchAllColumns); }
	void setColumnCollapsed(jint columnIndex, jboolean isCollapsed) { return call_method<"setColumnCollapsed", void>(columnIndex, isCollapsed); }
	jboolean isColumnCollapsed(jint columnIndex) { return call_method<"isColumnCollapsed", jboolean>(columnIndex); }
	void setColumnStretchable(jint columnIndex, jboolean isStretchable) { return call_method<"setColumnStretchable", void>(columnIndex, isStretchable); }
	jboolean isColumnStretchable(jint columnIndex) { return call_method<"isColumnStretchable", jboolean>(columnIndex); }
	void setColumnShrinkable(jint columnIndex, jboolean isShrinkable) { return call_method<"setColumnShrinkable", void>(columnIndex, isShrinkable); }
	jboolean isColumnShrinkable(jint columnIndex) { return call_method<"isColumnShrinkable", jboolean>(columnIndex); }
	void addView(jni::ref<android::view::View> child) { return call_method<"addView", void>(child); }
	void addView(jni::ref<android::view::View> child, jint index) { return call_method<"addView", void>(child, index); }
	void addView(jni::ref<android::view::View> child, jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"addView", void>(child, params); }
	void addView(jni::ref<android::view::View> child, jint index, jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"addView", void>(child, index, params); }
	jni::ref<android::widget::TableLayout_LayoutParams> generateLayoutParams(jni::ref<android::util::AttributeSet> attrs) { return call_method<"generateLayoutParams", jni::ref<android::widget::TableLayout_LayoutParams>>(attrs); }
	jni::ref<java::lang::CharSequence> getAccessibilityClassName() { return call_method<"getAccessibilityClassName", jni::ref<java::lang::CharSequence>>(); }

protected:

	TableLayout(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_TABLELAYOUT
