// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/provider/Settings_NameValueTable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_PROVIDER_SETTINGS_GLOBAL_FWD
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_SETTINGS_GLOBAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::provider { class Settings_Global; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::provider::Settings_Global>
{
	static constexpr fixed_string class_name = "android/provider/Settings$Global";
	using base_classes = std::tuple<scapix::java_api::android::provider::Settings_NameValueTable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_SETTINGS_GLOBAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_PROVIDER_SETTINGS_GLOBAL)
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_SETTINGS_GLOBAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::provider::Settings_Global : public jni::object_base<"android/provider/Settings$Global",
	android::provider::Settings_NameValueTable>
{
public:

	static jni::ref<java::lang::String> ADB_ENABLED() { return get_static_field<"ADB_ENABLED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AIRPLANE_MODE_ON() { return get_static_field<"AIRPLANE_MODE_ON", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AIRPLANE_MODE_RADIOS() { return get_static_field<"AIRPLANE_MODE_RADIOS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ALWAYS_FINISH_ACTIVITIES() { return get_static_field<"ALWAYS_FINISH_ACTIVITIES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ANIMATOR_DURATION_SCALE() { return get_static_field<"ANIMATOR_DURATION_SCALE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTO_TIME() { return get_static_field<"AUTO_TIME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTO_TIME_ZONE() { return get_static_field<"AUTO_TIME_ZONE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BLUETOOTH_ON() { return get_static_field<"BLUETOOTH_ON", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BOOT_COUNT() { return get_static_field<"BOOT_COUNT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONTACT_METADATA_SYNC_ENABLED() { return get_static_field<"CONTACT_METADATA_SYNC_ENABLED", jni::ref<java::lang::String>>(); }
	static jni::ref<android::net::Uri> CONTENT_URI() { return get_static_field<"CONTENT_URI", jni::ref<android::net::Uri>>(); }
	static jni::ref<java::lang::String> DATA_ROAMING() { return get_static_field<"DATA_ROAMING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEBUG_APP() { return get_static_field<"DEBUG_APP", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEVELOPMENT_SETTINGS_ENABLED() { return get_static_field<"DEVELOPMENT_SETTINGS_ENABLED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEVICE_PROVISIONED() { return get_static_field<"DEVICE_PROVISIONED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> HTTP_PROXY() { return get_static_field<"HTTP_PROXY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INSTALL_NON_MARKET_APPS() { return get_static_field<"INSTALL_NON_MARKET_APPS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MODE_RINGER() { return get_static_field<"MODE_RINGER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NETWORK_PREFERENCE() { return get_static_field<"NETWORK_PREFERENCE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RADIO_BLUETOOTH() { return get_static_field<"RADIO_BLUETOOTH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RADIO_CELL() { return get_static_field<"RADIO_CELL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RADIO_NFC() { return get_static_field<"RADIO_NFC", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RADIO_WIFI() { return get_static_field<"RADIO_WIFI", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SHOW_PROCESSES() { return get_static_field<"SHOW_PROCESSES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> STAY_ON_WHILE_PLUGGED_IN() { return get_static_field<"STAY_ON_WHILE_PLUGGED_IN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TRANSITION_ANIMATION_SCALE() { return get_static_field<"TRANSITION_ANIMATION_SCALE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> USB_MASS_STORAGE_ENABLED() { return get_static_field<"USB_MASS_STORAGE_ENABLED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> USE_GOOGLE_MAIL() { return get_static_field<"USE_GOOGLE_MAIL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WAIT_FOR_DEBUGGER() { return get_static_field<"WAIT_FOR_DEBUGGER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN() { return get_static_field<"WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_MAX_DHCP_RETRY_COUNT() { return get_static_field<"WIFI_MAX_DHCP_RETRY_COUNT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS() { return get_static_field<"WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON() { return get_static_field<"WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY() { return get_static_field<"WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_NUM_OPEN_NETWORKS_KEPT() { return get_static_field<"WIFI_NUM_OPEN_NETWORKS_KEPT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_ON() { return get_static_field<"WIFI_ON", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_SLEEP_POLICY() { return get_static_field<"WIFI_SLEEP_POLICY", jni::ref<java::lang::String>>(); }
	static jint WIFI_SLEEP_POLICY_DEFAULT() { return get_static_field<"WIFI_SLEEP_POLICY_DEFAULT", jint>(); }
	static jint WIFI_SLEEP_POLICY_NEVER() { return get_static_field<"WIFI_SLEEP_POLICY_NEVER", jint>(); }
	static jint WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED() { return get_static_field<"WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED", jint>(); }
	static jni::ref<java::lang::String> WIFI_WATCHDOG_ON() { return get_static_field<"WIFI_WATCHDOG_ON", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WINDOW_ANIMATION_SCALE() { return get_static_field<"WINDOW_ANIMATION_SCALE", jni::ref<java::lang::String>>(); }

	static jni::ref<android::provider::Settings_Global> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> getString(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::lang::String> name) { return call_static_method<"getString", jni::ref<java::lang::String>>(resolver, name); }
	static jboolean putString(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::lang::String> name, jni::ref<java::lang::String> value) { return call_static_method<"putString", jboolean>(resolver, name, value); }
	static jni::ref<android::net::Uri> getUriFor(jni::ref<java::lang::String> name) { return call_static_method<"getUriFor", jni::ref<android::net::Uri>>(name); }
	static jint getInt(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name, jint def) { return call_static_method<"getInt", jint>(cr, name, def); }
	static jint getInt(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name) { return call_static_method<"getInt", jint>(cr, name); }
	static jboolean putInt(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name, jint value) { return call_static_method<"putInt", jboolean>(cr, name, value); }
	static jlong getLong(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name, jlong def) { return call_static_method<"getLong", jlong>(cr, name, def); }
	static jlong getLong(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name) { return call_static_method<"getLong", jlong>(cr, name); }
	static jboolean putLong(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name, jlong value) { return call_static_method<"putLong", jboolean>(cr, name, value); }
	static jfloat getFloat(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name, jfloat def) { return call_static_method<"getFloat", jfloat>(cr, name, def); }
	static jfloat getFloat(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name) { return call_static_method<"getFloat", jfloat>(cr, name); }
	static jboolean putFloat(jni::ref<android::content::ContentResolver> cr, jni::ref<java::lang::String> name, jfloat value) { return call_static_method<"putFloat", jboolean>(cr, name, value); }

protected:

	Settings_Global(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_SETTINGS_GLOBAL
