// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/text/SpannableStringInternal.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/android/text/GetChars.h>
#include <scapix/java_api/android/text/Spannable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRING_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class SpannableString; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::SpannableString>
{
	static constexpr fixed_string class_name = "android/text/SpannableString";
	using base_classes = std::tuple<scapix::java_api::android::text::SpannableStringInternal, scapix::java_api::java::lang::CharSequence, scapix::java_api::android::text::GetChars, scapix::java_api::android::text::Spannable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRING)
#define SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::SpannableString : public jni::object_base<"android/text/SpannableString",
	android::text::SpannableStringInternal,
	java::lang::CharSequence,
	android::text::GetChars,
	android::text::Spannable>
{
public:

	static jni::ref<android::text::SpannableString> new_object(jni::ref<java::lang::CharSequence> source) { return base_::new_object(source); }
	static jni::ref<android::text::SpannableString> valueOf(jni::ref<java::lang::CharSequence> source) { return call_static_method<"valueOf", jni::ref<android::text::SpannableString>>(source); }
	void setSpan(jni::ref<java::lang::Object> what, jint start, jint end, jint flags) { return call_method<"setSpan", void>(what, start, end, flags); }
	void removeSpan(jni::ref<java::lang::Object> what) { return call_method<"removeSpan", void>(what); }
	jni::ref<java::lang::CharSequence> subSequence(jint start, jint end) { return call_method<"subSequence", jni::ref<java::lang::CharSequence>>(start, end); }

protected:

	SpannableString(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRING
