// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK_FWD
#define SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telecom { class RemoteConnection_Callback; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telecom::RemoteConnection_Callback>
{
	static constexpr fixed_string class_name = "android/telecom/RemoteConnection$Callback";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK)
#define SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/telecom/DisconnectCause.h>
#include <scapix/java_api/android/telecom/RemoteConference.h>
#include <scapix/java_api/android/telecom/RemoteConnection.h>
#include <scapix/java_api/android/telecom/RemoteConnection_VideoProvider.h>
#include <scapix/java_api/android/telecom/StatusHints.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telecom::RemoteConnection_Callback : public jni::object_base<"android/telecom/RemoteConnection$Callback",
	java::lang::Object>
{
public:

	static jni::ref<android::telecom::RemoteConnection_Callback> new_object() { return base_::new_object(); }
	void onStateChanged(jni::ref<android::telecom::RemoteConnection> connection, jint state) { return call_method<"onStateChanged", void>(connection, state); }
	void onDisconnected(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<android::telecom::DisconnectCause> disconnectCause) { return call_method<"onDisconnected", void>(connection, disconnectCause); }
	void onRingbackRequested(jni::ref<android::telecom::RemoteConnection> connection, jboolean ringback) { return call_method<"onRingbackRequested", void>(connection, ringback); }
	void onConnectionCapabilitiesChanged(jni::ref<android::telecom::RemoteConnection> connection, jint connectionCapabilities) { return call_method<"onConnectionCapabilitiesChanged", void>(connection, connectionCapabilities); }
	void onPostDialWait(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<java::lang::String> remainingPostDialSequence) { return call_method<"onPostDialWait", void>(connection, remainingPostDialSequence); }
	void onPostDialChar(jni::ref<android::telecom::RemoteConnection> connection, jchar nextChar) { return call_method<"onPostDialChar", void>(connection, nextChar); }
	void onVoipAudioChanged(jni::ref<android::telecom::RemoteConnection> connection, jboolean isVoip) { return call_method<"onVoipAudioChanged", void>(connection, isVoip); }
	void onStatusHintsChanged(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<android::telecom::StatusHints> statusHints) { return call_method<"onStatusHintsChanged", void>(connection, statusHints); }
	void onAddressChanged(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<android::net::Uri> address, jint presentation) { return call_method<"onAddressChanged", void>(connection, address, presentation); }
	void onCallerDisplayNameChanged(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<java::lang::String> callerDisplayName, jint presentation) { return call_method<"onCallerDisplayNameChanged", void>(connection, callerDisplayName, presentation); }
	void onVideoStateChanged(jni::ref<android::telecom::RemoteConnection> connection, jint videoState) { return call_method<"onVideoStateChanged", void>(connection, videoState); }
	void onDestroyed(jni::ref<android::telecom::RemoteConnection> connection) { return call_method<"onDestroyed", void>(connection); }
	void onConferenceableConnectionsChanged(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<java::util::List> conferenceableConnections) { return call_method<"onConferenceableConnectionsChanged", void>(connection, conferenceableConnections); }
	void onVideoProviderChanged(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<android::telecom::RemoteConnection_VideoProvider> videoProvider) { return call_method<"onVideoProviderChanged", void>(connection, videoProvider); }
	void onConferenceChanged(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<android::telecom::RemoteConference> conference) { return call_method<"onConferenceChanged", void>(connection, conference); }
	void onExtrasChanged(jni::ref<android::telecom::RemoteConnection> connection, jni::ref<android::os::Bundle> extras) { return call_method<"onExtrasChanged", void>(connection, extras); }

protected:

	RemoteConnection_Callback(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONNECTION_CALLBACK
