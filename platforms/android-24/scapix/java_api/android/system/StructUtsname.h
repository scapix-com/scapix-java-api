// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_SYSTEM_STRUCTUTSNAME_FWD
#define SCAPIX_JAVA_API_ANDROID_SYSTEM_STRUCTUTSNAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::system { class StructUtsname; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::system::StructUtsname>
{
	static constexpr fixed_string class_name = "android/system/StructUtsname";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SYSTEM_STRUCTUTSNAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_SYSTEM_STRUCTUTSNAME)
#define SCAPIX_JAVA_API_ANDROID_SYSTEM_STRUCTUTSNAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::system::StructUtsname : public jni::object_base<"android/system/StructUtsname",
	java::lang::Object>
{
public:

	jni::ref<java::lang::String> machine() { return get_field<"machine", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> nodename() { return get_field<"nodename", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> release() { return get_field<"release", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> sysname() { return get_field<"sysname", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> version() { return get_field<"version", jni::ref<java::lang::String>>(); }

	static jni::ref<android::system::StructUtsname> new_object(jni::ref<java::lang::String> sysname, jni::ref<java::lang::String> nodename, jni::ref<java::lang::String> release, jni::ref<java::lang::String> version, jni::ref<java::lang::String> machine) { return base_::new_object(sysname, nodename, release, version, machine); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	StructUtsname(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SYSTEM_STRUCTUTSNAME
