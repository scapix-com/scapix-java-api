// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_LOCALSOCKET_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_LOCALSOCKET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class LocalSocket; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::LocalSocket>
{
	static constexpr fixed_string class_name = "android/net/LocalSocket";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_LOCALSOCKET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_LOCALSOCKET)
#define SCAPIX_JAVA_API_ANDROID_NET_LOCALSOCKET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/Credentials.h>
#include <scapix/java_api/android/net/LocalSocketAddress.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::LocalSocket : public jni::object_base<"android/net/LocalSocket",
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jint SOCKET_DGRAM() { return get_static_field<"SOCKET_DGRAM", jint>(); }
	static jint SOCKET_SEQPACKET() { return get_static_field<"SOCKET_SEQPACKET", jint>(); }
	static jint SOCKET_STREAM() { return get_static_field<"SOCKET_STREAM", jint>(); }

	static jni::ref<android::net::LocalSocket> new_object() { return base_::new_object(); }
	static jni::ref<android::net::LocalSocket> new_object(jint sockType) { return base_::new_object(sockType); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void connect(jni::ref<android::net::LocalSocketAddress> endpoint) { return call_method<"connect", void>(endpoint); }
	void bind(jni::ref<android::net::LocalSocketAddress> bindpoint) { return call_method<"bind", void>(bindpoint); }
	jni::ref<android::net::LocalSocketAddress> getLocalSocketAddress() { return call_method<"getLocalSocketAddress", jni::ref<android::net::LocalSocketAddress>>(); }
	jni::ref<java::io::InputStream> getInputStream() { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	void close() { return call_method<"close", void>(); }
	void shutdownInput() { return call_method<"shutdownInput", void>(); }
	void shutdownOutput() { return call_method<"shutdownOutput", void>(); }
	void setReceiveBufferSize(jint size) { return call_method<"setReceiveBufferSize", void>(size); }
	jint getReceiveBufferSize() { return call_method<"getReceiveBufferSize", jint>(); }
	void setSoTimeout(jint n) { return call_method<"setSoTimeout", void>(n); }
	jint getSoTimeout() { return call_method<"getSoTimeout", jint>(); }
	void setSendBufferSize(jint n) { return call_method<"setSendBufferSize", void>(n); }
	jint getSendBufferSize() { return call_method<"getSendBufferSize", jint>(); }
	jni::ref<android::net::LocalSocketAddress> getRemoteSocketAddress() { return call_method<"getRemoteSocketAddress", jni::ref<android::net::LocalSocketAddress>>(); }
	jboolean isConnected() { return call_method<"isConnected", jboolean>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	jboolean isBound() { return call_method<"isBound", jboolean>(); }
	jboolean isOutputShutdown() { return call_method<"isOutputShutdown", jboolean>(); }
	jboolean isInputShutdown() { return call_method<"isInputShutdown", jboolean>(); }
	void connect(jni::ref<android::net::LocalSocketAddress> endpoint, jint timeout) { return call_method<"connect", void>(endpoint, timeout); }
	void setFileDescriptorsForSend(jni::ref<jni::array<java::io::FileDescriptor>> fds) { return call_method<"setFileDescriptorsForSend", void>(fds); }
	jni::ref<jni::array<java::io::FileDescriptor>> getAncillaryFileDescriptors() { return call_method<"getAncillaryFileDescriptors", jni::ref<jni::array<java::io::FileDescriptor>>>(); }
	jni::ref<android::net::Credentials> getPeerCredentials() { return call_method<"getPeerCredentials", jni::ref<android::net::Credentials>>(); }
	jni::ref<java::io::FileDescriptor> getFileDescriptor() { return call_method<"getFileDescriptor", jni::ref<java::io::FileDescriptor>>(); }

protected:

	LocalSocket(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_LOCALSOCKET
