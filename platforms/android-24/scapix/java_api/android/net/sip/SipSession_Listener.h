// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_LISTENER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_LISTENER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::sip { class SipSession_Listener; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::sip::SipSession_Listener>
{
	static constexpr fixed_string class_name = "android/net/sip/SipSession$Listener";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_LISTENER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_LISTENER)
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_LISTENER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/sip/SipProfile.h>
#include <scapix/java_api/android/net/sip/SipSession.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::sip::SipSession_Listener : public jni::object_base<"android/net/sip/SipSession$Listener",
	java::lang::Object>
{
public:

	static jni::ref<android::net::sip::SipSession_Listener> new_object() { return base_::new_object(); }
	void onCalling(jni::ref<android::net::sip::SipSession> session) { return call_method<"onCalling", void>(session); }
	void onRinging(jni::ref<android::net::sip::SipSession> session, jni::ref<android::net::sip::SipProfile> caller, jni::ref<java::lang::String> sessionDescription) { return call_method<"onRinging", void>(session, caller, sessionDescription); }
	void onRingingBack(jni::ref<android::net::sip::SipSession> session) { return call_method<"onRingingBack", void>(session); }
	void onCallEstablished(jni::ref<android::net::sip::SipSession> session, jni::ref<java::lang::String> sessionDescription) { return call_method<"onCallEstablished", void>(session, sessionDescription); }
	void onCallEnded(jni::ref<android::net::sip::SipSession> session) { return call_method<"onCallEnded", void>(session); }
	void onCallBusy(jni::ref<android::net::sip::SipSession> session) { return call_method<"onCallBusy", void>(session); }
	void onError(jni::ref<android::net::sip::SipSession> session, jint errorCode, jni::ref<java::lang::String> errorMessage) { return call_method<"onError", void>(session, errorCode, errorMessage); }
	void onCallChangeFailed(jni::ref<android::net::sip::SipSession> session, jint errorCode, jni::ref<java::lang::String> errorMessage) { return call_method<"onCallChangeFailed", void>(session, errorCode, errorMessage); }
	void onRegistering(jni::ref<android::net::sip::SipSession> session) { return call_method<"onRegistering", void>(session); }
	void onRegistrationDone(jni::ref<android::net::sip::SipSession> session, jint duration) { return call_method<"onRegistrationDone", void>(session, duration); }
	void onRegistrationFailed(jni::ref<android::net::sip::SipSession> session, jint errorCode, jni::ref<java::lang::String> errorMessage) { return call_method<"onRegistrationFailed", void>(session, errorCode, errorMessage); }
	void onRegistrationTimeout(jni::ref<android::net::sip::SipSession> session) { return call_method<"onRegistrationTimeout", void>(session); }

protected:

	SipSession_Listener(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_LISTENER
