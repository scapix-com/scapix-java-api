// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/net/UrlQuerySanitizer_ValueSanitizer.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_ILLEGALCHARACTERVALUESANITIZER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_ILLEGALCHARACTERVALUESANITIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class UrlQuerySanitizer_IllegalCharacterValueSanitizer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::UrlQuerySanitizer_IllegalCharacterValueSanitizer>
{
	static constexpr fixed_string class_name = "android/net/UrlQuerySanitizer$IllegalCharacterValueSanitizer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::net::UrlQuerySanitizer_ValueSanitizer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_ILLEGALCHARACTERVALUESANITIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_ILLEGALCHARACTERVALUESANITIZER)
#define SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_ILLEGALCHARACTERVALUESANITIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::UrlQuerySanitizer_IllegalCharacterValueSanitizer : public jni::object_base<"android/net/UrlQuerySanitizer$IllegalCharacterValueSanitizer",
	java::lang::Object,
	android::net::UrlQuerySanitizer_ValueSanitizer>
{
public:

	static jint ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL() { return get_static_field<"ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL", jint>(); }
	static jint ALL_BUT_NUL_LEGAL() { return get_static_field<"ALL_BUT_NUL_LEGAL", jint>(); }
	static jint ALL_BUT_WHITESPACE_LEGAL() { return get_static_field<"ALL_BUT_WHITESPACE_LEGAL", jint>(); }
	static jint ALL_ILLEGAL() { return get_static_field<"ALL_ILLEGAL", jint>(); }
	static jint ALL_OK() { return get_static_field<"ALL_OK", jint>(); }
	static jint ALL_WHITESPACE_OK() { return get_static_field<"ALL_WHITESPACE_OK", jint>(); }
	static jint AMP_AND_SPACE_LEGAL() { return get_static_field<"AMP_AND_SPACE_LEGAL", jint>(); }
	static jint AMP_LEGAL() { return get_static_field<"AMP_LEGAL", jint>(); }
	static jint AMP_OK() { return get_static_field<"AMP_OK", jint>(); }
	static jint DQUOTE_OK() { return get_static_field<"DQUOTE_OK", jint>(); }
	static jint GT_OK() { return get_static_field<"GT_OK", jint>(); }
	static jint LT_OK() { return get_static_field<"LT_OK", jint>(); }
	static jint NON_7_BIT_ASCII_OK() { return get_static_field<"NON_7_BIT_ASCII_OK", jint>(); }
	static jint NUL_OK() { return get_static_field<"NUL_OK", jint>(); }
	static jint OTHER_WHITESPACE_OK() { return get_static_field<"OTHER_WHITESPACE_OK", jint>(); }
	static jint PCT_OK() { return get_static_field<"PCT_OK", jint>(); }
	static jint SCRIPT_URL_OK() { return get_static_field<"SCRIPT_URL_OK", jint>(); }
	static jint SPACE_LEGAL() { return get_static_field<"SPACE_LEGAL", jint>(); }
	static jint SPACE_OK() { return get_static_field<"SPACE_OK", jint>(); }
	static jint SQUOTE_OK() { return get_static_field<"SQUOTE_OK", jint>(); }
	static jint URL_AND_SPACE_LEGAL() { return get_static_field<"URL_AND_SPACE_LEGAL", jint>(); }
	static jint URL_LEGAL() { return get_static_field<"URL_LEGAL", jint>(); }

	static jni::ref<android::net::UrlQuerySanitizer_IllegalCharacterValueSanitizer> new_object(jint flags) { return base_::new_object(flags); }
	jni::ref<java::lang::String> sanitize(jni::ref<java::lang::String> value) { return call_method<"sanitize", jni::ref<java::lang::String>>(value); }

protected:

	UrlQuerySanitizer_IllegalCharacterValueSanitizer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_ILLEGALCHARACTERVALUESANITIZER
