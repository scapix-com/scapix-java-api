// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Vector.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STACK_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STACK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Stack; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Stack>
{
	static constexpr fixed_string class_name = "java/util/Stack";
	using base_classes = std::tuple<scapix::java_api::java::util::Vector>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STACK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STACK)
#define SCAPIX_JAVA_API_JAVA_UTIL_STACK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Stack : public jni::object_base<"java/util/Stack",
	java::util::Vector>
{
public:

	static jni::ref<java::util::Stack> new_object() { return base_::new_object(); }
	jni::ref<java::lang::Object> push(jni::ref<java::lang::Object> item) { return call_method<"push", jni::ref<java::lang::Object>>(item); }
	jni::ref<java::lang::Object> pop() { return call_method<"pop", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> peek() { return call_method<"peek", jni::ref<java::lang::Object>>(); }
	jboolean empty() { return call_method<"empty", jboolean>(); }
	jint search(jni::ref<java::lang::Object> o) { return call_method<"search", jint>(o); }

protected:

	Stack(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STACK
