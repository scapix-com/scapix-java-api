// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/RunnableFuture.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FUTURETASK_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FUTURETASK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class FutureTask; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::FutureTask>
{
	static constexpr fixed_string class_name = "java/util/concurrent/FutureTask";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::RunnableFuture>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FUTURETASK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FUTURETASK)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FUTURETASK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::FutureTask : public jni::object_base<"java/util/concurrent/FutureTask",
	java::lang::Object,
	java::util::concurrent::RunnableFuture>
{
public:

	static jni::ref<java::util::concurrent::FutureTask> new_object(jni::ref<java::util::concurrent::Callable> callable) { return base_::new_object(callable); }
	static jni::ref<java::util::concurrent::FutureTask> new_object(jni::ref<java::lang::Runnable> runnable, jni::ref<java::lang::Object> result) { return base_::new_object(runnable, result); }
	jboolean isCancelled() { return call_method<"isCancelled", jboolean>(); }
	jboolean isDone() { return call_method<"isDone", jboolean>(); }
	jboolean cancel(jboolean mayInterruptIfRunning) { return call_method<"cancel", jboolean>(mayInterruptIfRunning); }
	jni::ref<java::lang::Object> get() { return call_method<"get", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> get(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"get", jni::ref<java::lang::Object>>(timeout, p2); }
	void run() { return call_method<"run", void>(); }

protected:

	FutureTask(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FUTURETASK
