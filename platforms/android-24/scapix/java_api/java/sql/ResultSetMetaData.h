// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Wrapper.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_RESULTSETMETADATA_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_RESULTSETMETADATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class ResultSetMetaData; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::ResultSetMetaData>
{
	static constexpr fixed_string class_name = "java/sql/ResultSetMetaData";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::sql::Wrapper>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_RESULTSETMETADATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_RESULTSETMETADATA)
#define SCAPIX_JAVA_API_JAVA_SQL_RESULTSETMETADATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::ResultSetMetaData : public jni::object_base<"java/sql/ResultSetMetaData",
	java::lang::Object,
	java::sql::Wrapper>
{
public:

	static jint columnNoNulls() { return get_static_field<"columnNoNulls", jint>(); }
	static jint columnNullable() { return get_static_field<"columnNullable", jint>(); }
	static jint columnNullableUnknown() { return get_static_field<"columnNullableUnknown", jint>(); }

	jint getColumnCount() { return call_method<"getColumnCount", jint>(); }
	jboolean isAutoIncrement(jint p1) { return call_method<"isAutoIncrement", jboolean>(p1); }
	jboolean isCaseSensitive(jint p1) { return call_method<"isCaseSensitive", jboolean>(p1); }
	jboolean isSearchable(jint p1) { return call_method<"isSearchable", jboolean>(p1); }
	jboolean isCurrency(jint p1) { return call_method<"isCurrency", jboolean>(p1); }
	jint isNullable(jint p1) { return call_method<"isNullable", jint>(p1); }
	jboolean isSigned(jint p1) { return call_method<"isSigned", jboolean>(p1); }
	jint getColumnDisplaySize(jint p1) { return call_method<"getColumnDisplaySize", jint>(p1); }
	jni::ref<java::lang::String> getColumnLabel(jint p1) { return call_method<"getColumnLabel", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getColumnName(jint p1) { return call_method<"getColumnName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getSchemaName(jint p1) { return call_method<"getSchemaName", jni::ref<java::lang::String>>(p1); }
	jint getPrecision(jint p1) { return call_method<"getPrecision", jint>(p1); }
	jint getScale(jint p1) { return call_method<"getScale", jint>(p1); }
	jni::ref<java::lang::String> getTableName(jint p1) { return call_method<"getTableName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getCatalogName(jint p1) { return call_method<"getCatalogName", jni::ref<java::lang::String>>(p1); }
	jint getColumnType(jint p1) { return call_method<"getColumnType", jint>(p1); }
	jni::ref<java::lang::String> getColumnTypeName(jint p1) { return call_method<"getColumnTypeName", jni::ref<java::lang::String>>(p1); }
	jboolean isReadOnly(jint p1) { return call_method<"isReadOnly", jboolean>(p1); }
	jboolean isWritable(jint p1) { return call_method<"isWritable", jboolean>(p1); }
	jboolean isDefinitelyWritable(jint p1) { return call_method<"isDefinitelyWritable", jboolean>(p1); }
	jni::ref<java::lang::String> getColumnClassName(jint p1) { return call_method<"getColumnClassName", jni::ref<java::lang::String>>(p1); }

protected:

	ResultSetMetaData(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_RESULTSETMETADATA
