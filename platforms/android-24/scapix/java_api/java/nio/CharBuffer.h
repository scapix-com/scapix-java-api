// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Readable.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_CHARBUFFER_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_CHARBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio { class CharBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::CharBuffer>
{
	static constexpr fixed_string class_name = "java/nio/CharBuffer";
	using base_classes = std::tuple<scapix::java_api::java::nio::Buffer, scapix::java_api::java::lang::Comparable, scapix::java_api::java::lang::Appendable, scapix::java_api::java::lang::CharSequence, scapix::java_api::java::lang::Readable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHARBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_CHARBUFFER)
#define SCAPIX_JAVA_API_JAVA_NIO_CHARBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::CharBuffer : public jni::object_base<"java/nio/CharBuffer",
	java::nio::Buffer,
	java::lang::Comparable,
	java::lang::Appendable,
	java::lang::CharSequence,
	java::lang::Readable>
{
public:

	static jni::ref<java::nio::CharBuffer> allocate(jint capacity) { return call_static_method<"allocate", jni::ref<java::nio::CharBuffer>>(capacity); }
	static jni::ref<java::nio::CharBuffer> wrap(jni::ref<jni::array<jchar>> array, jint offset, jint length) { return call_static_method<"wrap", jni::ref<java::nio::CharBuffer>>(array, offset, length); }
	static jni::ref<java::nio::CharBuffer> wrap(jni::ref<jni::array<jchar>> array) { return call_static_method<"wrap", jni::ref<java::nio::CharBuffer>>(array); }
	jint read(jni::ref<java::nio::CharBuffer> target) { return call_method<"read", jint>(target); }
	static jni::ref<java::nio::CharBuffer> wrap(jni::ref<java::lang::CharSequence> csq, jint start, jint end) { return call_static_method<"wrap", jni::ref<java::nio::CharBuffer>>(csq, start, end); }
	static jni::ref<java::nio::CharBuffer> wrap(jni::ref<java::lang::CharSequence> csq) { return call_static_method<"wrap", jni::ref<java::nio::CharBuffer>>(csq); }
	jni::ref<java::nio::CharBuffer> slice() { return call_method<"slice", jni::ref<java::nio::CharBuffer>>(); }
	jni::ref<java::nio::CharBuffer> duplicate() { return call_method<"duplicate", jni::ref<java::nio::CharBuffer>>(); }
	jni::ref<java::nio::CharBuffer> asReadOnlyBuffer() { return call_method<"asReadOnlyBuffer", jni::ref<java::nio::CharBuffer>>(); }
	jchar get() { return call_method<"get", jchar>(); }
	jni::ref<java::nio::CharBuffer> put(jchar p1) { return call_method<"put", jni::ref<java::nio::CharBuffer>>(p1); }
	jchar get(jint p1) { return call_method<"get", jchar>(p1); }
	jni::ref<java::nio::CharBuffer> put(jint p1, jchar p2) { return call_method<"put", jni::ref<java::nio::CharBuffer>>(p1, p2); }
	jni::ref<java::nio::CharBuffer> get(jni::ref<jni::array<jchar>> dst, jint offset, jint length) { return call_method<"get", jni::ref<java::nio::CharBuffer>>(dst, offset, length); }
	jni::ref<java::nio::CharBuffer> get(jni::ref<jni::array<jchar>> dst) { return call_method<"get", jni::ref<java::nio::CharBuffer>>(dst); }
	jni::ref<java::nio::CharBuffer> put(jni::ref<java::nio::CharBuffer> src) { return call_method<"put", jni::ref<java::nio::CharBuffer>>(src); }
	jni::ref<java::nio::CharBuffer> put(jni::ref<jni::array<jchar>> src, jint offset, jint length) { return call_method<"put", jni::ref<java::nio::CharBuffer>>(src, offset, length); }
	jni::ref<java::nio::CharBuffer> put(jni::ref<jni::array<jchar>> src) { return call_method<"put", jni::ref<java::nio::CharBuffer>>(src); }
	jni::ref<java::nio::CharBuffer> put(jni::ref<java::lang::String> src, jint start, jint end) { return call_method<"put", jni::ref<java::nio::CharBuffer>>(src, start, end); }
	jni::ref<java::nio::CharBuffer> put(jni::ref<java::lang::String> src) { return call_method<"put", jni::ref<java::nio::CharBuffer>>(src); }
	jboolean hasArray() { return call_method<"hasArray", jboolean>(); }
	jni::ref<jni::array<jchar>> array() { return call_method<"array", jni::ref<jni::array<jchar>>>(); }
	jint arrayOffset() { return call_method<"arrayOffset", jint>(); }
	jni::ref<java::nio::CharBuffer> compact() { return call_method<"compact", jni::ref<java::nio::CharBuffer>>(); }
	jboolean isDirect() { return call_method<"isDirect", jboolean>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> ob) { return call_method<"equals", jboolean>(ob); }
	jint compareTo(jni::ref<java::nio::CharBuffer> that) { return call_method<"compareTo", jint>(that); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint length() { return call_method<"length", jint>(); }
	jchar charAt(jint index) { return call_method<"charAt", jchar>(index); }
	jni::ref<java::nio::CharBuffer> subSequence(jint p1, jint p2) { return call_method<"subSequence", jni::ref<java::nio::CharBuffer>>(p1, p2); }
	jni::ref<java::nio::CharBuffer> append(jni::ref<java::lang::CharSequence> csq) { return call_method<"append", jni::ref<java::nio::CharBuffer>>(csq); }
	jni::ref<java::nio::CharBuffer> append(jni::ref<java::lang::CharSequence> csq, jint start, jint end) { return call_method<"append", jni::ref<java::nio::CharBuffer>>(csq, start, end); }
	jni::ref<java::nio::CharBuffer> append(jchar c) { return call_method<"append", jni::ref<java::nio::CharBuffer>>(c); }
	jni::ref<java::nio::ByteOrder> order() { return call_method<"order", jni::ref<java::nio::ByteOrder>>(); }
	jni::ref<java::util::stream::IntStream> chars() { return call_method<"chars", jni::ref<java::util::stream::IntStream>>(); }

protected:

	CharBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHARBUFFER
