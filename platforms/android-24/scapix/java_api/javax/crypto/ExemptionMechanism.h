// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_CRYPTO_EXEMPTIONMECHANISM_FWD
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_EXEMPTIONMECHANISM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::crypto { class ExemptionMechanism; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::crypto::ExemptionMechanism>
{
	static constexpr fixed_string class_name = "javax/crypto/ExemptionMechanism";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_EXEMPTIONMECHANISM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_CRYPTO_EXEMPTIONMECHANISM)
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_EXEMPTIONMECHANISM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/AlgorithmParameters.h>
#include <scapix/java_api/java/security/Key.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::crypto::ExemptionMechanism : public jni::object_base<"javax/crypto/ExemptionMechanism",
	java::lang::Object>
{
public:

	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	static jni::ref<javax::crypto::ExemptionMechanism> getInstance(jni::ref<java::lang::String> algorithm) { return call_static_method<"getInstance", jni::ref<javax::crypto::ExemptionMechanism>>(algorithm); }
	static jni::ref<javax::crypto::ExemptionMechanism> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::lang::String> provider) { return call_static_method<"getInstance", jni::ref<javax::crypto::ExemptionMechanism>>(algorithm, provider); }
	static jni::ref<javax::crypto::ExemptionMechanism> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::security::Provider> provider) { return call_static_method<"getInstance", jni::ref<javax::crypto::ExemptionMechanism>>(algorithm, provider); }
	jni::ref<java::security::Provider> getProvider() { return call_method<"getProvider", jni::ref<java::security::Provider>>(); }
	jboolean isCryptoAllowed(jni::ref<java::security::Key> key) { return call_method<"isCryptoAllowed", jboolean>(key); }
	jint getOutputSize(jint inputLen) { return call_method<"getOutputSize", jint>(inputLen); }
	void init(jni::ref<java::security::Key> key) { return call_method<"init", void>(key); }
	void init(jni::ref<java::security::Key> key, jni::ref<java::security::spec::AlgorithmParameterSpec> params) { return call_method<"init", void>(key, params); }
	void init(jni::ref<java::security::Key> key, jni::ref<java::security::AlgorithmParameters> params) { return call_method<"init", void>(key, params); }
	jni::ref<jni::array<jbyte>> genExemptionBlob() { return call_method<"genExemptionBlob", jni::ref<jni::array<jbyte>>>(); }
	jint genExemptionBlob(jni::ref<jni::array<jbyte>> output) { return call_method<"genExemptionBlob", jint>(output); }
	jint genExemptionBlob(jni::ref<jni::array<jbyte>> output, jint outputOffset) { return call_method<"genExemptionBlob", jint>(output, outputOffset); }

protected:

	ExemptionMechanism(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_EXEMPTIONMECHANISM
