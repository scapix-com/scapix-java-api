// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMER_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::transform { class Transformer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::transform::Transformer>
{
	static constexpr fixed_string class_name = "javax/xml/transform/Transformer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMER)
#define SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/javax/xml/transform/ErrorListener.h>
#include <scapix/java_api/javax/xml/transform/Result.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/transform/URIResolver.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::transform::Transformer : public jni::object_base<"javax/xml/transform/Transformer",
	java::lang::Object>
{
public:

	void reset() { return call_method<"reset", void>(); }
	void transform(jni::ref<javax::xml::transform::Source> p1, jni::ref<javax::xml::transform::Result> p2) { return call_method<"transform", void>(p1, p2); }
	void setParameter(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setParameter", void>(p1, p2); }
	jni::ref<java::lang::Object> getParameter(jni::ref<java::lang::String> p1) { return call_method<"getParameter", jni::ref<java::lang::Object>>(p1); }
	void clearParameters() { return call_method<"clearParameters", void>(); }
	void setURIResolver(jni::ref<javax::xml::transform::URIResolver> p1) { return call_method<"setURIResolver", void>(p1); }
	jni::ref<javax::xml::transform::URIResolver> getURIResolver() { return call_method<"getURIResolver", jni::ref<javax::xml::transform::URIResolver>>(); }
	void setOutputProperties(jni::ref<java::util::Properties> p1) { return call_method<"setOutputProperties", void>(p1); }
	jni::ref<java::util::Properties> getOutputProperties() { return call_method<"getOutputProperties", jni::ref<java::util::Properties>>(); }
	void setOutputProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setOutputProperty", void>(p1, p2); }
	jni::ref<java::lang::String> getOutputProperty(jni::ref<java::lang::String> p1) { return call_method<"getOutputProperty", jni::ref<java::lang::String>>(p1); }
	void setErrorListener(jni::ref<javax::xml::transform::ErrorListener> p1) { return call_method<"setErrorListener", void>(p1); }
	jni::ref<javax::xml::transform::ErrorListener> getErrorListener() { return call_method<"getErrorListener", jni::ref<javax::xml::transform::ErrorListener>>(); }

protected:

	Transformer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMER
