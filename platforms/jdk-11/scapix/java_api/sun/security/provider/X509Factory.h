// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/security/cert/CertificateFactorySpi.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_X509FACTORY_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_X509FACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::provider { class X509Factory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::provider::X509Factory>
{
	static constexpr fixed_string class_name = "sun/security/provider/X509Factory";
	using base_classes = std::tuple<scapix::java_api::java::security::cert::CertificateFactorySpi>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_X509FACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_X509FACTORY)
#define SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_X509FACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/cert/CRL.h>
#include <scapix/java_api/java/security/cert/CertPath.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/security/cert/X509CRL.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/sun/security/x509/X509CRLImpl.h>
#include <scapix/java_api/sun/security/x509/X509CertImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::provider::X509Factory : public jni::object_base<"sun/security/provider/X509Factory",
	java::security::cert::CertificateFactorySpi>
{
public:

	static jni::ref<java::lang::String> BEGIN_CERT() { return get_static_field<"BEGIN_CERT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> END_CERT() { return get_static_field<"END_CERT", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::security::provider::X509Factory> new_object() { return base_::new_object(); }
	jni::ref<java::security::cert::Certificate> engineGenerateCertificate(jni::ref<java::io::InputStream> is) { return call_method<"engineGenerateCertificate", jni::ref<java::security::cert::Certificate>>(is); }
	static jni::ref<sun::security::x509::X509CertImpl> intern(jni::ref<java::security::cert::X509Certificate> c) { return call_static_method<"intern", jni::ref<sun::security::x509::X509CertImpl>>(c); }
	static jni::ref<sun::security::x509::X509CRLImpl> intern(jni::ref<java::security::cert::X509CRL> c) { return call_static_method<"intern", jni::ref<sun::security::x509::X509CRLImpl>>(c); }
	jni::ref<java::security::cert::CertPath> engineGenerateCertPath(jni::ref<java::io::InputStream> inStream) { return call_method<"engineGenerateCertPath", jni::ref<java::security::cert::CertPath>>(inStream); }
	jni::ref<java::security::cert::CertPath> engineGenerateCertPath(jni::ref<java::io::InputStream> inStream, jni::ref<java::lang::String> encoding) { return call_method<"engineGenerateCertPath", jni::ref<java::security::cert::CertPath>>(inStream, encoding); }
	jni::ref<java::security::cert::CertPath> engineGenerateCertPath(jni::ref<java::util::List> certificates) { return call_method<"engineGenerateCertPath", jni::ref<java::security::cert::CertPath>>(certificates); }
	jni::ref<java::util::Iterator> engineGetCertPathEncodings() { return call_method<"engineGetCertPathEncodings", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::util::Collection> engineGenerateCertificates(jni::ref<java::io::InputStream> is) { return call_method<"engineGenerateCertificates", jni::ref<java::util::Collection>>(is); }
	jni::ref<java::security::cert::CRL> engineGenerateCRL(jni::ref<java::io::InputStream> is) { return call_method<"engineGenerateCRL", jni::ref<java::security::cert::CRL>>(is); }
	jni::ref<java::util::Collection> engineGenerateCRLs(jni::ref<java::io::InputStream> is) { return call_method<"engineGenerateCRLs", jni::ref<java::util::Collection>>(is); }

protected:

	X509Factory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_X509FACTORY
