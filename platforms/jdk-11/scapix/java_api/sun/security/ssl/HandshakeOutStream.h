// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/ByteArrayOutputStream.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_SSL_HANDSHAKEOUTSTREAM_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_HANDSHAKEOUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ssl { class HandshakeOutStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ssl::HandshakeOutStream>
{
	static constexpr fixed_string class_name = "sun/security/ssl/HandshakeOutStream";
	using base_classes = std::tuple<scapix::java_api::java::io::ByteArrayOutputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_HANDSHAKEOUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_SSL_HANDSHAKEOUTSTREAM)
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_HANDSHAKEOUTSTREAM

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::ssl::HandshakeOutStream : public jni::object_base<"sun/security/ssl/HandshakeOutStream",
	java::io::ByteArrayOutputStream>
{
public:

	void write(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"write", void>(b, off, len); }
	void flush() { return call_method<"flush", void>(); }
	void putBytes16(jni::ref<jni::array<jbyte>> b) { return call_method<"putBytes16", void>(b); }

protected:

	HandshakeOutStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_HANDSHAKEOUTSTREAM
