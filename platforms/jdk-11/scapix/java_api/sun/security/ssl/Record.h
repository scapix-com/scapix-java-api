// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_SSL_RECORD_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_RECORD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ssl { class Record; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ssl::Record>
{
	static constexpr fixed_string class_name = "sun/security/ssl/Record";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_RECORD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_SSL_RECORD)
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_RECORD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::security::ssl::Record : public jni::object_base<"sun/security/ssl/Record",
	java::lang::Object>
{
public:

	static jint maxMacSize() { return get_static_field<"maxMacSize", jint>(); }
	static jint maxDataSize() { return get_static_field<"maxDataSize", jint>(); }
	static jint maxPadding() { return get_static_field<"maxPadding", jint>(); }
	static jint maxIVLength() { return get_static_field<"maxIVLength", jint>(); }
	static jint maxFragmentSize() { return get_static_field<"maxFragmentSize", jint>(); }
	static jboolean enableCBCProtection() { return get_static_field<"enableCBCProtection", jboolean>(); }
	static jint OVERFLOW_OF_INT08() { return get_static_field<"OVERFLOW_OF_INT08", jint>(); }
	static jint OVERFLOW_OF_INT16() { return get_static_field<"OVERFLOW_OF_INT16", jint>(); }
	static jint OVERFLOW_OF_INT24() { return get_static_field<"OVERFLOW_OF_INT24", jint>(); }

	static jint getInt8(jni::ref<java::nio::ByteBuffer> m) { return call_static_method<"getInt8", jint>(m); }
	static jint getInt16(jni::ref<java::nio::ByteBuffer> m) { return call_static_method<"getInt16", jint>(m); }
	static jint getInt24(jni::ref<java::nio::ByteBuffer> m) { return call_static_method<"getInt24", jint>(m); }
	static jint getInt32(jni::ref<java::nio::ByteBuffer> m) { return call_static_method<"getInt32", jint>(m); }
	static jni::ref<jni::array<jbyte>> getBytes8(jni::ref<java::nio::ByteBuffer> m) { return call_static_method<"getBytes8", jni::ref<jni::array<jbyte>>>(m); }
	static jni::ref<jni::array<jbyte>> getBytes16(jni::ref<java::nio::ByteBuffer> m) { return call_static_method<"getBytes16", jni::ref<jni::array<jbyte>>>(m); }
	static jni::ref<jni::array<jbyte>> getBytes24(jni::ref<java::nio::ByteBuffer> m) { return call_static_method<"getBytes24", jni::ref<jni::array<jbyte>>>(m); }
	static void putInt8(jni::ref<java::nio::ByteBuffer> m, jint i) { return call_static_method<"putInt8", void>(m, i); }
	static void putInt16(jni::ref<java::nio::ByteBuffer> m, jint i) { return call_static_method<"putInt16", void>(m, i); }
	static void putInt24(jni::ref<java::nio::ByteBuffer> m, jint i) { return call_static_method<"putInt24", void>(m, i); }
	static void putInt32(jni::ref<java::nio::ByteBuffer> m, jint i) { return call_static_method<"putInt32", void>(m, i); }
	static void putBytes8(jni::ref<java::nio::ByteBuffer> m, jni::ref<jni::array<jbyte>> s) { return call_static_method<"putBytes8", void>(m, s); }
	static void putBytes16(jni::ref<java::nio::ByteBuffer> m, jni::ref<jni::array<jbyte>> s) { return call_static_method<"putBytes16", void>(m, s); }
	static void putBytes24(jni::ref<java::nio::ByteBuffer> m, jni::ref<jni::array<jbyte>> s) { return call_static_method<"putBytes24", void>(m, s); }
	static void verifyLength(jni::ref<java::nio::ByteBuffer> m, jint len) { return call_static_method<"verifyLength", void>(m, len); }

protected:

	Record(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_RECORD
