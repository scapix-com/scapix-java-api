// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/security/ssl/BaseSSLSocketImpl.h>
#include <scapix/java_api/sun/security/ssl/SSLTransport.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSOCKETIMPL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSOCKETIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ssl { class SSLSocketImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ssl::SSLSocketImpl>
{
	static constexpr fixed_string class_name = "sun/security/ssl/SSLSocketImpl";
	using base_classes = std::tuple<scapix::java_api::sun::security::ssl::BaseSSLSocketImpl, scapix::java_api::sun::security::ssl::SSLTransport>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSOCKETIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSOCKETIMPL)
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSOCKETIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/javax/net/ssl/HandshakeCompletedListener.h>
#include <scapix/java_api/javax/net/ssl/SSLParameters.h>
#include <scapix/java_api/javax/net/ssl/SSLSession.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::ssl::SSLSocketImpl : public jni::object_base<"sun/security/ssl/SSLSocketImpl",
	sun::security::ssl::BaseSSLSocketImpl,
	sun::security::ssl::SSLTransport>
{
public:

	void connect(jni::ref<java::net::SocketAddress> endpoint, jint timeout) { return call_method<"connect", void>(endpoint, timeout); }
	jni::ref<jni::array<java::lang::String>> getSupportedCipherSuites() { return call_method<"getSupportedCipherSuites", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getEnabledCipherSuites() { return call_method<"getEnabledCipherSuites", jni::ref<jni::array<java::lang::String>>>(); }
	void setEnabledCipherSuites(jni::ref<jni::array<java::lang::String>> suites) { return call_method<"setEnabledCipherSuites", void>(suites); }
	jni::ref<jni::array<java::lang::String>> getSupportedProtocols() { return call_method<"getSupportedProtocols", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getEnabledProtocols() { return call_method<"getEnabledProtocols", jni::ref<jni::array<java::lang::String>>>(); }
	void setEnabledProtocols(jni::ref<jni::array<java::lang::String>> protocols) { return call_method<"setEnabledProtocols", void>(protocols); }
	jni::ref<javax::net::ssl::SSLSession> getSession() { return call_method<"getSession", jni::ref<javax::net::ssl::SSLSession>>(); }
	jni::ref<javax::net::ssl::SSLSession> getHandshakeSession() { return call_method<"getHandshakeSession", jni::ref<javax::net::ssl::SSLSession>>(); }
	void addHandshakeCompletedListener(jni::ref<javax::net::ssl::HandshakeCompletedListener> listener) { return call_method<"addHandshakeCompletedListener", void>(listener); }
	void removeHandshakeCompletedListener(jni::ref<javax::net::ssl::HandshakeCompletedListener> listener) { return call_method<"removeHandshakeCompletedListener", void>(listener); }
	void startHandshake() { return call_method<"startHandshake", void>(); }
	void setUseClientMode(jboolean mode) { return call_method<"setUseClientMode", void>(mode); }
	jboolean getUseClientMode() { return call_method<"getUseClientMode", jboolean>(); }
	void setNeedClientAuth(jboolean need) { return call_method<"setNeedClientAuth", void>(need); }
	jboolean getNeedClientAuth() { return call_method<"getNeedClientAuth", jboolean>(); }
	void setWantClientAuth(jboolean want) { return call_method<"setWantClientAuth", void>(want); }
	jboolean getWantClientAuth() { return call_method<"getWantClientAuth", jboolean>(); }
	void setEnableSessionCreation(jboolean flag) { return call_method<"setEnableSessionCreation", void>(flag); }
	jboolean getEnableSessionCreation() { return call_method<"getEnableSessionCreation", jboolean>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	void close() { return call_method<"close", void>(); }
	void shutdownInput() { return call_method<"shutdownInput", void>(); }
	jboolean isInputShutdown() { return call_method<"isInputShutdown", jboolean>(); }
	void shutdownOutput() { return call_method<"shutdownOutput", void>(); }
	jboolean isOutputShutdown() { return call_method<"isOutputShutdown", jboolean>(); }
	jni::ref<java::io::InputStream> getInputStream() { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	jni::ref<javax::net::ssl::SSLParameters> getSSLParameters() { return call_method<"getSSLParameters", jni::ref<javax::net::ssl::SSLParameters>>(); }
	void setSSLParameters(jni::ref<javax::net::ssl::SSLParameters> params) { return call_method<"setSSLParameters", void>(params); }
	jni::ref<java::lang::String> getApplicationProtocol() { return call_method<"getApplicationProtocol", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getHandshakeApplicationProtocol() { return call_method<"getHandshakeApplicationProtocol", jni::ref<java::lang::String>>(); }
	void setHandshakeApplicationProtocolSelector(jni::ref<java::util::function::BiFunction> selector) { return call_method<"setHandshakeApplicationProtocolSelector", void>(selector); }
	jni::ref<java::util::function::BiFunction> getHandshakeApplicationProtocolSelector() { return call_method<"getHandshakeApplicationProtocolSelector", jni::ref<java::util::function::BiFunction>>(); }
	void setHost(jni::ref<java::lang::String> host) { return call_method<"setHost", void>(host); }
	jni::ref<java::lang::String> getPeerHost() { return call_method<"getPeerHost", jni::ref<java::lang::String>>(); }
	jint getPeerPort() { return call_method<"getPeerPort", jint>(); }
	jboolean useDelegatedTask() { return call_method<"useDelegatedTask", jboolean>(); }
	void shutdown() { return call_method<"shutdown", void>(); }

protected:

	SSLSocketImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSOCKETIMPL
