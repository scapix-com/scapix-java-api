// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/reflect/generics/visitor/TypeTreeVisitor.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_VISITOR_REIFIER_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_VISITOR_REIFIER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect::generics::visitor { class Reifier; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::generics::visitor::Reifier>
{
	static constexpr fixed_string class_name = "sun/reflect/generics/visitor/Reifier";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::reflect::generics::visitor::TypeTreeVisitor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_VISITOR_REIFIER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_VISITOR_REIFIER)
#define SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_VISITOR_REIFIER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/reflect/Type.h>
#include <scapix/java_api/sun/reflect/generics/factory/GenericsFactory.h>
#include <scapix/java_api/sun/reflect/generics/tree/ArrayTypeSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/BooleanSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/BottomSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/ByteSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/CharSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/ClassTypeSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/DoubleSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/FloatSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/FormalTypeParameter.h>
#include <scapix/java_api/sun/reflect/generics/tree/IntSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/LongSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/ShortSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/SimpleClassTypeSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/TypeVariableSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/VoidDescriptor.h>
#include <scapix/java_api/sun/reflect/generics/tree/Wildcard.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::reflect::generics::visitor::Reifier : public jni::object_base<"sun/reflect/generics/visitor/Reifier",
	java::lang::Object,
	sun::reflect::generics::visitor::TypeTreeVisitor>
{
public:

	static jni::ref<sun::reflect::generics::visitor::Reifier> make(jni::ref<sun::reflect::generics::factory::GenericsFactory> f) { return call_static_method<"make", jni::ref<sun::reflect::generics::visitor::Reifier>>(f); }
	jni::ref<java::lang::reflect::Type> getResult() { return call_method<"getResult", jni::ref<java::lang::reflect::Type>>(); }
	void visitFormalTypeParameter(jni::ref<sun::reflect::generics::tree::FormalTypeParameter> ftp) { return call_method<"visitFormalTypeParameter", void>(ftp); }
	void visitClassTypeSignature(jni::ref<sun::reflect::generics::tree::ClassTypeSignature> ct) { return call_method<"visitClassTypeSignature", void>(ct); }
	void visitArrayTypeSignature(jni::ref<sun::reflect::generics::tree::ArrayTypeSignature> a) { return call_method<"visitArrayTypeSignature", void>(a); }
	void visitTypeVariableSignature(jni::ref<sun::reflect::generics::tree::TypeVariableSignature> tv) { return call_method<"visitTypeVariableSignature", void>(tv); }
	void visitWildcard(jni::ref<sun::reflect::generics::tree::Wildcard> w) { return call_method<"visitWildcard", void>(w); }
	void visitSimpleClassTypeSignature(jni::ref<sun::reflect::generics::tree::SimpleClassTypeSignature> sct) { return call_method<"visitSimpleClassTypeSignature", void>(sct); }
	void visitBottomSignature(jni::ref<sun::reflect::generics::tree::BottomSignature> b) { return call_method<"visitBottomSignature", void>(b); }
	void visitByteSignature(jni::ref<sun::reflect::generics::tree::ByteSignature> b) { return call_method<"visitByteSignature", void>(b); }
	void visitBooleanSignature(jni::ref<sun::reflect::generics::tree::BooleanSignature> b) { return call_method<"visitBooleanSignature", void>(b); }
	void visitShortSignature(jni::ref<sun::reflect::generics::tree::ShortSignature> s) { return call_method<"visitShortSignature", void>(s); }
	void visitCharSignature(jni::ref<sun::reflect::generics::tree::CharSignature> c) { return call_method<"visitCharSignature", void>(c); }
	void visitIntSignature(jni::ref<sun::reflect::generics::tree::IntSignature> i) { return call_method<"visitIntSignature", void>(i); }
	void visitLongSignature(jni::ref<sun::reflect::generics::tree::LongSignature> l) { return call_method<"visitLongSignature", void>(l); }
	void visitFloatSignature(jni::ref<sun::reflect::generics::tree::FloatSignature> f) { return call_method<"visitFloatSignature", void>(f); }
	void visitDoubleSignature(jni::ref<sun::reflect::generics::tree::DoubleSignature> d) { return call_method<"visitDoubleSignature", void>(d); }
	void visitVoidDescriptor(jni::ref<sun::reflect::generics::tree::VoidDescriptor> v) { return call_method<"visitVoidDescriptor", void>(v); }

protected:

	Reifier(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_VISITOR_REIFIER
