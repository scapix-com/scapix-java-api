// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_TYPEANNOTATIONTARGET_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_TYPEANNOTATIONTARGET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect::annotation { class TypeAnnotation_TypeAnnotationTarget; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>
{
	static constexpr fixed_string class_name = "sun/reflect/annotation/TypeAnnotation$TypeAnnotationTarget";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_TYPEANNOTATIONTARGET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_TYPEANNOTATIONTARGET)
#define SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_TYPEANNOTATIONTARGET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget : public jni::object_base<"sun/reflect/annotation/TypeAnnotation$TypeAnnotationTarget",
	java::lang::Enum>
{
public:

	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> CLASS_TYPE_PARAMETER() { return get_static_field<"CLASS_TYPE_PARAMETER", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> METHOD_TYPE_PARAMETER() { return get_static_field<"METHOD_TYPE_PARAMETER", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> CLASS_EXTENDS() { return get_static_field<"CLASS_EXTENDS", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> CLASS_IMPLEMENTS() { return get_static_field<"CLASS_IMPLEMENTS", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> CLASS_TYPE_PARAMETER_BOUND() { return get_static_field<"CLASS_TYPE_PARAMETER_BOUND", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> METHOD_TYPE_PARAMETER_BOUND() { return get_static_field<"METHOD_TYPE_PARAMETER_BOUND", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> FIELD() { return get_static_field<"FIELD", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> METHOD_RETURN() { return get_static_field<"METHOD_RETURN", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> METHOD_RECEIVER() { return get_static_field<"METHOD_RECEIVER", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> METHOD_FORMAL_PARAMETER() { return get_static_field<"METHOD_FORMAL_PARAMETER", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> THROWS() { return get_static_field<"THROWS", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(); }

	static jni::ref<jni::array<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>> values() { return call_static_method<"values", jni::ref<jni::array<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>>(); }
	static jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget>>(name); }

protected:

	TypeAnnotation_TypeAnnotationTarget(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_TYPEANNOTATIONTARGET
