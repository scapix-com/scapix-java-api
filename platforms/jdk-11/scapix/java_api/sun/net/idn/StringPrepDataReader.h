// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/text/normalizer/ICUBinary_Authenticate.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_IDN_STRINGPREPDATAREADER_FWD
#define SCAPIX_JAVA_API_SUN_NET_IDN_STRINGPREPDATAREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net::idn { class StringPrepDataReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::idn::StringPrepDataReader>
{
	static constexpr fixed_string class_name = "sun/net/idn/StringPrepDataReader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::text::normalizer::ICUBinary_Authenticate>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_IDN_STRINGPREPDATAREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_IDN_STRINGPREPDATAREADER)
#define SCAPIX_JAVA_API_SUN_NET_IDN_STRINGPREPDATAREADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::net::idn::StringPrepDataReader : public jni::object_base<"sun/net/idn/StringPrepDataReader",
	java::lang::Object,
	sun::text::normalizer::ICUBinary_Authenticate>
{
public:

	static jni::ref<sun::net::idn::StringPrepDataReader> new_object(jni::ref<java::io::InputStream> inputStream) { return base_::new_object(inputStream); }
	void read(jni::ref<jni::array<jbyte>> idnaBytes, jni::ref<jni::array<jchar>> mappingTable) { return call_method<"read", void>(idnaBytes, mappingTable); }
	jni::ref<jni::array<jbyte>> getDataFormatVersion() { return call_method<"getDataFormatVersion", jni::ref<jni::array<jbyte>>>(); }
	jboolean isDataVersionAcceptable(jni::ref<jni::array<jbyte>> version) { return call_method<"isDataVersionAcceptable", jboolean>(version); }
	jni::ref<jni::array<jint>> readIndexes(jint length) { return call_method<"readIndexes", jni::ref<jni::array<jint>>>(length); }
	jni::ref<jni::array<jbyte>> getUnicodeVersion() { return call_method<"getUnicodeVersion", jni::ref<jni::array<jbyte>>>(); }

protected:

	StringPrepDataReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_IDN_STRINGPREPDATAREADER
