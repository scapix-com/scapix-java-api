// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_URLCANONICALIZER_FWD
#define SCAPIX_JAVA_API_SUN_NET_URLCANONICALIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net { class URLCanonicalizer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::URLCanonicalizer>
{
	static constexpr fixed_string class_name = "sun/net/URLCanonicalizer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_URLCANONICALIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_URLCANONICALIZER)
#define SCAPIX_JAVA_API_SUN_NET_URLCANONICALIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::URLCanonicalizer : public jni::object_base<"sun/net/URLCanonicalizer",
	java::lang::Object>
{
public:

	static jni::ref<sun::net::URLCanonicalizer> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> canonicalize(jni::ref<java::lang::String> simpleURL) { return call_method<"canonicalize", jni::ref<java::lang::String>>(simpleURL); }
	jboolean hasProtocolName(jni::ref<java::lang::String> url) { return call_method<"hasProtocolName", jboolean>(url); }

protected:

	URLCanonicalizer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_URLCANONICALIZER
