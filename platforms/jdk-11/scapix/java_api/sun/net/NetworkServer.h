// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_NETWORKSERVER_FWD
#define SCAPIX_JAVA_API_SUN_NET_NETWORKSERVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net { class NetworkServer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::NetworkServer>
{
	static constexpr fixed_string class_name = "sun/net/NetworkServer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Runnable, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_NETWORKSERVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_NETWORKSERVER)
#define SCAPIX_JAVA_API_SUN_NET_NETWORKSERVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/Socket.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::NetworkServer : public jni::object_base<"sun/net/NetworkServer",
	java::lang::Object,
	java::lang::Runnable,
	java::lang::Cloneable>
{
public:

	jni::ref<java::net::Socket> clientSocket() { return get_field<"clientSocket", jni::ref<java::net::Socket>>(); }
	void clientSocket(jni::ref<java::net::Socket> v) { set_field<"clientSocket", jni::ref<java::net::Socket>>(v); }
	jni::ref<java::io::PrintStream> clientOutput() { return get_field<"clientOutput", jni::ref<java::io::PrintStream>>(); }
	void clientOutput(jni::ref<java::io::PrintStream> v) { set_field<"clientOutput", jni::ref<java::io::PrintStream>>(v); }
	jni::ref<java::io::InputStream> clientInput() { return get_field<"clientInput", jni::ref<java::io::InputStream>>(); }
	void clientInput(jni::ref<java::io::InputStream> v) { set_field<"clientInput", jni::ref<java::io::InputStream>>(v); }

	void close() { return call_method<"close", void>(); }
	jboolean clientIsOpen() { return call_method<"clientIsOpen", jboolean>(); }
	void run() { return call_method<"run", void>(); }
	void startServer(jint port) { return call_method<"startServer", void>(port); }
	void serviceRequest() { return call_method<"serviceRequest", void>(); }
	static void main(jni::ref<jni::array<java::lang::String>> argv) { return call_static_method<"main", void>(argv); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	static jni::ref<sun::net::NetworkServer> new_object() { return base_::new_object(); }

protected:

	NetworkServer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_NETWORKSERVER
