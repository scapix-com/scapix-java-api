// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_NETWORKCLIENT_FWD
#define SCAPIX_JAVA_API_SUN_NET_NETWORKCLIENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net { class NetworkClient; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::NetworkClient>
{
	static constexpr fixed_string class_name = "sun/net/NetworkClient";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_NETWORKCLIENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_NETWORKCLIENT)
#define SCAPIX_JAVA_API_SUN_NET_NETWORKCLIENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::NetworkClient : public jni::object_base<"sun/net/NetworkClient",
	java::lang::Object>
{
public:

	static jint DEFAULT_READ_TIMEOUT() { return get_static_field<"DEFAULT_READ_TIMEOUT", jint>(); }
	static jint DEFAULT_CONNECT_TIMEOUT() { return get_static_field<"DEFAULT_CONNECT_TIMEOUT", jint>(); }
	jni::ref<java::io::PrintStream> serverOutput() { return get_field<"serverOutput", jni::ref<java::io::PrintStream>>(); }
	void serverOutput(jni::ref<java::io::PrintStream> v) { set_field<"serverOutput", jni::ref<java::io::PrintStream>>(v); }
	jni::ref<java::io::InputStream> serverInput() { return get_field<"serverInput", jni::ref<java::io::InputStream>>(); }
	void serverInput(jni::ref<java::io::InputStream> v) { set_field<"serverInput", jni::ref<java::io::InputStream>>(v); }

	void openServer(jni::ref<java::lang::String> server, jint port) { return call_method<"openServer", void>(server, port); }
	void closeServer() { return call_method<"closeServer", void>(); }
	jboolean serverIsOpen() { return call_method<"serverIsOpen", jboolean>(); }
	static jni::ref<sun::net::NetworkClient> new_object(jni::ref<java::lang::String> host, jint port) { return base_::new_object(host, port); }
	static jni::ref<sun::net::NetworkClient> new_object() { return base_::new_object(); }
	void setConnectTimeout(jint timeout) { return call_method<"setConnectTimeout", void>(timeout); }
	jint getConnectTimeout() { return call_method<"getConnectTimeout", jint>(); }
	void setReadTimeout(jint timeout) { return call_method<"setReadTimeout", void>(timeout); }
	jint getReadTimeout() { return call_method<"getReadTimeout", jint>(); }

protected:

	NetworkClient(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_NETWORKCLIENT
