// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/AsynchronousFileChannel.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSFILECHANNELIMPL_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSFILECHANNELIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::ch { class AsynchronousFileChannelImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::ch::AsynchronousFileChannelImpl>
{
	static constexpr fixed_string class_name = "sun/nio/ch/AsynchronousFileChannelImpl";
	using base_classes = std::tuple<scapix::java_api::java::nio::channels::AsynchronousFileChannel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSFILECHANNELIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSFILECHANNELIMPL)
#define SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSFILECHANNELIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/channels/CompletionHandler.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::nio::ch::AsynchronousFileChannelImpl : public jni::object_base<"sun/nio/ch/AsynchronousFileChannelImpl",
	java::nio::channels::AsynchronousFileChannel>
{
public:

	jboolean isOpen() { return call_method<"isOpen", jboolean>(); }
	jni::ref<java::util::concurrent::Future> lock(jlong position, jlong p2, jboolean size) { return call_method<"lock", jni::ref<java::util::concurrent::Future>>(position, p2, size); }
	void lock(jlong position, jlong p2, jboolean size, jni::ref<java::lang::Object> p4, jni::ref<java::nio::channels::CompletionHandler> shared) { return call_method<"lock", void>(position, p2, size, p4, shared); }
	jni::ref<java::util::concurrent::Future> read(jni::ref<java::nio::ByteBuffer> dst, jlong position) { return call_method<"read", jni::ref<java::util::concurrent::Future>>(dst, position); }
	void read(jni::ref<java::nio::ByteBuffer> dst, jlong position, jni::ref<java::lang::Object> p3, jni::ref<java::nio::channels::CompletionHandler> attachment) { return call_method<"read", void>(dst, position, p3, attachment); }
	jni::ref<java::util::concurrent::Future> write(jni::ref<java::nio::ByteBuffer> src, jlong position) { return call_method<"write", jni::ref<java::util::concurrent::Future>>(src, position); }
	void write(jni::ref<java::nio::ByteBuffer> src, jlong position, jni::ref<java::lang::Object> p3, jni::ref<java::nio::channels::CompletionHandler> attachment) { return call_method<"write", void>(src, position, p3, attachment); }

protected:

	AsynchronousFileChannelImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSFILECHANNELIMPL
