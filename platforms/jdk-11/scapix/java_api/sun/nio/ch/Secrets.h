// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CH_SECRETS_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CH_SECRETS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::ch { class Secrets; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::ch::Secrets>
{
	static constexpr fixed_string class_name = "sun/nio/ch/Secrets";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_SECRETS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CH_SECRETS)
#define SCAPIX_JAVA_API_SUN_NIO_CH_SECRETS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/nio/channels/ServerSocketChannel.h>
#include <scapix/java_api/java/nio/channels/SocketChannel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::nio::ch::Secrets : public jni::object_base<"sun/nio/ch/Secrets",
	java::lang::Object>
{
public:

	static jni::ref<java::nio::channels::SocketChannel> newSocketChannel(jni::ref<java::io::FileDescriptor> fd) { return call_static_method<"newSocketChannel", jni::ref<java::nio::channels::SocketChannel>>(fd); }
	static jni::ref<java::nio::channels::ServerSocketChannel> newServerSocketChannel(jni::ref<java::io::FileDescriptor> fd) { return call_static_method<"newServerSocketChannel", jni::ref<java::nio::channels::ServerSocketChannel>>(fd); }

protected:

	Secrets(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_SECRETS
