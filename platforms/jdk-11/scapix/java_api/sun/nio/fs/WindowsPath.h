// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/file/Path.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_FS_WINDOWSPATH_FWD
#define SCAPIX_JAVA_API_SUN_NIO_FS_WINDOWSPATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::fs { class WindowsPath; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::fs::WindowsPath>
{
	static constexpr fixed_string class_name = "sun/nio/fs/WindowsPath";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::nio::file::Path>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_FS_WINDOWSPATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_FS_WINDOWSPATH)
#define SCAPIX_JAVA_API_SUN_NIO_FS_WINDOWSPATH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/nio/file/LinkOption.h>
#include <scapix/java_api/java/nio/file/WatchEvent_Kind.h>
#include <scapix/java_api/java/nio/file/WatchEvent_Modifier.h>
#include <scapix/java_api/java/nio/file/WatchKey.h>
#include <scapix/java_api/java/nio/file/WatchService.h>
#include <scapix/java_api/sun/nio/fs/WindowsFileSystem.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::nio::fs::WindowsPath : public jni::object_base<"sun/nio/fs/WindowsPath",
	java::lang::Object,
	java::nio::file::Path>
{
public:

	jni::ref<sun::nio::fs::WindowsFileSystem> getFileSystem() { return call_method<"getFileSystem", jni::ref<sun::nio::fs::WindowsFileSystem>>(); }
	jni::ref<java::nio::file::Path> getFileName() { return call_method<"getFileName", jni::ref<java::nio::file::Path>>(); }
	jni::ref<sun::nio::fs::WindowsPath> getParent() { return call_method<"getParent", jni::ref<sun::nio::fs::WindowsPath>>(); }
	jni::ref<sun::nio::fs::WindowsPath> getRoot() { return call_method<"getRoot", jni::ref<sun::nio::fs::WindowsPath>>(); }
	jboolean isAbsolute() { return call_method<"isAbsolute", jboolean>(); }
	jni::ref<sun::nio::fs::WindowsPath> relativize(jni::ref<java::nio::file::Path> obj) { return call_method<"relativize", jni::ref<sun::nio::fs::WindowsPath>>(obj); }
	jni::ref<sun::nio::fs::WindowsPath> normalize() { return call_method<"normalize", jni::ref<sun::nio::fs::WindowsPath>>(); }
	jni::ref<sun::nio::fs::WindowsPath> resolve(jni::ref<java::nio::file::Path> obj) { return call_method<"resolve", jni::ref<sun::nio::fs::WindowsPath>>(obj); }
	jint getNameCount() { return call_method<"getNameCount", jint>(); }
	jni::ref<sun::nio::fs::WindowsPath> getName(jint index) { return call_method<"getName", jni::ref<sun::nio::fs::WindowsPath>>(index); }
	jni::ref<sun::nio::fs::WindowsPath> subpath(jint beginIndex, jint endIndex) { return call_method<"subpath", jni::ref<sun::nio::fs::WindowsPath>>(beginIndex, endIndex); }
	jboolean startsWith(jni::ref<java::nio::file::Path> obj) { return call_method<"startsWith", jboolean>(obj); }
	jboolean endsWith(jni::ref<java::nio::file::Path> obj) { return call_method<"endsWith", jboolean>(obj); }
	jint compareTo(jni::ref<java::nio::file::Path> obj) { return call_method<"compareTo", jint>(obj); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::net::URI> toUri() { return call_method<"toUri", jni::ref<java::net::URI>>(); }
	jni::ref<sun::nio::fs::WindowsPath> toAbsolutePath() { return call_method<"toAbsolutePath", jni::ref<sun::nio::fs::WindowsPath>>(); }
	jni::ref<sun::nio::fs::WindowsPath> toRealPath(jni::ref<jni::array<java::nio::file::LinkOption>> options) { return call_method<"toRealPath", jni::ref<sun::nio::fs::WindowsPath>>(options); }
	jni::ref<java::nio::file::WatchKey> register_(jni::ref<java::nio::file::WatchService> watcher, jni::ref<jni::array<java::nio::file::WatchEvent_Kind>> events, jni::ref<jni::array<java::nio::file::WatchEvent_Modifier>> modifiers) { return call_method<"register", jni::ref<java::nio::file::WatchKey>>(watcher, events, modifiers); }

protected:

	WindowsPath(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_FS_WINDOWSPATH
