// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_FWD
#define SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::util::logging { class PlatformLogger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::util::logging::PlatformLogger>
{
	static constexpr fixed_string class_name = "sun/util/logging/PlatformLogger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER)
#define SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/System_Logger_Level.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/sun/util/logging/PlatformLogger_Level.h>
#include <scapix/java_api/sun/util/logging/PlatformLogger_ConfigurableBridge.h>
#include <scapix/java_api/sun/util/logging/PlatformLogger_Bridge.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::util::logging::PlatformLogger : public jni::object_base<"sun/util/logging/PlatformLogger",
	java::lang::Object>
{
public:

	using ConfigurableBridge = PlatformLogger_ConfigurableBridge;
	using Bridge = PlatformLogger_Bridge;
	using Level = PlatformLogger_Level;

	static jni::ref<sun::util::logging::PlatformLogger> getLogger(jni::ref<java::lang::String> name) { return call_static_method<"getLogger", jni::ref<sun::util::logging::PlatformLogger>>(name); }
	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jboolean isLoggable(jni::ref<sun::util::logging::PlatformLogger_Level> level) { return call_method<"isLoggable", jboolean>(level); }
	jni::ref<sun::util::logging::PlatformLogger_Level> level() { return call_method<"level", jni::ref<sun::util::logging::PlatformLogger_Level>>(); }
	void setLevel(jni::ref<sun::util::logging::PlatformLogger_Level> newLevel) { return call_method<"setLevel", void>(newLevel); }
	void severe(jni::ref<java::lang::String> msg) { return call_method<"severe", void>(msg); }
	void severe(jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> t) { return call_method<"severe", void>(msg, t); }
	void severe(jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"severe", void>(msg, params); }
	void warning(jni::ref<java::lang::String> msg) { return call_method<"warning", void>(msg); }
	void warning(jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> t) { return call_method<"warning", void>(msg, t); }
	void warning(jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"warning", void>(msg, params); }
	void info(jni::ref<java::lang::String> msg) { return call_method<"info", void>(msg); }
	void info(jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> t) { return call_method<"info", void>(msg, t); }
	void info(jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"info", void>(msg, params); }
	void config(jni::ref<java::lang::String> msg) { return call_method<"config", void>(msg); }
	void config(jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> t) { return call_method<"config", void>(msg, t); }
	void config(jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"config", void>(msg, params); }
	void fine(jni::ref<java::lang::String> msg) { return call_method<"fine", void>(msg); }
	void fine(jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> t) { return call_method<"fine", void>(msg, t); }
	void fine(jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"fine", void>(msg, params); }
	void finer(jni::ref<java::lang::String> msg) { return call_method<"finer", void>(msg); }
	void finer(jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> t) { return call_method<"finer", void>(msg, t); }
	void finer(jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"finer", void>(msg, params); }
	void finest(jni::ref<java::lang::String> msg) { return call_method<"finest", void>(msg); }
	void finest(jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> t) { return call_method<"finest", void>(msg, t); }
	void finest(jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"finest", void>(msg, params); }
	static jni::ref<sun::util::logging::PlatformLogger_Level> toPlatformLevel(jni::ref<java::lang::System_Logger_Level> level) { return call_static_method<"toPlatformLevel", jni::ref<sun::util::logging::PlatformLogger_Level>>(level); }

protected:

	PlatformLogger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER
