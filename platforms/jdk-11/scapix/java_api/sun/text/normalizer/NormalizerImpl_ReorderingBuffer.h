// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Appendable.h>

#ifndef SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_NORMALIZERIMPL_REORDERINGBUFFER_FWD
#define SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_NORMALIZERIMPL_REORDERINGBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::text::normalizer { class NormalizerImpl_ReorderingBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::text::normalizer::NormalizerImpl_ReorderingBuffer>
{
	static constexpr fixed_string class_name = "sun/text/normalizer/NormalizerImpl$ReorderingBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Appendable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_NORMALIZERIMPL_REORDERINGBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_NORMALIZERIMPL_REORDERINGBUFFER)
#define SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_NORMALIZERIMPL_REORDERINGBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/sun/text/normalizer/NormalizerImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::text::normalizer::NormalizerImpl_ReorderingBuffer : public jni::object_base<"sun/text/normalizer/NormalizerImpl$ReorderingBuffer",
	java::lang::Object,
	java::lang::Appendable>
{
public:

	static jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer> new_object(jni::ref<sun::text::normalizer::NormalizerImpl> ni, jni::ref<java::lang::Appendable> dest, jint destCapacity) { return base_::new_object(ni, dest, destCapacity); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jint length() { return call_method<"length", jint>(); }
	jint getLastCC() { return call_method<"getLastCC", jint>(); }
	jni::ref<java::lang::StringBuilder> getStringBuilder() { return call_method<"getStringBuilder", jni::ref<java::lang::StringBuilder>>(); }
	jboolean equals(jni::ref<java::lang::CharSequence> s, jint start, jint limit) { return call_method<"equals", jboolean>(s, start, limit); }
	void append(jint c, jint cc) { return call_method<"append", void>(c, cc); }
	void append(jni::ref<java::lang::CharSequence> s, jint start, jint limit, jint leadCC, jint trailCC) { return call_method<"append", void>(s, start, limit, leadCC, trailCC); }
	jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer> append(jchar c) { return call_method<"append", jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer>>(c); }
	void appendZeroCC(jint c) { return call_method<"appendZeroCC", void>(c); }
	jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer> append(jni::ref<java::lang::CharSequence> s) { return call_method<"append", jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer>>(s); }
	jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer> append(jni::ref<java::lang::CharSequence> s, jint start, jint limit) { return call_method<"append", jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer>>(s, start, limit); }
	void flush() { return call_method<"flush", void>(); }
	jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer> flushAndAppendZeroCC(jni::ref<java::lang::CharSequence> s, jint start, jint limit) { return call_method<"flushAndAppendZeroCC", jni::ref<sun::text::normalizer::NormalizerImpl_ReorderingBuffer>>(s, start, limit); }
	void remove() { return call_method<"remove", void>(); }
	void removeSuffix(jint suffixLength) { return call_method<"removeSuffix", void>(suffixLength); }

protected:

	NormalizerImpl_ReorderingBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_NORMALIZERIMPL_REORDERINGBUFFER
