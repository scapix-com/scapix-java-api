// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/text/normalizer/Trie2.h>

#ifndef SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_TRIE2_16_FWD
#define SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_TRIE2_16_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::text::normalizer { class Trie2_16; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::text::normalizer::Trie2_16>
{
	static constexpr fixed_string class_name = "sun/text/normalizer/Trie2_16";
	using base_classes = std::tuple<scapix::java_api::sun::text::normalizer::Trie2>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_TRIE2_16_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_TRIE2_16)
#define SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_TRIE2_16

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::text::normalizer::Trie2_16 : public jni::object_base<"sun/text/normalizer/Trie2_16",
	sun::text::normalizer::Trie2>
{
public:

	static jni::ref<sun::text::normalizer::Trie2_16> createFromSerialized(jni::ref<java::nio::ByteBuffer> bytes) { return call_static_method<"createFromSerialized", jni::ref<sun::text::normalizer::Trie2_16>>(bytes); }
	jint get(jint codePoint) { return call_method<"get", jint>(codePoint); }
	jint getFromU16SingleLead(jchar codeUnit) { return call_method<"getFromU16SingleLead", jint>(codeUnit); }
	jint getSerializedLength() { return call_method<"getSerializedLength", jint>(); }

protected:

	Trie2_16(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_TRIE2_16
