// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_VERSIONINFO_FWD
#define SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_VERSIONINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::text::normalizer { class VersionInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::text::normalizer::VersionInfo>
{
	static constexpr fixed_string class_name = "sun/text/normalizer/VersionInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_VERSIONINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_VERSIONINFO)
#define SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_VERSIONINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::text::normalizer::VersionInfo : public jni::object_base<"sun/text/normalizer/VersionInfo",
	java::lang::Object>
{
public:

	static jni::ref<sun::text::normalizer::VersionInfo> getInstance(jni::ref<java::lang::String> version) { return call_static_method<"getInstance", jni::ref<sun::text::normalizer::VersionInfo>>(version); }
	static jni::ref<sun::text::normalizer::VersionInfo> getInstance(jint major, jint minor, jint milli, jint micro) { return call_static_method<"getInstance", jni::ref<sun::text::normalizer::VersionInfo>>(major, minor, milli, micro); }
	jint compareTo(jni::ref<sun::text::normalizer::VersionInfo> other) { return call_method<"compareTo", jint>(other); }

protected:

	VersionInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_VERSIONINFO
