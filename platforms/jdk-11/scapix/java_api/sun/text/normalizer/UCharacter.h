// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_UCHARACTER_FWD
#define SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_UCHARACTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::text::normalizer { class UCharacter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::text::normalizer::UCharacter>
{
	static constexpr fixed_string class_name = "sun/text/normalizer/UCharacter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_UCHARACTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_UCHARACTER)
#define SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_UCHARACTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/text/normalizer/VersionInfo.h>
#include <scapix/java_api/sun/text/normalizer/UCharacter_HangulSyllableType.h>
#include <scapix/java_api/sun/text/normalizer/UCharacter_NumericType.h>
#include <scapix/java_api/sun/text/normalizer/UCharacter_JoiningGroup.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::text::normalizer::UCharacter : public jni::object_base<"sun/text/normalizer/UCharacter",
	java::lang::Object>
{
public:

	using HangulSyllableType = UCharacter_HangulSyllableType;
	using NumericType = UCharacter_NumericType;
	using JoiningGroup = UCharacter_JoiningGroup;

	static jint MIN_VALUE() { return get_static_field<"MIN_VALUE", jint>(); }
	static jint MAX_VALUE() { return get_static_field<"MAX_VALUE", jint>(); }
	static jbyte NON_SPACING_MARK() { return get_static_field<"NON_SPACING_MARK", jbyte>(); }
	static jbyte ENCLOSING_MARK() { return get_static_field<"ENCLOSING_MARK", jbyte>(); }
	static jbyte COMBINING_SPACING_MARK() { return get_static_field<"COMBINING_SPACING_MARK", jbyte>(); }
	static jbyte CHAR_CATEGORY_COUNT() { return get_static_field<"CHAR_CATEGORY_COUNT", jbyte>(); }
	static jint RIGHT_TO_LEFT() { return get_static_field<"RIGHT_TO_LEFT", jint>(); }
	static jint RIGHT_TO_LEFT_ARABIC() { return get_static_field<"RIGHT_TO_LEFT_ARABIC", jint>(); }

	static jint digit(jint ch, jint radix) { return call_static_method<"digit", jint>(ch, radix); }
	static jint digit(jint ch) { return call_static_method<"digit", jint>(ch); }
	static jint getType(jint ch) { return call_static_method<"getType", jint>(ch); }
	static jint getDirection(jint ch) { return call_static_method<"getDirection", jint>(ch); }
	static jint getMirror(jint ch) { return call_static_method<"getMirror", jint>(ch); }
	static jint getBidiPairedBracket(jint c) { return call_static_method<"getBidiPairedBracket", jint>(c); }
	static jint getCombiningClass(jint ch) { return call_static_method<"getCombiningClass", jint>(ch); }
	static jni::ref<sun::text::normalizer::VersionInfo> getUnicodeVersion() { return call_static_method<"getUnicodeVersion", jni::ref<sun::text::normalizer::VersionInfo>>(); }
	static jint getCodePoint(jchar lead, jchar trail) { return call_static_method<"getCodePoint", jint>(lead, trail); }
	static jni::ref<sun::text::normalizer::VersionInfo> getAge(jint ch) { return call_static_method<"getAge", jni::ref<sun::text::normalizer::VersionInfo>>(ch); }
	static jint getIntPropertyValue(jint ch, jint type) { return call_static_method<"getIntPropertyValue", jint>(ch, type); }

protected:

	UCharacter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_NORMALIZER_UCHARACTER
