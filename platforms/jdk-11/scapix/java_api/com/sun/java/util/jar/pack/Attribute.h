// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ATTRIBUTE_FWD
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ATTRIBUTE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::java::util::jar::pack { class Attribute; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::java::util::jar::pack::Attribute>
{
	static constexpr fixed_string class_name = "com/sun/java/util/jar/pack/Attribute";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ATTRIBUTE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ATTRIBUTE)
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ATTRIBUTE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/java/util/jar/pack/Attribute_Holder.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Attribute_Layout.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Attribute_ValueStream.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/ConstantPool_Entry.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/ConstantPool_Index.h>
#include <scapix/java_api/java/io/ByteArrayOutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Attribute_FormatException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::java::util::jar::pack::Attribute : public jni::object_base<"com/sun/java/util/jar/pack/Attribute",
	java::lang::Object,
	java::lang::Comparable>
{
public:

	using FormatException = Attribute_FormatException;
	using Layout = Attribute_Layout;
	using ValueStream = Attribute_ValueStream;
	using Holder = Attribute_Holder;

	jni::ref<java::lang::String> name() { return call_method<"name", jni::ref<java::lang::String>>(); }
	jni::ref<com::sun::java::util::jar::pack::Attribute_Layout> layout() { return call_method<"layout", jni::ref<com::sun::java::util::jar::pack::Attribute_Layout>>(); }
	jni::ref<jni::array<jbyte>> bytes() { return call_method<"bytes", jni::ref<jni::array<jbyte>>>(); }
	jint size() { return call_method<"size", jint>(); }
	jni::ref<com::sun::java::util::jar::pack::ConstantPool_Entry> getNameRef() { return call_method<"getNameRef", jni::ref<com::sun::java::util::jar::pack::ConstantPool_Entry>>(); }
	static jni::ref<com::sun::java::util::jar::pack::Attribute> new_object(jni::ref<com::sun::java::util::jar::pack::Attribute_Layout> def, jni::ref<jni::array<jbyte>> bytes, jni::ref<java::lang::Object> fixups) { return base_::new_object(def, bytes, fixups); }
	static jni::ref<com::sun::java::util::jar::pack::Attribute> new_object(jni::ref<com::sun::java::util::jar::pack::Attribute_Layout> def, jni::ref<jni::array<jbyte>> bytes) { return base_::new_object(def, bytes); }
	jni::ref<com::sun::java::util::jar::pack::Attribute> addContent(jni::ref<jni::array<jbyte>> bytes, jni::ref<java::lang::Object> fixups) { return call_method<"addContent", jni::ref<com::sun::java::util::jar::pack::Attribute>>(bytes, fixups); }
	jni::ref<com::sun::java::util::jar::pack::Attribute> addContent(jni::ref<jni::array<jbyte>> bytes) { return call_method<"addContent", jni::ref<com::sun::java::util::jar::pack::Attribute>>(bytes); }
	void finishRefs(jni::ref<com::sun::java::util::jar::pack::ConstantPool_Index> ix) { return call_method<"finishRefs", void>(ix); }
	jboolean isCanonical() { return call_method<"isCanonical", jboolean>(); }
	jint compareTo(jni::ref<com::sun::java::util::jar::pack::Attribute> that) { return call_method<"compareTo", jint>(that); }
	static jni::ref<java::util::List> getCanonList(jni::ref<java::util::List> al) { return call_static_method<"getCanonList", jni::ref<java::util::List>>(al); }
	static jni::ref<com::sun::java::util::jar::pack::Attribute> find(jint ctype, jni::ref<java::lang::String> name, jni::ref<java::lang::String> layout) { return call_static_method<"find", jni::ref<com::sun::java::util::jar::pack::Attribute>>(ctype, name, layout); }
	static jni::ref<com::sun::java::util::jar::pack::Attribute_Layout> keyForLookup(jint ctype, jni::ref<java::lang::String> name) { return call_static_method<"keyForLookup", jni::ref<com::sun::java::util::jar::pack::Attribute_Layout>>(ctype, name); }
	static jni::ref<com::sun::java::util::jar::pack::Attribute> lookup(jni::ref<java::util::Map> defs, jint ctype, jni::ref<java::lang::String> name) { return call_static_method<"lookup", jni::ref<com::sun::java::util::jar::pack::Attribute>>(defs, ctype, name); }
	static jni::ref<com::sun::java::util::jar::pack::Attribute> define(jni::ref<java::util::Map> defs, jint ctype, jni::ref<java::lang::String> name, jni::ref<java::lang::String> layout) { return call_static_method<"define", jni::ref<com::sun::java::util::jar::pack::Attribute>>(defs, ctype, name, layout); }
	static jni::ref<java::lang::String> contextName(jint ctype) { return call_static_method<"contextName", jni::ref<java::lang::String>>(ctype); }
	void parse(jni::ref<com::sun::java::util::jar::pack::Attribute_Holder> holder, jni::ref<jni::array<jbyte>> bytes, jint pos, jint len, jni::ref<com::sun::java::util::jar::pack::Attribute_ValueStream> out) { return call_method<"parse", void>(holder, bytes, pos, len, out); }
	jni::ref<java::lang::Object> unparse(jni::ref<com::sun::java::util::jar::pack::Attribute_ValueStream> in, jni::ref<java::io::ByteArrayOutputStream> out) { return call_method<"unparse", jni::ref<java::lang::Object>>(in, out); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> normalizeLayoutString(jni::ref<java::lang::String> layout) { return call_static_method<"normalizeLayoutString", jni::ref<java::lang::String>>(layout); }

protected:

	Attribute(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ATTRIBUTE
