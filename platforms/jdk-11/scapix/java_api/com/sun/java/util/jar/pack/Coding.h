// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/CodingMethod.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Histogram_BitMetric.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_CODING_FWD
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_CODING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::java::util::jar::pack { class Coding; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::java::util::jar::pack::Coding>
{
	static constexpr fixed_string class_name = "com/sun/java/util/jar/pack/Coding";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable, scapix::java_api::com::sun::java::util::jar::pack::CodingMethod, scapix::java_api::com::sun::java::util::jar::pack::Histogram_BitMetric>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_CODING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_CODING)
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_CODING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::java::util::jar::pack::Coding : public jni::object_base<"com/sun/java/util/jar/pack/Coding",
	java::lang::Object,
	java::lang::Comparable,
	com::sun::java::util::jar::pack::CodingMethod,
	com::sun::java::util::jar::pack::Histogram_BitMetric>
{
public:

	static jint B_MAX() { return get_static_field<"B_MAX", jint>(); }
	static jint H_MAX() { return get_static_field<"H_MAX", jint>(); }
	static jint S_MAX() { return get_static_field<"S_MAX", jint>(); }

	static jint codeMax(jint B, jint H, jint S, jint nMax) { return call_static_method<"codeMax", jint>(B, H, S, nMax); }
	static jint codeMin(jint B, jint H, jint S, jint nMax) { return call_static_method<"codeMin", jint>(B, H, S, nMax); }
	static void writeInt(jni::ref<jni::array<jbyte>> out, jni::ref<jni::array<jint>> outpos, jint sx, jint B, jint H, jint S) { return call_static_method<"writeInt", void>(out, outpos, sx, B, H, S); }
	static jint readInt(jni::ref<jni::array<jbyte>> in, jni::ref<jni::array<jint>> inpos, jint B, jint H, jint S) { return call_static_method<"readInt", jint>(in, inpos, B, H, S); }
	static jint readIntFrom(jni::ref<java::io::InputStream> in, jint B, jint H, jint S) { return call_static_method<"readIntFrom", jint>(in, B, H, S); }
	jboolean equals(jni::ref<java::lang::Object> x) { return call_method<"equals", jboolean>(x); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	static jni::ref<com::sun::java::util::jar::pack::Coding> of(jint B, jint H) { return call_static_method<"of", jni::ref<com::sun::java::util::jar::pack::Coding>>(B, H); }
	static jni::ref<com::sun::java::util::jar::pack::Coding> of(jint B, jint H, jint S) { return call_static_method<"of", jni::ref<com::sun::java::util::jar::pack::Coding>>(B, H, S); }
	jboolean canRepresentValue(jint x) { return call_method<"canRepresentValue", jboolean>(x); }
	jboolean canRepresentSigned(jint x) { return call_method<"canRepresentSigned", jboolean>(x); }
	jboolean canRepresentUnsigned(jint x) { return call_method<"canRepresentUnsigned", jboolean>(x); }
	jint readFrom(jni::ref<jni::array<jbyte>> in, jni::ref<jni::array<jint>> inpos) { return call_method<"readFrom", jint>(in, inpos); }
	void writeTo(jni::ref<jni::array<jbyte>> out, jni::ref<jni::array<jint>> outpos, jint x) { return call_method<"writeTo", void>(out, outpos, x); }
	jint readFrom(jni::ref<java::io::InputStream> in) { return call_method<"readFrom", jint>(in); }
	void writeTo(jni::ref<java::io::OutputStream> out, jint x) { return call_method<"writeTo", void>(out, x); }
	void readArrayFrom(jni::ref<java::io::InputStream> in, jni::ref<jni::array<jint>> a, jint start, jint end) { return call_method<"readArrayFrom", void>(in, a, start, end); }
	void writeArrayTo(jni::ref<java::io::OutputStream> out, jni::ref<jni::array<jint>> a, jint start, jint end) { return call_method<"writeArrayTo", void>(out, a, start, end); }
	jint B() { return call_method<"B", jint>(); }
	jint H() { return call_method<"H", jint>(); }
	jint L() { return call_method<"L", jint>(); }
	jint S() { return call_method<"S", jint>(); }
	jint del() { return call_method<"del", jint>(); }
	jint min() { return call_method<"min", jint>(); }
	jint max() { return call_method<"max", jint>(); }
	jint umin() { return call_method<"umin", jint>(); }
	jint umax() { return call_method<"umax", jint>(); }
	jint byteMin(jint b) { return call_method<"byteMin", jint>(b); }
	jint byteMax(jint b) { return call_method<"byteMax", jint>(b); }
	jint compareTo(jni::ref<com::sun::java::util::jar::pack::Coding> that) { return call_method<"compareTo", jint>(that); }
	jint distanceFrom(jni::ref<com::sun::java::util::jar::pack::Coding> that) { return call_method<"distanceFrom", jint>(that); }
	jdouble getBitLength(jint value) { return call_method<"getBitLength", jdouble>(value); }
	jint getLength(jint value) { return call_method<"getLength", jint>(value); }
	jint getLength(jni::ref<jni::array<jint>> values, jint start, jint end) { return call_method<"getLength", jint>(values, start, end); }
	jni::ref<jni::array<jbyte>> getMetaCoding(jni::ref<com::sun::java::util::jar::pack::Coding> dflt) { return call_method<"getMetaCoding", jni::ref<jni::array<jbyte>>>(dflt); }
	static jint parseMetaCoding(jni::ref<jni::array<jbyte>> bytes, jint pos, jni::ref<com::sun::java::util::jar::pack::Coding> dflt, jni::ref<jni::array<com::sun::java::util::jar::pack::CodingMethod>> res) { return call_static_method<"parseMetaCoding", jint>(bytes, pos, dflt, res); }
	jni::ref<java::lang::String> keyString() { return call_method<"keyString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Coding(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_CODING
