// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/CodingMethod.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_POPULATIONCODING_FWD
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_POPULATIONCODING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::java::util::jar::pack { class PopulationCoding; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::java::util::jar::pack::PopulationCoding>
{
	static constexpr fixed_string class_name = "com/sun/java/util/jar/pack/PopulationCoding";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::java::util::jar::pack::CodingMethod>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_POPULATIONCODING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_POPULATIONCODING)
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_POPULATIONCODING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/java/util/jar/pack/Coding.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Histogram.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::java::util::jar::pack::PopulationCoding : public jni::object_base<"com/sun/java/util/jar/pack/PopulationCoding",
	java::lang::Object,
	com::sun::java::util::jar::pack::CodingMethod>
{
public:

	void setFavoredValues(jni::ref<jni::array<jint>> fValues, jint fVlen) { return call_method<"setFavoredValues", void>(fValues, fVlen); }
	void setFavoredValues(jni::ref<jni::array<jint>> fValues) { return call_method<"setFavoredValues", void>(fValues); }
	void setHistogram(jni::ref<com::sun::java::util::jar::pack::Histogram> vHist) { return call_method<"setHistogram", void>(vHist); }
	void setL(jint L) { return call_method<"setL", void>(L); }
	static jni::ref<com::sun::java::util::jar::pack::Coding> fitTokenCoding(jint fVlen, jint L) { return call_static_method<"fitTokenCoding", jni::ref<com::sun::java::util::jar::pack::Coding>>(fVlen, L); }
	void setFavoredCoding(jni::ref<com::sun::java::util::jar::pack::CodingMethod> favoredCoding) { return call_method<"setFavoredCoding", void>(favoredCoding); }
	void setTokenCoding(jni::ref<com::sun::java::util::jar::pack::CodingMethod> tokenCoding) { return call_method<"setTokenCoding", void>(tokenCoding); }
	void setUnfavoredCoding(jni::ref<com::sun::java::util::jar::pack::CodingMethod> unfavoredCoding) { return call_method<"setUnfavoredCoding", void>(unfavoredCoding); }
	jint favoredValueMaxLength() { return call_method<"favoredValueMaxLength", jint>(); }
	void resortFavoredValues() { return call_method<"resortFavoredValues", void>(); }
	jint getToken(jint value) { return call_method<"getToken", jint>(value); }
	jni::ref<jni::array<jni::array<jint>>> encodeValues(jni::ref<jni::array<jint>> values, jint start, jint end) { return call_method<"encodeValues", jni::ref<jni::array<jni::array<jint>>>>(values, start, end); }
	void writeArrayTo(jni::ref<java::io::OutputStream> out, jni::ref<jni::array<jint>> a, jint start, jint end) { return call_method<"writeArrayTo", void>(out, a, start, end); }
	void readArrayFrom(jni::ref<java::io::InputStream> in, jni::ref<jni::array<jint>> a, jint start, jint end) { return call_method<"readArrayFrom", void>(in, a, start, end); }
	jni::ref<jni::array<jbyte>> getMetaCoding(jni::ref<com::sun::java::util::jar::pack::Coding> dflt) { return call_method<"getMetaCoding", jni::ref<jni::array<jbyte>>>(dflt); }
	static jint parseMetaCoding(jni::ref<jni::array<jbyte>> bytes, jint pos, jni::ref<com::sun::java::util::jar::pack::Coding> dflt, jni::ref<jni::array<com::sun::java::util::jar::pack::CodingMethod>> res) { return call_static_method<"parseMetaCoding", jint>(bytes, pos, dflt, res); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	PopulationCoding(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_POPULATIONCODING
