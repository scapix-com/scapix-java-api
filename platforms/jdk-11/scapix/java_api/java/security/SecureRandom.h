// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Random.h>

#ifndef SCAPIX_JAVA_API_JAVA_SECURITY_SECURERANDOM_FWD
#define SCAPIX_JAVA_API_JAVA_SECURITY_SECURERANDOM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::security { class SecureRandom; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::security::SecureRandom>
{
	static constexpr fixed_string class_name = "java/security/SecureRandom";
	using base_classes = std::tuple<scapix::java_api::java::util::Random>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_SECURERANDOM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SECURITY_SECURERANDOM)
#define SCAPIX_JAVA_API_JAVA_SECURITY_SECURERANDOM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/SecureRandomParameters.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::security::SecureRandom : public jni::object_base<"java/security/SecureRandom",
	java::util::Random>
{
public:

	static jni::ref<java::security::SecureRandom> new_object() { return base_::new_object(); }
	static jni::ref<java::security::SecureRandom> new_object(jni::ref<jni::array<jbyte>> seed) { return base_::new_object(seed); }
	static jni::ref<java::security::SecureRandom> getInstance(jni::ref<java::lang::String> algorithm) { return call_static_method<"getInstance", jni::ref<java::security::SecureRandom>>(algorithm); }
	static jni::ref<java::security::SecureRandom> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::lang::String> provider) { return call_static_method<"getInstance", jni::ref<java::security::SecureRandom>>(algorithm, provider); }
	static jni::ref<java::security::SecureRandom> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::security::Provider> provider) { return call_static_method<"getInstance", jni::ref<java::security::SecureRandom>>(algorithm, provider); }
	static jni::ref<java::security::SecureRandom> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::security::SecureRandomParameters> params) { return call_static_method<"getInstance", jni::ref<java::security::SecureRandom>>(algorithm, params); }
	static jni::ref<java::security::SecureRandom> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::security::SecureRandomParameters> params, jni::ref<java::lang::String> provider) { return call_static_method<"getInstance", jni::ref<java::security::SecureRandom>>(algorithm, params, provider); }
	static jni::ref<java::security::SecureRandom> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::security::SecureRandomParameters> params, jni::ref<java::security::Provider> provider) { return call_static_method<"getInstance", jni::ref<java::security::SecureRandom>>(algorithm, params, provider); }
	jni::ref<java::security::Provider> getProvider() { return call_method<"getProvider", jni::ref<java::security::Provider>>(); }
	jni::ref<java::lang::String> getAlgorithm() { return call_method<"getAlgorithm", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::security::SecureRandomParameters> getParameters() { return call_method<"getParameters", jni::ref<java::security::SecureRandomParameters>>(); }
	void setSeed(jni::ref<jni::array<jbyte>> seed) { return call_method<"setSeed", void>(seed); }
	void setSeed(jlong seed) { return call_method<"setSeed", void>(seed); }
	void nextBytes(jni::ref<jni::array<jbyte>> bytes) { return call_method<"nextBytes", void>(bytes); }
	void nextBytes(jni::ref<jni::array<jbyte>> bytes, jni::ref<java::security::SecureRandomParameters> params) { return call_method<"nextBytes", void>(bytes, params); }
	static jni::ref<jni::array<jbyte>> getSeed(jint numBytes) { return call_static_method<"getSeed", jni::ref<jni::array<jbyte>>>(numBytes); }
	jni::ref<jni::array<jbyte>> generateSeed(jint numBytes) { return call_method<"generateSeed", jni::ref<jni::array<jbyte>>>(numBytes); }
	static jni::ref<java::security::SecureRandom> getInstanceStrong() { return call_static_method<"getInstanceStrong", jni::ref<java::security::SecureRandom>>(); }
	void reseed() { return call_method<"reseed", void>(); }
	void reseed(jni::ref<java::security::SecureRandomParameters> params) { return call_method<"reseed", void>(params); }

protected:

	SecureRandom(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_SECURERANDOM
