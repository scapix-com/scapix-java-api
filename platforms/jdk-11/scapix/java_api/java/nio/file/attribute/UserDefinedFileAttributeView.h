// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttributeView.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_FILE_ATTRIBUTE_USERDEFINEDFILEATTRIBUTEVIEW_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_FILE_ATTRIBUTE_USERDEFINEDFILEATTRIBUTEVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::file::attribute { class UserDefinedFileAttributeView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::file::attribute::UserDefinedFileAttributeView>
{
	static constexpr fixed_string class_name = "java/nio/file/attribute/UserDefinedFileAttributeView";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::nio::file::attribute::FileAttributeView>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FILE_ATTRIBUTE_USERDEFINEDFILEATTRIBUTEVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_FILE_ATTRIBUTE_USERDEFINEDFILEATTRIBUTEVIEW)
#define SCAPIX_JAVA_API_JAVA_NIO_FILE_ATTRIBUTE_USERDEFINEDFILEATTRIBUTEVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::file::attribute::UserDefinedFileAttributeView : public jni::object_base<"java/nio/file/attribute/UserDefinedFileAttributeView",
	java::lang::Object,
	java::nio::file::attribute::FileAttributeView>
{
public:

	jni::ref<java::lang::String> name() { return call_method<"name", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::List> list() { return call_method<"list", jni::ref<java::util::List>>(); }
	jint size(jni::ref<java::lang::String> p1) { return call_method<"size", jint>(p1); }
	jint read(jni::ref<java::lang::String> p1, jni::ref<java::nio::ByteBuffer> p2) { return call_method<"read", jint>(p1, p2); }
	jint write(jni::ref<java::lang::String> p1, jni::ref<java::nio::ByteBuffer> p2) { return call_method<"write", jint>(p1, p2); }
	void delete_(jni::ref<java::lang::String> p1) { return call_method<"delete", void>(p1); }

protected:

	UserDefinedFileAttributeView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FILE_ATTRIBUTE_USERDEFINEDFILEATTRIBUTEVIEW
