// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SELECTOR_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SELECTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::channels { class Selector; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::channels::Selector>
{
	static constexpr fixed_string class_name = "java/nio/channels/Selector";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SELECTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SELECTOR)
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SELECTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/channels/spi/SelectorProvider.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::channels::Selector : public jni::object_base<"java/nio/channels/Selector",
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jni::ref<java::nio::channels::Selector> open() { return call_static_method<"open", jni::ref<java::nio::channels::Selector>>(); }
	jboolean isOpen() { return call_method<"isOpen", jboolean>(); }
	jni::ref<java::nio::channels::spi::SelectorProvider> provider() { return call_method<"provider", jni::ref<java::nio::channels::spi::SelectorProvider>>(); }
	jni::ref<java::util::Set> keys() { return call_method<"keys", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> selectedKeys() { return call_method<"selectedKeys", jni::ref<java::util::Set>>(); }
	jint selectNow() { return call_method<"selectNow", jint>(); }
	jint select(jlong p1) { return call_method<"select", jint>(p1); }
	jint select() { return call_method<"select", jint>(); }
	jint select(jni::ref<java::util::function::Consumer> action, jlong timeout) { return call_method<"select", jint>(action, timeout); }
	jint select(jni::ref<java::util::function::Consumer> action) { return call_method<"select", jint>(action); }
	jint selectNow(jni::ref<java::util::function::Consumer> action) { return call_method<"selectNow", jint>(action); }
	jni::ref<java::nio::channels::Selector> wakeup() { return call_method<"wakeup", jni::ref<java::nio::channels::Selector>>(); }
	void close() { return call_method<"close", void>(); }

protected:

	Selector(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SELECTOR
