// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_MODIFIER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_MODIFIER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class Modifier; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::Modifier>
{
	static constexpr fixed_string class_name = "java/lang/reflect/Modifier";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_MODIFIER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_MODIFIER)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_MODIFIER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::Modifier : public jni::object_base<"java/lang/reflect/Modifier",
	java::lang::Object>
{
public:

	static jint PUBLIC() { return get_static_field<"PUBLIC", jint>(); }
	static jint PRIVATE() { return get_static_field<"PRIVATE", jint>(); }
	static jint PROTECTED() { return get_static_field<"PROTECTED", jint>(); }
	static jint STATIC() { return get_static_field<"STATIC", jint>(); }
	static jint FINAL() { return get_static_field<"FINAL", jint>(); }
	static jint SYNCHRONIZED() { return get_static_field<"SYNCHRONIZED", jint>(); }
	static jint VOLATILE() { return get_static_field<"VOLATILE", jint>(); }
	static jint TRANSIENT() { return get_static_field<"TRANSIENT", jint>(); }
	static jint NATIVE() { return get_static_field<"NATIVE", jint>(); }
	static jint INTERFACE() { return get_static_field<"INTERFACE", jint>(); }
	static jint ABSTRACT() { return get_static_field<"ABSTRACT", jint>(); }
	static jint STRICT() { return get_static_field<"STRICT", jint>(); }

	static jni::ref<java::lang::reflect::Modifier> new_object() { return base_::new_object(); }
	static jboolean isPublic(jint mod) { return call_static_method<"isPublic", jboolean>(mod); }
	static jboolean isPrivate(jint mod) { return call_static_method<"isPrivate", jboolean>(mod); }
	static jboolean isProtected(jint mod) { return call_static_method<"isProtected", jboolean>(mod); }
	static jboolean isStatic(jint mod) { return call_static_method<"isStatic", jboolean>(mod); }
	static jboolean isFinal(jint mod) { return call_static_method<"isFinal", jboolean>(mod); }
	static jboolean isSynchronized(jint mod) { return call_static_method<"isSynchronized", jboolean>(mod); }
	static jboolean isVolatile(jint mod) { return call_static_method<"isVolatile", jboolean>(mod); }
	static jboolean isTransient(jint mod) { return call_static_method<"isTransient", jboolean>(mod); }
	static jboolean isNative(jint mod) { return call_static_method<"isNative", jboolean>(mod); }
	static jboolean isInterface(jint mod) { return call_static_method<"isInterface", jboolean>(mod); }
	static jboolean isAbstract(jint mod) { return call_static_method<"isAbstract", jboolean>(mod); }
	static jboolean isStrict(jint mod) { return call_static_method<"isStrict", jboolean>(mod); }
	static jni::ref<java::lang::String> toString(jint mod) { return call_static_method<"toString", jni::ref<java::lang::String>>(mod); }
	static jint classModifiers() { return call_static_method<"classModifiers", jint>(); }
	static jint interfaceModifiers() { return call_static_method<"interfaceModifiers", jint>(); }
	static jint constructorModifiers() { return call_static_method<"constructorModifiers", jint>(); }
	static jint methodModifiers() { return call_static_method<"methodModifiers", jint>(); }
	static jint fieldModifiers() { return call_static_method<"fieldModifiers", jint>(); }
	static jint parameterModifiers() { return call_static_method<"parameterModifiers", jint>(); }

protected:

	Modifier(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_MODIFIER
