// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_LOOKUP_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_LOOKUP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::invoke { class MethodHandles_Lookup; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::invoke::MethodHandles_Lookup>
{
	static constexpr fixed_string class_name = "java/lang/invoke/MethodHandles$Lookup";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_LOOKUP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_LOOKUP)
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_LOOKUP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/invoke/MethodHandleInfo.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/lang/invoke/VarHandle.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::invoke::MethodHandles_Lookup : public jni::object_base<"java/lang/invoke/MethodHandles$Lookup",
	java::lang::Object>
{
public:

	static jint PUBLIC() { return get_static_field<"PUBLIC", jint>(); }
	static jint PRIVATE() { return get_static_field<"PRIVATE", jint>(); }
	static jint PROTECTED() { return get_static_field<"PROTECTED", jint>(); }
	static jint PACKAGE() { return get_static_field<"PACKAGE", jint>(); }
	static jint MODULE() { return get_static_field<"MODULE", jint>(); }
	static jint UNCONDITIONAL() { return get_static_field<"UNCONDITIONAL", jint>(); }

	jni::ref<java::lang::Class> lookupClass() { return call_method<"lookupClass", jni::ref<java::lang::Class>>(); }
	jint lookupModes() { return call_method<"lookupModes", jint>(); }
	jni::ref<java::lang::invoke::MethodHandles_Lookup> in(jni::ref<java::lang::Class> requestedLookupClass) { return call_method<"in", jni::ref<java::lang::invoke::MethodHandles_Lookup>>(requestedLookupClass); }
	jni::ref<java::lang::invoke::MethodHandles_Lookup> dropLookupMode(jint modeToDrop) { return call_method<"dropLookupMode", jni::ref<java::lang::invoke::MethodHandles_Lookup>>(modeToDrop); }
	jni::ref<java::lang::Class> defineClass(jni::ref<jni::array<jbyte>> bytes) { return call_method<"defineClass", jni::ref<java::lang::Class>>(bytes); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::invoke::MethodHandle> findStatic(jni::ref<java::lang::Class> refc, jni::ref<java::lang::String> name, jni::ref<java::lang::invoke::MethodType> type) { return call_method<"findStatic", jni::ref<java::lang::invoke::MethodHandle>>(refc, name, type); }
	jni::ref<java::lang::invoke::MethodHandle> findVirtual(jni::ref<java::lang::Class> refc, jni::ref<java::lang::String> name, jni::ref<java::lang::invoke::MethodType> type) { return call_method<"findVirtual", jni::ref<java::lang::invoke::MethodHandle>>(refc, name, type); }
	jni::ref<java::lang::invoke::MethodHandle> findConstructor(jni::ref<java::lang::Class> refc, jni::ref<java::lang::invoke::MethodType> type) { return call_method<"findConstructor", jni::ref<java::lang::invoke::MethodHandle>>(refc, type); }
	jni::ref<java::lang::Class> findClass(jni::ref<java::lang::String> targetName) { return call_method<"findClass", jni::ref<java::lang::Class>>(targetName); }
	jni::ref<java::lang::Class> accessClass(jni::ref<java::lang::Class> targetClass) { return call_method<"accessClass", jni::ref<java::lang::Class>>(targetClass); }
	jni::ref<java::lang::invoke::MethodHandle> findSpecial(jni::ref<java::lang::Class> refc, jni::ref<java::lang::String> name, jni::ref<java::lang::invoke::MethodType> type, jni::ref<java::lang::Class> specialCaller) { return call_method<"findSpecial", jni::ref<java::lang::invoke::MethodHandle>>(refc, name, type, specialCaller); }
	jni::ref<java::lang::invoke::MethodHandle> findGetter(jni::ref<java::lang::Class> refc, jni::ref<java::lang::String> name, jni::ref<java::lang::Class> type) { return call_method<"findGetter", jni::ref<java::lang::invoke::MethodHandle>>(refc, name, type); }
	jni::ref<java::lang::invoke::MethodHandle> findSetter(jni::ref<java::lang::Class> refc, jni::ref<java::lang::String> name, jni::ref<java::lang::Class> type) { return call_method<"findSetter", jni::ref<java::lang::invoke::MethodHandle>>(refc, name, type); }
	jni::ref<java::lang::invoke::VarHandle> findVarHandle(jni::ref<java::lang::Class> recv, jni::ref<java::lang::String> name, jni::ref<java::lang::Class> type) { return call_method<"findVarHandle", jni::ref<java::lang::invoke::VarHandle>>(recv, name, type); }
	jni::ref<java::lang::invoke::MethodHandle> findStaticGetter(jni::ref<java::lang::Class> refc, jni::ref<java::lang::String> name, jni::ref<java::lang::Class> type) { return call_method<"findStaticGetter", jni::ref<java::lang::invoke::MethodHandle>>(refc, name, type); }
	jni::ref<java::lang::invoke::MethodHandle> findStaticSetter(jni::ref<java::lang::Class> refc, jni::ref<java::lang::String> name, jni::ref<java::lang::Class> type) { return call_method<"findStaticSetter", jni::ref<java::lang::invoke::MethodHandle>>(refc, name, type); }
	jni::ref<java::lang::invoke::VarHandle> findStaticVarHandle(jni::ref<java::lang::Class> decl, jni::ref<java::lang::String> name, jni::ref<java::lang::Class> type) { return call_method<"findStaticVarHandle", jni::ref<java::lang::invoke::VarHandle>>(decl, name, type); }
	jni::ref<java::lang::invoke::MethodHandle> bind(jni::ref<java::lang::Object> receiver, jni::ref<java::lang::String> name, jni::ref<java::lang::invoke::MethodType> type) { return call_method<"bind", jni::ref<java::lang::invoke::MethodHandle>>(receiver, name, type); }
	jni::ref<java::lang::invoke::MethodHandle> unreflect(jni::ref<java::lang::reflect::Method> m) { return call_method<"unreflect", jni::ref<java::lang::invoke::MethodHandle>>(m); }
	jni::ref<java::lang::invoke::MethodHandle> unreflectSpecial(jni::ref<java::lang::reflect::Method> m, jni::ref<java::lang::Class> specialCaller) { return call_method<"unreflectSpecial", jni::ref<java::lang::invoke::MethodHandle>>(m, specialCaller); }
	jni::ref<java::lang::invoke::MethodHandle> unreflectConstructor(jni::ref<java::lang::reflect::Constructor> c) { return call_method<"unreflectConstructor", jni::ref<java::lang::invoke::MethodHandle>>(c); }
	jni::ref<java::lang::invoke::MethodHandle> unreflectGetter(jni::ref<java::lang::reflect::Field> f) { return call_method<"unreflectGetter", jni::ref<java::lang::invoke::MethodHandle>>(f); }
	jni::ref<java::lang::invoke::MethodHandle> unreflectSetter(jni::ref<java::lang::reflect::Field> f) { return call_method<"unreflectSetter", jni::ref<java::lang::invoke::MethodHandle>>(f); }
	jni::ref<java::lang::invoke::VarHandle> unreflectVarHandle(jni::ref<java::lang::reflect::Field> f) { return call_method<"unreflectVarHandle", jni::ref<java::lang::invoke::VarHandle>>(f); }
	jni::ref<java::lang::invoke::MethodHandleInfo> revealDirect(jni::ref<java::lang::invoke::MethodHandle> target) { return call_method<"revealDirect", jni::ref<java::lang::invoke::MethodHandleInfo>>(target); }
	jboolean hasPrivateAccess() { return call_method<"hasPrivateAccess", jboolean>(); }

protected:

	MethodHandles_Lookup(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_LOOKUP
