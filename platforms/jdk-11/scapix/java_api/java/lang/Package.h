// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/NamedPackage.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedElement.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_PACKAGE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_PACKAGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Package; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Package>
{
	static constexpr fixed_string class_name = "java/lang/Package";
	using base_classes = std::tuple<scapix::java_api::java::lang::NamedPackage, scapix::java_api::java::lang::reflect::AnnotatedElement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_PACKAGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_PACKAGE)
#define SCAPIX_JAVA_API_JAVA_LANG_PACKAGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/net/URL.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Package : public jni::object_base<"java/lang/Package",
	java::lang::NamedPackage,
	java::lang::reflect::AnnotatedElement>
{
public:

	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSpecificationTitle() { return call_method<"getSpecificationTitle", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSpecificationVersion() { return call_method<"getSpecificationVersion", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSpecificationVendor() { return call_method<"getSpecificationVendor", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getImplementationTitle() { return call_method<"getImplementationTitle", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getImplementationVersion() { return call_method<"getImplementationVersion", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getImplementationVendor() { return call_method<"getImplementationVendor", jni::ref<java::lang::String>>(); }
	jboolean isSealed() { return call_method<"isSealed", jboolean>(); }
	jboolean isSealed(jni::ref<java::net::URL> url) { return call_method<"isSealed", jboolean>(url); }
	jboolean isCompatibleWith(jni::ref<java::lang::String> desired) { return call_method<"isCompatibleWith", jboolean>(desired); }
	static jni::ref<java::lang::Package> getPackage(jni::ref<java::lang::String> name) { return call_static_method<"getPackage", jni::ref<java::lang::Package>>(name); }
	static jni::ref<jni::array<java::lang::Package>> getPackages() { return call_static_method<"getPackages", jni::ref<jni::array<java::lang::Package>>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::annotation::Annotation> getAnnotation(jni::ref<java::lang::Class> annotationClass) { return call_method<"getAnnotation", jni::ref<java::lang::annotation::Annotation>>(annotationClass); }
	jboolean isAnnotationPresent(jni::ref<java::lang::Class> annotationClass) { return call_method<"isAnnotationPresent", jboolean>(annotationClass); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getAnnotationsByType(jni::ref<java::lang::Class> annotationClass) { return call_method<"getAnnotationsByType", jni::ref<jni::array<java::lang::annotation::Annotation>>>(annotationClass); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getAnnotations() { return call_method<"getAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(); }
	jni::ref<java::lang::annotation::Annotation> getDeclaredAnnotation(jni::ref<java::lang::Class> annotationClass) { return call_method<"getDeclaredAnnotation", jni::ref<java::lang::annotation::Annotation>>(annotationClass); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getDeclaredAnnotationsByType(jni::ref<java::lang::Class> annotationClass) { return call_method<"getDeclaredAnnotationsByType", jni::ref<jni::array<java::lang::annotation::Annotation>>>(annotationClass); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getDeclaredAnnotations() { return call_method<"getDeclaredAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(); }

protected:

	Package(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_PACKAGE
