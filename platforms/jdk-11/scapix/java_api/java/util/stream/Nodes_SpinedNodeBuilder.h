// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/SpinedBuffer.h>
#include <scapix/java_api/java/util/stream/Node.h>
#include <scapix/java_api/java/util/stream/Node_Builder.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_SPINEDNODEBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_SPINEDNODEBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class Nodes_SpinedNodeBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::Nodes_SpinedNodeBuilder>
{
	static constexpr fixed_string class_name = "java/util/stream/Nodes$SpinedNodeBuilder";
	using base_classes = std::tuple<scapix::java_api::java::util::stream::SpinedBuffer, scapix::java_api::java::util::stream::Node, scapix::java_api::java::util::stream::Node_Builder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_SPINEDNODEBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_SPINEDNODEBUILDER)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_SPINEDNODEBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::Nodes_SpinedNodeBuilder : public jni::object_base<"java/util/stream/Nodes$SpinedNodeBuilder",
	java::util::stream::SpinedBuffer,
	java::util::stream::Node,
	java::util::stream::Node_Builder>
{
public:

	jni::ref<java::util::Spliterator> spliterator() { return call_method<"spliterator", jni::ref<java::util::Spliterator>>(); }
	void forEach(jni::ref<java::util::function::Consumer> consumer) { return call_method<"forEach", void>(consumer); }
	void begin(jlong size) { return call_method<"begin", void>(size); }
	void accept(jni::ref<java::lang::Object> t) { return call_method<"accept", void>(t); }
	void end() { return call_method<"end", void>(); }
	void copyInto(jni::ref<jni::array<java::lang::Object>> array, jint offset) { return call_method<"copyInto", void>(array, offset); }
	jni::ref<jni::array<java::lang::Object>> asArray(jni::ref<java::util::function::IntFunction> arrayFactory) { return call_method<"asArray", jni::ref<jni::array<java::lang::Object>>>(arrayFactory); }
	jni::ref<java::util::stream::Node> build() { return call_method<"build", jni::ref<java::util::stream::Node>>(); }

protected:

	Nodes_SpinedNodeBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_SPINEDNODEBUILDER
