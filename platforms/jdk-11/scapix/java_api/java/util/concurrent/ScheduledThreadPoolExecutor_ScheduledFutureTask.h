// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/FutureTask.h>
#include <scapix/java_api/java/util/concurrent/RunnableScheduledFuture.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_SCHEDULEDFUTURETASK_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_SCHEDULEDFUTURETASK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ScheduledThreadPoolExecutor_ScheduledFutureTask; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ScheduledThreadPoolExecutor_ScheduledFutureTask>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::FutureTask, scapix::java_api::java::util::concurrent::RunnableScheduledFuture>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_SCHEDULEDFUTURETASK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_SCHEDULEDFUTURETASK)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_SCHEDULEDFUTURETASK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/Delayed.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::concurrent::ScheduledThreadPoolExecutor_ScheduledFutureTask : public jni::object_base<"java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask",
	java::util::concurrent::FutureTask,
	java::util::concurrent::RunnableScheduledFuture>
{
public:

	jlong getDelay(jni::ref<java::util::concurrent::TimeUnit> unit) { return call_method<"getDelay", jlong>(unit); }
	jint compareTo(jni::ref<java::util::concurrent::Delayed> other) { return call_method<"compareTo", jint>(other); }
	jboolean isPeriodic() { return call_method<"isPeriodic", jboolean>(); }
	jboolean cancel(jboolean mayInterruptIfRunning) { return call_method<"cancel", jboolean>(mayInterruptIfRunning); }
	void run() { return call_method<"run", void>(); }

protected:

	ScheduledThreadPoolExecutor_ScheduledFutureTask(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_SCHEDULEDFUTURETASK
