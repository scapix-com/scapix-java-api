// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/ref/WeakReference.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_EXCEPTIONNODE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_EXCEPTIONNODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ForkJoinTask_ExceptionNode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ForkJoinTask_ExceptionNode>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ForkJoinTask$ExceptionNode";
	using base_classes = std::tuple<scapix::java_api::java::lang::ref::WeakReference>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_EXCEPTIONNODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_EXCEPTIONNODE)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_EXCEPTIONNODE

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::concurrent::ForkJoinTask_ExceptionNode : public jni::object_base<"java/util/concurrent/ForkJoinTask$ExceptionNode",
	java::lang::ref::WeakReference>
{
public:


protected:

	ForkJoinTask_ExceptionNode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_EXCEPTIONNODE
