// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYED_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYED_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class Delayed; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::Delayed>
{
	static constexpr fixed_string class_name = "java/util/concurrent/Delayed";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYED_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYED)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYED

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::Delayed : public jni::object_base<"java/util/concurrent/Delayed",
	java::lang::Object,
	java::lang::Comparable>
{
public:

	jlong getDelay(jni::ref<java::util::concurrent::TimeUnit> p1) { return call_method<"getDelay", jlong>(p1); }

protected:

	Delayed(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYED
