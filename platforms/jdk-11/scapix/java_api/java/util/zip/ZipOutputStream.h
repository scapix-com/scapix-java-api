// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/zip/DeflaterOutputStream.h>
#include <scapix/java_api/java/util/zip/ZipConstants.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::zip { class ZipOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::zip::ZipOutputStream>
{
	static constexpr fixed_string class_name = "java/util/zip/ZipOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::util::zip::DeflaterOutputStream, scapix::java_api::java::util::zip::ZipConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/util/zip/ZipEntry.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::zip::ZipOutputStream : public jni::object_base<"java/util/zip/ZipOutputStream",
	java::util::zip::DeflaterOutputStream,
	java::util::zip::ZipConstants>
{
public:

	static jint STORED() { return get_static_field<"STORED", jint>(); }
	static jint DEFLATED() { return get_static_field<"DEFLATED", jint>(); }

	static jni::ref<java::util::zip::ZipOutputStream> new_object(jni::ref<java::io::OutputStream> out) { return base_::new_object(out); }
	static jni::ref<java::util::zip::ZipOutputStream> new_object(jni::ref<java::io::OutputStream> out, jni::ref<java::nio::charset::Charset> charset) { return base_::new_object(out, charset); }
	void setComment(jni::ref<java::lang::String> comment) { return call_method<"setComment", void>(comment); }
	void setMethod(jint method) { return call_method<"setMethod", void>(method); }
	void setLevel(jint level) { return call_method<"setLevel", void>(level); }
	void putNextEntry(jni::ref<java::util::zip::ZipEntry> e) { return call_method<"putNextEntry", void>(e); }
	void closeEntry() { return call_method<"closeEntry", void>(); }
	void write(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"write", void>(b, off, len); }
	void finish() { return call_method<"finish", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	ZipOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPOUTPUTSTREAM
