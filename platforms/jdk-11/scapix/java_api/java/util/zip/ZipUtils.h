// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::zip { class ZipUtils; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::zip::ZipUtils>
{
	static constexpr fixed_string class_name = "java/util/zip/ZipUtils";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS)
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/file/attribute/FileTime.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::zip::ZipUtils : public jni::object_base<"java/util/zip/ZipUtils",
	java::lang::Object>
{
public:

	static jlong WINDOWS_TIME_NOT_AVAILABLE() { return get_static_field<"WINDOWS_TIME_NOT_AVAILABLE", jlong>(); }
	static jlong UPPER_UNIXTIME_BOUND() { return get_static_field<"UPPER_UNIXTIME_BOUND", jlong>(); }

	static jni::ref<java::nio::file::attribute::FileTime> winTimeToFileTime(jlong wtime) { return call_static_method<"winTimeToFileTime", jni::ref<java::nio::file::attribute::FileTime>>(wtime); }
	static jlong fileTimeToWinTime(jni::ref<java::nio::file::attribute::FileTime> ftime) { return call_static_method<"fileTimeToWinTime", jlong>(ftime); }
	static jni::ref<java::nio::file::attribute::FileTime> unixTimeToFileTime(jlong utime) { return call_static_method<"unixTimeToFileTime", jni::ref<java::nio::file::attribute::FileTime>>(utime); }
	static jlong fileTimeToUnixTime(jni::ref<java::nio::file::attribute::FileTime> ftime) { return call_static_method<"fileTimeToUnixTime", jlong>(ftime); }
	static jlong dosToJavaTime(jlong dtime) { return call_static_method<"dosToJavaTime", jlong>(dtime); }
	static jlong extendedDosToJavaTime(jlong xdostime) { return call_static_method<"extendedDosToJavaTime", jlong>(xdostime); }
	static jlong javaToExtendedDosTime(jlong time) { return call_static_method<"javaToExtendedDosTime", jlong>(time); }
	static jint get16(jni::ref<jni::array<jbyte>> b, jint off) { return call_static_method<"get16", jint>(b, off); }
	static jlong get32(jni::ref<jni::array<jbyte>> b, jint off) { return call_static_method<"get32", jlong>(b, off); }
	static jlong get64(jni::ref<jni::array<jbyte>> b, jint off) { return call_static_method<"get64", jlong>(b, off); }
	static jint get32S(jni::ref<jni::array<jbyte>> b, jint off) { return call_static_method<"get32S", jint>(b, off); }

protected:

	ZipUtils(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS
