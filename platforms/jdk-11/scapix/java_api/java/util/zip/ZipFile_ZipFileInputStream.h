// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPFILE_ZIPFILEINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPFILE_ZIPFILEINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::zip { class ZipFile_ZipFileInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::zip::ZipFile_ZipFileInputStream>
{
	static constexpr fixed_string class_name = "java/util/zip/ZipFile$ZipFileInputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::InputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPFILE_ZIPFILEINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPFILE_ZIPFILEINPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPFILE_ZIPFILEINPUTSTREAM

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::zip::ZipFile_ZipFileInputStream : public jni::object_base<"java/util/zip/ZipFile$ZipFileInputStream",
	java::io::InputStream>
{
public:

	jint read(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"read", jint>(b, off, len); }
	jint read() { return call_method<"read", jint>(); }
	jlong skip(jlong n) { return call_method<"skip", jlong>(n); }
	jint available() { return call_method<"available", jint>(); }
	jlong size() { return call_method<"size", jlong>(); }
	void close() { return call_method<"close", void>(); }

protected:

	ZipFile_ZipFileInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPFILE_ZIPFILEINPUTSTREAM
