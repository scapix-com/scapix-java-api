// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractSet.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ENUMSET_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ENUMSET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class EnumSet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::EnumSet>
{
	static constexpr fixed_string class_name = "java/util/EnumSet";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractSet, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ENUMSET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ENUMSET)
#define SCAPIX_JAVA_API_JAVA_UTIL_ENUMSET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/java/util/Collection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::EnumSet : public jni::object_base<"java/util/EnumSet",
	java::util::AbstractSet,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static jni::ref<java::util::EnumSet> noneOf(jni::ref<java::lang::Class> elementType) { return call_static_method<"noneOf", jni::ref<java::util::EnumSet>>(elementType); }
	static jni::ref<java::util::EnumSet> allOf(jni::ref<java::lang::Class> elementType) { return call_static_method<"allOf", jni::ref<java::util::EnumSet>>(elementType); }
	static jni::ref<java::util::EnumSet> copyOf(jni::ref<java::util::EnumSet> s) { return call_static_method<"copyOf", jni::ref<java::util::EnumSet>>(s); }
	static jni::ref<java::util::EnumSet> copyOf(jni::ref<java::util::Collection> c) { return call_static_method<"copyOf", jni::ref<java::util::EnumSet>>(c); }
	static jni::ref<java::util::EnumSet> complementOf(jni::ref<java::util::EnumSet> s) { return call_static_method<"complementOf", jni::ref<java::util::EnumSet>>(s); }
	static jni::ref<java::util::EnumSet> of(jni::ref<java::lang::Enum> e) { return call_static_method<"of", jni::ref<java::util::EnumSet>>(e); }
	static jni::ref<java::util::EnumSet> of(jni::ref<java::lang::Enum> e1, jni::ref<java::lang::Enum> e2) { return call_static_method<"of", jni::ref<java::util::EnumSet>>(e1, e2); }
	static jni::ref<java::util::EnumSet> of(jni::ref<java::lang::Enum> e1, jni::ref<java::lang::Enum> e2, jni::ref<java::lang::Enum> e3) { return call_static_method<"of", jni::ref<java::util::EnumSet>>(e1, e2, e3); }
	static jni::ref<java::util::EnumSet> of(jni::ref<java::lang::Enum> e1, jni::ref<java::lang::Enum> e2, jni::ref<java::lang::Enum> e3, jni::ref<java::lang::Enum> e4) { return call_static_method<"of", jni::ref<java::util::EnumSet>>(e1, e2, e3, e4); }
	static jni::ref<java::util::EnumSet> of(jni::ref<java::lang::Enum> e1, jni::ref<java::lang::Enum> e2, jni::ref<java::lang::Enum> e3, jni::ref<java::lang::Enum> e4, jni::ref<java::lang::Enum> e5) { return call_static_method<"of", jni::ref<java::util::EnumSet>>(e1, e2, e3, e4, e5); }
	static jni::ref<java::util::EnumSet> of(jni::ref<java::lang::Enum> first, jni::ref<jni::array<java::lang::Enum>> rest) { return call_static_method<"of", jni::ref<java::util::EnumSet>>(first, rest); }
	static jni::ref<java::util::EnumSet> range(jni::ref<java::lang::Enum> from, jni::ref<java::lang::Enum> to) { return call_static_method<"range", jni::ref<java::util::EnumSet>>(from, to); }
	jni::ref<java::util::EnumSet> clone() { return call_method<"clone", jni::ref<java::util::EnumSet>>(); }

protected:

	EnumSet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ENUMSET
