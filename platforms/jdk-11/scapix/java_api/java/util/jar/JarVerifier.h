// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARVERIFIER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARVERIFIER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::jar { class JarVerifier; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::jar::JarVerifier>
{
	static constexpr fixed_string class_name = "java/util/jar/JarVerifier";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARVERIFIER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARVERIFIER)
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARVERIFIER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/security/CodeSigner.h>
#include <scapix/java_api/java/security/CodeSource.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/jar/JarEntry.h>
#include <scapix/java_api/java/util/jar/JarFile.h>
#include <scapix/java_api/sun/security/util/ManifestEntryVerifier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::jar::JarVerifier : public jni::object_base<"java/util/jar/JarVerifier",
	java::lang::Object>
{
public:

	static jni::ref<java::util::jar::JarVerifier> new_object(jni::ref<java::lang::String> name, jni::ref<jni::array<jbyte>> rawBytes) { return base_::new_object(name, rawBytes); }
	void beginEntry(jni::ref<java::util::jar::JarEntry> je, jni::ref<sun::security::util::ManifestEntryVerifier> mev) { return call_method<"beginEntry", void>(je, mev); }
	void update(jint b, jni::ref<sun::security::util::ManifestEntryVerifier> mev) { return call_method<"update", void>(b, mev); }
	void update(jint n, jni::ref<jni::array<jbyte>> b, jint off, jint len, jni::ref<sun::security::util::ManifestEntryVerifier> mev) { return call_method<"update", void>(n, b, off, len, mev); }
	jni::ref<jni::array<java::security::cert::Certificate>> getCerts(jni::ref<java::lang::String> name) { return call_method<"getCerts", jni::ref<jni::array<java::security::cert::Certificate>>>(name); }
	jni::ref<jni::array<java::security::cert::Certificate>> getCerts(jni::ref<java::util::jar::JarFile> jar, jni::ref<java::util::jar::JarEntry> entry) { return call_method<"getCerts", jni::ref<jni::array<java::security::cert::Certificate>>>(jar, entry); }
	jni::ref<jni::array<java::security::CodeSigner>> getCodeSigners(jni::ref<java::lang::String> name) { return call_method<"getCodeSigners", jni::ref<jni::array<java::security::CodeSigner>>>(name); }
	jni::ref<jni::array<java::security::CodeSigner>> getCodeSigners(jni::ref<java::util::jar::JarFile> jar, jni::ref<java::util::jar::JarEntry> entry) { return call_method<"getCodeSigners", jni::ref<jni::array<java::security::CodeSigner>>>(jar, entry); }
	jni::ref<java::util::Enumeration> entryNames(jni::ref<java::util::jar::JarFile> jar, jni::ref<jni::array<java::security::CodeSource>> cs) { return call_method<"entryNames", jni::ref<java::util::Enumeration>>(jar, cs); }
	jni::ref<java::util::Enumeration> entries2(jni::ref<java::util::jar::JarFile> jar, jni::ref<java::util::Enumeration> e) { return call_method<"entries2", jni::ref<java::util::Enumeration>>(jar, e); }
	jni::ref<jni::array<java::security::CodeSource>> getCodeSources(jni::ref<java::util::jar::JarFile> jar, jni::ref<java::net::URL> url) { return call_method<"getCodeSources", jni::ref<jni::array<java::security::CodeSource>>>(jar, url); }
	jni::ref<java::security::CodeSource> getCodeSource(jni::ref<java::net::URL> url, jni::ref<java::lang::String> name) { return call_method<"getCodeSource", jni::ref<java::security::CodeSource>>(url, name); }
	jni::ref<java::security::CodeSource> getCodeSource(jni::ref<java::net::URL> url, jni::ref<java::util::jar::JarFile> jar, jni::ref<java::util::jar::JarEntry> je) { return call_method<"getCodeSource", jni::ref<java::security::CodeSource>>(url, jar, je); }
	void setEagerValidation(jboolean eager) { return call_method<"setEagerValidation", void>(eager); }
	jni::ref<java::util::List> getManifestDigests() { return call_method<"getManifestDigests", jni::ref<java::util::List>>(); }

protected:

	JarVerifier(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARVERIFIER
