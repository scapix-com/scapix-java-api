// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGINVOKEACCESS_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGINVOKEACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::access { class JavaLangInvokeAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::access::JavaLangInvokeAccess>
{
	static constexpr fixed_string class_name = "jdk/internal/access/JavaLangInvokeAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGINVOKEACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGINVOKEACCESS)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGINVOKEACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/util/Map_Entry.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::access::JavaLangInvokeAccess : public jni::object_base<"jdk/internal/access/JavaLangInvokeAccess",
	java::lang::Object>
{
public:

	jni::ref<java::lang::Object> newMemberName() { return call_method<"newMemberName", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> getName(jni::ref<java::lang::Object> p1) { return call_method<"getName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::invoke::MethodType> getMethodType(jni::ref<java::lang::Object> p1) { return call_method<"getMethodType", jni::ref<java::lang::invoke::MethodType>>(p1); }
	jni::ref<java::lang::String> getMethodDescriptor(jni::ref<java::lang::Object> p1) { return call_method<"getMethodDescriptor", jni::ref<java::lang::String>>(p1); }
	jboolean isNative(jni::ref<java::lang::Object> p1) { return call_method<"isNative", jboolean>(p1); }
	jni::ref<java::lang::Class> getDeclaringClass(jni::ref<java::lang::Object> p1) { return call_method<"getDeclaringClass", jni::ref<java::lang::Class>>(p1); }
	jni::ref<jni::array<jbyte>> generateDirectMethodHandleHolderClassBytes(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::invoke::MethodType>> p2, jni::ref<jni::array<jint>> p3) { return call_method<"generateDirectMethodHandleHolderClassBytes", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> generateDelegatingMethodHandleHolderClassBytes(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::invoke::MethodType>> p2) { return call_method<"generateDelegatingMethodHandleHolderClassBytes", jni::ref<jni::array<jbyte>>>(p1, p2); }
	jni::ref<java::util::Map_Entry> generateConcreteBMHClassBytes(jni::ref<java::lang::String> p1) { return call_method<"generateConcreteBMHClassBytes", jni::ref<java::util::Map_Entry>>(p1); }
	jni::ref<jni::array<jbyte>> generateBasicFormsClassBytes(jni::ref<java::lang::String> p1) { return call_method<"generateBasicFormsClassBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jbyte>> generateInvokersHolderClassBytes(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::invoke::MethodType>> p2, jni::ref<jni::array<java::lang::invoke::MethodType>> p3) { return call_method<"generateInvokersHolderClassBytes", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }

protected:

	JavaLangInvokeAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGINVOKEACCESS
