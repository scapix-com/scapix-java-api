// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARRAYSSUPPORT_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARRAYSSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util { class ArraysSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::ArraysSupport>
{
	static constexpr fixed_string class_name = "jdk/internal/util/ArraysSupport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARRAYSSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARRAYSSUPPORT)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARRAYSSUPPORT

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::ArraysSupport : public jni::object_base<"jdk/internal/util/ArraysSupport",
	java::lang::Object>
{
public:

	static jint LOG2_ARRAY_BOOLEAN_INDEX_SCALE() { return get_static_field<"LOG2_ARRAY_BOOLEAN_INDEX_SCALE", jint>(); }
	static jint LOG2_ARRAY_BYTE_INDEX_SCALE() { return get_static_field<"LOG2_ARRAY_BYTE_INDEX_SCALE", jint>(); }
	static jint LOG2_ARRAY_CHAR_INDEX_SCALE() { return get_static_field<"LOG2_ARRAY_CHAR_INDEX_SCALE", jint>(); }
	static jint LOG2_ARRAY_SHORT_INDEX_SCALE() { return get_static_field<"LOG2_ARRAY_SHORT_INDEX_SCALE", jint>(); }
	static jint LOG2_ARRAY_INT_INDEX_SCALE() { return get_static_field<"LOG2_ARRAY_INT_INDEX_SCALE", jint>(); }
	static jint LOG2_ARRAY_LONG_INDEX_SCALE() { return get_static_field<"LOG2_ARRAY_LONG_INDEX_SCALE", jint>(); }
	static jint LOG2_ARRAY_FLOAT_INDEX_SCALE() { return get_static_field<"LOG2_ARRAY_FLOAT_INDEX_SCALE", jint>(); }
	static jint LOG2_ARRAY_DOUBLE_INDEX_SCALE() { return get_static_field<"LOG2_ARRAY_DOUBLE_INDEX_SCALE", jint>(); }
	static jint MAX_ARRAY_LENGTH() { return get_static_field<"MAX_ARRAY_LENGTH", jint>(); }

	static jint vectorizedMismatch(jni::ref<java::lang::Object> a, jlong aOffset, jni::ref<java::lang::Object> p3, jlong b, jint bOffset, jint p6) { return call_static_method<"vectorizedMismatch", jint>(a, aOffset, p3, b, bOffset, p6); }
	static jint mismatch(jni::ref<jni::array<jboolean>> a, jni::ref<jni::array<jboolean>> b, jint length) { return call_static_method<"mismatch", jint>(a, b, length); }
	static jint mismatch(jni::ref<jni::array<jboolean>> a, jint aFromIndex, jni::ref<jni::array<jboolean>> b, jint bFromIndex, jint length) { return call_static_method<"mismatch", jint>(a, aFromIndex, b, bFromIndex, length); }
	static jint mismatch(jni::ref<jni::array<jbyte>> a, jni::ref<jni::array<jbyte>> b, jint length) { return call_static_method<"mismatch", jint>(a, b, length); }
	static jint mismatch(jni::ref<jni::array<jbyte>> a, jint aFromIndex, jni::ref<jni::array<jbyte>> b, jint bFromIndex, jint length) { return call_static_method<"mismatch", jint>(a, aFromIndex, b, bFromIndex, length); }
	static jint mismatch(jni::ref<jni::array<jchar>> a, jni::ref<jni::array<jchar>> b, jint length) { return call_static_method<"mismatch", jint>(a, b, length); }
	static jint mismatch(jni::ref<jni::array<jchar>> a, jint aFromIndex, jni::ref<jni::array<jchar>> b, jint bFromIndex, jint length) { return call_static_method<"mismatch", jint>(a, aFromIndex, b, bFromIndex, length); }
	static jint mismatch(jni::ref<jni::array<jshort>> a, jni::ref<jni::array<jshort>> b, jint length) { return call_static_method<"mismatch", jint>(a, b, length); }
	static jint mismatch(jni::ref<jni::array<jshort>> a, jint aFromIndex, jni::ref<jni::array<jshort>> b, jint bFromIndex, jint length) { return call_static_method<"mismatch", jint>(a, aFromIndex, b, bFromIndex, length); }
	static jint mismatch(jni::ref<jni::array<jint>> a, jni::ref<jni::array<jint>> b, jint length) { return call_static_method<"mismatch", jint>(a, b, length); }
	static jint mismatch(jni::ref<jni::array<jint>> a, jint aFromIndex, jni::ref<jni::array<jint>> b, jint bFromIndex, jint length) { return call_static_method<"mismatch", jint>(a, aFromIndex, b, bFromIndex, length); }
	static jint mismatch(jni::ref<jni::array<jfloat>> a, jni::ref<jni::array<jfloat>> b, jint length) { return call_static_method<"mismatch", jint>(a, b, length); }
	static jint mismatch(jni::ref<jni::array<jfloat>> a, jint aFromIndex, jni::ref<jni::array<jfloat>> b, jint bFromIndex, jint length) { return call_static_method<"mismatch", jint>(a, aFromIndex, b, bFromIndex, length); }
	static jint mismatch(jni::ref<jni::array<jlong>> a, jni::ref<jni::array<jlong>> b, jint length) { return call_static_method<"mismatch", jint>(a, b, length); }
	static jint mismatch(jni::ref<jni::array<jlong>> a, jint aFromIndex, jni::ref<jni::array<jlong>> b, jint bFromIndex, jint length) { return call_static_method<"mismatch", jint>(a, aFromIndex, b, bFromIndex, length); }
	static jint mismatch(jni::ref<jni::array<jdouble>> a, jni::ref<jni::array<jdouble>> b, jint length) { return call_static_method<"mismatch", jint>(a, b, length); }
	static jint mismatch(jni::ref<jni::array<jdouble>> a, jint aFromIndex, jni::ref<jni::array<jdouble>> b, jint bFromIndex, jint length) { return call_static_method<"mismatch", jint>(a, aFromIndex, b, bFromIndex, length); }
	static jint newLength(jint oldLength, jint minGrowth, jint prefGrowth) { return call_static_method<"newLength", jint>(oldLength, minGrowth, prefGrowth); }

protected:

	ArraysSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_ARRAYSSUPPORT
