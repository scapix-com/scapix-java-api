// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_XMLSTREAMWRITER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_XMLSTREAMWRITER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util::xml { class XMLStreamWriter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::xml::XMLStreamWriter>
{
	static constexpr fixed_string class_name = "jdk/internal/util/xml/XMLStreamWriter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_XMLSTREAMWRITER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_XMLSTREAMWRITER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_XMLSTREAMWRITER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::xml::XMLStreamWriter : public jni::object_base<"jdk/internal/util/xml/XMLStreamWriter",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> DEFAULT_XML_VERSION() { return get_static_field<"DEFAULT_XML_VERSION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFAULT_ENCODING() { return get_static_field<"DEFAULT_ENCODING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::nio::charset::Charset> DEFAULT_CHARSET() { return get_static_field<"DEFAULT_CHARSET", jni::ref<java::nio::charset::Charset>>(); }

	void writeStartElement(jni::ref<java::lang::String> p1) { return call_method<"writeStartElement", void>(p1); }
	void writeEmptyElement(jni::ref<java::lang::String> p1) { return call_method<"writeEmptyElement", void>(p1); }
	void writeEndElement() { return call_method<"writeEndElement", void>(); }
	void writeEndDocument() { return call_method<"writeEndDocument", void>(); }
	void close() { return call_method<"close", void>(); }
	void flush() { return call_method<"flush", void>(); }
	void writeAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"writeAttribute", void>(p1, p2); }
	void writeCData(jni::ref<java::lang::String> p1) { return call_method<"writeCData", void>(p1); }
	void writeDTD(jni::ref<java::lang::String> p1) { return call_method<"writeDTD", void>(p1); }
	void writeStartDocument() { return call_method<"writeStartDocument", void>(); }
	void writeStartDocument(jni::ref<java::lang::String> p1) { return call_method<"writeStartDocument", void>(p1); }
	void writeStartDocument(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"writeStartDocument", void>(p1, p2); }
	void writeCharacters(jni::ref<java::lang::String> p1) { return call_method<"writeCharacters", void>(p1); }
	void writeCharacters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"writeCharacters", void>(p1, p2, p3); }

protected:

	XMLStreamWriter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_XMLSTREAMWRITER
