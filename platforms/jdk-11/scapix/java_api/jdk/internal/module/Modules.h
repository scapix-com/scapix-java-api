// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULES_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::module { class Modules; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::module::Modules>
{
	static constexpr fixed_string class_name = "jdk/internal/module/Modules";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULES)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Module.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/util/Optional.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::module::Modules : public jni::object_base<"jdk/internal/module/Modules",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::Module> defineModule(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::module::ModuleDescriptor> descriptor, jni::ref<java::net::URI> uri) { return call_static_method<"defineModule", jni::ref<java::lang::Module>>(loader, descriptor, uri); }
	static void addReads(jni::ref<java::lang::Module> m1, jni::ref<java::lang::Module> m2) { return call_static_method<"addReads", void>(m1, m2); }
	static void addReadsAllUnnamed(jni::ref<java::lang::Module> m) { return call_static_method<"addReadsAllUnnamed", void>(m); }
	static void addExports(jni::ref<java::lang::Module> m1, jni::ref<java::lang::String> pn, jni::ref<java::lang::Module> m2) { return call_static_method<"addExports", void>(m1, pn, m2); }
	static void addExportsToAllUnnamed(jni::ref<java::lang::Module> m, jni::ref<java::lang::String> pn) { return call_static_method<"addExportsToAllUnnamed", void>(m, pn); }
	static void addOpens(jni::ref<java::lang::Module> m1, jni::ref<java::lang::String> pn, jni::ref<java::lang::Module> m2) { return call_static_method<"addOpens", void>(m1, pn, m2); }
	static void addOpensToAllUnnamed(jni::ref<java::lang::Module> m, jni::ref<java::lang::String> pn) { return call_static_method<"addOpensToAllUnnamed", void>(m, pn); }
	static void addUses(jni::ref<java::lang::Module> m, jni::ref<java::lang::Class> service) { return call_static_method<"addUses", void>(m, service); }
	static void addProvides(jni::ref<java::lang::Module> m, jni::ref<java::lang::Class> service, jni::ref<java::lang::Class> impl) { return call_static_method<"addProvides", void>(m, service, impl); }
	static void transformedByAgent(jni::ref<java::lang::Module> m) { return call_static_method<"transformedByAgent", void>(m); }
	static jni::ref<java::lang::Module> loadModule(jni::ref<java::lang::String> name) { return call_static_method<"loadModule", jni::ref<java::lang::Module>>(name); }
	static jni::ref<java::util::Optional> findLoadedModule(jni::ref<java::lang::String> name) { return call_static_method<"findLoadedModule", jni::ref<java::util::Optional>>(name); }

protected:

	Modules(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULES
