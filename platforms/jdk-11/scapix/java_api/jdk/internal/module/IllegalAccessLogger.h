// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_ILLEGALACCESSLOGGER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_ILLEGALACCESSLOGGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::module { class IllegalAccessLogger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::module::IllegalAccessLogger>
{
	static constexpr fixed_string class_name = "jdk/internal/module/IllegalAccessLogger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_ILLEGALACCESSLOGGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_ILLEGALACCESSLOGGER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_ILLEGALACCESSLOGGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Module.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/jdk/internal/module/IllegalAccessLogger_Builder.h>
#include <scapix/java_api/jdk/internal/module/IllegalAccessLogger_Mode.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::module::IllegalAccessLogger : public jni::object_base<"jdk/internal/module/IllegalAccessLogger",
	java::lang::Object>
{
public:

	using Builder = IllegalAccessLogger_Builder;
	using Mode = IllegalAccessLogger_Mode;

	static jni::ref<jdk::internal::module::IllegalAccessLogger> illegalAccessLogger() { return call_static_method<"illegalAccessLogger", jni::ref<jdk::internal::module::IllegalAccessLogger>>(); }
	jboolean isExportedForIllegalAccess(jni::ref<java::lang::Module> module, jni::ref<java::lang::String> pn) { return call_method<"isExportedForIllegalAccess", jboolean>(module, pn); }
	jboolean isOpenForIllegalAccess(jni::ref<java::lang::Module> module, jni::ref<java::lang::String> pn) { return call_method<"isOpenForIllegalAccess", jboolean>(module, pn); }
	void logIfExportedForIllegalAccess(jni::ref<java::lang::Class> caller, jni::ref<java::lang::Class> target, jni::ref<java::util::function::Supplier> whatSupplier) { return call_method<"logIfExportedForIllegalAccess", void>(caller, target, whatSupplier); }
	void logIfOpenedForIllegalAccess(jni::ref<java::lang::Class> caller, jni::ref<java::lang::Class> target, jni::ref<java::util::function::Supplier> whatSupplier) { return call_method<"logIfOpenedForIllegalAccess", void>(caller, target, whatSupplier); }
	void logIfOpenedForIllegalAccess(jni::ref<java::lang::invoke::MethodHandles_Lookup> caller, jni::ref<java::lang::Class> target) { return call_method<"logIfOpenedForIllegalAccess", void>(caller, target); }

protected:

	IllegalAccessLogger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_ILLEGALACCESSLOGGER
