// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGELOCATION_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGELOCATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::jimage { class ImageLocation; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::jimage::ImageLocation>
{
	static constexpr fixed_string class_name = "jdk/internal/jimage/ImageLocation";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGELOCATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGELOCATION)
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGELOCATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/jdk/internal/jimage/ImageStrings.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::jimage::ImageLocation : public jni::object_base<"jdk/internal/jimage/ImageLocation",
	java::lang::Object>
{
public:

	static jint ATTRIBUTE_END() { return get_static_field<"ATTRIBUTE_END", jint>(); }
	static jint ATTRIBUTE_MODULE() { return get_static_field<"ATTRIBUTE_MODULE", jint>(); }
	static jint ATTRIBUTE_PARENT() { return get_static_field<"ATTRIBUTE_PARENT", jint>(); }
	static jint ATTRIBUTE_BASE() { return get_static_field<"ATTRIBUTE_BASE", jint>(); }
	static jint ATTRIBUTE_EXTENSION() { return get_static_field<"ATTRIBUTE_EXTENSION", jint>(); }
	static jint ATTRIBUTE_OFFSET() { return get_static_field<"ATTRIBUTE_OFFSET", jint>(); }
	static jint ATTRIBUTE_COMPRESSED() { return get_static_field<"ATTRIBUTE_COMPRESSED", jint>(); }
	static jint ATTRIBUTE_UNCOMPRESSED() { return get_static_field<"ATTRIBUTE_UNCOMPRESSED", jint>(); }
	static jint ATTRIBUTE_COUNT() { return get_static_field<"ATTRIBUTE_COUNT", jint>(); }

	static jni::ref<jdk::internal::jimage::ImageLocation> new_object(jni::ref<jni::array<jlong>> attributes, jni::ref<jdk::internal::jimage::ImageStrings> strings) { return base_::new_object(attributes, strings); }
	static jni::ref<jni::array<jbyte>> compress(jni::ref<jni::array<jlong>> attributes) { return call_static_method<"compress", jni::ref<jni::array<jbyte>>>(attributes); }
	jboolean verify(jni::ref<java::lang::String> name) { return call_method<"verify", jboolean>(name); }
	jni::ref<java::lang::String> getModule() { return call_method<"getModule", jni::ref<java::lang::String>>(); }
	jint getModuleOffset() { return call_method<"getModuleOffset", jint>(); }
	jni::ref<java::lang::String> getBase() { return call_method<"getBase", jni::ref<java::lang::String>>(); }
	jint getBaseOffset() { return call_method<"getBaseOffset", jint>(); }
	jni::ref<java::lang::String> getParent() { return call_method<"getParent", jni::ref<java::lang::String>>(); }
	jint getParentOffset() { return call_method<"getParentOffset", jint>(); }
	jni::ref<java::lang::String> getExtension() { return call_method<"getExtension", jni::ref<java::lang::String>>(); }
	jint getExtensionOffset() { return call_method<"getExtensionOffset", jint>(); }
	jni::ref<java::lang::String> getFullName() { return call_method<"getFullName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFullName(jboolean modulesPrefix) { return call_method<"getFullName", jni::ref<java::lang::String>>(modulesPrefix); }
	jlong getContentOffset() { return call_method<"getContentOffset", jlong>(); }
	jlong getCompressedSize() { return call_method<"getCompressedSize", jlong>(); }
	jlong getUncompressedSize() { return call_method<"getUncompressedSize", jlong>(); }

protected:

	ImageLocation(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGELOCATION
