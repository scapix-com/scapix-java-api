// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/jimage/decompressor/ResourceDecompressorFactory.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_ZIPDECOMPRESSORFACTORY_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_ZIPDECOMPRESSORFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::jimage::decompressor { class ZipDecompressorFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::jimage::decompressor::ZipDecompressorFactory>
{
	static constexpr fixed_string class_name = "jdk/internal/jimage/decompressor/ZipDecompressorFactory";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::jimage::decompressor::ResourceDecompressorFactory>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_ZIPDECOMPRESSORFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_ZIPDECOMPRESSORFACTORY)
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_ZIPDECOMPRESSORFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/jdk/internal/jimage/decompressor/ResourceDecompressor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::jimage::decompressor::ZipDecompressorFactory : public jni::object_base<"jdk/internal/jimage/decompressor/ZipDecompressorFactory",
	jdk::internal::jimage::decompressor::ResourceDecompressorFactory>
{
public:

	static jni::ref<java::lang::String> NAME() { return get_static_field<"NAME", jni::ref<java::lang::String>>(); }

	static jni::ref<jdk::internal::jimage::decompressor::ZipDecompressorFactory> new_object() { return base_::new_object(); }
	jni::ref<jdk::internal::jimage::decompressor::ResourceDecompressor> newDecompressor(jni::ref<java::util::Properties> properties) { return call_method<"newDecompressor", jni::ref<jdk::internal::jimage::decompressor::ResourceDecompressor>>(properties); }

protected:

	ZipDecompressorFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_DECOMPRESSOR_ZIPDECOMPRESSORFACTORY
