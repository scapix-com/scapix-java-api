// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEREADER_NODE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEREADER_NODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::jimage { class ImageReader_Node; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::jimage::ImageReader_Node>
{
	static constexpr fixed_string class_name = "jdk/internal/jimage/ImageReader$Node";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEREADER_NODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEREADER_NODE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEREADER_NODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/file/attribute/BasicFileAttributes.h>
#include <scapix/java_api/java/nio/file/attribute/FileTime.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/jimage/ImageLocation.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::jimage::ImageReader_Node : public jni::object_base<"jdk/internal/jimage/ImageReader$Node",
	java::lang::Object>
{
public:

	jboolean isCompleted() { return call_method<"isCompleted", jboolean>(); }
	void setCompleted(jboolean completed) { return call_method<"setCompleted", void>(completed); }
	void setIsRootDir() { return call_method<"setIsRootDir", void>(); }
	jboolean isRootDir() { return call_method<"isRootDir", jboolean>(); }
	void setIsPackagesDir() { return call_method<"setIsPackagesDir", void>(); }
	jboolean isPackagesDir() { return call_method<"isPackagesDir", jboolean>(); }
	void setIsModulesDir() { return call_method<"setIsModulesDir", void>(); }
	jboolean isModulesDir() { return call_method<"isModulesDir", jboolean>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::nio::file::attribute::BasicFileAttributes> getFileAttributes() { return call_method<"getFileAttributes", jni::ref<java::nio::file::attribute::BasicFileAttributes>>(); }
	jni::ref<jdk::internal::jimage::ImageReader_Node> resolveLink() { return call_method<"resolveLink", jni::ref<jdk::internal::jimage::ImageReader_Node>>(); }
	jni::ref<jdk::internal::jimage::ImageReader_Node> resolveLink(jboolean recursive) { return call_method<"resolveLink", jni::ref<jdk::internal::jimage::ImageReader_Node>>(recursive); }
	jboolean isLink() { return call_method<"isLink", jboolean>(); }
	jboolean isDirectory() { return call_method<"isDirectory", jboolean>(); }
	jni::ref<java::util::List> getChildren() { return call_method<"getChildren", jni::ref<java::util::List>>(); }
	jboolean isResource() { return call_method<"isResource", jboolean>(); }
	jni::ref<jdk::internal::jimage::ImageLocation> getLocation() { return call_method<"getLocation", jni::ref<jdk::internal::jimage::ImageLocation>>(); }
	jlong size() { return call_method<"size", jlong>(); }
	jlong compressedSize() { return call_method<"compressedSize", jlong>(); }
	jni::ref<java::lang::String> extension() { return call_method<"extension", jni::ref<java::lang::String>>(); }
	jlong contentOffset() { return call_method<"contentOffset", jlong>(); }
	jni::ref<java::nio::file::attribute::FileTime> creationTime() { return call_method<"creationTime", jni::ref<java::nio::file::attribute::FileTime>>(); }
	jni::ref<java::nio::file::attribute::FileTime> lastAccessTime() { return call_method<"lastAccessTime", jni::ref<java::nio::file::attribute::FileTime>>(); }
	jni::ref<java::nio::file::attribute::FileTime> lastModifiedTime() { return call_method<"lastModifiedTime", jni::ref<java::nio::file::attribute::FileTime>>(); }
	jni::ref<java::lang::String> getNameString() { return call_method<"getNameString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }

protected:

	ImageReader_Node(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEREADER_NODE
