// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MISC_UNSAFE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_UNSAFE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::misc { class Unsafe; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::misc::Unsafe>
{
	static constexpr fixed_string class_name = "jdk/internal/misc/Unsafe";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_UNSAFE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MISC_UNSAFE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_UNSAFE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/security/ProtectionDomain.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::misc::Unsafe : public jni::object_base<"jdk/internal/misc/Unsafe",
	java::lang::Object>
{
public:

	static jint INVALID_FIELD_OFFSET() { return get_static_field<"INVALID_FIELD_OFFSET", jint>(); }
	static jint ARRAY_BOOLEAN_BASE_OFFSET() { return get_static_field<"ARRAY_BOOLEAN_BASE_OFFSET", jint>(); }
	static jint ARRAY_BYTE_BASE_OFFSET() { return get_static_field<"ARRAY_BYTE_BASE_OFFSET", jint>(); }
	static jint ARRAY_SHORT_BASE_OFFSET() { return get_static_field<"ARRAY_SHORT_BASE_OFFSET", jint>(); }
	static jint ARRAY_CHAR_BASE_OFFSET() { return get_static_field<"ARRAY_CHAR_BASE_OFFSET", jint>(); }
	static jint ARRAY_INT_BASE_OFFSET() { return get_static_field<"ARRAY_INT_BASE_OFFSET", jint>(); }
	static jint ARRAY_LONG_BASE_OFFSET() { return get_static_field<"ARRAY_LONG_BASE_OFFSET", jint>(); }
	static jint ARRAY_FLOAT_BASE_OFFSET() { return get_static_field<"ARRAY_FLOAT_BASE_OFFSET", jint>(); }
	static jint ARRAY_DOUBLE_BASE_OFFSET() { return get_static_field<"ARRAY_DOUBLE_BASE_OFFSET", jint>(); }
	static jint ARRAY_OBJECT_BASE_OFFSET() { return get_static_field<"ARRAY_OBJECT_BASE_OFFSET", jint>(); }
	static jint ARRAY_BOOLEAN_INDEX_SCALE() { return get_static_field<"ARRAY_BOOLEAN_INDEX_SCALE", jint>(); }
	static jint ARRAY_BYTE_INDEX_SCALE() { return get_static_field<"ARRAY_BYTE_INDEX_SCALE", jint>(); }
	static jint ARRAY_SHORT_INDEX_SCALE() { return get_static_field<"ARRAY_SHORT_INDEX_SCALE", jint>(); }
	static jint ARRAY_CHAR_INDEX_SCALE() { return get_static_field<"ARRAY_CHAR_INDEX_SCALE", jint>(); }
	static jint ARRAY_INT_INDEX_SCALE() { return get_static_field<"ARRAY_INT_INDEX_SCALE", jint>(); }
	static jint ARRAY_LONG_INDEX_SCALE() { return get_static_field<"ARRAY_LONG_INDEX_SCALE", jint>(); }
	static jint ARRAY_FLOAT_INDEX_SCALE() { return get_static_field<"ARRAY_FLOAT_INDEX_SCALE", jint>(); }
	static jint ARRAY_DOUBLE_INDEX_SCALE() { return get_static_field<"ARRAY_DOUBLE_INDEX_SCALE", jint>(); }
	static jint ARRAY_OBJECT_INDEX_SCALE() { return get_static_field<"ARRAY_OBJECT_INDEX_SCALE", jint>(); }
	static jint ADDRESS_SIZE() { return get_static_field<"ADDRESS_SIZE", jint>(); }

	static jni::ref<jdk::internal::misc::Unsafe> getUnsafe() { return call_static_method<"getUnsafe", jni::ref<jdk::internal::misc::Unsafe>>(); }
	jint getInt(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getInt", jint>(p1, p2); }
	void putInt(jni::ref<java::lang::Object> p1, jlong p2, jint p3) { return call_method<"putInt", void>(p1, p2, p3); }
	jni::ref<java::lang::Object> getObject(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	void putObject(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3) { return call_method<"putObject", void>(p1, p2, p3); }
	jboolean getBoolean(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getBoolean", jboolean>(p1, p2); }
	void putBoolean(jni::ref<java::lang::Object> p1, jlong p2, jboolean p3) { return call_method<"putBoolean", void>(p1, p2, p3); }
	jbyte getByte(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getByte", jbyte>(p1, p2); }
	void putByte(jni::ref<java::lang::Object> p1, jlong p2, jbyte p3) { return call_method<"putByte", void>(p1, p2, p3); }
	jshort getShort(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getShort", jshort>(p1, p2); }
	void putShort(jni::ref<java::lang::Object> p1, jlong p2, jshort p3) { return call_method<"putShort", void>(p1, p2, p3); }
	jchar getChar(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getChar", jchar>(p1, p2); }
	void putChar(jni::ref<java::lang::Object> p1, jlong p2, jchar p3) { return call_method<"putChar", void>(p1, p2, p3); }
	jlong getLong(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getLong", jlong>(p1, p2); }
	void putLong(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"putLong", void>(p1, p2, p3); }
	jfloat getFloat(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getFloat", jfloat>(p1, p2); }
	void putFloat(jni::ref<java::lang::Object> p1, jlong p2, jfloat p3) { return call_method<"putFloat", void>(p1, p2, p3); }
	jdouble getDouble(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getDouble", jdouble>(p1, p2); }
	void putDouble(jni::ref<java::lang::Object> p1, jlong p2, jdouble p3) { return call_method<"putDouble", void>(p1, p2, p3); }
	jlong getAddress(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getAddress", jlong>(o, offset); }
	void putAddress(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"putAddress", void>(o, offset, p3); }
	jni::ref<java::lang::Object> getUncompressedObject(jlong p1) { return call_method<"getUncompressedObject", jni::ref<java::lang::Object>>(p1); }
	jbyte getByte(jlong address) { return call_method<"getByte", jbyte>(address); }
	void putByte(jlong address, jbyte p2) { return call_method<"putByte", void>(address, p2); }
	jshort getShort(jlong address) { return call_method<"getShort", jshort>(address); }
	void putShort(jlong address, jshort p2) { return call_method<"putShort", void>(address, p2); }
	jchar getChar(jlong address) { return call_method<"getChar", jchar>(address); }
	void putChar(jlong address, jchar p2) { return call_method<"putChar", void>(address, p2); }
	jint getInt(jlong address) { return call_method<"getInt", jint>(address); }
	void putInt(jlong address, jint p2) { return call_method<"putInt", void>(address, p2); }
	jlong getLong(jlong address) { return call_method<"getLong", jlong>(address); }
	void putLong(jlong address, jlong p2) { return call_method<"putLong", void>(address, p2); }
	jfloat getFloat(jlong address) { return call_method<"getFloat", jfloat>(address); }
	void putFloat(jlong address, jfloat p2) { return call_method<"putFloat", void>(address, p2); }
	jdouble getDouble(jlong address) { return call_method<"getDouble", jdouble>(address); }
	void putDouble(jlong address, jdouble p2) { return call_method<"putDouble", void>(address, p2); }
	jlong getAddress(jlong address) { return call_method<"getAddress", jlong>(address); }
	void putAddress(jlong address, jlong p2) { return call_method<"putAddress", void>(address, p2); }
	jlong allocateMemory(jlong bytes) { return call_method<"allocateMemory", jlong>(bytes); }
	jlong reallocateMemory(jlong address, jlong p2) { return call_method<"reallocateMemory", jlong>(address, p2); }
	void setMemory(jni::ref<java::lang::Object> o, jlong offset, jlong p3, jbyte bytes) { return call_method<"setMemory", void>(o, offset, p3, bytes); }
	void setMemory(jlong address, jlong p2, jbyte bytes) { return call_method<"setMemory", void>(address, p2, bytes); }
	void copyMemory(jni::ref<java::lang::Object> srcBase, jlong srcOffset, jni::ref<java::lang::Object> p3, jlong destBase, jlong destOffset) { return call_method<"copyMemory", void>(srcBase, srcOffset, p3, destBase, destOffset); }
	void copyMemory(jlong srcAddress, jlong p2, jlong destAddress) { return call_method<"copyMemory", void>(srcAddress, p2, destAddress); }
	void copySwapMemory(jni::ref<java::lang::Object> srcBase, jlong srcOffset, jni::ref<java::lang::Object> p3, jlong destBase, jlong destOffset, jlong p6) { return call_method<"copySwapMemory", void>(srcBase, srcOffset, p3, destBase, destOffset, p6); }
	void copySwapMemory(jlong srcAddress, jlong p2, jlong destAddress, jlong p4) { return call_method<"copySwapMemory", void>(srcAddress, p2, destAddress, p4); }
	void freeMemory(jlong address) { return call_method<"freeMemory", void>(address); }
	jlong objectFieldOffset(jni::ref<java::lang::reflect::Field> f) { return call_method<"objectFieldOffset", jlong>(f); }
	jlong objectFieldOffset(jni::ref<java::lang::Class> c, jni::ref<java::lang::String> name) { return call_method<"objectFieldOffset", jlong>(c, name); }
	jlong staticFieldOffset(jni::ref<java::lang::reflect::Field> f) { return call_method<"staticFieldOffset", jlong>(f); }
	jni::ref<java::lang::Object> staticFieldBase(jni::ref<java::lang::reflect::Field> f) { return call_method<"staticFieldBase", jni::ref<java::lang::Object>>(f); }
	jboolean shouldBeInitialized(jni::ref<java::lang::Class> c) { return call_method<"shouldBeInitialized", jboolean>(c); }
	void ensureClassInitialized(jni::ref<java::lang::Class> c) { return call_method<"ensureClassInitialized", void>(c); }
	jint arrayBaseOffset(jni::ref<java::lang::Class> arrayClass) { return call_method<"arrayBaseOffset", jint>(arrayClass); }
	jint arrayIndexScale(jni::ref<java::lang::Class> arrayClass) { return call_method<"arrayIndexScale", jint>(arrayClass); }
	jint addressSize() { return call_method<"addressSize", jint>(); }
	jint pageSize() { return call_method<"pageSize", jint>(); }
	jni::ref<java::lang::Class> defineClass(jni::ref<java::lang::String> name, jni::ref<jni::array<jbyte>> b, jint off, jint len, jni::ref<java::lang::ClassLoader> loader, jni::ref<java::security::ProtectionDomain> protectionDomain) { return call_method<"defineClass", jni::ref<java::lang::Class>>(name, b, off, len, loader, protectionDomain); }
	jni::ref<java::lang::Class> defineClass0(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jint p4, jni::ref<java::lang::ClassLoader> p5, jni::ref<java::security::ProtectionDomain> p6) { return call_method<"defineClass0", jni::ref<java::lang::Class>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::lang::Class> defineAnonymousClass(jni::ref<java::lang::Class> hostClass, jni::ref<jni::array<jbyte>> data, jni::ref<jni::array<java::lang::Object>> cpPatches) { return call_method<"defineAnonymousClass", jni::ref<java::lang::Class>>(hostClass, data, cpPatches); }
	jni::ref<java::lang::Object> allocateInstance(jni::ref<java::lang::Class> p1) { return call_method<"allocateInstance", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> allocateUninitializedArray(jni::ref<java::lang::Class> componentType, jint length) { return call_method<"allocateUninitializedArray", jni::ref<java::lang::Object>>(componentType, length); }
	void throwException(jni::ref<java::lang::Throwable> p1) { return call_method<"throwException", void>(p1); }
	jboolean compareAndSetObject(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> p4) { return call_method<"compareAndSetObject", jboolean>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> compareAndExchangeObject(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> p4) { return call_method<"compareAndExchangeObject", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> compareAndExchangeObjectAcquire(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> expected) { return call_method<"compareAndExchangeObjectAcquire", jni::ref<java::lang::Object>>(o, offset, p3, expected); }
	jni::ref<java::lang::Object> compareAndExchangeObjectRelease(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> expected) { return call_method<"compareAndExchangeObjectRelease", jni::ref<java::lang::Object>>(o, offset, p3, expected); }
	jboolean weakCompareAndSetObjectPlain(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> expected) { return call_method<"weakCompareAndSetObjectPlain", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetObjectAcquire(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> expected) { return call_method<"weakCompareAndSetObjectAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetObjectRelease(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> expected) { return call_method<"weakCompareAndSetObjectRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetObject(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> expected) { return call_method<"weakCompareAndSetObject", jboolean>(o, offset, p3, expected); }
	jboolean compareAndSetInt(jni::ref<java::lang::Object> p1, jlong p2, jint p3, jint p4) { return call_method<"compareAndSetInt", jboolean>(p1, p2, p3, p4); }
	jint compareAndExchangeInt(jni::ref<java::lang::Object> p1, jlong p2, jint p3, jint p4) { return call_method<"compareAndExchangeInt", jint>(p1, p2, p3, p4); }
	jint compareAndExchangeIntAcquire(jni::ref<java::lang::Object> o, jlong offset, jint p3, jint expected) { return call_method<"compareAndExchangeIntAcquire", jint>(o, offset, p3, expected); }
	jint compareAndExchangeIntRelease(jni::ref<java::lang::Object> o, jlong offset, jint p3, jint expected) { return call_method<"compareAndExchangeIntRelease", jint>(o, offset, p3, expected); }
	jboolean weakCompareAndSetIntPlain(jni::ref<java::lang::Object> o, jlong offset, jint p3, jint expected) { return call_method<"weakCompareAndSetIntPlain", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetIntAcquire(jni::ref<java::lang::Object> o, jlong offset, jint p3, jint expected) { return call_method<"weakCompareAndSetIntAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetIntRelease(jni::ref<java::lang::Object> o, jlong offset, jint p3, jint expected) { return call_method<"weakCompareAndSetIntRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetInt(jni::ref<java::lang::Object> o, jlong offset, jint p3, jint expected) { return call_method<"weakCompareAndSetInt", jboolean>(o, offset, p3, expected); }
	jbyte compareAndExchangeByte(jni::ref<java::lang::Object> o, jlong offset, jbyte p3, jbyte expected) { return call_method<"compareAndExchangeByte", jbyte>(o, offset, p3, expected); }
	jboolean compareAndSetByte(jni::ref<java::lang::Object> o, jlong offset, jbyte p3, jbyte expected) { return call_method<"compareAndSetByte", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetByte(jni::ref<java::lang::Object> o, jlong offset, jbyte p3, jbyte expected) { return call_method<"weakCompareAndSetByte", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetByteAcquire(jni::ref<java::lang::Object> o, jlong offset, jbyte p3, jbyte expected) { return call_method<"weakCompareAndSetByteAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetByteRelease(jni::ref<java::lang::Object> o, jlong offset, jbyte p3, jbyte expected) { return call_method<"weakCompareAndSetByteRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetBytePlain(jni::ref<java::lang::Object> o, jlong offset, jbyte p3, jbyte expected) { return call_method<"weakCompareAndSetBytePlain", jboolean>(o, offset, p3, expected); }
	jbyte compareAndExchangeByteAcquire(jni::ref<java::lang::Object> o, jlong offset, jbyte p3, jbyte expected) { return call_method<"compareAndExchangeByteAcquire", jbyte>(o, offset, p3, expected); }
	jbyte compareAndExchangeByteRelease(jni::ref<java::lang::Object> o, jlong offset, jbyte p3, jbyte expected) { return call_method<"compareAndExchangeByteRelease", jbyte>(o, offset, p3, expected); }
	jshort compareAndExchangeShort(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jshort expected) { return call_method<"compareAndExchangeShort", jshort>(o, offset, p3, expected); }
	jboolean compareAndSetShort(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jshort expected) { return call_method<"compareAndSetShort", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetShort(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jshort expected) { return call_method<"weakCompareAndSetShort", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetShortAcquire(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jshort expected) { return call_method<"weakCompareAndSetShortAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetShortRelease(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jshort expected) { return call_method<"weakCompareAndSetShortRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetShortPlain(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jshort expected) { return call_method<"weakCompareAndSetShortPlain", jboolean>(o, offset, p3, expected); }
	jshort compareAndExchangeShortAcquire(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jshort expected) { return call_method<"compareAndExchangeShortAcquire", jshort>(o, offset, p3, expected); }
	jshort compareAndExchangeShortRelease(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jshort expected) { return call_method<"compareAndExchangeShortRelease", jshort>(o, offset, p3, expected); }
	jboolean compareAndSetChar(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jchar expected) { return call_method<"compareAndSetChar", jboolean>(o, offset, p3, expected); }
	jchar compareAndExchangeChar(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jchar expected) { return call_method<"compareAndExchangeChar", jchar>(o, offset, p3, expected); }
	jchar compareAndExchangeCharAcquire(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jchar expected) { return call_method<"compareAndExchangeCharAcquire", jchar>(o, offset, p3, expected); }
	jchar compareAndExchangeCharRelease(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jchar expected) { return call_method<"compareAndExchangeCharRelease", jchar>(o, offset, p3, expected); }
	jboolean weakCompareAndSetChar(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jchar expected) { return call_method<"weakCompareAndSetChar", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetCharAcquire(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jchar expected) { return call_method<"weakCompareAndSetCharAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetCharRelease(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jchar expected) { return call_method<"weakCompareAndSetCharRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetCharPlain(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jchar expected) { return call_method<"weakCompareAndSetCharPlain", jboolean>(o, offset, p3, expected); }
	jboolean compareAndSetBoolean(jni::ref<java::lang::Object> o, jlong offset, jboolean p3, jboolean expected) { return call_method<"compareAndSetBoolean", jboolean>(o, offset, p3, expected); }
	jboolean compareAndExchangeBoolean(jni::ref<java::lang::Object> o, jlong offset, jboolean p3, jboolean expected) { return call_method<"compareAndExchangeBoolean", jboolean>(o, offset, p3, expected); }
	jboolean compareAndExchangeBooleanAcquire(jni::ref<java::lang::Object> o, jlong offset, jboolean p3, jboolean expected) { return call_method<"compareAndExchangeBooleanAcquire", jboolean>(o, offset, p3, expected); }
	jboolean compareAndExchangeBooleanRelease(jni::ref<java::lang::Object> o, jlong offset, jboolean p3, jboolean expected) { return call_method<"compareAndExchangeBooleanRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetBoolean(jni::ref<java::lang::Object> o, jlong offset, jboolean p3, jboolean expected) { return call_method<"weakCompareAndSetBoolean", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetBooleanAcquire(jni::ref<java::lang::Object> o, jlong offset, jboolean p3, jboolean expected) { return call_method<"weakCompareAndSetBooleanAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetBooleanRelease(jni::ref<java::lang::Object> o, jlong offset, jboolean p3, jboolean expected) { return call_method<"weakCompareAndSetBooleanRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetBooleanPlain(jni::ref<java::lang::Object> o, jlong offset, jboolean p3, jboolean expected) { return call_method<"weakCompareAndSetBooleanPlain", jboolean>(o, offset, p3, expected); }
	jboolean compareAndSetFloat(jni::ref<java::lang::Object> o, jlong offset, jfloat p3, jfloat expected) { return call_method<"compareAndSetFloat", jboolean>(o, offset, p3, expected); }
	jfloat compareAndExchangeFloat(jni::ref<java::lang::Object> o, jlong offset, jfloat p3, jfloat expected) { return call_method<"compareAndExchangeFloat", jfloat>(o, offset, p3, expected); }
	jfloat compareAndExchangeFloatAcquire(jni::ref<java::lang::Object> o, jlong offset, jfloat p3, jfloat expected) { return call_method<"compareAndExchangeFloatAcquire", jfloat>(o, offset, p3, expected); }
	jfloat compareAndExchangeFloatRelease(jni::ref<java::lang::Object> o, jlong offset, jfloat p3, jfloat expected) { return call_method<"compareAndExchangeFloatRelease", jfloat>(o, offset, p3, expected); }
	jboolean weakCompareAndSetFloatPlain(jni::ref<java::lang::Object> o, jlong offset, jfloat p3, jfloat expected) { return call_method<"weakCompareAndSetFloatPlain", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetFloatAcquire(jni::ref<java::lang::Object> o, jlong offset, jfloat p3, jfloat expected) { return call_method<"weakCompareAndSetFloatAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetFloatRelease(jni::ref<java::lang::Object> o, jlong offset, jfloat p3, jfloat expected) { return call_method<"weakCompareAndSetFloatRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetFloat(jni::ref<java::lang::Object> o, jlong offset, jfloat p3, jfloat expected) { return call_method<"weakCompareAndSetFloat", jboolean>(o, offset, p3, expected); }
	jboolean compareAndSetDouble(jni::ref<java::lang::Object> o, jlong offset, jdouble p3, jdouble expected) { return call_method<"compareAndSetDouble", jboolean>(o, offset, p3, expected); }
	jdouble compareAndExchangeDouble(jni::ref<java::lang::Object> o, jlong offset, jdouble p3, jdouble expected) { return call_method<"compareAndExchangeDouble", jdouble>(o, offset, p3, expected); }
	jdouble compareAndExchangeDoubleAcquire(jni::ref<java::lang::Object> o, jlong offset, jdouble p3, jdouble expected) { return call_method<"compareAndExchangeDoubleAcquire", jdouble>(o, offset, p3, expected); }
	jdouble compareAndExchangeDoubleRelease(jni::ref<java::lang::Object> o, jlong offset, jdouble p3, jdouble expected) { return call_method<"compareAndExchangeDoubleRelease", jdouble>(o, offset, p3, expected); }
	jboolean weakCompareAndSetDoublePlain(jni::ref<java::lang::Object> o, jlong offset, jdouble p3, jdouble expected) { return call_method<"weakCompareAndSetDoublePlain", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetDoubleAcquire(jni::ref<java::lang::Object> o, jlong offset, jdouble p3, jdouble expected) { return call_method<"weakCompareAndSetDoubleAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetDoubleRelease(jni::ref<java::lang::Object> o, jlong offset, jdouble p3, jdouble expected) { return call_method<"weakCompareAndSetDoubleRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetDouble(jni::ref<java::lang::Object> o, jlong offset, jdouble p3, jdouble expected) { return call_method<"weakCompareAndSetDouble", jboolean>(o, offset, p3, expected); }
	jboolean compareAndSetLong(jni::ref<java::lang::Object> p1, jlong p2, jlong p3, jlong p4) { return call_method<"compareAndSetLong", jboolean>(p1, p2, p3, p4); }
	jlong compareAndExchangeLong(jni::ref<java::lang::Object> p1, jlong p2, jlong p3, jlong p4) { return call_method<"compareAndExchangeLong", jlong>(p1, p2, p3, p4); }
	jlong compareAndExchangeLongAcquire(jni::ref<java::lang::Object> o, jlong offset, jlong p3, jlong expected) { return call_method<"compareAndExchangeLongAcquire", jlong>(o, offset, p3, expected); }
	jlong compareAndExchangeLongRelease(jni::ref<java::lang::Object> o, jlong offset, jlong p3, jlong expected) { return call_method<"compareAndExchangeLongRelease", jlong>(o, offset, p3, expected); }
	jboolean weakCompareAndSetLongPlain(jni::ref<java::lang::Object> o, jlong offset, jlong p3, jlong expected) { return call_method<"weakCompareAndSetLongPlain", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetLongAcquire(jni::ref<java::lang::Object> o, jlong offset, jlong p3, jlong expected) { return call_method<"weakCompareAndSetLongAcquire", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetLongRelease(jni::ref<java::lang::Object> o, jlong offset, jlong p3, jlong expected) { return call_method<"weakCompareAndSetLongRelease", jboolean>(o, offset, p3, expected); }
	jboolean weakCompareAndSetLong(jni::ref<java::lang::Object> o, jlong offset, jlong p3, jlong expected) { return call_method<"weakCompareAndSetLong", jboolean>(o, offset, p3, expected); }
	jni::ref<java::lang::Object> getObjectVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getObjectVolatile", jni::ref<java::lang::Object>>(p1, p2); }
	void putObjectVolatile(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3) { return call_method<"putObjectVolatile", void>(p1, p2, p3); }
	jint getIntVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getIntVolatile", jint>(p1, p2); }
	void putIntVolatile(jni::ref<java::lang::Object> p1, jlong p2, jint p3) { return call_method<"putIntVolatile", void>(p1, p2, p3); }
	jboolean getBooleanVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getBooleanVolatile", jboolean>(p1, p2); }
	void putBooleanVolatile(jni::ref<java::lang::Object> p1, jlong p2, jboolean p3) { return call_method<"putBooleanVolatile", void>(p1, p2, p3); }
	jbyte getByteVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getByteVolatile", jbyte>(p1, p2); }
	void putByteVolatile(jni::ref<java::lang::Object> p1, jlong p2, jbyte p3) { return call_method<"putByteVolatile", void>(p1, p2, p3); }
	jshort getShortVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getShortVolatile", jshort>(p1, p2); }
	void putShortVolatile(jni::ref<java::lang::Object> p1, jlong p2, jshort p3) { return call_method<"putShortVolatile", void>(p1, p2, p3); }
	jchar getCharVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getCharVolatile", jchar>(p1, p2); }
	void putCharVolatile(jni::ref<java::lang::Object> p1, jlong p2, jchar p3) { return call_method<"putCharVolatile", void>(p1, p2, p3); }
	jlong getLongVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getLongVolatile", jlong>(p1, p2); }
	void putLongVolatile(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"putLongVolatile", void>(p1, p2, p3); }
	jfloat getFloatVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getFloatVolatile", jfloat>(p1, p2); }
	void putFloatVolatile(jni::ref<java::lang::Object> p1, jlong p2, jfloat p3) { return call_method<"putFloatVolatile", void>(p1, p2, p3); }
	jdouble getDoubleVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getDoubleVolatile", jdouble>(p1, p2); }
	void putDoubleVolatile(jni::ref<java::lang::Object> p1, jlong p2, jdouble p3) { return call_method<"putDoubleVolatile", void>(p1, p2, p3); }
	jni::ref<java::lang::Object> getObjectAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getObjectAcquire", jni::ref<java::lang::Object>>(o, offset); }
	jboolean getBooleanAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getBooleanAcquire", jboolean>(o, offset); }
	jbyte getByteAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getByteAcquire", jbyte>(o, offset); }
	jshort getShortAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getShortAcquire", jshort>(o, offset); }
	jchar getCharAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getCharAcquire", jchar>(o, offset); }
	jint getIntAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getIntAcquire", jint>(o, offset); }
	jfloat getFloatAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getFloatAcquire", jfloat>(o, offset); }
	jlong getLongAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getLongAcquire", jlong>(o, offset); }
	jdouble getDoubleAcquire(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getDoubleAcquire", jdouble>(o, offset); }
	void putObjectRelease(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3) { return call_method<"putObjectRelease", void>(o, offset, p3); }
	void putBooleanRelease(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"putBooleanRelease", void>(o, offset, p3); }
	void putByteRelease(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"putByteRelease", void>(o, offset, p3); }
	void putShortRelease(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"putShortRelease", void>(o, offset, p3); }
	void putCharRelease(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"putCharRelease", void>(o, offset, p3); }
	void putIntRelease(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"putIntRelease", void>(o, offset, p3); }
	void putFloatRelease(jni::ref<java::lang::Object> o, jlong offset, jfloat p3) { return call_method<"putFloatRelease", void>(o, offset, p3); }
	void putLongRelease(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"putLongRelease", void>(o, offset, p3); }
	void putDoubleRelease(jni::ref<java::lang::Object> o, jlong offset, jdouble p3) { return call_method<"putDoubleRelease", void>(o, offset, p3); }
	jni::ref<java::lang::Object> getObjectOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getObjectOpaque", jni::ref<java::lang::Object>>(o, offset); }
	jboolean getBooleanOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getBooleanOpaque", jboolean>(o, offset); }
	jbyte getByteOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getByteOpaque", jbyte>(o, offset); }
	jshort getShortOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getShortOpaque", jshort>(o, offset); }
	jchar getCharOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getCharOpaque", jchar>(o, offset); }
	jint getIntOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getIntOpaque", jint>(o, offset); }
	jfloat getFloatOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getFloatOpaque", jfloat>(o, offset); }
	jlong getLongOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getLongOpaque", jlong>(o, offset); }
	jdouble getDoubleOpaque(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getDoubleOpaque", jdouble>(o, offset); }
	void putObjectOpaque(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3) { return call_method<"putObjectOpaque", void>(o, offset, p3); }
	void putBooleanOpaque(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"putBooleanOpaque", void>(o, offset, p3); }
	void putByteOpaque(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"putByteOpaque", void>(o, offset, p3); }
	void putShortOpaque(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"putShortOpaque", void>(o, offset, p3); }
	void putCharOpaque(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"putCharOpaque", void>(o, offset, p3); }
	void putIntOpaque(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"putIntOpaque", void>(o, offset, p3); }
	void putFloatOpaque(jni::ref<java::lang::Object> o, jlong offset, jfloat p3) { return call_method<"putFloatOpaque", void>(o, offset, p3); }
	void putLongOpaque(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"putLongOpaque", void>(o, offset, p3); }
	void putDoubleOpaque(jni::ref<java::lang::Object> o, jlong offset, jdouble p3) { return call_method<"putDoubleOpaque", void>(o, offset, p3); }
	void unpark(jni::ref<java::lang::Object> p1) { return call_method<"unpark", void>(p1); }
	void park(jboolean p1, jlong p2) { return call_method<"park", void>(p1, p2); }
	jint getLoadAverage(jni::ref<jni::array<jdouble>> loadavg, jint nelems) { return call_method<"getLoadAverage", jint>(loadavg, nelems); }
	jint getAndAddInt(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndAddInt", jint>(o, offset, p3); }
	jint getAndAddIntRelease(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndAddIntRelease", jint>(o, offset, p3); }
	jint getAndAddIntAcquire(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndAddIntAcquire", jint>(o, offset, p3); }
	jlong getAndAddLong(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndAddLong", jlong>(o, offset, p3); }
	jlong getAndAddLongRelease(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndAddLongRelease", jlong>(o, offset, p3); }
	jlong getAndAddLongAcquire(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndAddLongAcquire", jlong>(o, offset, p3); }
	jbyte getAndAddByte(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndAddByte", jbyte>(o, offset, p3); }
	jbyte getAndAddByteRelease(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndAddByteRelease", jbyte>(o, offset, p3); }
	jbyte getAndAddByteAcquire(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndAddByteAcquire", jbyte>(o, offset, p3); }
	jshort getAndAddShort(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndAddShort", jshort>(o, offset, p3); }
	jshort getAndAddShortRelease(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndAddShortRelease", jshort>(o, offset, p3); }
	jshort getAndAddShortAcquire(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndAddShortAcquire", jshort>(o, offset, p3); }
	jchar getAndAddChar(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndAddChar", jchar>(o, offset, p3); }
	jchar getAndAddCharRelease(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndAddCharRelease", jchar>(o, offset, p3); }
	jchar getAndAddCharAcquire(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndAddCharAcquire", jchar>(o, offset, p3); }
	jfloat getAndAddFloat(jni::ref<java::lang::Object> o, jlong offset, jfloat p3) { return call_method<"getAndAddFloat", jfloat>(o, offset, p3); }
	jfloat getAndAddFloatRelease(jni::ref<java::lang::Object> o, jlong offset, jfloat p3) { return call_method<"getAndAddFloatRelease", jfloat>(o, offset, p3); }
	jfloat getAndAddFloatAcquire(jni::ref<java::lang::Object> o, jlong offset, jfloat p3) { return call_method<"getAndAddFloatAcquire", jfloat>(o, offset, p3); }
	jdouble getAndAddDouble(jni::ref<java::lang::Object> o, jlong offset, jdouble p3) { return call_method<"getAndAddDouble", jdouble>(o, offset, p3); }
	jdouble getAndAddDoubleRelease(jni::ref<java::lang::Object> o, jlong offset, jdouble p3) { return call_method<"getAndAddDoubleRelease", jdouble>(o, offset, p3); }
	jdouble getAndAddDoubleAcquire(jni::ref<java::lang::Object> o, jlong offset, jdouble p3) { return call_method<"getAndAddDoubleAcquire", jdouble>(o, offset, p3); }
	jint getAndSetInt(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndSetInt", jint>(o, offset, p3); }
	jint getAndSetIntRelease(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndSetIntRelease", jint>(o, offset, p3); }
	jint getAndSetIntAcquire(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndSetIntAcquire", jint>(o, offset, p3); }
	jlong getAndSetLong(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndSetLong", jlong>(o, offset, p3); }
	jlong getAndSetLongRelease(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndSetLongRelease", jlong>(o, offset, p3); }
	jlong getAndSetLongAcquire(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndSetLongAcquire", jlong>(o, offset, p3); }
	jni::ref<java::lang::Object> getAndSetObject(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3) { return call_method<"getAndSetObject", jni::ref<java::lang::Object>>(o, offset, p3); }
	jni::ref<java::lang::Object> getAndSetObjectRelease(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3) { return call_method<"getAndSetObjectRelease", jni::ref<java::lang::Object>>(o, offset, p3); }
	jni::ref<java::lang::Object> getAndSetObjectAcquire(jni::ref<java::lang::Object> o, jlong offset, jni::ref<java::lang::Object> p3) { return call_method<"getAndSetObjectAcquire", jni::ref<java::lang::Object>>(o, offset, p3); }
	jbyte getAndSetByte(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndSetByte", jbyte>(o, offset, p3); }
	jbyte getAndSetByteRelease(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndSetByteRelease", jbyte>(o, offset, p3); }
	jbyte getAndSetByteAcquire(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndSetByteAcquire", jbyte>(o, offset, p3); }
	jboolean getAndSetBoolean(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndSetBoolean", jboolean>(o, offset, p3); }
	jboolean getAndSetBooleanRelease(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndSetBooleanRelease", jboolean>(o, offset, p3); }
	jboolean getAndSetBooleanAcquire(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndSetBooleanAcquire", jboolean>(o, offset, p3); }
	jshort getAndSetShort(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndSetShort", jshort>(o, offset, p3); }
	jshort getAndSetShortRelease(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndSetShortRelease", jshort>(o, offset, p3); }
	jshort getAndSetShortAcquire(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndSetShortAcquire", jshort>(o, offset, p3); }
	jchar getAndSetChar(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndSetChar", jchar>(o, offset, p3); }
	jchar getAndSetCharRelease(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndSetCharRelease", jchar>(o, offset, p3); }
	jchar getAndSetCharAcquire(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndSetCharAcquire", jchar>(o, offset, p3); }
	jfloat getAndSetFloat(jni::ref<java::lang::Object> o, jlong offset, jfloat p3) { return call_method<"getAndSetFloat", jfloat>(o, offset, p3); }
	jfloat getAndSetFloatRelease(jni::ref<java::lang::Object> o, jlong offset, jfloat p3) { return call_method<"getAndSetFloatRelease", jfloat>(o, offset, p3); }
	jfloat getAndSetFloatAcquire(jni::ref<java::lang::Object> o, jlong offset, jfloat p3) { return call_method<"getAndSetFloatAcquire", jfloat>(o, offset, p3); }
	jdouble getAndSetDouble(jni::ref<java::lang::Object> o, jlong offset, jdouble p3) { return call_method<"getAndSetDouble", jdouble>(o, offset, p3); }
	jdouble getAndSetDoubleRelease(jni::ref<java::lang::Object> o, jlong offset, jdouble p3) { return call_method<"getAndSetDoubleRelease", jdouble>(o, offset, p3); }
	jdouble getAndSetDoubleAcquire(jni::ref<java::lang::Object> o, jlong offset, jdouble p3) { return call_method<"getAndSetDoubleAcquire", jdouble>(o, offset, p3); }
	jboolean getAndBitwiseOrBoolean(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseOrBoolean", jboolean>(o, offset, p3); }
	jboolean getAndBitwiseOrBooleanRelease(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseOrBooleanRelease", jboolean>(o, offset, p3); }
	jboolean getAndBitwiseOrBooleanAcquire(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseOrBooleanAcquire", jboolean>(o, offset, p3); }
	jboolean getAndBitwiseAndBoolean(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseAndBoolean", jboolean>(o, offset, p3); }
	jboolean getAndBitwiseAndBooleanRelease(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseAndBooleanRelease", jboolean>(o, offset, p3); }
	jboolean getAndBitwiseAndBooleanAcquire(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseAndBooleanAcquire", jboolean>(o, offset, p3); }
	jboolean getAndBitwiseXorBoolean(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseXorBoolean", jboolean>(o, offset, p3); }
	jboolean getAndBitwiseXorBooleanRelease(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseXorBooleanRelease", jboolean>(o, offset, p3); }
	jboolean getAndBitwiseXorBooleanAcquire(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getAndBitwiseXorBooleanAcquire", jboolean>(o, offset, p3); }
	jbyte getAndBitwiseOrByte(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseOrByte", jbyte>(o, offset, p3); }
	jbyte getAndBitwiseOrByteRelease(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseOrByteRelease", jbyte>(o, offset, p3); }
	jbyte getAndBitwiseOrByteAcquire(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseOrByteAcquire", jbyte>(o, offset, p3); }
	jbyte getAndBitwiseAndByte(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseAndByte", jbyte>(o, offset, p3); }
	jbyte getAndBitwiseAndByteRelease(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseAndByteRelease", jbyte>(o, offset, p3); }
	jbyte getAndBitwiseAndByteAcquire(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseAndByteAcquire", jbyte>(o, offset, p3); }
	jbyte getAndBitwiseXorByte(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseXorByte", jbyte>(o, offset, p3); }
	jbyte getAndBitwiseXorByteRelease(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseXorByteRelease", jbyte>(o, offset, p3); }
	jbyte getAndBitwiseXorByteAcquire(jni::ref<java::lang::Object> o, jlong offset, jbyte p3) { return call_method<"getAndBitwiseXorByteAcquire", jbyte>(o, offset, p3); }
	jchar getAndBitwiseOrChar(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseOrChar", jchar>(o, offset, p3); }
	jchar getAndBitwiseOrCharRelease(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseOrCharRelease", jchar>(o, offset, p3); }
	jchar getAndBitwiseOrCharAcquire(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseOrCharAcquire", jchar>(o, offset, p3); }
	jchar getAndBitwiseAndChar(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseAndChar", jchar>(o, offset, p3); }
	jchar getAndBitwiseAndCharRelease(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseAndCharRelease", jchar>(o, offset, p3); }
	jchar getAndBitwiseAndCharAcquire(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseAndCharAcquire", jchar>(o, offset, p3); }
	jchar getAndBitwiseXorChar(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseXorChar", jchar>(o, offset, p3); }
	jchar getAndBitwiseXorCharRelease(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseXorCharRelease", jchar>(o, offset, p3); }
	jchar getAndBitwiseXorCharAcquire(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"getAndBitwiseXorCharAcquire", jchar>(o, offset, p3); }
	jshort getAndBitwiseOrShort(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseOrShort", jshort>(o, offset, p3); }
	jshort getAndBitwiseOrShortRelease(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseOrShortRelease", jshort>(o, offset, p3); }
	jshort getAndBitwiseOrShortAcquire(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseOrShortAcquire", jshort>(o, offset, p3); }
	jshort getAndBitwiseAndShort(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseAndShort", jshort>(o, offset, p3); }
	jshort getAndBitwiseAndShortRelease(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseAndShortRelease", jshort>(o, offset, p3); }
	jshort getAndBitwiseAndShortAcquire(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseAndShortAcquire", jshort>(o, offset, p3); }
	jshort getAndBitwiseXorShort(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseXorShort", jshort>(o, offset, p3); }
	jshort getAndBitwiseXorShortRelease(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseXorShortRelease", jshort>(o, offset, p3); }
	jshort getAndBitwiseXorShortAcquire(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"getAndBitwiseXorShortAcquire", jshort>(o, offset, p3); }
	jint getAndBitwiseOrInt(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseOrInt", jint>(o, offset, p3); }
	jint getAndBitwiseOrIntRelease(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseOrIntRelease", jint>(o, offset, p3); }
	jint getAndBitwiseOrIntAcquire(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseOrIntAcquire", jint>(o, offset, p3); }
	jint getAndBitwiseAndInt(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseAndInt", jint>(o, offset, p3); }
	jint getAndBitwiseAndIntRelease(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseAndIntRelease", jint>(o, offset, p3); }
	jint getAndBitwiseAndIntAcquire(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseAndIntAcquire", jint>(o, offset, p3); }
	jint getAndBitwiseXorInt(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseXorInt", jint>(o, offset, p3); }
	jint getAndBitwiseXorIntRelease(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseXorIntRelease", jint>(o, offset, p3); }
	jint getAndBitwiseXorIntAcquire(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"getAndBitwiseXorIntAcquire", jint>(o, offset, p3); }
	jlong getAndBitwiseOrLong(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseOrLong", jlong>(o, offset, p3); }
	jlong getAndBitwiseOrLongRelease(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseOrLongRelease", jlong>(o, offset, p3); }
	jlong getAndBitwiseOrLongAcquire(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseOrLongAcquire", jlong>(o, offset, p3); }
	jlong getAndBitwiseAndLong(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseAndLong", jlong>(o, offset, p3); }
	jlong getAndBitwiseAndLongRelease(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseAndLongRelease", jlong>(o, offset, p3); }
	jlong getAndBitwiseAndLongAcquire(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseAndLongAcquire", jlong>(o, offset, p3); }
	jlong getAndBitwiseXorLong(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseXorLong", jlong>(o, offset, p3); }
	jlong getAndBitwiseXorLongRelease(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseXorLongRelease", jlong>(o, offset, p3); }
	jlong getAndBitwiseXorLongAcquire(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"getAndBitwiseXorLongAcquire", jlong>(o, offset, p3); }
	void loadFence() { return call_method<"loadFence", void>(); }
	void storeFence() { return call_method<"storeFence", void>(); }
	void fullFence() { return call_method<"fullFence", void>(); }
	void loadLoadFence() { return call_method<"loadLoadFence", void>(); }
	void storeStoreFence() { return call_method<"storeStoreFence", void>(); }
	jboolean isBigEndian() { return call_method<"isBigEndian", jboolean>(); }
	jboolean unalignedAccess() { return call_method<"unalignedAccess", jboolean>(); }
	jlong getLongUnaligned(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getLongUnaligned", jlong>(o, offset); }
	jlong getLongUnaligned(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getLongUnaligned", jlong>(o, offset, p3); }
	jint getIntUnaligned(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getIntUnaligned", jint>(o, offset); }
	jint getIntUnaligned(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getIntUnaligned", jint>(o, offset, p3); }
	jshort getShortUnaligned(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getShortUnaligned", jshort>(o, offset); }
	jshort getShortUnaligned(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getShortUnaligned", jshort>(o, offset, p3); }
	jchar getCharUnaligned(jni::ref<java::lang::Object> o, jlong offset) { return call_method<"getCharUnaligned", jchar>(o, offset); }
	jchar getCharUnaligned(jni::ref<java::lang::Object> o, jlong offset, jboolean p3) { return call_method<"getCharUnaligned", jchar>(o, offset, p3); }
	void putLongUnaligned(jni::ref<java::lang::Object> o, jlong offset, jlong p3) { return call_method<"putLongUnaligned", void>(o, offset, p3); }
	void putLongUnaligned(jni::ref<java::lang::Object> o, jlong offset, jlong p3, jboolean x) { return call_method<"putLongUnaligned", void>(o, offset, p3, x); }
	void putIntUnaligned(jni::ref<java::lang::Object> o, jlong offset, jint p3) { return call_method<"putIntUnaligned", void>(o, offset, p3); }
	void putIntUnaligned(jni::ref<java::lang::Object> o, jlong offset, jint p3, jboolean x) { return call_method<"putIntUnaligned", void>(o, offset, p3, x); }
	void putShortUnaligned(jni::ref<java::lang::Object> o, jlong offset, jshort p3) { return call_method<"putShortUnaligned", void>(o, offset, p3); }
	void putShortUnaligned(jni::ref<java::lang::Object> o, jlong offset, jshort p3, jboolean x) { return call_method<"putShortUnaligned", void>(o, offset, p3, x); }
	void putCharUnaligned(jni::ref<java::lang::Object> o, jlong offset, jchar p3) { return call_method<"putCharUnaligned", void>(o, offset, p3); }
	void putCharUnaligned(jni::ref<java::lang::Object> o, jlong offset, jchar p3, jboolean x) { return call_method<"putCharUnaligned", void>(o, offset, p3, x); }
	void invokeCleaner(jni::ref<java::nio::ByteBuffer> directBuffer) { return call_method<"invokeCleaner", void>(directBuffer); }

protected:

	Unsafe(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_UNSAFE
