// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/org/objectweb/asm/MethodVisitor.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_INSTRUCTIONADAPTER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_INSTRUCTIONADAPTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::commons { class InstructionAdapter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::commons::InstructionAdapter>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/commons/InstructionAdapter";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::org::objectweb::asm_::MethodVisitor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_INSTRUCTIONADAPTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_INSTRUCTIONADAPTER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_INSTRUCTIONADAPTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Handle.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Label.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Type.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::commons::InstructionAdapter : public jni::object_base<"jdk/internal/org/objectweb/asm/commons/InstructionAdapter",
	jdk::internal::org::objectweb::asm_::MethodVisitor>
{
public:

	static jni::ref<jdk::internal::org::objectweb::asm_::Type> OBJECT_TYPE() { return get_static_field<"OBJECT_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }

	static jni::ref<jdk::internal::org::objectweb::asm_::commons::InstructionAdapter> new_object(jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> mv) { return base_::new_object(mv); }
	void visitInsn(jint opcode) { return call_method<"visitInsn", void>(opcode); }
	void visitIntInsn(jint opcode, jint operand) { return call_method<"visitIntInsn", void>(opcode, operand); }
	void visitVarInsn(jint opcode, jint var) { return call_method<"visitVarInsn", void>(opcode, var); }
	void visitTypeInsn(jint opcode, jni::ref<java::lang::String> type) { return call_method<"visitTypeInsn", void>(opcode, type); }
	void visitFieldInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"visitFieldInsn", void>(opcode, owner, name, desc); }
	void visitMethodInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"visitMethodInsn", void>(opcode, owner, name, desc); }
	void visitMethodInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jboolean itf) { return call_method<"visitMethodInsn", void>(opcode, owner, name, desc, itf); }
	void visitInvokeDynamicInsn(jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jni::ref<jdk::internal::org::objectweb::asm_::Handle> bsm, jni::ref<jni::array<java::lang::Object>> bsmArgs) { return call_method<"visitInvokeDynamicInsn", void>(name, desc, bsm, bsmArgs); }
	void visitJumpInsn(jint opcode, jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"visitJumpInsn", void>(opcode, label); }
	void visitLabel(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"visitLabel", void>(label); }
	void visitLdcInsn(jni::ref<java::lang::Object> cst) { return call_method<"visitLdcInsn", void>(cst); }
	void visitIincInsn(jint var, jint increment) { return call_method<"visitIincInsn", void>(var, increment); }
	void visitTableSwitchInsn(jint min, jint max, jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"visitTableSwitchInsn", void>(min, max, dflt, labels); }
	void visitLookupSwitchInsn(jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jint>> keys, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"visitLookupSwitchInsn", void>(dflt, keys, labels); }
	void visitMultiANewArrayInsn(jni::ref<java::lang::String> desc, jint dims) { return call_method<"visitMultiANewArrayInsn", void>(desc, dims); }
	void nop() { return call_method<"nop", void>(); }
	void aconst(jni::ref<java::lang::Object> cst) { return call_method<"aconst", void>(cst); }
	void iconst(jint cst) { return call_method<"iconst", void>(cst); }
	void lconst(jlong cst) { return call_method<"lconst", void>(cst); }
	void fconst(jfloat cst) { return call_method<"fconst", void>(cst); }
	void dconst(jdouble cst) { return call_method<"dconst", void>(cst); }
	void tconst(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"tconst", void>(type); }
	void hconst(jni::ref<jdk::internal::org::objectweb::asm_::Handle> handle) { return call_method<"hconst", void>(handle); }
	void load(jint var, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"load", void>(var, type); }
	void aload(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"aload", void>(type); }
	void store(jint var, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"store", void>(var, type); }
	void astore(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"astore", void>(type); }
	void pop() { return call_method<"pop", void>(); }
	void pop2() { return call_method<"pop2", void>(); }
	void dup() { return call_method<"dup", void>(); }
	void dup2() { return call_method<"dup2", void>(); }
	void dupX1() { return call_method<"dupX1", void>(); }
	void dupX2() { return call_method<"dupX2", void>(); }
	void dup2X1() { return call_method<"dup2X1", void>(); }
	void dup2X2() { return call_method<"dup2X2", void>(); }
	void swap() { return call_method<"swap", void>(); }
	void add(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"add", void>(type); }
	void sub(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"sub", void>(type); }
	void mul(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"mul", void>(type); }
	void div(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"div", void>(type); }
	void rem(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"rem", void>(type); }
	void neg(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"neg", void>(type); }
	void shl(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"shl", void>(type); }
	void shr(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"shr", void>(type); }
	void ushr(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"ushr", void>(type); }
	void and_(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"and", void>(type); }
	void or_(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"or", void>(type); }
	void xor_(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"xor", void>(type); }
	void iinc(jint var, jint increment) { return call_method<"iinc", void>(var, increment); }
	void cast(jni::ref<jdk::internal::org::objectweb::asm_::Type> from, jni::ref<jdk::internal::org::objectweb::asm_::Type> to) { return call_method<"cast", void>(from, to); }
	void lcmp() { return call_method<"lcmp", void>(); }
	void cmpl(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"cmpl", void>(type); }
	void cmpg(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"cmpg", void>(type); }
	void ifeq(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifeq", void>(label); }
	void ifne(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifne", void>(label); }
	void iflt(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"iflt", void>(label); }
	void ifge(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifge", void>(label); }
	void ifgt(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifgt", void>(label); }
	void ifle(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifle", void>(label); }
	void ificmpeq(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ificmpeq", void>(label); }
	void ificmpne(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ificmpne", void>(label); }
	void ificmplt(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ificmplt", void>(label); }
	void ificmpge(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ificmpge", void>(label); }
	void ificmpgt(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ificmpgt", void>(label); }
	void ificmple(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ificmple", void>(label); }
	void ifacmpeq(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifacmpeq", void>(label); }
	void ifacmpne(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifacmpne", void>(label); }
	void goTo(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"goTo", void>(label); }
	void jsr(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"jsr", void>(label); }
	void ret(jint var) { return call_method<"ret", void>(var); }
	void tableswitch(jint min, jint max, jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"tableswitch", void>(min, max, dflt, labels); }
	void lookupswitch(jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jint>> keys, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"lookupswitch", void>(dflt, keys, labels); }
	void areturn(jni::ref<jdk::internal::org::objectweb::asm_::Type> t) { return call_method<"areturn", void>(t); }
	void getstatic(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"getstatic", void>(owner, name, desc); }
	void putstatic(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"putstatic", void>(owner, name, desc); }
	void getfield(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"getfield", void>(owner, name, desc); }
	void putfield(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"putfield", void>(owner, name, desc); }
	void invokevirtual(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"invokevirtual", void>(owner, name, desc); }
	void invokevirtual(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jboolean itf) { return call_method<"invokevirtual", void>(owner, name, desc, itf); }
	void invokespecial(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"invokespecial", void>(owner, name, desc); }
	void invokespecial(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jboolean itf) { return call_method<"invokespecial", void>(owner, name, desc, itf); }
	void invokestatic(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"invokestatic", void>(owner, name, desc); }
	void invokestatic(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jboolean itf) { return call_method<"invokestatic", void>(owner, name, desc, itf); }
	void invokeinterface(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"invokeinterface", void>(owner, name, desc); }
	void invokedynamic(jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jni::ref<jdk::internal::org::objectweb::asm_::Handle> bsm, jni::ref<jni::array<java::lang::Object>> bsmArgs) { return call_method<"invokedynamic", void>(name, desc, bsm, bsmArgs); }
	void anew(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"anew", void>(type); }
	void newarray(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"newarray", void>(type); }
	void arraylength() { return call_method<"arraylength", void>(); }
	void athrow() { return call_method<"athrow", void>(); }
	void checkcast(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"checkcast", void>(type); }
	void instanceOf(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"instanceOf", void>(type); }
	void monitorenter() { return call_method<"monitorenter", void>(); }
	void monitorexit() { return call_method<"monitorexit", void>(); }
	void multianewarray(jni::ref<java::lang::String> desc, jint dims) { return call_method<"multianewarray", void>(desc, dims); }
	void ifnull(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifnull", void>(label); }
	void ifnonnull(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifnonnull", void>(label); }
	void mark(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"mark", void>(label); }

protected:

	InstructionAdapter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_INSTRUCTIONADAPTER
