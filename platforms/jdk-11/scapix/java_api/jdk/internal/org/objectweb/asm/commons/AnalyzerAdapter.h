// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/org/objectweb/asm/MethodVisitor.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_ANALYZERADAPTER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_ANALYZERADAPTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::commons { class AnalyzerAdapter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::commons::AnalyzerAdapter>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/commons/AnalyzerAdapter";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::org::objectweb::asm_::MethodVisitor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_ANALYZERADAPTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_ANALYZERADAPTER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_ANALYZERADAPTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Handle.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Label.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::commons::AnalyzerAdapter : public jni::object_base<"jdk/internal/org/objectweb/asm/commons/AnalyzerAdapter",
	jdk::internal::org::objectweb::asm_::MethodVisitor>
{
public:

	jni::ref<java::util::List> locals() { return get_field<"locals", jni::ref<java::util::List>>(); }
	void locals(jni::ref<java::util::List> v) { set_field<"locals", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> stack() { return get_field<"stack", jni::ref<java::util::List>>(); }
	void stack(jni::ref<java::util::List> v) { set_field<"stack", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::Map> uninitializedTypes() { return get_field<"uninitializedTypes", jni::ref<java::util::Map>>(); }
	void uninitializedTypes(jni::ref<java::util::Map> v) { set_field<"uninitializedTypes", jni::ref<java::util::Map>>(v); }

	static jni::ref<jdk::internal::org::objectweb::asm_::commons::AnalyzerAdapter> new_object(jni::ref<java::lang::String> owner, jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> mv) { return base_::new_object(owner, access, name, desc, mv); }
	void visitFrame(jint type, jint nLocal, jni::ref<jni::array<java::lang::Object>> local, jint nStack, jni::ref<jni::array<java::lang::Object>> stack) { return call_method<"visitFrame", void>(type, nLocal, local, nStack, stack); }
	void visitInsn(jint opcode) { return call_method<"visitInsn", void>(opcode); }
	void visitIntInsn(jint opcode, jint operand) { return call_method<"visitIntInsn", void>(opcode, operand); }
	void visitVarInsn(jint opcode, jint var) { return call_method<"visitVarInsn", void>(opcode, var); }
	void visitTypeInsn(jint opcode, jni::ref<java::lang::String> type) { return call_method<"visitTypeInsn", void>(opcode, type); }
	void visitFieldInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"visitFieldInsn", void>(opcode, owner, name, desc); }
	void visitMethodInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return call_method<"visitMethodInsn", void>(opcode, owner, name, desc); }
	void visitMethodInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jboolean itf) { return call_method<"visitMethodInsn", void>(opcode, owner, name, desc, itf); }
	void visitInvokeDynamicInsn(jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jni::ref<jdk::internal::org::objectweb::asm_::Handle> bsm, jni::ref<jni::array<java::lang::Object>> bsmArgs) { return call_method<"visitInvokeDynamicInsn", void>(name, desc, bsm, bsmArgs); }
	void visitJumpInsn(jint opcode, jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"visitJumpInsn", void>(opcode, label); }
	void visitLabel(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"visitLabel", void>(label); }
	void visitLdcInsn(jni::ref<java::lang::Object> cst) { return call_method<"visitLdcInsn", void>(cst); }
	void visitIincInsn(jint var, jint increment) { return call_method<"visitIincInsn", void>(var, increment); }
	void visitTableSwitchInsn(jint min, jint max, jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"visitTableSwitchInsn", void>(min, max, dflt, labels); }
	void visitLookupSwitchInsn(jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jint>> keys, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"visitLookupSwitchInsn", void>(dflt, keys, labels); }
	void visitMultiANewArrayInsn(jni::ref<java::lang::String> desc, jint dims) { return call_method<"visitMultiANewArrayInsn", void>(desc, dims); }
	void visitMaxs(jint maxStack, jint maxLocals) { return call_method<"visitMaxs", void>(maxStack, maxLocals); }

protected:

	AnalyzerAdapter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_ANALYZERADAPTER
