// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/org/objectweb/asm/commons/LocalVariablesSorter.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_GENERATORADAPTER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_GENERATORADAPTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::commons { class GeneratorAdapter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::commons::GeneratorAdapter>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/commons/GeneratorAdapter";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::org::objectweb::asm_::commons::LocalVariablesSorter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_GENERATORADAPTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_GENERATORADAPTER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_GENERATORADAPTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/ClassVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Handle.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Label.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/MethodVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Type.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/commons/Method.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/commons/TableSwitchGenerator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::commons::GeneratorAdapter : public jni::object_base<"jdk/internal/org/objectweb/asm/commons/GeneratorAdapter",
	jdk::internal::org::objectweb::asm_::commons::LocalVariablesSorter>
{
public:

	static jint ADD() { return get_static_field<"ADD", jint>(); }
	static jint SUB() { return get_static_field<"SUB", jint>(); }
	static jint MUL() { return get_static_field<"MUL", jint>(); }
	static jint DIV() { return get_static_field<"DIV", jint>(); }
	static jint REM() { return get_static_field<"REM", jint>(); }
	static jint NEG() { return get_static_field<"NEG", jint>(); }
	static jint SHL() { return get_static_field<"SHL", jint>(); }
	static jint SHR() { return get_static_field<"SHR", jint>(); }
	static jint USHR() { return get_static_field<"USHR", jint>(); }
	static jint AND() { return get_static_field<"AND", jint>(); }
	static jint OR() { return get_static_field<"OR", jint>(); }
	static jint XOR() { return get_static_field<"XOR", jint>(); }
	static jint EQ() { return get_static_field<"EQ", jint>(); }
	static jint NE() { return get_static_field<"NE", jint>(); }
	static jint LT() { return get_static_field<"LT", jint>(); }
	static jint GE() { return get_static_field<"GE", jint>(); }
	static jint GT() { return get_static_field<"GT", jint>(); }
	static jint LE() { return get_static_field<"LE", jint>(); }

	static jni::ref<jdk::internal::org::objectweb::asm_::commons::GeneratorAdapter> new_object(jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> mv, jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc) { return base_::new_object(mv, access, name, desc); }
	static jni::ref<jdk::internal::org::objectweb::asm_::commons::GeneratorAdapter> new_object(jint access, jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> method, jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> mv) { return base_::new_object(access, method, mv); }
	static jni::ref<jdk::internal::org::objectweb::asm_::commons::GeneratorAdapter> new_object(jint access, jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> method, jni::ref<java::lang::String> signature, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>> exceptions, jni::ref<jdk::internal::org::objectweb::asm_::ClassVisitor> cv) { return base_::new_object(access, method, signature, exceptions, cv); }
	void push(jboolean value) { return call_method<"push", void>(value); }
	void push(jint value) { return call_method<"push", void>(value); }
	void push(jlong value) { return call_method<"push", void>(value); }
	void push(jfloat value) { return call_method<"push", void>(value); }
	void push(jdouble value) { return call_method<"push", void>(value); }
	void push(jni::ref<java::lang::String> value) { return call_method<"push", void>(value); }
	void push(jni::ref<jdk::internal::org::objectweb::asm_::Type> value) { return call_method<"push", void>(value); }
	void push(jni::ref<jdk::internal::org::objectweb::asm_::Handle> handle) { return call_method<"push", void>(handle); }
	void loadThis() { return call_method<"loadThis", void>(); }
	void loadArg(jint arg) { return call_method<"loadArg", void>(arg); }
	void loadArgs(jint arg, jint count) { return call_method<"loadArgs", void>(arg, count); }
	void loadArgs() { return call_method<"loadArgs", void>(); }
	void loadArgArray() { return call_method<"loadArgArray", void>(); }
	void storeArg(jint arg) { return call_method<"storeArg", void>(arg); }
	jni::ref<jdk::internal::org::objectweb::asm_::Type> getLocalType(jint local) { return call_method<"getLocalType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(local); }
	void loadLocal(jint local) { return call_method<"loadLocal", void>(local); }
	void loadLocal(jint local, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"loadLocal", void>(local, type); }
	void storeLocal(jint local) { return call_method<"storeLocal", void>(local); }
	void storeLocal(jint local, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"storeLocal", void>(local, type); }
	void arrayLoad(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"arrayLoad", void>(type); }
	void arrayStore(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"arrayStore", void>(type); }
	void pop() { return call_method<"pop", void>(); }
	void pop2() { return call_method<"pop2", void>(); }
	void dup() { return call_method<"dup", void>(); }
	void dup2() { return call_method<"dup2", void>(); }
	void dupX1() { return call_method<"dupX1", void>(); }
	void dupX2() { return call_method<"dupX2", void>(); }
	void dup2X1() { return call_method<"dup2X1", void>(); }
	void dup2X2() { return call_method<"dup2X2", void>(); }
	void swap() { return call_method<"swap", void>(); }
	void swap(jni::ref<jdk::internal::org::objectweb::asm_::Type> prev, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"swap", void>(prev, type); }
	void math(jint op, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"math", void>(op, type); }
	void not_() { return call_method<"not", void>(); }
	void iinc(jint local, jint amount) { return call_method<"iinc", void>(local, amount); }
	void cast(jni::ref<jdk::internal::org::objectweb::asm_::Type> from, jni::ref<jdk::internal::org::objectweb::asm_::Type> to) { return call_method<"cast", void>(from, to); }
	void box(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"box", void>(type); }
	void valueOf(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"valueOf", void>(type); }
	void unbox(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"unbox", void>(type); }
	jni::ref<jdk::internal::org::objectweb::asm_::Label> newLabel() { return call_method<"newLabel", jni::ref<jdk::internal::org::objectweb::asm_::Label>>(); }
	void mark(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"mark", void>(label); }
	jni::ref<jdk::internal::org::objectweb::asm_::Label> mark() { return call_method<"mark", jni::ref<jdk::internal::org::objectweb::asm_::Label>>(); }
	void ifCmp(jni::ref<jdk::internal::org::objectweb::asm_::Type> type, jint mode, jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifCmp", void>(type, mode, label); }
	void ifICmp(jint mode, jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifICmp", void>(mode, label); }
	void ifZCmp(jint mode, jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifZCmp", void>(mode, label); }
	void ifNull(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifNull", void>(label); }
	void ifNonNull(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"ifNonNull", void>(label); }
	void goTo(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"goTo", void>(label); }
	void ret(jint local) { return call_method<"ret", void>(local); }
	void tableSwitch(jni::ref<jni::array<jint>> keys, jni::ref<jdk::internal::org::objectweb::asm_::commons::TableSwitchGenerator> generator) { return call_method<"tableSwitch", void>(keys, generator); }
	void tableSwitch(jni::ref<jni::array<jint>> keys, jni::ref<jdk::internal::org::objectweb::asm_::commons::TableSwitchGenerator> generator, jboolean useTable) { return call_method<"tableSwitch", void>(keys, generator, useTable); }
	void returnValue() { return call_method<"returnValue", void>(); }
	void getStatic(jni::ref<jdk::internal::org::objectweb::asm_::Type> owner, jni::ref<java::lang::String> name, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"getStatic", void>(owner, name, type); }
	void putStatic(jni::ref<jdk::internal::org::objectweb::asm_::Type> owner, jni::ref<java::lang::String> name, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"putStatic", void>(owner, name, type); }
	void getField(jni::ref<jdk::internal::org::objectweb::asm_::Type> owner, jni::ref<java::lang::String> name, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"getField", void>(owner, name, type); }
	void putField(jni::ref<jdk::internal::org::objectweb::asm_::Type> owner, jni::ref<java::lang::String> name, jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"putField", void>(owner, name, type); }
	void invokeVirtual(jni::ref<jdk::internal::org::objectweb::asm_::Type> owner, jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> method) { return call_method<"invokeVirtual", void>(owner, method); }
	void invokeConstructor(jni::ref<jdk::internal::org::objectweb::asm_::Type> type, jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> method) { return call_method<"invokeConstructor", void>(type, method); }
	void invokeStatic(jni::ref<jdk::internal::org::objectweb::asm_::Type> owner, jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> method) { return call_method<"invokeStatic", void>(owner, method); }
	void invokeInterface(jni::ref<jdk::internal::org::objectweb::asm_::Type> owner, jni::ref<jdk::internal::org::objectweb::asm_::commons::Method> method) { return call_method<"invokeInterface", void>(owner, method); }
	void invokeDynamic(jni::ref<java::lang::String> name, jni::ref<java::lang::String> desc, jni::ref<jdk::internal::org::objectweb::asm_::Handle> bsm, jni::ref<jni::array<java::lang::Object>> bsmArgs) { return call_method<"invokeDynamic", void>(name, desc, bsm, bsmArgs); }
	void newInstance(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"newInstance", void>(type); }
	void newArray(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"newArray", void>(type); }
	void arrayLength() { return call_method<"arrayLength", void>(); }
	void throwException() { return call_method<"throwException", void>(); }
	void throwException(jni::ref<jdk::internal::org::objectweb::asm_::Type> type, jni::ref<java::lang::String> msg) { return call_method<"throwException", void>(type, msg); }
	void checkCast(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"checkCast", void>(type); }
	void instanceOf(jni::ref<jdk::internal::org::objectweb::asm_::Type> type) { return call_method<"instanceOf", void>(type); }
	void monitorEnter() { return call_method<"monitorEnter", void>(); }
	void monitorExit() { return call_method<"monitorExit", void>(); }
	void endMethod() { return call_method<"endMethod", void>(); }
	void catchException(jni::ref<jdk::internal::org::objectweb::asm_::Label> start, jni::ref<jdk::internal::org::objectweb::asm_::Label> end, jni::ref<jdk::internal::org::objectweb::asm_::Type> exception) { return call_method<"catchException", void>(start, end, exception); }

protected:

	GeneratorAdapter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_COMMONS_GENERATORADAPTER
