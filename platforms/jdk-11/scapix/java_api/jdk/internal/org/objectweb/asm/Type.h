// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_ { class Type; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::Type>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/Type";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::Type : public jni::object_base<"jdk/internal/org/objectweb/asm/Type",
	java::lang::Object>
{
public:

	static jint VOID() { return get_static_field<"VOID", jint>(); }
	static jint BOOLEAN() { return get_static_field<"BOOLEAN", jint>(); }
	static jint CHAR() { return get_static_field<"CHAR", jint>(); }
	static jint BYTE() { return get_static_field<"BYTE", jint>(); }
	static jint SHORT() { return get_static_field<"SHORT", jint>(); }
	static jint INT() { return get_static_field<"INT", jint>(); }
	static jint FLOAT() { return get_static_field<"FLOAT", jint>(); }
	static jint LONG() { return get_static_field<"LONG", jint>(); }
	static jint DOUBLE() { return get_static_field<"DOUBLE", jint>(); }
	static jint ARRAY() { return get_static_field<"ARRAY", jint>(); }
	static jint OBJECT() { return get_static_field<"OBJECT", jint>(); }
	static jint METHOD() { return get_static_field<"METHOD", jint>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> VOID_TYPE() { return get_static_field<"VOID_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> BOOLEAN_TYPE() { return get_static_field<"BOOLEAN_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> CHAR_TYPE() { return get_static_field<"CHAR_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> BYTE_TYPE() { return get_static_field<"BYTE_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> SHORT_TYPE() { return get_static_field<"SHORT_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> INT_TYPE() { return get_static_field<"INT_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> FLOAT_TYPE() { return get_static_field<"FLOAT_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> LONG_TYPE() { return get_static_field<"LONG_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> DOUBLE_TYPE() { return get_static_field<"DOUBLE_TYPE", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }

	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getType(jni::ref<java::lang::String> typeDescriptor) { return call_static_method<"getType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(typeDescriptor); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getObjectType(jni::ref<java::lang::String> internalName) { return call_static_method<"getObjectType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(internalName); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getMethodType(jni::ref<java::lang::String> methodDescriptor) { return call_static_method<"getMethodType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(methodDescriptor); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getMethodType(jni::ref<jdk::internal::org::objectweb::asm_::Type> returnType, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>> argumentTypes) { return call_static_method<"getMethodType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(returnType, argumentTypes); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getType(jni::ref<java::lang::Class> c) { return call_static_method<"getType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(c); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getType(jni::ref<java::lang::reflect::Constructor> c) { return call_static_method<"getType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(c); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getType(jni::ref<java::lang::reflect::Method> m) { return call_static_method<"getType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(m); }
	static jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>> getArgumentTypes(jni::ref<java::lang::String> methodDescriptor) { return call_static_method<"getArgumentTypes", jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>>>(methodDescriptor); }
	static jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>> getArgumentTypes(jni::ref<java::lang::reflect::Method> method) { return call_static_method<"getArgumentTypes", jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>>>(method); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getReturnType(jni::ref<java::lang::String> methodDescriptor) { return call_static_method<"getReturnType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(methodDescriptor); }
	static jni::ref<jdk::internal::org::objectweb::asm_::Type> getReturnType(jni::ref<java::lang::reflect::Method> method) { return call_static_method<"getReturnType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(method); }
	static jint getArgumentsAndReturnSizes(jni::ref<java::lang::String> desc) { return call_static_method<"getArgumentsAndReturnSizes", jint>(desc); }
	jint getSort() { return call_method<"getSort", jint>(); }
	jint getDimensions() { return call_method<"getDimensions", jint>(); }
	jni::ref<jdk::internal::org::objectweb::asm_::Type> getElementType() { return call_method<"getElementType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getInternalName() { return call_method<"getInternalName", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>> getArgumentTypes() { return call_method<"getArgumentTypes", jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>>>(); }
	jni::ref<jdk::internal::org::objectweb::asm_::Type> getReturnType() { return call_method<"getReturnType", jni::ref<jdk::internal::org::objectweb::asm_::Type>>(); }
	jint getArgumentsAndReturnSizes() { return call_method<"getArgumentsAndReturnSizes", jint>(); }
	jni::ref<java::lang::String> getDescriptor() { return call_method<"getDescriptor", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> getMethodDescriptor(jni::ref<jdk::internal::org::objectweb::asm_::Type> returnType, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Type>> argumentTypes) { return call_static_method<"getMethodDescriptor", jni::ref<java::lang::String>>(returnType, argumentTypes); }
	static jni::ref<java::lang::String> getInternalName(jni::ref<java::lang::Class> c) { return call_static_method<"getInternalName", jni::ref<java::lang::String>>(c); }
	static jni::ref<java::lang::String> getDescriptor(jni::ref<java::lang::Class> c) { return call_static_method<"getDescriptor", jni::ref<java::lang::String>>(c); }
	static jni::ref<java::lang::String> getConstructorDescriptor(jni::ref<java::lang::reflect::Constructor> c) { return call_static_method<"getConstructorDescriptor", jni::ref<java::lang::String>>(c); }
	static jni::ref<java::lang::String> getMethodDescriptor(jni::ref<java::lang::reflect::Method> m) { return call_static_method<"getMethodDescriptor", jni::ref<java::lang::String>>(m); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jint getOpcode(jint opcode) { return call_method<"getOpcode", jint>(opcode); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Type(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPE
