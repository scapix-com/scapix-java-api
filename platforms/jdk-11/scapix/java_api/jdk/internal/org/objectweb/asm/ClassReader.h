// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_CLASSREADER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_CLASSREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_ { class ClassReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::ClassReader>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/ClassReader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_CLASSREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_CLASSREADER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_CLASSREADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Attribute.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/ClassVisitor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::ClassReader : public jni::object_base<"jdk/internal/org/objectweb/asm/ClassReader",
	java::lang::Object>
{
public:

	static jint SKIP_CODE() { return get_static_field<"SKIP_CODE", jint>(); }
	static jint SKIP_DEBUG() { return get_static_field<"SKIP_DEBUG", jint>(); }
	static jint SKIP_FRAMES() { return get_static_field<"SKIP_FRAMES", jint>(); }
	static jint EXPAND_FRAMES() { return get_static_field<"EXPAND_FRAMES", jint>(); }
	jni::ref<jni::array<jbyte>> b() { return get_field<"b", jni::ref<jni::array<jbyte>>>(); }
	jint header() { return get_field<"header", jint>(); }

	static jni::ref<jdk::internal::org::objectweb::asm_::ClassReader> new_object(jni::ref<jni::array<jbyte>> b) { return base_::new_object(b); }
	static jni::ref<jdk::internal::org::objectweb::asm_::ClassReader> new_object(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return base_::new_object(b, off, len); }
	jint getAccess() { return call_method<"getAccess", jint>(); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSuperName() { return call_method<"getSuperName", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::lang::String>> getInterfaces() { return call_method<"getInterfaces", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::ClassReader> new_object(jni::ref<java::io::InputStream> is) { return base_::new_object(is); }
	static jni::ref<jdk::internal::org::objectweb::asm_::ClassReader> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	void accept(jni::ref<jdk::internal::org::objectweb::asm_::ClassVisitor> classVisitor, jint flags) { return call_method<"accept", void>(classVisitor, flags); }
	void accept(jni::ref<jdk::internal::org::objectweb::asm_::ClassVisitor> classVisitor, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Attribute>> attrs, jint flags) { return call_method<"accept", void>(classVisitor, attrs, flags); }
	jint getItemCount() { return call_method<"getItemCount", jint>(); }
	jint getItem(jint item) { return call_method<"getItem", jint>(item); }
	jint getMaxStringLength() { return call_method<"getMaxStringLength", jint>(); }
	jint readByte(jint index) { return call_method<"readByte", jint>(index); }
	jint readUnsignedShort(jint index) { return call_method<"readUnsignedShort", jint>(index); }
	jshort readShort(jint index) { return call_method<"readShort", jshort>(index); }
	jint readInt(jint index) { return call_method<"readInt", jint>(index); }
	jlong readLong(jint index) { return call_method<"readLong", jlong>(index); }
	jni::ref<java::lang::String> readUTF8(jint index, jni::ref<jni::array<jchar>> buf) { return call_method<"readUTF8", jni::ref<java::lang::String>>(index, buf); }
	jni::ref<java::lang::String> readClass(jint index, jni::ref<jni::array<jchar>> buf) { return call_method<"readClass", jni::ref<java::lang::String>>(index, buf); }
	jni::ref<java::lang::String> readModule(jint index, jni::ref<jni::array<jchar>> buf) { return call_method<"readModule", jni::ref<java::lang::String>>(index, buf); }
	jni::ref<java::lang::String> readPackage(jint index, jni::ref<jni::array<jchar>> buf) { return call_method<"readPackage", jni::ref<java::lang::String>>(index, buf); }
	jni::ref<java::lang::Object> readConst(jint item, jni::ref<jni::array<jchar>> buf) { return call_method<"readConst", jni::ref<java::lang::Object>>(item, buf); }

protected:

	ClassReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_CLASSREADER
