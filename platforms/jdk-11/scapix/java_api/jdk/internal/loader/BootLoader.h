// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_BOOTLOADER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_BOOTLOADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::loader { class BootLoader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::loader::BootLoader>
{
	static constexpr fixed_string class_name = "jdk/internal/loader/BootLoader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_BOOTLOADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_BOOTLOADER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_BOOTLOADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Module.h>
#include <scapix/java_api/java/lang/Package.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/ModuleReference.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/concurrent/ConcurrentHashMap.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#include <scapix/java_api/jdk/internal/module/ServicesCatalog.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::loader::BootLoader : public jni::object_base<"jdk/internal/loader/BootLoader",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::Module> getUnnamedModule() { return call_static_method<"getUnnamedModule", jni::ref<java::lang::Module>>(); }
	static jni::ref<jdk::internal::module::ServicesCatalog> getServicesCatalog() { return call_static_method<"getServicesCatalog", jni::ref<jdk::internal::module::ServicesCatalog>>(); }
	static jni::ref<java::util::concurrent::ConcurrentHashMap> getClassLoaderValueMap() { return call_static_method<"getClassLoaderValueMap", jni::ref<java::util::concurrent::ConcurrentHashMap>>(); }
	static jboolean hasClassPath() { return call_static_method<"hasClassPath", jboolean>(); }
	static void loadModule(jni::ref<java::lang::module::ModuleReference> mref) { return call_static_method<"loadModule", void>(mref); }
	static jni::ref<java::lang::Class> loadClassOrNull(jni::ref<java::lang::String> name) { return call_static_method<"loadClassOrNull", jni::ref<java::lang::Class>>(name); }
	static jni::ref<java::lang::Class> loadClass(jni::ref<java::lang::Module> module, jni::ref<java::lang::String> name) { return call_static_method<"loadClass", jni::ref<java::lang::Class>>(module, name); }
	static jni::ref<java::net::URL> findResource(jni::ref<java::lang::String> mn, jni::ref<java::lang::String> name) { return call_static_method<"findResource", jni::ref<java::net::URL>>(mn, name); }
	static jni::ref<java::io::InputStream> findResourceAsStream(jni::ref<java::lang::String> mn, jni::ref<java::lang::String> name) { return call_static_method<"findResourceAsStream", jni::ref<java::io::InputStream>>(mn, name); }
	static jni::ref<java::net::URL> findResource(jni::ref<java::lang::String> name) { return call_static_method<"findResource", jni::ref<java::net::URL>>(name); }
	static jni::ref<java::util::Enumeration> findResources(jni::ref<java::lang::String> name) { return call_static_method<"findResources", jni::ref<java::util::Enumeration>>(name); }
	static jni::ref<java::lang::Package> definePackage(jni::ref<java::lang::Class> c) { return call_static_method<"definePackage", jni::ref<java::lang::Package>>(c); }
	static jni::ref<java::lang::Package> getDefinedPackage(jni::ref<java::lang::String> pn) { return call_static_method<"getDefinedPackage", jni::ref<java::lang::Package>>(pn); }
	static jni::ref<java::util::stream::Stream> packages() { return call_static_method<"packages", jni::ref<java::util::stream::Stream>>(); }

protected:

	BootLoader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_BOOTLOADER
