// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/chrono/ChronoPeriod.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_PERIOD_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_PERIOD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time { class Period; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::Period>
{
	static constexpr fixed_string class_name = "java/time/Period";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::chrono::ChronoPeriod, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_PERIOD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_PERIOD)
#define SCAPIX_JAVA_API_JAVA_TIME_PERIOD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/chrono/IsoChronology.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::Period : public jni::object_base<"java/time/Period",
	java::lang::Object,
	java::time::chrono::ChronoPeriod,
	java::io::Serializable>
{
public:

	static jni::ref<java::time::Period> ZERO() { return get_static_field<"ZERO", jni::ref<java::time::Period>>(); }

	static jni::ref<java::time::Period> ofYears(jint years) { return call_static_method<"ofYears", jni::ref<java::time::Period>>(years); }
	static jni::ref<java::time::Period> ofMonths(jint months) { return call_static_method<"ofMonths", jni::ref<java::time::Period>>(months); }
	static jni::ref<java::time::Period> ofWeeks(jint weeks) { return call_static_method<"ofWeeks", jni::ref<java::time::Period>>(weeks); }
	static jni::ref<java::time::Period> ofDays(jint days) { return call_static_method<"ofDays", jni::ref<java::time::Period>>(days); }
	static jni::ref<java::time::Period> of(jint years, jint months, jint days) { return call_static_method<"of", jni::ref<java::time::Period>>(years, months, days); }
	static jni::ref<java::time::Period> from(jni::ref<java::time::temporal::TemporalAmount> amount) { return call_static_method<"from", jni::ref<java::time::Period>>(amount); }
	static jni::ref<java::time::Period> parse(jni::ref<java::lang::CharSequence> text) { return call_static_method<"parse", jni::ref<java::time::Period>>(text); }
	static jni::ref<java::time::Period> between(jni::ref<java::time::LocalDate> startDateInclusive, jni::ref<java::time::LocalDate> endDateExclusive) { return call_static_method<"between", jni::ref<java::time::Period>>(startDateInclusive, endDateExclusive); }
	jlong get(jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"get", jlong>(unit); }
	jni::ref<java::util::List> getUnits() { return call_method<"getUnits", jni::ref<java::util::List>>(); }
	jni::ref<java::time::chrono::IsoChronology> getChronology() { return call_method<"getChronology", jni::ref<java::time::chrono::IsoChronology>>(); }
	jboolean isZero() { return call_method<"isZero", jboolean>(); }
	jboolean isNegative() { return call_method<"isNegative", jboolean>(); }
	jint getYears() { return call_method<"getYears", jint>(); }
	jint getMonths() { return call_method<"getMonths", jint>(); }
	jint getDays() { return call_method<"getDays", jint>(); }
	jni::ref<java::time::Period> withYears(jint years) { return call_method<"withYears", jni::ref<java::time::Period>>(years); }
	jni::ref<java::time::Period> withMonths(jint months) { return call_method<"withMonths", jni::ref<java::time::Period>>(months); }
	jni::ref<java::time::Period> withDays(jint days) { return call_method<"withDays", jni::ref<java::time::Period>>(days); }
	jni::ref<java::time::Period> plus(jni::ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<"plus", jni::ref<java::time::Period>>(amountToAdd); }
	jni::ref<java::time::Period> plusYears(jlong yearsToAdd) { return call_method<"plusYears", jni::ref<java::time::Period>>(yearsToAdd); }
	jni::ref<java::time::Period> plusMonths(jlong monthsToAdd) { return call_method<"plusMonths", jni::ref<java::time::Period>>(monthsToAdd); }
	jni::ref<java::time::Period> plusDays(jlong daysToAdd) { return call_method<"plusDays", jni::ref<java::time::Period>>(daysToAdd); }
	jni::ref<java::time::Period> minus(jni::ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<"minus", jni::ref<java::time::Period>>(amountToSubtract); }
	jni::ref<java::time::Period> minusYears(jlong yearsToSubtract) { return call_method<"minusYears", jni::ref<java::time::Period>>(yearsToSubtract); }
	jni::ref<java::time::Period> minusMonths(jlong monthsToSubtract) { return call_method<"minusMonths", jni::ref<java::time::Period>>(monthsToSubtract); }
	jni::ref<java::time::Period> minusDays(jlong daysToSubtract) { return call_method<"minusDays", jni::ref<java::time::Period>>(daysToSubtract); }
	jni::ref<java::time::Period> multipliedBy(jint scalar) { return call_method<"multipliedBy", jni::ref<java::time::Period>>(scalar); }
	jni::ref<java::time::Period> negated() { return call_method<"negated", jni::ref<java::time::Period>>(); }
	jni::ref<java::time::Period> normalized() { return call_method<"normalized", jni::ref<java::time::Period>>(); }
	jlong toTotalMonths() { return call_method<"toTotalMonths", jlong>(); }
	jni::ref<java::time::temporal::Temporal> addTo(jni::ref<java::time::temporal::Temporal> temporal) { return call_method<"addTo", jni::ref<java::time::temporal::Temporal>>(temporal); }
	jni::ref<java::time::temporal::Temporal> subtractFrom(jni::ref<java::time::temporal::Temporal> temporal) { return call_method<"subtractFrom", jni::ref<java::time::temporal::Temporal>>(temporal); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Period(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_PERIOD
