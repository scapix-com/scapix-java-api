// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTLINKS_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTLINKS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::textclassifier { class TextLinks; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::textclassifier::TextLinks>
{
	static constexpr fixed_string class_name = "android/view/textclassifier/TextLinks";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTLINKS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTLINKS)
#define SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTLINKS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/android/view/textclassifier/TextLinks_TextLinkSpan.h>
#include <scapix/java_api/android/view/textclassifier/TextLinks_TextLink.h>
#include <scapix/java_api/android/view/textclassifier/TextLinks_Request.h>
#include <scapix/java_api/android/view/textclassifier/TextLinks_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::textclassifier::TextLinks : public jni::object_base<"android/view/textclassifier/TextLinks",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using TextLinkSpan = TextLinks_TextLinkSpan;
	using TextLink = TextLinks_TextLink;
	using Request = TextLinks_Request;
	using Builder = TextLinks_Builder;

	static jint APPLY_STRATEGY_IGNORE() { return get_static_field<"APPLY_STRATEGY_IGNORE", jint>(); }
	static jint APPLY_STRATEGY_REPLACE() { return get_static_field<"APPLY_STRATEGY_REPLACE", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint STATUS_DIFFERENT_TEXT() { return get_static_field<"STATUS_DIFFERENT_TEXT", jint>(); }
	static jint STATUS_LINKS_APPLIED() { return get_static_field<"STATUS_LINKS_APPLIED", jint>(); }
	static jint STATUS_NO_LINKS_APPLIED() { return get_static_field<"STATUS_NO_LINKS_APPLIED", jint>(); }
	static jint STATUS_NO_LINKS_FOUND() { return get_static_field<"STATUS_NO_LINKS_FOUND", jint>(); }

	jni::ref<java::util::Collection> getLinks() { return call_method<"getLinks", jni::ref<java::util::Collection>>(); }
	jint apply(jni::ref<android::text::Spannable> text, jint applyStrategy, jni::ref<java::util::function::Function> spanFactory) { return call_method<"apply", jint>(text, applyStrategy, spanFactory); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	TextLinks(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTLINKS
