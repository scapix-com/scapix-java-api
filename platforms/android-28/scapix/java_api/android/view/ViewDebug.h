// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_VIEWDEBUG_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEWDEBUG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class ViewDebug; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::ViewDebug>
{
	static constexpr fixed_string class_name = "android/view/ViewDebug";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEWDEBUG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_VIEWDEBUG)
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEWDEBUG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewDebug_HierarchyTraceType.h>
#include <scapix/java_api/android/view/ViewDebug_RecyclerTraceType.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/view/ViewDebug_IntToString.h>
#include <scapix/java_api/android/view/ViewDebug_FlagToString.h>
#include <scapix/java_api/android/view/ViewDebug_ExportedProperty.h>
#include <scapix/java_api/android/view/ViewDebug_CapturedViewProperty.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::ViewDebug : public jni::object_base<"android/view/ViewDebug",
	java::lang::Object>
{
public:

	using RecyclerTraceType = ViewDebug_RecyclerTraceType;
	using IntToString = ViewDebug_IntToString;
	using HierarchyTraceType = ViewDebug_HierarchyTraceType;
	using FlagToString = ViewDebug_FlagToString;
	using ExportedProperty = ViewDebug_ExportedProperty;
	using CapturedViewProperty = ViewDebug_CapturedViewProperty;

	static jboolean TRACE_HIERARCHY() { return get_static_field<"TRACE_HIERARCHY", jboolean>(); }
	static jboolean TRACE_RECYCLER() { return get_static_field<"TRACE_RECYCLER", jboolean>(); }

	static jni::ref<android::view::ViewDebug> new_object() { return base_::new_object(); }
	static void trace(jni::ref<android::view::View> view, jni::ref<android::view::ViewDebug_RecyclerTraceType> type, jni::ref<jni::array<jint>> parameters) { return call_static_method<"trace", void>(view, type, parameters); }
	static void startRecyclerTracing(jni::ref<java::lang::String> prefix, jni::ref<android::view::View> view) { return call_static_method<"startRecyclerTracing", void>(prefix, view); }
	static void stopRecyclerTracing() { return call_static_method<"stopRecyclerTracing", void>(); }
	static void trace(jni::ref<android::view::View> view, jni::ref<android::view::ViewDebug_HierarchyTraceType> type) { return call_static_method<"trace", void>(view, type); }
	static void startHierarchyTracing(jni::ref<java::lang::String> prefix, jni::ref<android::view::View> view) { return call_static_method<"startHierarchyTracing", void>(prefix, view); }
	static void stopHierarchyTracing() { return call_static_method<"stopHierarchyTracing", void>(); }
	static void dumpCapturedView(jni::ref<java::lang::String> tag, jni::ref<java::lang::Object> view) { return call_static_method<"dumpCapturedView", void>(tag, view); }

protected:

	ViewDebug(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEWDEBUG
