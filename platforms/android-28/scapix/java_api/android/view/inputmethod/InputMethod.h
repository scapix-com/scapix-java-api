// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_INPUTMETHOD_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_INPUTMETHOD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::inputmethod { class InputMethod; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::inputmethod::InputMethod>
{
	static constexpr fixed_string class_name = "android/view/inputmethod/InputMethod";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_INPUTMETHOD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_INPUTMETHOD)
#define SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_INPUTMETHOD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/os/ResultReceiver.h>
#include <scapix/java_api/android/view/inputmethod/EditorInfo.h>
#include <scapix/java_api/android/view/inputmethod/InputBinding.h>
#include <scapix/java_api/android/view/inputmethod/InputConnection.h>
#include <scapix/java_api/android/view/inputmethod/InputMethod_SessionCallback.h>
#include <scapix/java_api/android/view/inputmethod/InputMethodSession.h>
#include <scapix/java_api/android/view/inputmethod/InputMethodSubtype.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::inputmethod::InputMethod : public jni::object_base<"android/view/inputmethod/InputMethod",
	java::lang::Object>
{
public:

	using SessionCallback = InputMethod_SessionCallback;

	static jni::ref<java::lang::String> SERVICE_INTERFACE() { return get_static_field<"SERVICE_INTERFACE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVICE_META_DATA() { return get_static_field<"SERVICE_META_DATA", jni::ref<java::lang::String>>(); }
	static jint SHOW_EXPLICIT() { return get_static_field<"SHOW_EXPLICIT", jint>(); }
	static jint SHOW_FORCED() { return get_static_field<"SHOW_FORCED", jint>(); }

	void attachToken(jni::ref<android::os::IBinder> p1) { return call_method<"attachToken", void>(p1); }
	void bindInput(jni::ref<android::view::inputmethod::InputBinding> p1) { return call_method<"bindInput", void>(p1); }
	void unbindInput() { return call_method<"unbindInput", void>(); }
	void startInput(jni::ref<android::view::inputmethod::InputConnection> p1, jni::ref<android::view::inputmethod::EditorInfo> p2) { return call_method<"startInput", void>(p1, p2); }
	void restartInput(jni::ref<android::view::inputmethod::InputConnection> p1, jni::ref<android::view::inputmethod::EditorInfo> p2) { return call_method<"restartInput", void>(p1, p2); }
	void createSession(jni::ref<android::view::inputmethod::InputMethod_SessionCallback> p1) { return call_method<"createSession", void>(p1); }
	void setSessionEnabled(jni::ref<android::view::inputmethod::InputMethodSession> p1, jboolean p2) { return call_method<"setSessionEnabled", void>(p1, p2); }
	void revokeSession(jni::ref<android::view::inputmethod::InputMethodSession> p1) { return call_method<"revokeSession", void>(p1); }
	void showSoftInput(jint p1, jni::ref<android::os::ResultReceiver> p2) { return call_method<"showSoftInput", void>(p1, p2); }
	void hideSoftInput(jint p1, jni::ref<android::os::ResultReceiver> p2) { return call_method<"hideSoftInput", void>(p1, p2); }
	void changeInputMethodSubtype(jni::ref<android::view::inputmethod::InputMethodSubtype> p1) { return call_method<"changeInputMethodSubtype", void>(p1); }

protected:

	InputMethod(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_INPUTMETHOD
