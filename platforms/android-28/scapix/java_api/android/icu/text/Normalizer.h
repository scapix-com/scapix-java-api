// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NORMALIZER_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NORMALIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class Normalizer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::Normalizer>
{
	static constexpr fixed_string class_name = "android/icu/text/Normalizer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NORMALIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NORMALIZER)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NORMALIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/Normalizer_QuickCheckResult.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::Normalizer : public jni::object_base<"android/icu/text/Normalizer",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using QuickCheckResult = Normalizer_QuickCheckResult;

	static jint COMPARE_CODE_POINT_ORDER() { return get_static_field<"COMPARE_CODE_POINT_ORDER", jint>(); }
	static jint COMPARE_IGNORE_CASE() { return get_static_field<"COMPARE_IGNORE_CASE", jint>(); }
	static jint FOLD_CASE_DEFAULT() { return get_static_field<"FOLD_CASE_DEFAULT", jint>(); }
	static jint FOLD_CASE_EXCLUDE_SPECIAL_I() { return get_static_field<"FOLD_CASE_EXCLUDE_SPECIAL_I", jint>(); }
	static jint INPUT_IS_FCD() { return get_static_field<"INPUT_IS_FCD", jint>(); }
	static jni::ref<android::icu::text::Normalizer_QuickCheckResult> MAYBE() { return get_static_field<"MAYBE", jni::ref<android::icu::text::Normalizer_QuickCheckResult>>(); }
	static jni::ref<android::icu::text::Normalizer_QuickCheckResult> NO() { return get_static_field<"NO", jni::ref<android::icu::text::Normalizer_QuickCheckResult>>(); }
	static jni::ref<android::icu::text::Normalizer_QuickCheckResult> YES() { return get_static_field<"YES", jni::ref<android::icu::text::Normalizer_QuickCheckResult>>(); }

	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	static jint compare(jni::ref<jni::array<jchar>> s1, jint s1Start, jint s1Limit, jni::ref<jni::array<jchar>> s2, jint s2Start, jint s2Limit, jint options) { return call_static_method<"compare", jint>(s1, s1Start, s1Limit, s2, s2Start, s2Limit, options); }
	static jint compare(jni::ref<java::lang::String> s1, jni::ref<java::lang::String> s2, jint options) { return call_static_method<"compare", jint>(s1, s2, options); }
	static jint compare(jni::ref<jni::array<jchar>> s1, jni::ref<jni::array<jchar>> s2, jint options) { return call_static_method<"compare", jint>(s1, s2, options); }
	static jint compare(jint char32a, jint char32b, jint options) { return call_static_method<"compare", jint>(char32a, char32b, options); }
	static jint compare(jint char32a, jni::ref<java::lang::String> str2, jint options) { return call_static_method<"compare", jint>(char32a, str2, options); }

protected:

	Normalizer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NORMALIZER
