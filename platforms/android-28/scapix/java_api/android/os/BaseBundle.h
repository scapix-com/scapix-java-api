// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_BASEBUNDLE_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_BASEBUNDLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class BaseBundle; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::BaseBundle>
{
	static constexpr fixed_string class_name = "android/os/BaseBundle";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_BASEBUNDLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_BASEBUNDLE)
#define SCAPIX_JAVA_API_ANDROID_OS_BASEBUNDLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::BaseBundle : public jni::object_base<"android/os/BaseBundle",
	java::lang::Object>
{
public:

	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	void clear() { return call_method<"clear", void>(); }
	jboolean containsKey(jni::ref<java::lang::String> key) { return call_method<"containsKey", jboolean>(key); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::String> key) { return call_method<"get", jni::ref<java::lang::Object>>(key); }
	void remove(jni::ref<java::lang::String> key) { return call_method<"remove", void>(key); }
	void putAll(jni::ref<android::os::PersistableBundle> bundle) { return call_method<"putAll", void>(bundle); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	void putBoolean(jni::ref<java::lang::String> key, jboolean value) { return call_method<"putBoolean", void>(key, value); }
	void putInt(jni::ref<java::lang::String> key, jint value) { return call_method<"putInt", void>(key, value); }
	void putLong(jni::ref<java::lang::String> key, jlong value) { return call_method<"putLong", void>(key, value); }
	void putDouble(jni::ref<java::lang::String> key, jdouble value) { return call_method<"putDouble", void>(key, value); }
	void putString(jni::ref<java::lang::String> key, jni::ref<java::lang::String> value) { return call_method<"putString", void>(key, value); }
	void putBooleanArray(jni::ref<java::lang::String> key, jni::ref<jni::array<jboolean>> value) { return call_method<"putBooleanArray", void>(key, value); }
	void putIntArray(jni::ref<java::lang::String> key, jni::ref<jni::array<jint>> value) { return call_method<"putIntArray", void>(key, value); }
	void putLongArray(jni::ref<java::lang::String> key, jni::ref<jni::array<jlong>> value) { return call_method<"putLongArray", void>(key, value); }
	void putDoubleArray(jni::ref<java::lang::String> key, jni::ref<jni::array<jdouble>> value) { return call_method<"putDoubleArray", void>(key, value); }
	void putStringArray(jni::ref<java::lang::String> key, jni::ref<jni::array<java::lang::String>> value) { return call_method<"putStringArray", void>(key, value); }
	jboolean getBoolean(jni::ref<java::lang::String> key) { return call_method<"getBoolean", jboolean>(key); }
	jboolean getBoolean(jni::ref<java::lang::String> key, jboolean defaultValue) { return call_method<"getBoolean", jboolean>(key, defaultValue); }
	jint getInt(jni::ref<java::lang::String> key) { return call_method<"getInt", jint>(key); }
	jint getInt(jni::ref<java::lang::String> key, jint defaultValue) { return call_method<"getInt", jint>(key, defaultValue); }
	jlong getLong(jni::ref<java::lang::String> key) { return call_method<"getLong", jlong>(key); }
	jlong getLong(jni::ref<java::lang::String> key, jlong defaultValue) { return call_method<"getLong", jlong>(key, defaultValue); }
	jdouble getDouble(jni::ref<java::lang::String> key) { return call_method<"getDouble", jdouble>(key); }
	jdouble getDouble(jni::ref<java::lang::String> key, jdouble defaultValue) { return call_method<"getDouble", jdouble>(key, defaultValue); }
	jni::ref<java::lang::String> getString(jni::ref<java::lang::String> key) { return call_method<"getString", jni::ref<java::lang::String>>(key); }
	jni::ref<java::lang::String> getString(jni::ref<java::lang::String> key, jni::ref<java::lang::String> defaultValue) { return call_method<"getString", jni::ref<java::lang::String>>(key, defaultValue); }
	jni::ref<jni::array<jboolean>> getBooleanArray(jni::ref<java::lang::String> key) { return call_method<"getBooleanArray", jni::ref<jni::array<jboolean>>>(key); }
	jni::ref<jni::array<jint>> getIntArray(jni::ref<java::lang::String> key) { return call_method<"getIntArray", jni::ref<jni::array<jint>>>(key); }
	jni::ref<jni::array<jlong>> getLongArray(jni::ref<java::lang::String> key) { return call_method<"getLongArray", jni::ref<jni::array<jlong>>>(key); }
	jni::ref<jni::array<jdouble>> getDoubleArray(jni::ref<java::lang::String> key) { return call_method<"getDoubleArray", jni::ref<jni::array<jdouble>>>(key); }
	jni::ref<jni::array<java::lang::String>> getStringArray(jni::ref<java::lang::String> key) { return call_method<"getStringArray", jni::ref<jni::array<java::lang::String>>>(key); }

protected:

	BaseBundle(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_BASEBUNDLE
