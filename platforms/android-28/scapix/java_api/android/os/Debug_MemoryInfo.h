// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_DEBUG_MEMORYINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_DEBUG_MEMORYINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class Debug_MemoryInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::Debug_MemoryInfo>
{
	static constexpr fixed_string class_name = "android/os/Debug$MemoryInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_DEBUG_MEMORYINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_DEBUG_MEMORYINFO)
#define SCAPIX_JAVA_API_ANDROID_OS_DEBUG_MEMORYINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::Debug_MemoryInfo : public jni::object_base<"android/os/Debug$MemoryInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	jint dalvikPrivateDirty() { return get_field<"dalvikPrivateDirty", jint>(); }
	void dalvikPrivateDirty(jint v) { set_field<"dalvikPrivateDirty", jint>(v); }
	jint dalvikPss() { return get_field<"dalvikPss", jint>(); }
	void dalvikPss(jint v) { set_field<"dalvikPss", jint>(v); }
	jint dalvikSharedDirty() { return get_field<"dalvikSharedDirty", jint>(); }
	void dalvikSharedDirty(jint v) { set_field<"dalvikSharedDirty", jint>(v); }
	jint nativePrivateDirty() { return get_field<"nativePrivateDirty", jint>(); }
	void nativePrivateDirty(jint v) { set_field<"nativePrivateDirty", jint>(v); }
	jint nativePss() { return get_field<"nativePss", jint>(); }
	void nativePss(jint v) { set_field<"nativePss", jint>(v); }
	jint nativeSharedDirty() { return get_field<"nativeSharedDirty", jint>(); }
	void nativeSharedDirty(jint v) { set_field<"nativeSharedDirty", jint>(v); }
	jint otherPrivateDirty() { return get_field<"otherPrivateDirty", jint>(); }
	void otherPrivateDirty(jint v) { set_field<"otherPrivateDirty", jint>(v); }
	jint otherPss() { return get_field<"otherPss", jint>(); }
	void otherPss(jint v) { set_field<"otherPss", jint>(v); }
	jint otherSharedDirty() { return get_field<"otherSharedDirty", jint>(); }
	void otherSharedDirty(jint v) { set_field<"otherSharedDirty", jint>(v); }

	static jni::ref<android::os::Debug_MemoryInfo> new_object() { return base_::new_object(); }
	jint getTotalPss() { return call_method<"getTotalPss", jint>(); }
	jint getTotalSwappablePss() { return call_method<"getTotalSwappablePss", jint>(); }
	jint getTotalPrivateDirty() { return call_method<"getTotalPrivateDirty", jint>(); }
	jint getTotalSharedDirty() { return call_method<"getTotalSharedDirty", jint>(); }
	jint getTotalPrivateClean() { return call_method<"getTotalPrivateClean", jint>(); }
	jint getTotalSharedClean() { return call_method<"getTotalSharedClean", jint>(); }
	jni::ref<java::lang::String> getMemoryStat(jni::ref<java::lang::String> statName) { return call_method<"getMemoryStat", jni::ref<java::lang::String>>(statName); }
	jni::ref<java::util::Map> getMemoryStats() { return call_method<"getMemoryStats", jni::ref<java::util::Map>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	void readFromParcel(jni::ref<android::os::Parcel> source) { return call_method<"readFromParcel", void>(source); }

protected:

	Debug_MemoryInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_DEBUG_MEMORYINFO
