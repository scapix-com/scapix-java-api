// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICE_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICE_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::slice { class Slice_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::slice::Slice_Builder>
{
	static constexpr fixed_string class_name = "android/app/slice/Slice$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICE_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICE_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICE_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/app/RemoteInput.h>
#include <scapix/java_api/android/app/slice/Slice.h>
#include <scapix/java_api/android/app/slice/SliceSpec.h>
#include <scapix/java_api/android/graphics/drawable/Icon.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::slice::Slice_Builder : public jni::object_base<"android/app/slice/Slice$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::app::slice::Slice_Builder> new_object(jni::ref<android::net::Uri> uri, jni::ref<android::app::slice::SliceSpec> spec) { return base_::new_object(uri, spec); }
	static jni::ref<android::app::slice::Slice_Builder> new_object(jni::ref<android::app::slice::Slice_Builder> parent) { return base_::new_object(parent); }
	jni::ref<android::app::slice::Slice_Builder> setCallerNeeded(jboolean callerNeeded) { return call_method<"setCallerNeeded", jni::ref<android::app::slice::Slice_Builder>>(callerNeeded); }
	jni::ref<android::app::slice::Slice_Builder> addHints(jni::ref<java::util::List> hints) { return call_method<"addHints", jni::ref<android::app::slice::Slice_Builder>>(hints); }
	jni::ref<android::app::slice::Slice_Builder> addSubSlice(jni::ref<android::app::slice::Slice> slice, jni::ref<java::lang::String> subType) { return call_method<"addSubSlice", jni::ref<android::app::slice::Slice_Builder>>(slice, subType); }
	jni::ref<android::app::slice::Slice_Builder> addAction(jni::ref<android::app::PendingIntent> action, jni::ref<android::app::slice::Slice> s, jni::ref<java::lang::String> subType) { return call_method<"addAction", jni::ref<android::app::slice::Slice_Builder>>(action, s, subType); }
	jni::ref<android::app::slice::Slice_Builder> addText(jni::ref<java::lang::CharSequence> text, jni::ref<java::lang::String> subType, jni::ref<java::util::List> hints) { return call_method<"addText", jni::ref<android::app::slice::Slice_Builder>>(text, subType, hints); }
	jni::ref<android::app::slice::Slice_Builder> addIcon(jni::ref<android::graphics::drawable::Icon> icon, jni::ref<java::lang::String> subType, jni::ref<java::util::List> hints) { return call_method<"addIcon", jni::ref<android::app::slice::Slice_Builder>>(icon, subType, hints); }
	jni::ref<android::app::slice::Slice_Builder> addRemoteInput(jni::ref<android::app::RemoteInput> remoteInput, jni::ref<java::lang::String> subType, jni::ref<java::util::List> hints) { return call_method<"addRemoteInput", jni::ref<android::app::slice::Slice_Builder>>(remoteInput, subType, hints); }
	jni::ref<android::app::slice::Slice_Builder> addInt(jint value, jni::ref<java::lang::String> subType, jni::ref<java::util::List> hints) { return call_method<"addInt", jni::ref<android::app::slice::Slice_Builder>>(value, subType, hints); }
	jni::ref<android::app::slice::Slice_Builder> addLong(jlong value, jni::ref<java::lang::String> p2, jni::ref<java::util::List> subType) { return call_method<"addLong", jni::ref<android::app::slice::Slice_Builder>>(value, p2, subType); }
	jni::ref<android::app::slice::Slice_Builder> addBundle(jni::ref<android::os::Bundle> bundle, jni::ref<java::lang::String> subType, jni::ref<java::util::List> hints) { return call_method<"addBundle", jni::ref<android::app::slice::Slice_Builder>>(bundle, subType, hints); }
	jni::ref<android::app::slice::Slice> build() { return call_method<"build", jni::ref<android::app::slice::Slice>>(); }

protected:

	Slice_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICE_BUILDER
