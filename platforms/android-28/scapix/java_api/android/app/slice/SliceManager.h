// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::slice { class SliceManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::slice::SliceManager>
{
	static constexpr fixed_string class_name = "android/app/slice/SliceManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/slice/Slice.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::slice::SliceManager : public jni::object_base<"android/app/slice/SliceManager",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> CATEGORY_SLICE() { return get_static_field<"CATEGORY_SLICE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SLICE_METADATA_KEY() { return get_static_field<"SLICE_METADATA_KEY", jni::ref<java::lang::String>>(); }

	void pinSlice(jni::ref<android::net::Uri> uri, jni::ref<java::util::Set> specs) { return call_method<"pinSlice", void>(uri, specs); }
	void unpinSlice(jni::ref<android::net::Uri> uri) { return call_method<"unpinSlice", void>(uri); }
	jni::ref<java::util::Set> getPinnedSpecs(jni::ref<android::net::Uri> uri) { return call_method<"getPinnedSpecs", jni::ref<java::util::Set>>(uri); }
	jni::ref<java::util::List> getPinnedSlices() { return call_method<"getPinnedSlices", jni::ref<java::util::List>>(); }
	jni::ref<java::util::Collection> getSliceDescendants(jni::ref<android::net::Uri> uri) { return call_method<"getSliceDescendants", jni::ref<java::util::Collection>>(uri); }
	jni::ref<android::app::slice::Slice> bindSlice(jni::ref<android::net::Uri> uri, jni::ref<java::util::Set> supportedSpecs) { return call_method<"bindSlice", jni::ref<android::app::slice::Slice>>(uri, supportedSpecs); }
	jni::ref<android::net::Uri> mapIntentToUri(jni::ref<android::content::Intent> intent) { return call_method<"mapIntentToUri", jni::ref<android::net::Uri>>(intent); }
	jni::ref<android::app::slice::Slice> bindSlice(jni::ref<android::content::Intent> intent, jni::ref<java::util::Set> supportedSpecs) { return call_method<"bindSlice", jni::ref<android::app::slice::Slice>>(intent, supportedSpecs); }
	jint checkSlicePermission(jni::ref<android::net::Uri> uri, jint pid, jint uid) { return call_method<"checkSlicePermission", jint>(uri, pid, uid); }
	void grantSlicePermission(jni::ref<java::lang::String> toPackage, jni::ref<android::net::Uri> uri) { return call_method<"grantSlicePermission", void>(toPackage, uri); }
	void revokeSlicePermission(jni::ref<java::lang::String> toPackage, jni::ref<android::net::Uri> uri) { return call_method<"revokeSlicePermission", void>(toPackage, uri); }

protected:

	SliceManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEMANAGER
