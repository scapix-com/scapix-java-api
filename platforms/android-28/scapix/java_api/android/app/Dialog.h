// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/content/DialogInterface.h>
#include <scapix/java_api/android/view/Window_Callback.h>
#include <scapix/java_api/android/view/KeyEvent_Callback.h>
#include <scapix/java_api/android/view/View_OnCreateContextMenuListener.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_DIALOG_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_DIALOG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class Dialog; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::Dialog>
{
	static constexpr fixed_string class_name = "android/app/Dialog";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::content::DialogInterface, scapix::java_api::android::view::Window_Callback, scapix::java_api::android::view::KeyEvent_Callback, scapix::java_api::android::view::View_OnCreateContextMenuListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_DIALOG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_DIALOG)
#define SCAPIX_JAVA_API_ANDROID_APP_DIALOG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/ActionBar.h>
#include <scapix/java_api/android/app/Activity.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/DialogInterface_OnCancelListener.h>
#include <scapix/java_api/android/content/DialogInterface_OnDismissListener.h>
#include <scapix/java_api/android/content/DialogInterface_OnKeyListener.h>
#include <scapix/java_api/android/content/DialogInterface_OnShowListener.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/android/view/ActionMode.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/ContextMenu.h>
#include <scapix/java_api/android/view/ContextMenu_ContextMenuInfo.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/LayoutInflater.h>
#include <scapix/java_api/android/view/Menu.h>
#include <scapix/java_api/android/view/MenuItem.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/SearchEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/Window.h>
#include <scapix/java_api/android/view/WindowManager_LayoutParams.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::Dialog : public jni::object_base<"android/app/Dialog",
	java::lang::Object,
	android::content::DialogInterface,
	android::view::Window_Callback,
	android::view::KeyEvent_Callback,
	android::view::View_OnCreateContextMenuListener>
{
public:

	static jni::ref<android::app::Dialog> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::app::Dialog> new_object(jni::ref<android::content::Context> context, jint themeResId) { return base_::new_object(context, themeResId); }
	jni::ref<android::content::Context> getContext() { return call_method<"getContext", jni::ref<android::content::Context>>(); }
	jni::ref<android::app::ActionBar> getActionBar() { return call_method<"getActionBar", jni::ref<android::app::ActionBar>>(); }
	void setOwnerActivity(jni::ref<android::app::Activity> activity) { return call_method<"setOwnerActivity", void>(activity); }
	jni::ref<android::app::Activity> getOwnerActivity() { return call_method<"getOwnerActivity", jni::ref<android::app::Activity>>(); }
	jboolean isShowing() { return call_method<"isShowing", jboolean>(); }
	void create() { return call_method<"create", void>(); }
	void show() { return call_method<"show", void>(); }
	void hide() { return call_method<"hide", void>(); }
	void dismiss() { return call_method<"dismiss", void>(); }
	jni::ref<android::os::Bundle> onSaveInstanceState() { return call_method<"onSaveInstanceState", jni::ref<android::os::Bundle>>(); }
	void onRestoreInstanceState(jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onRestoreInstanceState", void>(savedInstanceState); }
	jni::ref<android::view::Window> getWindow() { return call_method<"getWindow", jni::ref<android::view::Window>>(); }
	jni::ref<android::view::View> getCurrentFocus() { return call_method<"getCurrentFocus", jni::ref<android::view::View>>(); }
	jni::ref<android::view::View> findViewById(jint id) { return call_method<"findViewById", jni::ref<android::view::View>>(id); }
	jni::ref<android::view::View> requireViewById(jint id) { return call_method<"requireViewById", jni::ref<android::view::View>>(id); }
	void setContentView(jint layoutResID) { return call_method<"setContentView", void>(layoutResID); }
	void setContentView(jni::ref<android::view::View> view) { return call_method<"setContentView", void>(view); }
	void setContentView(jni::ref<android::view::View> view, jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"setContentView", void>(view, params); }
	void addContentView(jni::ref<android::view::View> view, jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"addContentView", void>(view, params); }
	void setTitle(jni::ref<java::lang::CharSequence> title) { return call_method<"setTitle", void>(title); }
	void setTitle(jint titleId) { return call_method<"setTitle", void>(titleId); }
	jboolean onKeyDown(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyDown", jboolean>(keyCode, event); }
	jboolean onKeyLongPress(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyLongPress", jboolean>(keyCode, event); }
	jboolean onKeyUp(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyUp", jboolean>(keyCode, event); }
	jboolean onKeyMultiple(jint keyCode, jint repeatCount, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyMultiple", jboolean>(keyCode, repeatCount, event); }
	void onBackPressed() { return call_method<"onBackPressed", void>(); }
	jboolean onKeyShortcut(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyShortcut", jboolean>(keyCode, event); }
	jboolean onTouchEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onTouchEvent", jboolean>(event); }
	jboolean onTrackballEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onTrackballEvent", jboolean>(event); }
	jboolean onGenericMotionEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onGenericMotionEvent", jboolean>(event); }
	void onWindowAttributesChanged(jni::ref<android::view::WindowManager_LayoutParams> params) { return call_method<"onWindowAttributesChanged", void>(params); }
	void onContentChanged() { return call_method<"onContentChanged", void>(); }
	void onWindowFocusChanged(jboolean hasFocus) { return call_method<"onWindowFocusChanged", void>(hasFocus); }
	void onAttachedToWindow() { return call_method<"onAttachedToWindow", void>(); }
	void onDetachedFromWindow() { return call_method<"onDetachedFromWindow", void>(); }
	jboolean dispatchKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEvent", jboolean>(event); }
	jboolean dispatchKeyShortcutEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyShortcutEvent", jboolean>(event); }
	jboolean dispatchTouchEvent(jni::ref<android::view::MotionEvent> ev) { return call_method<"dispatchTouchEvent", jboolean>(ev); }
	jboolean dispatchTrackballEvent(jni::ref<android::view::MotionEvent> ev) { return call_method<"dispatchTrackballEvent", jboolean>(ev); }
	jboolean dispatchGenericMotionEvent(jni::ref<android::view::MotionEvent> ev) { return call_method<"dispatchGenericMotionEvent", jboolean>(ev); }
	jboolean dispatchPopulateAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"dispatchPopulateAccessibilityEvent", jboolean>(event); }
	jni::ref<android::view::View> onCreatePanelView(jint featureId) { return call_method<"onCreatePanelView", jni::ref<android::view::View>>(featureId); }
	jboolean onCreatePanelMenu(jint featureId, jni::ref<android::view::Menu> menu) { return call_method<"onCreatePanelMenu", jboolean>(featureId, menu); }
	jboolean onPreparePanel(jint featureId, jni::ref<android::view::View> view, jni::ref<android::view::Menu> menu) { return call_method<"onPreparePanel", jboolean>(featureId, view, menu); }
	jboolean onMenuOpened(jint featureId, jni::ref<android::view::Menu> menu) { return call_method<"onMenuOpened", jboolean>(featureId, menu); }
	jboolean onMenuItemSelected(jint featureId, jni::ref<android::view::MenuItem> item) { return call_method<"onMenuItemSelected", jboolean>(featureId, item); }
	void onPanelClosed(jint featureId, jni::ref<android::view::Menu> menu) { return call_method<"onPanelClosed", void>(featureId, menu); }
	jboolean onCreateOptionsMenu(jni::ref<android::view::Menu> menu) { return call_method<"onCreateOptionsMenu", jboolean>(menu); }
	jboolean onPrepareOptionsMenu(jni::ref<android::view::Menu> menu) { return call_method<"onPrepareOptionsMenu", jboolean>(menu); }
	jboolean onOptionsItemSelected(jni::ref<android::view::MenuItem> item) { return call_method<"onOptionsItemSelected", jboolean>(item); }
	void onOptionsMenuClosed(jni::ref<android::view::Menu> menu) { return call_method<"onOptionsMenuClosed", void>(menu); }
	void openOptionsMenu() { return call_method<"openOptionsMenu", void>(); }
	void closeOptionsMenu() { return call_method<"closeOptionsMenu", void>(); }
	void invalidateOptionsMenu() { return call_method<"invalidateOptionsMenu", void>(); }
	void onCreateContextMenu(jni::ref<android::view::ContextMenu> menu, jni::ref<android::view::View> v, jni::ref<android::view::ContextMenu_ContextMenuInfo> menuInfo) { return call_method<"onCreateContextMenu", void>(menu, v, menuInfo); }
	void registerForContextMenu(jni::ref<android::view::View> view) { return call_method<"registerForContextMenu", void>(view); }
	void unregisterForContextMenu(jni::ref<android::view::View> view) { return call_method<"unregisterForContextMenu", void>(view); }
	void openContextMenu(jni::ref<android::view::View> view) { return call_method<"openContextMenu", void>(view); }
	jboolean onContextItemSelected(jni::ref<android::view::MenuItem> item) { return call_method<"onContextItemSelected", jboolean>(item); }
	void onContextMenuClosed(jni::ref<android::view::Menu> menu) { return call_method<"onContextMenuClosed", void>(menu); }
	jboolean onSearchRequested(jni::ref<android::view::SearchEvent> searchEvent) { return call_method<"onSearchRequested", jboolean>(searchEvent); }
	jboolean onSearchRequested() { return call_method<"onSearchRequested", jboolean>(); }
	jni::ref<android::view::SearchEvent> getSearchEvent() { return call_method<"getSearchEvent", jni::ref<android::view::SearchEvent>>(); }
	jni::ref<android::view::ActionMode> onWindowStartingActionMode(jni::ref<android::view::ActionMode_Callback> callback) { return call_method<"onWindowStartingActionMode", jni::ref<android::view::ActionMode>>(callback); }
	jni::ref<android::view::ActionMode> onWindowStartingActionMode(jni::ref<android::view::ActionMode_Callback> callback, jint type) { return call_method<"onWindowStartingActionMode", jni::ref<android::view::ActionMode>>(callback, type); }
	void onActionModeStarted(jni::ref<android::view::ActionMode> mode) { return call_method<"onActionModeStarted", void>(mode); }
	void onActionModeFinished(jni::ref<android::view::ActionMode> mode) { return call_method<"onActionModeFinished", void>(mode); }
	void takeKeyEvents(jboolean get) { return call_method<"takeKeyEvents", void>(get); }
	jboolean requestWindowFeature(jint featureId) { return call_method<"requestWindowFeature", jboolean>(featureId); }
	void setFeatureDrawableResource(jint featureId, jint resId) { return call_method<"setFeatureDrawableResource", void>(featureId, resId); }
	void setFeatureDrawableUri(jint featureId, jni::ref<android::net::Uri> uri) { return call_method<"setFeatureDrawableUri", void>(featureId, uri); }
	void setFeatureDrawable(jint featureId, jni::ref<android::graphics::drawable::Drawable> drawable) { return call_method<"setFeatureDrawable", void>(featureId, drawable); }
	void setFeatureDrawableAlpha(jint featureId, jint alpha) { return call_method<"setFeatureDrawableAlpha", void>(featureId, alpha); }
	jni::ref<android::view::LayoutInflater> getLayoutInflater() { return call_method<"getLayoutInflater", jni::ref<android::view::LayoutInflater>>(); }
	void setCancelable(jboolean flag) { return call_method<"setCancelable", void>(flag); }
	void setCanceledOnTouchOutside(jboolean cancel) { return call_method<"setCanceledOnTouchOutside", void>(cancel); }
	void cancel() { return call_method<"cancel", void>(); }
	void setOnCancelListener(jni::ref<android::content::DialogInterface_OnCancelListener> listener) { return call_method<"setOnCancelListener", void>(listener); }
	void setCancelMessage(jni::ref<android::os::Message> msg) { return call_method<"setCancelMessage", void>(msg); }
	void setOnDismissListener(jni::ref<android::content::DialogInterface_OnDismissListener> listener) { return call_method<"setOnDismissListener", void>(listener); }
	void setOnShowListener(jni::ref<android::content::DialogInterface_OnShowListener> listener) { return call_method<"setOnShowListener", void>(listener); }
	void setDismissMessage(jni::ref<android::os::Message> msg) { return call_method<"setDismissMessage", void>(msg); }
	void setVolumeControlStream(jint streamType) { return call_method<"setVolumeControlStream", void>(streamType); }
	jint getVolumeControlStream() { return call_method<"getVolumeControlStream", jint>(); }
	void setOnKeyListener(jni::ref<android::content::DialogInterface_OnKeyListener> onKeyListener) { return call_method<"setOnKeyListener", void>(onKeyListener); }

protected:

	Dialog(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_DIALOG
