// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::job { class JobInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::job::JobInfo>
{
	static constexpr fixed_string class_name = "android/app/job/JobInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBINFO)
#define SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/job/JobInfo_TriggerContentUri.h>
#include <scapix/java_api/android/content/ClipData.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/net/NetworkRequest.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/app/job/JobInfo_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::job::JobInfo : public jni::object_base<"android/app/job/JobInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using TriggerContentUri = JobInfo_TriggerContentUri;
	using Builder = JobInfo_Builder;

	static jint BACKOFF_POLICY_EXPONENTIAL() { return get_static_field<"BACKOFF_POLICY_EXPONENTIAL", jint>(); }
	static jint BACKOFF_POLICY_LINEAR() { return get_static_field<"BACKOFF_POLICY_LINEAR", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jlong DEFAULT_INITIAL_BACKOFF_MILLIS() { return get_static_field<"DEFAULT_INITIAL_BACKOFF_MILLIS", jlong>(); }
	static jlong MAX_BACKOFF_DELAY_MILLIS() { return get_static_field<"MAX_BACKOFF_DELAY_MILLIS", jlong>(); }
	static jint NETWORK_BYTES_UNKNOWN() { return get_static_field<"NETWORK_BYTES_UNKNOWN", jint>(); }
	static jint NETWORK_TYPE_ANY() { return get_static_field<"NETWORK_TYPE_ANY", jint>(); }
	static jint NETWORK_TYPE_CELLULAR() { return get_static_field<"NETWORK_TYPE_CELLULAR", jint>(); }
	static jint NETWORK_TYPE_METERED() { return get_static_field<"NETWORK_TYPE_METERED", jint>(); }
	static jint NETWORK_TYPE_NONE() { return get_static_field<"NETWORK_TYPE_NONE", jint>(); }
	static jint NETWORK_TYPE_NOT_ROAMING() { return get_static_field<"NETWORK_TYPE_NOT_ROAMING", jint>(); }
	static jint NETWORK_TYPE_UNMETERED() { return get_static_field<"NETWORK_TYPE_UNMETERED", jint>(); }

	static jlong getMinPeriodMillis() { return call_static_method<"getMinPeriodMillis", jlong>(); }
	static jlong getMinFlexMillis() { return call_static_method<"getMinFlexMillis", jlong>(); }
	jint getId() { return call_method<"getId", jint>(); }
	jni::ref<android::os::PersistableBundle> getExtras() { return call_method<"getExtras", jni::ref<android::os::PersistableBundle>>(); }
	jni::ref<android::os::Bundle> getTransientExtras() { return call_method<"getTransientExtras", jni::ref<android::os::Bundle>>(); }
	jni::ref<android::content::ClipData> getClipData() { return call_method<"getClipData", jni::ref<android::content::ClipData>>(); }
	jint getClipGrantFlags() { return call_method<"getClipGrantFlags", jint>(); }
	jni::ref<android::content::ComponentName> getService() { return call_method<"getService", jni::ref<android::content::ComponentName>>(); }
	jboolean isRequireCharging() { return call_method<"isRequireCharging", jboolean>(); }
	jboolean isRequireBatteryNotLow() { return call_method<"isRequireBatteryNotLow", jboolean>(); }
	jboolean isRequireDeviceIdle() { return call_method<"isRequireDeviceIdle", jboolean>(); }
	jboolean isRequireStorageNotLow() { return call_method<"isRequireStorageNotLow", jboolean>(); }
	jni::ref<jni::array<android::app::job::JobInfo_TriggerContentUri>> getTriggerContentUris() { return call_method<"getTriggerContentUris", jni::ref<jni::array<android::app::job::JobInfo_TriggerContentUri>>>(); }
	jlong getTriggerContentUpdateDelay() { return call_method<"getTriggerContentUpdateDelay", jlong>(); }
	jlong getTriggerContentMaxDelay() { return call_method<"getTriggerContentMaxDelay", jlong>(); }
	jint getNetworkType() { return call_method<"getNetworkType", jint>(); }
	jni::ref<android::net::NetworkRequest> getRequiredNetwork() { return call_method<"getRequiredNetwork", jni::ref<android::net::NetworkRequest>>(); }
	jlong getEstimatedNetworkDownloadBytes() { return call_method<"getEstimatedNetworkDownloadBytes", jlong>(); }
	jlong getEstimatedNetworkUploadBytes() { return call_method<"getEstimatedNetworkUploadBytes", jlong>(); }
	jlong getMinLatencyMillis() { return call_method<"getMinLatencyMillis", jlong>(); }
	jlong getMaxExecutionDelayMillis() { return call_method<"getMaxExecutionDelayMillis", jlong>(); }
	jboolean isPeriodic() { return call_method<"isPeriodic", jboolean>(); }
	jboolean isPersisted() { return call_method<"isPersisted", jboolean>(); }
	jlong getIntervalMillis() { return call_method<"getIntervalMillis", jlong>(); }
	jlong getFlexMillis() { return call_method<"getFlexMillis", jlong>(); }
	jlong getInitialBackoffMillis() { return call_method<"getInitialBackoffMillis", jlong>(); }
	jint getBackoffPolicy() { return call_method<"getBackoffPolicy", jint>(); }
	jboolean isImportantWhileForeground() { return call_method<"isImportantWhileForeground", jboolean>(); }
	jboolean isPrefetch() { return call_method<"isPrefetch", jboolean>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	JobInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBINFO
