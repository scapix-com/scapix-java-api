// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/FrameLayout.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GESTURE_GESTUREOVERLAYVIEW_FWD
#define SCAPIX_JAVA_API_ANDROID_GESTURE_GESTUREOVERLAYVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::gesture { class GestureOverlayView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::gesture::GestureOverlayView>
{
	static constexpr fixed_string class_name = "android/gesture/GestureOverlayView";
	using base_classes = std::tuple<scapix::java_api::android::widget::FrameLayout>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GESTURE_GESTUREOVERLAYVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GESTURE_GESTUREOVERLAYVIEW)
#define SCAPIX_JAVA_API_ANDROID_GESTURE_GESTUREOVERLAYVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/gesture/Gesture.h>
#include <scapix/java_api/android/gesture/GestureOverlayView_OnGestureListener.h>
#include <scapix/java_api/android/gesture/GestureOverlayView_OnGesturePerformedListener.h>
#include <scapix/java_api/android/gesture/GestureOverlayView_OnGesturingListener.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Path.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/java/util/ArrayList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::gesture::GestureOverlayView : public jni::object_base<"android/gesture/GestureOverlayView",
	android::widget::FrameLayout>
{
public:

	using OnGesturingListener = GestureOverlayView_OnGesturingListener;
	using OnGesturePerformedListener = GestureOverlayView_OnGesturePerformedListener;
	using OnGestureListener = GestureOverlayView_OnGestureListener;

	static jint GESTURE_STROKE_TYPE_MULTIPLE() { return get_static_field<"GESTURE_STROKE_TYPE_MULTIPLE", jint>(); }
	static jint GESTURE_STROKE_TYPE_SINGLE() { return get_static_field<"GESTURE_STROKE_TYPE_SINGLE", jint>(); }
	static jint ORIENTATION_HORIZONTAL() { return get_static_field<"ORIENTATION_HORIZONTAL", jint>(); }
	static jint ORIENTATION_VERTICAL() { return get_static_field<"ORIENTATION_VERTICAL", jint>(); }

	static jni::ref<android::gesture::GestureOverlayView> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::gesture::GestureOverlayView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::gesture::GestureOverlayView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::gesture::GestureOverlayView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jni::ref<java::util::ArrayList> getCurrentStroke() { return call_method<"getCurrentStroke", jni::ref<java::util::ArrayList>>(); }
	jint getOrientation() { return call_method<"getOrientation", jint>(); }
	void setOrientation(jint orientation) { return call_method<"setOrientation", void>(orientation); }
	void setGestureColor(jint color) { return call_method<"setGestureColor", void>(color); }
	void setUncertainGestureColor(jint color) { return call_method<"setUncertainGestureColor", void>(color); }
	jint getUncertainGestureColor() { return call_method<"getUncertainGestureColor", jint>(); }
	jint getGestureColor() { return call_method<"getGestureColor", jint>(); }
	jfloat getGestureStrokeWidth() { return call_method<"getGestureStrokeWidth", jfloat>(); }
	void setGestureStrokeWidth(jfloat gestureStrokeWidth) { return call_method<"setGestureStrokeWidth", void>(gestureStrokeWidth); }
	jint getGestureStrokeType() { return call_method<"getGestureStrokeType", jint>(); }
	void setGestureStrokeType(jint gestureStrokeType) { return call_method<"setGestureStrokeType", void>(gestureStrokeType); }
	jfloat getGestureStrokeLengthThreshold() { return call_method<"getGestureStrokeLengthThreshold", jfloat>(); }
	void setGestureStrokeLengthThreshold(jfloat gestureStrokeLengthThreshold) { return call_method<"setGestureStrokeLengthThreshold", void>(gestureStrokeLengthThreshold); }
	jfloat getGestureStrokeSquarenessTreshold() { return call_method<"getGestureStrokeSquarenessTreshold", jfloat>(); }
	void setGestureStrokeSquarenessTreshold(jfloat gestureStrokeSquarenessTreshold) { return call_method<"setGestureStrokeSquarenessTreshold", void>(gestureStrokeSquarenessTreshold); }
	jfloat getGestureStrokeAngleThreshold() { return call_method<"getGestureStrokeAngleThreshold", jfloat>(); }
	void setGestureStrokeAngleThreshold(jfloat gestureStrokeAngleThreshold) { return call_method<"setGestureStrokeAngleThreshold", void>(gestureStrokeAngleThreshold); }
	jboolean isEventsInterceptionEnabled() { return call_method<"isEventsInterceptionEnabled", jboolean>(); }
	void setEventsInterceptionEnabled(jboolean enabled) { return call_method<"setEventsInterceptionEnabled", void>(enabled); }
	jboolean isFadeEnabled() { return call_method<"isFadeEnabled", jboolean>(); }
	void setFadeEnabled(jboolean fadeEnabled) { return call_method<"setFadeEnabled", void>(fadeEnabled); }
	jni::ref<android::gesture::Gesture> getGesture() { return call_method<"getGesture", jni::ref<android::gesture::Gesture>>(); }
	void setGesture(jni::ref<android::gesture::Gesture> gesture) { return call_method<"setGesture", void>(gesture); }
	jni::ref<android::graphics::Path> getGesturePath() { return call_method<"getGesturePath", jni::ref<android::graphics::Path>>(); }
	jni::ref<android::graphics::Path> getGesturePath(jni::ref<android::graphics::Path> path) { return call_method<"getGesturePath", jni::ref<android::graphics::Path>>(path); }
	jboolean isGestureVisible() { return call_method<"isGestureVisible", jboolean>(); }
	void setGestureVisible(jboolean visible) { return call_method<"setGestureVisible", void>(visible); }
	jlong getFadeOffset() { return call_method<"getFadeOffset", jlong>(); }
	void setFadeOffset(jlong fadeOffset) { return call_method<"setFadeOffset", void>(fadeOffset); }
	void addOnGestureListener(jni::ref<android::gesture::GestureOverlayView_OnGestureListener> listener) { return call_method<"addOnGestureListener", void>(listener); }
	void removeOnGestureListener(jni::ref<android::gesture::GestureOverlayView_OnGestureListener> listener) { return call_method<"removeOnGestureListener", void>(listener); }
	void removeAllOnGestureListeners() { return call_method<"removeAllOnGestureListeners", void>(); }
	void addOnGesturePerformedListener(jni::ref<android::gesture::GestureOverlayView_OnGesturePerformedListener> listener) { return call_method<"addOnGesturePerformedListener", void>(listener); }
	void removeOnGesturePerformedListener(jni::ref<android::gesture::GestureOverlayView_OnGesturePerformedListener> listener) { return call_method<"removeOnGesturePerformedListener", void>(listener); }
	void removeAllOnGesturePerformedListeners() { return call_method<"removeAllOnGesturePerformedListeners", void>(); }
	void addOnGesturingListener(jni::ref<android::gesture::GestureOverlayView_OnGesturingListener> listener) { return call_method<"addOnGesturingListener", void>(listener); }
	void removeOnGesturingListener(jni::ref<android::gesture::GestureOverlayView_OnGesturingListener> listener) { return call_method<"removeOnGesturingListener", void>(listener); }
	void removeAllOnGesturingListeners() { return call_method<"removeAllOnGesturingListeners", void>(); }
	jboolean isGesturing() { return call_method<"isGesturing", jboolean>(); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }
	void clear(jboolean animated) { return call_method<"clear", void>(animated); }
	void cancelClearAnimation() { return call_method<"cancelClearAnimation", void>(); }
	void cancelGesture() { return call_method<"cancelGesture", void>(); }
	jboolean dispatchTouchEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchTouchEvent", jboolean>(event); }

protected:

	GestureOverlayView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GESTURE_GESTUREOVERLAYVIEW
