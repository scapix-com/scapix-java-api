// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPAUDIOCALL_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPAUDIOCALL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::sip { class SipAudioCall; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::sip::SipAudioCall>
{
	static constexpr fixed_string class_name = "android/net/sip/SipAudioCall";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPAUDIOCALL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPAUDIOCALL)
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPAUDIOCALL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/net/sip/SipAudioCall_Listener.h>
#include <scapix/java_api/android/net/sip/SipProfile.h>
#include <scapix/java_api/android/net/sip/SipSession.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::sip::SipAudioCall : public jni::object_base<"android/net/sip/SipAudioCall",
	java::lang::Object>
{
public:

	using Listener = SipAudioCall_Listener;

	static jni::ref<android::net::sip::SipAudioCall> new_object(jni::ref<android::content::Context> context, jni::ref<android::net::sip::SipProfile> localProfile) { return base_::new_object(context, localProfile); }
	void setListener(jni::ref<android::net::sip::SipAudioCall_Listener> listener) { return call_method<"setListener", void>(listener); }
	void setListener(jni::ref<android::net::sip::SipAudioCall_Listener> listener, jboolean callbackImmediately) { return call_method<"setListener", void>(listener, callbackImmediately); }
	jboolean isInCall() { return call_method<"isInCall", jboolean>(); }
	jboolean isOnHold() { return call_method<"isOnHold", jboolean>(); }
	void close() { return call_method<"close", void>(); }
	jni::ref<android::net::sip::SipProfile> getLocalProfile() { return call_method<"getLocalProfile", jni::ref<android::net::sip::SipProfile>>(); }
	jni::ref<android::net::sip::SipProfile> getPeerProfile() { return call_method<"getPeerProfile", jni::ref<android::net::sip::SipProfile>>(); }
	jint getState() { return call_method<"getState", jint>(); }
	void attachCall(jni::ref<android::net::sip::SipSession> session, jni::ref<java::lang::String> sessionDescription) { return call_method<"attachCall", void>(session, sessionDescription); }
	void makeCall(jni::ref<android::net::sip::SipProfile> peerProfile, jni::ref<android::net::sip::SipSession> sipSession, jint timeout) { return call_method<"makeCall", void>(peerProfile, sipSession, timeout); }
	void endCall() { return call_method<"endCall", void>(); }
	void holdCall(jint timeout) { return call_method<"holdCall", void>(timeout); }
	void answerCall(jint timeout) { return call_method<"answerCall", void>(timeout); }
	void continueCall(jint timeout) { return call_method<"continueCall", void>(timeout); }
	void toggleMute() { return call_method<"toggleMute", void>(); }
	jboolean isMuted() { return call_method<"isMuted", jboolean>(); }
	void setSpeakerMode(jboolean speakerMode) { return call_method<"setSpeakerMode", void>(speakerMode); }
	void sendDtmf(jint code) { return call_method<"sendDtmf", void>(code); }
	void sendDtmf(jint code, jni::ref<android::os::Message> result) { return call_method<"sendDtmf", void>(code, result); }
	void startAudio() { return call_method<"startAudio", void>(); }

protected:

	SipAudioCall(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPAUDIOCALL
