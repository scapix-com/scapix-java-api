// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIASESSION_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIASESSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::session { class MediaSession; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::session::MediaSession>
{
	static constexpr fixed_string class_name = "android/media/session/MediaSession";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIASESSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIASESSION)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIASESSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/media/MediaMetadata.h>
#include <scapix/java_api/android/media/VolumeProvider.h>
#include <scapix/java_api/android/media/session/MediaController.h>
#include <scapix/java_api/android/media/session/MediaSession_Callback.h>
#include <scapix/java_api/android/media/session/MediaSession_Token.h>
#include <scapix/java_api/android/media/session/MediaSessionManager_RemoteUserInfo.h>
#include <scapix/java_api/android/media/session/PlaybackState.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/android/media/session/MediaSession_QueueItem.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::session::MediaSession : public jni::object_base<"android/media/session/MediaSession",
	java::lang::Object>
{
public:

	using Token = MediaSession_Token;
	using QueueItem = MediaSession_QueueItem;
	using Callback = MediaSession_Callback;

	static jint FLAG_HANDLES_MEDIA_BUTTONS() { return get_static_field<"FLAG_HANDLES_MEDIA_BUTTONS", jint>(); }
	static jint FLAG_HANDLES_TRANSPORT_CONTROLS() { return get_static_field<"FLAG_HANDLES_TRANSPORT_CONTROLS", jint>(); }

	static jni::ref<android::media::session::MediaSession> new_object(jni::ref<android::content::Context> context, jni::ref<java::lang::String> tag) { return base_::new_object(context, tag); }
	void setCallback(jni::ref<android::media::session::MediaSession_Callback> callback) { return call_method<"setCallback", void>(callback); }
	void setCallback(jni::ref<android::media::session::MediaSession_Callback> callback, jni::ref<android::os::Handler> handler) { return call_method<"setCallback", void>(callback, handler); }
	void setSessionActivity(jni::ref<android::app::PendingIntent> pi) { return call_method<"setSessionActivity", void>(pi); }
	void setMediaButtonReceiver(jni::ref<android::app::PendingIntent> mbr) { return call_method<"setMediaButtonReceiver", void>(mbr); }
	void setFlags(jint flags) { return call_method<"setFlags", void>(flags); }
	void setPlaybackToLocal(jni::ref<android::media::AudioAttributes> attributes) { return call_method<"setPlaybackToLocal", void>(attributes); }
	void setPlaybackToRemote(jni::ref<android::media::VolumeProvider> volumeProvider) { return call_method<"setPlaybackToRemote", void>(volumeProvider); }
	void setActive(jboolean active) { return call_method<"setActive", void>(active); }
	jboolean isActive() { return call_method<"isActive", jboolean>(); }
	void sendSessionEvent(jni::ref<java::lang::String> event, jni::ref<android::os::Bundle> extras) { return call_method<"sendSessionEvent", void>(event, extras); }
	void release() { return call_method<"release", void>(); }
	jni::ref<android::media::session::MediaSession_Token> getSessionToken() { return call_method<"getSessionToken", jni::ref<android::media::session::MediaSession_Token>>(); }
	jni::ref<android::media::session::MediaController> getController() { return call_method<"getController", jni::ref<android::media::session::MediaController>>(); }
	void setPlaybackState(jni::ref<android::media::session::PlaybackState> state) { return call_method<"setPlaybackState", void>(state); }
	void setMetadata(jni::ref<android::media::MediaMetadata> metadata) { return call_method<"setMetadata", void>(metadata); }
	void setQueue(jni::ref<java::util::List> queue) { return call_method<"setQueue", void>(queue); }
	void setQueueTitle(jni::ref<java::lang::CharSequence> title) { return call_method<"setQueueTitle", void>(title); }
	void setRatingType(jint type) { return call_method<"setRatingType", void>(type); }
	void setExtras(jni::ref<android::os::Bundle> extras) { return call_method<"setExtras", void>(extras); }
	jni::ref<android::media::session::MediaSessionManager_RemoteUserInfo> getCurrentControllerInfo() { return call_method<"getCurrentControllerInfo", jni::ref<android::media::session::MediaSessionManager_RemoteUserInfo>>(); }

protected:

	MediaSession(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIASESSION
