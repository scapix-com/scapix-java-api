// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/FrameLayout.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class HorizontalScrollView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::HorizontalScrollView>
{
	static constexpr fixed_string class_name = "android/widget/HorizontalScrollView";
	using base_classes = std::tuple<scapix::java_api::android::widget::FrameLayout>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_HORIZONTALSCROLLVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_HORIZONTALSCROLLVIEW)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_HORIZONTALSCROLLVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::HorizontalScrollView : public jni::object_base<"android/widget/HorizontalScrollView",
	android::widget::FrameLayout>
{
public:

	static jni::ref<android::widget::HorizontalScrollView> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::HorizontalScrollView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::HorizontalScrollView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::widget::HorizontalScrollView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jint getMaxScrollAmount() { return call_method<"getMaxScrollAmount", jint>(); }
	void addView(jni::ref<android::view::View> child) { return call_method<"addView", void>(child); }
	void addView(jni::ref<android::view::View> child, jint index) { return call_method<"addView", void>(child, index); }
	void addView(jni::ref<android::view::View> child, jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"addView", void>(child, params); }
	void addView(jni::ref<android::view::View> child, jint index, jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"addView", void>(child, index, params); }
	jboolean isFillViewport() { return call_method<"isFillViewport", jboolean>(); }
	void setFillViewport(jboolean fillViewport) { return call_method<"setFillViewport", void>(fillViewport); }
	jboolean isSmoothScrollingEnabled() { return call_method<"isSmoothScrollingEnabled", jboolean>(); }
	void setSmoothScrollingEnabled(jboolean smoothScrollingEnabled) { return call_method<"setSmoothScrollingEnabled", void>(smoothScrollingEnabled); }
	jboolean dispatchKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEvent", jboolean>(event); }
	jboolean executeKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"executeKeyEvent", jboolean>(event); }
	void requestDisallowInterceptTouchEvent(jboolean disallowIntercept) { return call_method<"requestDisallowInterceptTouchEvent", void>(disallowIntercept); }
	jboolean onInterceptTouchEvent(jni::ref<android::view::MotionEvent> ev) { return call_method<"onInterceptTouchEvent", jboolean>(ev); }
	jboolean onTouchEvent(jni::ref<android::view::MotionEvent> ev) { return call_method<"onTouchEvent", jboolean>(ev); }
	jboolean onGenericMotionEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onGenericMotionEvent", jboolean>(event); }
	jboolean shouldDelayChildPressedState() { return call_method<"shouldDelayChildPressedState", jboolean>(); }
	jni::ref<java::lang::CharSequence> getAccessibilityClassName() { return call_method<"getAccessibilityClassName", jni::ref<java::lang::CharSequence>>(); }
	jboolean pageScroll(jint direction) { return call_method<"pageScroll", jboolean>(direction); }
	jboolean fullScroll(jint direction) { return call_method<"fullScroll", jboolean>(direction); }
	jboolean arrowScroll(jint direction) { return call_method<"arrowScroll", jboolean>(direction); }
	void smoothScrollBy(jint dx, jint dy) { return call_method<"smoothScrollBy", void>(dx, dy); }
	void smoothScrollTo(jint x, jint y) { return call_method<"smoothScrollTo", void>(x, y); }
	void computeScroll() { return call_method<"computeScroll", void>(); }
	void requestChildFocus(jni::ref<android::view::View> child, jni::ref<android::view::View> focused) { return call_method<"requestChildFocus", void>(child, focused); }
	jboolean requestChildRectangleOnScreen(jni::ref<android::view::View> child, jni::ref<android::graphics::Rect> rectangle, jboolean immediate) { return call_method<"requestChildRectangleOnScreen", jboolean>(child, rectangle, immediate); }
	void requestLayout() { return call_method<"requestLayout", void>(); }
	void fling(jint velocityX) { return call_method<"fling", void>(velocityX); }
	void scrollTo(jint x, jint y) { return call_method<"scrollTo", void>(x, y); }
	void setOverScrollMode(jint mode) { return call_method<"setOverScrollMode", void>(mode); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }

protected:

	HorizontalScrollView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_HORIZONTALSCROLLVIEW
