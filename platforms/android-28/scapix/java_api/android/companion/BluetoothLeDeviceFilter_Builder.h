// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHLEDEVICEFILTER_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHLEDEVICEFILTER_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::companion { class BluetoothLeDeviceFilter_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::companion::BluetoothLeDeviceFilter_Builder>
{
	static constexpr fixed_string class_name = "android/companion/BluetoothLeDeviceFilter$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHLEDEVICEFILTER_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHLEDEVICEFILTER_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHLEDEVICEFILTER_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/le/ScanFilter.h>
#include <scapix/java_api/android/companion/BluetoothLeDeviceFilter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/java/util/regex/Pattern.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::companion::BluetoothLeDeviceFilter_Builder : public jni::object_base<"android/companion/BluetoothLeDeviceFilter$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::companion::BluetoothLeDeviceFilter_Builder> new_object() { return base_::new_object(); }
	jni::ref<android::companion::BluetoothLeDeviceFilter_Builder> setNamePattern(jni::ref<java::util::regex::Pattern> regex) { return call_method<"setNamePattern", jni::ref<android::companion::BluetoothLeDeviceFilter_Builder>>(regex); }
	jni::ref<android::companion::BluetoothLeDeviceFilter_Builder> setScanFilter(jni::ref<android::bluetooth::le::ScanFilter> scanFilter) { return call_method<"setScanFilter", jni::ref<android::companion::BluetoothLeDeviceFilter_Builder>>(scanFilter); }
	jni::ref<android::companion::BluetoothLeDeviceFilter_Builder> setRawDataFilter(jni::ref<jni::array<jbyte>> rawDataFilter, jni::ref<jni::array<jbyte>> rawDataFilterMask) { return call_method<"setRawDataFilter", jni::ref<android::companion::BluetoothLeDeviceFilter_Builder>>(rawDataFilter, rawDataFilterMask); }
	jni::ref<android::companion::BluetoothLeDeviceFilter_Builder> setRenameFromBytes(jni::ref<java::lang::String> prefix, jni::ref<java::lang::String> suffix, jint bytesFrom, jint bytesLength, jni::ref<java::nio::ByteOrder> byteOrder) { return call_method<"setRenameFromBytes", jni::ref<android::companion::BluetoothLeDeviceFilter_Builder>>(prefix, suffix, bytesFrom, bytesLength, byteOrder); }
	jni::ref<android::companion::BluetoothLeDeviceFilter_Builder> setRenameFromName(jni::ref<java::lang::String> prefix, jni::ref<java::lang::String> suffix, jint nameFrom, jint nameLength) { return call_method<"setRenameFromName", jni::ref<android::companion::BluetoothLeDeviceFilter_Builder>>(prefix, suffix, nameFrom, nameLength); }
	jni::ref<android::companion::BluetoothLeDeviceFilter> build() { return call_method<"build", jni::ref<android::companion::BluetoothLeDeviceFilter>>(); }

protected:

	BluetoothLeDeviceFilter_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHLEDEVICEFILTER_BUILDER
