// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/database/AbstractCursor.h>

#ifndef SCAPIX_JAVA_API_ANDROID_DATABASE_MATRIXCURSOR_FWD
#define SCAPIX_JAVA_API_ANDROID_DATABASE_MATRIXCURSOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::database { class MatrixCursor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::database::MatrixCursor>
{
	static constexpr fixed_string class_name = "android/database/MatrixCursor";
	using base_classes = std::tuple<scapix::java_api::android::database::AbstractCursor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_MATRIXCURSOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_DATABASE_MATRIXCURSOR)
#define SCAPIX_JAVA_API_ANDROID_DATABASE_MATRIXCURSOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/database/MatrixCursor_RowBuilder.h>
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::database::MatrixCursor : public jni::object_base<"android/database/MatrixCursor",
	android::database::AbstractCursor>
{
public:

	using RowBuilder = MatrixCursor_RowBuilder;

	static jni::ref<android::database::MatrixCursor> new_object(jni::ref<jni::array<java::lang::String>> columnNames, jint initialCapacity) { return base_::new_object(columnNames, initialCapacity); }
	static jni::ref<android::database::MatrixCursor> new_object(jni::ref<jni::array<java::lang::String>> columnNames) { return base_::new_object(columnNames); }
	jni::ref<android::database::MatrixCursor_RowBuilder> newRow() { return call_method<"newRow", jni::ref<android::database::MatrixCursor_RowBuilder>>(); }
	void addRow(jni::ref<jni::array<java::lang::Object>> columnValues) { return call_method<"addRow", void>(columnValues); }
	void addRow(jni::ref<java::lang::Iterable> columnValues) { return call_method<"addRow", void>(columnValues); }
	jint getCount() { return call_method<"getCount", jint>(); }
	jni::ref<jni::array<java::lang::String>> getColumnNames() { return call_method<"getColumnNames", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::lang::String> getString(jint column) { return call_method<"getString", jni::ref<java::lang::String>>(column); }
	jshort getShort(jint column) { return call_method<"getShort", jshort>(column); }
	jint getInt(jint column) { return call_method<"getInt", jint>(column); }
	jlong getLong(jint column) { return call_method<"getLong", jlong>(column); }
	jfloat getFloat(jint column) { return call_method<"getFloat", jfloat>(column); }
	jdouble getDouble(jint column) { return call_method<"getDouble", jdouble>(column); }
	jni::ref<jni::array<jbyte>> getBlob(jint column) { return call_method<"getBlob", jni::ref<jni::array<jbyte>>>(column); }
	jint getType(jint column) { return call_method<"getType", jint>(column); }
	jboolean isNull(jint column) { return call_method<"isNull", jboolean>(column); }

protected:

	MatrixCursor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_MATRIXCURSOR
