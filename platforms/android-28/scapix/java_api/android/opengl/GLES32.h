// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/opengl/GLES31.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OPENGL_GLES32_FWD
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLES32_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::opengl { class GLES32; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::opengl::GLES32>
{
	static constexpr fixed_string class_name = "android/opengl/GLES32";
	using base_classes = std::tuple<scapix::java_api::android::opengl::GLES31>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLES32_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OPENGL_GLES32)
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLES32

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/opengl/GLES32_DebugProc.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::opengl::GLES32 : public jni::object_base<"android/opengl/GLES32",
	android::opengl::GLES31>
{
public:

	using DebugProc = GLES32_DebugProc;

	static jint GL_BUFFER() { return get_static_field<"GL_BUFFER", jint>(); }
	static jint GL_CLAMP_TO_BORDER() { return get_static_field<"GL_CLAMP_TO_BORDER", jint>(); }
	static jint GL_COLORBURN() { return get_static_field<"GL_COLORBURN", jint>(); }
	static jint GL_COLORDODGE() { return get_static_field<"GL_COLORDODGE", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_10x10() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_10x10", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_10x5() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_10x5", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_10x6() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_10x6", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_10x8() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_10x8", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_12x10() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_12x10", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_12x12() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_12x12", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_4x4() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_4x4", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_5x4() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_5x4", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_5x5() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_5x5", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_6x5() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_6x5", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_6x6() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_6x6", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_8x5() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_8x5", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_8x6() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_8x6", jint>(); }
	static jint GL_COMPRESSED_RGBA_ASTC_8x8() { return get_static_field<"GL_COMPRESSED_RGBA_ASTC_8x8", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6", jint>(); }
	static jint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8() { return get_static_field<"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8", jint>(); }
	static jint GL_CONTEXT_FLAGS() { return get_static_field<"GL_CONTEXT_FLAGS", jint>(); }
	static jint GL_CONTEXT_FLAG_DEBUG_BIT() { return get_static_field<"GL_CONTEXT_FLAG_DEBUG_BIT", jint>(); }
	static jint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT() { return get_static_field<"GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT", jint>(); }
	static jint GL_CONTEXT_LOST() { return get_static_field<"GL_CONTEXT_LOST", jint>(); }
	static jint GL_DARKEN() { return get_static_field<"GL_DARKEN", jint>(); }
	static jint GL_DEBUG_CALLBACK_FUNCTION() { return get_static_field<"GL_DEBUG_CALLBACK_FUNCTION", jint>(); }
	static jint GL_DEBUG_CALLBACK_USER_PARAM() { return get_static_field<"GL_DEBUG_CALLBACK_USER_PARAM", jint>(); }
	static jint GL_DEBUG_GROUP_STACK_DEPTH() { return get_static_field<"GL_DEBUG_GROUP_STACK_DEPTH", jint>(); }
	static jint GL_DEBUG_LOGGED_MESSAGES() { return get_static_field<"GL_DEBUG_LOGGED_MESSAGES", jint>(); }
	static jint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH() { return get_static_field<"GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH", jint>(); }
	static jint GL_DEBUG_OUTPUT() { return get_static_field<"GL_DEBUG_OUTPUT", jint>(); }
	static jint GL_DEBUG_OUTPUT_SYNCHRONOUS() { return get_static_field<"GL_DEBUG_OUTPUT_SYNCHRONOUS", jint>(); }
	static jint GL_DEBUG_SEVERITY_HIGH() { return get_static_field<"GL_DEBUG_SEVERITY_HIGH", jint>(); }
	static jint GL_DEBUG_SEVERITY_LOW() { return get_static_field<"GL_DEBUG_SEVERITY_LOW", jint>(); }
	static jint GL_DEBUG_SEVERITY_MEDIUM() { return get_static_field<"GL_DEBUG_SEVERITY_MEDIUM", jint>(); }
	static jint GL_DEBUG_SEVERITY_NOTIFICATION() { return get_static_field<"GL_DEBUG_SEVERITY_NOTIFICATION", jint>(); }
	static jint GL_DEBUG_SOURCE_API() { return get_static_field<"GL_DEBUG_SOURCE_API", jint>(); }
	static jint GL_DEBUG_SOURCE_APPLICATION() { return get_static_field<"GL_DEBUG_SOURCE_APPLICATION", jint>(); }
	static jint GL_DEBUG_SOURCE_OTHER() { return get_static_field<"GL_DEBUG_SOURCE_OTHER", jint>(); }
	static jint GL_DEBUG_SOURCE_SHADER_COMPILER() { return get_static_field<"GL_DEBUG_SOURCE_SHADER_COMPILER", jint>(); }
	static jint GL_DEBUG_SOURCE_THIRD_PARTY() { return get_static_field<"GL_DEBUG_SOURCE_THIRD_PARTY", jint>(); }
	static jint GL_DEBUG_SOURCE_WINDOW_SYSTEM() { return get_static_field<"GL_DEBUG_SOURCE_WINDOW_SYSTEM", jint>(); }
	static jint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR() { return get_static_field<"GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR", jint>(); }
	static jint GL_DEBUG_TYPE_ERROR() { return get_static_field<"GL_DEBUG_TYPE_ERROR", jint>(); }
	static jint GL_DEBUG_TYPE_MARKER() { return get_static_field<"GL_DEBUG_TYPE_MARKER", jint>(); }
	static jint GL_DEBUG_TYPE_OTHER() { return get_static_field<"GL_DEBUG_TYPE_OTHER", jint>(); }
	static jint GL_DEBUG_TYPE_PERFORMANCE() { return get_static_field<"GL_DEBUG_TYPE_PERFORMANCE", jint>(); }
	static jint GL_DEBUG_TYPE_POP_GROUP() { return get_static_field<"GL_DEBUG_TYPE_POP_GROUP", jint>(); }
	static jint GL_DEBUG_TYPE_PORTABILITY() { return get_static_field<"GL_DEBUG_TYPE_PORTABILITY", jint>(); }
	static jint GL_DEBUG_TYPE_PUSH_GROUP() { return get_static_field<"GL_DEBUG_TYPE_PUSH_GROUP", jint>(); }
	static jint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR() { return get_static_field<"GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR", jint>(); }
	static jint GL_DIFFERENCE() { return get_static_field<"GL_DIFFERENCE", jint>(); }
	static jint GL_EXCLUSION() { return get_static_field<"GL_EXCLUSION", jint>(); }
	static jint GL_FIRST_VERTEX_CONVENTION() { return get_static_field<"GL_FIRST_VERTEX_CONVENTION", jint>(); }
	static jint GL_FRACTIONAL_EVEN() { return get_static_field<"GL_FRACTIONAL_EVEN", jint>(); }
	static jint GL_FRACTIONAL_ODD() { return get_static_field<"GL_FRACTIONAL_ODD", jint>(); }
	static jint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS() { return get_static_field<"GL_FRAGMENT_INTERPOLATION_OFFSET_BITS", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_LAYERED() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_LAYERED", jint>(); }
	static jint GL_FRAMEBUFFER_DEFAULT_LAYERS() { return get_static_field<"GL_FRAMEBUFFER_DEFAULT_LAYERS", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS", jint>(); }
	static jint GL_GEOMETRY_INPUT_TYPE() { return get_static_field<"GL_GEOMETRY_INPUT_TYPE", jint>(); }
	static jint GL_GEOMETRY_OUTPUT_TYPE() { return get_static_field<"GL_GEOMETRY_OUTPUT_TYPE", jint>(); }
	static jint GL_GEOMETRY_SHADER() { return get_static_field<"GL_GEOMETRY_SHADER", jint>(); }
	static jint GL_GEOMETRY_SHADER_BIT() { return get_static_field<"GL_GEOMETRY_SHADER_BIT", jint>(); }
	static jint GL_GEOMETRY_SHADER_INVOCATIONS() { return get_static_field<"GL_GEOMETRY_SHADER_INVOCATIONS", jint>(); }
	static jint GL_GEOMETRY_VERTICES_OUT() { return get_static_field<"GL_GEOMETRY_VERTICES_OUT", jint>(); }
	static jint GL_GUILTY_CONTEXT_RESET() { return get_static_field<"GL_GUILTY_CONTEXT_RESET", jint>(); }
	static jint GL_HARDLIGHT() { return get_static_field<"GL_HARDLIGHT", jint>(); }
	static jint GL_HSL_COLOR() { return get_static_field<"GL_HSL_COLOR", jint>(); }
	static jint GL_HSL_HUE() { return get_static_field<"GL_HSL_HUE", jint>(); }
	static jint GL_HSL_LUMINOSITY() { return get_static_field<"GL_HSL_LUMINOSITY", jint>(); }
	static jint GL_HSL_SATURATION() { return get_static_field<"GL_HSL_SATURATION", jint>(); }
	static jint GL_IMAGE_BUFFER() { return get_static_field<"GL_IMAGE_BUFFER", jint>(); }
	static jint GL_IMAGE_CUBE_MAP_ARRAY() { return get_static_field<"GL_IMAGE_CUBE_MAP_ARRAY", jint>(); }
	static jint GL_INNOCENT_CONTEXT_RESET() { return get_static_field<"GL_INNOCENT_CONTEXT_RESET", jint>(); }
	static jint GL_INT_IMAGE_BUFFER() { return get_static_field<"GL_INT_IMAGE_BUFFER", jint>(); }
	static jint GL_INT_IMAGE_CUBE_MAP_ARRAY() { return get_static_field<"GL_INT_IMAGE_CUBE_MAP_ARRAY", jint>(); }
	static jint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY() { return get_static_field<"GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", jint>(); }
	static jint GL_INT_SAMPLER_BUFFER() { return get_static_field<"GL_INT_SAMPLER_BUFFER", jint>(); }
	static jint GL_INT_SAMPLER_CUBE_MAP_ARRAY() { return get_static_field<"GL_INT_SAMPLER_CUBE_MAP_ARRAY", jint>(); }
	static jint GL_ISOLINES() { return get_static_field<"GL_ISOLINES", jint>(); }
	static jint GL_IS_PER_PATCH() { return get_static_field<"GL_IS_PER_PATCH", jint>(); }
	static jint GL_LAST_VERTEX_CONVENTION() { return get_static_field<"GL_LAST_VERTEX_CONVENTION", jint>(); }
	static jint GL_LAYER_PROVOKING_VERTEX() { return get_static_field<"GL_LAYER_PROVOKING_VERTEX", jint>(); }
	static jint GL_LIGHTEN() { return get_static_field<"GL_LIGHTEN", jint>(); }
	static jint GL_LINES_ADJACENCY() { return get_static_field<"GL_LINES_ADJACENCY", jint>(); }
	static jint GL_LINE_STRIP_ADJACENCY() { return get_static_field<"GL_LINE_STRIP_ADJACENCY", jint>(); }
	static jint GL_LOSE_CONTEXT_ON_RESET() { return get_static_field<"GL_LOSE_CONTEXT_ON_RESET", jint>(); }
	static jint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS() { return get_static_field<"GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS", jint>(); }
	static jint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS() { return get_static_field<"GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS", jint>(); }
	static jint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS() { return get_static_field<"GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS", jint>(); }
	static jint GL_MAX_DEBUG_GROUP_STACK_DEPTH() { return get_static_field<"GL_MAX_DEBUG_GROUP_STACK_DEPTH", jint>(); }
	static jint GL_MAX_DEBUG_LOGGED_MESSAGES() { return get_static_field<"GL_MAX_DEBUG_LOGGED_MESSAGES", jint>(); }
	static jint GL_MAX_DEBUG_MESSAGE_LENGTH() { return get_static_field<"GL_MAX_DEBUG_MESSAGE_LENGTH", jint>(); }
	static jint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET() { return get_static_field<"GL_MAX_FRAGMENT_INTERPOLATION_OFFSET", jint>(); }
	static jint GL_MAX_FRAMEBUFFER_LAYERS() { return get_static_field<"GL_MAX_FRAMEBUFFER_LAYERS", jint>(); }
	static jint GL_MAX_GEOMETRY_ATOMIC_COUNTERS() { return get_static_field<"GL_MAX_GEOMETRY_ATOMIC_COUNTERS", jint>(); }
	static jint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS() { return get_static_field<"GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS", jint>(); }
	static jint GL_MAX_GEOMETRY_IMAGE_UNIFORMS() { return get_static_field<"GL_MAX_GEOMETRY_IMAGE_UNIFORMS", jint>(); }
	static jint GL_MAX_GEOMETRY_INPUT_COMPONENTS() { return get_static_field<"GL_MAX_GEOMETRY_INPUT_COMPONENTS", jint>(); }
	static jint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS() { return get_static_field<"GL_MAX_GEOMETRY_OUTPUT_COMPONENTS", jint>(); }
	static jint GL_MAX_GEOMETRY_OUTPUT_VERTICES() { return get_static_field<"GL_MAX_GEOMETRY_OUTPUT_VERTICES", jint>(); }
	static jint GL_MAX_GEOMETRY_SHADER_INVOCATIONS() { return get_static_field<"GL_MAX_GEOMETRY_SHADER_INVOCATIONS", jint>(); }
	static jint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS() { return get_static_field<"GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS", jint>(); }
	static jint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS() { return get_static_field<"GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS", jint>(); }
	static jint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS() { return get_static_field<"GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS", jint>(); }
	static jint GL_MAX_GEOMETRY_UNIFORM_BLOCKS() { return get_static_field<"GL_MAX_GEOMETRY_UNIFORM_BLOCKS", jint>(); }
	static jint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS() { return get_static_field<"GL_MAX_GEOMETRY_UNIFORM_COMPONENTS", jint>(); }
	static jint GL_MAX_LABEL_LENGTH() { return get_static_field<"GL_MAX_LABEL_LENGTH", jint>(); }
	static jint GL_MAX_PATCH_VERTICES() { return get_static_field<"GL_MAX_PATCH_VERTICES", jint>(); }
	static jint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS() { return get_static_field<"GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS() { return get_static_field<"GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS() { return get_static_field<"GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS() { return get_static_field<"GL_MAX_TESS_CONTROL_INPUT_COMPONENTS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS() { return get_static_field<"GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS() { return get_static_field<"GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS() { return get_static_field<"GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS() { return get_static_field<"GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS() { return get_static_field<"GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS", jint>(); }
	static jint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS() { return get_static_field<"GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS() { return get_static_field<"GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS() { return get_static_field<"GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS() { return get_static_field<"GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS() { return get_static_field<"GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS() { return get_static_field<"GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS() { return get_static_field<"GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS() { return get_static_field<"GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS() { return get_static_field<"GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS", jint>(); }
	static jint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS() { return get_static_field<"GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS", jint>(); }
	static jint GL_MAX_TESS_GEN_LEVEL() { return get_static_field<"GL_MAX_TESS_GEN_LEVEL", jint>(); }
	static jint GL_MAX_TESS_PATCH_COMPONENTS() { return get_static_field<"GL_MAX_TESS_PATCH_COMPONENTS", jint>(); }
	static jint GL_MAX_TEXTURE_BUFFER_SIZE() { return get_static_field<"GL_MAX_TEXTURE_BUFFER_SIZE", jint>(); }
	static jint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET() { return get_static_field<"GL_MIN_FRAGMENT_INTERPOLATION_OFFSET", jint>(); }
	static jint GL_MIN_SAMPLE_SHADING_VALUE() { return get_static_field<"GL_MIN_SAMPLE_SHADING_VALUE", jint>(); }
	static jint GL_MULTIPLY() { return get_static_field<"GL_MULTIPLY", jint>(); }
	static jint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY() { return get_static_field<"GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY", jint>(); }
	static jint GL_MULTISAMPLE_LINE_WIDTH_RANGE() { return get_static_field<"GL_MULTISAMPLE_LINE_WIDTH_RANGE", jint>(); }
	static jint GL_NO_RESET_NOTIFICATION() { return get_static_field<"GL_NO_RESET_NOTIFICATION", jint>(); }
	static jint GL_OVERLAY() { return get_static_field<"GL_OVERLAY", jint>(); }
	static jint GL_PATCHES() { return get_static_field<"GL_PATCHES", jint>(); }
	static jint GL_PATCH_VERTICES() { return get_static_field<"GL_PATCH_VERTICES", jint>(); }
	static jint GL_PRIMITIVES_GENERATED() { return get_static_field<"GL_PRIMITIVES_GENERATED", jint>(); }
	static jint GL_PRIMITIVE_BOUNDING_BOX() { return get_static_field<"GL_PRIMITIVE_BOUNDING_BOX", jint>(); }
	static jint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED() { return get_static_field<"GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED", jint>(); }
	static jint GL_PROGRAM() { return get_static_field<"GL_PROGRAM", jint>(); }
	static jint GL_PROGRAM_PIPELINE() { return get_static_field<"GL_PROGRAM_PIPELINE", jint>(); }
	static jint GL_QUADS() { return get_static_field<"GL_QUADS", jint>(); }
	static jint GL_QUERY() { return get_static_field<"GL_QUERY", jint>(); }
	static jint GL_REFERENCED_BY_GEOMETRY_SHADER() { return get_static_field<"GL_REFERENCED_BY_GEOMETRY_SHADER", jint>(); }
	static jint GL_REFERENCED_BY_TESS_CONTROL_SHADER() { return get_static_field<"GL_REFERENCED_BY_TESS_CONTROL_SHADER", jint>(); }
	static jint GL_REFERENCED_BY_TESS_EVALUATION_SHADER() { return get_static_field<"GL_REFERENCED_BY_TESS_EVALUATION_SHADER", jint>(); }
	static jint GL_RESET_NOTIFICATION_STRATEGY() { return get_static_field<"GL_RESET_NOTIFICATION_STRATEGY", jint>(); }
	static jint GL_SAMPLER() { return get_static_field<"GL_SAMPLER", jint>(); }
	static jint GL_SAMPLER_2D_MULTISAMPLE_ARRAY() { return get_static_field<"GL_SAMPLER_2D_MULTISAMPLE_ARRAY", jint>(); }
	static jint GL_SAMPLER_BUFFER() { return get_static_field<"GL_SAMPLER_BUFFER", jint>(); }
	static jint GL_SAMPLER_CUBE_MAP_ARRAY() { return get_static_field<"GL_SAMPLER_CUBE_MAP_ARRAY", jint>(); }
	static jint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW() { return get_static_field<"GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW", jint>(); }
	static jint GL_SAMPLE_SHADING() { return get_static_field<"GL_SAMPLE_SHADING", jint>(); }
	static jint GL_SCREEN() { return get_static_field<"GL_SCREEN", jint>(); }
	static jint GL_SHADER() { return get_static_field<"GL_SHADER", jint>(); }
	static jint GL_SOFTLIGHT() { return get_static_field<"GL_SOFTLIGHT", jint>(); }
	static jint GL_STACK_OVERFLOW() { return get_static_field<"GL_STACK_OVERFLOW", jint>(); }
	static jint GL_STACK_UNDERFLOW() { return get_static_field<"GL_STACK_UNDERFLOW", jint>(); }
	static jint GL_TESS_CONTROL_OUTPUT_VERTICES() { return get_static_field<"GL_TESS_CONTROL_OUTPUT_VERTICES", jint>(); }
	static jint GL_TESS_CONTROL_SHADER() { return get_static_field<"GL_TESS_CONTROL_SHADER", jint>(); }
	static jint GL_TESS_CONTROL_SHADER_BIT() { return get_static_field<"GL_TESS_CONTROL_SHADER_BIT", jint>(); }
	static jint GL_TESS_EVALUATION_SHADER() { return get_static_field<"GL_TESS_EVALUATION_SHADER", jint>(); }
	static jint GL_TESS_EVALUATION_SHADER_BIT() { return get_static_field<"GL_TESS_EVALUATION_SHADER_BIT", jint>(); }
	static jint GL_TESS_GEN_MODE() { return get_static_field<"GL_TESS_GEN_MODE", jint>(); }
	static jint GL_TESS_GEN_POINT_MODE() { return get_static_field<"GL_TESS_GEN_POINT_MODE", jint>(); }
	static jint GL_TESS_GEN_SPACING() { return get_static_field<"GL_TESS_GEN_SPACING", jint>(); }
	static jint GL_TESS_GEN_VERTEX_ORDER() { return get_static_field<"GL_TESS_GEN_VERTEX_ORDER", jint>(); }
	static jint GL_TEXTURE_2D_MULTISAMPLE_ARRAY() { return get_static_field<"GL_TEXTURE_2D_MULTISAMPLE_ARRAY", jint>(); }
	static jint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY() { return get_static_field<"GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY", jint>(); }
	static jint GL_TEXTURE_BINDING_BUFFER() { return get_static_field<"GL_TEXTURE_BINDING_BUFFER", jint>(); }
	static jint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY() { return get_static_field<"GL_TEXTURE_BINDING_CUBE_MAP_ARRAY", jint>(); }
	static jint GL_TEXTURE_BORDER_COLOR() { return get_static_field<"GL_TEXTURE_BORDER_COLOR", jint>(); }
	static jint GL_TEXTURE_BUFFER() { return get_static_field<"GL_TEXTURE_BUFFER", jint>(); }
	static jint GL_TEXTURE_BUFFER_BINDING() { return get_static_field<"GL_TEXTURE_BUFFER_BINDING", jint>(); }
	static jint GL_TEXTURE_BUFFER_DATA_STORE_BINDING() { return get_static_field<"GL_TEXTURE_BUFFER_DATA_STORE_BINDING", jint>(); }
	static jint GL_TEXTURE_BUFFER_OFFSET() { return get_static_field<"GL_TEXTURE_BUFFER_OFFSET", jint>(); }
	static jint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT() { return get_static_field<"GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT", jint>(); }
	static jint GL_TEXTURE_BUFFER_SIZE() { return get_static_field<"GL_TEXTURE_BUFFER_SIZE", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_ARRAY() { return get_static_field<"GL_TEXTURE_CUBE_MAP_ARRAY", jint>(); }
	static jint GL_TRIANGLES_ADJACENCY() { return get_static_field<"GL_TRIANGLES_ADJACENCY", jint>(); }
	static jint GL_TRIANGLE_STRIP_ADJACENCY() { return get_static_field<"GL_TRIANGLE_STRIP_ADJACENCY", jint>(); }
	static jint GL_UNDEFINED_VERTEX() { return get_static_field<"GL_UNDEFINED_VERTEX", jint>(); }
	static jint GL_UNKNOWN_CONTEXT_RESET() { return get_static_field<"GL_UNKNOWN_CONTEXT_RESET", jint>(); }
	static jint GL_UNSIGNED_INT_IMAGE_BUFFER() { return get_static_field<"GL_UNSIGNED_INT_IMAGE_BUFFER", jint>(); }
	static jint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY() { return get_static_field<"GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY", jint>(); }
	static jint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY() { return get_static_field<"GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", jint>(); }
	static jint GL_UNSIGNED_INT_SAMPLER_BUFFER() { return get_static_field<"GL_UNSIGNED_INT_SAMPLER_BUFFER", jint>(); }
	static jint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY() { return get_static_field<"GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY", jint>(); }
	static jint GL_VERTEX_ARRAY() { return get_static_field<"GL_VERTEX_ARRAY", jint>(); }

	static void glBlendBarrier() { return call_static_method<"glBlendBarrier", void>(); }
	static void glCopyImageSubData(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jint p11, jint p12, jint p13, jint p14, jint p15) { return call_static_method<"glCopyImageSubData", void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15); }
	static void glDebugMessageControl(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jint p6, jboolean p7) { return call_static_method<"glDebugMessageControl", void>(p1, p2, p3, p4, p5, p6, p7); }
	static void glDebugMessageControl(jint p1, jint p2, jint p3, jint p4, jni::ref<java::nio::IntBuffer> p5, jboolean p6) { return call_static_method<"glDebugMessageControl", void>(p1, p2, p3, p4, p5, p6); }
	static void glDebugMessageInsert(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<java::lang::String> p6) { return call_static_method<"glDebugMessageInsert", void>(p1, p2, p3, p4, p5, p6); }
	static void glDebugMessageCallback(jni::ref<android::opengl::GLES32_DebugProc> p1) { return call_static_method<"glDebugMessageCallback", void>(p1); }
	static jint glGetDebugMessageLog(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4, jni::ref<jni::array<jint>> p5, jint p6, jni::ref<jni::array<jint>> p7, jint p8, jni::ref<jni::array<jint>> p9, jint p10, jni::ref<jni::array<jint>> p11, jint p12, jni::ref<jni::array<jbyte>> p13, jint p14) { return call_static_method<"glGetDebugMessageLog", jint>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14); }
	static jint glGetDebugMessageLog(jint p1, jni::ref<java::nio::IntBuffer> p2, jni::ref<java::nio::IntBuffer> p3, jni::ref<java::nio::IntBuffer> p4, jni::ref<java::nio::IntBuffer> p5, jni::ref<java::nio::IntBuffer> p6, jni::ref<java::nio::ByteBuffer> p7) { return call_static_method<"glGetDebugMessageLog", jint>(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<jni::array<java::lang::String>> glGetDebugMessageLog(jint p1, jni::ref<jni::array<jint>> p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5, jni::ref<jni::array<jint>> p6, jint p7, jni::ref<jni::array<jint>> p8, jint p9) { return call_static_method<"glGetDebugMessageLog", jni::ref<jni::array<java::lang::String>>>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
	static jni::ref<jni::array<java::lang::String>> glGetDebugMessageLog(jint p1, jni::ref<java::nio::IntBuffer> p2, jni::ref<java::nio::IntBuffer> p3, jni::ref<java::nio::IntBuffer> p4, jni::ref<java::nio::IntBuffer> p5) { return call_static_method<"glGetDebugMessageLog", jni::ref<jni::array<java::lang::String>>>(p1, p2, p3, p4, p5); }
	static void glPushDebugGroup(jint p1, jint p2, jint p3, jni::ref<java::lang::String> p4) { return call_static_method<"glPushDebugGroup", void>(p1, p2, p3, p4); }
	static void glPopDebugGroup() { return call_static_method<"glPopDebugGroup", void>(); }
	static void glObjectLabel(jint p1, jint p2, jint p3, jni::ref<java::lang::String> p4) { return call_static_method<"glObjectLabel", void>(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> glGetObjectLabel(jint p1, jint p2) { return call_static_method<"glGetObjectLabel", jni::ref<java::lang::String>>(p1, p2); }
	static void glObjectPtrLabel(jlong p1, jni::ref<java::lang::String> p2) { return call_static_method<"glObjectPtrLabel", void>(p1, p2); }
	static jni::ref<java::lang::String> glGetObjectPtrLabel(jlong p1) { return call_static_method<"glGetObjectPtrLabel", jni::ref<java::lang::String>>(p1); }
	static jlong glGetPointerv(jint p1) { return call_static_method<"glGetPointerv", jlong>(p1); }
	static void glEnablei(jint p1, jint p2) { return call_static_method<"glEnablei", void>(p1, p2); }
	static void glDisablei(jint p1, jint p2) { return call_static_method<"glDisablei", void>(p1, p2); }
	static void glBlendEquationi(jint p1, jint p2) { return call_static_method<"glBlendEquationi", void>(p1, p2); }
	static void glBlendEquationSeparatei(jint p1, jint p2, jint p3) { return call_static_method<"glBlendEquationSeparatei", void>(p1, p2, p3); }
	static void glBlendFunci(jint p1, jint p2, jint p3) { return call_static_method<"glBlendFunci", void>(p1, p2, p3); }
	static void glBlendFuncSeparatei(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glBlendFuncSeparatei", void>(p1, p2, p3, p4, p5); }
	static void glColorMaski(jint p1, jboolean p2, jboolean p3, jboolean p4, jboolean p5) { return call_static_method<"glColorMaski", void>(p1, p2, p3, p4, p5); }
	static jboolean glIsEnabledi(jint p1, jint p2) { return call_static_method<"glIsEnabledi", jboolean>(p1, p2); }
	static void glDrawElementsBaseVertex(jint p1, jint p2, jint p3, jni::ref<java::nio::Buffer> p4, jint p5) { return call_static_method<"glDrawElementsBaseVertex", void>(p1, p2, p3, p4, p5); }
	static void glDrawRangeElementsBaseVertex(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<java::nio::Buffer> p6, jint p7) { return call_static_method<"glDrawRangeElementsBaseVertex", void>(p1, p2, p3, p4, p5, p6, p7); }
	static void glDrawElementsInstancedBaseVertex(jint p1, jint p2, jint p3, jni::ref<java::nio::Buffer> p4, jint p5, jint p6) { return call_static_method<"glDrawElementsInstancedBaseVertex", void>(p1, p2, p3, p4, p5, p6); }
	static void glDrawElementsInstancedBaseVertex(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_static_method<"glDrawElementsInstancedBaseVertex", void>(p1, p2, p3, p4, p5, p6); }
	static void glFramebufferTexture(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glFramebufferTexture", void>(p1, p2, p3, p4); }
	static void glPrimitiveBoundingBox(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8) { return call_static_method<"glPrimitiveBoundingBox", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jint glGetGraphicsResetStatus() { return call_static_method<"glGetGraphicsResetStatus", jint>(); }
	static void glReadnPixels(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jni::ref<java::nio::Buffer> p8) { return call_static_method<"glReadnPixels", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static void glGetnUniformfv(jint p1, jint p2, jint p3, jni::ref<jni::array<jfloat>> p4, jint p5) { return call_static_method<"glGetnUniformfv", void>(p1, p2, p3, p4, p5); }
	static void glGetnUniformfv(jint p1, jint p2, jint p3, jni::ref<java::nio::FloatBuffer> p4) { return call_static_method<"glGetnUniformfv", void>(p1, p2, p3, p4); }
	static void glGetnUniformiv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glGetnUniformiv", void>(p1, p2, p3, p4, p5); }
	static void glGetnUniformiv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glGetnUniformiv", void>(p1, p2, p3, p4); }
	static void glGetnUniformuiv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glGetnUniformuiv", void>(p1, p2, p3, p4, p5); }
	static void glGetnUniformuiv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glGetnUniformuiv", void>(p1, p2, p3, p4); }
	static void glMinSampleShading(jfloat p1) { return call_static_method<"glMinSampleShading", void>(p1); }
	static void glPatchParameteri(jint p1, jint p2) { return call_static_method<"glPatchParameteri", void>(p1, p2); }
	static void glTexParameterIiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glTexParameterIiv", void>(p1, p2, p3, p4); }
	static void glTexParameterIiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glTexParameterIiv", void>(p1, p2, p3); }
	static void glTexParameterIuiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glTexParameterIuiv", void>(p1, p2, p3, p4); }
	static void glTexParameterIuiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glTexParameterIuiv", void>(p1, p2, p3); }
	static void glGetTexParameterIiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetTexParameterIiv", void>(p1, p2, p3, p4); }
	static void glGetTexParameterIiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetTexParameterIiv", void>(p1, p2, p3); }
	static void glGetTexParameterIuiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetTexParameterIuiv", void>(p1, p2, p3, p4); }
	static void glGetTexParameterIuiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetTexParameterIuiv", void>(p1, p2, p3); }
	static void glSamplerParameterIiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glSamplerParameterIiv", void>(p1, p2, p3, p4); }
	static void glSamplerParameterIiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glSamplerParameterIiv", void>(p1, p2, p3); }
	static void glSamplerParameterIuiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glSamplerParameterIuiv", void>(p1, p2, p3, p4); }
	static void glSamplerParameterIuiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glSamplerParameterIuiv", void>(p1, p2, p3); }
	static void glGetSamplerParameterIiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetSamplerParameterIiv", void>(p1, p2, p3, p4); }
	static void glGetSamplerParameterIiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetSamplerParameterIiv", void>(p1, p2, p3); }
	static void glGetSamplerParameterIuiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetSamplerParameterIuiv", void>(p1, p2, p3, p4); }
	static void glGetSamplerParameterIuiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetSamplerParameterIuiv", void>(p1, p2, p3); }
	static void glTexBuffer(jint p1, jint p2, jint p3) { return call_static_method<"glTexBuffer", void>(p1, p2, p3); }
	static void glTexBufferRange(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glTexBufferRange", void>(p1, p2, p3, p4, p5); }
	static void glTexStorage3DMultisample(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jboolean p7) { return call_static_method<"glTexStorage3DMultisample", void>(p1, p2, p3, p4, p5, p6, p7); }

protected:

	GLES32(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLES32
