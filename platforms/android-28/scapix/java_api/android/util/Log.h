// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_LOG_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_LOG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class Log; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::Log>
{
	static constexpr fixed_string class_name = "android/util/Log";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_LOG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_LOG)
#define SCAPIX_JAVA_API_ANDROID_UTIL_LOG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::Log : public jni::object_base<"android/util/Log",
	java::lang::Object>
{
public:

	static jint ASSERT() { return get_static_field<"ASSERT", jint>(); }
	static jint DEBUG() { return get_static_field<"DEBUG", jint>(); }
	static jint ERROR() { return get_static_field<"ERROR", jint>(); }
	static jint INFO() { return get_static_field<"INFO", jint>(); }
	static jint VERBOSE() { return get_static_field<"VERBOSE", jint>(); }
	static jint WARN() { return get_static_field<"WARN", jint>(); }

	static jint v(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg) { return call_static_method<"v", jint>(tag, msg); }
	static jint v(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> tr) { return call_static_method<"v", jint>(tag, msg, tr); }
	static jint d(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg) { return call_static_method<"d", jint>(tag, msg); }
	static jint d(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> tr) { return call_static_method<"d", jint>(tag, msg, tr); }
	static jint i(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg) { return call_static_method<"i", jint>(tag, msg); }
	static jint i(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> tr) { return call_static_method<"i", jint>(tag, msg, tr); }
	static jint w(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg) { return call_static_method<"w", jint>(tag, msg); }
	static jint w(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> tr) { return call_static_method<"w", jint>(tag, msg, tr); }
	static jboolean isLoggable(jni::ref<java::lang::String> p1, jint p2) { return call_static_method<"isLoggable", jboolean>(p1, p2); }
	static jint w(jni::ref<java::lang::String> tag, jni::ref<java::lang::Throwable> tr) { return call_static_method<"w", jint>(tag, tr); }
	static jint e(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg) { return call_static_method<"e", jint>(tag, msg); }
	static jint e(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> tr) { return call_static_method<"e", jint>(tag, msg, tr); }
	static jint wtf(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg) { return call_static_method<"wtf", jint>(tag, msg); }
	static jint wtf(jni::ref<java::lang::String> tag, jni::ref<java::lang::Throwable> tr) { return call_static_method<"wtf", jint>(tag, tr); }
	static jint wtf(jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> tr) { return call_static_method<"wtf", jint>(tag, msg, tr); }
	static jni::ref<java::lang::String> getStackTraceString(jni::ref<java::lang::Throwable> tr) { return call_static_method<"getStackTraceString", jni::ref<java::lang::String>>(tr); }
	static jint println(jint priority, jni::ref<java::lang::String> tag, jni::ref<java::lang::String> msg) { return call_static_method<"println", jint>(priority, tag, msg); }

protected:

	Log(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_LOG
