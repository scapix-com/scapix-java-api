// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_BASE64_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_BASE64_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class Base64; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::Base64>
{
	static constexpr fixed_string class_name = "android/util/Base64";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_BASE64_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_BASE64)
#define SCAPIX_JAVA_API_ANDROID_UTIL_BASE64

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::Base64 : public jni::object_base<"android/util/Base64",
	java::lang::Object>
{
public:

	static jint CRLF() { return get_static_field<"CRLF", jint>(); }
	static jint DEFAULT() { return get_static_field<"DEFAULT", jint>(); }
	static jint NO_CLOSE() { return get_static_field<"NO_CLOSE", jint>(); }
	static jint NO_PADDING() { return get_static_field<"NO_PADDING", jint>(); }
	static jint NO_WRAP() { return get_static_field<"NO_WRAP", jint>(); }
	static jint URL_SAFE() { return get_static_field<"URL_SAFE", jint>(); }

	static jni::ref<jni::array<jbyte>> decode(jni::ref<java::lang::String> str, jint flags) { return call_static_method<"decode", jni::ref<jni::array<jbyte>>>(str, flags); }
	static jni::ref<jni::array<jbyte>> decode(jni::ref<jni::array<jbyte>> input, jint flags) { return call_static_method<"decode", jni::ref<jni::array<jbyte>>>(input, flags); }
	static jni::ref<jni::array<jbyte>> decode(jni::ref<jni::array<jbyte>> input, jint offset, jint len, jint flags) { return call_static_method<"decode", jni::ref<jni::array<jbyte>>>(input, offset, len, flags); }
	static jni::ref<java::lang::String> encodeToString(jni::ref<jni::array<jbyte>> input, jint flags) { return call_static_method<"encodeToString", jni::ref<java::lang::String>>(input, flags); }
	static jni::ref<java::lang::String> encodeToString(jni::ref<jni::array<jbyte>> input, jint offset, jint len, jint flags) { return call_static_method<"encodeToString", jni::ref<java::lang::String>>(input, offset, len, flags); }
	static jni::ref<jni::array<jbyte>> encode(jni::ref<jni::array<jbyte>> input, jint flags) { return call_static_method<"encode", jni::ref<jni::array<jbyte>>>(input, flags); }
	static jni::ref<jni::array<jbyte>> encode(jni::ref<jni::array<jbyte>> input, jint offset, jint len, jint flags) { return call_static_method<"encode", jni::ref<jni::array<jbyte>>>(input, offset, len, flags); }

protected:

	Base64(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_BASE64
