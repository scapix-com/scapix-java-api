// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELEPHONY_DATA_APNSETTING_FWD
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_DATA_APNSETTING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telephony::data { class ApnSetting; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telephony::data::ApnSetting>
{
	static constexpr fixed_string class_name = "android/telephony/data/ApnSetting";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_DATA_APNSETTING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELEPHONY_DATA_APNSETTING)
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_DATA_APNSETTING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/android/telephony/data/ApnSetting_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telephony::data::ApnSetting : public jni::object_base<"android/telephony/data/ApnSetting",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = ApnSetting_Builder;

	static jint AUTH_TYPE_CHAP() { return get_static_field<"AUTH_TYPE_CHAP", jint>(); }
	static jint AUTH_TYPE_NONE() { return get_static_field<"AUTH_TYPE_NONE", jint>(); }
	static jint AUTH_TYPE_PAP() { return get_static_field<"AUTH_TYPE_PAP", jint>(); }
	static jint AUTH_TYPE_PAP_OR_CHAP() { return get_static_field<"AUTH_TYPE_PAP_OR_CHAP", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint MVNO_TYPE_GID() { return get_static_field<"MVNO_TYPE_GID", jint>(); }
	static jint MVNO_TYPE_ICCID() { return get_static_field<"MVNO_TYPE_ICCID", jint>(); }
	static jint MVNO_TYPE_IMSI() { return get_static_field<"MVNO_TYPE_IMSI", jint>(); }
	static jint MVNO_TYPE_SPN() { return get_static_field<"MVNO_TYPE_SPN", jint>(); }
	static jint PROTOCOL_IP() { return get_static_field<"PROTOCOL_IP", jint>(); }
	static jint PROTOCOL_IPV4V6() { return get_static_field<"PROTOCOL_IPV4V6", jint>(); }
	static jint PROTOCOL_IPV6() { return get_static_field<"PROTOCOL_IPV6", jint>(); }
	static jint PROTOCOL_PPP() { return get_static_field<"PROTOCOL_PPP", jint>(); }
	static jint TYPE_CBS() { return get_static_field<"TYPE_CBS", jint>(); }
	static jint TYPE_DEFAULT() { return get_static_field<"TYPE_DEFAULT", jint>(); }
	static jint TYPE_DUN() { return get_static_field<"TYPE_DUN", jint>(); }
	static jint TYPE_EMERGENCY() { return get_static_field<"TYPE_EMERGENCY", jint>(); }
	static jint TYPE_FOTA() { return get_static_field<"TYPE_FOTA", jint>(); }
	static jint TYPE_HIPRI() { return get_static_field<"TYPE_HIPRI", jint>(); }
	static jint TYPE_IA() { return get_static_field<"TYPE_IA", jint>(); }
	static jint TYPE_IMS() { return get_static_field<"TYPE_IMS", jint>(); }
	static jint TYPE_MMS() { return get_static_field<"TYPE_MMS", jint>(); }
	static jint TYPE_SUPL() { return get_static_field<"TYPE_SUPL", jint>(); }

	jni::ref<java::lang::String> getEntryName() { return call_method<"getEntryName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getApnName() { return call_method<"getApnName", jni::ref<java::lang::String>>(); }
	jni::ref<java::net::InetAddress> getProxyAddress() { return call_method<"getProxyAddress", jni::ref<java::net::InetAddress>>(); }
	jint getProxyPort() { return call_method<"getProxyPort", jint>(); }
	jni::ref<android::net::Uri> getMmsc() { return call_method<"getMmsc", jni::ref<android::net::Uri>>(); }
	jni::ref<java::net::InetAddress> getMmsProxyAddress() { return call_method<"getMmsProxyAddress", jni::ref<java::net::InetAddress>>(); }
	jint getMmsProxyPort() { return call_method<"getMmsProxyPort", jint>(); }
	jni::ref<java::lang::String> getUser() { return call_method<"getUser", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPassword() { return call_method<"getPassword", jni::ref<java::lang::String>>(); }
	jint getAuthType() { return call_method<"getAuthType", jint>(); }
	jint getApnTypeBitmask() { return call_method<"getApnTypeBitmask", jint>(); }
	jint getId() { return call_method<"getId", jint>(); }
	jni::ref<java::lang::String> getOperatorNumeric() { return call_method<"getOperatorNumeric", jni::ref<java::lang::String>>(); }
	jint getProtocol() { return call_method<"getProtocol", jint>(); }
	jint getRoamingProtocol() { return call_method<"getRoamingProtocol", jint>(); }
	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	jint getNetworkTypeBitmask() { return call_method<"getNetworkTypeBitmask", jint>(); }
	jint getMvnoType() { return call_method<"getMvnoType", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	ApnSetting(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_DATA_APNSETTING
