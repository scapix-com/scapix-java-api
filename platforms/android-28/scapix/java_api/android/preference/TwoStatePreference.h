// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/preference/Preference.h>

#ifndef SCAPIX_JAVA_API_ANDROID_PREFERENCE_TWOSTATEPREFERENCE_FWD
#define SCAPIX_JAVA_API_ANDROID_PREFERENCE_TWOSTATEPREFERENCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::preference { class TwoStatePreference; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::preference::TwoStatePreference>
{
	static constexpr fixed_string class_name = "android/preference/TwoStatePreference";
	using base_classes = std::tuple<scapix::java_api::android::preference::Preference>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PREFERENCE_TWOSTATEPREFERENCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_PREFERENCE_TWOSTATEPREFERENCE)
#define SCAPIX_JAVA_API_ANDROID_PREFERENCE_TWOSTATEPREFERENCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::preference::TwoStatePreference : public jni::object_base<"android/preference/TwoStatePreference",
	android::preference::Preference>
{
public:

	static jni::ref<android::preference::TwoStatePreference> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	static jni::ref<android::preference::TwoStatePreference> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::preference::TwoStatePreference> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::preference::TwoStatePreference> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	void setChecked(jboolean checked) { return call_method<"setChecked", void>(checked); }
	jboolean isChecked() { return call_method<"isChecked", jboolean>(); }
	jboolean shouldDisableDependents() { return call_method<"shouldDisableDependents", jboolean>(); }
	void setSummaryOn(jni::ref<java::lang::CharSequence> summary) { return call_method<"setSummaryOn", void>(summary); }
	void setSummaryOn(jint summaryResId) { return call_method<"setSummaryOn", void>(summaryResId); }
	jni::ref<java::lang::CharSequence> getSummaryOn() { return call_method<"getSummaryOn", jni::ref<java::lang::CharSequence>>(); }
	void setSummaryOff(jni::ref<java::lang::CharSequence> summary) { return call_method<"setSummaryOff", void>(summary); }
	void setSummaryOff(jint summaryResId) { return call_method<"setSummaryOff", void>(summaryResId); }
	jni::ref<java::lang::CharSequence> getSummaryOff() { return call_method<"getSummaryOff", jni::ref<java::lang::CharSequence>>(); }
	jboolean getDisableDependentsState() { return call_method<"getDisableDependentsState", jboolean>(); }
	void setDisableDependentsState(jboolean disableDependentsState) { return call_method<"setDisableDependentsState", void>(disableDependentsState); }

protected:

	TwoStatePreference(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PREFERENCE_TWOSTATEPREFERENCE
