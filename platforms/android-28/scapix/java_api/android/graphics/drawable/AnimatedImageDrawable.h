// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Animatable2.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics::drawable { class AnimatedImageDrawable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::drawable::AnimatedImageDrawable>
{
	static constexpr fixed_string class_name = "android/graphics/drawable/AnimatedImageDrawable";
	using base_classes = std::tuple<scapix::java_api::android::graphics::drawable::Drawable, scapix::java_api::android::graphics::drawable::Animatable2>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/drawable/Animatable2_AnimationCallback.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::drawable::AnimatedImageDrawable : public jni::object_base<"android/graphics/drawable/AnimatedImageDrawable",
	android::graphics::drawable::Drawable,
	android::graphics::drawable::Animatable2>
{
public:

	static jint REPEAT_INFINITE() { return get_static_field<"REPEAT_INFINITE", jint>(); }

	static jni::ref<android::graphics::drawable::AnimatedImageDrawable> new_object() { return base_::new_object(); }
	void setRepeatCount(jint repeatCount) { return call_method<"setRepeatCount", void>(repeatCount); }
	jint getRepeatCount() { return call_method<"getRepeatCount", jint>(); }
	void inflate(jni::ref<android::content::res::Resources> r, jni::ref<org::xmlpull::v1::XmlPullParser> parser, jni::ref<android::util::AttributeSet> attrs, jni::ref<android::content::res::Resources_Theme> theme) { return call_method<"inflate", void>(r, parser, attrs, theme); }
	jint getIntrinsicWidth() { return call_method<"getIntrinsicWidth", jint>(); }
	jint getIntrinsicHeight() { return call_method<"getIntrinsicHeight", jint>(); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }
	void setAlpha(jint alpha) { return call_method<"setAlpha", void>(alpha); }
	jint getAlpha() { return call_method<"getAlpha", jint>(); }
	void setColorFilter(jni::ref<android::graphics::ColorFilter> colorFilter) { return call_method<"setColorFilter", void>(colorFilter); }
	jni::ref<android::graphics::ColorFilter> getColorFilter() { return call_method<"getColorFilter", jni::ref<android::graphics::ColorFilter>>(); }
	jint getOpacity() { return call_method<"getOpacity", jint>(); }
	void setAutoMirrored(jboolean mirrored) { return call_method<"setAutoMirrored", void>(mirrored); }
	jboolean onLayoutDirectionChanged(jint layoutDirection) { return call_method<"onLayoutDirectionChanged", jboolean>(layoutDirection); }
	jboolean isAutoMirrored() { return call_method<"isAutoMirrored", jboolean>(); }
	jboolean isRunning() { return call_method<"isRunning", jboolean>(); }
	void start() { return call_method<"start", void>(); }
	void stop() { return call_method<"stop", void>(); }
	void registerAnimationCallback(jni::ref<android::graphics::drawable::Animatable2_AnimationCallback> callback) { return call_method<"registerAnimationCallback", void>(callback); }
	jboolean unregisterAnimationCallback(jni::ref<android::graphics::drawable::Animatable2_AnimationCallback> callback) { return call_method<"unregisterAnimationCallback", jboolean>(callback); }
	void clearAnimationCallbacks() { return call_method<"clearAnimationCallbacks", void>(); }

protected:

	AnimatedImageDrawable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATEDIMAGEDRAWABLE
