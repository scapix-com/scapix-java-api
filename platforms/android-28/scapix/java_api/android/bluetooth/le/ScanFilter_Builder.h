// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth::le { class ScanFilter_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::le::ScanFilter_Builder>
{
	static constexpr fixed_string class_name = "android/bluetooth/le/ScanFilter$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/le/ScanFilter.h>
#include <scapix/java_api/android/os/ParcelUuid.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::le::ScanFilter_Builder : public jni::object_base<"android/bluetooth/le/ScanFilter$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::bluetooth::le::ScanFilter_Builder> new_object() { return base_::new_object(); }
	jni::ref<android::bluetooth::le::ScanFilter_Builder> setDeviceName(jni::ref<java::lang::String> deviceName) { return call_method<"setDeviceName", jni::ref<android::bluetooth::le::ScanFilter_Builder>>(deviceName); }
	jni::ref<android::bluetooth::le::ScanFilter_Builder> setDeviceAddress(jni::ref<java::lang::String> deviceAddress) { return call_method<"setDeviceAddress", jni::ref<android::bluetooth::le::ScanFilter_Builder>>(deviceAddress); }
	jni::ref<android::bluetooth::le::ScanFilter_Builder> setServiceUuid(jni::ref<android::os::ParcelUuid> serviceUuid) { return call_method<"setServiceUuid", jni::ref<android::bluetooth::le::ScanFilter_Builder>>(serviceUuid); }
	jni::ref<android::bluetooth::le::ScanFilter_Builder> setServiceUuid(jni::ref<android::os::ParcelUuid> serviceUuid, jni::ref<android::os::ParcelUuid> uuidMask) { return call_method<"setServiceUuid", jni::ref<android::bluetooth::le::ScanFilter_Builder>>(serviceUuid, uuidMask); }
	jni::ref<android::bluetooth::le::ScanFilter_Builder> setServiceData(jni::ref<android::os::ParcelUuid> serviceDataUuid, jni::ref<jni::array<jbyte>> serviceData) { return call_method<"setServiceData", jni::ref<android::bluetooth::le::ScanFilter_Builder>>(serviceDataUuid, serviceData); }
	jni::ref<android::bluetooth::le::ScanFilter_Builder> setServiceData(jni::ref<android::os::ParcelUuid> serviceDataUuid, jni::ref<jni::array<jbyte>> serviceData, jni::ref<jni::array<jbyte>> serviceDataMask) { return call_method<"setServiceData", jni::ref<android::bluetooth::le::ScanFilter_Builder>>(serviceDataUuid, serviceData, serviceDataMask); }
	jni::ref<android::bluetooth::le::ScanFilter_Builder> setManufacturerData(jint manufacturerId, jni::ref<jni::array<jbyte>> manufacturerData) { return call_method<"setManufacturerData", jni::ref<android::bluetooth::le::ScanFilter_Builder>>(manufacturerId, manufacturerData); }
	jni::ref<android::bluetooth::le::ScanFilter_Builder> setManufacturerData(jint manufacturerId, jni::ref<jni::array<jbyte>> manufacturerData, jni::ref<jni::array<jbyte>> manufacturerDataMask) { return call_method<"setManufacturerData", jni::ref<android::bluetooth::le::ScanFilter_Builder>>(manufacturerId, manufacturerData, manufacturerDataMask); }
	jni::ref<android::bluetooth::le::ScanFilter> build() { return call_method<"build", jni::ref<android::bluetooth::le::ScanFilter>>(); }

protected:

	ScanFilter_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_BUILDER
