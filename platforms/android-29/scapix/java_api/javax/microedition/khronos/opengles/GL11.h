// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/microedition/khronos/opengles/GL10.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11_FWD
#define SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::microedition::khronos::opengles { class GL11; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::microedition::khronos::opengles::GL11>
{
	static constexpr fixed_string class_name = "javax/microedition/khronos/opengles/GL11";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::microedition::khronos::opengles::GL10>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11)
#define SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::microedition::khronos::opengles::GL11 : public jni::object_base<"javax/microedition/khronos/opengles/GL11",
	java::lang::Object,
	javax::microedition::khronos::opengles::GL10>
{
public:

	static jint GL_ACTIVE_TEXTURE() { return get_static_field<"GL_ACTIVE_TEXTURE", jint>(); }
	static jint GL_ADD_SIGNED() { return get_static_field<"GL_ADD_SIGNED", jint>(); }
	static jint GL_ALPHA_SCALE() { return get_static_field<"GL_ALPHA_SCALE", jint>(); }
	static jint GL_ALPHA_TEST_FUNC() { return get_static_field<"GL_ALPHA_TEST_FUNC", jint>(); }
	static jint GL_ALPHA_TEST_REF() { return get_static_field<"GL_ALPHA_TEST_REF", jint>(); }
	static jint GL_ARRAY_BUFFER() { return get_static_field<"GL_ARRAY_BUFFER", jint>(); }
	static jint GL_ARRAY_BUFFER_BINDING() { return get_static_field<"GL_ARRAY_BUFFER_BINDING", jint>(); }
	static jint GL_BLEND_DST() { return get_static_field<"GL_BLEND_DST", jint>(); }
	static jint GL_BLEND_SRC() { return get_static_field<"GL_BLEND_SRC", jint>(); }
	static jint GL_BUFFER_ACCESS() { return get_static_field<"GL_BUFFER_ACCESS", jint>(); }
	static jint GL_BUFFER_SIZE() { return get_static_field<"GL_BUFFER_SIZE", jint>(); }
	static jint GL_BUFFER_USAGE() { return get_static_field<"GL_BUFFER_USAGE", jint>(); }
	static jint GL_CLIENT_ACTIVE_TEXTURE() { return get_static_field<"GL_CLIENT_ACTIVE_TEXTURE", jint>(); }
	static jint GL_CLIP_PLANE0() { return get_static_field<"GL_CLIP_PLANE0", jint>(); }
	static jint GL_CLIP_PLANE1() { return get_static_field<"GL_CLIP_PLANE1", jint>(); }
	static jint GL_CLIP_PLANE2() { return get_static_field<"GL_CLIP_PLANE2", jint>(); }
	static jint GL_CLIP_PLANE3() { return get_static_field<"GL_CLIP_PLANE3", jint>(); }
	static jint GL_CLIP_PLANE4() { return get_static_field<"GL_CLIP_PLANE4", jint>(); }
	static jint GL_CLIP_PLANE5() { return get_static_field<"GL_CLIP_PLANE5", jint>(); }
	static jint GL_COLOR_ARRAY_BUFFER_BINDING() { return get_static_field<"GL_COLOR_ARRAY_BUFFER_BINDING", jint>(); }
	static jint GL_COLOR_ARRAY_POINTER() { return get_static_field<"GL_COLOR_ARRAY_POINTER", jint>(); }
	static jint GL_COLOR_ARRAY_SIZE() { return get_static_field<"GL_COLOR_ARRAY_SIZE", jint>(); }
	static jint GL_COLOR_ARRAY_STRIDE() { return get_static_field<"GL_COLOR_ARRAY_STRIDE", jint>(); }
	static jint GL_COLOR_ARRAY_TYPE() { return get_static_field<"GL_COLOR_ARRAY_TYPE", jint>(); }
	static jint GL_COLOR_CLEAR_VALUE() { return get_static_field<"GL_COLOR_CLEAR_VALUE", jint>(); }
	static jint GL_COLOR_WRITEMASK() { return get_static_field<"GL_COLOR_WRITEMASK", jint>(); }
	static jint GL_COMBINE() { return get_static_field<"GL_COMBINE", jint>(); }
	static jint GL_COMBINE_ALPHA() { return get_static_field<"GL_COMBINE_ALPHA", jint>(); }
	static jint GL_COMBINE_RGB() { return get_static_field<"GL_COMBINE_RGB", jint>(); }
	static jint GL_CONSTANT() { return get_static_field<"GL_CONSTANT", jint>(); }
	static jint GL_COORD_REPLACE_OES() { return get_static_field<"GL_COORD_REPLACE_OES", jint>(); }
	static jint GL_CULL_FACE_MODE() { return get_static_field<"GL_CULL_FACE_MODE", jint>(); }
	static jint GL_CURRENT_COLOR() { return get_static_field<"GL_CURRENT_COLOR", jint>(); }
	static jint GL_CURRENT_NORMAL() { return get_static_field<"GL_CURRENT_NORMAL", jint>(); }
	static jint GL_CURRENT_TEXTURE_COORDS() { return get_static_field<"GL_CURRENT_TEXTURE_COORDS", jint>(); }
	static jint GL_DEPTH_CLEAR_VALUE() { return get_static_field<"GL_DEPTH_CLEAR_VALUE", jint>(); }
	static jint GL_DEPTH_FUNC() { return get_static_field<"GL_DEPTH_FUNC", jint>(); }
	static jint GL_DEPTH_RANGE() { return get_static_field<"GL_DEPTH_RANGE", jint>(); }
	static jint GL_DEPTH_WRITEMASK() { return get_static_field<"GL_DEPTH_WRITEMASK", jint>(); }
	static jint GL_DOT3_RGB() { return get_static_field<"GL_DOT3_RGB", jint>(); }
	static jint GL_DOT3_RGBA() { return get_static_field<"GL_DOT3_RGBA", jint>(); }
	static jint GL_DYNAMIC_DRAW() { return get_static_field<"GL_DYNAMIC_DRAW", jint>(); }
	static jint GL_ELEMENT_ARRAY_BUFFER() { return get_static_field<"GL_ELEMENT_ARRAY_BUFFER", jint>(); }
	static jint GL_ELEMENT_ARRAY_BUFFER_BINDING() { return get_static_field<"GL_ELEMENT_ARRAY_BUFFER_BINDING", jint>(); }
	static jint GL_FRONT_FACE() { return get_static_field<"GL_FRONT_FACE", jint>(); }
	static jint GL_GENERATE_MIPMAP() { return get_static_field<"GL_GENERATE_MIPMAP", jint>(); }
	static jint GL_GENERATE_MIPMAP_HINT() { return get_static_field<"GL_GENERATE_MIPMAP_HINT", jint>(); }
	static jint GL_INTERPOLATE() { return get_static_field<"GL_INTERPOLATE", jint>(); }
	static jint GL_LINE_WIDTH() { return get_static_field<"GL_LINE_WIDTH", jint>(); }
	static jint GL_LOGIC_OP_MODE() { return get_static_field<"GL_LOGIC_OP_MODE", jint>(); }
	static jint GL_MATRIX_MODE() { return get_static_field<"GL_MATRIX_MODE", jint>(); }
	static jint GL_MAX_CLIP_PLANES() { return get_static_field<"GL_MAX_CLIP_PLANES", jint>(); }
	static jint GL_MODELVIEW_MATRIX() { return get_static_field<"GL_MODELVIEW_MATRIX", jint>(); }
	static jint GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES() { return get_static_field<"GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES", jint>(); }
	static jint GL_MODELVIEW_STACK_DEPTH() { return get_static_field<"GL_MODELVIEW_STACK_DEPTH", jint>(); }
	static jint GL_NORMAL_ARRAY_BUFFER_BINDING() { return get_static_field<"GL_NORMAL_ARRAY_BUFFER_BINDING", jint>(); }
	static jint GL_NORMAL_ARRAY_POINTER() { return get_static_field<"GL_NORMAL_ARRAY_POINTER", jint>(); }
	static jint GL_NORMAL_ARRAY_STRIDE() { return get_static_field<"GL_NORMAL_ARRAY_STRIDE", jint>(); }
	static jint GL_NORMAL_ARRAY_TYPE() { return get_static_field<"GL_NORMAL_ARRAY_TYPE", jint>(); }
	static jint GL_OPERAND0_ALPHA() { return get_static_field<"GL_OPERAND0_ALPHA", jint>(); }
	static jint GL_OPERAND0_RGB() { return get_static_field<"GL_OPERAND0_RGB", jint>(); }
	static jint GL_OPERAND1_ALPHA() { return get_static_field<"GL_OPERAND1_ALPHA", jint>(); }
	static jint GL_OPERAND1_RGB() { return get_static_field<"GL_OPERAND1_RGB", jint>(); }
	static jint GL_OPERAND2_ALPHA() { return get_static_field<"GL_OPERAND2_ALPHA", jint>(); }
	static jint GL_OPERAND2_RGB() { return get_static_field<"GL_OPERAND2_RGB", jint>(); }
	static jint GL_POINT_DISTANCE_ATTENUATION() { return get_static_field<"GL_POINT_DISTANCE_ATTENUATION", jint>(); }
	static jint GL_POINT_FADE_THRESHOLD_SIZE() { return get_static_field<"GL_POINT_FADE_THRESHOLD_SIZE", jint>(); }
	static jint GL_POINT_SIZE() { return get_static_field<"GL_POINT_SIZE", jint>(); }
	static jint GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES() { return get_static_field<"GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES", jint>(); }
	static jint GL_POINT_SIZE_ARRAY_OES() { return get_static_field<"GL_POINT_SIZE_ARRAY_OES", jint>(); }
	static jint GL_POINT_SIZE_ARRAY_POINTER_OES() { return get_static_field<"GL_POINT_SIZE_ARRAY_POINTER_OES", jint>(); }
	static jint GL_POINT_SIZE_ARRAY_STRIDE_OES() { return get_static_field<"GL_POINT_SIZE_ARRAY_STRIDE_OES", jint>(); }
	static jint GL_POINT_SIZE_ARRAY_TYPE_OES() { return get_static_field<"GL_POINT_SIZE_ARRAY_TYPE_OES", jint>(); }
	static jint GL_POINT_SIZE_MAX() { return get_static_field<"GL_POINT_SIZE_MAX", jint>(); }
	static jint GL_POINT_SIZE_MIN() { return get_static_field<"GL_POINT_SIZE_MIN", jint>(); }
	static jint GL_POINT_SPRITE_OES() { return get_static_field<"GL_POINT_SPRITE_OES", jint>(); }
	static jint GL_POLYGON_OFFSET_FACTOR() { return get_static_field<"GL_POLYGON_OFFSET_FACTOR", jint>(); }
	static jint GL_POLYGON_OFFSET_UNITS() { return get_static_field<"GL_POLYGON_OFFSET_UNITS", jint>(); }
	static jint GL_PREVIOUS() { return get_static_field<"GL_PREVIOUS", jint>(); }
	static jint GL_PRIMARY_COLOR() { return get_static_field<"GL_PRIMARY_COLOR", jint>(); }
	static jint GL_PROJECTION_MATRIX() { return get_static_field<"GL_PROJECTION_MATRIX", jint>(); }
	static jint GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES() { return get_static_field<"GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES", jint>(); }
	static jint GL_PROJECTION_STACK_DEPTH() { return get_static_field<"GL_PROJECTION_STACK_DEPTH", jint>(); }
	static jint GL_RGB_SCALE() { return get_static_field<"GL_RGB_SCALE", jint>(); }
	static jint GL_SAMPLES() { return get_static_field<"GL_SAMPLES", jint>(); }
	static jint GL_SAMPLE_BUFFERS() { return get_static_field<"GL_SAMPLE_BUFFERS", jint>(); }
	static jint GL_SAMPLE_COVERAGE_INVERT() { return get_static_field<"GL_SAMPLE_COVERAGE_INVERT", jint>(); }
	static jint GL_SAMPLE_COVERAGE_VALUE() { return get_static_field<"GL_SAMPLE_COVERAGE_VALUE", jint>(); }
	static jint GL_SCISSOR_BOX() { return get_static_field<"GL_SCISSOR_BOX", jint>(); }
	static jint GL_SHADE_MODEL() { return get_static_field<"GL_SHADE_MODEL", jint>(); }
	static jint GL_SRC0_ALPHA() { return get_static_field<"GL_SRC0_ALPHA", jint>(); }
	static jint GL_SRC0_RGB() { return get_static_field<"GL_SRC0_RGB", jint>(); }
	static jint GL_SRC1_ALPHA() { return get_static_field<"GL_SRC1_ALPHA", jint>(); }
	static jint GL_SRC1_RGB() { return get_static_field<"GL_SRC1_RGB", jint>(); }
	static jint GL_SRC2_ALPHA() { return get_static_field<"GL_SRC2_ALPHA", jint>(); }
	static jint GL_SRC2_RGB() { return get_static_field<"GL_SRC2_RGB", jint>(); }
	static jint GL_STATIC_DRAW() { return get_static_field<"GL_STATIC_DRAW", jint>(); }
	static jint GL_STENCIL_CLEAR_VALUE() { return get_static_field<"GL_STENCIL_CLEAR_VALUE", jint>(); }
	static jint GL_STENCIL_FAIL() { return get_static_field<"GL_STENCIL_FAIL", jint>(); }
	static jint GL_STENCIL_FUNC() { return get_static_field<"GL_STENCIL_FUNC", jint>(); }
	static jint GL_STENCIL_PASS_DEPTH_FAIL() { return get_static_field<"GL_STENCIL_PASS_DEPTH_FAIL", jint>(); }
	static jint GL_STENCIL_PASS_DEPTH_PASS() { return get_static_field<"GL_STENCIL_PASS_DEPTH_PASS", jint>(); }
	static jint GL_STENCIL_REF() { return get_static_field<"GL_STENCIL_REF", jint>(); }
	static jint GL_STENCIL_VALUE_MASK() { return get_static_field<"GL_STENCIL_VALUE_MASK", jint>(); }
	static jint GL_STENCIL_WRITEMASK() { return get_static_field<"GL_STENCIL_WRITEMASK", jint>(); }
	static jint GL_SUBTRACT() { return get_static_field<"GL_SUBTRACT", jint>(); }
	static jint GL_TEXTURE_BINDING_2D() { return get_static_field<"GL_TEXTURE_BINDING_2D", jint>(); }
	static jint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING() { return get_static_field<"GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING", jint>(); }
	static jint GL_TEXTURE_COORD_ARRAY_POINTER() { return get_static_field<"GL_TEXTURE_COORD_ARRAY_POINTER", jint>(); }
	static jint GL_TEXTURE_COORD_ARRAY_SIZE() { return get_static_field<"GL_TEXTURE_COORD_ARRAY_SIZE", jint>(); }
	static jint GL_TEXTURE_COORD_ARRAY_STRIDE() { return get_static_field<"GL_TEXTURE_COORD_ARRAY_STRIDE", jint>(); }
	static jint GL_TEXTURE_COORD_ARRAY_TYPE() { return get_static_field<"GL_TEXTURE_COORD_ARRAY_TYPE", jint>(); }
	static jint GL_TEXTURE_MATRIX() { return get_static_field<"GL_TEXTURE_MATRIX", jint>(); }
	static jint GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES() { return get_static_field<"GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES", jint>(); }
	static jint GL_TEXTURE_STACK_DEPTH() { return get_static_field<"GL_TEXTURE_STACK_DEPTH", jint>(); }
	static jint GL_VERTEX_ARRAY_BUFFER_BINDING() { return get_static_field<"GL_VERTEX_ARRAY_BUFFER_BINDING", jint>(); }
	static jint GL_VERTEX_ARRAY_POINTER() { return get_static_field<"GL_VERTEX_ARRAY_POINTER", jint>(); }
	static jint GL_VERTEX_ARRAY_SIZE() { return get_static_field<"GL_VERTEX_ARRAY_SIZE", jint>(); }
	static jint GL_VERTEX_ARRAY_STRIDE() { return get_static_field<"GL_VERTEX_ARRAY_STRIDE", jint>(); }
	static jint GL_VERTEX_ARRAY_TYPE() { return get_static_field<"GL_VERTEX_ARRAY_TYPE", jint>(); }
	static jint GL_VIEWPORT() { return get_static_field<"GL_VIEWPORT", jint>(); }
	static jint GL_WRITE_ONLY() { return get_static_field<"GL_WRITE_ONLY", jint>(); }

	void glGetPointerv(jint p1, jni::ref<jni::array<java::nio::Buffer>> p2) { return call_method<"glGetPointerv", void>(p1, p2); }
	void glBindBuffer(jint p1, jint p2) { return call_method<"glBindBuffer", void>(p1, p2); }
	void glBufferData(jint p1, jint p2, jni::ref<java::nio::Buffer> p3, jint p4) { return call_method<"glBufferData", void>(p1, p2, p3, p4); }
	void glBufferSubData(jint p1, jint p2, jint p3, jni::ref<java::nio::Buffer> p4) { return call_method<"glBufferSubData", void>(p1, p2, p3, p4); }
	void glClipPlanef(jint p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_method<"glClipPlanef", void>(p1, p2, p3); }
	void glClipPlanef(jint p1, jni::ref<java::nio::FloatBuffer> p2) { return call_method<"glClipPlanef", void>(p1, p2); }
	void glClipPlanex(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glClipPlanex", void>(p1, p2, p3); }
	void glClipPlanex(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glClipPlanex", void>(p1, p2); }
	void glColor4ub(jbyte p1, jbyte p2, jbyte p3, jbyte p4) { return call_method<"glColor4ub", void>(p1, p2, p3, p4); }
	void glColorPointer(jint p1, jint p2, jint p3, jint p4) { return call_method<"glColorPointer", void>(p1, p2, p3, p4); }
	void glDeleteBuffers(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glDeleteBuffers", void>(p1, p2, p3); }
	void glDeleteBuffers(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glDeleteBuffers", void>(p1, p2); }
	void glDrawElements(jint p1, jint p2, jint p3, jint p4) { return call_method<"glDrawElements", void>(p1, p2, p3, p4); }
	void glGenBuffers(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glGenBuffers", void>(p1, p2, p3); }
	void glGenBuffers(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glGenBuffers", void>(p1, p2); }
	void glGetBooleanv(jint p1, jni::ref<jni::array<jboolean>> p2, jint p3) { return call_method<"glGetBooleanv", void>(p1, p2, p3); }
	void glGetBooleanv(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glGetBooleanv", void>(p1, p2); }
	void glGetBufferParameteriv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetBufferParameteriv", void>(p1, p2, p3, p4); }
	void glGetBufferParameteriv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetBufferParameteriv", void>(p1, p2, p3); }
	void glGetClipPlanef(jint p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_method<"glGetClipPlanef", void>(p1, p2, p3); }
	void glGetClipPlanef(jint p1, jni::ref<java::nio::FloatBuffer> p2) { return call_method<"glGetClipPlanef", void>(p1, p2); }
	void glGetClipPlanex(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glGetClipPlanex", void>(p1, p2, p3); }
	void glGetClipPlanex(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glGetClipPlanex", void>(p1, p2); }
	void glGetFixedv(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glGetFixedv", void>(p1, p2, p3); }
	void glGetFixedv(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glGetFixedv", void>(p1, p2); }
	void glGetFloatv(jint p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_method<"glGetFloatv", void>(p1, p2, p3); }
	void glGetFloatv(jint p1, jni::ref<java::nio::FloatBuffer> p2) { return call_method<"glGetFloatv", void>(p1, p2); }
	void glGetLightfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_method<"glGetLightfv", void>(p1, p2, p3, p4); }
	void glGetLightfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_method<"glGetLightfv", void>(p1, p2, p3); }
	void glGetLightxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetLightxv", void>(p1, p2, p3, p4); }
	void glGetLightxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetLightxv", void>(p1, p2, p3); }
	void glGetMaterialfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_method<"glGetMaterialfv", void>(p1, p2, p3, p4); }
	void glGetMaterialfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_method<"glGetMaterialfv", void>(p1, p2, p3); }
	void glGetMaterialxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetMaterialxv", void>(p1, p2, p3, p4); }
	void glGetMaterialxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetMaterialxv", void>(p1, p2, p3); }
	void glGetTexEnviv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetTexEnviv", void>(p1, p2, p3, p4); }
	void glGetTexEnviv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetTexEnviv", void>(p1, p2, p3); }
	void glGetTexEnvxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetTexEnvxv", void>(p1, p2, p3, p4); }
	void glGetTexEnvxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetTexEnvxv", void>(p1, p2, p3); }
	void glGetTexParameterfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_method<"glGetTexParameterfv", void>(p1, p2, p3, p4); }
	void glGetTexParameterfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_method<"glGetTexParameterfv", void>(p1, p2, p3); }
	void glGetTexParameteriv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetTexParameteriv", void>(p1, p2, p3, p4); }
	void glGetTexParameteriv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetTexParameteriv", void>(p1, p2, p3); }
	void glGetTexParameterxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetTexParameterxv", void>(p1, p2, p3, p4); }
	void glGetTexParameterxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetTexParameterxv", void>(p1, p2, p3); }
	jboolean glIsBuffer(jint p1) { return call_method<"glIsBuffer", jboolean>(p1); }
	jboolean glIsEnabled(jint p1) { return call_method<"glIsEnabled", jboolean>(p1); }
	jboolean glIsTexture(jint p1) { return call_method<"glIsTexture", jboolean>(p1); }
	void glNormalPointer(jint p1, jint p2, jint p3) { return call_method<"glNormalPointer", void>(p1, p2, p3); }
	void glPointParameterf(jint p1, jfloat p2) { return call_method<"glPointParameterf", void>(p1, p2); }
	void glPointParameterfv(jint p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_method<"glPointParameterfv", void>(p1, p2, p3); }
	void glPointParameterfv(jint p1, jni::ref<java::nio::FloatBuffer> p2) { return call_method<"glPointParameterfv", void>(p1, p2); }
	void glPointParameterx(jint p1, jint p2) { return call_method<"glPointParameterx", void>(p1, p2); }
	void glPointParameterxv(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glPointParameterxv", void>(p1, p2, p3); }
	void glPointParameterxv(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glPointParameterxv", void>(p1, p2); }
	void glPointSizePointerOES(jint p1, jint p2, jni::ref<java::nio::Buffer> p3) { return call_method<"glPointSizePointerOES", void>(p1, p2, p3); }
	void glTexCoordPointer(jint p1, jint p2, jint p3, jint p4) { return call_method<"glTexCoordPointer", void>(p1, p2, p3, p4); }
	void glTexEnvi(jint p1, jint p2, jint p3) { return call_method<"glTexEnvi", void>(p1, p2, p3); }
	void glTexEnviv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glTexEnviv", void>(p1, p2, p3, p4); }
	void glTexEnviv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glTexEnviv", void>(p1, p2, p3); }
	void glTexParameterfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_method<"glTexParameterfv", void>(p1, p2, p3, p4); }
	void glTexParameterfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_method<"glTexParameterfv", void>(p1, p2, p3); }
	void glTexParameteri(jint p1, jint p2, jint p3) { return call_method<"glTexParameteri", void>(p1, p2, p3); }
	void glTexParameteriv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glTexParameteriv", void>(p1, p2, p3, p4); }
	void glTexParameteriv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glTexParameteriv", void>(p1, p2, p3); }
	void glTexParameterxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glTexParameterxv", void>(p1, p2, p3, p4); }
	void glTexParameterxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glTexParameterxv", void>(p1, p2, p3); }
	void glVertexPointer(jint p1, jint p2, jint p3, jint p4) { return call_method<"glVertexPointer", void>(p1, p2, p3, p4); }

protected:

	GL11(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11
