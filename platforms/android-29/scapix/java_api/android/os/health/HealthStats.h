// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_HEALTH_HEALTHSTATS_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_HEALTH_HEALTHSTATS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os::health { class HealthStats; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::health::HealthStats>
{
	static constexpr fixed_string class_name = "android/os/health/HealthStats";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_HEALTH_HEALTHSTATS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_HEALTH_HEALTHSTATS)
#define SCAPIX_JAVA_API_ANDROID_OS_HEALTH_HEALTHSTATS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/health/TimerStat.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::health::HealthStats : public jni::object_base<"android/os/health/HealthStats",
	java::lang::Object>
{
public:

	jni::ref<java::lang::String> getDataType() { return call_method<"getDataType", jni::ref<java::lang::String>>(); }
	jboolean hasTimer(jint key) { return call_method<"hasTimer", jboolean>(key); }
	jni::ref<android::os::health::TimerStat> getTimer(jint key) { return call_method<"getTimer", jni::ref<android::os::health::TimerStat>>(key); }
	jint getTimerCount(jint key) { return call_method<"getTimerCount", jint>(key); }
	jlong getTimerTime(jint key) { return call_method<"getTimerTime", jlong>(key); }
	jint getTimerKeyCount() { return call_method<"getTimerKeyCount", jint>(); }
	jint getTimerKeyAt(jint index) { return call_method<"getTimerKeyAt", jint>(index); }
	jboolean hasMeasurement(jint key) { return call_method<"hasMeasurement", jboolean>(key); }
	jlong getMeasurement(jint key) { return call_method<"getMeasurement", jlong>(key); }
	jint getMeasurementKeyCount() { return call_method<"getMeasurementKeyCount", jint>(); }
	jint getMeasurementKeyAt(jint index) { return call_method<"getMeasurementKeyAt", jint>(index); }
	jboolean hasStats(jint key) { return call_method<"hasStats", jboolean>(key); }
	jni::ref<java::util::Map> getStats(jint key) { return call_method<"getStats", jni::ref<java::util::Map>>(key); }
	jint getStatsKeyCount() { return call_method<"getStatsKeyCount", jint>(); }
	jint getStatsKeyAt(jint index) { return call_method<"getStatsKeyAt", jint>(index); }
	jboolean hasTimers(jint key) { return call_method<"hasTimers", jboolean>(key); }
	jni::ref<java::util::Map> getTimers(jint key) { return call_method<"getTimers", jni::ref<java::util::Map>>(key); }
	jint getTimersKeyCount() { return call_method<"getTimersKeyCount", jint>(); }
	jint getTimersKeyAt(jint index) { return call_method<"getTimersKeyAt", jint>(index); }
	jboolean hasMeasurements(jint key) { return call_method<"hasMeasurements", jboolean>(key); }
	jni::ref<java::util::Map> getMeasurements(jint key) { return call_method<"getMeasurements", jni::ref<java::util::Map>>(key); }
	jint getMeasurementsKeyCount() { return call_method<"getMeasurementsKeyCount", jint>(); }
	jint getMeasurementsKeyAt(jint index) { return call_method<"getMeasurementsKeyAt", jint>(index); }

protected:

	HealthStats(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_HEALTH_HEALTHSTATS
