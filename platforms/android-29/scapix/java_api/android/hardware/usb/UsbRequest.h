// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBREQUEST_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBREQUEST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::usb { class UsbRequest; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::usb::UsbRequest>
{
	static constexpr fixed_string class_name = "android/hardware/usb/UsbRequest";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBREQUEST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBREQUEST)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBREQUEST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/usb/UsbDeviceConnection.h>
#include <scapix/java_api/android/hardware/usb/UsbEndpoint.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::usb::UsbRequest : public jni::object_base<"android/hardware/usb/UsbRequest",
	java::lang::Object>
{
public:

	static jni::ref<android::hardware::usb::UsbRequest> new_object() { return base_::new_object(); }
	jboolean initialize(jni::ref<android::hardware::usb::UsbDeviceConnection> connection, jni::ref<android::hardware::usb::UsbEndpoint> endpoint) { return call_method<"initialize", jboolean>(connection, endpoint); }
	void close() { return call_method<"close", void>(); }
	jni::ref<android::hardware::usb::UsbEndpoint> getEndpoint() { return call_method<"getEndpoint", jni::ref<android::hardware::usb::UsbEndpoint>>(); }
	jni::ref<java::lang::Object> getClientData() { return call_method<"getClientData", jni::ref<java::lang::Object>>(); }
	void setClientData(jni::ref<java::lang::Object> data) { return call_method<"setClientData", void>(data); }
	jboolean queue(jni::ref<java::nio::ByteBuffer> buffer, jint length) { return call_method<"queue", jboolean>(buffer, length); }
	jboolean queue(jni::ref<java::nio::ByteBuffer> buffer) { return call_method<"queue", jboolean>(buffer); }
	jboolean cancel() { return call_method<"cancel", jboolean>(); }

protected:

	UsbRequest(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBREQUEST
