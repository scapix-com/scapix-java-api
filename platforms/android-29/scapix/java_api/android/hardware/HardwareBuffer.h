// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_HARDWAREBUFFER_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_HARDWAREBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware { class HardwareBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::HardwareBuffer>
{
	static constexpr fixed_string class_name = "android/hardware/HardwareBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_HARDWAREBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_HARDWAREBUFFER)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_HARDWAREBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::HardwareBuffer : public jni::object_base<"android/hardware/HardwareBuffer",
	java::lang::Object,
	android::os::Parcelable,
	java::lang::AutoCloseable>
{
public:

	static jint BLOB() { return get_static_field<"BLOB", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DS_24UI8() { return get_static_field<"DS_24UI8", jint>(); }
	static jint DS_FP32UI8() { return get_static_field<"DS_FP32UI8", jint>(); }
	static jint D_16() { return get_static_field<"D_16", jint>(); }
	static jint D_24() { return get_static_field<"D_24", jint>(); }
	static jint D_FP32() { return get_static_field<"D_FP32", jint>(); }
	static jint RGBA_1010102() { return get_static_field<"RGBA_1010102", jint>(); }
	static jint RGBA_8888() { return get_static_field<"RGBA_8888", jint>(); }
	static jint RGBA_FP16() { return get_static_field<"RGBA_FP16", jint>(); }
	static jint RGBX_8888() { return get_static_field<"RGBX_8888", jint>(); }
	static jint RGB_565() { return get_static_field<"RGB_565", jint>(); }
	static jint RGB_888() { return get_static_field<"RGB_888", jint>(); }
	static jint S_UI8() { return get_static_field<"S_UI8", jint>(); }
	static jlong USAGE_CPU_READ_OFTEN() { return get_static_field<"USAGE_CPU_READ_OFTEN", jlong>(); }
	static jlong USAGE_CPU_READ_RARELY() { return get_static_field<"USAGE_CPU_READ_RARELY", jlong>(); }
	static jlong USAGE_CPU_WRITE_OFTEN() { return get_static_field<"USAGE_CPU_WRITE_OFTEN", jlong>(); }
	static jlong USAGE_CPU_WRITE_RARELY() { return get_static_field<"USAGE_CPU_WRITE_RARELY", jlong>(); }
	static jlong USAGE_GPU_COLOR_OUTPUT() { return get_static_field<"USAGE_GPU_COLOR_OUTPUT", jlong>(); }
	static jlong USAGE_GPU_CUBE_MAP() { return get_static_field<"USAGE_GPU_CUBE_MAP", jlong>(); }
	static jlong USAGE_GPU_DATA_BUFFER() { return get_static_field<"USAGE_GPU_DATA_BUFFER", jlong>(); }
	static jlong USAGE_GPU_MIPMAP_COMPLETE() { return get_static_field<"USAGE_GPU_MIPMAP_COMPLETE", jlong>(); }
	static jlong USAGE_GPU_SAMPLED_IMAGE() { return get_static_field<"USAGE_GPU_SAMPLED_IMAGE", jlong>(); }
	static jlong USAGE_PROTECTED_CONTENT() { return get_static_field<"USAGE_PROTECTED_CONTENT", jlong>(); }
	static jlong USAGE_SENSOR_DIRECT_DATA() { return get_static_field<"USAGE_SENSOR_DIRECT_DATA", jlong>(); }
	static jlong USAGE_VIDEO_ENCODE() { return get_static_field<"USAGE_VIDEO_ENCODE", jlong>(); }

	static jni::ref<android::hardware::HardwareBuffer> create(jint width, jint height, jint format, jint layers, jlong usage) { return call_static_method<"create", jni::ref<android::hardware::HardwareBuffer>>(width, height, format, layers, usage); }
	static jboolean isSupported(jint width, jint height, jint format, jint layers, jlong usage) { return call_static_method<"isSupported", jboolean>(width, height, format, layers, usage); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jint getFormat() { return call_method<"getFormat", jint>(); }
	jint getLayers() { return call_method<"getLayers", jint>(); }
	jlong getUsage() { return call_method<"getUsage", jlong>(); }
	void close() { return call_method<"close", void>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	HardwareBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_HARDWAREBUFFER
