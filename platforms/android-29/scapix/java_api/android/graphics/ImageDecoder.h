// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_IMAGEDECODER_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_IMAGEDECODER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class ImageDecoder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::ImageDecoder>
{
	static constexpr fixed_string class_name = "android/graphics/ImageDecoder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_IMAGEDECODER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_IMAGEDECODER)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_IMAGEDECODER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/res/AssetManager.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/ColorSpace.h>
#include <scapix/java_api/android/graphics/ImageDecoder_OnHeaderDecodedListener.h>
#include <scapix/java_api/android/graphics/ImageDecoder_OnPartialImageListener.h>
#include <scapix/java_api/android/graphics/ImageDecoder_Source.h>
#include <scapix/java_api/android/graphics/PostProcessor.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/android/graphics/ImageDecoder_ImageInfo.h>
#include <scapix/java_api/android/graphics/ImageDecoder_DecodeException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::ImageDecoder : public jni::object_base<"android/graphics/ImageDecoder",
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	using Source = ImageDecoder_Source;
	using OnPartialImageListener = ImageDecoder_OnPartialImageListener;
	using OnHeaderDecodedListener = ImageDecoder_OnHeaderDecodedListener;
	using ImageInfo = ImageDecoder_ImageInfo;
	using DecodeException = ImageDecoder_DecodeException;

	static jint ALLOCATOR_DEFAULT() { return get_static_field<"ALLOCATOR_DEFAULT", jint>(); }
	static jint ALLOCATOR_HARDWARE() { return get_static_field<"ALLOCATOR_HARDWARE", jint>(); }
	static jint ALLOCATOR_SHARED_MEMORY() { return get_static_field<"ALLOCATOR_SHARED_MEMORY", jint>(); }
	static jint ALLOCATOR_SOFTWARE() { return get_static_field<"ALLOCATOR_SOFTWARE", jint>(); }
	static jint MEMORY_POLICY_DEFAULT() { return get_static_field<"MEMORY_POLICY_DEFAULT", jint>(); }
	static jint MEMORY_POLICY_LOW_RAM() { return get_static_field<"MEMORY_POLICY_LOW_RAM", jint>(); }

	static jboolean isMimeTypeSupported(jni::ref<java::lang::String> mimeType) { return call_static_method<"isMimeTypeSupported", jboolean>(mimeType); }
	static jni::ref<android::graphics::ImageDecoder_Source> createSource(jni::ref<android::content::res::Resources> res, jint resId) { return call_static_method<"createSource", jni::ref<android::graphics::ImageDecoder_Source>>(res, resId); }
	static jni::ref<android::graphics::ImageDecoder_Source> createSource(jni::ref<android::content::ContentResolver> cr, jni::ref<android::net::Uri> uri) { return call_static_method<"createSource", jni::ref<android::graphics::ImageDecoder_Source>>(cr, uri); }
	static jni::ref<android::graphics::ImageDecoder_Source> createSource(jni::ref<android::content::res::AssetManager> assets, jni::ref<java::lang::String> fileName) { return call_static_method<"createSource", jni::ref<android::graphics::ImageDecoder_Source>>(assets, fileName); }
	static jni::ref<android::graphics::ImageDecoder_Source> createSource(jni::ref<java::nio::ByteBuffer> buffer) { return call_static_method<"createSource", jni::ref<android::graphics::ImageDecoder_Source>>(buffer); }
	static jni::ref<android::graphics::ImageDecoder_Source> createSource(jni::ref<java::io::File> file) { return call_static_method<"createSource", jni::ref<android::graphics::ImageDecoder_Source>>(file); }
	static jni::ref<android::graphics::ImageDecoder_Source> createSource(jni::ref<java::util::concurrent::Callable> callable) { return call_static_method<"createSource", jni::ref<android::graphics::ImageDecoder_Source>>(callable); }
	void setTargetSize(jint width, jint height) { return call_method<"setTargetSize", void>(width, height); }
	void setTargetSampleSize(jint sampleSize) { return call_method<"setTargetSampleSize", void>(sampleSize); }
	void setAllocator(jint allocator) { return call_method<"setAllocator", void>(allocator); }
	jint getAllocator() { return call_method<"getAllocator", jint>(); }
	void setUnpremultipliedRequired(jboolean unpremultipliedRequired) { return call_method<"setUnpremultipliedRequired", void>(unpremultipliedRequired); }
	jboolean isUnpremultipliedRequired() { return call_method<"isUnpremultipliedRequired", jboolean>(); }
	void setPostProcessor(jni::ref<android::graphics::PostProcessor> postProcessor) { return call_method<"setPostProcessor", void>(postProcessor); }
	jni::ref<android::graphics::PostProcessor> getPostProcessor() { return call_method<"getPostProcessor", jni::ref<android::graphics::PostProcessor>>(); }
	void setOnPartialImageListener(jni::ref<android::graphics::ImageDecoder_OnPartialImageListener> listener) { return call_method<"setOnPartialImageListener", void>(listener); }
	jni::ref<android::graphics::ImageDecoder_OnPartialImageListener> getOnPartialImageListener() { return call_method<"getOnPartialImageListener", jni::ref<android::graphics::ImageDecoder_OnPartialImageListener>>(); }
	void setCrop(jni::ref<android::graphics::Rect> subset) { return call_method<"setCrop", void>(subset); }
	jni::ref<android::graphics::Rect> getCrop() { return call_method<"getCrop", jni::ref<android::graphics::Rect>>(); }
	void setMutableRequired(jboolean mutable_) { return call_method<"setMutableRequired", void>(mutable_); }
	jboolean isMutableRequired() { return call_method<"isMutableRequired", jboolean>(); }
	void setMemorySizePolicy(jint policy) { return call_method<"setMemorySizePolicy", void>(policy); }
	jint getMemorySizePolicy() { return call_method<"getMemorySizePolicy", jint>(); }
	void setDecodeAsAlphaMaskEnabled(jboolean enabled) { return call_method<"setDecodeAsAlphaMaskEnabled", void>(enabled); }
	jboolean isDecodeAsAlphaMaskEnabled() { return call_method<"isDecodeAsAlphaMaskEnabled", jboolean>(); }
	void setTargetColorSpace(jni::ref<android::graphics::ColorSpace> colorSpace) { return call_method<"setTargetColorSpace", void>(colorSpace); }
	void close() { return call_method<"close", void>(); }
	static jni::ref<android::graphics::drawable::Drawable> decodeDrawable(jni::ref<android::graphics::ImageDecoder_Source> src, jni::ref<android::graphics::ImageDecoder_OnHeaderDecodedListener> listener) { return call_static_method<"decodeDrawable", jni::ref<android::graphics::drawable::Drawable>>(src, listener); }
	static jni::ref<android::graphics::drawable::Drawable> decodeDrawable(jni::ref<android::graphics::ImageDecoder_Source> src) { return call_static_method<"decodeDrawable", jni::ref<android::graphics::drawable::Drawable>>(src); }
	static jni::ref<android::graphics::Bitmap> decodeBitmap(jni::ref<android::graphics::ImageDecoder_Source> src, jni::ref<android::graphics::ImageDecoder_OnHeaderDecodedListener> listener) { return call_static_method<"decodeBitmap", jni::ref<android::graphics::Bitmap>>(src, listener); }
	static jni::ref<android::graphics::Bitmap> decodeBitmap(jni::ref<android::graphics::ImageDecoder_Source> src) { return call_static_method<"decodeBitmap", jni::ref<android::graphics::Bitmap>>(src); }

protected:

	ImageDecoder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_IMAGEDECODER
