// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_GRADIENTDRAWABLE_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_GRADIENTDRAWABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics::drawable { class GradientDrawable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::drawable::GradientDrawable>
{
	static constexpr fixed_string class_name = "android/graphics/drawable/GradientDrawable";
	using base_classes = std::tuple<scapix::java_api::android::graphics::drawable::Drawable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_GRADIENTDRAWABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_GRADIENTDRAWABLE)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_GRADIENTDRAWABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/BlendMode.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Insets.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/android/graphics/drawable/GradientDrawable_Orientation.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::drawable::GradientDrawable : public jni::object_base<"android/graphics/drawable/GradientDrawable",
	android::graphics::drawable::Drawable>
{
public:

	using Orientation = GradientDrawable_Orientation;

	static jint LINE() { return get_static_field<"LINE", jint>(); }
	static jint LINEAR_GRADIENT() { return get_static_field<"LINEAR_GRADIENT", jint>(); }
	static jint OVAL() { return get_static_field<"OVAL", jint>(); }
	static jint RADIAL_GRADIENT() { return get_static_field<"RADIAL_GRADIENT", jint>(); }
	static jint RECTANGLE() { return get_static_field<"RECTANGLE", jint>(); }
	static jint RING() { return get_static_field<"RING", jint>(); }
	static jint SWEEP_GRADIENT() { return get_static_field<"SWEEP_GRADIENT", jint>(); }

	static jni::ref<android::graphics::drawable::GradientDrawable> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::drawable::GradientDrawable> new_object(jni::ref<android::graphics::drawable::GradientDrawable_Orientation> orientation, jni::ref<jni::array<jint>> colors) { return base_::new_object(orientation, colors); }
	jboolean getPadding(jni::ref<android::graphics::Rect> padding) { return call_method<"getPadding", jboolean>(padding); }
	void setCornerRadii(jni::ref<jni::array<jfloat>> radii) { return call_method<"setCornerRadii", void>(radii); }
	jni::ref<jni::array<jfloat>> getCornerRadii() { return call_method<"getCornerRadii", jni::ref<jni::array<jfloat>>>(); }
	void setCornerRadius(jfloat radius) { return call_method<"setCornerRadius", void>(radius); }
	jfloat getCornerRadius() { return call_method<"getCornerRadius", jfloat>(); }
	void setStroke(jint width, jint color) { return call_method<"setStroke", void>(width, color); }
	void setStroke(jint width, jni::ref<android::content::res::ColorStateList> colorStateList) { return call_method<"setStroke", void>(width, colorStateList); }
	void setStroke(jint width, jint color, jfloat dashWidth, jfloat dashGap) { return call_method<"setStroke", void>(width, color, dashWidth, dashGap); }
	void setStroke(jint width, jni::ref<android::content::res::ColorStateList> colorStateList, jfloat dashWidth, jfloat dashGap) { return call_method<"setStroke", void>(width, colorStateList, dashWidth, dashGap); }
	void setSize(jint width, jint height) { return call_method<"setSize", void>(width, height); }
	void setShape(jint shape) { return call_method<"setShape", void>(shape); }
	jint getShape() { return call_method<"getShape", jint>(); }
	void setGradientType(jint gradient) { return call_method<"setGradientType", void>(gradient); }
	jint getGradientType() { return call_method<"getGradientType", jint>(); }
	void setGradientCenter(jfloat x, jfloat y) { return call_method<"setGradientCenter", void>(x, y); }
	jfloat getGradientCenterX() { return call_method<"getGradientCenterX", jfloat>(); }
	jfloat getGradientCenterY() { return call_method<"getGradientCenterY", jfloat>(); }
	void setGradientRadius(jfloat gradientRadius) { return call_method<"setGradientRadius", void>(gradientRadius); }
	jfloat getGradientRadius() { return call_method<"getGradientRadius", jfloat>(); }
	void setUseLevel(jboolean useLevel) { return call_method<"setUseLevel", void>(useLevel); }
	jboolean getUseLevel() { return call_method<"getUseLevel", jboolean>(); }
	jni::ref<android::graphics::drawable::GradientDrawable_Orientation> getOrientation() { return call_method<"getOrientation", jni::ref<android::graphics::drawable::GradientDrawable_Orientation>>(); }
	void setOrientation(jni::ref<android::graphics::drawable::GradientDrawable_Orientation> orientation) { return call_method<"setOrientation", void>(orientation); }
	void setColors(jni::ref<jni::array<jint>> colors) { return call_method<"setColors", void>(colors); }
	void setColors(jni::ref<jni::array<jint>> colors, jni::ref<jni::array<jfloat>> offsets) { return call_method<"setColors", void>(colors, offsets); }
	jni::ref<jni::array<jint>> getColors() { return call_method<"getColors", jni::ref<jni::array<jint>>>(); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }
	void setInnerRadiusRatio(jfloat innerRadiusRatio) { return call_method<"setInnerRadiusRatio", void>(innerRadiusRatio); }
	jfloat getInnerRadiusRatio() { return call_method<"getInnerRadiusRatio", jfloat>(); }
	void setInnerRadius(jint innerRadius) { return call_method<"setInnerRadius", void>(innerRadius); }
	jint getInnerRadius() { return call_method<"getInnerRadius", jint>(); }
	void setThicknessRatio(jfloat thicknessRatio) { return call_method<"setThicknessRatio", void>(thicknessRatio); }
	jfloat getThicknessRatio() { return call_method<"getThicknessRatio", jfloat>(); }
	void setThickness(jint thickness) { return call_method<"setThickness", void>(thickness); }
	jint getThickness() { return call_method<"getThickness", jint>(); }
	void setPadding(jint left, jint top, jint right, jint bottom) { return call_method<"setPadding", void>(left, top, right, bottom); }
	void setColor(jint argb) { return call_method<"setColor", void>(argb); }
	void setColor(jni::ref<android::content::res::ColorStateList> colorStateList) { return call_method<"setColor", void>(colorStateList); }
	jni::ref<android::content::res::ColorStateList> getColor() { return call_method<"getColor", jni::ref<android::content::res::ColorStateList>>(); }
	jboolean isStateful() { return call_method<"isStateful", jboolean>(); }
	jint getChangingConfigurations() { return call_method<"getChangingConfigurations", jint>(); }
	void setAlpha(jint alpha) { return call_method<"setAlpha", void>(alpha); }
	jint getAlpha() { return call_method<"getAlpha", jint>(); }
	void setDither(jboolean dither) { return call_method<"setDither", void>(dither); }
	jni::ref<android::graphics::ColorFilter> getColorFilter() { return call_method<"getColorFilter", jni::ref<android::graphics::ColorFilter>>(); }
	void setColorFilter(jni::ref<android::graphics::ColorFilter> colorFilter) { return call_method<"setColorFilter", void>(colorFilter); }
	void setTintList(jni::ref<android::content::res::ColorStateList> tint) { return call_method<"setTintList", void>(tint); }
	void setTintBlendMode(jni::ref<android::graphics::BlendMode> blendMode) { return call_method<"setTintBlendMode", void>(blendMode); }
	jint getOpacity() { return call_method<"getOpacity", jint>(); }
	void inflate(jni::ref<android::content::res::Resources> r, jni::ref<org::xmlpull::v1::XmlPullParser> parser, jni::ref<android::util::AttributeSet> attrs, jni::ref<android::content::res::Resources_Theme> theme) { return call_method<"inflate", void>(r, parser, attrs, theme); }
	void applyTheme(jni::ref<android::content::res::Resources_Theme> t) { return call_method<"applyTheme", void>(t); }
	jboolean canApplyTheme() { return call_method<"canApplyTheme", jboolean>(); }
	jint getIntrinsicWidth() { return call_method<"getIntrinsicWidth", jint>(); }
	jint getIntrinsicHeight() { return call_method<"getIntrinsicHeight", jint>(); }
	jni::ref<android::graphics::Insets> getOpticalInsets() { return call_method<"getOpticalInsets", jni::ref<android::graphics::Insets>>(); }
	jni::ref<android::graphics::drawable::Drawable_ConstantState> getConstantState() { return call_method<"getConstantState", jni::ref<android::graphics::drawable::Drawable_ConstantState>>(); }
	void getOutline(jni::ref<android::graphics::Outline> outline) { return call_method<"getOutline", void>(outline); }
	jni::ref<android::graphics::drawable::Drawable> mutate() { return call_method<"mutate", jni::ref<android::graphics::drawable::Drawable>>(); }

protected:

	GradientDrawable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_GRADIENTDRAWABLE
