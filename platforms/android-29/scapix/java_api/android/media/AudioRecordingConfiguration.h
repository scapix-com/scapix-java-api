// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORDINGCONFIGURATION_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORDINGCONFIGURATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class AudioRecordingConfiguration; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::AudioRecordingConfiguration>
{
	static constexpr fixed_string class_name = "android/media/AudioRecordingConfiguration";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORDINGCONFIGURATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORDINGCONFIGURATION)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORDINGCONFIGURATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/AudioDeviceInfo.h>
#include <scapix/java_api/android/media/AudioFormat.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::AudioRecordingConfiguration : public jni::object_base<"android/media/AudioRecordingConfiguration",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	jint getClientAudioSource() { return call_method<"getClientAudioSource", jint>(); }
	jint getClientAudioSessionId() { return call_method<"getClientAudioSessionId", jint>(); }
	jni::ref<android::media::AudioFormat> getFormat() { return call_method<"getFormat", jni::ref<android::media::AudioFormat>>(); }
	jni::ref<android::media::AudioFormat> getClientFormat() { return call_method<"getClientFormat", jni::ref<android::media::AudioFormat>>(); }
	jni::ref<android::media::AudioDeviceInfo> getAudioDevice() { return call_method<"getAudioDevice", jni::ref<android::media::AudioDeviceInfo>>(); }
	jboolean isClientSilenced() { return call_method<"isClientSilenced", jboolean>(); }
	jint getAudioSource() { return call_method<"getAudioSource", jint>(); }
	jni::ref<java::util::List> getClientEffects() { return call_method<"getClientEffects", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getEffects() { return call_method<"getEffects", jni::ref<java::util::List>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }

protected:

	AudioRecordingConfiguration(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORDINGCONFIGURATION
