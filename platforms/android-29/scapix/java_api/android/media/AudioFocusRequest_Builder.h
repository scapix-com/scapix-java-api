// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFOCUSREQUEST_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFOCUSREQUEST_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class AudioFocusRequest_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::AudioFocusRequest_Builder>
{
	static constexpr fixed_string class_name = "android/media/AudioFocusRequest$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFOCUSREQUEST_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFOCUSREQUEST_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFOCUSREQUEST_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/media/AudioFocusRequest.h>
#include <scapix/java_api/android/media/AudioManager_OnAudioFocusChangeListener.h>
#include <scapix/java_api/android/os/Handler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::AudioFocusRequest_Builder : public jni::object_base<"android/media/AudioFocusRequest$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::media::AudioFocusRequest_Builder> new_object(jint focusGain) { return base_::new_object(focusGain); }
	static jni::ref<android::media::AudioFocusRequest_Builder> new_object(jni::ref<android::media::AudioFocusRequest> requestToCopy) { return base_::new_object(requestToCopy); }
	jni::ref<android::media::AudioFocusRequest_Builder> setFocusGain(jint focusGain) { return call_method<"setFocusGain", jni::ref<android::media::AudioFocusRequest_Builder>>(focusGain); }
	jni::ref<android::media::AudioFocusRequest_Builder> setOnAudioFocusChangeListener(jni::ref<android::media::AudioManager_OnAudioFocusChangeListener> listener) { return call_method<"setOnAudioFocusChangeListener", jni::ref<android::media::AudioFocusRequest_Builder>>(listener); }
	jni::ref<android::media::AudioFocusRequest_Builder> setOnAudioFocusChangeListener(jni::ref<android::media::AudioManager_OnAudioFocusChangeListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"setOnAudioFocusChangeListener", jni::ref<android::media::AudioFocusRequest_Builder>>(listener, handler); }
	jni::ref<android::media::AudioFocusRequest_Builder> setAudioAttributes(jni::ref<android::media::AudioAttributes> attributes) { return call_method<"setAudioAttributes", jni::ref<android::media::AudioFocusRequest_Builder>>(attributes); }
	jni::ref<android::media::AudioFocusRequest_Builder> setWillPauseWhenDucked(jboolean pauseOnDuck) { return call_method<"setWillPauseWhenDucked", jni::ref<android::media::AudioFocusRequest_Builder>>(pauseOnDuck); }
	jni::ref<android::media::AudioFocusRequest_Builder> setAcceptsDelayedFocusGain(jboolean acceptsDelayedFocusGain) { return call_method<"setAcceptsDelayedFocusGain", jni::ref<android::media::AudioFocusRequest_Builder>>(acceptsDelayedFocusGain); }
	jni::ref<android::media::AudioFocusRequest_Builder> setForceDucking(jboolean forceDucking) { return call_method<"setForceDucking", jni::ref<android::media::AudioFocusRequest_Builder>>(forceDucking); }
	jni::ref<android::media::AudioFocusRequest> build() { return call_method<"build", jni::ref<android::media::AudioFocusRequest>>(); }

protected:

	AudioFocusRequest_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFOCUSREQUEST_BUILDER
