// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_PATTERN_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_PATTERN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaCodec_CryptoInfo_Pattern; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaCodec_CryptoInfo_Pattern>
{
	static constexpr fixed_string class_name = "android/media/MediaCodec$CryptoInfo$Pattern";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_PATTERN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_PATTERN)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_PATTERN

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaCodec_CryptoInfo_Pattern : public jni::object_base<"android/media/MediaCodec$CryptoInfo$Pattern",
	java::lang::Object>
{
public:

	static jni::ref<android::media::MediaCodec_CryptoInfo_Pattern> new_object(jint blocksToEncrypt, jint blocksToSkip) { return base_::new_object(blocksToEncrypt, blocksToSkip); }
	void set(jint blocksToEncrypt, jint blocksToSkip) { return call_method<"set", void>(blocksToEncrypt, blocksToSkip); }
	jint getSkipBlocks() { return call_method<"getSkipBlocks", jint>(); }
	jint getEncryptBlocks() { return call_method<"getEncryptBlocks", jint>(); }

protected:

	MediaCodec_CryptoInfo_Pattern(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_PATTERN
