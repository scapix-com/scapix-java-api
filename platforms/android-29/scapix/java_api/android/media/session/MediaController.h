// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIACONTROLLER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIACONTROLLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::session { class MediaController; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::session::MediaController>
{
	static constexpr fixed_string class_name = "android/media/session/MediaController";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIACONTROLLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIACONTROLLER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIACONTROLLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/media/MediaMetadata.h>
#include <scapix/java_api/android/media/session/MediaController_Callback.h>
#include <scapix/java_api/android/media/session/MediaController_PlaybackInfo.h>
#include <scapix/java_api/android/media/session/MediaController_TransportControls.h>
#include <scapix/java_api/android/media/session/MediaSession_Token.h>
#include <scapix/java_api/android/media/session/PlaybackState.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/ResultReceiver.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::session::MediaController : public jni::object_base<"android/media/session/MediaController",
	java::lang::Object>
{
public:

	using TransportControls = MediaController_TransportControls;
	using PlaybackInfo = MediaController_PlaybackInfo;
	using Callback = MediaController_Callback;

	static jni::ref<android::media::session::MediaController> new_object(jni::ref<android::content::Context> context, jni::ref<android::media::session::MediaSession_Token> token) { return base_::new_object(context, token); }
	jni::ref<android::media::session::MediaController_TransportControls> getTransportControls() { return call_method<"getTransportControls", jni::ref<android::media::session::MediaController_TransportControls>>(); }
	jboolean dispatchMediaButtonEvent(jni::ref<android::view::KeyEvent> keyEvent) { return call_method<"dispatchMediaButtonEvent", jboolean>(keyEvent); }
	jni::ref<android::media::session::PlaybackState> getPlaybackState() { return call_method<"getPlaybackState", jni::ref<android::media::session::PlaybackState>>(); }
	jni::ref<android::media::MediaMetadata> getMetadata() { return call_method<"getMetadata", jni::ref<android::media::MediaMetadata>>(); }
	jni::ref<java::util::List> getQueue() { return call_method<"getQueue", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::CharSequence> getQueueTitle() { return call_method<"getQueueTitle", jni::ref<java::lang::CharSequence>>(); }
	jni::ref<android::os::Bundle> getExtras() { return call_method<"getExtras", jni::ref<android::os::Bundle>>(); }
	jint getRatingType() { return call_method<"getRatingType", jint>(); }
	jlong getFlags() { return call_method<"getFlags", jlong>(); }
	jni::ref<android::media::session::MediaController_PlaybackInfo> getPlaybackInfo() { return call_method<"getPlaybackInfo", jni::ref<android::media::session::MediaController_PlaybackInfo>>(); }
	jni::ref<android::app::PendingIntent> getSessionActivity() { return call_method<"getSessionActivity", jni::ref<android::app::PendingIntent>>(); }
	jni::ref<android::media::session::MediaSession_Token> getSessionToken() { return call_method<"getSessionToken", jni::ref<android::media::session::MediaSession_Token>>(); }
	void setVolumeTo(jint value, jint flags) { return call_method<"setVolumeTo", void>(value, flags); }
	void adjustVolume(jint direction, jint flags) { return call_method<"adjustVolume", void>(direction, flags); }
	void registerCallback(jni::ref<android::media::session::MediaController_Callback> callback) { return call_method<"registerCallback", void>(callback); }
	void registerCallback(jni::ref<android::media::session::MediaController_Callback> callback, jni::ref<android::os::Handler> handler) { return call_method<"registerCallback", void>(callback, handler); }
	void unregisterCallback(jni::ref<android::media::session::MediaController_Callback> callback) { return call_method<"unregisterCallback", void>(callback); }
	void sendCommand(jni::ref<java::lang::String> command, jni::ref<android::os::Bundle> args, jni::ref<android::os::ResultReceiver> cb) { return call_method<"sendCommand", void>(command, args, cb); }
	jni::ref<java::lang::String> getPackageName() { return call_method<"getPackageName", jni::ref<java::lang::String>>(); }
	jni::ref<android::os::Bundle> getSessionInfo() { return call_method<"getSessionInfo", jni::ref<android::os::Bundle>>(); }

protected:

	MediaController(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_SESSION_MEDIACONTROLLER
