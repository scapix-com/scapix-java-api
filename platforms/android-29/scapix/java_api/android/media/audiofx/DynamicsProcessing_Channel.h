// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CHANNEL_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::audiofx { class DynamicsProcessing_Channel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::audiofx::DynamicsProcessing_Channel>
{
	static constexpr fixed_string class_name = "android/media/audiofx/DynamicsProcessing$Channel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CHANNEL)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CHANNEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Eq.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_EqBand.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Limiter.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Mbc.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_MbcBand.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::audiofx::DynamicsProcessing_Channel : public jni::object_base<"android/media/audiofx/DynamicsProcessing$Channel",
	java::lang::Object>
{
public:

	static jni::ref<android::media::audiofx::DynamicsProcessing_Channel> new_object(jfloat inputGain, jboolean preEqInUse, jint preEqBandCount, jboolean mbcInUse, jint mbcBandCount, jboolean postEqInUse, jint postEqBandCount, jboolean limiterInUse) { return base_::new_object(inputGain, preEqInUse, preEqBandCount, mbcInUse, mbcBandCount, postEqInUse, postEqBandCount, limiterInUse); }
	static jni::ref<android::media::audiofx::DynamicsProcessing_Channel> new_object(jni::ref<android::media::audiofx::DynamicsProcessing_Channel> cfg) { return base_::new_object(cfg); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jfloat getInputGain() { return call_method<"getInputGain", jfloat>(); }
	void setInputGain(jfloat inputGain) { return call_method<"setInputGain", void>(inputGain); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Eq> getPreEq() { return call_method<"getPreEq", jni::ref<android::media::audiofx::DynamicsProcessing_Eq>>(); }
	void setPreEq(jni::ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<"setPreEq", void>(preEq); }
	jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> getPreEqBand(jint band) { return call_method<"getPreEqBand", jni::ref<android::media::audiofx::DynamicsProcessing_EqBand>>(band); }
	void setPreEqBand(jint band, jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand) { return call_method<"setPreEqBand", void>(band, preEqBand); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Mbc> getMbc() { return call_method<"getMbc", jni::ref<android::media::audiofx::DynamicsProcessing_Mbc>>(); }
	void setMbc(jni::ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<"setMbc", void>(mbc); }
	jni::ref<android::media::audiofx::DynamicsProcessing_MbcBand> getMbcBand(jint band) { return call_method<"getMbcBand", jni::ref<android::media::audiofx::DynamicsProcessing_MbcBand>>(band); }
	void setMbcBand(jint band, jni::ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand) { return call_method<"setMbcBand", void>(band, mbcBand); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Eq> getPostEq() { return call_method<"getPostEq", jni::ref<android::media::audiofx::DynamicsProcessing_Eq>>(); }
	void setPostEq(jni::ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<"setPostEq", void>(postEq); }
	jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> getPostEqBand(jint band) { return call_method<"getPostEqBand", jni::ref<android::media::audiofx::DynamicsProcessing_EqBand>>(band); }
	void setPostEqBand(jint band, jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand) { return call_method<"setPostEqBand", void>(band, postEqBand); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Limiter> getLimiter() { return call_method<"getLimiter", jni::ref<android::media::audiofx::DynamicsProcessing_Limiter>>(); }
	void setLimiter(jni::ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<"setLimiter", void>(limiter); }

protected:

	DynamicsProcessing_Channel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_CHANNEL
