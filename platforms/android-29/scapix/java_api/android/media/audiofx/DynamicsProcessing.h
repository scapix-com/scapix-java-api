// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/media/audiofx/AudioEffect.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::audiofx { class DynamicsProcessing; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::audiofx::DynamicsProcessing>
{
	static constexpr fixed_string class_name = "android/media/audiofx/DynamicsProcessing";
	using base_classes = std::tuple<scapix::java_api::android::media::audiofx::AudioEffect>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Channel.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Config.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Eq.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_EqBand.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Limiter.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Mbc.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_MbcBand.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_Stage.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_BandStage.h>
#include <scapix/java_api/android/media/audiofx/DynamicsProcessing_BandBase.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::audiofx::DynamicsProcessing : public jni::object_base<"android/media/audiofx/DynamicsProcessing",
	android::media::audiofx::AudioEffect>
{
public:

	using Stage = DynamicsProcessing_Stage;
	using MbcBand = DynamicsProcessing_MbcBand;
	using Mbc = DynamicsProcessing_Mbc;
	using Limiter = DynamicsProcessing_Limiter;
	using EqBand = DynamicsProcessing_EqBand;
	using Eq = DynamicsProcessing_Eq;
	using Config = DynamicsProcessing_Config;
	using Channel = DynamicsProcessing_Channel;
	using BandStage = DynamicsProcessing_BandStage;
	using BandBase = DynamicsProcessing_BandBase;

	static jint VARIANT_FAVOR_FREQUENCY_RESOLUTION() { return get_static_field<"VARIANT_FAVOR_FREQUENCY_RESOLUTION", jint>(); }
	static jint VARIANT_FAVOR_TIME_RESOLUTION() { return get_static_field<"VARIANT_FAVOR_TIME_RESOLUTION", jint>(); }

	static jni::ref<android::media::audiofx::DynamicsProcessing> new_object(jint audioSession) { return base_::new_object(audioSession); }
	static jni::ref<android::media::audiofx::DynamicsProcessing> new_object(jint priority, jint audioSession, jni::ref<android::media::audiofx::DynamicsProcessing_Config> cfg) { return base_::new_object(priority, audioSession, cfg); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Config> getConfig() { return call_method<"getConfig", jni::ref<android::media::audiofx::DynamicsProcessing_Config>>(); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Channel> getChannelByChannelIndex(jint channelIndex) { return call_method<"getChannelByChannelIndex", jni::ref<android::media::audiofx::DynamicsProcessing_Channel>>(channelIndex); }
	void setChannelTo(jint channelIndex, jni::ref<android::media::audiofx::DynamicsProcessing_Channel> channel) { return call_method<"setChannelTo", void>(channelIndex, channel); }
	void setAllChannelsTo(jni::ref<android::media::audiofx::DynamicsProcessing_Channel> channel) { return call_method<"setAllChannelsTo", void>(channel); }
	jfloat getInputGainByChannelIndex(jint channelIndex) { return call_method<"getInputGainByChannelIndex", jfloat>(channelIndex); }
	void setInputGainbyChannel(jint channelIndex, jfloat inputGain) { return call_method<"setInputGainbyChannel", void>(channelIndex, inputGain); }
	void setInputGainAllChannelsTo(jfloat inputGain) { return call_method<"setInputGainAllChannelsTo", void>(inputGain); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Eq> getPreEqByChannelIndex(jint channelIndex) { return call_method<"getPreEqByChannelIndex", jni::ref<android::media::audiofx::DynamicsProcessing_Eq>>(channelIndex); }
	void setPreEqByChannelIndex(jint channelIndex, jni::ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<"setPreEqByChannelIndex", void>(channelIndex, preEq); }
	void setPreEqAllChannelsTo(jni::ref<android::media::audiofx::DynamicsProcessing_Eq> preEq) { return call_method<"setPreEqAllChannelsTo", void>(preEq); }
	jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> getPreEqBandByChannelIndex(jint channelIndex, jint band) { return call_method<"getPreEqBandByChannelIndex", jni::ref<android::media::audiofx::DynamicsProcessing_EqBand>>(channelIndex, band); }
	void setPreEqBandByChannelIndex(jint channelIndex, jint band, jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand) { return call_method<"setPreEqBandByChannelIndex", void>(channelIndex, band, preEqBand); }
	void setPreEqBandAllChannelsTo(jint band, jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> preEqBand) { return call_method<"setPreEqBandAllChannelsTo", void>(band, preEqBand); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Mbc> getMbcByChannelIndex(jint channelIndex) { return call_method<"getMbcByChannelIndex", jni::ref<android::media::audiofx::DynamicsProcessing_Mbc>>(channelIndex); }
	void setMbcByChannelIndex(jint channelIndex, jni::ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<"setMbcByChannelIndex", void>(channelIndex, mbc); }
	void setMbcAllChannelsTo(jni::ref<android::media::audiofx::DynamicsProcessing_Mbc> mbc) { return call_method<"setMbcAllChannelsTo", void>(mbc); }
	jni::ref<android::media::audiofx::DynamicsProcessing_MbcBand> getMbcBandByChannelIndex(jint channelIndex, jint band) { return call_method<"getMbcBandByChannelIndex", jni::ref<android::media::audiofx::DynamicsProcessing_MbcBand>>(channelIndex, band); }
	void setMbcBandByChannelIndex(jint channelIndex, jint band, jni::ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand) { return call_method<"setMbcBandByChannelIndex", void>(channelIndex, band, mbcBand); }
	void setMbcBandAllChannelsTo(jint band, jni::ref<android::media::audiofx::DynamicsProcessing_MbcBand> mbcBand) { return call_method<"setMbcBandAllChannelsTo", void>(band, mbcBand); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Eq> getPostEqByChannelIndex(jint channelIndex) { return call_method<"getPostEqByChannelIndex", jni::ref<android::media::audiofx::DynamicsProcessing_Eq>>(channelIndex); }
	void setPostEqByChannelIndex(jint channelIndex, jni::ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<"setPostEqByChannelIndex", void>(channelIndex, postEq); }
	void setPostEqAllChannelsTo(jni::ref<android::media::audiofx::DynamicsProcessing_Eq> postEq) { return call_method<"setPostEqAllChannelsTo", void>(postEq); }
	jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> getPostEqBandByChannelIndex(jint channelIndex, jint band) { return call_method<"getPostEqBandByChannelIndex", jni::ref<android::media::audiofx::DynamicsProcessing_EqBand>>(channelIndex, band); }
	void setPostEqBandByChannelIndex(jint channelIndex, jint band, jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand) { return call_method<"setPostEqBandByChannelIndex", void>(channelIndex, band, postEqBand); }
	void setPostEqBandAllChannelsTo(jint band, jni::ref<android::media::audiofx::DynamicsProcessing_EqBand> postEqBand) { return call_method<"setPostEqBandAllChannelsTo", void>(band, postEqBand); }
	jni::ref<android::media::audiofx::DynamicsProcessing_Limiter> getLimiterByChannelIndex(jint channelIndex) { return call_method<"getLimiterByChannelIndex", jni::ref<android::media::audiofx::DynamicsProcessing_Limiter>>(channelIndex); }
	void setLimiterByChannelIndex(jint channelIndex, jni::ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<"setLimiterByChannelIndex", void>(channelIndex, limiter); }
	void setLimiterAllChannelsTo(jni::ref<android::media::audiofx::DynamicsProcessing_Limiter> limiter) { return call_method<"setLimiterAllChannelsTo", void>(limiter); }
	jint getChannelCount() { return call_method<"getChannelCount", jint>(); }

protected:

	DynamicsProcessing(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_DYNAMICSPROCESSING
