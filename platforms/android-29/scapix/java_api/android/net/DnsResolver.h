// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_DNSRESOLVER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_DNSRESOLVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class DnsResolver; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::DnsResolver>
{
	static constexpr fixed_string class_name = "android/net/DnsResolver";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_DNSRESOLVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_DNSRESOLVER)
#define SCAPIX_JAVA_API_ANDROID_NET_DNSRESOLVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/DnsResolver_Callback.h>
#include <scapix/java_api/android/net/Network.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/android/net/DnsResolver_DnsException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::DnsResolver : public jni::object_base<"android/net/DnsResolver",
	java::lang::Object>
{
public:

	using DnsException = DnsResolver_DnsException;
	using Callback = DnsResolver_Callback;

	static jint CLASS_IN() { return get_static_field<"CLASS_IN", jint>(); }
	static jint ERROR_PARSE() { return get_static_field<"ERROR_PARSE", jint>(); }
	static jint ERROR_SYSTEM() { return get_static_field<"ERROR_SYSTEM", jint>(); }
	static jint FLAG_EMPTY() { return get_static_field<"FLAG_EMPTY", jint>(); }
	static jint FLAG_NO_CACHE_LOOKUP() { return get_static_field<"FLAG_NO_CACHE_LOOKUP", jint>(); }
	static jint FLAG_NO_CACHE_STORE() { return get_static_field<"FLAG_NO_CACHE_STORE", jint>(); }
	static jint FLAG_NO_RETRY() { return get_static_field<"FLAG_NO_RETRY", jint>(); }
	static jint TYPE_A() { return get_static_field<"TYPE_A", jint>(); }
	static jint TYPE_AAAA() { return get_static_field<"TYPE_AAAA", jint>(); }

	static jni::ref<android::net::DnsResolver> getInstance() { return call_static_method<"getInstance", jni::ref<android::net::DnsResolver>>(); }
	void rawQuery(jni::ref<android::net::Network> network, jni::ref<jni::array<jbyte>> query, jint flags, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<android::net::DnsResolver_Callback> callback) { return call_method<"rawQuery", void>(network, query, flags, executor, cancellationSignal, callback); }
	void rawQuery(jni::ref<android::net::Network> network, jni::ref<java::lang::String> domain, jint nsClass, jint nsType, jint flags, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<android::net::DnsResolver_Callback> callback) { return call_method<"rawQuery", void>(network, domain, nsClass, nsType, flags, executor, cancellationSignal, callback); }
	void query(jni::ref<android::net::Network> network, jni::ref<java::lang::String> domain, jint flags, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<android::net::DnsResolver_Callback> callback) { return call_method<"query", void>(network, domain, flags, executor, cancellationSignal, callback); }
	void query(jni::ref<android::net::Network> network, jni::ref<java::lang::String> domain, jint nsType, jint flags, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<android::net::DnsResolver_Callback> callback) { return call_method<"query", void>(network, domain, nsType, flags, executor, cancellationSignal, callback); }

protected:

	DnsResolver(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_DNSRESOLVER
