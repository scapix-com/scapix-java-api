// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BIDI_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BIDI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class Bidi; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::Bidi>
{
	static constexpr fixed_string class_name = "android/icu/text/Bidi";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BIDI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BIDI)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BIDI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/BidiClassifier.h>
#include <scapix/java_api/android/icu/text/BidiRun.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::Bidi : public jni::object_base<"android/icu/text/Bidi",
	java::lang::Object>
{
public:

	static jint DIRECTION_DEFAULT_LEFT_TO_RIGHT() { return get_static_field<"DIRECTION_DEFAULT_LEFT_TO_RIGHT", jint>(); }
	static jint DIRECTION_DEFAULT_RIGHT_TO_LEFT() { return get_static_field<"DIRECTION_DEFAULT_RIGHT_TO_LEFT", jint>(); }
	static jint DIRECTION_LEFT_TO_RIGHT() { return get_static_field<"DIRECTION_LEFT_TO_RIGHT", jint>(); }
	static jint DIRECTION_RIGHT_TO_LEFT() { return get_static_field<"DIRECTION_RIGHT_TO_LEFT", jint>(); }
	static jshort DO_MIRRORING() { return get_static_field<"DO_MIRRORING", jshort>(); }
	static jshort INSERT_LRM_FOR_NUMERIC() { return get_static_field<"INSERT_LRM_FOR_NUMERIC", jshort>(); }
	static jshort KEEP_BASE_COMBINING() { return get_static_field<"KEEP_BASE_COMBINING", jshort>(); }
	static jbyte LEVEL_DEFAULT_LTR() { return get_static_field<"LEVEL_DEFAULT_LTR", jbyte>(); }
	static jbyte LEVEL_DEFAULT_RTL() { return get_static_field<"LEVEL_DEFAULT_RTL", jbyte>(); }
	static jbyte LEVEL_OVERRIDE() { return get_static_field<"LEVEL_OVERRIDE", jbyte>(); }
	static jbyte LTR() { return get_static_field<"LTR", jbyte>(); }
	static jint MAP_NOWHERE() { return get_static_field<"MAP_NOWHERE", jint>(); }
	static jbyte MAX_EXPLICIT_LEVEL() { return get_static_field<"MAX_EXPLICIT_LEVEL", jbyte>(); }
	static jbyte MIXED() { return get_static_field<"MIXED", jbyte>(); }
	static jbyte NEUTRAL() { return get_static_field<"NEUTRAL", jbyte>(); }
	static jint OPTION_DEFAULT() { return get_static_field<"OPTION_DEFAULT", jint>(); }
	static jint OPTION_INSERT_MARKS() { return get_static_field<"OPTION_INSERT_MARKS", jint>(); }
	static jint OPTION_REMOVE_CONTROLS() { return get_static_field<"OPTION_REMOVE_CONTROLS", jint>(); }
	static jint OPTION_STREAMING() { return get_static_field<"OPTION_STREAMING", jint>(); }
	static jshort OUTPUT_REVERSE() { return get_static_field<"OUTPUT_REVERSE", jshort>(); }
	static jshort REMOVE_BIDI_CONTROLS() { return get_static_field<"REMOVE_BIDI_CONTROLS", jshort>(); }
	static jshort REORDER_DEFAULT() { return get_static_field<"REORDER_DEFAULT", jshort>(); }
	static jshort REORDER_GROUP_NUMBERS_WITH_R() { return get_static_field<"REORDER_GROUP_NUMBERS_WITH_R", jshort>(); }
	static jshort REORDER_INVERSE_FOR_NUMBERS_SPECIAL() { return get_static_field<"REORDER_INVERSE_FOR_NUMBERS_SPECIAL", jshort>(); }
	static jshort REORDER_INVERSE_LIKE_DIRECT() { return get_static_field<"REORDER_INVERSE_LIKE_DIRECT", jshort>(); }
	static jshort REORDER_INVERSE_NUMBERS_AS_L() { return get_static_field<"REORDER_INVERSE_NUMBERS_AS_L", jshort>(); }
	static jshort REORDER_NUMBERS_SPECIAL() { return get_static_field<"REORDER_NUMBERS_SPECIAL", jshort>(); }
	static jshort REORDER_RUNS_ONLY() { return get_static_field<"REORDER_RUNS_ONLY", jshort>(); }
	static jbyte RTL() { return get_static_field<"RTL", jbyte>(); }

	static jni::ref<android::icu::text::Bidi> new_object() { return base_::new_object(); }
	static jni::ref<android::icu::text::Bidi> new_object(jint maxLength, jint maxRunCount) { return base_::new_object(maxLength, maxRunCount); }
	static jni::ref<android::icu::text::Bidi> new_object(jni::ref<java::lang::String> paragraph, jint flags) { return base_::new_object(paragraph, flags); }
	static jni::ref<android::icu::text::Bidi> new_object(jni::ref<java::text::AttributedCharacterIterator> paragraph) { return base_::new_object(paragraph); }
	static jni::ref<android::icu::text::Bidi> new_object(jni::ref<jni::array<jchar>> text, jint textStart, jni::ref<jni::array<jbyte>> embeddings, jint embStart, jint paragraphLength, jint flags) { return base_::new_object(text, textStart, embeddings, embStart, paragraphLength, flags); }
	void setInverse(jboolean isInverse) { return call_method<"setInverse", void>(isInverse); }
	jboolean isInverse() { return call_method<"isInverse", jboolean>(); }
	void setReorderingMode(jint reorderingMode) { return call_method<"setReorderingMode", void>(reorderingMode); }
	jint getReorderingMode() { return call_method<"getReorderingMode", jint>(); }
	void setReorderingOptions(jint options) { return call_method<"setReorderingOptions", void>(options); }
	jint getReorderingOptions() { return call_method<"getReorderingOptions", jint>(); }
	static jbyte getBaseDirection(jni::ref<java::lang::CharSequence> paragraph) { return call_static_method<"getBaseDirection", jbyte>(paragraph); }
	void setContext(jni::ref<java::lang::String> prologue, jni::ref<java::lang::String> epilogue) { return call_method<"setContext", void>(prologue, epilogue); }
	void setPara(jni::ref<java::lang::String> text, jbyte paraLevel, jni::ref<jni::array<jbyte>> embeddingLevels) { return call_method<"setPara", void>(text, paraLevel, embeddingLevels); }
	void setPara(jni::ref<jni::array<jchar>> chars, jbyte paraLevel, jni::ref<jni::array<jbyte>> embeddingLevels) { return call_method<"setPara", void>(chars, paraLevel, embeddingLevels); }
	void setPara(jni::ref<java::text::AttributedCharacterIterator> paragraph) { return call_method<"setPara", void>(paragraph); }
	void orderParagraphsLTR(jboolean ordarParaLTR) { return call_method<"orderParagraphsLTR", void>(ordarParaLTR); }
	jboolean isOrderParagraphsLTR() { return call_method<"isOrderParagraphsLTR", jboolean>(); }
	jbyte getDirection() { return call_method<"getDirection", jbyte>(); }
	jni::ref<java::lang::String> getTextAsString() { return call_method<"getTextAsString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jchar>> getText() { return call_method<"getText", jni::ref<jni::array<jchar>>>(); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jint getProcessedLength() { return call_method<"getProcessedLength", jint>(); }
	jint getResultLength() { return call_method<"getResultLength", jint>(); }
	jbyte getParaLevel() { return call_method<"getParaLevel", jbyte>(); }
	jint countParagraphs() { return call_method<"countParagraphs", jint>(); }
	jni::ref<android::icu::text::BidiRun> getParagraphByIndex(jint paraIndex) { return call_method<"getParagraphByIndex", jni::ref<android::icu::text::BidiRun>>(paraIndex); }
	jni::ref<android::icu::text::BidiRun> getParagraph(jint charIndex) { return call_method<"getParagraph", jni::ref<android::icu::text::BidiRun>>(charIndex); }
	jint getParagraphIndex(jint charIndex) { return call_method<"getParagraphIndex", jint>(charIndex); }
	void setCustomClassifier(jni::ref<android::icu::text::BidiClassifier> classifier) { return call_method<"setCustomClassifier", void>(classifier); }
	jni::ref<android::icu::text::BidiClassifier> getCustomClassifier() { return call_method<"getCustomClassifier", jni::ref<android::icu::text::BidiClassifier>>(); }
	jint getCustomizedClass(jint c) { return call_method<"getCustomizedClass", jint>(c); }
	jni::ref<android::icu::text::Bidi> setLine(jint start, jint limit) { return call_method<"setLine", jni::ref<android::icu::text::Bidi>>(start, limit); }
	jbyte getLevelAt(jint charIndex) { return call_method<"getLevelAt", jbyte>(charIndex); }
	jni::ref<jni::array<jbyte>> getLevels() { return call_method<"getLevels", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<android::icu::text::BidiRun> getLogicalRun(jint logicalPosition) { return call_method<"getLogicalRun", jni::ref<android::icu::text::BidiRun>>(logicalPosition); }
	jint countRuns() { return call_method<"countRuns", jint>(); }
	jni::ref<android::icu::text::BidiRun> getVisualRun(jint runIndex) { return call_method<"getVisualRun", jni::ref<android::icu::text::BidiRun>>(runIndex); }
	jint getVisualIndex(jint logicalIndex) { return call_method<"getVisualIndex", jint>(logicalIndex); }
	jint getLogicalIndex(jint visualIndex) { return call_method<"getLogicalIndex", jint>(visualIndex); }
	jni::ref<jni::array<jint>> getLogicalMap() { return call_method<"getLogicalMap", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<jint>> getVisualMap() { return call_method<"getVisualMap", jni::ref<jni::array<jint>>>(); }
	static jni::ref<jni::array<jint>> reorderLogical(jni::ref<jni::array<jbyte>> levels) { return call_static_method<"reorderLogical", jni::ref<jni::array<jint>>>(levels); }
	static jni::ref<jni::array<jint>> reorderVisual(jni::ref<jni::array<jbyte>> levels) { return call_static_method<"reorderVisual", jni::ref<jni::array<jint>>>(levels); }
	static jni::ref<jni::array<jint>> invertMap(jni::ref<jni::array<jint>> srcMap) { return call_static_method<"invertMap", jni::ref<jni::array<jint>>>(srcMap); }
	jni::ref<android::icu::text::Bidi> createLineBidi(jint lineStart, jint lineLimit) { return call_method<"createLineBidi", jni::ref<android::icu::text::Bidi>>(lineStart, lineLimit); }
	jboolean isMixed() { return call_method<"isMixed", jboolean>(); }
	jboolean isLeftToRight() { return call_method<"isLeftToRight", jboolean>(); }
	jboolean isRightToLeft() { return call_method<"isRightToLeft", jboolean>(); }
	jboolean baseIsLeftToRight() { return call_method<"baseIsLeftToRight", jboolean>(); }
	jint getBaseLevel() { return call_method<"getBaseLevel", jint>(); }
	jint getRunCount() { return call_method<"getRunCount", jint>(); }
	jint getRunLevel(jint run) { return call_method<"getRunLevel", jint>(run); }
	jint getRunStart(jint run) { return call_method<"getRunStart", jint>(run); }
	jint getRunLimit(jint run) { return call_method<"getRunLimit", jint>(run); }
	static jboolean requiresBidi(jni::ref<jni::array<jchar>> text, jint start, jint limit) { return call_static_method<"requiresBidi", jboolean>(text, start, limit); }
	static void reorderVisually(jni::ref<jni::array<jbyte>> levels, jint levelStart, jni::ref<jni::array<java::lang::Object>> objects, jint objectStart, jint count) { return call_static_method<"reorderVisually", void>(levels, levelStart, objects, objectStart, count); }
	jni::ref<java::lang::String> writeReordered(jint options) { return call_method<"writeReordered", jni::ref<java::lang::String>>(options); }
	static jni::ref<java::lang::String> writeReverse(jni::ref<java::lang::String> src, jint options) { return call_static_method<"writeReverse", jni::ref<java::lang::String>>(src, options); }

protected:

	Bidi(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BIDI
