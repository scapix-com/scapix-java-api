// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELEPHONY_TELEPHONYMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_TELEPHONYMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telephony { class TelephonyManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telephony::TelephonyManager>
{
	static constexpr fixed_string class_name = "android/telephony/TelephonyManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_TELEPHONYMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELEPHONY_TELEPHONYMANAGER)
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_TELEPHONYMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/telecom/PhoneAccountHandle.h>
#include <scapix/java_api/android/telephony/CellLocation.h>
#include <scapix/java_api/android/telephony/IccOpenLogicalChannelResponse.h>
#include <scapix/java_api/android/telephony/NetworkScan.h>
#include <scapix/java_api/android/telephony/NetworkScanRequest.h>
#include <scapix/java_api/android/telephony/PhoneStateListener.h>
#include <scapix/java_api/android/telephony/ServiceState.h>
#include <scapix/java_api/android/telephony/SignalStrength.h>
#include <scapix/java_api/android/telephony/TelephonyManager_CellInfoCallback.h>
#include <scapix/java_api/android/telephony/TelephonyManager_UssdResponseCallback.h>
#include <scapix/java_api/android/telephony/TelephonyScanManager_NetworkScanCallback.h>
#include <scapix/java_api/android/telephony/VisualVoicemailSmsFilterSettings.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telephony::TelephonyManager : public jni::object_base<"android/telephony/TelephonyManager",
	java::lang::Object>
{
public:

	using UssdResponseCallback = TelephonyManager_UssdResponseCallback;
	using CellInfoCallback = TelephonyManager_CellInfoCallback;

	static jni::ref<java::lang::String> ACTION_CARRIER_MESSAGING_CLIENT_SERVICE() { return get_static_field<"ACTION_CARRIER_MESSAGING_CLIENT_SERVICE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_CONFIGURE_VOICEMAIL() { return get_static_field<"ACTION_CONFIGURE_VOICEMAIL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_NETWORK_COUNTRY_CHANGED() { return get_static_field<"ACTION_NETWORK_COUNTRY_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_PHONE_STATE_CHANGED() { return get_static_field<"ACTION_PHONE_STATE_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_RESPOND_VIA_MESSAGE() { return get_static_field<"ACTION_RESPOND_VIA_MESSAGE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SECRET_CODE() { return get_static_field<"ACTION_SECRET_CODE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SHOW_VOICEMAIL_NOTIFICATION() { return get_static_field<"ACTION_SHOW_VOICEMAIL_NOTIFICATION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED() { return get_static_field<"ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED() { return get_static_field<"ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED", jni::ref<java::lang::String>>(); }
	static jint APPTYPE_CSIM() { return get_static_field<"APPTYPE_CSIM", jint>(); }
	static jint APPTYPE_ISIM() { return get_static_field<"APPTYPE_ISIM", jint>(); }
	static jint APPTYPE_RUIM() { return get_static_field<"APPTYPE_RUIM", jint>(); }
	static jint APPTYPE_SIM() { return get_static_field<"APPTYPE_SIM", jint>(); }
	static jint APPTYPE_USIM() { return get_static_field<"APPTYPE_USIM", jint>(); }
	static jint AUTHTYPE_EAP_AKA() { return get_static_field<"AUTHTYPE_EAP_AKA", jint>(); }
	static jint AUTHTYPE_EAP_SIM() { return get_static_field<"AUTHTYPE_EAP_SIM", jint>(); }
	static jint CALL_STATE_IDLE() { return get_static_field<"CALL_STATE_IDLE", jint>(); }
	static jint CALL_STATE_OFFHOOK() { return get_static_field<"CALL_STATE_OFFHOOK", jint>(); }
	static jint CALL_STATE_RINGING() { return get_static_field<"CALL_STATE_RINGING", jint>(); }
	static jint CDMA_ROAMING_MODE_AFFILIATED() { return get_static_field<"CDMA_ROAMING_MODE_AFFILIATED", jint>(); }
	static jint CDMA_ROAMING_MODE_ANY() { return get_static_field<"CDMA_ROAMING_MODE_ANY", jint>(); }
	static jint CDMA_ROAMING_MODE_HOME() { return get_static_field<"CDMA_ROAMING_MODE_HOME", jint>(); }
	static jint CDMA_ROAMING_MODE_RADIO_DEFAULT() { return get_static_field<"CDMA_ROAMING_MODE_RADIO_DEFAULT", jint>(); }
	static jint DATA_ACTIVITY_DORMANT() { return get_static_field<"DATA_ACTIVITY_DORMANT", jint>(); }
	static jint DATA_ACTIVITY_IN() { return get_static_field<"DATA_ACTIVITY_IN", jint>(); }
	static jint DATA_ACTIVITY_INOUT() { return get_static_field<"DATA_ACTIVITY_INOUT", jint>(); }
	static jint DATA_ACTIVITY_NONE() { return get_static_field<"DATA_ACTIVITY_NONE", jint>(); }
	static jint DATA_ACTIVITY_OUT() { return get_static_field<"DATA_ACTIVITY_OUT", jint>(); }
	static jint DATA_CONNECTED() { return get_static_field<"DATA_CONNECTED", jint>(); }
	static jint DATA_CONNECTING() { return get_static_field<"DATA_CONNECTING", jint>(); }
	static jint DATA_DISCONNECTED() { return get_static_field<"DATA_DISCONNECTED", jint>(); }
	static jint DATA_SUSPENDED() { return get_static_field<"DATA_SUSPENDED", jint>(); }
	static jint DATA_UNKNOWN() { return get_static_field<"DATA_UNKNOWN", jint>(); }
	static jni::ref<java::lang::String> EXTRA_CALL_VOICEMAIL_INTENT() { return get_static_field<"EXTRA_CALL_VOICEMAIL_INTENT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_CARRIER_ID() { return get_static_field<"EXTRA_CARRIER_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_CARRIER_NAME() { return get_static_field<"EXTRA_CARRIER_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_HIDE_PUBLIC_SETTINGS() { return get_static_field<"EXTRA_HIDE_PUBLIC_SETTINGS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_INCOMING_NUMBER() { return get_static_field<"EXTRA_INCOMING_NUMBER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_IS_REFRESH() { return get_static_field<"EXTRA_IS_REFRESH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT() { return get_static_field<"EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_NETWORK_COUNTRY() { return get_static_field<"EXTRA_NETWORK_COUNTRY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_NOTIFICATION_COUNT() { return get_static_field<"EXTRA_NOTIFICATION_COUNT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PHONE_ACCOUNT_HANDLE() { return get_static_field<"EXTRA_PHONE_ACCOUNT_HANDLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SPECIFIC_CARRIER_ID() { return get_static_field<"EXTRA_SPECIFIC_CARRIER_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SPECIFIC_CARRIER_NAME() { return get_static_field<"EXTRA_SPECIFIC_CARRIER_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_STATE() { return get_static_field<"EXTRA_STATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_STATE_IDLE() { return get_static_field<"EXTRA_STATE_IDLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_STATE_OFFHOOK() { return get_static_field<"EXTRA_STATE_OFFHOOK", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_STATE_RINGING() { return get_static_field<"EXTRA_STATE_RINGING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SUBSCRIPTION_ID() { return get_static_field<"EXTRA_SUBSCRIPTION_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_VOICEMAIL_NUMBER() { return get_static_field<"EXTRA_VOICEMAIL_NUMBER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> METADATA_HIDE_VOICEMAIL_SETTINGS_MENU() { return get_static_field<"METADATA_HIDE_VOICEMAIL_SETTINGS_MENU", jni::ref<java::lang::String>>(); }
	static jint MULTISIM_ALLOWED() { return get_static_field<"MULTISIM_ALLOWED", jint>(); }
	static jint MULTISIM_NOT_SUPPORTED_BY_CARRIER() { return get_static_field<"MULTISIM_NOT_SUPPORTED_BY_CARRIER", jint>(); }
	static jint MULTISIM_NOT_SUPPORTED_BY_HARDWARE() { return get_static_field<"MULTISIM_NOT_SUPPORTED_BY_HARDWARE", jint>(); }
	static jint NETWORK_TYPE_1xRTT() { return get_static_field<"NETWORK_TYPE_1xRTT", jint>(); }
	static jint NETWORK_TYPE_CDMA() { return get_static_field<"NETWORK_TYPE_CDMA", jint>(); }
	static jint NETWORK_TYPE_EDGE() { return get_static_field<"NETWORK_TYPE_EDGE", jint>(); }
	static jint NETWORK_TYPE_EHRPD() { return get_static_field<"NETWORK_TYPE_EHRPD", jint>(); }
	static jint NETWORK_TYPE_EVDO_0() { return get_static_field<"NETWORK_TYPE_EVDO_0", jint>(); }
	static jint NETWORK_TYPE_EVDO_A() { return get_static_field<"NETWORK_TYPE_EVDO_A", jint>(); }
	static jint NETWORK_TYPE_EVDO_B() { return get_static_field<"NETWORK_TYPE_EVDO_B", jint>(); }
	static jint NETWORK_TYPE_GPRS() { return get_static_field<"NETWORK_TYPE_GPRS", jint>(); }
	static jint NETWORK_TYPE_GSM() { return get_static_field<"NETWORK_TYPE_GSM", jint>(); }
	static jint NETWORK_TYPE_HSDPA() { return get_static_field<"NETWORK_TYPE_HSDPA", jint>(); }
	static jint NETWORK_TYPE_HSPA() { return get_static_field<"NETWORK_TYPE_HSPA", jint>(); }
	static jint NETWORK_TYPE_HSPAP() { return get_static_field<"NETWORK_TYPE_HSPAP", jint>(); }
	static jint NETWORK_TYPE_HSUPA() { return get_static_field<"NETWORK_TYPE_HSUPA", jint>(); }
	static jint NETWORK_TYPE_IDEN() { return get_static_field<"NETWORK_TYPE_IDEN", jint>(); }
	static jint NETWORK_TYPE_IWLAN() { return get_static_field<"NETWORK_TYPE_IWLAN", jint>(); }
	static jint NETWORK_TYPE_LTE() { return get_static_field<"NETWORK_TYPE_LTE", jint>(); }
	static jint NETWORK_TYPE_NR() { return get_static_field<"NETWORK_TYPE_NR", jint>(); }
	static jint NETWORK_TYPE_TD_SCDMA() { return get_static_field<"NETWORK_TYPE_TD_SCDMA", jint>(); }
	static jint NETWORK_TYPE_UMTS() { return get_static_field<"NETWORK_TYPE_UMTS", jint>(); }
	static jint NETWORK_TYPE_UNKNOWN() { return get_static_field<"NETWORK_TYPE_UNKNOWN", jint>(); }
	static jint PHONE_TYPE_CDMA() { return get_static_field<"PHONE_TYPE_CDMA", jint>(); }
	static jint PHONE_TYPE_GSM() { return get_static_field<"PHONE_TYPE_GSM", jint>(); }
	static jint PHONE_TYPE_NONE() { return get_static_field<"PHONE_TYPE_NONE", jint>(); }
	static jint PHONE_TYPE_SIP() { return get_static_field<"PHONE_TYPE_SIP", jint>(); }
	static jint SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION() { return get_static_field<"SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION", jint>(); }
	static jint SET_OPPORTUNISTIC_SUB_SUCCESS() { return get_static_field<"SET_OPPORTUNISTIC_SUB_SUCCESS", jint>(); }
	static jint SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED() { return get_static_field<"SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED", jint>(); }
	static jint SIM_STATE_ABSENT() { return get_static_field<"SIM_STATE_ABSENT", jint>(); }
	static jint SIM_STATE_CARD_IO_ERROR() { return get_static_field<"SIM_STATE_CARD_IO_ERROR", jint>(); }
	static jint SIM_STATE_CARD_RESTRICTED() { return get_static_field<"SIM_STATE_CARD_RESTRICTED", jint>(); }
	static jint SIM_STATE_NETWORK_LOCKED() { return get_static_field<"SIM_STATE_NETWORK_LOCKED", jint>(); }
	static jint SIM_STATE_NOT_READY() { return get_static_field<"SIM_STATE_NOT_READY", jint>(); }
	static jint SIM_STATE_PERM_DISABLED() { return get_static_field<"SIM_STATE_PERM_DISABLED", jint>(); }
	static jint SIM_STATE_PIN_REQUIRED() { return get_static_field<"SIM_STATE_PIN_REQUIRED", jint>(); }
	static jint SIM_STATE_PUK_REQUIRED() { return get_static_field<"SIM_STATE_PUK_REQUIRED", jint>(); }
	static jint SIM_STATE_READY() { return get_static_field<"SIM_STATE_READY", jint>(); }
	static jint SIM_STATE_UNKNOWN() { return get_static_field<"SIM_STATE_UNKNOWN", jint>(); }
	static jint UNINITIALIZED_CARD_ID() { return get_static_field<"UNINITIALIZED_CARD_ID", jint>(); }
	static jint UNKNOWN_CARRIER_ID() { return get_static_field<"UNKNOWN_CARRIER_ID", jint>(); }
	static jint UNSUPPORTED_CARD_ID() { return get_static_field<"UNSUPPORTED_CARD_ID", jint>(); }
	static jint UPDATE_AVAILABLE_NETWORKS_ABORTED() { return get_static_field<"UPDATE_AVAILABLE_NETWORKS_ABORTED", jint>(); }
	static jint UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS() { return get_static_field<"UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS", jint>(); }
	static jint UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE() { return get_static_field<"UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE", jint>(); }
	static jint UPDATE_AVAILABLE_NETWORKS_SUCCESS() { return get_static_field<"UPDATE_AVAILABLE_NETWORKS_SUCCESS", jint>(); }
	static jint UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE() { return get_static_field<"UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE", jint>(); }
	static jint USSD_ERROR_SERVICE_UNAVAIL() { return get_static_field<"USSD_ERROR_SERVICE_UNAVAIL", jint>(); }
	static jint USSD_RETURN_FAILURE() { return get_static_field<"USSD_RETURN_FAILURE", jint>(); }
	static jni::ref<java::lang::String> VVM_TYPE_CVVM() { return get_static_field<"VVM_TYPE_CVVM", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> VVM_TYPE_OMTP() { return get_static_field<"VVM_TYPE_OMTP", jni::ref<java::lang::String>>(); }

	jint getPhoneCount() { return call_method<"getPhoneCount", jint>(); }
	jni::ref<android::telephony::TelephonyManager> createForSubscriptionId(jint subId) { return call_method<"createForSubscriptionId", jni::ref<android::telephony::TelephonyManager>>(subId); }
	jni::ref<android::telephony::TelephonyManager> createForPhoneAccountHandle(jni::ref<android::telecom::PhoneAccountHandle> phoneAccountHandle) { return call_method<"createForPhoneAccountHandle", jni::ref<android::telephony::TelephonyManager>>(phoneAccountHandle); }
	jni::ref<java::lang::String> getDeviceSoftwareVersion() { return call_method<"getDeviceSoftwareVersion", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDeviceId() { return call_method<"getDeviceId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDeviceId(jint slotIndex) { return call_method<"getDeviceId", jni::ref<java::lang::String>>(slotIndex); }
	jni::ref<java::lang::String> getImei() { return call_method<"getImei", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getImei(jint slotIndex) { return call_method<"getImei", jni::ref<java::lang::String>>(slotIndex); }
	jni::ref<java::lang::String> getTypeAllocationCode() { return call_method<"getTypeAllocationCode", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getTypeAllocationCode(jint slotIndex) { return call_method<"getTypeAllocationCode", jni::ref<java::lang::String>>(slotIndex); }
	jni::ref<java::lang::String> getMeid() { return call_method<"getMeid", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getMeid(jint slotIndex) { return call_method<"getMeid", jni::ref<java::lang::String>>(slotIndex); }
	jni::ref<java::lang::String> getManufacturerCode() { return call_method<"getManufacturerCode", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getManufacturerCode(jint slotIndex) { return call_method<"getManufacturerCode", jni::ref<java::lang::String>>(slotIndex); }
	jni::ref<java::lang::String> getNai() { return call_method<"getNai", jni::ref<java::lang::String>>(); }
	jni::ref<android::telephony::CellLocation> getCellLocation() { return call_method<"getCellLocation", jni::ref<android::telephony::CellLocation>>(); }
	jint getPhoneType() { return call_method<"getPhoneType", jint>(); }
	jni::ref<java::lang::String> getNetworkOperatorName() { return call_method<"getNetworkOperatorName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getNetworkOperator() { return call_method<"getNetworkOperator", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getNetworkSpecifier() { return call_method<"getNetworkSpecifier", jni::ref<java::lang::String>>(); }
	jni::ref<android::os::PersistableBundle> getCarrierConfig() { return call_method<"getCarrierConfig", jni::ref<android::os::PersistableBundle>>(); }
	jboolean isNetworkRoaming() { return call_method<"isNetworkRoaming", jboolean>(); }
	jni::ref<java::lang::String> getNetworkCountryIso() { return call_method<"getNetworkCountryIso", jni::ref<java::lang::String>>(); }
	jint getNetworkType() { return call_method<"getNetworkType", jint>(); }
	jint getDataNetworkType() { return call_method<"getDataNetworkType", jint>(); }
	jint getVoiceNetworkType() { return call_method<"getVoiceNetworkType", jint>(); }
	jboolean hasIccCard() { return call_method<"hasIccCard", jboolean>(); }
	jint getSimState() { return call_method<"getSimState", jint>(); }
	jint getSimState(jint slotIndex) { return call_method<"getSimState", jint>(slotIndex); }
	jni::ref<java::lang::String> getSimOperator() { return call_method<"getSimOperator", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSimOperatorName() { return call_method<"getSimOperatorName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSimCountryIso() { return call_method<"getSimCountryIso", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSimSerialNumber() { return call_method<"getSimSerialNumber", jni::ref<java::lang::String>>(); }
	jint getCardIdForDefaultEuicc() { return call_method<"getCardIdForDefaultEuicc", jint>(); }
	jni::ref<java::util::List> getUiccCardsInfo() { return call_method<"getUiccCardsInfo", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> getSubscriberId() { return call_method<"getSubscriberId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getGroupIdLevel1() { return call_method<"getGroupIdLevel1", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getLine1Number() { return call_method<"getLine1Number", jni::ref<java::lang::String>>(); }
	jboolean setLine1NumberForDisplay(jni::ref<java::lang::String> alphaTag, jni::ref<java::lang::String> number) { return call_method<"setLine1NumberForDisplay", jboolean>(alphaTag, number); }
	jni::ref<java::lang::String> getVoiceMailNumber() { return call_method<"getVoiceMailNumber", jni::ref<java::lang::String>>(); }
	jboolean setVoiceMailNumber(jni::ref<java::lang::String> alphaTag, jni::ref<java::lang::String> number) { return call_method<"setVoiceMailNumber", jboolean>(alphaTag, number); }
	jni::ref<java::lang::String> getVisualVoicemailPackageName() { return call_method<"getVisualVoicemailPackageName", jni::ref<java::lang::String>>(); }
	void setVisualVoicemailSmsFilterSettings(jni::ref<android::telephony::VisualVoicemailSmsFilterSettings> settings) { return call_method<"setVisualVoicemailSmsFilterSettings", void>(settings); }
	void sendVisualVoicemailSms(jni::ref<java::lang::String> number, jint port, jni::ref<java::lang::String> text, jni::ref<android::app::PendingIntent> sentIntent) { return call_method<"sendVisualVoicemailSms", void>(number, port, text, sentIntent); }
	jni::ref<java::lang::String> getVoiceMailAlphaTag() { return call_method<"getVoiceMailAlphaTag", jni::ref<java::lang::String>>(); }
	void sendDialerSpecialCode(jni::ref<java::lang::String> inputCode) { return call_method<"sendDialerSpecialCode", void>(inputCode); }
	jint getCallState() { return call_method<"getCallState", jint>(); }
	jint getDataActivity() { return call_method<"getDataActivity", jint>(); }
	jint getDataState() { return call_method<"getDataState", jint>(); }
	void listen(jni::ref<android::telephony::PhoneStateListener> listener, jint events) { return call_method<"listen", void>(listener, events); }
	jboolean isVoiceCapable() { return call_method<"isVoiceCapable", jboolean>(); }
	jboolean isSmsCapable() { return call_method<"isSmsCapable", jboolean>(); }
	jni::ref<java::util::List> getAllCellInfo() { return call_method<"getAllCellInfo", jni::ref<java::util::List>>(); }
	void requestCellInfoUpdate(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::telephony::TelephonyManager_CellInfoCallback> callback) { return call_method<"requestCellInfoUpdate", void>(executor, callback); }
	jni::ref<java::lang::String> getMmsUserAgent() { return call_method<"getMmsUserAgent", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getMmsUAProfUrl() { return call_method<"getMmsUAProfUrl", jni::ref<java::lang::String>>(); }
	jni::ref<android::telephony::IccOpenLogicalChannelResponse> iccOpenLogicalChannel(jni::ref<java::lang::String> AID) { return call_method<"iccOpenLogicalChannel", jni::ref<android::telephony::IccOpenLogicalChannelResponse>>(AID); }
	jni::ref<android::telephony::IccOpenLogicalChannelResponse> iccOpenLogicalChannel(jni::ref<java::lang::String> AID, jint p2) { return call_method<"iccOpenLogicalChannel", jni::ref<android::telephony::IccOpenLogicalChannelResponse>>(AID, p2); }
	jboolean iccCloseLogicalChannel(jint channel) { return call_method<"iccCloseLogicalChannel", jboolean>(channel); }
	jni::ref<java::lang::String> iccTransmitApduLogicalChannel(jint channel, jint cla, jint instruction, jint p1, jint p2, jint p3, jni::ref<java::lang::String> data) { return call_method<"iccTransmitApduLogicalChannel", jni::ref<java::lang::String>>(channel, cla, instruction, p1, p2, p3, data); }
	jni::ref<java::lang::String> iccTransmitApduBasicChannel(jint cla, jint instruction, jint p1, jint p2, jint p3, jni::ref<java::lang::String> data) { return call_method<"iccTransmitApduBasicChannel", jni::ref<java::lang::String>>(cla, instruction, p1, p2, p3, data); }
	jni::ref<jni::array<jbyte>> iccExchangeSimIO(jint fileID, jint command, jint p1, jint p2, jint p3, jni::ref<java::lang::String> filePath) { return call_method<"iccExchangeSimIO", jni::ref<jni::array<jbyte>>>(fileID, command, p1, p2, p3, filePath); }
	jni::ref<java::lang::String> sendEnvelopeWithStatus(jni::ref<java::lang::String> content) { return call_method<"sendEnvelopeWithStatus", jni::ref<java::lang::String>>(content); }
	jni::ref<java::lang::String> getIccAuthentication(jint appType, jint authType, jni::ref<java::lang::String> data) { return call_method<"getIccAuthentication", jni::ref<java::lang::String>>(appType, authType, data); }
	jni::ref<jni::array<java::lang::String>> getForbiddenPlmns() { return call_method<"getForbiddenPlmns", jni::ref<jni::array<java::lang::String>>>(); }
	void setNetworkSelectionModeAutomatic() { return call_method<"setNetworkSelectionModeAutomatic", void>(); }
	jni::ref<android::telephony::NetworkScan> requestNetworkScan(jni::ref<android::telephony::NetworkScanRequest> request, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::telephony::TelephonyScanManager_NetworkScanCallback> callback) { return call_method<"requestNetworkScan", jni::ref<android::telephony::NetworkScan>>(request, executor, callback); }
	jboolean setNetworkSelectionModeManual(jni::ref<java::lang::String> operatorNumeric, jboolean persistSelection) { return call_method<"setNetworkSelectionModeManual", jboolean>(operatorNumeric, persistSelection); }
	jboolean setPreferredNetworkTypeToGlobal() { return call_method<"setPreferredNetworkTypeToGlobal", jboolean>(); }
	jboolean hasCarrierPrivileges() { return call_method<"hasCarrierPrivileges", jboolean>(); }
	jboolean setOperatorBrandOverride(jni::ref<java::lang::String> brand) { return call_method<"setOperatorBrandOverride", jboolean>(brand); }
	void sendUssdRequest(jni::ref<java::lang::String> ussdRequest, jni::ref<android::telephony::TelephonyManager_UssdResponseCallback> callback, jni::ref<android::os::Handler> handler) { return call_method<"sendUssdRequest", void>(ussdRequest, callback, handler); }
	jboolean isConcurrentVoiceAndDataSupported() { return call_method<"isConcurrentVoiceAndDataSupported", jboolean>(); }
	void setDataEnabled(jboolean enable) { return call_method<"setDataEnabled", void>(enable); }
	jboolean isDataEnabled() { return call_method<"isDataEnabled", jboolean>(); }
	jboolean isDataRoamingEnabled() { return call_method<"isDataRoamingEnabled", jboolean>(); }
	jboolean canChangeDtmfToneLength() { return call_method<"canChangeDtmfToneLength", jboolean>(); }
	jboolean isWorldPhone() { return call_method<"isWorldPhone", jboolean>(); }
	jboolean isTtyModeSupported() { return call_method<"isTtyModeSupported", jboolean>(); }
	jboolean isRttSupported() { return call_method<"isRttSupported", jboolean>(); }
	jboolean isHearingAidCompatibilitySupported() { return call_method<"isHearingAidCompatibilitySupported", jboolean>(); }
	jni::ref<android::telephony::ServiceState> getServiceState() { return call_method<"getServiceState", jni::ref<android::telephony::ServiceState>>(); }
	jni::ref<android::net::Uri> getVoicemailRingtoneUri(jni::ref<android::telecom::PhoneAccountHandle> accountHandle) { return call_method<"getVoicemailRingtoneUri", jni::ref<android::net::Uri>>(accountHandle); }
	void setVoicemailRingtoneUri(jni::ref<android::telecom::PhoneAccountHandle> phoneAccountHandle, jni::ref<android::net::Uri> uri) { return call_method<"setVoicemailRingtoneUri", void>(phoneAccountHandle, uri); }
	jboolean isVoicemailVibrationEnabled(jni::ref<android::telecom::PhoneAccountHandle> accountHandle) { return call_method<"isVoicemailVibrationEnabled", jboolean>(accountHandle); }
	void setVoicemailVibrationEnabled(jni::ref<android::telecom::PhoneAccountHandle> phoneAccountHandle, jboolean enabled) { return call_method<"setVoicemailVibrationEnabled", void>(phoneAccountHandle, enabled); }
	jint getSimCarrierId() { return call_method<"getSimCarrierId", jint>(); }
	jni::ref<java::lang::CharSequence> getSimCarrierIdName() { return call_method<"getSimCarrierIdName", jni::ref<java::lang::CharSequence>>(); }
	jint getSimSpecificCarrierId() { return call_method<"getSimSpecificCarrierId", jint>(); }
	jni::ref<java::lang::CharSequence> getSimSpecificCarrierIdName() { return call_method<"getSimSpecificCarrierIdName", jni::ref<java::lang::CharSequence>>(); }
	jint getCarrierIdFromSimMccMnc() { return call_method<"getCarrierIdFromSimMccMnc", jint>(); }
	jni::ref<android::telephony::SignalStrength> getSignalStrength() { return call_method<"getSignalStrength", jni::ref<android::telephony::SignalStrength>>(); }
	jni::ref<java::util::Map> getEmergencyNumberList() { return call_method<"getEmergencyNumberList", jni::ref<java::util::Map>>(); }
	jni::ref<java::util::Map> getEmergencyNumberList(jint categories) { return call_method<"getEmergencyNumberList", jni::ref<java::util::Map>>(categories); }
	jboolean isEmergencyNumber(jni::ref<java::lang::String> number) { return call_method<"isEmergencyNumber", jboolean>(number); }
	void setPreferredOpportunisticDataSubscription(jint subId, jboolean needValidation, jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> callback) { return call_method<"setPreferredOpportunisticDataSubscription", void>(subId, needValidation, executor, callback); }
	jint getPreferredOpportunisticDataSubscription() { return call_method<"getPreferredOpportunisticDataSubscription", jint>(); }
	void updateAvailableNetworks(jni::ref<java::util::List> availableNetworks, jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> callback) { return call_method<"updateAvailableNetworks", void>(availableNetworks, executor, callback); }
	jint isMultiSimSupported() { return call_method<"isMultiSimSupported", jint>(); }
	void switchMultiSimConfig(jint numOfSims) { return call_method<"switchMultiSimConfig", void>(numOfSims); }
	jboolean doesSwitchMultiSimConfigTriggerReboot() { return call_method<"doesSwitchMultiSimConfigTriggerReboot", jboolean>(); }

protected:

	TelephonyManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_TELEPHONYMANAGER
