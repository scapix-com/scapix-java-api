// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYREADER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::inspector { class PropertyReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::inspector::PropertyReader>
{
	static constexpr fixed_string class_name = "android/view/inspector/PropertyReader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYREADER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYREADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Color.h>
#include <scapix/java_api/android/view/inspector/PropertyReader_PropertyTypeMismatchException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::inspector::PropertyReader : public jni::object_base<"android/view/inspector/PropertyReader",
	java::lang::Object>
{
public:

	using PropertyTypeMismatchException = PropertyReader_PropertyTypeMismatchException;

	void readBoolean(jint p1, jboolean p2) { return call_method<"readBoolean", void>(p1, p2); }
	void readByte(jint p1, jbyte p2) { return call_method<"readByte", void>(p1, p2); }
	void readChar(jint p1, jchar p2) { return call_method<"readChar", void>(p1, p2); }
	void readDouble(jint p1, jdouble p2) { return call_method<"readDouble", void>(p1, p2); }
	void readFloat(jint p1, jfloat p2) { return call_method<"readFloat", void>(p1, p2); }
	void readInt(jint p1, jint p2) { return call_method<"readInt", void>(p1, p2); }
	void readLong(jint p1, jlong p2) { return call_method<"readLong", void>(p1, p2); }
	void readShort(jint p1, jshort p2) { return call_method<"readShort", void>(p1, p2); }
	void readObject(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"readObject", void>(p1, p2); }
	void readColor(jint p1, jint p2) { return call_method<"readColor", void>(p1, p2); }
	void readColor(jint p1, jlong p2) { return call_method<"readColor", void>(p1, p2); }
	void readColor(jint p1, jni::ref<android::graphics::Color> p2) { return call_method<"readColor", void>(p1, p2); }
	void readGravity(jint p1, jint p2) { return call_method<"readGravity", void>(p1, p2); }
	void readIntEnum(jint p1, jint p2) { return call_method<"readIntEnum", void>(p1, p2); }
	void readIntFlag(jint p1, jint p2) { return call_method<"readIntFlag", void>(p1, p2); }
	void readResourceId(jint p1, jint p2) { return call_method<"readResourceId", void>(p1, p2); }

protected:

	PropertyReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYREADER
