// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class ActivityManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::ActivityManager>
{
	static constexpr fixed_string class_name = "android/app/ActivityManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/Activity.h>
#include <scapix/java_api/android/app/ActivityManager_MemoryInfo.h>
#include <scapix/java_api/android/app/ActivityManager_RunningAppProcessInfo.h>
#include <scapix/java_api/android/app/ActivityManager_TaskDescription.h>
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/pm/ConfigurationInfo.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Debug_MemoryInfo.h>
#include <scapix/java_api/android/util/Size.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/android/app/ActivityManager_RunningTaskInfo.h>
#include <scapix/java_api/android/app/ActivityManager_RunningServiceInfo.h>
#include <scapix/java_api/android/app/ActivityManager_RecentTaskInfo.h>
#include <scapix/java_api/android/app/ActivityManager_ProcessErrorStateInfo.h>
#include <scapix/java_api/android/app/ActivityManager_AppTask.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::ActivityManager : public jni::object_base<"android/app/ActivityManager",
	java::lang::Object>
{
public:

	using TaskDescription = ActivityManager_TaskDescription;
	using RunningTaskInfo = ActivityManager_RunningTaskInfo;
	using RunningServiceInfo = ActivityManager_RunningServiceInfo;
	using RunningAppProcessInfo = ActivityManager_RunningAppProcessInfo;
	using RecentTaskInfo = ActivityManager_RecentTaskInfo;
	using ProcessErrorStateInfo = ActivityManager_ProcessErrorStateInfo;
	using MemoryInfo = ActivityManager_MemoryInfo;
	using AppTask = ActivityManager_AppTask;

	static jni::ref<java::lang::String> ACTION_REPORT_HEAP_LIMIT() { return get_static_field<"ACTION_REPORT_HEAP_LIMIT", jni::ref<java::lang::String>>(); }
	static jint LOCK_TASK_MODE_LOCKED() { return get_static_field<"LOCK_TASK_MODE_LOCKED", jint>(); }
	static jint LOCK_TASK_MODE_NONE() { return get_static_field<"LOCK_TASK_MODE_NONE", jint>(); }
	static jint LOCK_TASK_MODE_PINNED() { return get_static_field<"LOCK_TASK_MODE_PINNED", jint>(); }
	static jni::ref<java::lang::String> META_HOME_ALTERNATE() { return get_static_field<"META_HOME_ALTERNATE", jni::ref<java::lang::String>>(); }
	static jint MOVE_TASK_NO_USER_ACTION() { return get_static_field<"MOVE_TASK_NO_USER_ACTION", jint>(); }
	static jint MOVE_TASK_WITH_HOME() { return get_static_field<"MOVE_TASK_WITH_HOME", jint>(); }
	static jint RECENT_IGNORE_UNAVAILABLE() { return get_static_field<"RECENT_IGNORE_UNAVAILABLE", jint>(); }
	static jint RECENT_WITH_EXCLUDED() { return get_static_field<"RECENT_WITH_EXCLUDED", jint>(); }

	jint getMemoryClass() { return call_method<"getMemoryClass", jint>(); }
	jint getLargeMemoryClass() { return call_method<"getLargeMemoryClass", jint>(); }
	jboolean isLowRamDevice() { return call_method<"isLowRamDevice", jboolean>(); }
	jni::ref<java::util::List> getRecentTasks(jint maxNum, jint flags) { return call_method<"getRecentTasks", jni::ref<java::util::List>>(maxNum, flags); }
	jni::ref<java::util::List> getAppTasks() { return call_method<"getAppTasks", jni::ref<java::util::List>>(); }
	jni::ref<android::util::Size> getAppTaskThumbnailSize() { return call_method<"getAppTaskThumbnailSize", jni::ref<android::util::Size>>(); }
	jint addAppTask(jni::ref<android::app::Activity> activity, jni::ref<android::content::Intent> intent, jni::ref<android::app::ActivityManager_TaskDescription> description, jni::ref<android::graphics::Bitmap> thumbnail) { return call_method<"addAppTask", jint>(activity, intent, description, thumbnail); }
	jni::ref<java::util::List> getRunningTasks(jint maxNum) { return call_method<"getRunningTasks", jni::ref<java::util::List>>(maxNum); }
	void moveTaskToFront(jint taskId, jint flags) { return call_method<"moveTaskToFront", void>(taskId, flags); }
	void moveTaskToFront(jint taskId, jint flags, jni::ref<android::os::Bundle> options) { return call_method<"moveTaskToFront", void>(taskId, flags, options); }
	jboolean isActivityStartAllowedOnDisplay(jni::ref<android::content::Context> context, jint displayId, jni::ref<android::content::Intent> intent) { return call_method<"isActivityStartAllowedOnDisplay", jboolean>(context, displayId, intent); }
	jni::ref<java::util::List> getRunningServices(jint maxNum) { return call_method<"getRunningServices", jni::ref<java::util::List>>(maxNum); }
	jni::ref<android::app::PendingIntent> getRunningServiceControlPanel(jni::ref<android::content::ComponentName> service) { return call_method<"getRunningServiceControlPanel", jni::ref<android::app::PendingIntent>>(service); }
	void getMemoryInfo(jni::ref<android::app::ActivityManager_MemoryInfo> outInfo) { return call_method<"getMemoryInfo", void>(outInfo); }
	jboolean clearApplicationUserData() { return call_method<"clearApplicationUserData", jboolean>(); }
	jni::ref<java::util::List> getProcessesInErrorState() { return call_method<"getProcessesInErrorState", jni::ref<java::util::List>>(); }
	jboolean isBackgroundRestricted() { return call_method<"isBackgroundRestricted", jboolean>(); }
	jni::ref<java::util::List> getRunningAppProcesses() { return call_method<"getRunningAppProcesses", jni::ref<java::util::List>>(); }
	static void getMyMemoryState(jni::ref<android::app::ActivityManager_RunningAppProcessInfo> outState) { return call_static_method<"getMyMemoryState", void>(outState); }
	jni::ref<jni::array<android::os::Debug_MemoryInfo>> getProcessMemoryInfo(jni::ref<jni::array<jint>> pids) { return call_method<"getProcessMemoryInfo", jni::ref<jni::array<android::os::Debug_MemoryInfo>>>(pids); }
	void restartPackage(jni::ref<java::lang::String> packageName) { return call_method<"restartPackage", void>(packageName); }
	void killBackgroundProcesses(jni::ref<java::lang::String> packageName) { return call_method<"killBackgroundProcesses", void>(packageName); }
	jni::ref<android::content::pm::ConfigurationInfo> getDeviceConfigurationInfo() { return call_method<"getDeviceConfigurationInfo", jni::ref<android::content::pm::ConfigurationInfo>>(); }
	jint getLauncherLargeIconDensity() { return call_method<"getLauncherLargeIconDensity", jint>(); }
	jint getLauncherLargeIconSize() { return call_method<"getLauncherLargeIconSize", jint>(); }
	static jboolean isUserAMonkey() { return call_static_method<"isUserAMonkey", jboolean>(); }
	static jboolean isRunningInTestHarness() { return call_static_method<"isRunningInTestHarness", jboolean>(); }
	static jboolean isRunningInUserTestHarness() { return call_static_method<"isRunningInUserTestHarness", jboolean>(); }
	void dumpPackageState(jni::ref<java::io::FileDescriptor> fd, jni::ref<java::lang::String> packageName) { return call_method<"dumpPackageState", void>(fd, packageName); }
	void setWatchHeapLimit(jlong pssSize) { return call_method<"setWatchHeapLimit", void>(pssSize); }
	void clearWatchHeapLimit() { return call_method<"clearWatchHeapLimit", void>(); }
	jboolean isInLockTaskMode() { return call_method<"isInLockTaskMode", jboolean>(); }
	jint getLockTaskModeState() { return call_method<"getLockTaskModeState", jint>(); }
	static void setVrThread(jint tid) { return call_static_method<"setVrThread", void>(tid); }

protected:

	ActivityManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER
