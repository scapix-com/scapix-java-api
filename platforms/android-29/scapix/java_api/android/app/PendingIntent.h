// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_PENDINGINTENT_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_PENDINGINTENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class PendingIntent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::PendingIntent>
{
	static constexpr fixed_string class_name = "android/app/PendingIntent";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_PENDINGINTENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_PENDINGINTENT)
#define SCAPIX_JAVA_API_ANDROID_APP_PENDINGINTENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent_OnFinished.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/app/PendingIntent_CanceledException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::PendingIntent : public jni::object_base<"android/app/PendingIntent",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using OnFinished = PendingIntent_OnFinished;
	using CanceledException = PendingIntent_CanceledException;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint FLAG_CANCEL_CURRENT() { return get_static_field<"FLAG_CANCEL_CURRENT", jint>(); }
	static jint FLAG_IMMUTABLE() { return get_static_field<"FLAG_IMMUTABLE", jint>(); }
	static jint FLAG_NO_CREATE() { return get_static_field<"FLAG_NO_CREATE", jint>(); }
	static jint FLAG_ONE_SHOT() { return get_static_field<"FLAG_ONE_SHOT", jint>(); }
	static jint FLAG_UPDATE_CURRENT() { return get_static_field<"FLAG_UPDATE_CURRENT", jint>(); }

	static jni::ref<android::app::PendingIntent> getActivity(jni::ref<android::content::Context> context, jint requestCode, jni::ref<android::content::Intent> intent, jint flags) { return call_static_method<"getActivity", jni::ref<android::app::PendingIntent>>(context, requestCode, intent, flags); }
	static jni::ref<android::app::PendingIntent> getActivity(jni::ref<android::content::Context> context, jint requestCode, jni::ref<android::content::Intent> intent, jint flags, jni::ref<android::os::Bundle> options) { return call_static_method<"getActivity", jni::ref<android::app::PendingIntent>>(context, requestCode, intent, flags, options); }
	static jni::ref<android::app::PendingIntent> getActivities(jni::ref<android::content::Context> context, jint requestCode, jni::ref<jni::array<android::content::Intent>> intents, jint flags) { return call_static_method<"getActivities", jni::ref<android::app::PendingIntent>>(context, requestCode, intents, flags); }
	static jni::ref<android::app::PendingIntent> getActivities(jni::ref<android::content::Context> context, jint requestCode, jni::ref<jni::array<android::content::Intent>> intents, jint flags, jni::ref<android::os::Bundle> options) { return call_static_method<"getActivities", jni::ref<android::app::PendingIntent>>(context, requestCode, intents, flags, options); }
	static jni::ref<android::app::PendingIntent> getBroadcast(jni::ref<android::content::Context> context, jint requestCode, jni::ref<android::content::Intent> intent, jint flags) { return call_static_method<"getBroadcast", jni::ref<android::app::PendingIntent>>(context, requestCode, intent, flags); }
	static jni::ref<android::app::PendingIntent> getService(jni::ref<android::content::Context> context, jint requestCode, jni::ref<android::content::Intent> intent, jint flags) { return call_static_method<"getService", jni::ref<android::app::PendingIntent>>(context, requestCode, intent, flags); }
	static jni::ref<android::app::PendingIntent> getForegroundService(jni::ref<android::content::Context> context, jint requestCode, jni::ref<android::content::Intent> intent, jint flags) { return call_static_method<"getForegroundService", jni::ref<android::app::PendingIntent>>(context, requestCode, intent, flags); }
	jni::ref<android::content::IntentSender> getIntentSender() { return call_method<"getIntentSender", jni::ref<android::content::IntentSender>>(); }
	void cancel() { return call_method<"cancel", void>(); }
	void send() { return call_method<"send", void>(); }
	void send(jint code) { return call_method<"send", void>(code); }
	void send(jni::ref<android::content::Context> context, jint code, jni::ref<android::content::Intent> intent) { return call_method<"send", void>(context, code, intent); }
	void send(jint code, jni::ref<android::app::PendingIntent_OnFinished> onFinished, jni::ref<android::os::Handler> handler) { return call_method<"send", void>(code, onFinished, handler); }
	void send(jni::ref<android::content::Context> context, jint code, jni::ref<android::content::Intent> intent, jni::ref<android::app::PendingIntent_OnFinished> onFinished, jni::ref<android::os::Handler> handler) { return call_method<"send", void>(context, code, intent, onFinished, handler); }
	void send(jni::ref<android::content::Context> context, jint code, jni::ref<android::content::Intent> intent, jni::ref<android::app::PendingIntent_OnFinished> onFinished, jni::ref<android::os::Handler> handler, jni::ref<java::lang::String> requiredPermission) { return call_method<"send", void>(context, code, intent, onFinished, handler, requiredPermission); }
	void send(jni::ref<android::content::Context> context, jint code, jni::ref<android::content::Intent> intent, jni::ref<android::app::PendingIntent_OnFinished> onFinished, jni::ref<android::os::Handler> handler, jni::ref<java::lang::String> requiredPermission, jni::ref<android::os::Bundle> options) { return call_method<"send", void>(context, code, intent, onFinished, handler, requiredPermission, options); }
	jni::ref<java::lang::String> getTargetPackage() { return call_method<"getTargetPackage", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getCreatorPackage() { return call_method<"getCreatorPackage", jni::ref<java::lang::String>>(); }
	jint getCreatorUid() { return call_method<"getCreatorUid", jint>(); }
	jni::ref<android::os::UserHandle> getCreatorUserHandle() { return call_method<"getCreatorUserHandle", jni::ref<android::os::UserHandle>>(); }
	jboolean equals(jni::ref<java::lang::Object> otherObj) { return call_method<"equals", jboolean>(otherObj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	static void writePendingIntentOrNullToParcel(jni::ref<android::app::PendingIntent> sender, jni::ref<android::os::Parcel> out) { return call_static_method<"writePendingIntentOrNullToParcel", void>(sender, out); }
	static jni::ref<android::app::PendingIntent> readPendingIntentOrNullFromParcel(jni::ref<android::os::Parcel> in) { return call_static_method<"readPendingIntentOrNullFromParcel", jni::ref<android::app::PendingIntent>>(in); }

protected:

	PendingIntent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_PENDINGINTENT
