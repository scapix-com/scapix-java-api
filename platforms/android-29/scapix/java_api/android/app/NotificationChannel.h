// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_NOTIFICATIONCHANNEL_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_NOTIFICATIONCHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class NotificationChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::NotificationChannel>
{
	static constexpr fixed_string class_name = "android/app/NotificationChannel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_NOTIFICATIONCHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_NOTIFICATIONCHANNEL)
#define SCAPIX_JAVA_API_ANDROID_APP_NOTIFICATIONCHANNEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::NotificationChannel : public jni::object_base<"android/app/NotificationChannel",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<java::lang::String> DEFAULT_CHANNEL_ID() { return get_static_field<"DEFAULT_CHANNEL_ID", jni::ref<java::lang::String>>(); }

	static jni::ref<android::app::NotificationChannel> new_object(jni::ref<java::lang::String> id, jni::ref<java::lang::CharSequence> name, jint importance) { return base_::new_object(id, name, importance); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	void setName(jni::ref<java::lang::CharSequence> name) { return call_method<"setName", void>(name); }
	void setDescription(jni::ref<java::lang::String> description) { return call_method<"setDescription", void>(description); }
	void setGroup(jni::ref<java::lang::String> groupId) { return call_method<"setGroup", void>(groupId); }
	void setShowBadge(jboolean showBadge) { return call_method<"setShowBadge", void>(showBadge); }
	void setSound(jni::ref<android::net::Uri> sound, jni::ref<android::media::AudioAttributes> audioAttributes) { return call_method<"setSound", void>(sound, audioAttributes); }
	void enableLights(jboolean lights) { return call_method<"enableLights", void>(lights); }
	void setLightColor(jint argb) { return call_method<"setLightColor", void>(argb); }
	void enableVibration(jboolean vibration) { return call_method<"enableVibration", void>(vibration); }
	void setVibrationPattern(jni::ref<jni::array<jlong>> vibrationPattern) { return call_method<"setVibrationPattern", void>(vibrationPattern); }
	void setImportance(jint importance) { return call_method<"setImportance", void>(importance); }
	void setBypassDnd(jboolean bypassDnd) { return call_method<"setBypassDnd", void>(bypassDnd); }
	void setLockscreenVisibility(jint lockscreenVisibility) { return call_method<"setLockscreenVisibility", void>(lockscreenVisibility); }
	void setAllowBubbles(jboolean allowBubbles) { return call_method<"setAllowBubbles", void>(allowBubbles); }
	jni::ref<java::lang::String> getId() { return call_method<"getId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::CharSequence> getName() { return call_method<"getName", jni::ref<java::lang::CharSequence>>(); }
	jni::ref<java::lang::String> getDescription() { return call_method<"getDescription", jni::ref<java::lang::String>>(); }
	jint getImportance() { return call_method<"getImportance", jint>(); }
	jboolean canBypassDnd() { return call_method<"canBypassDnd", jboolean>(); }
	jni::ref<android::net::Uri> getSound() { return call_method<"getSound", jni::ref<android::net::Uri>>(); }
	jni::ref<android::media::AudioAttributes> getAudioAttributes() { return call_method<"getAudioAttributes", jni::ref<android::media::AudioAttributes>>(); }
	jboolean shouldShowLights() { return call_method<"shouldShowLights", jboolean>(); }
	jint getLightColor() { return call_method<"getLightColor", jint>(); }
	jboolean shouldVibrate() { return call_method<"shouldVibrate", jboolean>(); }
	jni::ref<jni::array<jlong>> getVibrationPattern() { return call_method<"getVibrationPattern", jni::ref<jni::array<jlong>>>(); }
	jint getLockscreenVisibility() { return call_method<"getLockscreenVisibility", jint>(); }
	jboolean canShowBadge() { return call_method<"canShowBadge", jboolean>(); }
	jni::ref<java::lang::String> getGroup() { return call_method<"getGroup", jni::ref<java::lang::String>>(); }
	jboolean canBubble() { return call_method<"canBubble", jboolean>(); }
	jboolean hasUserSetImportance() { return call_method<"hasUserSetImportance", jboolean>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	NotificationChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_NOTIFICATIONCHANNEL
