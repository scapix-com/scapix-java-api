// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_PM_PACKAGEINSTALLER_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_PACKAGEINSTALLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content::pm { class PackageInstaller; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::pm::PackageInstaller>
{
	static constexpr fixed_string class_name = "android/content/pm/PackageInstaller";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_PACKAGEINSTALLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_PM_PACKAGEINSTALLER)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_PACKAGEINSTALLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/content/pm/PackageInstaller_Session.h>
#include <scapix/java_api/android/content/pm/PackageInstaller_SessionCallback.h>
#include <scapix/java_api/android/content/pm/PackageInstaller_SessionInfo.h>
#include <scapix/java_api/android/content/pm/PackageInstaller_SessionParams.h>
#include <scapix/java_api/android/content/pm/VersionedPackage.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::pm::PackageInstaller : public jni::object_base<"android/content/pm/PackageInstaller",
	java::lang::Object>
{
public:

	using SessionParams = PackageInstaller_SessionParams;
	using SessionInfo = PackageInstaller_SessionInfo;
	using SessionCallback = PackageInstaller_SessionCallback;
	using Session = PackageInstaller_Session;

	static jni::ref<java::lang::String> ACTION_SESSION_COMMITTED() { return get_static_field<"ACTION_SESSION_COMMITTED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SESSION_DETAILS() { return get_static_field<"ACTION_SESSION_DETAILS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SESSION_UPDATED() { return get_static_field<"ACTION_SESSION_UPDATED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_OTHER_PACKAGE_NAME() { return get_static_field<"EXTRA_OTHER_PACKAGE_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PACKAGE_NAME() { return get_static_field<"EXTRA_PACKAGE_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SESSION() { return get_static_field<"EXTRA_SESSION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SESSION_ID() { return get_static_field<"EXTRA_SESSION_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_STATUS() { return get_static_field<"EXTRA_STATUS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_STATUS_MESSAGE() { return get_static_field<"EXTRA_STATUS_MESSAGE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_STORAGE_PATH() { return get_static_field<"EXTRA_STORAGE_PATH", jni::ref<java::lang::String>>(); }
	static jint STATUS_FAILURE() { return get_static_field<"STATUS_FAILURE", jint>(); }
	static jint STATUS_FAILURE_ABORTED() { return get_static_field<"STATUS_FAILURE_ABORTED", jint>(); }
	static jint STATUS_FAILURE_BLOCKED() { return get_static_field<"STATUS_FAILURE_BLOCKED", jint>(); }
	static jint STATUS_FAILURE_CONFLICT() { return get_static_field<"STATUS_FAILURE_CONFLICT", jint>(); }
	static jint STATUS_FAILURE_INCOMPATIBLE() { return get_static_field<"STATUS_FAILURE_INCOMPATIBLE", jint>(); }
	static jint STATUS_FAILURE_INVALID() { return get_static_field<"STATUS_FAILURE_INVALID", jint>(); }
	static jint STATUS_FAILURE_STORAGE() { return get_static_field<"STATUS_FAILURE_STORAGE", jint>(); }
	static jint STATUS_PENDING_USER_ACTION() { return get_static_field<"STATUS_PENDING_USER_ACTION", jint>(); }
	static jint STATUS_SUCCESS() { return get_static_field<"STATUS_SUCCESS", jint>(); }

	jint createSession(jni::ref<android::content::pm::PackageInstaller_SessionParams> params) { return call_method<"createSession", jint>(params); }
	jni::ref<android::content::pm::PackageInstaller_Session> openSession(jint sessionId) { return call_method<"openSession", jni::ref<android::content::pm::PackageInstaller_Session>>(sessionId); }
	void updateSessionAppIcon(jint sessionId, jni::ref<android::graphics::Bitmap> appIcon) { return call_method<"updateSessionAppIcon", void>(sessionId, appIcon); }
	void updateSessionAppLabel(jint sessionId, jni::ref<java::lang::CharSequence> appLabel) { return call_method<"updateSessionAppLabel", void>(sessionId, appLabel); }
	void abandonSession(jint sessionId) { return call_method<"abandonSession", void>(sessionId); }
	jni::ref<android::content::pm::PackageInstaller_SessionInfo> getSessionInfo(jint sessionId) { return call_method<"getSessionInfo", jni::ref<android::content::pm::PackageInstaller_SessionInfo>>(sessionId); }
	jni::ref<java::util::List> getAllSessions() { return call_method<"getAllSessions", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getMySessions() { return call_method<"getMySessions", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getStagedSessions() { return call_method<"getStagedSessions", jni::ref<java::util::List>>(); }
	jni::ref<android::content::pm::PackageInstaller_SessionInfo> getActiveStagedSession() { return call_method<"getActiveStagedSession", jni::ref<android::content::pm::PackageInstaller_SessionInfo>>(); }
	void uninstall(jni::ref<java::lang::String> packageName, jni::ref<android::content::IntentSender> statusReceiver) { return call_method<"uninstall", void>(packageName, statusReceiver); }
	void uninstall(jni::ref<android::content::pm::VersionedPackage> versionedPackage, jni::ref<android::content::IntentSender> statusReceiver) { return call_method<"uninstall", void>(versionedPackage, statusReceiver); }
	void installExistingPackage(jni::ref<java::lang::String> packageName, jint installReason, jni::ref<android::content::IntentSender> statusReceiver) { return call_method<"installExistingPackage", void>(packageName, installReason, statusReceiver); }
	void registerSessionCallback(jni::ref<android::content::pm::PackageInstaller_SessionCallback> callback) { return call_method<"registerSessionCallback", void>(callback); }
	void registerSessionCallback(jni::ref<android::content::pm::PackageInstaller_SessionCallback> callback, jni::ref<android::os::Handler> handler) { return call_method<"registerSessionCallback", void>(callback, handler); }
	void unregisterSessionCallback(jni::ref<android::content::pm::PackageInstaller_SessionCallback> callback) { return call_method<"unregisterSessionCallback", void>(callback); }

protected:

	PackageInstaller(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_PACKAGEINSTALLER
