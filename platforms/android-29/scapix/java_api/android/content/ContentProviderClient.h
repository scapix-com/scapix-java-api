// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTPROVIDERCLIENT_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTPROVIDERCLIENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class ContentProviderClient; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::ContentProviderClient>
{
	static constexpr fixed_string class_name = "android/content/ContentProviderClient";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTPROVIDERCLIENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTPROVIDERCLIENT)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTPROVIDERCLIENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentProvider.h>
#include <scapix/java_api/android/content/ContentProviderResult.h>
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::ContentProviderClient : public jni::object_base<"android/content/ContentProviderClient",
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> url, jni::ref<jni::array<java::lang::String>> projection, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> sortOrder) { return call_method<"query", jni::ref<android::database::Cursor>>(url, projection, selection, selectionArgs, sortOrder); }
	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> uri, jni::ref<jni::array<java::lang::String>> projection, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> sortOrder, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"query", jni::ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder, cancellationSignal); }
	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> uri, jni::ref<jni::array<java::lang::String>> projection, jni::ref<android::os::Bundle> queryArgs, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"query", jni::ref<android::database::Cursor>>(uri, projection, queryArgs, cancellationSignal); }
	jni::ref<java::lang::String> getType(jni::ref<android::net::Uri> url) { return call_method<"getType", jni::ref<java::lang::String>>(url); }
	jni::ref<jni::array<java::lang::String>> getStreamTypes(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> mimeTypeFilter) { return call_method<"getStreamTypes", jni::ref<jni::array<java::lang::String>>>(url, mimeTypeFilter); }
	jni::ref<android::net::Uri> canonicalize(jni::ref<android::net::Uri> url) { return call_method<"canonicalize", jni::ref<android::net::Uri>>(url); }
	jni::ref<android::net::Uri> uncanonicalize(jni::ref<android::net::Uri> url) { return call_method<"uncanonicalize", jni::ref<android::net::Uri>>(url); }
	jboolean refresh(jni::ref<android::net::Uri> url, jni::ref<android::os::Bundle> args, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"refresh", jboolean>(url, args, cancellationSignal); }
	jni::ref<android::net::Uri> insert(jni::ref<android::net::Uri> url, jni::ref<android::content::ContentValues> initialValues) { return call_method<"insert", jni::ref<android::net::Uri>>(url, initialValues); }
	jint bulkInsert(jni::ref<android::net::Uri> url, jni::ref<jni::array<android::content::ContentValues>> initialValues) { return call_method<"bulkInsert", jint>(url, initialValues); }
	jint delete_(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_method<"delete", jint>(url, selection, selectionArgs); }
	jint update(jni::ref<android::net::Uri> url, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_method<"update", jint>(url, values, selection, selectionArgs); }
	jni::ref<android::os::ParcelFileDescriptor> openFile(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> mode) { return call_method<"openFile", jni::ref<android::os::ParcelFileDescriptor>>(url, mode); }
	jni::ref<android::os::ParcelFileDescriptor> openFile(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> mode, jni::ref<android::os::CancellationSignal> signal) { return call_method<"openFile", jni::ref<android::os::ParcelFileDescriptor>>(url, mode, signal); }
	jni::ref<android::content::res::AssetFileDescriptor> openAssetFile(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> mode) { return call_method<"openAssetFile", jni::ref<android::content::res::AssetFileDescriptor>>(url, mode); }
	jni::ref<android::content::res::AssetFileDescriptor> openAssetFile(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> mode, jni::ref<android::os::CancellationSignal> signal) { return call_method<"openAssetFile", jni::ref<android::content::res::AssetFileDescriptor>>(url, mode, signal); }
	jni::ref<android::content::res::AssetFileDescriptor> openTypedAssetFileDescriptor(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeType, jni::ref<android::os::Bundle> opts) { return call_method<"openTypedAssetFileDescriptor", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mimeType, opts); }
	jni::ref<android::content::res::AssetFileDescriptor> openTypedAssetFileDescriptor(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeType, jni::ref<android::os::Bundle> opts, jni::ref<android::os::CancellationSignal> signal) { return call_method<"openTypedAssetFileDescriptor", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mimeType, opts, signal); }
	jni::ref<android::content::res::AssetFileDescriptor> openTypedAssetFile(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeTypeFilter, jni::ref<android::os::Bundle> opts, jni::ref<android::os::CancellationSignal> signal) { return call_method<"openTypedAssetFile", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mimeTypeFilter, opts, signal); }
	jni::ref<jni::array<android::content::ContentProviderResult>> applyBatch(jni::ref<java::util::ArrayList> operations) { return call_method<"applyBatch", jni::ref<jni::array<android::content::ContentProviderResult>>>(operations); }
	jni::ref<jni::array<android::content::ContentProviderResult>> applyBatch(jni::ref<java::lang::String> authority, jni::ref<java::util::ArrayList> operations) { return call_method<"applyBatch", jni::ref<jni::array<android::content::ContentProviderResult>>>(authority, operations); }
	jni::ref<android::os::Bundle> call(jni::ref<java::lang::String> method, jni::ref<java::lang::String> arg, jni::ref<android::os::Bundle> extras) { return call_method<"call", jni::ref<android::os::Bundle>>(method, arg, extras); }
	jni::ref<android::os::Bundle> call(jni::ref<java::lang::String> authority, jni::ref<java::lang::String> method, jni::ref<java::lang::String> arg, jni::ref<android::os::Bundle> extras) { return call_method<"call", jni::ref<android::os::Bundle>>(authority, method, arg, extras); }
	void close() { return call_method<"close", void>(); }
	jboolean release() { return call_method<"release", jboolean>(); }
	jni::ref<android::content::ContentProvider> getLocalContentProvider() { return call_method<"getLocalContentProvider", jni::ref<android::content::ContentProvider>>(); }

protected:

	ContentProviderClient(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTPROVIDERCLIENT
