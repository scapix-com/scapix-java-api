// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WEBKIT_URLUTIL_FWD
#define SCAPIX_JAVA_API_ANDROID_WEBKIT_URLUTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::webkit { class URLUtil; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::webkit::URLUtil>
{
	static constexpr fixed_string class_name = "android/webkit/URLUtil";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WEBKIT_URLUTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WEBKIT_URLUTIL)
#define SCAPIX_JAVA_API_ANDROID_WEBKIT_URLUTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::webkit::URLUtil : public jni::object_base<"android/webkit/URLUtil",
	java::lang::Object>
{
public:

	static jni::ref<android::webkit::URLUtil> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> guessUrl(jni::ref<java::lang::String> inUrl) { return call_static_method<"guessUrl", jni::ref<java::lang::String>>(inUrl); }
	static jni::ref<java::lang::String> composeSearchUrl(jni::ref<java::lang::String> inQuery, jni::ref<java::lang::String> template_, jni::ref<java::lang::String> queryPlaceHolder) { return call_static_method<"composeSearchUrl", jni::ref<java::lang::String>>(inQuery, template_, queryPlaceHolder); }
	static jni::ref<jni::array<jbyte>> decode(jni::ref<jni::array<jbyte>> url) { return call_static_method<"decode", jni::ref<jni::array<jbyte>>>(url); }
	static jboolean isAssetUrl(jni::ref<java::lang::String> url) { return call_static_method<"isAssetUrl", jboolean>(url); }
	static jboolean isCookielessProxyUrl(jni::ref<java::lang::String> url) { return call_static_method<"isCookielessProxyUrl", jboolean>(url); }
	static jboolean isFileUrl(jni::ref<java::lang::String> url) { return call_static_method<"isFileUrl", jboolean>(url); }
	static jboolean isAboutUrl(jni::ref<java::lang::String> url) { return call_static_method<"isAboutUrl", jboolean>(url); }
	static jboolean isDataUrl(jni::ref<java::lang::String> url) { return call_static_method<"isDataUrl", jboolean>(url); }
	static jboolean isJavaScriptUrl(jni::ref<java::lang::String> url) { return call_static_method<"isJavaScriptUrl", jboolean>(url); }
	static jboolean isHttpUrl(jni::ref<java::lang::String> url) { return call_static_method<"isHttpUrl", jboolean>(url); }
	static jboolean isHttpsUrl(jni::ref<java::lang::String> url) { return call_static_method<"isHttpsUrl", jboolean>(url); }
	static jboolean isNetworkUrl(jni::ref<java::lang::String> url) { return call_static_method<"isNetworkUrl", jboolean>(url); }
	static jboolean isContentUrl(jni::ref<java::lang::String> url) { return call_static_method<"isContentUrl", jboolean>(url); }
	static jboolean isValidUrl(jni::ref<java::lang::String> url) { return call_static_method<"isValidUrl", jboolean>(url); }
	static jni::ref<java::lang::String> stripAnchor(jni::ref<java::lang::String> url) { return call_static_method<"stripAnchor", jni::ref<java::lang::String>>(url); }
	static jni::ref<java::lang::String> guessFileName(jni::ref<java::lang::String> url, jni::ref<java::lang::String> contentDisposition, jni::ref<java::lang::String> mimeType) { return call_static_method<"guessFileName", jni::ref<java::lang::String>>(url, contentDisposition, mimeType); }

protected:

	URLUtil(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WEBKIT_URLUTIL
