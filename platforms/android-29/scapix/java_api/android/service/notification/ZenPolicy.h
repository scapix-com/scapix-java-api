// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_SERVICE_NOTIFICATION_ZENPOLICY_FWD
#define SCAPIX_JAVA_API_ANDROID_SERVICE_NOTIFICATION_ZENPOLICY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::service::notification { class ZenPolicy; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::service::notification::ZenPolicy>
{
	static constexpr fixed_string class_name = "android/service/notification/ZenPolicy";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SERVICE_NOTIFICATION_ZENPOLICY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_SERVICE_NOTIFICATION_ZENPOLICY)
#define SCAPIX_JAVA_API_ANDROID_SERVICE_NOTIFICATION_ZENPOLICY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/service/notification/ZenPolicy_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::service::notification::ZenPolicy : public jni::object_base<"android/service/notification/ZenPolicy",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = ZenPolicy_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint PEOPLE_TYPE_ANYONE() { return get_static_field<"PEOPLE_TYPE_ANYONE", jint>(); }
	static jint PEOPLE_TYPE_CONTACTS() { return get_static_field<"PEOPLE_TYPE_CONTACTS", jint>(); }
	static jint PEOPLE_TYPE_NONE() { return get_static_field<"PEOPLE_TYPE_NONE", jint>(); }
	static jint PEOPLE_TYPE_STARRED() { return get_static_field<"PEOPLE_TYPE_STARRED", jint>(); }
	static jint PEOPLE_TYPE_UNSET() { return get_static_field<"PEOPLE_TYPE_UNSET", jint>(); }
	static jint STATE_ALLOW() { return get_static_field<"STATE_ALLOW", jint>(); }
	static jint STATE_DISALLOW() { return get_static_field<"STATE_DISALLOW", jint>(); }
	static jint STATE_UNSET() { return get_static_field<"STATE_UNSET", jint>(); }

	jint getPriorityMessageSenders() { return call_method<"getPriorityMessageSenders", jint>(); }
	jint getPriorityCallSenders() { return call_method<"getPriorityCallSenders", jint>(); }
	jint getPriorityCategoryReminders() { return call_method<"getPriorityCategoryReminders", jint>(); }
	jint getPriorityCategoryEvents() { return call_method<"getPriorityCategoryEvents", jint>(); }
	jint getPriorityCategoryMessages() { return call_method<"getPriorityCategoryMessages", jint>(); }
	jint getPriorityCategoryCalls() { return call_method<"getPriorityCategoryCalls", jint>(); }
	jint getPriorityCategoryRepeatCallers() { return call_method<"getPriorityCategoryRepeatCallers", jint>(); }
	jint getPriorityCategoryAlarms() { return call_method<"getPriorityCategoryAlarms", jint>(); }
	jint getPriorityCategoryMedia() { return call_method<"getPriorityCategoryMedia", jint>(); }
	jint getPriorityCategorySystem() { return call_method<"getPriorityCategorySystem", jint>(); }
	jint getVisualEffectFullScreenIntent() { return call_method<"getVisualEffectFullScreenIntent", jint>(); }
	jint getVisualEffectLights() { return call_method<"getVisualEffectLights", jint>(); }
	jint getVisualEffectPeek() { return call_method<"getVisualEffectPeek", jint>(); }
	jint getVisualEffectStatusBar() { return call_method<"getVisualEffectStatusBar", jint>(); }
	jint getVisualEffectBadge() { return call_method<"getVisualEffectBadge", jint>(); }
	jint getVisualEffectAmbient() { return call_method<"getVisualEffectAmbient", jint>(); }
	jint getVisualEffectNotificationList() { return call_method<"getVisualEffectNotificationList", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	ZenPolicy(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SERVICE_NOTIFICATION_ZENPOLICY
