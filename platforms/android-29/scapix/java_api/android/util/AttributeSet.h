// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_ATTRIBUTESET_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_ATTRIBUTESET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class AttributeSet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::AttributeSet>
{
	static constexpr fixed_string class_name = "android/util/AttributeSet";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_ATTRIBUTESET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_ATTRIBUTESET)
#define SCAPIX_JAVA_API_ANDROID_UTIL_ATTRIBUTESET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::AttributeSet : public jni::object_base<"android/util/AttributeSet",
	java::lang::Object>
{
public:

	jint getAttributeCount() { return call_method<"getAttributeCount", jint>(); }
	jni::ref<java::lang::String> getAttributeNamespace(jint index) { return call_method<"getAttributeNamespace", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getAttributeName(jint p1) { return call_method<"getAttributeName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAttributeValue(jint p1) { return call_method<"getAttributeValue", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAttributeValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeValue", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getPositionDescription() { return call_method<"getPositionDescription", jni::ref<java::lang::String>>(); }
	jint getAttributeNameResource(jint p1) { return call_method<"getAttributeNameResource", jint>(p1); }
	jint getAttributeListValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::String>> p3, jint p4) { return call_method<"getAttributeListValue", jint>(p1, p2, p3, p4); }
	jboolean getAttributeBooleanValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"getAttributeBooleanValue", jboolean>(p1, p2, p3); }
	jint getAttributeResourceValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"getAttributeResourceValue", jint>(p1, p2, p3); }
	jint getAttributeIntValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"getAttributeIntValue", jint>(p1, p2, p3); }
	jint getAttributeUnsignedIntValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"getAttributeUnsignedIntValue", jint>(p1, p2, p3); }
	jfloat getAttributeFloatValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jfloat p3) { return call_method<"getAttributeFloatValue", jfloat>(p1, p2, p3); }
	jint getAttributeListValue(jint p1, jni::ref<jni::array<java::lang::String>> p2, jint p3) { return call_method<"getAttributeListValue", jint>(p1, p2, p3); }
	jboolean getAttributeBooleanValue(jint p1, jboolean p2) { return call_method<"getAttributeBooleanValue", jboolean>(p1, p2); }
	jint getAttributeResourceValue(jint p1, jint p2) { return call_method<"getAttributeResourceValue", jint>(p1, p2); }
	jint getAttributeIntValue(jint p1, jint p2) { return call_method<"getAttributeIntValue", jint>(p1, p2); }
	jint getAttributeUnsignedIntValue(jint p1, jint p2) { return call_method<"getAttributeUnsignedIntValue", jint>(p1, p2); }
	jfloat getAttributeFloatValue(jint p1, jfloat p2) { return call_method<"getAttributeFloatValue", jfloat>(p1, p2); }
	jni::ref<java::lang::String> getIdAttribute() { return call_method<"getIdAttribute", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getClassAttribute() { return call_method<"getClassAttribute", jni::ref<java::lang::String>>(); }
	jint getIdAttributeResourceValue(jint p1) { return call_method<"getIdAttributeResourceValue", jint>(p1); }
	jint getStyleAttribute() { return call_method<"getStyleAttribute", jint>(); }

protected:

	AttributeSet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_ATTRIBUTESET
