// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/reflect/Type.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class ParameterizedType; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::ParameterizedType>
{
	static constexpr fixed_string class_name = "java/lang/reflect/ParameterizedType";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::reflect::Type>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::ParameterizedType : public jni::object_base<"java/lang/reflect/ParameterizedType",
	java::lang::Object,
	java::lang::reflect::Type>
{
public:

	jni::ref<jni::array<java::lang::reflect::Type>> getActualTypeArguments() { return call_method<"getActualTypeArguments", jni::ref<jni::array<java::lang::reflect::Type>>>(); }
	jni::ref<java::lang::reflect::Type> getRawType() { return call_method<"getRawType", jni::ref<java::lang::reflect::Type>>(); }
	jni::ref<java::lang::reflect::Type> getOwnerType() { return call_method<"getOwnerType", jni::ref<java::lang::reflect::Type>>(); }

protected:

	ParameterizedType(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PARAMETERIZEDTYPE
