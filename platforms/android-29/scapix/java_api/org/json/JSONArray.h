// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_JSON_JSONARRAY_FWD
#define SCAPIX_JAVA_API_ORG_JSON_JSONARRAY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::json { class JSONArray; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::json::JSONArray>
{
	static constexpr fixed_string class_name = "org/json/JSONArray";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_JSON_JSONARRAY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_JSON_JSONARRAY)
#define SCAPIX_JAVA_API_ORG_JSON_JSONARRAY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/org/json/JSONObject.h>
#include <scapix/java_api/org/json/JSONTokener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::json::JSONArray : public jni::object_base<"org/json/JSONArray",
	java::lang::Object>
{
public:

	static jni::ref<org::json::JSONArray> new_object() { return base_::new_object(); }
	static jni::ref<org::json::JSONArray> new_object(jni::ref<java::util::Collection> copyFrom) { return base_::new_object(copyFrom); }
	static jni::ref<org::json::JSONArray> new_object(jni::ref<org::json::JSONTokener> readFrom) { return base_::new_object(readFrom); }
	static jni::ref<org::json::JSONArray> new_object(jni::ref<java::lang::String> json) { return base_::new_object(json); }
	static jni::ref<org::json::JSONArray> new_object(jni::ref<java::lang::Object> array) { return base_::new_object(array); }
	jint length() { return call_method<"length", jint>(); }
	jni::ref<org::json::JSONArray> put(jboolean value) { return call_method<"put", jni::ref<org::json::JSONArray>>(value); }
	jni::ref<org::json::JSONArray> put(jdouble value) { return call_method<"put", jni::ref<org::json::JSONArray>>(value); }
	jni::ref<org::json::JSONArray> put(jint value) { return call_method<"put", jni::ref<org::json::JSONArray>>(value); }
	jni::ref<org::json::JSONArray> put(jlong value) { return call_method<"put", jni::ref<org::json::JSONArray>>(value); }
	jni::ref<org::json::JSONArray> put(jni::ref<java::lang::Object> value) { return call_method<"put", jni::ref<org::json::JSONArray>>(value); }
	jni::ref<org::json::JSONArray> put(jint index, jboolean value) { return call_method<"put", jni::ref<org::json::JSONArray>>(index, value); }
	jni::ref<org::json::JSONArray> put(jint index, jdouble value) { return call_method<"put", jni::ref<org::json::JSONArray>>(index, value); }
	jni::ref<org::json::JSONArray> put(jint index, jint value) { return call_method<"put", jni::ref<org::json::JSONArray>>(index, value); }
	jni::ref<org::json::JSONArray> put(jint index, jlong value) { return call_method<"put", jni::ref<org::json::JSONArray>>(index, value); }
	jni::ref<org::json::JSONArray> put(jint index, jni::ref<java::lang::Object> value) { return call_method<"put", jni::ref<org::json::JSONArray>>(index, value); }
	jboolean isNull(jint index) { return call_method<"isNull", jboolean>(index); }
	jni::ref<java::lang::Object> get(jint index) { return call_method<"get", jni::ref<java::lang::Object>>(index); }
	jni::ref<java::lang::Object> opt(jint index) { return call_method<"opt", jni::ref<java::lang::Object>>(index); }
	jni::ref<java::lang::Object> remove(jint index) { return call_method<"remove", jni::ref<java::lang::Object>>(index); }
	jboolean getBoolean(jint index) { return call_method<"getBoolean", jboolean>(index); }
	jboolean optBoolean(jint index) { return call_method<"optBoolean", jboolean>(index); }
	jboolean optBoolean(jint index, jboolean fallback) { return call_method<"optBoolean", jboolean>(index, fallback); }
	jdouble getDouble(jint index) { return call_method<"getDouble", jdouble>(index); }
	jdouble optDouble(jint index) { return call_method<"optDouble", jdouble>(index); }
	jdouble optDouble(jint index, jdouble fallback) { return call_method<"optDouble", jdouble>(index, fallback); }
	jint getInt(jint index) { return call_method<"getInt", jint>(index); }
	jint optInt(jint index) { return call_method<"optInt", jint>(index); }
	jint optInt(jint index, jint fallback) { return call_method<"optInt", jint>(index, fallback); }
	jlong getLong(jint index) { return call_method<"getLong", jlong>(index); }
	jlong optLong(jint index) { return call_method<"optLong", jlong>(index); }
	jlong optLong(jint index, jlong fallback) { return call_method<"optLong", jlong>(index, fallback); }
	jni::ref<java::lang::String> getString(jint index) { return call_method<"getString", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> optString(jint index) { return call_method<"optString", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> optString(jint index, jni::ref<java::lang::String> fallback) { return call_method<"optString", jni::ref<java::lang::String>>(index, fallback); }
	jni::ref<org::json::JSONArray> getJSONArray(jint index) { return call_method<"getJSONArray", jni::ref<org::json::JSONArray>>(index); }
	jni::ref<org::json::JSONArray> optJSONArray(jint index) { return call_method<"optJSONArray", jni::ref<org::json::JSONArray>>(index); }
	jni::ref<org::json::JSONObject> getJSONObject(jint index) { return call_method<"getJSONObject", jni::ref<org::json::JSONObject>>(index); }
	jni::ref<org::json::JSONObject> optJSONObject(jint index) { return call_method<"optJSONObject", jni::ref<org::json::JSONObject>>(index); }
	jni::ref<org::json::JSONObject> toJSONObject(jni::ref<org::json::JSONArray> names) { return call_method<"toJSONObject", jni::ref<org::json::JSONObject>>(names); }
	jni::ref<java::lang::String> join(jni::ref<java::lang::String> separator) { return call_method<"join", jni::ref<java::lang::String>>(separator); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString(jint indentSpaces) { return call_method<"toString", jni::ref<java::lang::String>>(indentSpaces); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	JSONArray(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_JSON_JSONARRAY
