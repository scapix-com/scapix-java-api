// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/xml/sax/helpers/DefaultHandler.h>
#include <scapix/java_api/org/xml/sax/ext/LexicalHandler.h>
#include <scapix/java_api/org/xml/sax/ext/DeclHandler.h>
#include <scapix/java_api/org/xml/sax/ext/EntityResolver2.h>

#ifndef SCAPIX_JAVA_API_ORG_XML_SAX_EXT_DEFAULTHANDLER2_FWD
#define SCAPIX_JAVA_API_ORG_XML_SAX_EXT_DEFAULTHANDLER2_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::xml::sax::ext { class DefaultHandler2; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::xml::sax::ext::DefaultHandler2>
{
	static constexpr fixed_string class_name = "org/xml/sax/ext/DefaultHandler2";
	using base_classes = std::tuple<scapix::java_api::org::xml::sax::helpers::DefaultHandler, scapix::java_api::org::xml::sax::ext::LexicalHandler, scapix::java_api::org::xml::sax::ext::DeclHandler, scapix::java_api::org::xml::sax::ext::EntityResolver2>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XML_SAX_EXT_DEFAULTHANDLER2_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_XML_SAX_EXT_DEFAULTHANDLER2)
#define SCAPIX_JAVA_API_ORG_XML_SAX_EXT_DEFAULTHANDLER2

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::xml::sax::ext::DefaultHandler2 : public jni::object_base<"org/xml/sax/ext/DefaultHandler2",
	org::xml::sax::helpers::DefaultHandler,
	org::xml::sax::ext::LexicalHandler,
	org::xml::sax::ext::DeclHandler,
	org::xml::sax::ext::EntityResolver2>
{
public:

	static jni::ref<org::xml::sax::ext::DefaultHandler2> new_object() { return base_::new_object(); }
	void startCDATA() { return call_method<"startCDATA", void>(); }
	void endCDATA() { return call_method<"endCDATA", void>(); }
	void startDTD(jni::ref<java::lang::String> name, jni::ref<java::lang::String> publicId, jni::ref<java::lang::String> systemId) { return call_method<"startDTD", void>(name, publicId, systemId); }
	void endDTD() { return call_method<"endDTD", void>(); }
	void startEntity(jni::ref<java::lang::String> name) { return call_method<"startEntity", void>(name); }
	void endEntity(jni::ref<java::lang::String> name) { return call_method<"endEntity", void>(name); }
	void comment(jni::ref<jni::array<jchar>> ch, jint start, jint length) { return call_method<"comment", void>(ch, start, length); }
	void attributeDecl(jni::ref<java::lang::String> eName, jni::ref<java::lang::String> aName, jni::ref<java::lang::String> type, jni::ref<java::lang::String> mode, jni::ref<java::lang::String> value) { return call_method<"attributeDecl", void>(eName, aName, type, mode, value); }
	void elementDecl(jni::ref<java::lang::String> name, jni::ref<java::lang::String> model) { return call_method<"elementDecl", void>(name, model); }
	void externalEntityDecl(jni::ref<java::lang::String> name, jni::ref<java::lang::String> publicId, jni::ref<java::lang::String> systemId) { return call_method<"externalEntityDecl", void>(name, publicId, systemId); }
	void internalEntityDecl(jni::ref<java::lang::String> name, jni::ref<java::lang::String> value) { return call_method<"internalEntityDecl", void>(name, value); }
	jni::ref<org::xml::sax::InputSource> getExternalSubset(jni::ref<java::lang::String> name, jni::ref<java::lang::String> baseURI) { return call_method<"getExternalSubset", jni::ref<org::xml::sax::InputSource>>(name, baseURI); }
	jni::ref<org::xml::sax::InputSource> resolveEntity(jni::ref<java::lang::String> name, jni::ref<java::lang::String> publicId, jni::ref<java::lang::String> baseURI, jni::ref<java::lang::String> systemId) { return call_method<"resolveEntity", jni::ref<org::xml::sax::InputSource>>(name, publicId, baseURI, systemId); }
	jni::ref<org::xml::sax::InputSource> resolveEntity(jni::ref<java::lang::String> publicId, jni::ref<java::lang::String> systemId) { return call_method<"resolveEntity", jni::ref<org::xml::sax::InputSource>>(publicId, systemId); }

protected:

	DefaultHandler2(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XML_SAX_EXT_DEFAULTHANDLER2
