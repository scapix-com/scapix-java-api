// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBDEVICECONNECTION_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBDEVICECONNECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::usb { class UsbDeviceConnection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::usb::UsbDeviceConnection>
{
	static constexpr fixed_string class_name = "android/hardware/usb/UsbDeviceConnection";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBDEVICECONNECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBDEVICECONNECTION)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBDEVICECONNECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/usb/UsbConfiguration.h>
#include <scapix/java_api/android/hardware/usb/UsbEndpoint.h>
#include <scapix/java_api/android/hardware/usb/UsbInterface.h>
#include <scapix/java_api/android/hardware/usb/UsbRequest.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::usb::UsbDeviceConnection : public jni::object_base<"android/hardware/usb/UsbDeviceConnection",
	java::lang::Object>
{
public:

	void close() { return call_method<"close", void>(); }
	jint getFileDescriptor() { return call_method<"getFileDescriptor", jint>(); }
	jni::ref<jni::array<jbyte>> getRawDescriptors() { return call_method<"getRawDescriptors", jni::ref<jni::array<jbyte>>>(); }
	jboolean claimInterface(jni::ref<android::hardware::usb::UsbInterface> intf, jboolean force) { return call_method<"claimInterface", jboolean>(intf, force); }
	jboolean releaseInterface(jni::ref<android::hardware::usb::UsbInterface> intf) { return call_method<"releaseInterface", jboolean>(intf); }
	jboolean setInterface(jni::ref<android::hardware::usb::UsbInterface> intf) { return call_method<"setInterface", jboolean>(intf); }
	jboolean setConfiguration(jni::ref<android::hardware::usb::UsbConfiguration> configuration) { return call_method<"setConfiguration", jboolean>(configuration); }
	jint controlTransfer(jint requestType, jint request, jint value, jint index, jni::ref<jni::array<jbyte>> buffer, jint length, jint timeout) { return call_method<"controlTransfer", jint>(requestType, request, value, index, buffer, length, timeout); }
	jint controlTransfer(jint requestType, jint request, jint value, jint index, jni::ref<jni::array<jbyte>> buffer, jint offset, jint length, jint timeout) { return call_method<"controlTransfer", jint>(requestType, request, value, index, buffer, offset, length, timeout); }
	jint bulkTransfer(jni::ref<android::hardware::usb::UsbEndpoint> endpoint, jni::ref<jni::array<jbyte>> buffer, jint length, jint timeout) { return call_method<"bulkTransfer", jint>(endpoint, buffer, length, timeout); }
	jint bulkTransfer(jni::ref<android::hardware::usb::UsbEndpoint> endpoint, jni::ref<jni::array<jbyte>> buffer, jint offset, jint length, jint timeout) { return call_method<"bulkTransfer", jint>(endpoint, buffer, offset, length, timeout); }
	jni::ref<android::hardware::usb::UsbRequest> requestWait() { return call_method<"requestWait", jni::ref<android::hardware::usb::UsbRequest>>(); }
	jni::ref<android::hardware::usb::UsbRequest> requestWait(jlong timeout) { return call_method<"requestWait", jni::ref<android::hardware::usb::UsbRequest>>(timeout); }
	jni::ref<java::lang::String> getSerial() { return call_method<"getSerial", jni::ref<java::lang::String>>(); }

protected:

	UsbDeviceConnection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBDEVICECONNECTION
