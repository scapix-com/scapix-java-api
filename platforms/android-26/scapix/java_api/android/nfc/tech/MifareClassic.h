// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/nfc/tech/BasicTagTechnology.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NFC_TECH_MIFARECLASSIC_FWD
#define SCAPIX_JAVA_API_ANDROID_NFC_TECH_MIFARECLASSIC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::nfc::tech { class MifareClassic; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::nfc::tech::MifareClassic>
{
	static constexpr fixed_string class_name = "android/nfc/tech/MifareClassic";
	using base_classes = std::tuple<scapix::java_api::android::nfc::tech::BasicTagTechnology>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NFC_TECH_MIFARECLASSIC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NFC_TECH_MIFARECLASSIC)
#define SCAPIX_JAVA_API_ANDROID_NFC_TECH_MIFARECLASSIC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/nfc/Tag.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::nfc::tech::MifareClassic : public jni::object_base<"android/nfc/tech/MifareClassic",
	android::nfc::tech::BasicTagTechnology>
{
public:

	static jint BLOCK_SIZE() { return get_static_field<"BLOCK_SIZE", jint>(); }
	static jni::ref<jni::array<jbyte>> KEY_DEFAULT() { return get_static_field<"KEY_DEFAULT", jni::ref<jni::array<jbyte>>>(); }
	static jni::ref<jni::array<jbyte>> KEY_MIFARE_APPLICATION_DIRECTORY() { return get_static_field<"KEY_MIFARE_APPLICATION_DIRECTORY", jni::ref<jni::array<jbyte>>>(); }
	static jni::ref<jni::array<jbyte>> KEY_NFC_FORUM() { return get_static_field<"KEY_NFC_FORUM", jni::ref<jni::array<jbyte>>>(); }
	static jint SIZE_1K() { return get_static_field<"SIZE_1K", jint>(); }
	static jint SIZE_2K() { return get_static_field<"SIZE_2K", jint>(); }
	static jint SIZE_4K() { return get_static_field<"SIZE_4K", jint>(); }
	static jint SIZE_MINI() { return get_static_field<"SIZE_MINI", jint>(); }
	static jint TYPE_CLASSIC() { return get_static_field<"TYPE_CLASSIC", jint>(); }
	static jint TYPE_PLUS() { return get_static_field<"TYPE_PLUS", jint>(); }
	static jint TYPE_PRO() { return get_static_field<"TYPE_PRO", jint>(); }
	static jint TYPE_UNKNOWN() { return get_static_field<"TYPE_UNKNOWN", jint>(); }

	static jni::ref<android::nfc::tech::MifareClassic> get(jni::ref<android::nfc::Tag> tag) { return call_static_method<"get", jni::ref<android::nfc::tech::MifareClassic>>(tag); }
	jint getType() { return call_method<"getType", jint>(); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jint getSectorCount() { return call_method<"getSectorCount", jint>(); }
	jint getBlockCount() { return call_method<"getBlockCount", jint>(); }
	jint getBlockCountInSector(jint sectorIndex) { return call_method<"getBlockCountInSector", jint>(sectorIndex); }
	jint blockToSector(jint blockIndex) { return call_method<"blockToSector", jint>(blockIndex); }
	jint sectorToBlock(jint sectorIndex) { return call_method<"sectorToBlock", jint>(sectorIndex); }
	jboolean authenticateSectorWithKeyA(jint sectorIndex, jni::ref<jni::array<jbyte>> key) { return call_method<"authenticateSectorWithKeyA", jboolean>(sectorIndex, key); }
	jboolean authenticateSectorWithKeyB(jint sectorIndex, jni::ref<jni::array<jbyte>> key) { return call_method<"authenticateSectorWithKeyB", jboolean>(sectorIndex, key); }
	jni::ref<jni::array<jbyte>> readBlock(jint blockIndex) { return call_method<"readBlock", jni::ref<jni::array<jbyte>>>(blockIndex); }
	void writeBlock(jint blockIndex, jni::ref<jni::array<jbyte>> data) { return call_method<"writeBlock", void>(blockIndex, data); }
	void increment(jint blockIndex, jint value) { return call_method<"increment", void>(blockIndex, value); }
	void decrement(jint blockIndex, jint value) { return call_method<"decrement", void>(blockIndex, value); }
	void transfer(jint blockIndex) { return call_method<"transfer", void>(blockIndex); }
	void restore(jint blockIndex) { return call_method<"restore", void>(blockIndex); }
	jni::ref<jni::array<jbyte>> transceive(jni::ref<jni::array<jbyte>> data) { return call_method<"transceive", jni::ref<jni::array<jbyte>>>(data); }
	jint getMaxTransceiveLength() { return call_method<"getMaxTransceiveLength", jint>(); }
	void setTimeout(jint timeout) { return call_method<"setTimeout", void>(timeout); }
	jint getTimeout() { return call_method<"getTimeout", jint>(); }

protected:

	MifareClassic(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NFC_TECH_MIFARECLASSIC
