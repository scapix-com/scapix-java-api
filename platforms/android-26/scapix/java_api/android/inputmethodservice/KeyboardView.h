// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/View_OnClickListener.h>

#ifndef SCAPIX_JAVA_API_ANDROID_INPUTMETHODSERVICE_KEYBOARDVIEW_FWD
#define SCAPIX_JAVA_API_ANDROID_INPUTMETHODSERVICE_KEYBOARDVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::inputmethodservice { class KeyboardView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::inputmethodservice::KeyboardView>
{
	static constexpr fixed_string class_name = "android/inputmethodservice/KeyboardView";
	using base_classes = std::tuple<scapix::java_api::android::view::View, scapix::java_api::android::view::View_OnClickListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_INPUTMETHODSERVICE_KEYBOARDVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_INPUTMETHODSERVICE_KEYBOARDVIEW)
#define SCAPIX_JAVA_API_ANDROID_INPUTMETHODSERVICE_KEYBOARDVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/inputmethodservice/Keyboard.h>
#include <scapix/java_api/android/inputmethodservice/KeyboardView_OnKeyboardActionListener.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::inputmethodservice::KeyboardView : public jni::object_base<"android/inputmethodservice/KeyboardView",
	android::view::View,
	android::view::View_OnClickListener>
{
public:

	using OnKeyboardActionListener = KeyboardView_OnKeyboardActionListener;

	static jni::ref<android::inputmethodservice::KeyboardView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::inputmethodservice::KeyboardView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::inputmethodservice::KeyboardView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	void setOnKeyboardActionListener(jni::ref<android::inputmethodservice::KeyboardView_OnKeyboardActionListener> listener) { return call_method<"setOnKeyboardActionListener", void>(listener); }
	void setKeyboard(jni::ref<android::inputmethodservice::Keyboard> keyboard) { return call_method<"setKeyboard", void>(keyboard); }
	jni::ref<android::inputmethodservice::Keyboard> getKeyboard() { return call_method<"getKeyboard", jni::ref<android::inputmethodservice::Keyboard>>(); }
	jboolean setShifted(jboolean shifted) { return call_method<"setShifted", jboolean>(shifted); }
	jboolean isShifted() { return call_method<"isShifted", jboolean>(); }
	void setPreviewEnabled(jboolean previewEnabled) { return call_method<"setPreviewEnabled", void>(previewEnabled); }
	jboolean isPreviewEnabled() { return call_method<"isPreviewEnabled", jboolean>(); }
	void setVerticalCorrection(jint verticalOffset) { return call_method<"setVerticalCorrection", void>(verticalOffset); }
	void setPopupParent(jni::ref<android::view::View> v) { return call_method<"setPopupParent", void>(v); }
	void setPopupOffset(jint x, jint y) { return call_method<"setPopupOffset", void>(x, y); }
	void setProximityCorrectionEnabled(jboolean enabled) { return call_method<"setProximityCorrectionEnabled", void>(enabled); }
	jboolean isProximityCorrectionEnabled() { return call_method<"isProximityCorrectionEnabled", jboolean>(); }
	void onMeasure(jint widthMeasureSpec, jint heightMeasureSpec) { return call_method<"onMeasure", void>(widthMeasureSpec, heightMeasureSpec); }
	void onSizeChanged(jint w, jint h, jint oldw, jint oldh) { return call_method<"onSizeChanged", void>(w, h, oldw, oldh); }
	void onDraw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"onDraw", void>(canvas); }
	void invalidateAllKeys() { return call_method<"invalidateAllKeys", void>(); }
	void invalidateKey(jint keyIndex) { return call_method<"invalidateKey", void>(keyIndex); }
	jboolean onHoverEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onHoverEvent", jboolean>(event); }
	jboolean onTouchEvent(jni::ref<android::view::MotionEvent> me) { return call_method<"onTouchEvent", jboolean>(me); }
	void closing() { return call_method<"closing", void>(); }
	void onDetachedFromWindow() { return call_method<"onDetachedFromWindow", void>(); }
	jboolean handleBack() { return call_method<"handleBack", jboolean>(); }
	void onClick(jni::ref<android::view::View> v) { return call_method<"onClick", void>(v); }

protected:

	KeyboardView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_INPUTMETHODSERVICE_KEYBOARDVIEW
