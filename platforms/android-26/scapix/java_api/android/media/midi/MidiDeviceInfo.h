// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::midi { class MidiDeviceInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::midi::MidiDeviceInfo>
{
	static constexpr fixed_string class_name = "android/media/midi/MidiDeviceInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/midi/MidiDeviceInfo_PortInfo.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::midi::MidiDeviceInfo : public jni::object_base<"android/media/midi/MidiDeviceInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using PortInfo = MidiDeviceInfo_PortInfo;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<java::lang::String> PROPERTY_BLUETOOTH_DEVICE() { return get_static_field<"PROPERTY_BLUETOOTH_DEVICE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_MANUFACTURER() { return get_static_field<"PROPERTY_MANUFACTURER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_NAME() { return get_static_field<"PROPERTY_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_PRODUCT() { return get_static_field<"PROPERTY_PRODUCT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_SERIAL_NUMBER() { return get_static_field<"PROPERTY_SERIAL_NUMBER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_USB_DEVICE() { return get_static_field<"PROPERTY_USB_DEVICE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_VERSION() { return get_static_field<"PROPERTY_VERSION", jni::ref<java::lang::String>>(); }
	static jint TYPE_BLUETOOTH() { return get_static_field<"TYPE_BLUETOOTH", jint>(); }
	static jint TYPE_USB() { return get_static_field<"TYPE_USB", jint>(); }
	static jint TYPE_VIRTUAL() { return get_static_field<"TYPE_VIRTUAL", jint>(); }

	jint getType() { return call_method<"getType", jint>(); }
	jint getId() { return call_method<"getId", jint>(); }
	jint getInputPortCount() { return call_method<"getInputPortCount", jint>(); }
	jint getOutputPortCount() { return call_method<"getOutputPortCount", jint>(); }
	jni::ref<jni::array<android::media::midi::MidiDeviceInfo_PortInfo>> getPorts() { return call_method<"getPorts", jni::ref<jni::array<android::media::midi::MidiDeviceInfo_PortInfo>>>(); }
	jni::ref<android::os::Bundle> getProperties() { return call_method<"getProperties", jni::ref<android::os::Bundle>>(); }
	jboolean isPrivate() { return call_method<"isPrivate", jboolean>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> parcel, jint flags) { return call_method<"writeToParcel", void>(parcel, flags); }

protected:

	MidiDeviceInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MIDI_MIDIDEVICEINFO
