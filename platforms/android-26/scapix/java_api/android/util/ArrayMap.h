// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Map.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_ARRAYMAP_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_ARRAYMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class ArrayMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::ArrayMap>
{
	static constexpr fixed_string class_name = "android/util/ArrayMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::Map>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_ARRAYMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_ARRAYMAP)
#define SCAPIX_JAVA_API_ANDROID_UTIL_ARRAYMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::ArrayMap : public jni::object_base<"android/util/ArrayMap",
	java::lang::Object,
	java::util::Map>
{
public:

	static jni::ref<android::util::ArrayMap> new_object() { return base_::new_object(); }
	static jni::ref<android::util::ArrayMap> new_object(jint capacity) { return base_::new_object(capacity); }
	static jni::ref<android::util::ArrayMap> new_object(jni::ref<android::util::ArrayMap> map) { return base_::new_object(map); }
	void clear() { return call_method<"clear", void>(); }
	void ensureCapacity(jint minimumCapacity) { return call_method<"ensureCapacity", void>(minimumCapacity); }
	jboolean containsKey(jni::ref<java::lang::Object> key) { return call_method<"containsKey", jboolean>(key); }
	jint indexOfKey(jni::ref<java::lang::Object> key) { return call_method<"indexOfKey", jint>(key); }
	jboolean containsValue(jni::ref<java::lang::Object> value) { return call_method<"containsValue", jboolean>(value); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> key) { return call_method<"get", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::lang::Object> keyAt(jint index) { return call_method<"keyAt", jni::ref<java::lang::Object>>(index); }
	jni::ref<java::lang::Object> valueAt(jint index) { return call_method<"valueAt", jni::ref<java::lang::Object>>(index); }
	jni::ref<java::lang::Object> setValueAt(jint index, jni::ref<java::lang::Object> value) { return call_method<"setValueAt", jni::ref<java::lang::Object>>(index, value); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"put", jni::ref<java::lang::Object>>(key, value); }
	void putAll(jni::ref<android::util::ArrayMap> array) { return call_method<"putAll", void>(array); }
	jni::ref<java::lang::Object> remove(jni::ref<java::lang::Object> key) { return call_method<"remove", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::lang::Object> removeAt(jint index) { return call_method<"removeAt", jni::ref<java::lang::Object>>(index); }
	jint size() { return call_method<"size", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> object) { return call_method<"equals", jboolean>(object); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean containsAll(jni::ref<java::util::Collection> collection) { return call_method<"containsAll", jboolean>(collection); }
	void putAll(jni::ref<java::util::Map> map) { return call_method<"putAll", void>(map); }
	jboolean removeAll(jni::ref<java::util::Collection> collection) { return call_method<"removeAll", jboolean>(collection); }
	jboolean retainAll(jni::ref<java::util::Collection> collection) { return call_method<"retainAll", jboolean>(collection); }
	jni::ref<java::util::Set> entrySet() { return call_method<"entrySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Collection> values() { return call_method<"values", jni::ref<java::util::Collection>>(); }

protected:

	ArrayMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_ARRAYMAP
