// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGAPPPROCESSINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGAPPPROCESSINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class ActivityManager_RunningAppProcessInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::ActivityManager_RunningAppProcessInfo>
{
	static constexpr fixed_string class_name = "android/app/ActivityManager$RunningAppProcessInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGAPPPROCESSINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGAPPPROCESSINFO)
#define SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGAPPPROCESSINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::ActivityManager_RunningAppProcessInfo : public jni::object_base<"android/app/ActivityManager$RunningAppProcessInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint IMPORTANCE_BACKGROUND() { return get_static_field<"IMPORTANCE_BACKGROUND", jint>(); }
	static jint IMPORTANCE_CACHED() { return get_static_field<"IMPORTANCE_CACHED", jint>(); }
	static jint IMPORTANCE_EMPTY() { return get_static_field<"IMPORTANCE_EMPTY", jint>(); }
	static jint IMPORTANCE_FOREGROUND() { return get_static_field<"IMPORTANCE_FOREGROUND", jint>(); }
	static jint IMPORTANCE_FOREGROUND_SERVICE() { return get_static_field<"IMPORTANCE_FOREGROUND_SERVICE", jint>(); }
	static jint IMPORTANCE_GONE() { return get_static_field<"IMPORTANCE_GONE", jint>(); }
	static jint IMPORTANCE_PERCEPTIBLE() { return get_static_field<"IMPORTANCE_PERCEPTIBLE", jint>(); }
	static jint IMPORTANCE_PERCEPTIBLE_PRE_26() { return get_static_field<"IMPORTANCE_PERCEPTIBLE_PRE_26", jint>(); }
	static jint IMPORTANCE_SERVICE() { return get_static_field<"IMPORTANCE_SERVICE", jint>(); }
	static jint IMPORTANCE_TOP_SLEEPING() { return get_static_field<"IMPORTANCE_TOP_SLEEPING", jint>(); }
	static jint IMPORTANCE_VISIBLE() { return get_static_field<"IMPORTANCE_VISIBLE", jint>(); }
	static jint REASON_PROVIDER_IN_USE() { return get_static_field<"REASON_PROVIDER_IN_USE", jint>(); }
	static jint REASON_SERVICE_IN_USE() { return get_static_field<"REASON_SERVICE_IN_USE", jint>(); }
	static jint REASON_UNKNOWN() { return get_static_field<"REASON_UNKNOWN", jint>(); }
	jint importance() { return get_field<"importance", jint>(); }
	void importance(jint v) { set_field<"importance", jint>(v); }
	jint importanceReasonCode() { return get_field<"importanceReasonCode", jint>(); }
	void importanceReasonCode(jint v) { set_field<"importanceReasonCode", jint>(v); }
	jni::ref<android::content::ComponentName> importanceReasonComponent() { return get_field<"importanceReasonComponent", jni::ref<android::content::ComponentName>>(); }
	void importanceReasonComponent(jni::ref<android::content::ComponentName> v) { set_field<"importanceReasonComponent", jni::ref<android::content::ComponentName>>(v); }
	jint importanceReasonPid() { return get_field<"importanceReasonPid", jint>(); }
	void importanceReasonPid(jint v) { set_field<"importanceReasonPid", jint>(v); }
	jint lastTrimLevel() { return get_field<"lastTrimLevel", jint>(); }
	void lastTrimLevel(jint v) { set_field<"lastTrimLevel", jint>(v); }
	jint lru() { return get_field<"lru", jint>(); }
	void lru(jint v) { set_field<"lru", jint>(v); }
	jint pid() { return get_field<"pid", jint>(); }
	void pid(jint v) { set_field<"pid", jint>(v); }
	jni::ref<jni::array<java::lang::String>> pkgList() { return get_field<"pkgList", jni::ref<jni::array<java::lang::String>>>(); }
	void pkgList(jni::ref<jni::array<java::lang::String>> v) { set_field<"pkgList", jni::ref<jni::array<java::lang::String>>>(v); }
	jni::ref<java::lang::String> processName() { return get_field<"processName", jni::ref<java::lang::String>>(); }
	void processName(jni::ref<java::lang::String> v) { set_field<"processName", jni::ref<java::lang::String>>(v); }
	jint uid() { return get_field<"uid", jint>(); }
	void uid(jint v) { set_field<"uid", jint>(v); }

	static jni::ref<android::app::ActivityManager_RunningAppProcessInfo> new_object() { return base_::new_object(); }
	static jni::ref<android::app::ActivityManager_RunningAppProcessInfo> new_object(jni::ref<java::lang::String> pProcessName, jint pPid, jni::ref<jni::array<java::lang::String>> pArr) { return base_::new_object(pProcessName, pPid, pArr); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	void readFromParcel(jni::ref<android::os::Parcel> source) { return call_method<"readFromParcel", void>(source); }

protected:

	ActivityManager_RunningAppProcessInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGAPPPROCESSINFO
