// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_AUTOMATICZENRULE_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_AUTOMATICZENRULE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class AutomaticZenRule; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::AutomaticZenRule>
{
	static constexpr fixed_string class_name = "android/app/AutomaticZenRule";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_AUTOMATICZENRULE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_AUTOMATICZENRULE)
#define SCAPIX_JAVA_API_ANDROID_APP_AUTOMATICZENRULE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::AutomaticZenRule : public jni::object_base<"android/app/AutomaticZenRule",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::app::AutomaticZenRule> new_object(jni::ref<java::lang::String> name, jni::ref<android::content::ComponentName> owner, jni::ref<android::net::Uri> conditionId, jint interruptionFilter, jboolean enabled) { return base_::new_object(name, owner, conditionId, interruptionFilter, enabled); }
	static jni::ref<android::app::AutomaticZenRule> new_object(jni::ref<android::os::Parcel> source) { return base_::new_object(source); }
	jni::ref<android::content::ComponentName> getOwner() { return call_method<"getOwner", jni::ref<android::content::ComponentName>>(); }
	jni::ref<android::net::Uri> getConditionId() { return call_method<"getConditionId", jni::ref<android::net::Uri>>(); }
	jint getInterruptionFilter() { return call_method<"getInterruptionFilter", jint>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	jlong getCreationTime() { return call_method<"getCreationTime", jlong>(); }
	void setConditionId(jni::ref<android::net::Uri> conditionId) { return call_method<"setConditionId", void>(conditionId); }
	void setInterruptionFilter(jint interruptionFilter) { return call_method<"setInterruptionFilter", void>(interruptionFilter); }
	void setName(jni::ref<java::lang::String> name) { return call_method<"setName", void>(name); }
	void setEnabled(jboolean enabled) { return call_method<"setEnabled", void>(enabled); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	AutomaticZenRule(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_AUTOMATICZENRULE
