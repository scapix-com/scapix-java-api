// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WEBKIT_WEBCHROMECLIENT_FWD
#define SCAPIX_JAVA_API_ANDROID_WEBKIT_WEBCHROMECLIENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::webkit { class WebChromeClient; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::webkit::WebChromeClient>
{
	static constexpr fixed_string class_name = "android/webkit/WebChromeClient";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WEBKIT_WEBCHROMECLIENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WEBKIT_WEBCHROMECLIENT)
#define SCAPIX_JAVA_API_ANDROID_WEBKIT_WEBCHROMECLIENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/webkit/ConsoleMessage.h>
#include <scapix/java_api/android/webkit/GeolocationPermissions_Callback.h>
#include <scapix/java_api/android/webkit/JsPromptResult.h>
#include <scapix/java_api/android/webkit/JsResult.h>
#include <scapix/java_api/android/webkit/PermissionRequest.h>
#include <scapix/java_api/android/webkit/ValueCallback.h>
#include <scapix/java_api/android/webkit/WebChromeClient_CustomViewCallback.h>
#include <scapix/java_api/android/webkit/WebChromeClient_FileChooserParams.h>
#include <scapix/java_api/android/webkit/WebStorage_QuotaUpdater.h>
#include <scapix/java_api/android/webkit/WebView.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::webkit::WebChromeClient : public jni::object_base<"android/webkit/WebChromeClient",
	java::lang::Object>
{
public:

	using FileChooserParams = WebChromeClient_FileChooserParams;
	using CustomViewCallback = WebChromeClient_CustomViewCallback;

	static jni::ref<android::webkit::WebChromeClient> new_object() { return base_::new_object(); }
	void onProgressChanged(jni::ref<android::webkit::WebView> view, jint newProgress) { return call_method<"onProgressChanged", void>(view, newProgress); }
	void onReceivedTitle(jni::ref<android::webkit::WebView> view, jni::ref<java::lang::String> title) { return call_method<"onReceivedTitle", void>(view, title); }
	void onReceivedIcon(jni::ref<android::webkit::WebView> view, jni::ref<android::graphics::Bitmap> icon) { return call_method<"onReceivedIcon", void>(view, icon); }
	void onReceivedTouchIconUrl(jni::ref<android::webkit::WebView> view, jni::ref<java::lang::String> url, jboolean precomposed) { return call_method<"onReceivedTouchIconUrl", void>(view, url, precomposed); }
	void onShowCustomView(jni::ref<android::view::View> view, jni::ref<android::webkit::WebChromeClient_CustomViewCallback> callback) { return call_method<"onShowCustomView", void>(view, callback); }
	void onShowCustomView(jni::ref<android::view::View> view, jint requestedOrientation, jni::ref<android::webkit::WebChromeClient_CustomViewCallback> callback) { return call_method<"onShowCustomView", void>(view, requestedOrientation, callback); }
	void onHideCustomView() { return call_method<"onHideCustomView", void>(); }
	jboolean onCreateWindow(jni::ref<android::webkit::WebView> view, jboolean isDialog, jboolean isUserGesture, jni::ref<android::os::Message> resultMsg) { return call_method<"onCreateWindow", jboolean>(view, isDialog, isUserGesture, resultMsg); }
	void onRequestFocus(jni::ref<android::webkit::WebView> view) { return call_method<"onRequestFocus", void>(view); }
	void onCloseWindow(jni::ref<android::webkit::WebView> window) { return call_method<"onCloseWindow", void>(window); }
	jboolean onJsAlert(jni::ref<android::webkit::WebView> view, jni::ref<java::lang::String> url, jni::ref<java::lang::String> message, jni::ref<android::webkit::JsResult> result) { return call_method<"onJsAlert", jboolean>(view, url, message, result); }
	jboolean onJsConfirm(jni::ref<android::webkit::WebView> view, jni::ref<java::lang::String> url, jni::ref<java::lang::String> message, jni::ref<android::webkit::JsResult> result) { return call_method<"onJsConfirm", jboolean>(view, url, message, result); }
	jboolean onJsPrompt(jni::ref<android::webkit::WebView> view, jni::ref<java::lang::String> url, jni::ref<java::lang::String> message, jni::ref<java::lang::String> defaultValue, jni::ref<android::webkit::JsPromptResult> result) { return call_method<"onJsPrompt", jboolean>(view, url, message, defaultValue, result); }
	jboolean onJsBeforeUnload(jni::ref<android::webkit::WebView> view, jni::ref<java::lang::String> url, jni::ref<java::lang::String> message, jni::ref<android::webkit::JsResult> result) { return call_method<"onJsBeforeUnload", jboolean>(view, url, message, result); }
	void onExceededDatabaseQuota(jni::ref<java::lang::String> url, jni::ref<java::lang::String> databaseIdentifier, jlong quota, jlong p4, jlong estimatedDatabaseSize, jni::ref<android::webkit::WebStorage_QuotaUpdater> p6) { return call_method<"onExceededDatabaseQuota", void>(url, databaseIdentifier, quota, p4, estimatedDatabaseSize, p6); }
	void onReachedMaxAppCacheSize(jlong requiredStorage, jlong p2, jni::ref<android::webkit::WebStorage_QuotaUpdater> quota) { return call_method<"onReachedMaxAppCacheSize", void>(requiredStorage, p2, quota); }
	void onGeolocationPermissionsShowPrompt(jni::ref<java::lang::String> origin, jni::ref<android::webkit::GeolocationPermissions_Callback> callback) { return call_method<"onGeolocationPermissionsShowPrompt", void>(origin, callback); }
	void onGeolocationPermissionsHidePrompt() { return call_method<"onGeolocationPermissionsHidePrompt", void>(); }
	void onPermissionRequest(jni::ref<android::webkit::PermissionRequest> request) { return call_method<"onPermissionRequest", void>(request); }
	void onPermissionRequestCanceled(jni::ref<android::webkit::PermissionRequest> request) { return call_method<"onPermissionRequestCanceled", void>(request); }
	jboolean onJsTimeout() { return call_method<"onJsTimeout", jboolean>(); }
	void onConsoleMessage(jni::ref<java::lang::String> message, jint lineNumber, jni::ref<java::lang::String> sourceID) { return call_method<"onConsoleMessage", void>(message, lineNumber, sourceID); }
	jboolean onConsoleMessage(jni::ref<android::webkit::ConsoleMessage> consoleMessage) { return call_method<"onConsoleMessage", jboolean>(consoleMessage); }
	jni::ref<android::graphics::Bitmap> getDefaultVideoPoster() { return call_method<"getDefaultVideoPoster", jni::ref<android::graphics::Bitmap>>(); }
	jni::ref<android::view::View> getVideoLoadingProgressView() { return call_method<"getVideoLoadingProgressView", jni::ref<android::view::View>>(); }
	void getVisitedHistory(jni::ref<android::webkit::ValueCallback> callback) { return call_method<"getVisitedHistory", void>(callback); }
	jboolean onShowFileChooser(jni::ref<android::webkit::WebView> webView, jni::ref<android::webkit::ValueCallback> filePathCallback, jni::ref<android::webkit::WebChromeClient_FileChooserParams> fileChooserParams) { return call_method<"onShowFileChooser", jboolean>(webView, filePathCallback, fileChooserParams); }

protected:

	WebChromeClient(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WEBKIT_WEBCHROMECLIENT
