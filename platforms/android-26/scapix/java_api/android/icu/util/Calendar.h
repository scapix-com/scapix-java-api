// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_UTIL_CALENDAR_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_UTIL_CALENDAR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::util { class Calendar; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::util::Calendar>
{
	static constexpr fixed_string class_name = "android/icu/util/Calendar";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_UTIL_CALENDAR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_UTIL_CALENDAR)
#define SCAPIX_JAVA_API_ANDROID_ICU_UTIL_CALENDAR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/DateFormat.h>
#include <scapix/java_api/android/icu/util/Calendar_WeekData.h>
#include <scapix/java_api/android/icu/util/TimeZone.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::util::Calendar : public jni::object_base<"android/icu/util/Calendar",
	java::lang::Object,
	java::io::Serializable,
	java::lang::Cloneable,
	java::lang::Comparable>
{
public:

	using WeekData = Calendar_WeekData;

	static jint AM() { return get_static_field<"AM", jint>(); }
	static jint AM_PM() { return get_static_field<"AM_PM", jint>(); }
	static jint APRIL() { return get_static_field<"APRIL", jint>(); }
	static jint AUGUST() { return get_static_field<"AUGUST", jint>(); }
	static jint DATE() { return get_static_field<"DATE", jint>(); }
	static jint DAY_OF_MONTH() { return get_static_field<"DAY_OF_MONTH", jint>(); }
	static jint DAY_OF_WEEK() { return get_static_field<"DAY_OF_WEEK", jint>(); }
	static jint DAY_OF_WEEK_IN_MONTH() { return get_static_field<"DAY_OF_WEEK_IN_MONTH", jint>(); }
	static jint DAY_OF_YEAR() { return get_static_field<"DAY_OF_YEAR", jint>(); }
	static jint DECEMBER() { return get_static_field<"DECEMBER", jint>(); }
	static jint DOW_LOCAL() { return get_static_field<"DOW_LOCAL", jint>(); }
	static jint DST_OFFSET() { return get_static_field<"DST_OFFSET", jint>(); }
	static jint ERA() { return get_static_field<"ERA", jint>(); }
	static jint EXTENDED_YEAR() { return get_static_field<"EXTENDED_YEAR", jint>(); }
	static jint FEBRUARY() { return get_static_field<"FEBRUARY", jint>(); }
	static jint FRIDAY() { return get_static_field<"FRIDAY", jint>(); }
	static jint HOUR() { return get_static_field<"HOUR", jint>(); }
	static jint HOUR_OF_DAY() { return get_static_field<"HOUR_OF_DAY", jint>(); }
	static jint IS_LEAP_MONTH() { return get_static_field<"IS_LEAP_MONTH", jint>(); }
	static jint JANUARY() { return get_static_field<"JANUARY", jint>(); }
	static jint JULIAN_DAY() { return get_static_field<"JULIAN_DAY", jint>(); }
	static jint JULY() { return get_static_field<"JULY", jint>(); }
	static jint JUNE() { return get_static_field<"JUNE", jint>(); }
	static jint MARCH() { return get_static_field<"MARCH", jint>(); }
	static jint MAY() { return get_static_field<"MAY", jint>(); }
	static jint MILLISECOND() { return get_static_field<"MILLISECOND", jint>(); }
	static jint MILLISECONDS_IN_DAY() { return get_static_field<"MILLISECONDS_IN_DAY", jint>(); }
	static jint MINUTE() { return get_static_field<"MINUTE", jint>(); }
	static jint MONDAY() { return get_static_field<"MONDAY", jint>(); }
	static jint MONTH() { return get_static_field<"MONTH", jint>(); }
	static jint NOVEMBER() { return get_static_field<"NOVEMBER", jint>(); }
	static jint OCTOBER() { return get_static_field<"OCTOBER", jint>(); }
	static jint PM() { return get_static_field<"PM", jint>(); }
	static jint SATURDAY() { return get_static_field<"SATURDAY", jint>(); }
	static jint SECOND() { return get_static_field<"SECOND", jint>(); }
	static jint SEPTEMBER() { return get_static_field<"SEPTEMBER", jint>(); }
	static jint SUNDAY() { return get_static_field<"SUNDAY", jint>(); }
	static jint THURSDAY() { return get_static_field<"THURSDAY", jint>(); }
	static jint TUESDAY() { return get_static_field<"TUESDAY", jint>(); }
	static jint UNDECIMBER() { return get_static_field<"UNDECIMBER", jint>(); }
	static jint WALLTIME_FIRST() { return get_static_field<"WALLTIME_FIRST", jint>(); }
	static jint WALLTIME_LAST() { return get_static_field<"WALLTIME_LAST", jint>(); }
	static jint WALLTIME_NEXT_VALID() { return get_static_field<"WALLTIME_NEXT_VALID", jint>(); }
	static jint WEDNESDAY() { return get_static_field<"WEDNESDAY", jint>(); }
	static jint WEEK_OF_MONTH() { return get_static_field<"WEEK_OF_MONTH", jint>(); }
	static jint WEEK_OF_YEAR() { return get_static_field<"WEEK_OF_YEAR", jint>(); }
	static jint YEAR() { return get_static_field<"YEAR", jint>(); }
	static jint YEAR_WOY() { return get_static_field<"YEAR_WOY", jint>(); }
	static jint ZONE_OFFSET() { return get_static_field<"ZONE_OFFSET", jint>(); }

	static jni::ref<android::icu::util::Calendar> getInstance() { return call_static_method<"getInstance", jni::ref<android::icu::util::Calendar>>(); }
	static jni::ref<android::icu::util::Calendar> getInstance(jni::ref<android::icu::util::TimeZone> zone) { return call_static_method<"getInstance", jni::ref<android::icu::util::Calendar>>(zone); }
	static jni::ref<android::icu::util::Calendar> getInstance(jni::ref<java::util::Locale> aLocale) { return call_static_method<"getInstance", jni::ref<android::icu::util::Calendar>>(aLocale); }
	static jni::ref<android::icu::util::Calendar> getInstance(jni::ref<android::icu::util::ULocale> locale) { return call_static_method<"getInstance", jni::ref<android::icu::util::Calendar>>(locale); }
	static jni::ref<android::icu::util::Calendar> getInstance(jni::ref<android::icu::util::TimeZone> zone, jni::ref<java::util::Locale> aLocale) { return call_static_method<"getInstance", jni::ref<android::icu::util::Calendar>>(zone, aLocale); }
	static jni::ref<android::icu::util::Calendar> getInstance(jni::ref<android::icu::util::TimeZone> zone, jni::ref<android::icu::util::ULocale> locale) { return call_static_method<"getInstance", jni::ref<android::icu::util::Calendar>>(zone, locale); }
	static jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_static_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }
	static jni::ref<jni::array<java::lang::String>> getKeywordValuesForLocale(jni::ref<java::lang::String> key, jni::ref<android::icu::util::ULocale> locale, jboolean commonlyUsed) { return call_static_method<"getKeywordValuesForLocale", jni::ref<jni::array<java::lang::String>>>(key, locale, commonlyUsed); }
	jni::ref<java::util::Date> getTime() { return call_method<"getTime", jni::ref<java::util::Date>>(); }
	void setTime(jni::ref<java::util::Date> date) { return call_method<"setTime", void>(date); }
	jlong getTimeInMillis() { return call_method<"getTimeInMillis", jlong>(); }
	void setTimeInMillis(jlong millis) { return call_method<"setTimeInMillis", void>(millis); }
	jint get(jint field) { return call_method<"get", jint>(field); }
	void set(jint field, jint value) { return call_method<"set", void>(field, value); }
	void set(jint year, jint month, jint date) { return call_method<"set", void>(year, month, date); }
	void set(jint year, jint month, jint date, jint hour, jint minute) { return call_method<"set", void>(year, month, date, hour, minute); }
	void set(jint year, jint month, jint date, jint hour, jint minute, jint second) { return call_method<"set", void>(year, month, date, hour, minute, second); }
	void clear() { return call_method<"clear", void>(); }
	void clear(jint field) { return call_method<"clear", void>(field); }
	jboolean isSet(jint field) { return call_method<"isSet", jboolean>(field); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jboolean isEquivalentTo(jni::ref<android::icu::util::Calendar> other) { return call_method<"isEquivalentTo", jboolean>(other); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean before(jni::ref<java::lang::Object> when) { return call_method<"before", jboolean>(when); }
	jboolean after(jni::ref<java::lang::Object> when) { return call_method<"after", jboolean>(when); }
	jint getActualMaximum(jint field) { return call_method<"getActualMaximum", jint>(field); }
	jint getActualMinimum(jint field) { return call_method<"getActualMinimum", jint>(field); }
	void roll(jint field, jboolean up) { return call_method<"roll", void>(field, up); }
	void roll(jint field, jint amount) { return call_method<"roll", void>(field, amount); }
	void add(jint field, jint amount) { return call_method<"add", void>(field, amount); }
	jni::ref<java::lang::String> getDisplayName(jni::ref<java::util::Locale> loc) { return call_method<"getDisplayName", jni::ref<java::lang::String>>(loc); }
	jni::ref<java::lang::String> getDisplayName(jni::ref<android::icu::util::ULocale> loc) { return call_method<"getDisplayName", jni::ref<java::lang::String>>(loc); }
	jint compareTo(jni::ref<android::icu::util::Calendar> that) { return call_method<"compareTo", jint>(that); }
	jni::ref<android::icu::text::DateFormat> getDateTimeFormat(jint dateStyle, jint timeStyle, jni::ref<java::util::Locale> loc) { return call_method<"getDateTimeFormat", jni::ref<android::icu::text::DateFormat>>(dateStyle, timeStyle, loc); }
	jni::ref<android::icu::text::DateFormat> getDateTimeFormat(jint dateStyle, jint timeStyle, jni::ref<android::icu::util::ULocale> loc) { return call_method<"getDateTimeFormat", jni::ref<android::icu::text::DateFormat>>(dateStyle, timeStyle, loc); }
	jint fieldDifference(jni::ref<java::util::Date> when, jint field) { return call_method<"fieldDifference", jint>(when, field); }
	void setTimeZone(jni::ref<android::icu::util::TimeZone> value) { return call_method<"setTimeZone", void>(value); }
	jni::ref<android::icu::util::TimeZone> getTimeZone() { return call_method<"getTimeZone", jni::ref<android::icu::util::TimeZone>>(); }
	void setLenient(jboolean lenient) { return call_method<"setLenient", void>(lenient); }
	jboolean isLenient() { return call_method<"isLenient", jboolean>(); }
	void setRepeatedWallTimeOption(jint option) { return call_method<"setRepeatedWallTimeOption", void>(option); }
	jint getRepeatedWallTimeOption() { return call_method<"getRepeatedWallTimeOption", jint>(); }
	void setSkippedWallTimeOption(jint option) { return call_method<"setSkippedWallTimeOption", void>(option); }
	jint getSkippedWallTimeOption() { return call_method<"getSkippedWallTimeOption", jint>(); }
	void setFirstDayOfWeek(jint value) { return call_method<"setFirstDayOfWeek", void>(value); }
	jint getFirstDayOfWeek() { return call_method<"getFirstDayOfWeek", jint>(); }
	void setMinimalDaysInFirstWeek(jint value) { return call_method<"setMinimalDaysInFirstWeek", void>(value); }
	jint getMinimalDaysInFirstWeek() { return call_method<"getMinimalDaysInFirstWeek", jint>(); }
	jint getMinimum(jint field) { return call_method<"getMinimum", jint>(field); }
	jint getMaximum(jint field) { return call_method<"getMaximum", jint>(field); }
	jint getGreatestMinimum(jint field) { return call_method<"getGreatestMinimum", jint>(field); }
	jint getLeastMaximum(jint field) { return call_method<"getLeastMaximum", jint>(field); }
	jboolean isWeekend(jni::ref<java::util::Date> date) { return call_method<"isWeekend", jboolean>(date); }
	jboolean isWeekend() { return call_method<"isWeekend", jboolean>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<android::icu::util::Calendar_WeekData> getWeekDataForRegion(jni::ref<java::lang::String> region) { return call_static_method<"getWeekDataForRegion", jni::ref<android::icu::util::Calendar_WeekData>>(region); }
	jni::ref<android::icu::util::Calendar_WeekData> getWeekData() { return call_method<"getWeekData", jni::ref<android::icu::util::Calendar_WeekData>>(); }
	jni::ref<android::icu::util::Calendar> setWeekData(jni::ref<android::icu::util::Calendar_WeekData> wdata) { return call_method<"setWeekData", jni::ref<android::icu::util::Calendar>>(wdata); }
	jint getFieldCount() { return call_method<"getFieldCount", jint>(); }
	jni::ref<java::lang::String> getType() { return call_method<"getType", jni::ref<java::lang::String>>(); }

protected:

	Calendar(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_UTIL_CALENDAR
