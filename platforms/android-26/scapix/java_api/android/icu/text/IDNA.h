// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_IDNA_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_IDNA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class IDNA; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::IDNA>
{
	static constexpr fixed_string class_name = "android/icu/text/IDNA";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_IDNA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_IDNA)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_IDNA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/IDNA_Info.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/android/icu/text/IDNA_Error.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::IDNA : public jni::object_base<"android/icu/text/IDNA",
	java::lang::Object>
{
public:

	using Error = IDNA_Error;
	using Info = IDNA_Info;

	static jint CHECK_BIDI() { return get_static_field<"CHECK_BIDI", jint>(); }
	static jint CHECK_CONTEXTJ() { return get_static_field<"CHECK_CONTEXTJ", jint>(); }
	static jint CHECK_CONTEXTO() { return get_static_field<"CHECK_CONTEXTO", jint>(); }
	static jint DEFAULT() { return get_static_field<"DEFAULT", jint>(); }
	static jint NONTRANSITIONAL_TO_ASCII() { return get_static_field<"NONTRANSITIONAL_TO_ASCII", jint>(); }
	static jint NONTRANSITIONAL_TO_UNICODE() { return get_static_field<"NONTRANSITIONAL_TO_UNICODE", jint>(); }
	static jint USE_STD3_RULES() { return get_static_field<"USE_STD3_RULES", jint>(); }

	static jni::ref<android::icu::text::IDNA> getUTS46Instance(jint options) { return call_static_method<"getUTS46Instance", jni::ref<android::icu::text::IDNA>>(options); }
	jni::ref<java::lang::StringBuilder> labelToASCII(jni::ref<java::lang::CharSequence> p1, jni::ref<java::lang::StringBuilder> p2, jni::ref<android::icu::text::IDNA_Info> p3) { return call_method<"labelToASCII", jni::ref<java::lang::StringBuilder>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuilder> labelToUnicode(jni::ref<java::lang::CharSequence> p1, jni::ref<java::lang::StringBuilder> p2, jni::ref<android::icu::text::IDNA_Info> p3) { return call_method<"labelToUnicode", jni::ref<java::lang::StringBuilder>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuilder> nameToASCII(jni::ref<java::lang::CharSequence> p1, jni::ref<java::lang::StringBuilder> p2, jni::ref<android::icu::text::IDNA_Info> p3) { return call_method<"nameToASCII", jni::ref<java::lang::StringBuilder>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuilder> nameToUnicode(jni::ref<java::lang::CharSequence> p1, jni::ref<java::lang::StringBuilder> p2, jni::ref<android::icu::text::IDNA_Info> p3) { return call_method<"nameToUnicode", jni::ref<java::lang::StringBuilder>>(p1, p2, p3); }

protected:

	IDNA(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_IDNA
