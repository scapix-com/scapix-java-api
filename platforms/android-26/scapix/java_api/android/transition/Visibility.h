// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/transition/Transition.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TRANSITION_VISIBILITY_FWD
#define SCAPIX_JAVA_API_ANDROID_TRANSITION_VISIBILITY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::transition { class Visibility; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::transition::Visibility>
{
	static constexpr fixed_string class_name = "android/transition/Visibility";
	using base_classes = std::tuple<scapix::java_api::android::transition::Transition>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TRANSITION_VISIBILITY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TRANSITION_VISIBILITY)
#define SCAPIX_JAVA_API_ANDROID_TRANSITION_VISIBILITY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/animation/Animator.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/transition/TransitionValues.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::transition::Visibility : public jni::object_base<"android/transition/Visibility",
	android::transition::Transition>
{
public:

	static jint MODE_IN() { return get_static_field<"MODE_IN", jint>(); }
	static jint MODE_OUT() { return get_static_field<"MODE_OUT", jint>(); }

	static jni::ref<android::transition::Visibility> new_object() { return base_::new_object(); }
	static jni::ref<android::transition::Visibility> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	void setMode(jint mode) { return call_method<"setMode", void>(mode); }
	jint getMode() { return call_method<"getMode", jint>(); }
	jni::ref<jni::array<java::lang::String>> getTransitionProperties() { return call_method<"getTransitionProperties", jni::ref<jni::array<java::lang::String>>>(); }
	void captureStartValues(jni::ref<android::transition::TransitionValues> transitionValues) { return call_method<"captureStartValues", void>(transitionValues); }
	void captureEndValues(jni::ref<android::transition::TransitionValues> transitionValues) { return call_method<"captureEndValues", void>(transitionValues); }
	jboolean isVisible(jni::ref<android::transition::TransitionValues> values) { return call_method<"isVisible", jboolean>(values); }
	jni::ref<android::animation::Animator> createAnimator(jni::ref<android::view::ViewGroup> sceneRoot, jni::ref<android::transition::TransitionValues> startValues, jni::ref<android::transition::TransitionValues> endValues) { return call_method<"createAnimator", jni::ref<android::animation::Animator>>(sceneRoot, startValues, endValues); }
	jni::ref<android::animation::Animator> onAppear(jni::ref<android::view::ViewGroup> sceneRoot, jni::ref<android::transition::TransitionValues> startValues, jint startVisibility, jni::ref<android::transition::TransitionValues> endValues, jint endVisibility) { return call_method<"onAppear", jni::ref<android::animation::Animator>>(sceneRoot, startValues, startVisibility, endValues, endVisibility); }
	jni::ref<android::animation::Animator> onAppear(jni::ref<android::view::ViewGroup> sceneRoot, jni::ref<android::view::View> view, jni::ref<android::transition::TransitionValues> startValues, jni::ref<android::transition::TransitionValues> endValues) { return call_method<"onAppear", jni::ref<android::animation::Animator>>(sceneRoot, view, startValues, endValues); }
	jni::ref<android::animation::Animator> onDisappear(jni::ref<android::view::ViewGroup> sceneRoot, jni::ref<android::transition::TransitionValues> startValues, jint startVisibility, jni::ref<android::transition::TransitionValues> endValues, jint endVisibility) { return call_method<"onDisappear", jni::ref<android::animation::Animator>>(sceneRoot, startValues, startVisibility, endValues, endVisibility); }
	jboolean isTransitionRequired(jni::ref<android::transition::TransitionValues> startValues, jni::ref<android::transition::TransitionValues> newValues) { return call_method<"isTransitionRequired", jboolean>(startValues, newValues); }
	jni::ref<android::animation::Animator> onDisappear(jni::ref<android::view::ViewGroup> sceneRoot, jni::ref<android::view::View> view, jni::ref<android::transition::TransitionValues> startValues, jni::ref<android::transition::TransitionValues> endValues) { return call_method<"onDisappear", jni::ref<android::animation::Animator>>(sceneRoot, view, startValues, endValues); }

protected:

	Visibility(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TRANSITION_VISIBILITY
