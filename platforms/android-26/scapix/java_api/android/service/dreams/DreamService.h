// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/app/Service.h>
#include <scapix/java_api/android/view/Window_Callback.h>

#ifndef SCAPIX_JAVA_API_ANDROID_SERVICE_DREAMS_DREAMSERVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_SERVICE_DREAMS_DREAMSERVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::service::dreams { class DreamService; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::service::dreams::DreamService>
{
	static constexpr fixed_string class_name = "android/service/dreams/DreamService";
	using base_classes = std::tuple<scapix::java_api::android::app::Service, scapix::java_api::android::view::Window_Callback>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SERVICE_DREAMS_DREAMSERVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_SERVICE_DREAMS_DREAMSERVICE)
#define SCAPIX_JAVA_API_ANDROID_SERVICE_DREAMS_DREAMSERVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/view/ActionMode.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/Menu.h>
#include <scapix/java_api/android/view/MenuItem.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/SearchEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/Window.h>
#include <scapix/java_api/android/view/WindowManager.h>
#include <scapix/java_api/android/view/WindowManager_LayoutParams.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::service::dreams::DreamService : public jni::object_base<"android/service/dreams/DreamService",
	android::app::Service,
	android::view::Window_Callback>
{
public:

	static jni::ref<java::lang::String> DREAM_META_DATA() { return get_static_field<"DREAM_META_DATA", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVICE_INTERFACE() { return get_static_field<"SERVICE_INTERFACE", jni::ref<java::lang::String>>(); }

	static jni::ref<android::service::dreams::DreamService> new_object() { return base_::new_object(); }
	jboolean dispatchKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEvent", jboolean>(event); }
	jboolean dispatchKeyShortcutEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyShortcutEvent", jboolean>(event); }
	jboolean dispatchTouchEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchTouchEvent", jboolean>(event); }
	jboolean dispatchTrackballEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchTrackballEvent", jboolean>(event); }
	jboolean dispatchGenericMotionEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchGenericMotionEvent", jboolean>(event); }
	jboolean dispatchPopulateAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"dispatchPopulateAccessibilityEvent", jboolean>(event); }
	jni::ref<android::view::View> onCreatePanelView(jint featureId) { return call_method<"onCreatePanelView", jni::ref<android::view::View>>(featureId); }
	jboolean onCreatePanelMenu(jint featureId, jni::ref<android::view::Menu> menu) { return call_method<"onCreatePanelMenu", jboolean>(featureId, menu); }
	jboolean onPreparePanel(jint featureId, jni::ref<android::view::View> view, jni::ref<android::view::Menu> menu) { return call_method<"onPreparePanel", jboolean>(featureId, view, menu); }
	jboolean onMenuOpened(jint featureId, jni::ref<android::view::Menu> menu) { return call_method<"onMenuOpened", jboolean>(featureId, menu); }
	jboolean onMenuItemSelected(jint featureId, jni::ref<android::view::MenuItem> item) { return call_method<"onMenuItemSelected", jboolean>(featureId, item); }
	void onWindowAttributesChanged(jni::ref<android::view::WindowManager_LayoutParams> attrs) { return call_method<"onWindowAttributesChanged", void>(attrs); }
	void onContentChanged() { return call_method<"onContentChanged", void>(); }
	void onWindowFocusChanged(jboolean hasFocus) { return call_method<"onWindowFocusChanged", void>(hasFocus); }
	void onAttachedToWindow() { return call_method<"onAttachedToWindow", void>(); }
	void onDetachedFromWindow() { return call_method<"onDetachedFromWindow", void>(); }
	void onPanelClosed(jint featureId, jni::ref<android::view::Menu> menu) { return call_method<"onPanelClosed", void>(featureId, menu); }
	jboolean onSearchRequested(jni::ref<android::view::SearchEvent> event) { return call_method<"onSearchRequested", jboolean>(event); }
	jboolean onSearchRequested() { return call_method<"onSearchRequested", jboolean>(); }
	jni::ref<android::view::ActionMode> onWindowStartingActionMode(jni::ref<android::view::ActionMode_Callback> callback) { return call_method<"onWindowStartingActionMode", jni::ref<android::view::ActionMode>>(callback); }
	jni::ref<android::view::ActionMode> onWindowStartingActionMode(jni::ref<android::view::ActionMode_Callback> callback, jint type) { return call_method<"onWindowStartingActionMode", jni::ref<android::view::ActionMode>>(callback, type); }
	void onActionModeStarted(jni::ref<android::view::ActionMode> mode) { return call_method<"onActionModeStarted", void>(mode); }
	void onActionModeFinished(jni::ref<android::view::ActionMode> mode) { return call_method<"onActionModeFinished", void>(mode); }
	jni::ref<android::view::WindowManager> getWindowManager() { return call_method<"getWindowManager", jni::ref<android::view::WindowManager>>(); }
	jni::ref<android::view::Window> getWindow() { return call_method<"getWindow", jni::ref<android::view::Window>>(); }
	void setContentView(jint layoutResID) { return call_method<"setContentView", void>(layoutResID); }
	void setContentView(jni::ref<android::view::View> view) { return call_method<"setContentView", void>(view); }
	void setContentView(jni::ref<android::view::View> view, jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"setContentView", void>(view, params); }
	void addContentView(jni::ref<android::view::View> view, jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"addContentView", void>(view, params); }
	jni::ref<android::view::View> findViewById(jint id) { return call_method<"findViewById", jni::ref<android::view::View>>(id); }
	void setInteractive(jboolean interactive) { return call_method<"setInteractive", void>(interactive); }
	jboolean isInteractive() { return call_method<"isInteractive", jboolean>(); }
	void setFullscreen(jboolean fullscreen) { return call_method<"setFullscreen", void>(fullscreen); }
	jboolean isFullscreen() { return call_method<"isFullscreen", jboolean>(); }
	void setScreenBright(jboolean screenBright) { return call_method<"setScreenBright", void>(screenBright); }
	jboolean isScreenBright() { return call_method<"isScreenBright", jboolean>(); }
	void onCreate() { return call_method<"onCreate", void>(); }
	void onDreamingStarted() { return call_method<"onDreamingStarted", void>(); }
	void onDreamingStopped() { return call_method<"onDreamingStopped", void>(); }
	void onWakeUp() { return call_method<"onWakeUp", void>(); }
	jni::ref<android::os::IBinder> onBind(jni::ref<android::content::Intent> intent) { return call_method<"onBind", jni::ref<android::os::IBinder>>(intent); }
	void finish() { return call_method<"finish", void>(); }
	void wakeUp() { return call_method<"wakeUp", void>(); }
	void onDestroy() { return call_method<"onDestroy", void>(); }

protected:

	DreamService(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SERVICE_DREAMS_DREAMSERVICE
