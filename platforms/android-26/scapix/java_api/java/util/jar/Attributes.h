// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::jar { class Attributes; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::jar::Attributes>
{
	static constexpr fixed_string class_name = "java/util/jar/Attributes";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::Map, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES)
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/jar/Attributes_Name.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::jar::Attributes : public jni::object_base<"java/util/jar/Attributes",
	java::lang::Object,
	java::util::Map,
	java::lang::Cloneable>
{
public:

	using Name = Attributes_Name;

	static jni::ref<java::util::jar::Attributes> new_object() { return base_::new_object(); }
	static jni::ref<java::util::jar::Attributes> new_object(jint size) { return base_::new_object(size); }
	static jni::ref<java::util::jar::Attributes> new_object(jni::ref<java::util::jar::Attributes> attr) { return base_::new_object(attr); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> name) { return call_method<"get", jni::ref<java::lang::Object>>(name); }
	jni::ref<java::lang::String> getValue(jni::ref<java::lang::String> name) { return call_method<"getValue", jni::ref<java::lang::String>>(name); }
	jni::ref<java::lang::String> getValue(jni::ref<java::util::jar::Attributes_Name> name) { return call_method<"getValue", jni::ref<java::lang::String>>(name); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> name, jni::ref<java::lang::Object> value) { return call_method<"put", jni::ref<java::lang::Object>>(name, value); }
	jni::ref<java::lang::String> putValue(jni::ref<java::lang::String> name, jni::ref<java::lang::String> value) { return call_method<"putValue", jni::ref<java::lang::String>>(name, value); }
	jni::ref<java::lang::Object> remove(jni::ref<java::lang::Object> name) { return call_method<"remove", jni::ref<java::lang::Object>>(name); }
	jboolean containsValue(jni::ref<java::lang::Object> value) { return call_method<"containsValue", jboolean>(value); }
	jboolean containsKey(jni::ref<java::lang::Object> name) { return call_method<"containsKey", jboolean>(name); }
	void putAll(jni::ref<java::util::Map> attr) { return call_method<"putAll", void>(attr); }
	void clear() { return call_method<"clear", void>(); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Collection> values() { return call_method<"values", jni::ref<java::util::Collection>>(); }
	jni::ref<java::util::Set> entrySet() { return call_method<"entrySet", jni::ref<java::util::Set>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	Attributes(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES
