// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/locks/Lock.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::locks { class ReentrantReadWriteLock_WriteLock; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::locks::ReentrantReadWriteLock_WriteLock>
{
	static constexpr fixed_string class_name = "java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::locks::Lock, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/concurrent/locks/Condition.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::locks::ReentrantReadWriteLock_WriteLock : public jni::object_base<"java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock",
	java::lang::Object,
	java::util::concurrent::locks::Lock,
	java::io::Serializable>
{
public:

	void lock() { return call_method<"lock", void>(); }
	void lockInterruptibly() { return call_method<"lockInterruptibly", void>(); }
	jboolean tryLock() { return call_method<"tryLock", jboolean>(); }
	jboolean tryLock(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"tryLock", jboolean>(timeout, p2); }
	void unlock() { return call_method<"unlock", void>(); }
	jni::ref<java::util::concurrent::locks::Condition> newCondition() { return call_method<"newCondition", jni::ref<java::util::concurrent::locks::Condition>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean isHeldByCurrentThread() { return call_method<"isHeldByCurrentThread", jboolean>(); }
	jint getHoldCount() { return call_method<"getHoldCount", jint>(); }

protected:

	ReentrantReadWriteLock_WriteLock(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_WRITELOCK
