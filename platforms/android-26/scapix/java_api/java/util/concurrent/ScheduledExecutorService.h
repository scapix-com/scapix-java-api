// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ScheduledExecutorService; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ScheduledExecutorService>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ScheduledExecutorService";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::ExecutorService>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/ScheduledFuture.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::ScheduledExecutorService : public jni::object_base<"java/util/concurrent/ScheduledExecutorService",
	java::lang::Object,
	java::util::concurrent::ExecutorService>
{
public:

	jni::ref<java::util::concurrent::ScheduledFuture> schedule(jni::ref<java::lang::Runnable> p1, jlong p2, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"schedule", jni::ref<java::util::concurrent::ScheduledFuture>>(p1, p2, p3); }
	jni::ref<java::util::concurrent::ScheduledFuture> schedule(jni::ref<java::util::concurrent::Callable> p1, jlong p2, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"schedule", jni::ref<java::util::concurrent::ScheduledFuture>>(p1, p2, p3); }
	jni::ref<java::util::concurrent::ScheduledFuture> scheduleAtFixedRate(jni::ref<java::lang::Runnable> p1, jlong p2, jlong p3, jni::ref<java::util::concurrent::TimeUnit> p4) { return call_method<"scheduleAtFixedRate", jni::ref<java::util::concurrent::ScheduledFuture>>(p1, p2, p3, p4); }
	jni::ref<java::util::concurrent::ScheduledFuture> scheduleWithFixedDelay(jni::ref<java::lang::Runnable> p1, jlong p2, jlong p3, jni::ref<java::util::concurrent::TimeUnit> p4) { return call_method<"scheduleWithFixedDelay", jni::ref<java::util::concurrent::ScheduledFuture>>(p1, p2, p3, p4); }

protected:

	ScheduledExecutorService(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDEXECUTORSERVICE
