// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SEMAPHORE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SEMAPHORE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class Semaphore; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::Semaphore>
{
	static constexpr fixed_string class_name = "java/util/concurrent/Semaphore";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SEMAPHORE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SEMAPHORE)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SEMAPHORE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::Semaphore : public jni::object_base<"java/util/concurrent/Semaphore",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::util::concurrent::Semaphore> new_object(jint permits) { return base_::new_object(permits); }
	static jni::ref<java::util::concurrent::Semaphore> new_object(jint permits, jboolean fair) { return base_::new_object(permits, fair); }
	void acquire() { return call_method<"acquire", void>(); }
	void acquireUninterruptibly() { return call_method<"acquireUninterruptibly", void>(); }
	jboolean tryAcquire() { return call_method<"tryAcquire", jboolean>(); }
	jboolean tryAcquire(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"tryAcquire", jboolean>(timeout, p2); }
	void release() { return call_method<"release", void>(); }
	void acquire(jint permits) { return call_method<"acquire", void>(permits); }
	void acquireUninterruptibly(jint permits) { return call_method<"acquireUninterruptibly", void>(permits); }
	jboolean tryAcquire(jint permits) { return call_method<"tryAcquire", jboolean>(permits); }
	jboolean tryAcquire(jint permits, jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"tryAcquire", jboolean>(permits, timeout, p3); }
	void release(jint permits) { return call_method<"release", void>(permits); }
	jint availablePermits() { return call_method<"availablePermits", jint>(); }
	jint drainPermits() { return call_method<"drainPermits", jint>(); }
	jboolean isFair() { return call_method<"isFair", jboolean>(); }
	jboolean hasQueuedThreads() { return call_method<"hasQueuedThreads", jboolean>(); }
	jint getQueueLength() { return call_method<"getQueueLength", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Semaphore(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SEMAPHORE
