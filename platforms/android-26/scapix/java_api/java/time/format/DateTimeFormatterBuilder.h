// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTERBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTERBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::format { class DateTimeFormatterBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::format::DateTimeFormatterBuilder>
{
	static constexpr fixed_string class_name = "java/time/format/DateTimeFormatterBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTERBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTERBUILDER)
#define SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTERBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/format/FormatStyle.h>
#include <scapix/java_api/java/time/format/SignStyle.h>
#include <scapix/java_api/java/time/format/TextStyle.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::format::DateTimeFormatterBuilder : public jni::object_base<"java/time/format/DateTimeFormatterBuilder",
	java::lang::Object>
{
public:

	static jni::ref<java::time::format::DateTimeFormatterBuilder> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> getLocalizedDateTimePattern(jni::ref<java::time::format::FormatStyle> dateStyle, jni::ref<java::time::format::FormatStyle> timeStyle, jni::ref<java::time::chrono::Chronology> chrono, jni::ref<java::util::Locale> locale) { return call_static_method<"getLocalizedDateTimePattern", jni::ref<java::lang::String>>(dateStyle, timeStyle, chrono, locale); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> parseCaseSensitive() { return call_method<"parseCaseSensitive", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> parseCaseInsensitive() { return call_method<"parseCaseInsensitive", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> parseStrict() { return call_method<"parseStrict", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> parseLenient() { return call_method<"parseLenient", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> parseDefaulting(jni::ref<java::time::temporal::TemporalField> field, jlong value) { return call_method<"parseDefaulting", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field, value); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendValue(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"appendValue", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendValue(jni::ref<java::time::temporal::TemporalField> field, jint width) { return call_method<"appendValue", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field, width); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendValue(jni::ref<java::time::temporal::TemporalField> field, jint minWidth, jint maxWidth, jni::ref<java::time::format::SignStyle> signStyle) { return call_method<"appendValue", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field, minWidth, maxWidth, signStyle); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendValueReduced(jni::ref<java::time::temporal::TemporalField> field, jint width, jint maxWidth, jint baseValue) { return call_method<"appendValueReduced", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field, width, maxWidth, baseValue); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendValueReduced(jni::ref<java::time::temporal::TemporalField> field, jint width, jint maxWidth, jni::ref<java::time::chrono::ChronoLocalDate> baseDate) { return call_method<"appendValueReduced", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field, width, maxWidth, baseDate); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendFraction(jni::ref<java::time::temporal::TemporalField> field, jint minWidth, jint maxWidth, jboolean decimalPoint) { return call_method<"appendFraction", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field, minWidth, maxWidth, decimalPoint); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendText(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"appendText", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendText(jni::ref<java::time::temporal::TemporalField> field, jni::ref<java::time::format::TextStyle> textStyle) { return call_method<"appendText", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field, textStyle); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendText(jni::ref<java::time::temporal::TemporalField> field, jni::ref<java::util::Map> textLookup) { return call_method<"appendText", jni::ref<java::time::format::DateTimeFormatterBuilder>>(field, textLookup); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendInstant() { return call_method<"appendInstant", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendInstant(jint fractionalDigits) { return call_method<"appendInstant", jni::ref<java::time::format::DateTimeFormatterBuilder>>(fractionalDigits); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendOffsetId() { return call_method<"appendOffsetId", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendOffset(jni::ref<java::lang::String> pattern, jni::ref<java::lang::String> noOffsetText) { return call_method<"appendOffset", jni::ref<java::time::format::DateTimeFormatterBuilder>>(pattern, noOffsetText); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendLocalizedOffset(jni::ref<java::time::format::TextStyle> style) { return call_method<"appendLocalizedOffset", jni::ref<java::time::format::DateTimeFormatterBuilder>>(style); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendZoneId() { return call_method<"appendZoneId", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendZoneRegionId() { return call_method<"appendZoneRegionId", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendZoneOrOffsetId() { return call_method<"appendZoneOrOffsetId", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendZoneText(jni::ref<java::time::format::TextStyle> textStyle) { return call_method<"appendZoneText", jni::ref<java::time::format::DateTimeFormatterBuilder>>(textStyle); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendZoneText(jni::ref<java::time::format::TextStyle> textStyle, jni::ref<java::util::Set> preferredZones) { return call_method<"appendZoneText", jni::ref<java::time::format::DateTimeFormatterBuilder>>(textStyle, preferredZones); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendChronologyId() { return call_method<"appendChronologyId", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendChronologyText(jni::ref<java::time::format::TextStyle> textStyle) { return call_method<"appendChronologyText", jni::ref<java::time::format::DateTimeFormatterBuilder>>(textStyle); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendLocalized(jni::ref<java::time::format::FormatStyle> dateStyle, jni::ref<java::time::format::FormatStyle> timeStyle) { return call_method<"appendLocalized", jni::ref<java::time::format::DateTimeFormatterBuilder>>(dateStyle, timeStyle); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendLiteral(jchar literal) { return call_method<"appendLiteral", jni::ref<java::time::format::DateTimeFormatterBuilder>>(literal); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendLiteral(jni::ref<java::lang::String> literal) { return call_method<"appendLiteral", jni::ref<java::time::format::DateTimeFormatterBuilder>>(literal); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> append(jni::ref<java::time::format::DateTimeFormatter> formatter) { return call_method<"append", jni::ref<java::time::format::DateTimeFormatterBuilder>>(formatter); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendOptional(jni::ref<java::time::format::DateTimeFormatter> formatter) { return call_method<"appendOptional", jni::ref<java::time::format::DateTimeFormatterBuilder>>(formatter); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> appendPattern(jni::ref<java::lang::String> pattern) { return call_method<"appendPattern", jni::ref<java::time::format::DateTimeFormatterBuilder>>(pattern); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> padNext(jint padWidth) { return call_method<"padNext", jni::ref<java::time::format::DateTimeFormatterBuilder>>(padWidth); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> padNext(jint padWidth, jchar padChar) { return call_method<"padNext", jni::ref<java::time::format::DateTimeFormatterBuilder>>(padWidth, padChar); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> optionalStart() { return call_method<"optionalStart", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatterBuilder> optionalEnd() { return call_method<"optionalEnd", jni::ref<java::time::format::DateTimeFormatterBuilder>>(); }
	jni::ref<java::time::format::DateTimeFormatter> toFormatter() { return call_method<"toFormatter", jni::ref<java::time::format::DateTimeFormatter>>(); }
	jni::ref<java::time::format::DateTimeFormatter> toFormatter(jni::ref<java::util::Locale> locale) { return call_method<"toFormatter", jni::ref<java::time::format::DateTimeFormatter>>(locale); }

protected:

	DateTimeFormatterBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTERBUILDER
