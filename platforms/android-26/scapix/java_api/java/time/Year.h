// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_YEAR_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_YEAR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time { class Year; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::Year>
{
	static constexpr fixed_string class_name = "java/time/Year";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::temporal::Temporal, scapix::java_api::java::time::temporal::TemporalAdjuster, scapix::java_api::java::lang::Comparable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_YEAR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_YEAR)
#define SCAPIX_JAVA_API_JAVA_TIME_YEAR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/MonthDay.h>
#include <scapix/java_api/java/time/YearMonth.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::Year : public jni::object_base<"java/time/Year",
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static jint MAX_VALUE() { return get_static_field<"MAX_VALUE", jint>(); }
	static jint MIN_VALUE() { return get_static_field<"MIN_VALUE", jint>(); }

	static jni::ref<java::time::Year> now() { return call_static_method<"now", jni::ref<java::time::Year>>(); }
	static jni::ref<java::time::Year> now(jni::ref<java::time::ZoneId> zone) { return call_static_method<"now", jni::ref<java::time::Year>>(zone); }
	static jni::ref<java::time::Year> now(jni::ref<java::time::Clock> clock) { return call_static_method<"now", jni::ref<java::time::Year>>(clock); }
	static jni::ref<java::time::Year> of(jint isoYear) { return call_static_method<"of", jni::ref<java::time::Year>>(isoYear); }
	static jni::ref<java::time::Year> from(jni::ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<"from", jni::ref<java::time::Year>>(temporal); }
	static jni::ref<java::time::Year> parse(jni::ref<java::lang::CharSequence> text) { return call_static_method<"parse", jni::ref<java::time::Year>>(text); }
	static jni::ref<java::time::Year> parse(jni::ref<java::lang::CharSequence> text, jni::ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<"parse", jni::ref<java::time::Year>>(text, formatter); }
	static jboolean isLeap(jlong year) { return call_static_method<"isLeap", jboolean>(year); }
	jint getValue() { return call_method<"getValue", jint>(); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"isSupported", jboolean>(field); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"isSupported", jboolean>(unit); }
	jni::ref<java::time::temporal::ValueRange> range(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"range", jni::ref<java::time::temporal::ValueRange>>(field); }
	jint get(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"get", jint>(field); }
	jlong getLong(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"getLong", jlong>(field); }
	jboolean isLeap() { return call_method<"isLeap", jboolean>(); }
	jboolean isValidMonthDay(jni::ref<java::time::MonthDay> monthDay) { return call_method<"isValidMonthDay", jboolean>(monthDay); }
	jint length() { return call_method<"length", jint>(); }
	jni::ref<java::time::Year> with(jni::ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<"with", jni::ref<java::time::Year>>(adjuster); }
	jni::ref<java::time::Year> with(jni::ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<"with", jni::ref<java::time::Year>>(field, newValue); }
	jni::ref<java::time::Year> plus(jni::ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<"plus", jni::ref<java::time::Year>>(amountToAdd); }
	jni::ref<java::time::Year> plus(jlong amountToAdd, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"plus", jni::ref<java::time::Year>>(amountToAdd, p2); }
	jni::ref<java::time::Year> plusYears(jlong yearsToAdd) { return call_method<"plusYears", jni::ref<java::time::Year>>(yearsToAdd); }
	jni::ref<java::time::Year> minus(jni::ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<"minus", jni::ref<java::time::Year>>(amountToSubtract); }
	jni::ref<java::time::Year> minus(jlong amountToSubtract, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"minus", jni::ref<java::time::Year>>(amountToSubtract, p2); }
	jni::ref<java::time::Year> minusYears(jlong yearsToSubtract) { return call_method<"minusYears", jni::ref<java::time::Year>>(yearsToSubtract); }
	jni::ref<java::lang::Object> query(jni::ref<java::time::temporal::TemporalQuery> query) { return call_method<"query", jni::ref<java::lang::Object>>(query); }
	jni::ref<java::time::temporal::Temporal> adjustInto(jni::ref<java::time::temporal::Temporal> temporal) { return call_method<"adjustInto", jni::ref<java::time::temporal::Temporal>>(temporal); }
	jlong until(jni::ref<java::time::temporal::Temporal> endExclusive, jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"until", jlong>(endExclusive, unit); }
	jni::ref<java::lang::String> format(jni::ref<java::time::format::DateTimeFormatter> formatter) { return call_method<"format", jni::ref<java::lang::String>>(formatter); }
	jni::ref<java::time::LocalDate> atDay(jint dayOfYear) { return call_method<"atDay", jni::ref<java::time::LocalDate>>(dayOfYear); }
	jni::ref<java::time::YearMonth> atMonth(jni::ref<java::time::Month> month) { return call_method<"atMonth", jni::ref<java::time::YearMonth>>(month); }
	jni::ref<java::time::YearMonth> atMonth(jint month) { return call_method<"atMonth", jni::ref<java::time::YearMonth>>(month); }
	jni::ref<java::time::LocalDate> atMonthDay(jni::ref<java::time::MonthDay> monthDay) { return call_method<"atMonthDay", jni::ref<java::time::LocalDate>>(monthDay); }
	jint compareTo(jni::ref<java::time::Year> other) { return call_method<"compareTo", jint>(other); }
	jboolean isAfter(jni::ref<java::time::Year> other) { return call_method<"isAfter", jboolean>(other); }
	jboolean isBefore(jni::ref<java::time::Year> other) { return call_method<"isBefore", jboolean>(other); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Year(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_YEAR
