// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTRESULT_FWD
#define SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTRESULT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::junit::framework { class TestResult; }

template<>
struct scapix::jni::object_traits<scapix::java_api::junit::framework::TestResult>
{
	static constexpr fixed_string class_name = "junit/framework/TestResult";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTRESULT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTRESULT)
#define SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTRESULT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/junit/framework/AssertionFailedError.h>
#include <scapix/java_api/junit/framework/Protectable.h>
#include <scapix/java_api/junit/framework/Test.h>
#include <scapix/java_api/junit/framework/TestListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class junit::framework::TestResult : public jni::object_base<"junit/framework/TestResult",
	java::lang::Object>
{
public:

	static jni::ref<junit::framework::TestResult> new_object() { return base_::new_object(); }
	void addError(jni::ref<junit::framework::Test> test, jni::ref<java::lang::Throwable> t) { return call_method<"addError", void>(test, t); }
	void addFailure(jni::ref<junit::framework::Test> test, jni::ref<junit::framework::AssertionFailedError> t) { return call_method<"addFailure", void>(test, t); }
	void addListener(jni::ref<junit::framework::TestListener> listener) { return call_method<"addListener", void>(listener); }
	void removeListener(jni::ref<junit::framework::TestListener> listener) { return call_method<"removeListener", void>(listener); }
	void endTest(jni::ref<junit::framework::Test> test) { return call_method<"endTest", void>(test); }
	jint errorCount() { return call_method<"errorCount", jint>(); }
	jni::ref<java::util::Enumeration> errors() { return call_method<"errors", jni::ref<java::util::Enumeration>>(); }
	jint failureCount() { return call_method<"failureCount", jint>(); }
	jni::ref<java::util::Enumeration> failures() { return call_method<"failures", jni::ref<java::util::Enumeration>>(); }
	jint runCount() { return call_method<"runCount", jint>(); }
	void runProtected(jni::ref<junit::framework::Test> test, jni::ref<junit::framework::Protectable> p) { return call_method<"runProtected", void>(test, p); }
	jboolean shouldStop() { return call_method<"shouldStop", jboolean>(); }
	void startTest(jni::ref<junit::framework::Test> test) { return call_method<"startTest", void>(test); }
	void stop() { return call_method<"stop", void>(); }
	jboolean wasSuccessful() { return call_method<"wasSuccessful", jboolean>(); }

protected:

	TestResult(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTRESULT
