// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/Channel.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_SENSORDIRECTCHANNEL_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_SENSORDIRECTCHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware { class SensorDirectChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::SensorDirectChannel>
{
	static constexpr fixed_string class_name = "android/hardware/SensorDirectChannel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::nio::channels::Channel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_SENSORDIRECTCHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_SENSORDIRECTCHANNEL)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_SENSORDIRECTCHANNEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/Sensor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::SensorDirectChannel : public jni::object_base<"android/hardware/SensorDirectChannel",
	java::lang::Object,
	java::nio::channels::Channel>
{
public:

	static jint RATE_FAST() { return get_static_field<"RATE_FAST", jint>(); }
	static jint RATE_NORMAL() { return get_static_field<"RATE_NORMAL", jint>(); }
	static jint RATE_STOP() { return get_static_field<"RATE_STOP", jint>(); }
	static jint RATE_VERY_FAST() { return get_static_field<"RATE_VERY_FAST", jint>(); }
	static jint TYPE_HARDWARE_BUFFER() { return get_static_field<"TYPE_HARDWARE_BUFFER", jint>(); }
	static jint TYPE_MEMORY_FILE() { return get_static_field<"TYPE_MEMORY_FILE", jint>(); }

	jboolean isOpen() { return call_method<"isOpen", jboolean>(); }
	void close() { return call_method<"close", void>(); }
	jint configure(jni::ref<android::hardware::Sensor> sensor, jint rateLevel) { return call_method<"configure", jint>(sensor, rateLevel); }

protected:

	SensorDirectChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_SENSORDIRECTCHANNEL
