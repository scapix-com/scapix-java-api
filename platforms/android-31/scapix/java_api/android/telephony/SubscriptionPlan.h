// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELEPHONY_SUBSCRIPTIONPLAN_FWD
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_SUBSCRIPTIONPLAN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telephony { class SubscriptionPlan; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telephony::SubscriptionPlan>
{
	static constexpr fixed_string class_name = "android/telephony/SubscriptionPlan";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_SUBSCRIPTIONPLAN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELEPHONY_SUBSCRIPTIONPLAN)
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_SUBSCRIPTIONPLAN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/android/telephony/SubscriptionPlan_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telephony::SubscriptionPlan : public jni::object_base<"android/telephony/SubscriptionPlan",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = SubscriptionPlan_Builder;

	static jlong BYTES_UNKNOWN() { return get_static_field<"BYTES_UNKNOWN", jlong>(); }
	static jlong BYTES_UNLIMITED() { return get_static_field<"BYTES_UNLIMITED", jlong>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint LIMIT_BEHAVIOR_BILLED() { return get_static_field<"LIMIT_BEHAVIOR_BILLED", jint>(); }
	static jint LIMIT_BEHAVIOR_DISABLED() { return get_static_field<"LIMIT_BEHAVIOR_DISABLED", jint>(); }
	static jint LIMIT_BEHAVIOR_THROTTLED() { return get_static_field<"LIMIT_BEHAVIOR_THROTTLED", jint>(); }
	static jint LIMIT_BEHAVIOR_UNKNOWN() { return get_static_field<"LIMIT_BEHAVIOR_UNKNOWN", jint>(); }
	static jlong TIME_UNKNOWN() { return get_static_field<"TIME_UNKNOWN", jlong>(); }

	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jni::ref<java::lang::CharSequence> getTitle() { return call_method<"getTitle", jni::ref<java::lang::CharSequence>>(); }
	jni::ref<java::lang::CharSequence> getSummary() { return call_method<"getSummary", jni::ref<java::lang::CharSequence>>(); }
	jlong getDataLimitBytes() { return call_method<"getDataLimitBytes", jlong>(); }
	jint getDataLimitBehavior() { return call_method<"getDataLimitBehavior", jint>(); }
	jlong getDataUsageBytes() { return call_method<"getDataUsageBytes", jlong>(); }
	jlong getDataUsageTime() { return call_method<"getDataUsageTime", jlong>(); }
	jni::ref<jni::array<jint>> getNetworkTypes() { return call_method<"getNetworkTypes", jni::ref<jni::array<jint>>>(); }
	jni::ref<java::util::Iterator> cycleIterator() { return call_method<"cycleIterator", jni::ref<java::util::Iterator>>(); }

protected:

	SubscriptionPlan(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_SUBSCRIPTIONPLAN
