// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELEPHONY_SIGNALTHRESHOLDINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_SIGNALTHRESHOLDINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telephony { class SignalThresholdInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telephony::SignalThresholdInfo>
{
	static constexpr fixed_string class_name = "android/telephony/SignalThresholdInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_SIGNALTHRESHOLDINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELEPHONY_SIGNALTHRESHOLDINFO)
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_SIGNALTHRESHOLDINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/telephony/SignalThresholdInfo_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telephony::SignalThresholdInfo : public jni::object_base<"android/telephony/SignalThresholdInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = SignalThresholdInfo_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_RSCP() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_RSCP", jint>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_RSRP() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_RSRP", jint>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_RSRQ() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_RSRQ", jint>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_RSSI() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_RSSI", jint>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_RSSNR() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_RSSNR", jint>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_SSRSRP() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_SSRSRP", jint>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_SSRSRQ() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_SSRSRQ", jint>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_SSSINR() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_SSSINR", jint>(); }
	static jint SIGNAL_MEASUREMENT_TYPE_UNKNOWN() { return get_static_field<"SIGNAL_MEASUREMENT_TYPE_UNKNOWN", jint>(); }

	jint getRadioAccessNetworkType() { return call_method<"getRadioAccessNetworkType", jint>(); }
	jint getSignalMeasurementType() { return call_method<"getSignalMeasurementType", jint>(); }
	jni::ref<jni::array<jint>> getThresholds() { return call_method<"getThresholds", jni::ref<jni::array<jint>>>(); }
	static jint getMinimumNumberOfThresholdsAllowed() { return call_static_method<"getMinimumNumberOfThresholdsAllowed", jint>(); }
	static jint getMaximumNumberOfThresholdsAllowed() { return call_static_method<"getMaximumNumberOfThresholdsAllowed", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SignalThresholdInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_SIGNALTHRESHOLDINFO
