// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/database/AbstractCursor.h>

#ifndef SCAPIX_JAVA_API_ANDROID_DATABASE_MERGECURSOR_FWD
#define SCAPIX_JAVA_API_ANDROID_DATABASE_MERGECURSOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::database { class MergeCursor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::database::MergeCursor>
{
	static constexpr fixed_string class_name = "android/database/MergeCursor";
	using base_classes = std::tuple<scapix::java_api::android::database::AbstractCursor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_MERGECURSOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_DATABASE_MERGECURSOR)
#define SCAPIX_JAVA_API_ANDROID_DATABASE_MERGECURSOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/database/ContentObserver.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/database/DataSetObserver.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::database::MergeCursor : public jni::object_base<"android/database/MergeCursor",
	android::database::AbstractCursor>
{
public:

	static jni::ref<android::database::MergeCursor> new_object(jni::ref<jni::array<android::database::Cursor>> cursors) { return base_::new_object(cursors); }
	jint getCount() { return call_method<"getCount", jint>(); }
	jboolean onMove(jint oldPosition, jint newPosition) { return call_method<"onMove", jboolean>(oldPosition, newPosition); }
	jni::ref<java::lang::String> getString(jint column) { return call_method<"getString", jni::ref<java::lang::String>>(column); }
	jshort getShort(jint column) { return call_method<"getShort", jshort>(column); }
	jint getInt(jint column) { return call_method<"getInt", jint>(column); }
	jlong getLong(jint column) { return call_method<"getLong", jlong>(column); }
	jfloat getFloat(jint column) { return call_method<"getFloat", jfloat>(column); }
	jdouble getDouble(jint column) { return call_method<"getDouble", jdouble>(column); }
	jint getType(jint column) { return call_method<"getType", jint>(column); }
	jboolean isNull(jint column) { return call_method<"isNull", jboolean>(column); }
	jni::ref<jni::array<jbyte>> getBlob(jint column) { return call_method<"getBlob", jni::ref<jni::array<jbyte>>>(column); }
	jni::ref<jni::array<java::lang::String>> getColumnNames() { return call_method<"getColumnNames", jni::ref<jni::array<java::lang::String>>>(); }
	void deactivate() { return call_method<"deactivate", void>(); }
	void close() { return call_method<"close", void>(); }
	void registerContentObserver(jni::ref<android::database::ContentObserver> observer) { return call_method<"registerContentObserver", void>(observer); }
	void unregisterContentObserver(jni::ref<android::database::ContentObserver> observer) { return call_method<"unregisterContentObserver", void>(observer); }
	void registerDataSetObserver(jni::ref<android::database::DataSetObserver> observer) { return call_method<"registerDataSetObserver", void>(observer); }
	void unregisterDataSetObserver(jni::ref<android::database::DataSetObserver> observer) { return call_method<"unregisterDataSetObserver", void>(observer); }
	jboolean requery() { return call_method<"requery", jboolean>(); }

protected:

	MergeCursor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_MERGECURSOR
