// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/net/ipsec/ike/SaProposal.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESAPROPOSAL_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESAPROPOSAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::ipsec::ike { class IkeSaProposal; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::ipsec::ike::IkeSaProposal>
{
	static constexpr fixed_string class_name = "android/net/ipsec/ike/IkeSaProposal";
	using base_classes = std::tuple<scapix::java_api::android::net::ipsec::ike::SaProposal>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESAPROPOSAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESAPROPOSAL)
#define SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESAPROPOSAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/android/net/ipsec/ike/IkeSaProposal_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::ipsec::ike::IkeSaProposal : public jni::object_base<"android/net/ipsec/ike/IkeSaProposal",
	android::net::ipsec::ike::SaProposal>
{
public:

	using Builder = IkeSaProposal_Builder;

	static jni::ref<java::util::Set> getSupportedEncryptionAlgorithms() { return call_static_method<"getSupportedEncryptionAlgorithms", jni::ref<java::util::Set>>(); }
	static jni::ref<java::util::Set> getSupportedIntegrityAlgorithms() { return call_static_method<"getSupportedIntegrityAlgorithms", jni::ref<java::util::Set>>(); }
	static jni::ref<java::util::Set> getSupportedPseudorandomFunctions() { return call_static_method<"getSupportedPseudorandomFunctions", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::List> getPseudorandomFunctions() { return call_method<"getPseudorandomFunctions", jni::ref<java::util::List>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }

protected:

	IkeSaProposal(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESAPROPOSAL
