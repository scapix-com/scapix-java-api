// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/net/ipsec/ike/exceptions/IkeException.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_EXCEPTIONS_IKEPROTOCOLEXCEPTION_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_EXCEPTIONS_IKEPROTOCOLEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::ipsec::ike::exceptions { class IkeProtocolException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::ipsec::ike::exceptions::IkeProtocolException>
{
	static constexpr fixed_string class_name = "android/net/ipsec/ike/exceptions/IkeProtocolException";
	using base_classes = std::tuple<scapix::java_api::android::net::ipsec::ike::exceptions::IkeException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_EXCEPTIONS_IKEPROTOCOLEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_EXCEPTIONS_IKEPROTOCOLEXCEPTION)
#define SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_EXCEPTIONS_IKEPROTOCOLEXCEPTION

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::ipsec::ike::exceptions::IkeProtocolException : public jni::object_base<"android/net/ipsec/ike/exceptions/IkeProtocolException",
	android::net::ipsec::ike::exceptions::IkeException>
{
public:

	static jint ERROR_TYPE_AUTHENTICATION_FAILED() { return get_static_field<"ERROR_TYPE_AUTHENTICATION_FAILED", jint>(); }
	static jint ERROR_TYPE_CHILD_SA_NOT_FOUND() { return get_static_field<"ERROR_TYPE_CHILD_SA_NOT_FOUND", jint>(); }
	static jint ERROR_TYPE_FAILED_CP_REQUIRED() { return get_static_field<"ERROR_TYPE_FAILED_CP_REQUIRED", jint>(); }
	static jint ERROR_TYPE_INTERNAL_ADDRESS_FAILURE() { return get_static_field<"ERROR_TYPE_INTERNAL_ADDRESS_FAILURE", jint>(); }
	static jint ERROR_TYPE_INVALID_IKE_SPI() { return get_static_field<"ERROR_TYPE_INVALID_IKE_SPI", jint>(); }
	static jint ERROR_TYPE_INVALID_KE_PAYLOAD() { return get_static_field<"ERROR_TYPE_INVALID_KE_PAYLOAD", jint>(); }
	static jint ERROR_TYPE_INVALID_MAJOR_VERSION() { return get_static_field<"ERROR_TYPE_INVALID_MAJOR_VERSION", jint>(); }
	static jint ERROR_TYPE_INVALID_MESSAGE_ID() { return get_static_field<"ERROR_TYPE_INVALID_MESSAGE_ID", jint>(); }
	static jint ERROR_TYPE_INVALID_SELECTORS() { return get_static_field<"ERROR_TYPE_INVALID_SELECTORS", jint>(); }
	static jint ERROR_TYPE_INVALID_SYNTAX() { return get_static_field<"ERROR_TYPE_INVALID_SYNTAX", jint>(); }
	static jint ERROR_TYPE_NO_ADDITIONAL_SAS() { return get_static_field<"ERROR_TYPE_NO_ADDITIONAL_SAS", jint>(); }
	static jint ERROR_TYPE_NO_PROPOSAL_CHOSEN() { return get_static_field<"ERROR_TYPE_NO_PROPOSAL_CHOSEN", jint>(); }
	static jint ERROR_TYPE_SINGLE_PAIR_REQUIRED() { return get_static_field<"ERROR_TYPE_SINGLE_PAIR_REQUIRED", jint>(); }
	static jint ERROR_TYPE_TEMPORARY_FAILURE() { return get_static_field<"ERROR_TYPE_TEMPORARY_FAILURE", jint>(); }
	static jint ERROR_TYPE_TS_UNACCEPTABLE() { return get_static_field<"ERROR_TYPE_TS_UNACCEPTABLE", jint>(); }
	static jint ERROR_TYPE_UNSUPPORTED_CRITICAL_PAYLOAD() { return get_static_field<"ERROR_TYPE_UNSUPPORTED_CRITICAL_PAYLOAD", jint>(); }

	jint getErrorType() { return call_method<"getErrorType", jint>(); }

protected:

	IkeProtocolException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_EXCEPTIONS_IKEPROTOCOLEXCEPTION
