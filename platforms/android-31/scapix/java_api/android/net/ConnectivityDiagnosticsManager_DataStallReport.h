// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_DATASTALLREPORT_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_DATASTALLREPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class ConnectivityDiagnosticsManager_DataStallReport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::ConnectivityDiagnosticsManager_DataStallReport>
{
	static constexpr fixed_string class_name = "android/net/ConnectivityDiagnosticsManager$DataStallReport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_DATASTALLREPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_DATASTALLREPORT)
#define SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_DATASTALLREPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/LinkProperties.h>
#include <scapix/java_api/android/net/Network.h>
#include <scapix/java_api/android/net/NetworkCapabilities.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::ConnectivityDiagnosticsManager_DataStallReport : public jni::object_base<"android/net/ConnectivityDiagnosticsManager$DataStallReport",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DETECTION_METHOD_DNS_EVENTS() { return get_static_field<"DETECTION_METHOD_DNS_EVENTS", jint>(); }
	static jint DETECTION_METHOD_TCP_METRICS() { return get_static_field<"DETECTION_METHOD_TCP_METRICS", jint>(); }
	static jni::ref<java::lang::String> KEY_DNS_CONSECUTIVE_TIMEOUTS() { return get_static_field<"KEY_DNS_CONSECUTIVE_TIMEOUTS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> KEY_TCP_METRICS_COLLECTION_PERIOD_MILLIS() { return get_static_field<"KEY_TCP_METRICS_COLLECTION_PERIOD_MILLIS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> KEY_TCP_PACKET_FAIL_RATE() { return get_static_field<"KEY_TCP_PACKET_FAIL_RATE", jni::ref<java::lang::String>>(); }

	static jni::ref<android::net::ConnectivityDiagnosticsManager_DataStallReport> new_object(jni::ref<android::net::Network> network, jlong reportTimestamp, jint p3, jni::ref<android::net::LinkProperties> detectionMethod, jni::ref<android::net::NetworkCapabilities> linkProperties, jni::ref<android::os::PersistableBundle> networkCapabilities) { return base_::new_object(network, reportTimestamp, p3, detectionMethod, linkProperties, networkCapabilities); }
	jni::ref<android::net::Network> getNetwork() { return call_method<"getNetwork", jni::ref<android::net::Network>>(); }
	jlong getReportTimestamp() { return call_method<"getReportTimestamp", jlong>(); }
	jint getDetectionMethod() { return call_method<"getDetectionMethod", jint>(); }
	jni::ref<android::net::LinkProperties> getLinkProperties() { return call_method<"getLinkProperties", jni::ref<android::net::LinkProperties>>(); }
	jni::ref<android::net::NetworkCapabilities> getNetworkCapabilities() { return call_method<"getNetworkCapabilities", jni::ref<android::net::NetworkCapabilities>>(); }
	jni::ref<android::os::PersistableBundle> getStallDetails() { return call_method<"getStallDetails", jni::ref<android::os::PersistableBundle>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	ConnectivityDiagnosticsManager_DataStallReport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_DATASTALLREPORT
