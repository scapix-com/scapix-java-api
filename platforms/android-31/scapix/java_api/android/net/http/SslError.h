// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_HTTP_SSLERROR_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_HTTP_SSLERROR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::http { class SslError; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::http::SslError>
{
	static constexpr fixed_string class_name = "android/net/http/SslError";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_HTTP_SSLERROR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_HTTP_SSLERROR)
#define SCAPIX_JAVA_API_ANDROID_NET_HTTP_SSLERROR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/http/SslCertificate.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::http::SslError : public jni::object_base<"android/net/http/SslError",
	java::lang::Object>
{
public:

	static jint SSL_DATE_INVALID() { return get_static_field<"SSL_DATE_INVALID", jint>(); }
	static jint SSL_EXPIRED() { return get_static_field<"SSL_EXPIRED", jint>(); }
	static jint SSL_IDMISMATCH() { return get_static_field<"SSL_IDMISMATCH", jint>(); }
	static jint SSL_INVALID() { return get_static_field<"SSL_INVALID", jint>(); }
	static jint SSL_MAX_ERROR() { return get_static_field<"SSL_MAX_ERROR", jint>(); }
	static jint SSL_NOTYETVALID() { return get_static_field<"SSL_NOTYETVALID", jint>(); }
	static jint SSL_UNTRUSTED() { return get_static_field<"SSL_UNTRUSTED", jint>(); }

	static jni::ref<android::net::http::SslError> new_object(jint error, jni::ref<android::net::http::SslCertificate> certificate) { return base_::new_object(error, certificate); }
	static jni::ref<android::net::http::SslError> new_object(jint error, jni::ref<java::security::cert::X509Certificate> certificate) { return base_::new_object(error, certificate); }
	static jni::ref<android::net::http::SslError> new_object(jint error, jni::ref<android::net::http::SslCertificate> certificate, jni::ref<java::lang::String> url) { return base_::new_object(error, certificate, url); }
	static jni::ref<android::net::http::SslError> new_object(jint error, jni::ref<java::security::cert::X509Certificate> certificate, jni::ref<java::lang::String> url) { return base_::new_object(error, certificate, url); }
	jni::ref<android::net::http::SslCertificate> getCertificate() { return call_method<"getCertificate", jni::ref<android::net::http::SslCertificate>>(); }
	jni::ref<java::lang::String> getUrl() { return call_method<"getUrl", jni::ref<java::lang::String>>(); }
	jboolean addError(jint error) { return call_method<"addError", jboolean>(error); }
	jboolean hasError(jint error) { return call_method<"hasError", jboolean>(error); }
	jint getPrimaryError() { return call_method<"getPrimaryError", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SslError(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_HTTP_SSLERROR
