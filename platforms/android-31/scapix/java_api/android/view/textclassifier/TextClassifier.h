// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTCLASSIFIER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTCLASSIFIER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::textclassifier { class TextClassifier; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::textclassifier::TextClassifier>
{
	static constexpr fixed_string class_name = "android/view/textclassifier/TextClassifier";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTCLASSIFIER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTCLASSIFIER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTCLASSIFIER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/LocaleList.h>
#include <scapix/java_api/android/view/textclassifier/ConversationActions.h>
#include <scapix/java_api/android/view/textclassifier/ConversationActions_Request.h>
#include <scapix/java_api/android/view/textclassifier/SelectionEvent.h>
#include <scapix/java_api/android/view/textclassifier/TextClassification.h>
#include <scapix/java_api/android/view/textclassifier/TextClassification_Request.h>
#include <scapix/java_api/android/view/textclassifier/TextClassifierEvent.h>
#include <scapix/java_api/android/view/textclassifier/TextLanguage.h>
#include <scapix/java_api/android/view/textclassifier/TextLanguage_Request.h>
#include <scapix/java_api/android/view/textclassifier/TextLinks.h>
#include <scapix/java_api/android/view/textclassifier/TextLinks_Request.h>
#include <scapix/java_api/android/view/textclassifier/TextSelection.h>
#include <scapix/java_api/android/view/textclassifier/TextSelection_Request.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/view/textclassifier/TextClassifier_EntityConfig.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::textclassifier::TextClassifier : public jni::object_base<"android/view/textclassifier/TextClassifier",
	java::lang::Object>
{
public:

	using EntityConfig = TextClassifier_EntityConfig;

	static jni::ref<java::lang::String> EXTRA_FROM_TEXT_CLASSIFIER() { return get_static_field<"EXTRA_FROM_TEXT_CLASSIFIER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> HINT_TEXT_IS_EDITABLE() { return get_static_field<"HINT_TEXT_IS_EDITABLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> HINT_TEXT_IS_NOT_EDITABLE() { return get_static_field<"HINT_TEXT_IS_NOT_EDITABLE", jni::ref<java::lang::String>>(); }
	static jni::ref<android::view::textclassifier::TextClassifier> NO_OP() { return get_static_field<"NO_OP", jni::ref<android::view::textclassifier::TextClassifier>>(); }
	static jni::ref<java::lang::String> TYPE_ADDRESS() { return get_static_field<"TYPE_ADDRESS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPE_DATE() { return get_static_field<"TYPE_DATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPE_DATE_TIME() { return get_static_field<"TYPE_DATE_TIME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPE_EMAIL() { return get_static_field<"TYPE_EMAIL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPE_FLIGHT_NUMBER() { return get_static_field<"TYPE_FLIGHT_NUMBER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPE_OTHER() { return get_static_field<"TYPE_OTHER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPE_PHONE() { return get_static_field<"TYPE_PHONE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPE_UNKNOWN() { return get_static_field<"TYPE_UNKNOWN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPE_URL() { return get_static_field<"TYPE_URL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_CLIPBOARD() { return get_static_field<"WIDGET_TYPE_CLIPBOARD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_CUSTOM_EDITTEXT() { return get_static_field<"WIDGET_TYPE_CUSTOM_EDITTEXT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_CUSTOM_TEXTVIEW() { return get_static_field<"WIDGET_TYPE_CUSTOM_TEXTVIEW", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW() { return get_static_field<"WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_EDITTEXT() { return get_static_field<"WIDGET_TYPE_EDITTEXT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_EDIT_WEBVIEW() { return get_static_field<"WIDGET_TYPE_EDIT_WEBVIEW", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_NOTIFICATION() { return get_static_field<"WIDGET_TYPE_NOTIFICATION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_TEXTVIEW() { return get_static_field<"WIDGET_TYPE_TEXTVIEW", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_UNKNOWN() { return get_static_field<"WIDGET_TYPE_UNKNOWN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_UNSELECTABLE_TEXTVIEW() { return get_static_field<"WIDGET_TYPE_UNSELECTABLE_TEXTVIEW", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDGET_TYPE_WEBVIEW() { return get_static_field<"WIDGET_TYPE_WEBVIEW", jni::ref<java::lang::String>>(); }

	jni::ref<android::view::textclassifier::TextSelection> suggestSelection(jni::ref<android::view::textclassifier::TextSelection_Request> request) { return call_method<"suggestSelection", jni::ref<android::view::textclassifier::TextSelection>>(request); }
	jni::ref<android::view::textclassifier::TextSelection> suggestSelection(jni::ref<java::lang::CharSequence> text, jint selectionStartIndex, jint selectionEndIndex, jni::ref<android::os::LocaleList> defaultLocales) { return call_method<"suggestSelection", jni::ref<android::view::textclassifier::TextSelection>>(text, selectionStartIndex, selectionEndIndex, defaultLocales); }
	jni::ref<android::view::textclassifier::TextClassification> classifyText(jni::ref<android::view::textclassifier::TextClassification_Request> request) { return call_method<"classifyText", jni::ref<android::view::textclassifier::TextClassification>>(request); }
	jni::ref<android::view::textclassifier::TextClassification> classifyText(jni::ref<java::lang::CharSequence> text, jint startIndex, jint endIndex, jni::ref<android::os::LocaleList> defaultLocales) { return call_method<"classifyText", jni::ref<android::view::textclassifier::TextClassification>>(text, startIndex, endIndex, defaultLocales); }
	jni::ref<android::view::textclassifier::TextLinks> generateLinks(jni::ref<android::view::textclassifier::TextLinks_Request> request) { return call_method<"generateLinks", jni::ref<android::view::textclassifier::TextLinks>>(request); }
	jint getMaxGenerateLinksTextLength() { return call_method<"getMaxGenerateLinksTextLength", jint>(); }
	jni::ref<android::view::textclassifier::TextLanguage> detectLanguage(jni::ref<android::view::textclassifier::TextLanguage_Request> request) { return call_method<"detectLanguage", jni::ref<android::view::textclassifier::TextLanguage>>(request); }
	jni::ref<android::view::textclassifier::ConversationActions> suggestConversationActions(jni::ref<android::view::textclassifier::ConversationActions_Request> request) { return call_method<"suggestConversationActions", jni::ref<android::view::textclassifier::ConversationActions>>(request); }
	void onSelectionEvent(jni::ref<android::view::textclassifier::SelectionEvent> event) { return call_method<"onSelectionEvent", void>(event); }
	void onTextClassifierEvent(jni::ref<android::view::textclassifier::TextClassifierEvent> event) { return call_method<"onTextClassifierEvent", void>(event); }
	void destroy() { return call_method<"destroy", void>(); }
	jboolean isDestroyed() { return call_method<"isDestroyed", jboolean>(); }

protected:

	TextClassifier(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_TEXTCLASSIFIER_TEXTCLASSIFIER
