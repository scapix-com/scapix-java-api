// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYMAPPER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYMAPPER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::inspector { class PropertyMapper; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::inspector::PropertyMapper>
{
	static constexpr fixed_string class_name = "android/view/inspector/PropertyMapper";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYMAPPER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYMAPPER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYMAPPER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/android/view/inspector/PropertyMapper_PropertyConflictException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::inspector::PropertyMapper : public jni::object_base<"android/view/inspector/PropertyMapper",
	java::lang::Object>
{
public:

	using PropertyConflictException = PropertyMapper_PropertyConflictException;

	jint mapBoolean(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapBoolean", jint>(p1, p2); }
	jint mapByte(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapByte", jint>(p1, p2); }
	jint mapChar(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapChar", jint>(p1, p2); }
	jint mapDouble(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapDouble", jint>(p1, p2); }
	jint mapFloat(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapFloat", jint>(p1, p2); }
	jint mapInt(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapInt", jint>(p1, p2); }
	jint mapLong(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapLong", jint>(p1, p2); }
	jint mapShort(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapShort", jint>(p1, p2); }
	jint mapObject(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapObject", jint>(p1, p2); }
	jint mapColor(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapColor", jint>(p1, p2); }
	jint mapGravity(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapGravity", jint>(p1, p2); }
	jint mapIntEnum(jni::ref<java::lang::String> p1, jint p2, jni::ref<java::util::function::IntFunction> p3) { return call_method<"mapIntEnum", jint>(p1, p2, p3); }
	jint mapResourceId(jni::ref<java::lang::String> p1, jint p2) { return call_method<"mapResourceId", jint>(p1, p2); }
	jint mapIntFlag(jni::ref<java::lang::String> p1, jint p2, jni::ref<java::util::function::IntFunction> p3) { return call_method<"mapIntFlag", jint>(p1, p2, p3); }

protected:

	PropertyMapper(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_INSPECTOR_PROPERTYMAPPER
