// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/view/View.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTUB_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTUB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class ViewStub; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::ViewStub>
{
	static constexpr fixed_string class_name = "android/view/ViewStub";
	using base_classes = std::tuple<scapix::java_api::android::view::View>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTUB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTUB)
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTUB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/LayoutInflater.h>
#include <scapix/java_api/android/view/ViewStub_OnInflateListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::ViewStub : public jni::object_base<"android/view/ViewStub",
	android::view::View>
{
public:

	using OnInflateListener = ViewStub_OnInflateListener;

	static jni::ref<android::view::ViewStub> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::view::ViewStub> new_object(jni::ref<android::content::Context> context, jint layoutResource) { return base_::new_object(context, layoutResource); }
	static jni::ref<android::view::ViewStub> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::view::ViewStub> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::view::ViewStub> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jint getInflatedId() { return call_method<"getInflatedId", jint>(); }
	void setInflatedId(jint inflatedId) { return call_method<"setInflatedId", void>(inflatedId); }
	jint getLayoutResource() { return call_method<"getLayoutResource", jint>(); }
	void setLayoutResource(jint layoutResource) { return call_method<"setLayoutResource", void>(layoutResource); }
	void setLayoutInflater(jni::ref<android::view::LayoutInflater> inflater) { return call_method<"setLayoutInflater", void>(inflater); }
	jni::ref<android::view::LayoutInflater> getLayoutInflater() { return call_method<"getLayoutInflater", jni::ref<android::view::LayoutInflater>>(); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }
	void setVisibility(jint visibility) { return call_method<"setVisibility", void>(visibility); }
	jni::ref<android::view::View> inflate() { return call_method<"inflate", jni::ref<android::view::View>>(); }
	void setOnInflateListener(jni::ref<android::view::ViewStub_OnInflateListener> inflateListener) { return call_method<"setOnInflateListener", void>(inflateListener); }

protected:

	ViewStub(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTUB
