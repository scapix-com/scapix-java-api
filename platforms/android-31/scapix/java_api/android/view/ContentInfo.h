// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_CONTENTINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_CONTENTINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class ContentInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::ContentInfo>
{
	static constexpr fixed_string class_name = "android/view/ContentInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_CONTENTINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_CONTENTINFO)
#define SCAPIX_JAVA_API_ANDROID_VIEW_CONTENTINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ClipData.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/view/ContentInfo_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::ContentInfo : public jni::object_base<"android/view/ContentInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = ContentInfo_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint FLAG_CONVERT_TO_PLAIN_TEXT() { return get_static_field<"FLAG_CONVERT_TO_PLAIN_TEXT", jint>(); }
	static jint SOURCE_APP() { return get_static_field<"SOURCE_APP", jint>(); }
	static jint SOURCE_AUTOFILL() { return get_static_field<"SOURCE_AUTOFILL", jint>(); }
	static jint SOURCE_CLIPBOARD() { return get_static_field<"SOURCE_CLIPBOARD", jint>(); }
	static jint SOURCE_DRAG_AND_DROP() { return get_static_field<"SOURCE_DRAG_AND_DROP", jint>(); }
	static jint SOURCE_INPUT_METHOD() { return get_static_field<"SOURCE_INPUT_METHOD", jint>(); }
	static jint SOURCE_PROCESS_TEXT() { return get_static_field<"SOURCE_PROCESS_TEXT", jint>(); }

	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<android::content::ClipData> getClip() { return call_method<"getClip", jni::ref<android::content::ClipData>>(); }
	jint getSource() { return call_method<"getSource", jint>(); }
	jint getFlags() { return call_method<"getFlags", jint>(); }
	jni::ref<android::net::Uri> getLinkUri() { return call_method<"getLinkUri", jni::ref<android::net::Uri>>(); }
	jni::ref<android::os::Bundle> getExtras() { return call_method<"getExtras", jni::ref<android::os::Bundle>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	ContentInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_CONTENTINFO
