// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/bluetooth/BluetoothProfile.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEADSET_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEADSET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth { class BluetoothHeadset; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::BluetoothHeadset>
{
	static constexpr fixed_string class_name = "android/bluetooth/BluetoothHeadset";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::bluetooth::BluetoothProfile>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEADSET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEADSET)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEADSET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::BluetoothHeadset : public jni::object_base<"android/bluetooth/BluetoothHeadset",
	java::lang::Object,
	android::bluetooth::BluetoothProfile>
{
public:

	static jni::ref<java::lang::String> ACTION_AUDIO_STATE_CHANGED() { return get_static_field<"ACTION_AUDIO_STATE_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_CONNECTION_STATE_CHANGED() { return get_static_field<"ACTION_CONNECTION_STATE_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_VENDOR_SPECIFIC_HEADSET_EVENT() { return get_static_field<"ACTION_VENDOR_SPECIFIC_HEADSET_EVENT", jni::ref<java::lang::String>>(); }
	static jint AT_CMD_TYPE_ACTION() { return get_static_field<"AT_CMD_TYPE_ACTION", jint>(); }
	static jint AT_CMD_TYPE_BASIC() { return get_static_field<"AT_CMD_TYPE_BASIC", jint>(); }
	static jint AT_CMD_TYPE_READ() { return get_static_field<"AT_CMD_TYPE_READ", jint>(); }
	static jint AT_CMD_TYPE_SET() { return get_static_field<"AT_CMD_TYPE_SET", jint>(); }
	static jint AT_CMD_TYPE_TEST() { return get_static_field<"AT_CMD_TYPE_TEST", jint>(); }
	static jni::ref<java::lang::String> EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS() { return get_static_field<"EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD() { return get_static_field<"EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE() { return get_static_field<"EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE", jni::ref<java::lang::String>>(); }
	static jint STATE_AUDIO_CONNECTED() { return get_static_field<"STATE_AUDIO_CONNECTED", jint>(); }
	static jint STATE_AUDIO_CONNECTING() { return get_static_field<"STATE_AUDIO_CONNECTING", jint>(); }
	static jint STATE_AUDIO_DISCONNECTED() { return get_static_field<"STATE_AUDIO_DISCONNECTED", jint>(); }
	static jni::ref<java::lang::String> VENDOR_RESULT_CODE_COMMAND_ANDROID() { return get_static_field<"VENDOR_RESULT_CODE_COMMAND_ANDROID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY() { return get_static_field<"VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY", jni::ref<java::lang::String>>(); }

	jni::ref<java::util::List> getConnectedDevices() { return call_method<"getConnectedDevices", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getDevicesMatchingConnectionStates(jni::ref<jni::array<jint>> states) { return call_method<"getDevicesMatchingConnectionStates", jni::ref<java::util::List>>(states); }
	jint getConnectionState(jni::ref<android::bluetooth::BluetoothDevice> device) { return call_method<"getConnectionState", jint>(device); }
	jboolean isNoiseReductionSupported(jni::ref<android::bluetooth::BluetoothDevice> device) { return call_method<"isNoiseReductionSupported", jboolean>(device); }
	jboolean isVoiceRecognitionSupported(jni::ref<android::bluetooth::BluetoothDevice> device) { return call_method<"isVoiceRecognitionSupported", jboolean>(device); }
	jboolean startVoiceRecognition(jni::ref<android::bluetooth::BluetoothDevice> device) { return call_method<"startVoiceRecognition", jboolean>(device); }
	jboolean stopVoiceRecognition(jni::ref<android::bluetooth::BluetoothDevice> device) { return call_method<"stopVoiceRecognition", jboolean>(device); }
	jboolean isAudioConnected(jni::ref<android::bluetooth::BluetoothDevice> device) { return call_method<"isAudioConnected", jboolean>(device); }
	jboolean sendVendorSpecificResultCode(jni::ref<android::bluetooth::BluetoothDevice> device, jni::ref<java::lang::String> command, jni::ref<java::lang::String> arg) { return call_method<"sendVendorSpecificResultCode", jboolean>(device, command, arg); }

protected:

	BluetoothHeadset(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEADSET
