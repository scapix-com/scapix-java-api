// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/text/Spannable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_PRECOMPUTEDTEXT_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_PRECOMPUTEDTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class PrecomputedText; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::PrecomputedText>
{
	static constexpr fixed_string class_name = "android/text/PrecomputedText";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::text::Spannable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_PRECOMPUTEDTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_PRECOMPUTEDTEXT)
#define SCAPIX_JAVA_API_ANDROID_TEXT_PRECOMPUTEDTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/text/PrecomputedText_Params.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::PrecomputedText : public jni::object_base<"android/text/PrecomputedText",
	java::lang::Object,
	android::text::Spannable>
{
public:

	using Params = PrecomputedText_Params;

	static jni::ref<android::text::PrecomputedText> create(jni::ref<java::lang::CharSequence> text, jni::ref<android::text::PrecomputedText_Params> params) { return call_static_method<"create", jni::ref<android::text::PrecomputedText>>(text, params); }
	jni::ref<android::text::PrecomputedText_Params> getParams() { return call_method<"getParams", jni::ref<android::text::PrecomputedText_Params>>(); }
	jint getParagraphCount() { return call_method<"getParagraphCount", jint>(); }
	jint getParagraphStart(jint paraIndex) { return call_method<"getParagraphStart", jint>(paraIndex); }
	jint getParagraphEnd(jint paraIndex) { return call_method<"getParagraphEnd", jint>(paraIndex); }
	jfloat getWidth(jint start, jint end) { return call_method<"getWidth", jfloat>(start, end); }
	void getBounds(jint start, jint end, jni::ref<android::graphics::Rect> bounds) { return call_method<"getBounds", void>(start, end, bounds); }
	void setSpan(jni::ref<java::lang::Object> what, jint start, jint end, jint flags) { return call_method<"setSpan", void>(what, start, end, flags); }
	void removeSpan(jni::ref<java::lang::Object> what) { return call_method<"removeSpan", void>(what); }
	jni::ref<jni::array<java::lang::Object>> getSpans(jint start, jint end, jni::ref<java::lang::Class> type) { return call_method<"getSpans", jni::ref<jni::array<java::lang::Object>>>(start, end, type); }
	jint getSpanStart(jni::ref<java::lang::Object> tag) { return call_method<"getSpanStart", jint>(tag); }
	jint getSpanEnd(jni::ref<java::lang::Object> tag) { return call_method<"getSpanEnd", jint>(tag); }
	jint getSpanFlags(jni::ref<java::lang::Object> tag) { return call_method<"getSpanFlags", jint>(tag); }
	jint nextSpanTransition(jint start, jint limit, jni::ref<java::lang::Class> type) { return call_method<"nextSpanTransition", jint>(start, limit, type); }
	jint length() { return call_method<"length", jint>(); }
	jchar charAt(jint index) { return call_method<"charAt", jchar>(index); }
	jni::ref<java::lang::CharSequence> subSequence(jint start, jint end) { return call_method<"subSequence", jni::ref<java::lang::CharSequence>>(start, end); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	PrecomputedText(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_PRECOMPUTEDTEXT
