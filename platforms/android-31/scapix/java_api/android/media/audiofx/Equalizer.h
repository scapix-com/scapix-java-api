// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/media/audiofx/AudioEffect.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_EQUALIZER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_EQUALIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::audiofx { class Equalizer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::audiofx::Equalizer>
{
	static constexpr fixed_string class_name = "android/media/audiofx/Equalizer";
	using base_classes = std::tuple<scapix::java_api::android::media::audiofx::AudioEffect>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_EQUALIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_EQUALIZER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_EQUALIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/audiofx/Equalizer_OnParameterChangeListener.h>
#include <scapix/java_api/android/media/audiofx/Equalizer_Settings.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::audiofx::Equalizer : public jni::object_base<"android/media/audiofx/Equalizer",
	android::media::audiofx::AudioEffect>
{
public:

	using Settings = Equalizer_Settings;
	using OnParameterChangeListener = Equalizer_OnParameterChangeListener;

	static jint PARAM_BAND_FREQ_RANGE() { return get_static_field<"PARAM_BAND_FREQ_RANGE", jint>(); }
	static jint PARAM_BAND_LEVEL() { return get_static_field<"PARAM_BAND_LEVEL", jint>(); }
	static jint PARAM_CENTER_FREQ() { return get_static_field<"PARAM_CENTER_FREQ", jint>(); }
	static jint PARAM_CURRENT_PRESET() { return get_static_field<"PARAM_CURRENT_PRESET", jint>(); }
	static jint PARAM_GET_BAND() { return get_static_field<"PARAM_GET_BAND", jint>(); }
	static jint PARAM_GET_NUM_OF_PRESETS() { return get_static_field<"PARAM_GET_NUM_OF_PRESETS", jint>(); }
	static jint PARAM_GET_PRESET_NAME() { return get_static_field<"PARAM_GET_PRESET_NAME", jint>(); }
	static jint PARAM_LEVEL_RANGE() { return get_static_field<"PARAM_LEVEL_RANGE", jint>(); }
	static jint PARAM_NUM_BANDS() { return get_static_field<"PARAM_NUM_BANDS", jint>(); }
	static jint PARAM_STRING_SIZE_MAX() { return get_static_field<"PARAM_STRING_SIZE_MAX", jint>(); }

	static jni::ref<android::media::audiofx::Equalizer> new_object(jint priority, jint audioSession) { return base_::new_object(priority, audioSession); }
	jshort getNumberOfBands() { return call_method<"getNumberOfBands", jshort>(); }
	jni::ref<jni::array<jshort>> getBandLevelRange() { return call_method<"getBandLevelRange", jni::ref<jni::array<jshort>>>(); }
	void setBandLevel(jshort band, jshort level) { return call_method<"setBandLevel", void>(band, level); }
	jshort getBandLevel(jshort band) { return call_method<"getBandLevel", jshort>(band); }
	jint getCenterFreq(jshort band) { return call_method<"getCenterFreq", jint>(band); }
	jni::ref<jni::array<jint>> getBandFreqRange(jshort band) { return call_method<"getBandFreqRange", jni::ref<jni::array<jint>>>(band); }
	jshort getBand(jint frequency) { return call_method<"getBand", jshort>(frequency); }
	jshort getCurrentPreset() { return call_method<"getCurrentPreset", jshort>(); }
	void usePreset(jshort preset) { return call_method<"usePreset", void>(preset); }
	jshort getNumberOfPresets() { return call_method<"getNumberOfPresets", jshort>(); }
	jni::ref<java::lang::String> getPresetName(jshort preset) { return call_method<"getPresetName", jni::ref<java::lang::String>>(preset); }
	void setParameterListener(jni::ref<android::media::audiofx::Equalizer_OnParameterChangeListener> listener) { return call_method<"setParameterListener", void>(listener); }
	jni::ref<android::media::audiofx::Equalizer_Settings> getProperties() { return call_method<"getProperties", jni::ref<android::media::audiofx::Equalizer_Settings>>(); }
	void setProperties(jni::ref<android::media::audiofx::Equalizer_Settings> settings) { return call_method<"setProperties", void>(settings); }

protected:

	Equalizer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_EQUALIZER
