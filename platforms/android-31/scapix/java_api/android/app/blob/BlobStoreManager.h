// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::blob { class BlobStoreManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::blob::BlobStoreManager>
{
	static constexpr fixed_string class_name = "android/app/blob/BlobStoreManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/blob/BlobHandle.h>
#include <scapix/java_api/android/app/blob/BlobStoreManager_Session.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::blob::BlobStoreManager : public jni::object_base<"android/app/blob/BlobStoreManager",
	java::lang::Object>
{
public:

	using Session = BlobStoreManager_Session;

	jlong createSession(jni::ref<android::app::blob::BlobHandle> blobHandle) { return call_method<"createSession", jlong>(blobHandle); }
	jni::ref<android::app::blob::BlobStoreManager_Session> openSession(jlong sessionId) { return call_method<"openSession", jni::ref<android::app::blob::BlobStoreManager_Session>>(sessionId); }
	void abandonSession(jlong sessionId) { return call_method<"abandonSession", void>(sessionId); }
	jni::ref<android::os::ParcelFileDescriptor> openBlob(jni::ref<android::app::blob::BlobHandle> blobHandle) { return call_method<"openBlob", jni::ref<android::os::ParcelFileDescriptor>>(blobHandle); }
	void acquireLease(jni::ref<android::app::blob::BlobHandle> blobHandle, jint descriptionResId, jlong leaseExpiryTimeMillis) { return call_method<"acquireLease", void>(blobHandle, descriptionResId, leaseExpiryTimeMillis); }
	void acquireLease(jni::ref<android::app::blob::BlobHandle> blobHandle, jni::ref<java::lang::CharSequence> description, jlong leaseExpiryTimeMillis) { return call_method<"acquireLease", void>(blobHandle, description, leaseExpiryTimeMillis); }
	void acquireLease(jni::ref<android::app::blob::BlobHandle> blobHandle, jint descriptionResId) { return call_method<"acquireLease", void>(blobHandle, descriptionResId); }
	void acquireLease(jni::ref<android::app::blob::BlobHandle> blobHandle, jni::ref<java::lang::CharSequence> description) { return call_method<"acquireLease", void>(blobHandle, description); }
	void releaseLease(jni::ref<android::app::blob::BlobHandle> blobHandle) { return call_method<"releaseLease", void>(blobHandle); }
	jlong getRemainingLeaseQuotaBytes() { return call_method<"getRemainingLeaseQuotaBytes", jlong>(); }
	jni::ref<java::util::List> getLeasedBlobs() { return call_method<"getLeasedBlobs", jni::ref<java::util::List>>(); }

protected:

	BlobStoreManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER
