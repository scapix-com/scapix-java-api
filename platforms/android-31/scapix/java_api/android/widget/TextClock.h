// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/TextView.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_TEXTCLOCK_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_TEXTCLOCK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class TextClock; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::TextClock>
{
	static constexpr fixed_string class_name = "android/widget/TextClock";
	using base_classes = std::tuple<scapix::java_api::android::widget::TextView>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_TEXTCLOCK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_TEXTCLOCK)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_TEXTCLOCK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::TextClock : public jni::object_base<"android/widget/TextClock",
	android::widget::TextView>
{
public:

	static jni::ref<java::lang::CharSequence> DEFAULT_FORMAT_12_HOUR() { return get_static_field<"DEFAULT_FORMAT_12_HOUR", jni::ref<java::lang::CharSequence>>(); }
	static jni::ref<java::lang::CharSequence> DEFAULT_FORMAT_24_HOUR() { return get_static_field<"DEFAULT_FORMAT_24_HOUR", jni::ref<java::lang::CharSequence>>(); }

	static jni::ref<android::widget::TextClock> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::TextClock> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::TextClock> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::widget::TextClock> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jni::ref<java::lang::CharSequence> getFormat12Hour() { return call_method<"getFormat12Hour", jni::ref<java::lang::CharSequence>>(); }
	void setFormat12Hour(jni::ref<java::lang::CharSequence> format) { return call_method<"setFormat12Hour", void>(format); }
	jni::ref<java::lang::CharSequence> getFormat24Hour() { return call_method<"getFormat24Hour", jni::ref<java::lang::CharSequence>>(); }
	void setFormat24Hour(jni::ref<java::lang::CharSequence> format) { return call_method<"setFormat24Hour", void>(format); }
	void refreshTime() { return call_method<"refreshTime", void>(); }
	jboolean is24HourModeEnabled() { return call_method<"is24HourModeEnabled", jboolean>(); }
	jni::ref<java::lang::String> getTimeZone() { return call_method<"getTimeZone", jni::ref<java::lang::String>>(); }
	void setTimeZone(jni::ref<java::lang::String> timeZone) { return call_method<"setTimeZone", void>(timeZone); }
	void onVisibilityAggregated(jboolean isVisible) { return call_method<"onVisibilityAggregated", void>(isVisible); }

protected:

	TextClock(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_TEXTCLOCK
