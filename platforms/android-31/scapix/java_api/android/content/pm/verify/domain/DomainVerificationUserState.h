// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_PM_VERIFY_DOMAIN_DOMAINVERIFICATIONUSERSTATE_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_VERIFY_DOMAIN_DOMAINVERIFICATIONUSERSTATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content::pm::verify::domain { class DomainVerificationUserState; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::pm::verify::domain::DomainVerificationUserState>
{
	static constexpr fixed_string class_name = "android/content/pm/verify/domain/DomainVerificationUserState";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_VERIFY_DOMAIN_DOMAINVERIFICATIONUSERSTATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_PM_VERIFY_DOMAIN_DOMAINVERIFICATIONUSERSTATE)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_VERIFY_DOMAIN_DOMAINVERIFICATIONUSERSTATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::pm::verify::domain::DomainVerificationUserState : public jni::object_base<"android/content/pm/verify/domain/DomainVerificationUserState",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DOMAIN_STATE_NONE() { return get_static_field<"DOMAIN_STATE_NONE", jint>(); }
	static jint DOMAIN_STATE_SELECTED() { return get_static_field<"DOMAIN_STATE_SELECTED", jint>(); }
	static jint DOMAIN_STATE_VERIFIED() { return get_static_field<"DOMAIN_STATE_VERIFIED", jint>(); }

	jni::ref<java::lang::String> getPackageName() { return call_method<"getPackageName", jni::ref<java::lang::String>>(); }
	jni::ref<android::os::UserHandle> getUser() { return call_method<"getUser", jni::ref<android::os::UserHandle>>(); }
	jboolean isLinkHandlingAllowed() { return call_method<"isLinkHandlingAllowed", jboolean>(); }
	jni::ref<java::util::Map> getHostToStateMap() { return call_method<"getHostToStateMap", jni::ref<java::util::Map>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }

protected:

	DomainVerificationUserState(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_VERIFY_DOMAIN_DOMAINVERIFICATIONUSERSTATE
