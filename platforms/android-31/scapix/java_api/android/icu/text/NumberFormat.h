// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/icu/text/UFormat.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NUMBERFORMAT_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NUMBERFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class NumberFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::NumberFormat>
{
	static constexpr fixed_string class_name = "android/icu/text/NumberFormat";
	using base_classes = std::tuple<scapix::java_api::android::icu::text::UFormat>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NUMBERFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NUMBERFORMAT)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NUMBERFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/math/BigDecimal.h>
#include <scapix/java_api/android/icu/text/DisplayContext.h>
#include <scapix/java_api/android/icu/text/DisplayContext_Type.h>
#include <scapix/java_api/android/icu/util/Currency.h>
#include <scapix/java_api/android/icu/util/CurrencyAmount.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/android/icu/text/NumberFormat_Field.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::NumberFormat : public jni::object_base<"android/icu/text/NumberFormat",
	android::icu::text::UFormat>
{
public:

	using Field = NumberFormat_Field;

	static jint ACCOUNTINGCURRENCYSTYLE() { return get_static_field<"ACCOUNTINGCURRENCYSTYLE", jint>(); }
	static jint CASHCURRENCYSTYLE() { return get_static_field<"CASHCURRENCYSTYLE", jint>(); }
	static jint CURRENCYSTYLE() { return get_static_field<"CURRENCYSTYLE", jint>(); }
	static jint FRACTION_FIELD() { return get_static_field<"FRACTION_FIELD", jint>(); }
	static jint INTEGERSTYLE() { return get_static_field<"INTEGERSTYLE", jint>(); }
	static jint INTEGER_FIELD() { return get_static_field<"INTEGER_FIELD", jint>(); }
	static jint ISOCURRENCYSTYLE() { return get_static_field<"ISOCURRENCYSTYLE", jint>(); }
	static jint NUMBERSTYLE() { return get_static_field<"NUMBERSTYLE", jint>(); }
	static jint PERCENTSTYLE() { return get_static_field<"PERCENTSTYLE", jint>(); }
	static jint PLURALCURRENCYSTYLE() { return get_static_field<"PLURALCURRENCYSTYLE", jint>(); }
	static jint SCIENTIFICSTYLE() { return get_static_field<"SCIENTIFICSTYLE", jint>(); }
	static jint STANDARDCURRENCYSTYLE() { return get_static_field<"STANDARDCURRENCYSTYLE", jint>(); }

	static jni::ref<android::icu::text::NumberFormat> new_object() { return base_::new_object(); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<java::lang::Object> number, jni::ref<java::lang::StringBuffer> toAppendTo, jni::ref<java::text::FieldPosition> pos) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(number, toAppendTo, pos); }
	jni::ref<java::lang::Object> parseObject(jni::ref<java::lang::String> source, jni::ref<java::text::ParsePosition> parsePosition) { return call_method<"parseObject", jni::ref<java::lang::Object>>(source, parsePosition); }
	jni::ref<java::lang::String> format(jdouble number) { return call_method<"format", jni::ref<java::lang::String>>(number); }
	jni::ref<java::lang::String> format(jlong number) { return call_method<"format", jni::ref<java::lang::String>>(number); }
	jni::ref<java::lang::String> format(jni::ref<java::math::BigInteger> number) { return call_method<"format", jni::ref<java::lang::String>>(number); }
	jni::ref<java::lang::String> format(jni::ref<java::math::BigDecimal> number) { return call_method<"format", jni::ref<java::lang::String>>(number); }
	jni::ref<java::lang::String> format(jni::ref<android::icu::math::BigDecimal> number) { return call_method<"format", jni::ref<java::lang::String>>(number); }
	jni::ref<java::lang::String> format(jni::ref<android::icu::util::CurrencyAmount> currAmt) { return call_method<"format", jni::ref<java::lang::String>>(currAmt); }
	jni::ref<java::lang::StringBuffer> format(jdouble p1, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> p3) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuffer> format(jlong p1, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> p3) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<java::math::BigInteger> p1, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> p3) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<java::math::BigDecimal> p1, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> p3) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<android::icu::math::BigDecimal> p1, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> p3) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<android::icu::util::CurrencyAmount> currAmt, jni::ref<java::lang::StringBuffer> toAppendTo, jni::ref<java::text::FieldPosition> pos) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(currAmt, toAppendTo, pos); }
	jni::ref<java::lang::Number> parse(jni::ref<java::lang::String> p1, jni::ref<java::text::ParsePosition> p2) { return call_method<"parse", jni::ref<java::lang::Number>>(p1, p2); }
	jni::ref<java::lang::Number> parse(jni::ref<java::lang::String> text) { return call_method<"parse", jni::ref<java::lang::Number>>(text); }
	jni::ref<android::icu::util::CurrencyAmount> parseCurrency(jni::ref<java::lang::CharSequence> text, jni::ref<java::text::ParsePosition> pos) { return call_method<"parseCurrency", jni::ref<android::icu::util::CurrencyAmount>>(text, pos); }
	jboolean isParseIntegerOnly() { return call_method<"isParseIntegerOnly", jboolean>(); }
	void setParseIntegerOnly(jboolean value) { return call_method<"setParseIntegerOnly", void>(value); }
	void setParseStrict(jboolean value) { return call_method<"setParseStrict", void>(value); }
	jboolean isParseStrict() { return call_method<"isParseStrict", jboolean>(); }
	void setContext(jni::ref<android::icu::text::DisplayContext> context) { return call_method<"setContext", void>(context); }
	jni::ref<android::icu::text::DisplayContext> getContext(jni::ref<android::icu::text::DisplayContext_Type> type) { return call_method<"getContext", jni::ref<android::icu::text::DisplayContext>>(type); }
	static jni::ref<android::icu::text::NumberFormat> getInstance() { return call_static_method<"getInstance", jni::ref<android::icu::text::NumberFormat>>(); }
	static jni::ref<android::icu::text::NumberFormat> getInstance(jni::ref<java::util::Locale> inLocale) { return call_static_method<"getInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getInstance(jni::ref<android::icu::util::ULocale> inLocale) { return call_static_method<"getInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getInstance(jint style) { return call_static_method<"getInstance", jni::ref<android::icu::text::NumberFormat>>(style); }
	static jni::ref<android::icu::text::NumberFormat> getInstance(jni::ref<java::util::Locale> inLocale, jint style) { return call_static_method<"getInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale, style); }
	static jni::ref<android::icu::text::NumberFormat> getNumberInstance() { return call_static_method<"getNumberInstance", jni::ref<android::icu::text::NumberFormat>>(); }
	static jni::ref<android::icu::text::NumberFormat> getNumberInstance(jni::ref<java::util::Locale> inLocale) { return call_static_method<"getNumberInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getNumberInstance(jni::ref<android::icu::util::ULocale> inLocale) { return call_static_method<"getNumberInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getIntegerInstance() { return call_static_method<"getIntegerInstance", jni::ref<android::icu::text::NumberFormat>>(); }
	static jni::ref<android::icu::text::NumberFormat> getIntegerInstance(jni::ref<java::util::Locale> inLocale) { return call_static_method<"getIntegerInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getIntegerInstance(jni::ref<android::icu::util::ULocale> inLocale) { return call_static_method<"getIntegerInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getCurrencyInstance() { return call_static_method<"getCurrencyInstance", jni::ref<android::icu::text::NumberFormat>>(); }
	static jni::ref<android::icu::text::NumberFormat> getCurrencyInstance(jni::ref<java::util::Locale> inLocale) { return call_static_method<"getCurrencyInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getCurrencyInstance(jni::ref<android::icu::util::ULocale> inLocale) { return call_static_method<"getCurrencyInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getPercentInstance() { return call_static_method<"getPercentInstance", jni::ref<android::icu::text::NumberFormat>>(); }
	static jni::ref<android::icu::text::NumberFormat> getPercentInstance(jni::ref<java::util::Locale> inLocale) { return call_static_method<"getPercentInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getPercentInstance(jni::ref<android::icu::util::ULocale> inLocale) { return call_static_method<"getPercentInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getScientificInstance() { return call_static_method<"getScientificInstance", jni::ref<android::icu::text::NumberFormat>>(); }
	static jni::ref<android::icu::text::NumberFormat> getScientificInstance(jni::ref<java::util::Locale> inLocale) { return call_static_method<"getScientificInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<android::icu::text::NumberFormat> getScientificInstance(jni::ref<android::icu::util::ULocale> inLocale) { return call_static_method<"getScientificInstance", jni::ref<android::icu::text::NumberFormat>>(inLocale); }
	static jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_static_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean isGroupingUsed() { return call_method<"isGroupingUsed", jboolean>(); }
	void setGroupingUsed(jboolean newValue) { return call_method<"setGroupingUsed", void>(newValue); }
	jint getMaximumIntegerDigits() { return call_method<"getMaximumIntegerDigits", jint>(); }
	void setMaximumIntegerDigits(jint newValue) { return call_method<"setMaximumIntegerDigits", void>(newValue); }
	jint getMinimumIntegerDigits() { return call_method<"getMinimumIntegerDigits", jint>(); }
	void setMinimumIntegerDigits(jint newValue) { return call_method<"setMinimumIntegerDigits", void>(newValue); }
	jint getMaximumFractionDigits() { return call_method<"getMaximumFractionDigits", jint>(); }
	void setMaximumFractionDigits(jint newValue) { return call_method<"setMaximumFractionDigits", void>(newValue); }
	jint getMinimumFractionDigits() { return call_method<"getMinimumFractionDigits", jint>(); }
	void setMinimumFractionDigits(jint newValue) { return call_method<"setMinimumFractionDigits", void>(newValue); }
	void setCurrency(jni::ref<android::icu::util::Currency> theCurrency) { return call_method<"setCurrency", void>(theCurrency); }
	jni::ref<android::icu::util::Currency> getCurrency() { return call_method<"getCurrency", jni::ref<android::icu::util::Currency>>(); }
	jint getRoundingMode() { return call_method<"getRoundingMode", jint>(); }
	void setRoundingMode(jint roundingMode) { return call_method<"setRoundingMode", void>(roundingMode); }
	static jni::ref<android::icu::text::NumberFormat> getInstance(jni::ref<android::icu::util::ULocale> desiredLocale, jint choice) { return call_static_method<"getInstance", jni::ref<android::icu::text::NumberFormat>>(desiredLocale, choice); }

protected:

	NumberFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_NUMBERFORMAT
