// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SCIENTIFICNUMBERFORMATTER_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SCIENTIFICNUMBERFORMATTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class ScientificNumberFormatter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::ScientificNumberFormatter>
{
	static constexpr fixed_string class_name = "android/icu/text/ScientificNumberFormatter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SCIENTIFICNUMBERFORMATTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SCIENTIFICNUMBERFORMATTER)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SCIENTIFICNUMBERFORMATTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/DecimalFormat.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::ScientificNumberFormatter : public jni::object_base<"android/icu/text/ScientificNumberFormatter",
	java::lang::Object>
{
public:

	static jni::ref<android::icu::text::ScientificNumberFormatter> getSuperscriptInstance(jni::ref<android::icu::util::ULocale> locale) { return call_static_method<"getSuperscriptInstance", jni::ref<android::icu::text::ScientificNumberFormatter>>(locale); }
	static jni::ref<android::icu::text::ScientificNumberFormatter> getSuperscriptInstance(jni::ref<android::icu::text::DecimalFormat> df) { return call_static_method<"getSuperscriptInstance", jni::ref<android::icu::text::ScientificNumberFormatter>>(df); }
	static jni::ref<android::icu::text::ScientificNumberFormatter> getMarkupInstance(jni::ref<android::icu::util::ULocale> locale, jni::ref<java::lang::String> beginMarkup, jni::ref<java::lang::String> endMarkup) { return call_static_method<"getMarkupInstance", jni::ref<android::icu::text::ScientificNumberFormatter>>(locale, beginMarkup, endMarkup); }
	static jni::ref<android::icu::text::ScientificNumberFormatter> getMarkupInstance(jni::ref<android::icu::text::DecimalFormat> df, jni::ref<java::lang::String> beginMarkup, jni::ref<java::lang::String> endMarkup) { return call_static_method<"getMarkupInstance", jni::ref<android::icu::text::ScientificNumberFormatter>>(df, beginMarkup, endMarkup); }
	jni::ref<java::lang::String> format(jni::ref<java::lang::Object> number) { return call_method<"format", jni::ref<java::lang::String>>(number); }

protected:

	ScientificNumberFormatter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SCIENTIFICNUMBERFORMATTER
