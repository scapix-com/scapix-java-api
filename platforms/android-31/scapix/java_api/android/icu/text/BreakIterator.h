// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BREAKITERATOR_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BREAKITERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class BreakIterator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::BreakIterator>
{
	static constexpr fixed_string class_name = "android/icu/text/BreakIterator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BREAKITERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BREAKITERATOR)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BREAKITERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/CharacterIterator.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::BreakIterator : public jni::object_base<"android/icu/text/BreakIterator",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jint DONE() { return get_static_field<"DONE", jint>(); }
	static jint KIND_CHARACTER() { return get_static_field<"KIND_CHARACTER", jint>(); }
	static jint KIND_LINE() { return get_static_field<"KIND_LINE", jint>(); }
	static jint KIND_SENTENCE() { return get_static_field<"KIND_SENTENCE", jint>(); }
	static jint KIND_TITLE() { return get_static_field<"KIND_TITLE", jint>(); }
	static jint KIND_WORD() { return get_static_field<"KIND_WORD", jint>(); }
	static jint WORD_IDEO() { return get_static_field<"WORD_IDEO", jint>(); }
	static jint WORD_IDEO_LIMIT() { return get_static_field<"WORD_IDEO_LIMIT", jint>(); }
	static jint WORD_KANA() { return get_static_field<"WORD_KANA", jint>(); }
	static jint WORD_KANA_LIMIT() { return get_static_field<"WORD_KANA_LIMIT", jint>(); }
	static jint WORD_LETTER() { return get_static_field<"WORD_LETTER", jint>(); }
	static jint WORD_LETTER_LIMIT() { return get_static_field<"WORD_LETTER_LIMIT", jint>(); }
	static jint WORD_NONE() { return get_static_field<"WORD_NONE", jint>(); }
	static jint WORD_NONE_LIMIT() { return get_static_field<"WORD_NONE_LIMIT", jint>(); }
	static jint WORD_NUMBER() { return get_static_field<"WORD_NUMBER", jint>(); }
	static jint WORD_NUMBER_LIMIT() { return get_static_field<"WORD_NUMBER_LIMIT", jint>(); }

	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jint first() { return call_method<"first", jint>(); }
	jint last() { return call_method<"last", jint>(); }
	jint next(jint p1) { return call_method<"next", jint>(p1); }
	jint next() { return call_method<"next", jint>(); }
	jint previous() { return call_method<"previous", jint>(); }
	jint following(jint p1) { return call_method<"following", jint>(p1); }
	jint preceding(jint offset) { return call_method<"preceding", jint>(offset); }
	jboolean isBoundary(jint offset) { return call_method<"isBoundary", jboolean>(offset); }
	jint current() { return call_method<"current", jint>(); }
	jint getRuleStatus() { return call_method<"getRuleStatus", jint>(); }
	jint getRuleStatusVec(jni::ref<jni::array<jint>> fillInArray) { return call_method<"getRuleStatusVec", jint>(fillInArray); }
	jni::ref<java::text::CharacterIterator> getText() { return call_method<"getText", jni::ref<java::text::CharacterIterator>>(); }
	void setText(jni::ref<java::lang::String> newText) { return call_method<"setText", void>(newText); }
	void setText(jni::ref<java::lang::CharSequence> newText) { return call_method<"setText", void>(newText); }
	void setText(jni::ref<java::text::CharacterIterator> p1) { return call_method<"setText", void>(p1); }
	static jni::ref<android::icu::text::BreakIterator> getWordInstance() { return call_static_method<"getWordInstance", jni::ref<android::icu::text::BreakIterator>>(); }
	static jni::ref<android::icu::text::BreakIterator> getWordInstance(jni::ref<java::util::Locale> where) { return call_static_method<"getWordInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getWordInstance(jni::ref<android::icu::util::ULocale> where) { return call_static_method<"getWordInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getLineInstance() { return call_static_method<"getLineInstance", jni::ref<android::icu::text::BreakIterator>>(); }
	static jni::ref<android::icu::text::BreakIterator> getLineInstance(jni::ref<java::util::Locale> where) { return call_static_method<"getLineInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getLineInstance(jni::ref<android::icu::util::ULocale> where) { return call_static_method<"getLineInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getCharacterInstance() { return call_static_method<"getCharacterInstance", jni::ref<android::icu::text::BreakIterator>>(); }
	static jni::ref<android::icu::text::BreakIterator> getCharacterInstance(jni::ref<java::util::Locale> where) { return call_static_method<"getCharacterInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getCharacterInstance(jni::ref<android::icu::util::ULocale> where) { return call_static_method<"getCharacterInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getSentenceInstance() { return call_static_method<"getSentenceInstance", jni::ref<android::icu::text::BreakIterator>>(); }
	static jni::ref<android::icu::text::BreakIterator> getSentenceInstance(jni::ref<java::util::Locale> where) { return call_static_method<"getSentenceInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getSentenceInstance(jni::ref<android::icu::util::ULocale> where) { return call_static_method<"getSentenceInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getTitleInstance() { return call_static_method<"getTitleInstance", jni::ref<android::icu::text::BreakIterator>>(); }
	static jni::ref<android::icu::text::BreakIterator> getTitleInstance(jni::ref<java::util::Locale> where) { return call_static_method<"getTitleInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<android::icu::text::BreakIterator> getTitleInstance(jni::ref<android::icu::util::ULocale> where) { return call_static_method<"getTitleInstance", jni::ref<android::icu::text::BreakIterator>>(where); }
	static jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_static_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }

protected:

	BreakIterator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_BREAKITERATOR
