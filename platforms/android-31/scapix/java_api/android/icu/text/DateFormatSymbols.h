// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_DATEFORMATSYMBOLS_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_DATEFORMATSYMBOLS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class DateFormatSymbols; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::DateFormatSymbols>
{
	static constexpr fixed_string class_name = "android/icu/text/DateFormatSymbols";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_DATEFORMATSYMBOLS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_DATEFORMATSYMBOLS)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_DATEFORMATSYMBOLS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/util/Calendar.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/ResourceBundle.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::DateFormatSymbols : public jni::object_base<"android/icu/text/DateFormatSymbols",
	java::lang::Object,
	java::io::Serializable,
	java::lang::Cloneable>
{
public:

	static jint ABBREVIATED() { return get_static_field<"ABBREVIATED", jint>(); }
	static jint FORMAT() { return get_static_field<"FORMAT", jint>(); }
	static jint NARROW() { return get_static_field<"NARROW", jint>(); }
	static jint SHORT() { return get_static_field<"SHORT", jint>(); }
	static jint STANDALONE() { return get_static_field<"STANDALONE", jint>(); }
	static jint WIDE() { return get_static_field<"WIDE", jint>(); }

	static jni::ref<android::icu::text::DateFormatSymbols> new_object() { return base_::new_object(); }
	static jni::ref<android::icu::text::DateFormatSymbols> new_object(jni::ref<java::util::Locale> locale) { return base_::new_object(locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> new_object(jni::ref<android::icu::util::ULocale> locale) { return base_::new_object(locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> new_object(jni::ref<android::icu::util::Calendar> cal, jni::ref<java::util::Locale> locale) { return base_::new_object(cal, locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> new_object(jni::ref<android::icu::util::Calendar> cal, jni::ref<android::icu::util::ULocale> locale) { return base_::new_object(cal, locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> new_object(jni::ref<java::lang::Class> calendarClass, jni::ref<java::util::Locale> locale) { return base_::new_object(calendarClass, locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> new_object(jni::ref<java::lang::Class> calendarClass, jni::ref<android::icu::util::ULocale> locale) { return base_::new_object(calendarClass, locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> new_object(jni::ref<java::util::ResourceBundle> bundle, jni::ref<java::util::Locale> locale) { return base_::new_object(bundle, locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> new_object(jni::ref<java::util::ResourceBundle> bundle, jni::ref<android::icu::util::ULocale> locale) { return base_::new_object(bundle, locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> getInstance() { return call_static_method<"getInstance", jni::ref<android::icu::text::DateFormatSymbols>>(); }
	static jni::ref<android::icu::text::DateFormatSymbols> getInstance(jni::ref<java::util::Locale> locale) { return call_static_method<"getInstance", jni::ref<android::icu::text::DateFormatSymbols>>(locale); }
	static jni::ref<android::icu::text::DateFormatSymbols> getInstance(jni::ref<android::icu::util::ULocale> locale) { return call_static_method<"getInstance", jni::ref<android::icu::text::DateFormatSymbols>>(locale); }
	static jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_static_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }
	jni::ref<jni::array<java::lang::String>> getEras() { return call_method<"getEras", jni::ref<jni::array<java::lang::String>>>(); }
	void setEras(jni::ref<jni::array<java::lang::String>> newEras) { return call_method<"setEras", void>(newEras); }
	jni::ref<jni::array<java::lang::String>> getEraNames() { return call_method<"getEraNames", jni::ref<jni::array<java::lang::String>>>(); }
	void setEraNames(jni::ref<jni::array<java::lang::String>> newEraNames) { return call_method<"setEraNames", void>(newEraNames); }
	jni::ref<jni::array<java::lang::String>> getNarrowEras() { return call_method<"getNarrowEras", jni::ref<jni::array<java::lang::String>>>(); }
	void setNarrowEras(jni::ref<jni::array<java::lang::String>> newNarrowEras) { return call_method<"setNarrowEras", void>(newNarrowEras); }
	jni::ref<jni::array<java::lang::String>> getMonths() { return call_method<"getMonths", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getMonths(jint context, jint width) { return call_method<"getMonths", jni::ref<jni::array<java::lang::String>>>(context, width); }
	void setMonths(jni::ref<jni::array<java::lang::String>> newMonths) { return call_method<"setMonths", void>(newMonths); }
	void setMonths(jni::ref<jni::array<java::lang::String>> newMonths, jint context, jint width) { return call_method<"setMonths", void>(newMonths, context, width); }
	jni::ref<jni::array<java::lang::String>> getShortMonths() { return call_method<"getShortMonths", jni::ref<jni::array<java::lang::String>>>(); }
	void setShortMonths(jni::ref<jni::array<java::lang::String>> newShortMonths) { return call_method<"setShortMonths", void>(newShortMonths); }
	jni::ref<jni::array<java::lang::String>> getWeekdays() { return call_method<"getWeekdays", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getWeekdays(jint context, jint width) { return call_method<"getWeekdays", jni::ref<jni::array<java::lang::String>>>(context, width); }
	void setWeekdays(jni::ref<jni::array<java::lang::String>> newWeekdays, jint context, jint width) { return call_method<"setWeekdays", void>(newWeekdays, context, width); }
	void setWeekdays(jni::ref<jni::array<java::lang::String>> newWeekdays) { return call_method<"setWeekdays", void>(newWeekdays); }
	jni::ref<jni::array<java::lang::String>> getShortWeekdays() { return call_method<"getShortWeekdays", jni::ref<jni::array<java::lang::String>>>(); }
	void setShortWeekdays(jni::ref<jni::array<java::lang::String>> newAbbrevWeekdays) { return call_method<"setShortWeekdays", void>(newAbbrevWeekdays); }
	jni::ref<jni::array<java::lang::String>> getQuarters(jint context, jint width) { return call_method<"getQuarters", jni::ref<jni::array<java::lang::String>>>(context, width); }
	void setQuarters(jni::ref<jni::array<java::lang::String>> newQuarters, jint context, jint width) { return call_method<"setQuarters", void>(newQuarters, context, width); }
	jni::ref<jni::array<java::lang::String>> getYearNames(jint context, jint width) { return call_method<"getYearNames", jni::ref<jni::array<java::lang::String>>>(context, width); }
	void setYearNames(jni::ref<jni::array<java::lang::String>> yearNames, jint context, jint width) { return call_method<"setYearNames", void>(yearNames, context, width); }
	jni::ref<jni::array<java::lang::String>> getZodiacNames(jint context, jint width) { return call_method<"getZodiacNames", jni::ref<jni::array<java::lang::String>>>(context, width); }
	void setZodiacNames(jni::ref<jni::array<java::lang::String>> zodiacNames, jint context, jint width) { return call_method<"setZodiacNames", void>(zodiacNames, context, width); }
	jni::ref<jni::array<java::lang::String>> getAmPmStrings() { return call_method<"getAmPmStrings", jni::ref<jni::array<java::lang::String>>>(); }
	void setAmPmStrings(jni::ref<jni::array<java::lang::String>> newAmpms) { return call_method<"setAmPmStrings", void>(newAmpms); }
	jni::ref<jni::array<jni::array<java::lang::String>>> getZoneStrings() { return call_method<"getZoneStrings", jni::ref<jni::array<jni::array<java::lang::String>>>>(); }
	void setZoneStrings(jni::ref<jni::array<jni::array<java::lang::String>>> newZoneStrings) { return call_method<"setZoneStrings", void>(newZoneStrings); }
	jni::ref<java::lang::String> getLocalPatternChars() { return call_method<"getLocalPatternChars", jni::ref<java::lang::String>>(); }
	void setLocalPatternChars(jni::ref<java::lang::String> newLocalPatternChars) { return call_method<"setLocalPatternChars", void>(newLocalPatternChars); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }

protected:

	DateFormatSymbols(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_DATEFORMATSYMBOLS
