// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Color; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Color>
{
	static constexpr fixed_string class_name = "android/graphics/Color";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/ColorSpace.h>
#include <scapix/java_api/android/graphics/ColorSpace_Connector.h>
#include <scapix/java_api/android/graphics/ColorSpace_Model.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Color : public jni::object_base<"android/graphics/Color",
	java::lang::Object>
{
public:

	static jint BLACK() { return get_static_field<"BLACK", jint>(); }
	static jint BLUE() { return get_static_field<"BLUE", jint>(); }
	static jint CYAN() { return get_static_field<"CYAN", jint>(); }
	static jint DKGRAY() { return get_static_field<"DKGRAY", jint>(); }
	static jint GRAY() { return get_static_field<"GRAY", jint>(); }
	static jint GREEN() { return get_static_field<"GREEN", jint>(); }
	static jint LTGRAY() { return get_static_field<"LTGRAY", jint>(); }
	static jint MAGENTA() { return get_static_field<"MAGENTA", jint>(); }
	static jint RED() { return get_static_field<"RED", jint>(); }
	static jint TRANSPARENT() { return get_static_field<"TRANSPARENT", jint>(); }
	static jint WHITE() { return get_static_field<"WHITE", jint>(); }
	static jint YELLOW() { return get_static_field<"YELLOW", jint>(); }

	static jni::ref<android::graphics::Color> new_object() { return base_::new_object(); }
	jni::ref<android::graphics::ColorSpace> getColorSpace() { return call_method<"getColorSpace", jni::ref<android::graphics::ColorSpace>>(); }
	jni::ref<android::graphics::ColorSpace_Model> getModel() { return call_method<"getModel", jni::ref<android::graphics::ColorSpace_Model>>(); }
	jboolean isWideGamut() { return call_method<"isWideGamut", jboolean>(); }
	jboolean isSrgb() { return call_method<"isSrgb", jboolean>(); }
	jint getComponentCount() { return call_method<"getComponentCount", jint>(); }
	jlong pack() { return call_method<"pack", jlong>(); }
	jni::ref<android::graphics::Color> convert(jni::ref<android::graphics::ColorSpace> colorSpace) { return call_method<"convert", jni::ref<android::graphics::Color>>(colorSpace); }
	jint toArgb() { return call_method<"toArgb", jint>(); }
	jfloat red() { return call_method<"red", jfloat>(); }
	jfloat green() { return call_method<"green", jfloat>(); }
	jfloat blue() { return call_method<"blue", jfloat>(); }
	jfloat alpha() { return call_method<"alpha", jfloat>(); }
	jni::ref<jni::array<jfloat>> getComponents() { return call_method<"getComponents", jni::ref<jni::array<jfloat>>>(); }
	jni::ref<jni::array<jfloat>> getComponents(jni::ref<jni::array<jfloat>> components) { return call_method<"getComponents", jni::ref<jni::array<jfloat>>>(components); }
	jfloat getComponent(jint component) { return call_method<"getComponent", jfloat>(component); }
	jfloat luminance() { return call_method<"luminance", jfloat>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<android::graphics::ColorSpace> colorSpace(jlong color) { return call_static_method<"colorSpace", jni::ref<android::graphics::ColorSpace>>(color); }
	static jfloat red(jlong color) { return call_static_method<"red", jfloat>(color); }
	static jfloat green(jlong color) { return call_static_method<"green", jfloat>(color); }
	static jfloat blue(jlong color) { return call_static_method<"blue", jfloat>(color); }
	static jfloat alpha(jlong color) { return call_static_method<"alpha", jfloat>(color); }
	static jboolean isSrgb(jlong color) { return call_static_method<"isSrgb", jboolean>(color); }
	static jboolean isWideGamut(jlong color) { return call_static_method<"isWideGamut", jboolean>(color); }
	static jboolean isInColorSpace(jlong color, jni::ref<android::graphics::ColorSpace> p2) { return call_static_method<"isInColorSpace", jboolean>(color, p2); }
	static jint toArgb(jlong color) { return call_static_method<"toArgb", jint>(color); }
	static jni::ref<android::graphics::Color> valueOf(jint color) { return call_static_method<"valueOf", jni::ref<android::graphics::Color>>(color); }
	static jni::ref<android::graphics::Color> valueOf(jlong color) { return call_static_method<"valueOf", jni::ref<android::graphics::Color>>(color); }
	static jni::ref<android::graphics::Color> valueOf(jfloat r, jfloat g, jfloat b) { return call_static_method<"valueOf", jni::ref<android::graphics::Color>>(r, g, b); }
	static jni::ref<android::graphics::Color> valueOf(jfloat r, jfloat g, jfloat b, jfloat a) { return call_static_method<"valueOf", jni::ref<android::graphics::Color>>(r, g, b, a); }
	static jni::ref<android::graphics::Color> valueOf(jfloat r, jfloat g, jfloat b, jfloat a, jni::ref<android::graphics::ColorSpace> colorSpace) { return call_static_method<"valueOf", jni::ref<android::graphics::Color>>(r, g, b, a, colorSpace); }
	static jni::ref<android::graphics::Color> valueOf(jni::ref<jni::array<jfloat>> components, jni::ref<android::graphics::ColorSpace> colorSpace) { return call_static_method<"valueOf", jni::ref<android::graphics::Color>>(components, colorSpace); }
	static jlong pack(jint color) { return call_static_method<"pack", jlong>(color); }
	static jlong pack(jfloat red, jfloat green, jfloat blue) { return call_static_method<"pack", jlong>(red, green, blue); }
	static jlong pack(jfloat red, jfloat green, jfloat blue, jfloat alpha) { return call_static_method<"pack", jlong>(red, green, blue, alpha); }
	static jlong pack(jfloat red, jfloat green, jfloat blue, jfloat alpha, jni::ref<android::graphics::ColorSpace> colorSpace) { return call_static_method<"pack", jlong>(red, green, blue, alpha, colorSpace); }
	static jlong convert(jint color, jni::ref<android::graphics::ColorSpace> colorSpace) { return call_static_method<"convert", jlong>(color, colorSpace); }
	static jlong convert(jlong color, jni::ref<android::graphics::ColorSpace> p2) { return call_static_method<"convert", jlong>(color, p2); }
	static jlong convert(jfloat r, jfloat g, jfloat b, jfloat a, jni::ref<android::graphics::ColorSpace> source, jni::ref<android::graphics::ColorSpace> destination) { return call_static_method<"convert", jlong>(r, g, b, a, source, destination); }
	static jlong convert(jlong color, jni::ref<android::graphics::ColorSpace_Connector> p2) { return call_static_method<"convert", jlong>(color, p2); }
	static jlong convert(jfloat r, jfloat g, jfloat b, jfloat a, jni::ref<android::graphics::ColorSpace_Connector> connector) { return call_static_method<"convert", jlong>(r, g, b, a, connector); }
	static jfloat luminance(jlong color) { return call_static_method<"luminance", jfloat>(color); }
	static jint alpha(jint color) { return call_static_method<"alpha", jint>(color); }
	static jint red(jint color) { return call_static_method<"red", jint>(color); }
	static jint green(jint color) { return call_static_method<"green", jint>(color); }
	static jint blue(jint color) { return call_static_method<"blue", jint>(color); }
	static jint rgb(jint red, jint green, jint blue) { return call_static_method<"rgb", jint>(red, green, blue); }
	static jint rgb(jfloat red, jfloat green, jfloat blue) { return call_static_method<"rgb", jint>(red, green, blue); }
	static jint argb(jint alpha, jint red, jint green, jint blue) { return call_static_method<"argb", jint>(alpha, red, green, blue); }
	static jint argb(jfloat alpha, jfloat red, jfloat green, jfloat blue) { return call_static_method<"argb", jint>(alpha, red, green, blue); }
	static jfloat luminance(jint color) { return call_static_method<"luminance", jfloat>(color); }
	static jint parseColor(jni::ref<java::lang::String> colorString) { return call_static_method<"parseColor", jint>(colorString); }
	static void RGBToHSV(jint red, jint green, jint blue, jni::ref<jni::array<jfloat>> hsv) { return call_static_method<"RGBToHSV", void>(red, green, blue, hsv); }
	static void colorToHSV(jint color, jni::ref<jni::array<jfloat>> hsv) { return call_static_method<"colorToHSV", void>(color, hsv); }
	static jint HSVToColor(jni::ref<jni::array<jfloat>> hsv) { return call_static_method<"HSVToColor", jint>(hsv); }
	static jint HSVToColor(jint alpha, jni::ref<jni::array<jfloat>> hsv) { return call_static_method<"HSVToColor", jint>(alpha, hsv); }

protected:

	Color(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR
