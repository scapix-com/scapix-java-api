// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSSTATUS_FWD
#define SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSSTATUS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::location { class GnssStatus; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::location::GnssStatus>
{
	static constexpr fixed_string class_name = "android/location/GnssStatus";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSSTATUS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSSTATUS)
#define SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSSTATUS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/location/GnssStatus_Callback.h>
#include <scapix/java_api/android/location/GnssStatus_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::location::GnssStatus : public jni::object_base<"android/location/GnssStatus",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Callback = GnssStatus_Callback;
	using Builder = GnssStatus_Builder;

	static jint CONSTELLATION_BEIDOU() { return get_static_field<"CONSTELLATION_BEIDOU", jint>(); }
	static jint CONSTELLATION_GALILEO() { return get_static_field<"CONSTELLATION_GALILEO", jint>(); }
	static jint CONSTELLATION_GLONASS() { return get_static_field<"CONSTELLATION_GLONASS", jint>(); }
	static jint CONSTELLATION_GPS() { return get_static_field<"CONSTELLATION_GPS", jint>(); }
	static jint CONSTELLATION_IRNSS() { return get_static_field<"CONSTELLATION_IRNSS", jint>(); }
	static jint CONSTELLATION_QZSS() { return get_static_field<"CONSTELLATION_QZSS", jint>(); }
	static jint CONSTELLATION_SBAS() { return get_static_field<"CONSTELLATION_SBAS", jint>(); }
	static jint CONSTELLATION_UNKNOWN() { return get_static_field<"CONSTELLATION_UNKNOWN", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	jint getSatelliteCount() { return call_method<"getSatelliteCount", jint>(); }
	jint getConstellationType(jint satelliteIndex) { return call_method<"getConstellationType", jint>(satelliteIndex); }
	jint getSvid(jint satelliteIndex) { return call_method<"getSvid", jint>(satelliteIndex); }
	jfloat getCn0DbHz(jint satelliteIndex) { return call_method<"getCn0DbHz", jfloat>(satelliteIndex); }
	jfloat getElevationDegrees(jint satelliteIndex) { return call_method<"getElevationDegrees", jfloat>(satelliteIndex); }
	jfloat getAzimuthDegrees(jint satelliteIndex) { return call_method<"getAzimuthDegrees", jfloat>(satelliteIndex); }
	jboolean hasEphemerisData(jint satelliteIndex) { return call_method<"hasEphemerisData", jboolean>(satelliteIndex); }
	jboolean hasAlmanacData(jint satelliteIndex) { return call_method<"hasAlmanacData", jboolean>(satelliteIndex); }
	jboolean usedInFix(jint satelliteIndex) { return call_method<"usedInFix", jboolean>(satelliteIndex); }
	jboolean hasCarrierFrequencyHz(jint satelliteIndex) { return call_method<"hasCarrierFrequencyHz", jboolean>(satelliteIndex); }
	jfloat getCarrierFrequencyHz(jint satelliteIndex) { return call_method<"getCarrierFrequencyHz", jfloat>(satelliteIndex); }
	jboolean hasBasebandCn0DbHz(jint satelliteIndex) { return call_method<"hasBasebandCn0DbHz", jboolean>(satelliteIndex); }
	jfloat getBasebandCn0DbHz(jint satelliteIndex) { return call_method<"getBasebandCn0DbHz", jfloat>(satelliteIndex); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> parcel, jint flags) { return call_method<"writeToParcel", void>(parcel, flags); }

protected:

	GnssStatus(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSSTATUS
