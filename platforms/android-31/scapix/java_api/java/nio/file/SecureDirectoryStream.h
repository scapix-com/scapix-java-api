// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/file/DirectoryStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_FILE_SECUREDIRECTORYSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_FILE_SECUREDIRECTORYSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::file { class SecureDirectoryStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::file::SecureDirectoryStream>
{
	static constexpr fixed_string class_name = "java/nio/file/SecureDirectoryStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::nio::file::DirectoryStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FILE_SECUREDIRECTORYSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_FILE_SECUREDIRECTORYSTREAM)
#define SCAPIX_JAVA_API_JAVA_NIO_FILE_SECUREDIRECTORYSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/nio/channels/SeekableByteChannel.h>
#include <scapix/java_api/java/nio/file/LinkOption.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttribute.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttributeView.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::file::SecureDirectoryStream : public jni::object_base<"java/nio/file/SecureDirectoryStream",
	java::lang::Object,
	java::nio::file::DirectoryStream>
{
public:

	jni::ref<java::nio::file::SecureDirectoryStream> newDirectoryStream(jni::ref<java::lang::Object> p1, jni::ref<jni::array<java::nio::file::LinkOption>> p2) { return call_method<"newDirectoryStream", jni::ref<java::nio::file::SecureDirectoryStream>>(p1, p2); }
	jni::ref<java::nio::channels::SeekableByteChannel> newByteChannel(jni::ref<java::lang::Object> p1, jni::ref<java::util::Set> p2, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> p3) { return call_method<"newByteChannel", jni::ref<java::nio::channels::SeekableByteChannel>>(p1, p2, p3); }
	void deleteFile(jni::ref<java::lang::Object> p1) { return call_method<"deleteFile", void>(p1); }
	void deleteDirectory(jni::ref<java::lang::Object> p1) { return call_method<"deleteDirectory", void>(p1); }
	void move(jni::ref<java::lang::Object> p1, jni::ref<java::nio::file::SecureDirectoryStream> p2, jni::ref<java::lang::Object> p3) { return call_method<"move", void>(p1, p2, p3); }
	jni::ref<java::nio::file::attribute::FileAttributeView> getFileAttributeView(jni::ref<java::lang::Class> p1) { return call_method<"getFileAttributeView", jni::ref<java::nio::file::attribute::FileAttributeView>>(p1); }
	jni::ref<java::nio::file::attribute::FileAttributeView> getFileAttributeView(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Class> p2, jni::ref<jni::array<java::nio::file::LinkOption>> p3) { return call_method<"getFileAttributeView", jni::ref<java::nio::file::attribute::FileAttributeView>>(p1, p2, p3); }

protected:

	SecureDirectoryStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FILE_SECUREDIRECTORYSTREAM
