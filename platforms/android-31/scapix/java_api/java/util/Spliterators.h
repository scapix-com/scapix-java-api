// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATORS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATORS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Spliterators; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Spliterators>
{
	static constexpr fixed_string class_name = "java/util/Spliterators";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATORS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATORS)
#define SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATORS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/PrimitiveIterator_OfDouble.h>
#include <scapix/java_api/java/util/PrimitiveIterator_OfInt.h>
#include <scapix/java_api/java/util/PrimitiveIterator_OfLong.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/Spliterator_OfDouble.h>
#include <scapix/java_api/java/util/Spliterator_OfInt.h>
#include <scapix/java_api/java/util/Spliterator_OfLong.h>
#include <scapix/java_api/java/util/Spliterators_AbstractSpliterator.h>
#include <scapix/java_api/java/util/Spliterators_AbstractLongSpliterator.h>
#include <scapix/java_api/java/util/Spliterators_AbstractIntSpliterator.h>
#include <scapix/java_api/java/util/Spliterators_AbstractDoubleSpliterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Spliterators : public jni::object_base<"java/util/Spliterators",
	java::lang::Object>
{
public:

	using AbstractSpliterator = Spliterators_AbstractSpliterator;
	using AbstractLongSpliterator = Spliterators_AbstractLongSpliterator;
	using AbstractIntSpliterator = Spliterators_AbstractIntSpliterator;
	using AbstractDoubleSpliterator = Spliterators_AbstractDoubleSpliterator;

	static jni::ref<java::util::Spliterator> emptySpliterator() { return call_static_method<"emptySpliterator", jni::ref<java::util::Spliterator>>(); }
	static jni::ref<java::util::Spliterator_OfInt> emptyIntSpliterator() { return call_static_method<"emptyIntSpliterator", jni::ref<java::util::Spliterator_OfInt>>(); }
	static jni::ref<java::util::Spliterator_OfLong> emptyLongSpliterator() { return call_static_method<"emptyLongSpliterator", jni::ref<java::util::Spliterator_OfLong>>(); }
	static jni::ref<java::util::Spliterator_OfDouble> emptyDoubleSpliterator() { return call_static_method<"emptyDoubleSpliterator", jni::ref<java::util::Spliterator_OfDouble>>(); }
	static jni::ref<java::util::Spliterator> spliterator(jni::ref<jni::array<java::lang::Object>> array, jint additionalCharacteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator>>(array, additionalCharacteristics); }
	static jni::ref<java::util::Spliterator> spliterator(jni::ref<jni::array<java::lang::Object>> array, jint fromIndex, jint toIndex, jint additionalCharacteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator>>(array, fromIndex, toIndex, additionalCharacteristics); }
	static jni::ref<java::util::Spliterator_OfInt> spliterator(jni::ref<jni::array<jint>> array, jint additionalCharacteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfInt>>(array, additionalCharacteristics); }
	static jni::ref<java::util::Spliterator_OfInt> spliterator(jni::ref<jni::array<jint>> array, jint fromIndex, jint toIndex, jint additionalCharacteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfInt>>(array, fromIndex, toIndex, additionalCharacteristics); }
	static jni::ref<java::util::Spliterator_OfLong> spliterator(jni::ref<jni::array<jlong>> array, jint additionalCharacteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfLong>>(array, additionalCharacteristics); }
	static jni::ref<java::util::Spliterator_OfLong> spliterator(jni::ref<jni::array<jlong>> array, jint fromIndex, jint toIndex, jint additionalCharacteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfLong>>(array, fromIndex, toIndex, additionalCharacteristics); }
	static jni::ref<java::util::Spliterator_OfDouble> spliterator(jni::ref<jni::array<jdouble>> array, jint additionalCharacteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfDouble>>(array, additionalCharacteristics); }
	static jni::ref<java::util::Spliterator_OfDouble> spliterator(jni::ref<jni::array<jdouble>> array, jint fromIndex, jint toIndex, jint additionalCharacteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfDouble>>(array, fromIndex, toIndex, additionalCharacteristics); }
	static jni::ref<java::util::Spliterator> spliterator(jni::ref<java::util::Collection> c, jint characteristics) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator>>(c, characteristics); }
	static jni::ref<java::util::Spliterator> spliterator(jni::ref<java::util::Iterator> iterator, jlong size, jint p3) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator>>(iterator, size, p3); }
	static jni::ref<java::util::Spliterator> spliteratorUnknownSize(jni::ref<java::util::Iterator> iterator, jint characteristics) { return call_static_method<"spliteratorUnknownSize", jni::ref<java::util::Spliterator>>(iterator, characteristics); }
	static jni::ref<java::util::Spliterator_OfInt> spliterator(jni::ref<java::util::PrimitiveIterator_OfInt> iterator, jlong size, jint p3) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfInt>>(iterator, size, p3); }
	static jni::ref<java::util::Spliterator_OfInt> spliteratorUnknownSize(jni::ref<java::util::PrimitiveIterator_OfInt> iterator, jint characteristics) { return call_static_method<"spliteratorUnknownSize", jni::ref<java::util::Spliterator_OfInt>>(iterator, characteristics); }
	static jni::ref<java::util::Spliterator_OfLong> spliterator(jni::ref<java::util::PrimitiveIterator_OfLong> iterator, jlong size, jint p3) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfLong>>(iterator, size, p3); }
	static jni::ref<java::util::Spliterator_OfLong> spliteratorUnknownSize(jni::ref<java::util::PrimitiveIterator_OfLong> iterator, jint characteristics) { return call_static_method<"spliteratorUnknownSize", jni::ref<java::util::Spliterator_OfLong>>(iterator, characteristics); }
	static jni::ref<java::util::Spliterator_OfDouble> spliterator(jni::ref<java::util::PrimitiveIterator_OfDouble> iterator, jlong size, jint p3) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfDouble>>(iterator, size, p3); }
	static jni::ref<java::util::Spliterator_OfDouble> spliteratorUnknownSize(jni::ref<java::util::PrimitiveIterator_OfDouble> iterator, jint characteristics) { return call_static_method<"spliteratorUnknownSize", jni::ref<java::util::Spliterator_OfDouble>>(iterator, characteristics); }
	static jni::ref<java::util::Iterator> iterator(jni::ref<java::util::Spliterator> spliterator) { return call_static_method<"iterator", jni::ref<java::util::Iterator>>(spliterator); }
	static jni::ref<java::util::PrimitiveIterator_OfInt> iterator(jni::ref<java::util::Spliterator_OfInt> spliterator) { return call_static_method<"iterator", jni::ref<java::util::PrimitiveIterator_OfInt>>(spliterator); }
	static jni::ref<java::util::PrimitiveIterator_OfLong> iterator(jni::ref<java::util::Spliterator_OfLong> spliterator) { return call_static_method<"iterator", jni::ref<java::util::PrimitiveIterator_OfLong>>(spliterator); }
	static jni::ref<java::util::PrimitiveIterator_OfDouble> iterator(jni::ref<java::util::Spliterator_OfDouble> spliterator) { return call_static_method<"iterator", jni::ref<java::util::PrimitiveIterator_OfDouble>>(spliterator); }

protected:

	Spliterators(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATORS
