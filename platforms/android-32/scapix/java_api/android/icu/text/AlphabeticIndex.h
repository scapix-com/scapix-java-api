// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Iterable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_ALPHABETICINDEX_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_ALPHABETICINDEX_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class AlphabeticIndex; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::AlphabeticIndex>
{
	static constexpr fixed_string class_name = "android/icu/text/AlphabeticIndex";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Iterable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_ALPHABETICINDEX_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_ALPHABETICINDEX)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_ALPHABETICINDEX

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/AlphabeticIndex_ImmutableIndex.h>
#include <scapix/java_api/android/icu/text/RuleBasedCollator.h>
#include <scapix/java_api/android/icu/text/UnicodeSet.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/android/icu/text/AlphabeticIndex_Record.h>
#include <scapix/java_api/android/icu/text/AlphabeticIndex_Bucket.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::AlphabeticIndex : public jni::object_base<"android/icu/text/AlphabeticIndex",
	java::lang::Object,
	java::lang::Iterable>
{
public:

	using Record = AlphabeticIndex_Record;
	using ImmutableIndex = AlphabeticIndex_ImmutableIndex;
	using Bucket = AlphabeticIndex_Bucket;

	static jni::ref<android::icu::text::AlphabeticIndex> new_object(jni::ref<android::icu::util::ULocale> locale) { return base_::new_object(locale); }
	static jni::ref<android::icu::text::AlphabeticIndex> new_object(jni::ref<java::util::Locale> locale) { return base_::new_object(locale); }
	static jni::ref<android::icu::text::AlphabeticIndex> new_object(jni::ref<android::icu::text::RuleBasedCollator> collator) { return base_::new_object(collator); }
	jni::ref<android::icu::text::AlphabeticIndex> addLabels(jni::ref<android::icu::text::UnicodeSet> additions) { return call_method<"addLabels", jni::ref<android::icu::text::AlphabeticIndex>>(additions); }
	jni::ref<android::icu::text::AlphabeticIndex> addLabels(jni::ref<jni::array<android::icu::util::ULocale>> additions) { return call_method<"addLabels", jni::ref<android::icu::text::AlphabeticIndex>>(additions); }
	jni::ref<android::icu::text::AlphabeticIndex> addLabels(jni::ref<jni::array<java::util::Locale>> additions) { return call_method<"addLabels", jni::ref<android::icu::text::AlphabeticIndex>>(additions); }
	jni::ref<android::icu::text::AlphabeticIndex> setOverflowLabel(jni::ref<java::lang::String> overflowLabel) { return call_method<"setOverflowLabel", jni::ref<android::icu::text::AlphabeticIndex>>(overflowLabel); }
	jni::ref<java::lang::String> getUnderflowLabel() { return call_method<"getUnderflowLabel", jni::ref<java::lang::String>>(); }
	jni::ref<android::icu::text::AlphabeticIndex> setUnderflowLabel(jni::ref<java::lang::String> underflowLabel) { return call_method<"setUnderflowLabel", jni::ref<android::icu::text::AlphabeticIndex>>(underflowLabel); }
	jni::ref<java::lang::String> getOverflowLabel() { return call_method<"getOverflowLabel", jni::ref<java::lang::String>>(); }
	jni::ref<android::icu::text::AlphabeticIndex> setInflowLabel(jni::ref<java::lang::String> inflowLabel) { return call_method<"setInflowLabel", jni::ref<android::icu::text::AlphabeticIndex>>(inflowLabel); }
	jni::ref<java::lang::String> getInflowLabel() { return call_method<"getInflowLabel", jni::ref<java::lang::String>>(); }
	jint getMaxLabelCount() { return call_method<"getMaxLabelCount", jint>(); }
	jni::ref<android::icu::text::AlphabeticIndex> setMaxLabelCount(jint maxLabelCount) { return call_method<"setMaxLabelCount", jni::ref<android::icu::text::AlphabeticIndex>>(maxLabelCount); }
	jni::ref<android::icu::text::AlphabeticIndex_ImmutableIndex> buildImmutableIndex() { return call_method<"buildImmutableIndex", jni::ref<android::icu::text::AlphabeticIndex_ImmutableIndex>>(); }
	jni::ref<java::util::List> getBucketLabels() { return call_method<"getBucketLabels", jni::ref<java::util::List>>(); }
	jni::ref<android::icu::text::RuleBasedCollator> getCollator() { return call_method<"getCollator", jni::ref<android::icu::text::RuleBasedCollator>>(); }
	jni::ref<android::icu::text::AlphabeticIndex> addRecord(jni::ref<java::lang::CharSequence> name, jni::ref<java::lang::Object> data) { return call_method<"addRecord", jni::ref<android::icu::text::AlphabeticIndex>>(name, data); }
	jint getBucketIndex(jni::ref<java::lang::CharSequence> name) { return call_method<"getBucketIndex", jint>(name); }
	jni::ref<android::icu::text::AlphabeticIndex> clearRecords() { return call_method<"clearRecords", jni::ref<android::icu::text::AlphabeticIndex>>(); }
	jint getBucketCount() { return call_method<"getBucketCount", jint>(); }
	jint getRecordCount() { return call_method<"getRecordCount", jint>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }

protected:

	AlphabeticIndex(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_ALPHABETICINDEX
