// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/android/icu/util/Freezable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_COLLATOR_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_COLLATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class Collator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::Collator>
{
	static constexpr fixed_string class_name = "android/icu/text/Collator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::Comparator, scapix::java_api::android::icu::util::Freezable, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_COLLATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_COLLATOR)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_COLLATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/CollationKey.h>
#include <scapix/java_api/android/icu/text/UnicodeSet.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/android/icu/util/VersionInfo.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/android/icu/text/Collator_ReorderCodes.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::Collator : public jni::object_base<"android/icu/text/Collator",
	java::lang::Object,
	java::util::Comparator,
	android::icu::util::Freezable,
	java::lang::Cloneable>
{
public:

	using ReorderCodes = Collator_ReorderCodes;

	static jint CANONICAL_DECOMPOSITION() { return get_static_field<"CANONICAL_DECOMPOSITION", jint>(); }
	static jint FULL_DECOMPOSITION() { return get_static_field<"FULL_DECOMPOSITION", jint>(); }
	static jint IDENTICAL() { return get_static_field<"IDENTICAL", jint>(); }
	static jint NO_DECOMPOSITION() { return get_static_field<"NO_DECOMPOSITION", jint>(); }
	static jint PRIMARY() { return get_static_field<"PRIMARY", jint>(); }
	static jint QUATERNARY() { return get_static_field<"QUATERNARY", jint>(); }
	static jint SECONDARY() { return get_static_field<"SECONDARY", jint>(); }
	static jint TERTIARY() { return get_static_field<"TERTIARY", jint>(); }

	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void setStrength(jint newStrength) { return call_method<"setStrength", void>(newStrength); }
	void setDecomposition(jint decomposition) { return call_method<"setDecomposition", void>(decomposition); }
	void setReorderCodes(jni::ref<jni::array<jint>> order) { return call_method<"setReorderCodes", void>(order); }
	static jni::ref<android::icu::text::Collator> getInstance() { return call_static_method<"getInstance", jni::ref<android::icu::text::Collator>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	static jni::ref<android::icu::text::Collator> getInstance(jni::ref<android::icu::util::ULocale> locale) { return call_static_method<"getInstance", jni::ref<android::icu::text::Collator>>(locale); }
	static jni::ref<android::icu::text::Collator> getInstance(jni::ref<java::util::Locale> locale) { return call_static_method<"getInstance", jni::ref<android::icu::text::Collator>>(locale); }
	static jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_static_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }
	static jni::ref<jni::array<android::icu::util::ULocale>> getAvailableULocales() { return call_static_method<"getAvailableULocales", jni::ref<jni::array<android::icu::util::ULocale>>>(); }
	static jni::ref<jni::array<java::lang::String>> getKeywords() { return call_static_method<"getKeywords", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<jni::array<java::lang::String>> getKeywordValues(jni::ref<java::lang::String> keyword) { return call_static_method<"getKeywordValues", jni::ref<jni::array<java::lang::String>>>(keyword); }
	static jni::ref<jni::array<java::lang::String>> getKeywordValuesForLocale(jni::ref<java::lang::String> key, jni::ref<android::icu::util::ULocale> locale, jboolean commonlyUsed) { return call_static_method<"getKeywordValuesForLocale", jni::ref<jni::array<java::lang::String>>>(key, locale, commonlyUsed); }
	static jni::ref<android::icu::util::ULocale> getFunctionalEquivalent(jni::ref<java::lang::String> keyword, jni::ref<android::icu::util::ULocale> locID, jni::ref<jni::array<jboolean>> isAvailable) { return call_static_method<"getFunctionalEquivalent", jni::ref<android::icu::util::ULocale>>(keyword, locID, isAvailable); }
	static jni::ref<android::icu::util::ULocale> getFunctionalEquivalent(jni::ref<java::lang::String> keyword, jni::ref<android::icu::util::ULocale> locID) { return call_static_method<"getFunctionalEquivalent", jni::ref<android::icu::util::ULocale>>(keyword, locID); }
	static jni::ref<java::lang::String> getDisplayName(jni::ref<java::util::Locale> objectLocale, jni::ref<java::util::Locale> displayLocale) { return call_static_method<"getDisplayName", jni::ref<java::lang::String>>(objectLocale, displayLocale); }
	static jni::ref<java::lang::String> getDisplayName(jni::ref<android::icu::util::ULocale> objectLocale, jni::ref<android::icu::util::ULocale> displayLocale) { return call_static_method<"getDisplayName", jni::ref<java::lang::String>>(objectLocale, displayLocale); }
	static jni::ref<java::lang::String> getDisplayName(jni::ref<java::util::Locale> objectLocale) { return call_static_method<"getDisplayName", jni::ref<java::lang::String>>(objectLocale); }
	static jni::ref<java::lang::String> getDisplayName(jni::ref<android::icu::util::ULocale> objectLocale) { return call_static_method<"getDisplayName", jni::ref<java::lang::String>>(objectLocale); }
	jint getStrength() { return call_method<"getStrength", jint>(); }
	jint getDecomposition() { return call_method<"getDecomposition", jint>(); }
	jboolean equals(jni::ref<java::lang::String> source, jni::ref<java::lang::String> target) { return call_method<"equals", jboolean>(source, target); }
	jni::ref<android::icu::text::UnicodeSet> getTailoredSet() { return call_method<"getTailoredSet", jni::ref<android::icu::text::UnicodeSet>>(); }
	jint compare(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"compare", jint>(p1, p2); }
	jint compare(jni::ref<java::lang::Object> source, jni::ref<java::lang::Object> target) { return call_method<"compare", jint>(source, target); }
	jni::ref<android::icu::text::CollationKey> getCollationKey(jni::ref<java::lang::String> p1) { return call_method<"getCollationKey", jni::ref<android::icu::text::CollationKey>>(p1); }
	jni::ref<android::icu::text::Collator> setMaxVariable(jint group) { return call_method<"setMaxVariable", jni::ref<android::icu::text::Collator>>(group); }
	jint getMaxVariable() { return call_method<"getMaxVariable", jint>(); }
	jint getVariableTop() { return call_method<"getVariableTop", jint>(); }
	jni::ref<android::icu::util::VersionInfo> getVersion() { return call_method<"getVersion", jni::ref<android::icu::util::VersionInfo>>(); }
	jni::ref<android::icu::util::VersionInfo> getUCAVersion() { return call_method<"getUCAVersion", jni::ref<android::icu::util::VersionInfo>>(); }
	jni::ref<jni::array<jint>> getReorderCodes() { return call_method<"getReorderCodes", jni::ref<jni::array<jint>>>(); }
	static jni::ref<jni::array<jint>> getEquivalentReorderCodes(jint reorderCode) { return call_static_method<"getEquivalentReorderCodes", jni::ref<jni::array<jint>>>(reorderCode); }
	jboolean isFrozen() { return call_method<"isFrozen", jboolean>(); }
	jni::ref<android::icu::text::Collator> freeze() { return call_method<"freeze", jni::ref<android::icu::text::Collator>>(); }
	jni::ref<android::icu::text::Collator> cloneAsThawed() { return call_method<"cloneAsThawed", jni::ref<android::icu::text::Collator>>(); }

protected:

	Collator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_COLLATOR
