// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_MESSENGER_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_MESSENGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class Messenger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::Messenger>
{
	static constexpr fixed_string class_name = "android/os/Messenger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_MESSENGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_MESSENGER)
#define SCAPIX_JAVA_API_ANDROID_OS_MESSENGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/os/Message.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::Messenger : public jni::object_base<"android/os/Messenger",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::os::Messenger> new_object(jni::ref<android::os::Handler> target) { return base_::new_object(target); }
	static jni::ref<android::os::Messenger> new_object(jni::ref<android::os::IBinder> target) { return base_::new_object(target); }
	void send(jni::ref<android::os::Message> message) { return call_method<"send", void>(message); }
	jni::ref<android::os::IBinder> getBinder() { return call_method<"getBinder", jni::ref<android::os::IBinder>>(); }
	jboolean equals(jni::ref<java::lang::Object> otherObj) { return call_method<"equals", jboolean>(otherObj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	static void writeMessengerOrNullToParcel(jni::ref<android::os::Messenger> messenger, jni::ref<android::os::Parcel> out) { return call_static_method<"writeMessengerOrNullToParcel", void>(messenger, out); }
	static jni::ref<android::os::Messenger> readMessengerOrNullFromParcel(jni::ref<android::os::Parcel> in) { return call_static_method<"readMessengerOrNullFromParcel", jni::ref<android::os::Messenger>>(in); }

protected:

	Messenger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_MESSENGER
