// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/view/ViewGroup.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_TV_TVVIEW_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_TV_TVVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::tv { class TvView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::tv::TvView>
{
	static constexpr fixed_string class_name = "android/media/tv/TvView";
	using base_classes = std::tuple<scapix::java_api::android::view::ViewGroup>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_TV_TVVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_TV_TVVIEW)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_TV_TVVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Region.h>
#include <scapix/java_api/android/media/PlaybackParams.h>
#include <scapix/java_api/android/media/tv/TvView_OnUnhandledInputEventListener.h>
#include <scapix/java_api/android/media/tv/TvView_TimeShiftPositionCallback.h>
#include <scapix/java_api/android/media/tv/TvView_TvInputCallback.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/InputEvent.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::tv::TvView : public jni::object_base<"android/media/tv/TvView",
	android::view::ViewGroup>
{
public:

	using TvInputCallback = TvView_TvInputCallback;
	using TimeShiftPositionCallback = TvView_TimeShiftPositionCallback;
	using OnUnhandledInputEventListener = TvView_OnUnhandledInputEventListener;

	static jni::ref<android::media::tv::TvView> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::media::tv::TvView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::media::tv::TvView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	void setCallback(jni::ref<android::media::tv::TvView_TvInputCallback> callback) { return call_method<"setCallback", void>(callback); }
	void setZOrderMediaOverlay(jboolean isMediaOverlay) { return call_method<"setZOrderMediaOverlay", void>(isMediaOverlay); }
	void setZOrderOnTop(jboolean onTop) { return call_method<"setZOrderOnTop", void>(onTop); }
	void setStreamVolume(jfloat volume) { return call_method<"setStreamVolume", void>(volume); }
	void tune(jni::ref<java::lang::String> inputId, jni::ref<android::net::Uri> channelUri) { return call_method<"tune", void>(inputId, channelUri); }
	void tune(jni::ref<java::lang::String> inputId, jni::ref<android::net::Uri> channelUri, jni::ref<android::os::Bundle> params) { return call_method<"tune", void>(inputId, channelUri, params); }
	void reset() { return call_method<"reset", void>(); }
	void setCaptionEnabled(jboolean enabled) { return call_method<"setCaptionEnabled", void>(enabled); }
	void selectTrack(jint type, jni::ref<java::lang::String> trackId) { return call_method<"selectTrack", void>(type, trackId); }
	jni::ref<java::util::List> getTracks(jint type) { return call_method<"getTracks", jni::ref<java::util::List>>(type); }
	jni::ref<java::lang::String> getSelectedTrack(jint type) { return call_method<"getSelectedTrack", jni::ref<java::lang::String>>(type); }
	void timeShiftPlay(jni::ref<java::lang::String> inputId, jni::ref<android::net::Uri> recordedProgramUri) { return call_method<"timeShiftPlay", void>(inputId, recordedProgramUri); }
	void timeShiftPause() { return call_method<"timeShiftPause", void>(); }
	void timeShiftResume() { return call_method<"timeShiftResume", void>(); }
	void timeShiftSeekTo(jlong timeMs) { return call_method<"timeShiftSeekTo", void>(timeMs); }
	void timeShiftSetPlaybackParams(jni::ref<android::media::PlaybackParams> params) { return call_method<"timeShiftSetPlaybackParams", void>(params); }
	void setTimeShiftPositionCallback(jni::ref<android::media::tv::TvView_TimeShiftPositionCallback> callback) { return call_method<"setTimeShiftPositionCallback", void>(callback); }
	void sendAppPrivateCommand(jni::ref<java::lang::String> action, jni::ref<android::os::Bundle> data) { return call_method<"sendAppPrivateCommand", void>(action, data); }
	jboolean dispatchUnhandledInputEvent(jni::ref<android::view::InputEvent> event) { return call_method<"dispatchUnhandledInputEvent", jboolean>(event); }
	jboolean onUnhandledInputEvent(jni::ref<android::view::InputEvent> event) { return call_method<"onUnhandledInputEvent", jboolean>(event); }
	void setOnUnhandledInputEventListener(jni::ref<android::media::tv::TvView_OnUnhandledInputEventListener> listener) { return call_method<"setOnUnhandledInputEventListener", void>(listener); }
	jboolean dispatchKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEvent", jboolean>(event); }
	jboolean dispatchTouchEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchTouchEvent", jboolean>(event); }
	jboolean dispatchTrackballEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchTrackballEvent", jboolean>(event); }
	jboolean dispatchGenericMotionEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchGenericMotionEvent", jboolean>(event); }
	void dispatchWindowFocusChanged(jboolean hasFocus) { return call_method<"dispatchWindowFocusChanged", void>(hasFocus); }
	jboolean gatherTransparentRegion(jni::ref<android::graphics::Region> region) { return call_method<"gatherTransparentRegion", jboolean>(region); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }

protected:

	TvView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_TV_TVVIEW
