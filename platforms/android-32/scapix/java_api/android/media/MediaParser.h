// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaParser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaParser>
{
	static constexpr fixed_string class_name = "android/media/MediaParser";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/MediaFormat.h>
#include <scapix/java_api/android/media/MediaParser_OutputConsumer.h>
#include <scapix/java_api/android/media/MediaParser_SeekPoint.h>
#include <scapix/java_api/android/media/MediaParser_SeekableInputReader.h>
#include <scapix/java_api/android/media/metrics/LogSessionId.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/android/media/MediaParser_UnrecognizedInputFormatException.h>
#include <scapix/java_api/android/media/MediaParser_TrackData.h>
#include <scapix/java_api/android/media/MediaParser_SeekMap.h>
#include <scapix/java_api/android/media/MediaParser_ParsingException.h>
#include <scapix/java_api/android/media/MediaParser_InputReader.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaParser : public jni::object_base<"android/media/MediaParser",
	java::lang::Object>
{
public:

	using UnrecognizedInputFormatException = MediaParser_UnrecognizedInputFormatException;
	using TrackData = MediaParser_TrackData;
	using SeekableInputReader = MediaParser_SeekableInputReader;
	using SeekPoint = MediaParser_SeekPoint;
	using SeekMap = MediaParser_SeekMap;
	using ParsingException = MediaParser_ParsingException;
	using OutputConsumer = MediaParser_OutputConsumer;
	using InputReader = MediaParser_InputReader;

	static jni::ref<java::lang::String> PARAMETER_ADTS_ENABLE_CBR_SEEKING() { return get_static_field<"PARAMETER_ADTS_ENABLE_CBR_SEEKING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_AMR_ENABLE_CBR_SEEKING() { return get_static_field<"PARAMETER_AMR_ENABLE_CBR_SEEKING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_FLAC_DISABLE_ID3() { return get_static_field<"PARAMETER_FLAC_DISABLE_ID3", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_MATROSKA_DISABLE_CUES_SEEKING() { return get_static_field<"PARAMETER_MATROSKA_DISABLE_CUES_SEEKING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_MP3_DISABLE_ID3() { return get_static_field<"PARAMETER_MP3_DISABLE_ID3", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_MP3_ENABLE_CBR_SEEKING() { return get_static_field<"PARAMETER_MP3_ENABLE_CBR_SEEKING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_MP3_ENABLE_INDEX_SEEKING() { return get_static_field<"PARAMETER_MP3_ENABLE_INDEX_SEEKING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_MP4_IGNORE_EDIT_LISTS() { return get_static_field<"PARAMETER_MP4_IGNORE_EDIT_LISTS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_MP4_IGNORE_TFDT_BOX() { return get_static_field<"PARAMETER_MP4_IGNORE_TFDT_BOX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES() { return get_static_field<"PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES() { return get_static_field<"PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_TS_DETECT_ACCESS_UNITS() { return get_static_field<"PARAMETER_TS_DETECT_ACCESS_UNITS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS() { return get_static_field<"PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_TS_IGNORE_AAC_STREAM() { return get_static_field<"PARAMETER_TS_IGNORE_AAC_STREAM", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_TS_IGNORE_AVC_STREAM() { return get_static_field<"PARAMETER_TS_IGNORE_AVC_STREAM", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM() { return get_static_field<"PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARAMETER_TS_MODE() { return get_static_field<"PARAMETER_TS_MODE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_AC3() { return get_static_field<"PARSER_NAME_AC3", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_AC4() { return get_static_field<"PARSER_NAME_AC4", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_ADTS() { return get_static_field<"PARSER_NAME_ADTS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_AMR() { return get_static_field<"PARSER_NAME_AMR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_FLAC() { return get_static_field<"PARSER_NAME_FLAC", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_FLV() { return get_static_field<"PARSER_NAME_FLV", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_FMP4() { return get_static_field<"PARSER_NAME_FMP4", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_MATROSKA() { return get_static_field<"PARSER_NAME_MATROSKA", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_MP3() { return get_static_field<"PARSER_NAME_MP3", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_MP4() { return get_static_field<"PARSER_NAME_MP4", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_OGG() { return get_static_field<"PARSER_NAME_OGG", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_PS() { return get_static_field<"PARSER_NAME_PS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_TS() { return get_static_field<"PARSER_NAME_TS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_UNKNOWN() { return get_static_field<"PARSER_NAME_UNKNOWN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_NAME_WAV() { return get_static_field<"PARSER_NAME_WAV", jni::ref<java::lang::String>>(); }
	static jint SAMPLE_FLAG_DECODE_ONLY() { return get_static_field<"SAMPLE_FLAG_DECODE_ONLY", jint>(); }
	static jint SAMPLE_FLAG_ENCRYPTED() { return get_static_field<"SAMPLE_FLAG_ENCRYPTED", jint>(); }
	static jint SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATA() { return get_static_field<"SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATA", jint>(); }
	static jint SAMPLE_FLAG_KEY_FRAME() { return get_static_field<"SAMPLE_FLAG_KEY_FRAME", jint>(); }
	static jint SAMPLE_FLAG_LAST_SAMPLE() { return get_static_field<"SAMPLE_FLAG_LAST_SAMPLE", jint>(); }

	static jni::ref<android::media::MediaParser> createByName(jni::ref<java::lang::String> name, jni::ref<android::media::MediaParser_OutputConsumer> outputConsumer) { return call_static_method<"createByName", jni::ref<android::media::MediaParser>>(name, outputConsumer); }
	static jni::ref<android::media::MediaParser> create(jni::ref<android::media::MediaParser_OutputConsumer> outputConsumer, jni::ref<jni::array<java::lang::String>> parserNames) { return call_static_method<"create", jni::ref<android::media::MediaParser>>(outputConsumer, parserNames); }
	static jni::ref<java::util::List> getParserNames(jni::ref<android::media::MediaFormat> mediaFormat) { return call_static_method<"getParserNames", jni::ref<java::util::List>>(mediaFormat); }
	jni::ref<android::media::MediaParser> setParameter(jni::ref<java::lang::String> parameterName, jni::ref<java::lang::Object> value) { return call_method<"setParameter", jni::ref<android::media::MediaParser>>(parameterName, value); }
	jboolean supportsParameter(jni::ref<java::lang::String> parameterName) { return call_method<"supportsParameter", jboolean>(parameterName); }
	jni::ref<java::lang::String> getParserName() { return call_method<"getParserName", jni::ref<java::lang::String>>(); }
	jboolean advance(jni::ref<android::media::MediaParser_SeekableInputReader> seekableInputReader) { return call_method<"advance", jboolean>(seekableInputReader); }
	void seek(jni::ref<android::media::MediaParser_SeekPoint> seekPoint) { return call_method<"seek", void>(seekPoint); }
	void release() { return call_method<"release", void>(); }
	void setLogSessionId(jni::ref<android::media::metrics::LogSessionId> logSessionId) { return call_method<"setLogSessionId", void>(logSessionId); }
	jni::ref<android::media::metrics::LogSessionId> getLogSessionId() { return call_method<"getLogSessionId", jni::ref<android::media::metrics::LogSessionId>>(); }

protected:

	MediaParser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER
