// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::sip { class SipSession; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::sip::SipSession>
{
	static constexpr fixed_string class_name = "android/net/sip/SipSession";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION)
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/sip/SipProfile.h>
#include <scapix/java_api/android/net/sip/SipSession_Listener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/net/sip/SipSession_State.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::sip::SipSession : public jni::object_base<"android/net/sip/SipSession",
	java::lang::Object>
{
public:

	using State = SipSession_State;
	using Listener = SipSession_Listener;

	jni::ref<java::lang::String> getLocalIp() { return call_method<"getLocalIp", jni::ref<java::lang::String>>(); }
	jni::ref<android::net::sip::SipProfile> getLocalProfile() { return call_method<"getLocalProfile", jni::ref<android::net::sip::SipProfile>>(); }
	jni::ref<android::net::sip::SipProfile> getPeerProfile() { return call_method<"getPeerProfile", jni::ref<android::net::sip::SipProfile>>(); }
	jint getState() { return call_method<"getState", jint>(); }
	jboolean isInCall() { return call_method<"isInCall", jboolean>(); }
	jni::ref<java::lang::String> getCallId() { return call_method<"getCallId", jni::ref<java::lang::String>>(); }
	void setListener(jni::ref<android::net::sip::SipSession_Listener> listener) { return call_method<"setListener", void>(listener); }
	void register_(jint duration) { return call_method<"register", void>(duration); }
	void unregister() { return call_method<"unregister", void>(); }
	void makeCall(jni::ref<android::net::sip::SipProfile> callee, jni::ref<java::lang::String> sessionDescription, jint timeout) { return call_method<"makeCall", void>(callee, sessionDescription, timeout); }
	void answerCall(jni::ref<java::lang::String> sessionDescription, jint timeout) { return call_method<"answerCall", void>(sessionDescription, timeout); }
	void endCall() { return call_method<"endCall", void>(); }
	void changeCall(jni::ref<java::lang::String> sessionDescription, jint timeout) { return call_method<"changeCall", void>(sessionDescription, timeout); }

protected:

	SipSession(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPSESSION
