// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_LINKPROPERTIES_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_LINKPROPERTIES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class LinkProperties; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::LinkProperties>
{
	static constexpr fixed_string class_name = "android/net/LinkProperties";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_LINKPROPERTIES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_LINKPROPERTIES)
#define SCAPIX_JAVA_API_ANDROID_NET_LINKPROPERTIES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/IpPrefix.h>
#include <scapix/java_api/android/net/ProxyInfo.h>
#include <scapix/java_api/android/net/RouteInfo.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/Inet4Address.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::LinkProperties : public jni::object_base<"android/net/LinkProperties",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::net::LinkProperties> new_object() { return base_::new_object(); }
	void setInterfaceName(jni::ref<java::lang::String> iface) { return call_method<"setInterfaceName", void>(iface); }
	jni::ref<java::lang::String> getInterfaceName() { return call_method<"getInterfaceName", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::List> getLinkAddresses() { return call_method<"getLinkAddresses", jni::ref<java::util::List>>(); }
	void setLinkAddresses(jni::ref<java::util::Collection> addresses) { return call_method<"setLinkAddresses", void>(addresses); }
	void setDnsServers(jni::ref<java::util::Collection> dnsServers) { return call_method<"setDnsServers", void>(dnsServers); }
	jni::ref<java::util::List> getDnsServers() { return call_method<"getDnsServers", jni::ref<java::util::List>>(); }
	jboolean isPrivateDnsActive() { return call_method<"isPrivateDnsActive", jboolean>(); }
	void setDhcpServerAddress(jni::ref<java::net::Inet4Address> serverAddress) { return call_method<"setDhcpServerAddress", void>(serverAddress); }
	jni::ref<java::net::Inet4Address> getDhcpServerAddress() { return call_method<"getDhcpServerAddress", jni::ref<java::net::Inet4Address>>(); }
	jni::ref<java::lang::String> getPrivateDnsServerName() { return call_method<"getPrivateDnsServerName", jni::ref<java::lang::String>>(); }
	void setDomains(jni::ref<java::lang::String> domains) { return call_method<"setDomains", void>(domains); }
	jni::ref<java::lang::String> getDomains() { return call_method<"getDomains", jni::ref<java::lang::String>>(); }
	void setMtu(jint mtu) { return call_method<"setMtu", void>(mtu); }
	jint getMtu() { return call_method<"getMtu", jint>(); }
	jboolean addRoute(jni::ref<android::net::RouteInfo> route) { return call_method<"addRoute", jboolean>(route); }
	jni::ref<java::util::List> getRoutes() { return call_method<"getRoutes", jni::ref<java::util::List>>(); }
	void setHttpProxy(jni::ref<android::net::ProxyInfo> proxy) { return call_method<"setHttpProxy", void>(proxy); }
	jni::ref<android::net::ProxyInfo> getHttpProxy() { return call_method<"getHttpProxy", jni::ref<android::net::ProxyInfo>>(); }
	jni::ref<android::net::IpPrefix> getNat64Prefix() { return call_method<"getNat64Prefix", jni::ref<android::net::IpPrefix>>(); }
	void setNat64Prefix(jni::ref<android::net::IpPrefix> prefix) { return call_method<"setNat64Prefix", void>(prefix); }
	void clear() { return call_method<"clear", void>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean isWakeOnLanSupported() { return call_method<"isWakeOnLanSupported", jboolean>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	LinkProperties(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_LINKPROPERTIES
