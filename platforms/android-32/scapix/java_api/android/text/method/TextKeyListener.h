// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/text/method/BaseKeyListener.h>
#include <scapix/java_api/android/text/SpanWatcher.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_METHOD_TEXTKEYLISTENER_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_METHOD_TEXTKEYLISTENER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text::method { class TextKeyListener; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::method::TextKeyListener>
{
	static constexpr fixed_string class_name = "android/text/method/TextKeyListener";
	using base_classes = std::tuple<scapix::java_api::android::text::method::BaseKeyListener, scapix::java_api::android::text::SpanWatcher>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_METHOD_TEXTKEYLISTENER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_METHOD_TEXTKEYLISTENER)
#define SCAPIX_JAVA_API_ANDROID_TEXT_METHOD_TEXTKEYLISTENER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/android/text/method/TextKeyListener_Capitalize.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Object.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::method::TextKeyListener : public jni::object_base<"android/text/method/TextKeyListener",
	android::text::method::BaseKeyListener,
	android::text::SpanWatcher>
{
public:

	using Capitalize = TextKeyListener_Capitalize;

	static jni::ref<android::text::method::TextKeyListener> new_object(jni::ref<android::text::method::TextKeyListener_Capitalize> cap, jboolean autotext) { return base_::new_object(cap, autotext); }
	static jni::ref<android::text::method::TextKeyListener> getInstance(jboolean autotext, jni::ref<android::text::method::TextKeyListener_Capitalize> cap) { return call_static_method<"getInstance", jni::ref<android::text::method::TextKeyListener>>(autotext, cap); }
	static jni::ref<android::text::method::TextKeyListener> getInstance() { return call_static_method<"getInstance", jni::ref<android::text::method::TextKeyListener>>(); }
	static jboolean shouldCap(jni::ref<android::text::method::TextKeyListener_Capitalize> cap, jni::ref<java::lang::CharSequence> cs, jint off) { return call_static_method<"shouldCap", jboolean>(cap, cs, off); }
	jint getInputType() { return call_method<"getInputType", jint>(); }
	jboolean onKeyDown(jni::ref<android::view::View> view, jni::ref<android::text::Editable> content, jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyDown", jboolean>(view, content, keyCode, event); }
	jboolean onKeyUp(jni::ref<android::view::View> view, jni::ref<android::text::Editable> content, jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyUp", jboolean>(view, content, keyCode, event); }
	jboolean onKeyOther(jni::ref<android::view::View> view, jni::ref<android::text::Editable> content, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyOther", jboolean>(view, content, event); }
	static void clear(jni::ref<android::text::Editable> e) { return call_static_method<"clear", void>(e); }
	void onSpanAdded(jni::ref<android::text::Spannable> s, jni::ref<java::lang::Object> what, jint start, jint end) { return call_method<"onSpanAdded", void>(s, what, start, end); }
	void onSpanRemoved(jni::ref<android::text::Spannable> s, jni::ref<java::lang::Object> what, jint start, jint end) { return call_method<"onSpanRemoved", void>(s, what, start, end); }
	void onSpanChanged(jni::ref<android::text::Spannable> s, jni::ref<java::lang::Object> what, jint start, jint end, jint st, jint en) { return call_method<"onSpanChanged", void>(s, what, start, end, st, en); }
	void release() { return call_method<"release", void>(); }

protected:

	TextKeyListener(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_METHOD_TEXTKEYLISTENER
