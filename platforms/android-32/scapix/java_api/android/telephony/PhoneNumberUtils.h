// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELEPHONY_PHONENUMBERUTILS_FWD
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_PHONENUMBERUTILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telephony { class PhoneNumberUtils; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telephony::PhoneNumberUtils>
{
	static constexpr fixed_string class_name = "android/telephony/PhoneNumberUtils";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_PHONENUMBERUTILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELEPHONY_PHONENUMBERUTILS)
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_PHONENUMBERUTILS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/android/text/style/TtsSpan.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telephony::PhoneNumberUtils : public jni::object_base<"android/telephony/PhoneNumberUtils",
	java::lang::Object>
{
public:

	static jint BCD_EXTENDED_TYPE_CALLED_PARTY() { return get_static_field<"BCD_EXTENDED_TYPE_CALLED_PARTY", jint>(); }
	static jint BCD_EXTENDED_TYPE_EF_ADN() { return get_static_field<"BCD_EXTENDED_TYPE_EF_ADN", jint>(); }
	static jint FORMAT_JAPAN() { return get_static_field<"FORMAT_JAPAN", jint>(); }
	static jint FORMAT_NANP() { return get_static_field<"FORMAT_NANP", jint>(); }
	static jint FORMAT_UNKNOWN() { return get_static_field<"FORMAT_UNKNOWN", jint>(); }
	static jchar PAUSE() { return get_static_field<"PAUSE", jchar>(); }
	static jint TOA_International() { return get_static_field<"TOA_International", jint>(); }
	static jint TOA_Unknown() { return get_static_field<"TOA_Unknown", jint>(); }
	static jchar WAIT() { return get_static_field<"WAIT", jchar>(); }
	static jchar WILD() { return get_static_field<"WILD", jchar>(); }

	static jni::ref<android::telephony::PhoneNumberUtils> new_object() { return base_::new_object(); }
	static jboolean isISODigit(jchar c) { return call_static_method<"isISODigit", jboolean>(c); }
	static jboolean is12Key(jchar c) { return call_static_method<"is12Key", jboolean>(c); }
	static jboolean isDialable(jchar c) { return call_static_method<"isDialable", jboolean>(c); }
	static jboolean isReallyDialable(jchar c) { return call_static_method<"isReallyDialable", jboolean>(c); }
	static jboolean isNonSeparator(jchar c) { return call_static_method<"isNonSeparator", jboolean>(c); }
	static jboolean isStartsPostDial(jchar c) { return call_static_method<"isStartsPostDial", jboolean>(c); }
	static jni::ref<java::lang::String> getNumberFromIntent(jni::ref<android::content::Intent> intent, jni::ref<android::content::Context> context) { return call_static_method<"getNumberFromIntent", jni::ref<java::lang::String>>(intent, context); }
	static jni::ref<java::lang::String> extractNetworkPortion(jni::ref<java::lang::String> phoneNumber) { return call_static_method<"extractNetworkPortion", jni::ref<java::lang::String>>(phoneNumber); }
	static jni::ref<java::lang::String> stripSeparators(jni::ref<java::lang::String> phoneNumber) { return call_static_method<"stripSeparators", jni::ref<java::lang::String>>(phoneNumber); }
	static jni::ref<java::lang::String> extractPostDialPortion(jni::ref<java::lang::String> phoneNumber) { return call_static_method<"extractPostDialPortion", jni::ref<java::lang::String>>(phoneNumber); }
	static jboolean compare(jni::ref<java::lang::String> a, jni::ref<java::lang::String> b) { return call_static_method<"compare", jboolean>(a, b); }
	static jboolean compare(jni::ref<android::content::Context> context, jni::ref<java::lang::String> a, jni::ref<java::lang::String> b) { return call_static_method<"compare", jboolean>(context, a, b); }
	static jni::ref<java::lang::String> toCallerIDMinMatch(jni::ref<java::lang::String> phoneNumber) { return call_static_method<"toCallerIDMinMatch", jni::ref<java::lang::String>>(phoneNumber); }
	static jni::ref<java::lang::String> getStrippedReversed(jni::ref<java::lang::String> phoneNumber) { return call_static_method<"getStrippedReversed", jni::ref<java::lang::String>>(phoneNumber); }
	static jni::ref<java::lang::String> stringFromStringAndTOA(jni::ref<java::lang::String> s, jint TOA) { return call_static_method<"stringFromStringAndTOA", jni::ref<java::lang::String>>(s, TOA); }
	static jint toaFromString(jni::ref<java::lang::String> s) { return call_static_method<"toaFromString", jint>(s); }
	static jni::ref<java::lang::String> calledPartyBCDToString(jni::ref<jni::array<jbyte>> bytes, jint offset, jint length) { return call_static_method<"calledPartyBCDToString", jni::ref<java::lang::String>>(bytes, offset, length); }
	static jni::ref<java::lang::String> calledPartyBCDToString(jni::ref<jni::array<jbyte>> bytes, jint offset, jint length, jint bcdExtType) { return call_static_method<"calledPartyBCDToString", jni::ref<java::lang::String>>(bytes, offset, length, bcdExtType); }
	static jni::ref<java::lang::String> calledPartyBCDFragmentToString(jni::ref<jni::array<jbyte>> bytes, jint offset, jint length) { return call_static_method<"calledPartyBCDFragmentToString", jni::ref<java::lang::String>>(bytes, offset, length); }
	static jni::ref<java::lang::String> calledPartyBCDFragmentToString(jni::ref<jni::array<jbyte>> bytes, jint offset, jint length, jint bcdExtType) { return call_static_method<"calledPartyBCDFragmentToString", jni::ref<java::lang::String>>(bytes, offset, length, bcdExtType); }
	static jboolean isWellFormedSmsAddress(jni::ref<java::lang::String> address) { return call_static_method<"isWellFormedSmsAddress", jboolean>(address); }
	static jboolean isGlobalPhoneNumber(jni::ref<java::lang::String> phoneNumber) { return call_static_method<"isGlobalPhoneNumber", jboolean>(phoneNumber); }
	static jni::ref<jni::array<jbyte>> networkPortionToCalledPartyBCD(jni::ref<java::lang::String> s) { return call_static_method<"networkPortionToCalledPartyBCD", jni::ref<jni::array<jbyte>>>(s); }
	static jni::ref<jni::array<jbyte>> networkPortionToCalledPartyBCDWithLength(jni::ref<java::lang::String> s) { return call_static_method<"networkPortionToCalledPartyBCDWithLength", jni::ref<jni::array<jbyte>>>(s); }
	static jni::ref<jni::array<jbyte>> numberToCalledPartyBCD(jni::ref<java::lang::String> number) { return call_static_method<"numberToCalledPartyBCD", jni::ref<jni::array<jbyte>>>(number); }
	static jni::ref<jni::array<jbyte>> numberToCalledPartyBCD(jni::ref<java::lang::String> number, jint bcdExtType) { return call_static_method<"numberToCalledPartyBCD", jni::ref<jni::array<jbyte>>>(number, bcdExtType); }
	static jni::ref<java::lang::String> formatNumber(jni::ref<java::lang::String> source) { return call_static_method<"formatNumber", jni::ref<java::lang::String>>(source); }
	static jint getFormatTypeForLocale(jni::ref<java::util::Locale> locale) { return call_static_method<"getFormatTypeForLocale", jint>(locale); }
	static void formatNumber(jni::ref<android::text::Editable> text, jint defaultFormattingType) { return call_static_method<"formatNumber", void>(text, defaultFormattingType); }
	static void formatNanpNumber(jni::ref<android::text::Editable> text) { return call_static_method<"formatNanpNumber", void>(text); }
	static void formatJapaneseNumber(jni::ref<android::text::Editable> text) { return call_static_method<"formatJapaneseNumber", void>(text); }
	static jni::ref<java::lang::String> formatNumberToE164(jni::ref<java::lang::String> phoneNumber, jni::ref<java::lang::String> defaultCountryIso) { return call_static_method<"formatNumberToE164", jni::ref<java::lang::String>>(phoneNumber, defaultCountryIso); }
	static jni::ref<java::lang::String> formatNumberToRFC3966(jni::ref<java::lang::String> phoneNumber, jni::ref<java::lang::String> defaultCountryIso) { return call_static_method<"formatNumberToRFC3966", jni::ref<java::lang::String>>(phoneNumber, defaultCountryIso); }
	static jni::ref<java::lang::String> formatNumber(jni::ref<java::lang::String> phoneNumber, jni::ref<java::lang::String> defaultCountryIso) { return call_static_method<"formatNumber", jni::ref<java::lang::String>>(phoneNumber, defaultCountryIso); }
	static jni::ref<java::lang::String> formatNumber(jni::ref<java::lang::String> phoneNumber, jni::ref<java::lang::String> phoneNumberE164, jni::ref<java::lang::String> defaultCountryIso) { return call_static_method<"formatNumber", jni::ref<java::lang::String>>(phoneNumber, phoneNumberE164, defaultCountryIso); }
	static jni::ref<java::lang::String> normalizeNumber(jni::ref<java::lang::String> phoneNumber) { return call_static_method<"normalizeNumber", jni::ref<java::lang::String>>(phoneNumber); }
	static jni::ref<java::lang::String> replaceUnicodeDigits(jni::ref<java::lang::String> number) { return call_static_method<"replaceUnicodeDigits", jni::ref<java::lang::String>>(number); }
	static jboolean isEmergencyNumber(jni::ref<java::lang::String> number) { return call_static_method<"isEmergencyNumber", jboolean>(number); }
	static jboolean isLocalEmergencyNumber(jni::ref<android::content::Context> context, jni::ref<java::lang::String> number) { return call_static_method<"isLocalEmergencyNumber", jboolean>(context, number); }
	static jboolean isVoiceMailNumber(jni::ref<java::lang::String> number) { return call_static_method<"isVoiceMailNumber", jboolean>(number); }
	static jni::ref<java::lang::String> convertKeypadLettersToDigits(jni::ref<java::lang::String> input) { return call_static_method<"convertKeypadLettersToDigits", jni::ref<java::lang::String>>(input); }
	static jni::ref<java::lang::CharSequence> createTtsSpannable(jni::ref<java::lang::CharSequence> phoneNumber) { return call_static_method<"createTtsSpannable", jni::ref<java::lang::CharSequence>>(phoneNumber); }
	static void addTtsSpan(jni::ref<android::text::Spannable> s, jint start, jint endExclusive) { return call_static_method<"addTtsSpan", void>(s, start, endExclusive); }
	static jni::ref<android::text::style::TtsSpan> createTtsSpan(jni::ref<java::lang::String> phoneNumberString) { return call_static_method<"createTtsSpan", jni::ref<android::text::style::TtsSpan>>(phoneNumberString); }
	static jboolean areSamePhoneNumber(jni::ref<java::lang::String> number1, jni::ref<java::lang::String> number2, jni::ref<java::lang::String> defaultCountryIso) { return call_static_method<"areSamePhoneNumber", jboolean>(number1, number2, defaultCountryIso); }

protected:

	PhoneNumberUtils(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_PHONENUMBERUTILS
