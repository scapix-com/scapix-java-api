// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/renderscript/BaseObj.h>

#ifndef SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SAMPLER_FWD
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SAMPLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::renderscript { class Sampler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::renderscript::Sampler>
{
	static constexpr fixed_string class_name = "android/renderscript/Sampler";
	using base_classes = std::tuple<scapix::java_api::android::renderscript::BaseObj>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SAMPLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SAMPLER)
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SAMPLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/renderscript/RenderScript.h>
#include <scapix/java_api/android/renderscript/Sampler_Value.h>
#include <scapix/java_api/android/renderscript/Sampler_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::renderscript::Sampler : public jni::object_base<"android/renderscript/Sampler",
	android::renderscript::BaseObj>
{
public:

	using Value = Sampler_Value;
	using Builder = Sampler_Builder;

	jni::ref<android::renderscript::Sampler_Value> getMinification() { return call_method<"getMinification", jni::ref<android::renderscript::Sampler_Value>>(); }
	jni::ref<android::renderscript::Sampler_Value> getMagnification() { return call_method<"getMagnification", jni::ref<android::renderscript::Sampler_Value>>(); }
	jni::ref<android::renderscript::Sampler_Value> getWrapS() { return call_method<"getWrapS", jni::ref<android::renderscript::Sampler_Value>>(); }
	jni::ref<android::renderscript::Sampler_Value> getWrapT() { return call_method<"getWrapT", jni::ref<android::renderscript::Sampler_Value>>(); }
	jfloat getAnisotropy() { return call_method<"getAnisotropy", jfloat>(); }
	static jni::ref<android::renderscript::Sampler> CLAMP_NEAREST(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"CLAMP_NEAREST", jni::ref<android::renderscript::Sampler>>(rs); }
	static jni::ref<android::renderscript::Sampler> CLAMP_LINEAR(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"CLAMP_LINEAR", jni::ref<android::renderscript::Sampler>>(rs); }
	static jni::ref<android::renderscript::Sampler> CLAMP_LINEAR_MIP_LINEAR(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"CLAMP_LINEAR_MIP_LINEAR", jni::ref<android::renderscript::Sampler>>(rs); }
	static jni::ref<android::renderscript::Sampler> WRAP_NEAREST(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"WRAP_NEAREST", jni::ref<android::renderscript::Sampler>>(rs); }
	static jni::ref<android::renderscript::Sampler> WRAP_LINEAR(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"WRAP_LINEAR", jni::ref<android::renderscript::Sampler>>(rs); }
	static jni::ref<android::renderscript::Sampler> WRAP_LINEAR_MIP_LINEAR(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"WRAP_LINEAR_MIP_LINEAR", jni::ref<android::renderscript::Sampler>>(rs); }
	static jni::ref<android::renderscript::Sampler> MIRRORED_REPEAT_NEAREST(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"MIRRORED_REPEAT_NEAREST", jni::ref<android::renderscript::Sampler>>(rs); }
	static jni::ref<android::renderscript::Sampler> MIRRORED_REPEAT_LINEAR(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"MIRRORED_REPEAT_LINEAR", jni::ref<android::renderscript::Sampler>>(rs); }
	static jni::ref<android::renderscript::Sampler> MIRRORED_REPEAT_LINEAR_MIP_LINEAR(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"MIRRORED_REPEAT_LINEAR_MIP_LINEAR", jni::ref<android::renderscript::Sampler>>(rs); }

protected:

	Sampler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SAMPLER
