// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/renderscript/ScriptIntrinsic.h>

#ifndef SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLAS_FWD
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLAS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::renderscript { class ScriptIntrinsicBLAS; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::renderscript::ScriptIntrinsicBLAS>
{
	static constexpr fixed_string class_name = "android/renderscript/ScriptIntrinsicBLAS";
	using base_classes = std::tuple<scapix::java_api::android::renderscript::ScriptIntrinsic>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLAS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLAS)
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLAS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/renderscript/Allocation.h>
#include <scapix/java_api/android/renderscript/Double2.h>
#include <scapix/java_api/android/renderscript/Float2.h>
#include <scapix/java_api/android/renderscript/RenderScript.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::renderscript::ScriptIntrinsicBLAS : public jni::object_base<"android/renderscript/ScriptIntrinsicBLAS",
	android::renderscript::ScriptIntrinsic>
{
public:

	static jint CONJ_TRANSPOSE() { return get_static_field<"CONJ_TRANSPOSE", jint>(); }
	static jint LEFT() { return get_static_field<"LEFT", jint>(); }
	static jint LOWER() { return get_static_field<"LOWER", jint>(); }
	static jint NON_UNIT() { return get_static_field<"NON_UNIT", jint>(); }
	static jint NO_TRANSPOSE() { return get_static_field<"NO_TRANSPOSE", jint>(); }
	static jint RIGHT() { return get_static_field<"RIGHT", jint>(); }
	static jint TRANSPOSE() { return get_static_field<"TRANSPOSE", jint>(); }
	static jint UNIT() { return get_static_field<"UNIT", jint>(); }
	static jint UPPER() { return get_static_field<"UPPER", jint>(); }

	static jni::ref<android::renderscript::ScriptIntrinsicBLAS> create(jni::ref<android::renderscript::RenderScript> rs) { return call_static_method<"create", jni::ref<android::renderscript::ScriptIntrinsicBLAS>>(rs); }
	void SGEMV(jint TransA, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jfloat beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"SGEMV", void>(TransA, alpha, A, X, incX, beta, Y, incY); }
	void DGEMV(jint TransA, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jni::ref<android::renderscript::Allocation> A, jint X, jdouble incX, jni::ref<android::renderscript::Allocation> beta, jint p8) { return call_method<"DGEMV", void>(TransA, alpha, p3, A, X, incX, beta, p8); }
	void CGEMV(jint TransA, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"CGEMV", void>(TransA, alpha, A, X, incX, beta, Y, incY); }
	void ZGEMV(jint TransA, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"ZGEMV", void>(TransA, alpha, A, X, incX, beta, Y, incY); }
	void SGBMV(jint TransA, jint KL, jint KU, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jfloat beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"SGBMV", void>(TransA, KL, KU, alpha, A, X, incX, beta, Y, incY); }
	void DGBMV(jint TransA, jint KL, jint KU, jdouble alpha, jni::ref<android::renderscript::Allocation> p5, jni::ref<android::renderscript::Allocation> A, jint X, jdouble incX, jni::ref<android::renderscript::Allocation> beta, jint p10) { return call_method<"DGBMV", void>(TransA, KL, KU, alpha, p5, A, X, incX, beta, p10); }
	void CGBMV(jint TransA, jint KL, jint KU, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"CGBMV", void>(TransA, KL, KU, alpha, A, X, incX, beta, Y, incY); }
	void ZGBMV(jint TransA, jint KL, jint KU, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"ZGBMV", void>(TransA, KL, KU, alpha, A, X, incX, beta, Y, incY); }
	void STRMV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"STRMV", void>(Uplo, TransA, Diag, A, X, incX); }
	void DTRMV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"DTRMV", void>(Uplo, TransA, Diag, A, X, incX); }
	void CTRMV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"CTRMV", void>(Uplo, TransA, Diag, A, X, incX); }
	void ZTRMV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"ZTRMV", void>(Uplo, TransA, Diag, A, X, incX); }
	void STBMV(jint Uplo, jint TransA, jint Diag, jint K, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"STBMV", void>(Uplo, TransA, Diag, K, A, X, incX); }
	void DTBMV(jint Uplo, jint TransA, jint Diag, jint K, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"DTBMV", void>(Uplo, TransA, Diag, K, A, X, incX); }
	void CTBMV(jint Uplo, jint TransA, jint Diag, jint K, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"CTBMV", void>(Uplo, TransA, Diag, K, A, X, incX); }
	void ZTBMV(jint Uplo, jint TransA, jint Diag, jint K, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"ZTBMV", void>(Uplo, TransA, Diag, K, A, X, incX); }
	void STPMV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"STPMV", void>(Uplo, TransA, Diag, Ap, X, incX); }
	void DTPMV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"DTPMV", void>(Uplo, TransA, Diag, Ap, X, incX); }
	void CTPMV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"CTPMV", void>(Uplo, TransA, Diag, Ap, X, incX); }
	void ZTPMV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"ZTPMV", void>(Uplo, TransA, Diag, Ap, X, incX); }
	void STRSV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"STRSV", void>(Uplo, TransA, Diag, A, X, incX); }
	void DTRSV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"DTRSV", void>(Uplo, TransA, Diag, A, X, incX); }
	void CTRSV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"CTRSV", void>(Uplo, TransA, Diag, A, X, incX); }
	void ZTRSV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"ZTRSV", void>(Uplo, TransA, Diag, A, X, incX); }
	void STBSV(jint Uplo, jint TransA, jint Diag, jint K, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"STBSV", void>(Uplo, TransA, Diag, K, A, X, incX); }
	void DTBSV(jint Uplo, jint TransA, jint Diag, jint K, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"DTBSV", void>(Uplo, TransA, Diag, K, A, X, incX); }
	void CTBSV(jint Uplo, jint TransA, jint Diag, jint K, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"CTBSV", void>(Uplo, TransA, Diag, K, A, X, incX); }
	void ZTBSV(jint Uplo, jint TransA, jint Diag, jint K, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"ZTBSV", void>(Uplo, TransA, Diag, K, A, X, incX); }
	void STPSV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"STPSV", void>(Uplo, TransA, Diag, Ap, X, incX); }
	void DTPSV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"DTPSV", void>(Uplo, TransA, Diag, Ap, X, incX); }
	void CTPSV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"CTPSV", void>(Uplo, TransA, Diag, Ap, X, incX); }
	void ZTPSV(jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX) { return call_method<"ZTPSV", void>(Uplo, TransA, Diag, Ap, X, incX); }
	void SSYMV(jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jfloat beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"SSYMV", void>(Uplo, alpha, A, X, incX, beta, Y, incY); }
	void SSBMV(jint Uplo, jint K, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jfloat beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"SSBMV", void>(Uplo, K, alpha, A, X, incX, beta, Y, incY); }
	void SSPMV(jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX, jfloat beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"SSPMV", void>(Uplo, alpha, Ap, X, incX, beta, Y, incY); }
	void SGER(jfloat alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> A) { return call_method<"SGER", void>(alpha, X, incX, Y, incY, A); }
	void SSYR(jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> A) { return call_method<"SSYR", void>(Uplo, alpha, X, incX, A); }
	void SSPR(jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Ap) { return call_method<"SSPR", void>(Uplo, alpha, X, incX, Ap); }
	void SSYR2(jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> A) { return call_method<"SSYR2", void>(Uplo, alpha, X, incX, Y, incY, A); }
	void SSPR2(jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> Ap) { return call_method<"SSPR2", void>(Uplo, alpha, X, incX, Y, incY, Ap); }
	void DSYMV(jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jni::ref<android::renderscript::Allocation> A, jint X, jdouble incX, jni::ref<android::renderscript::Allocation> beta, jint p8) { return call_method<"DSYMV", void>(Uplo, alpha, p3, A, X, incX, beta, p8); }
	void DSBMV(jint Uplo, jint K, jdouble alpha, jni::ref<android::renderscript::Allocation> p4, jni::ref<android::renderscript::Allocation> A, jint X, jdouble incX, jni::ref<android::renderscript::Allocation> beta, jint p9) { return call_method<"DSBMV", void>(Uplo, K, alpha, p4, A, X, incX, beta, p9); }
	void DSPMV(jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jni::ref<android::renderscript::Allocation> Ap, jint X, jdouble incX, jni::ref<android::renderscript::Allocation> beta, jint p8) { return call_method<"DSPMV", void>(Uplo, alpha, p3, Ap, X, incX, beta, p8); }
	void DGER(jdouble alpha, jni::ref<android::renderscript::Allocation> p2, jint X, jni::ref<android::renderscript::Allocation> incX, jint Y, jni::ref<android::renderscript::Allocation> incY) { return call_method<"DGER", void>(alpha, p2, X, incX, Y, incY); }
	void DSYR(jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jint X, jni::ref<android::renderscript::Allocation> incX) { return call_method<"DSYR", void>(Uplo, alpha, p3, X, incX); }
	void DSPR(jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jint X, jni::ref<android::renderscript::Allocation> incX) { return call_method<"DSPR", void>(Uplo, alpha, p3, X, incX); }
	void DSYR2(jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jint X, jni::ref<android::renderscript::Allocation> incX, jint Y, jni::ref<android::renderscript::Allocation> incY) { return call_method<"DSYR2", void>(Uplo, alpha, p3, X, incX, Y, incY); }
	void DSPR2(jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jint X, jni::ref<android::renderscript::Allocation> incX, jint Y, jni::ref<android::renderscript::Allocation> incY) { return call_method<"DSPR2", void>(Uplo, alpha, p3, X, incX, Y, incY); }
	void CHEMV(jint Uplo, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"CHEMV", void>(Uplo, alpha, A, X, incX, beta, Y, incY); }
	void CHBMV(jint Uplo, jint K, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"CHBMV", void>(Uplo, K, alpha, A, X, incX, beta, Y, incY); }
	void CHPMV(jint Uplo, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"CHPMV", void>(Uplo, alpha, Ap, X, incX, beta, Y, incY); }
	void CGERU(jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> A) { return call_method<"CGERU", void>(alpha, X, incX, Y, incY, A); }
	void CGERC(jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> A) { return call_method<"CGERC", void>(alpha, X, incX, Y, incY, A); }
	void CHER(jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> A) { return call_method<"CHER", void>(Uplo, alpha, X, incX, A); }
	void CHPR(jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Ap) { return call_method<"CHPR", void>(Uplo, alpha, X, incX, Ap); }
	void CHER2(jint Uplo, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> A) { return call_method<"CHER2", void>(Uplo, alpha, X, incX, Y, incY, A); }
	void CHPR2(jint Uplo, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> Ap) { return call_method<"CHPR2", void>(Uplo, alpha, X, incX, Y, incY, Ap); }
	void ZHEMV(jint Uplo, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"ZHEMV", void>(Uplo, alpha, A, X, incX, beta, Y, incY); }
	void ZHBMV(jint Uplo, jint K, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"ZHBMV", void>(Uplo, K, alpha, A, X, incX, beta, Y, incY); }
	void ZHPMV(jint Uplo, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> Ap, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> Y, jint incY) { return call_method<"ZHPMV", void>(Uplo, alpha, Ap, X, incX, beta, Y, incY); }
	void ZGERU(jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> A) { return call_method<"ZGERU", void>(alpha, X, incX, Y, incY, A); }
	void ZGERC(jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> A) { return call_method<"ZGERC", void>(alpha, X, incX, Y, incY, A); }
	void ZHER(jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jint X, jni::ref<android::renderscript::Allocation> incX) { return call_method<"ZHER", void>(Uplo, alpha, p3, X, incX); }
	void ZHPR(jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p3, jint X, jni::ref<android::renderscript::Allocation> incX) { return call_method<"ZHPR", void>(Uplo, alpha, p3, X, incX); }
	void ZHER2(jint Uplo, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> A) { return call_method<"ZHER2", void>(Uplo, alpha, X, incX, Y, incY, A); }
	void ZHPR2(jint Uplo, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> X, jint incX, jni::ref<android::renderscript::Allocation> Y, jint incY, jni::ref<android::renderscript::Allocation> Ap) { return call_method<"ZHPR2", void>(Uplo, alpha, X, incX, Y, incY, Ap); }
	void SGEMM(jint TransA, jint TransB, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jfloat beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"SGEMM", void>(TransA, TransB, alpha, A, B, beta, C); }
	void DGEMM(jint TransA, jint TransB, jdouble alpha, jni::ref<android::renderscript::Allocation> p4, jni::ref<android::renderscript::Allocation> A, jdouble B, jni::ref<android::renderscript::Allocation> beta) { return call_method<"DGEMM", void>(TransA, TransB, alpha, p4, A, B, beta); }
	void CGEMM(jint TransA, jint TransB, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"CGEMM", void>(TransA, TransB, alpha, A, B, beta, C); }
	void ZGEMM(jint TransA, jint TransB, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"ZGEMM", void>(TransA, TransB, alpha, A, B, beta, C); }
	void SSYMM(jint Side, jint Uplo, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jfloat beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"SSYMM", void>(Side, Uplo, alpha, A, B, beta, C); }
	void DSYMM(jint Side, jint Uplo, jdouble alpha, jni::ref<android::renderscript::Allocation> p4, jni::ref<android::renderscript::Allocation> A, jdouble B, jni::ref<android::renderscript::Allocation> beta) { return call_method<"DSYMM", void>(Side, Uplo, alpha, p4, A, B, beta); }
	void CSYMM(jint Side, jint Uplo, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"CSYMM", void>(Side, Uplo, alpha, A, B, beta, C); }
	void ZSYMM(jint Side, jint Uplo, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"ZSYMM", void>(Side, Uplo, alpha, A, B, beta, C); }
	void SSYRK(jint Uplo, jint Trans, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jfloat beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"SSYRK", void>(Uplo, Trans, alpha, A, beta, C); }
	void DSYRK(jint Uplo, jint Trans, jdouble alpha, jni::ref<android::renderscript::Allocation> p4, jdouble A, jni::ref<android::renderscript::Allocation> beta) { return call_method<"DSYRK", void>(Uplo, Trans, alpha, p4, A, beta); }
	void CSYRK(jint Uplo, jint Trans, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"CSYRK", void>(Uplo, Trans, alpha, A, beta, C); }
	void ZSYRK(jint Uplo, jint Trans, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"ZSYRK", void>(Uplo, Trans, alpha, A, beta, C); }
	void SSYR2K(jint Uplo, jint Trans, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jfloat beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"SSYR2K", void>(Uplo, Trans, alpha, A, B, beta, C); }
	void DSYR2K(jint Uplo, jint Trans, jdouble alpha, jni::ref<android::renderscript::Allocation> p4, jni::ref<android::renderscript::Allocation> A, jdouble B, jni::ref<android::renderscript::Allocation> beta) { return call_method<"DSYR2K", void>(Uplo, Trans, alpha, p4, A, B, beta); }
	void CSYR2K(jint Uplo, jint Trans, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"CSYR2K", void>(Uplo, Trans, alpha, A, B, beta, C); }
	void ZSYR2K(jint Uplo, jint Trans, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"ZSYR2K", void>(Uplo, Trans, alpha, A, B, beta, C); }
	void STRMM(jint Side, jint Uplo, jint TransA, jint Diag, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B) { return call_method<"STRMM", void>(Side, Uplo, TransA, Diag, alpha, A, B); }
	void DTRMM(jint Side, jint Uplo, jint TransA, jint Diag, jdouble alpha, jni::ref<android::renderscript::Allocation> p6, jni::ref<android::renderscript::Allocation> A) { return call_method<"DTRMM", void>(Side, Uplo, TransA, Diag, alpha, p6, A); }
	void CTRMM(jint Side, jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B) { return call_method<"CTRMM", void>(Side, Uplo, TransA, Diag, alpha, A, B); }
	void ZTRMM(jint Side, jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B) { return call_method<"ZTRMM", void>(Side, Uplo, TransA, Diag, alpha, A, B); }
	void STRSM(jint Side, jint Uplo, jint TransA, jint Diag, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B) { return call_method<"STRSM", void>(Side, Uplo, TransA, Diag, alpha, A, B); }
	void DTRSM(jint Side, jint Uplo, jint TransA, jint Diag, jdouble alpha, jni::ref<android::renderscript::Allocation> p6, jni::ref<android::renderscript::Allocation> A) { return call_method<"DTRSM", void>(Side, Uplo, TransA, Diag, alpha, p6, A); }
	void CTRSM(jint Side, jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B) { return call_method<"CTRSM", void>(Side, Uplo, TransA, Diag, alpha, A, B); }
	void ZTRSM(jint Side, jint Uplo, jint TransA, jint Diag, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B) { return call_method<"ZTRSM", void>(Side, Uplo, TransA, Diag, alpha, A, B); }
	void CHEMM(jint Side, jint Uplo, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jni::ref<android::renderscript::Float2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"CHEMM", void>(Side, Uplo, alpha, A, B, beta, C); }
	void ZHEMM(jint Side, jint Uplo, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jni::ref<android::renderscript::Double2> beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"ZHEMM", void>(Side, Uplo, alpha, A, B, beta, C); }
	void CHERK(jint Uplo, jint Trans, jfloat alpha, jni::ref<android::renderscript::Allocation> A, jfloat beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"CHERK", void>(Uplo, Trans, alpha, A, beta, C); }
	void ZHERK(jint Uplo, jint Trans, jdouble alpha, jni::ref<android::renderscript::Allocation> p4, jdouble A, jni::ref<android::renderscript::Allocation> beta) { return call_method<"ZHERK", void>(Uplo, Trans, alpha, p4, A, beta); }
	void CHER2K(jint Uplo, jint Trans, jni::ref<android::renderscript::Float2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jfloat beta, jni::ref<android::renderscript::Allocation> C) { return call_method<"CHER2K", void>(Uplo, Trans, alpha, A, B, beta, C); }
	void ZHER2K(jint Uplo, jint Trans, jni::ref<android::renderscript::Double2> alpha, jni::ref<android::renderscript::Allocation> A, jni::ref<android::renderscript::Allocation> B, jdouble beta, jni::ref<android::renderscript::Allocation> p7) { return call_method<"ZHER2K", void>(Uplo, Trans, alpha, A, B, beta, p7); }
	void BNNM(jni::ref<android::renderscript::Allocation> A, jint a_offset, jni::ref<android::renderscript::Allocation> B, jint b_offset, jni::ref<android::renderscript::Allocation> C, jint c_offset, jint c_mult) { return call_method<"BNNM", void>(A, a_offset, B, b_offset, C, c_offset, c_mult); }

protected:

	ScriptIntrinsicBLAS(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLAS
