// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::accessibility { class AccessibilityManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::accessibility::AccessibilityManager>
{
	static constexpr fixed_string class_name = "android/view/accessibility/AccessibilityManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYMANAGER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityManager_AccessibilityStateChangeListener.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityManager_TouchExplorationStateChangeListener.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityRequestPreparer.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::accessibility::AccessibilityManager : public jni::object_base<"android/view/accessibility/AccessibilityManager",
	java::lang::Object>
{
public:

	using TouchExplorationStateChangeListener = AccessibilityManager_TouchExplorationStateChangeListener;
	using AccessibilityStateChangeListener = AccessibilityManager_AccessibilityStateChangeListener;

	static jint FLAG_CONTENT_CONTROLS() { return get_static_field<"FLAG_CONTENT_CONTROLS", jint>(); }
	static jint FLAG_CONTENT_ICONS() { return get_static_field<"FLAG_CONTENT_ICONS", jint>(); }
	static jint FLAG_CONTENT_TEXT() { return get_static_field<"FLAG_CONTENT_TEXT", jint>(); }

	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	jboolean isTouchExplorationEnabled() { return call_method<"isTouchExplorationEnabled", jboolean>(); }
	void sendAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"sendAccessibilityEvent", void>(event); }
	void interrupt() { return call_method<"interrupt", void>(); }
	jni::ref<java::util::List> getAccessibilityServiceList() { return call_method<"getAccessibilityServiceList", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getInstalledAccessibilityServiceList() { return call_method<"getInstalledAccessibilityServiceList", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getEnabledAccessibilityServiceList(jint feedbackTypeFlags) { return call_method<"getEnabledAccessibilityServiceList", jni::ref<java::util::List>>(feedbackTypeFlags); }
	jboolean addAccessibilityStateChangeListener(jni::ref<android::view::accessibility::AccessibilityManager_AccessibilityStateChangeListener> listener) { return call_method<"addAccessibilityStateChangeListener", jboolean>(listener); }
	void addAccessibilityStateChangeListener(jni::ref<android::view::accessibility::AccessibilityManager_AccessibilityStateChangeListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"addAccessibilityStateChangeListener", void>(listener, handler); }
	jboolean removeAccessibilityStateChangeListener(jni::ref<android::view::accessibility::AccessibilityManager_AccessibilityStateChangeListener> listener) { return call_method<"removeAccessibilityStateChangeListener", jboolean>(listener); }
	jboolean addTouchExplorationStateChangeListener(jni::ref<android::view::accessibility::AccessibilityManager_TouchExplorationStateChangeListener> listener) { return call_method<"addTouchExplorationStateChangeListener", jboolean>(listener); }
	void addTouchExplorationStateChangeListener(jni::ref<android::view::accessibility::AccessibilityManager_TouchExplorationStateChangeListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"addTouchExplorationStateChangeListener", void>(listener, handler); }
	jboolean removeTouchExplorationStateChangeListener(jni::ref<android::view::accessibility::AccessibilityManager_TouchExplorationStateChangeListener> listener) { return call_method<"removeTouchExplorationStateChangeListener", jboolean>(listener); }
	void addAccessibilityRequestPreparer(jni::ref<android::view::accessibility::AccessibilityRequestPreparer> preparer) { return call_method<"addAccessibilityRequestPreparer", void>(preparer); }
	void removeAccessibilityRequestPreparer(jni::ref<android::view::accessibility::AccessibilityRequestPreparer> preparer) { return call_method<"removeAccessibilityRequestPreparer", void>(preparer); }
	jint getRecommendedTimeoutMillis(jint originalTimeout, jint uiContentFlags) { return call_method<"getRecommendedTimeoutMillis", jint>(originalTimeout, uiContentFlags); }
	jint getAccessibilityFocusStrokeWidth() { return call_method<"getAccessibilityFocusStrokeWidth", jint>(); }
	jint getAccessibilityFocusColor() { return call_method<"getAccessibilityFocusColor", jint>(); }
	static jboolean isAccessibilityButtonSupported() { return call_static_method<"isAccessibilityButtonSupported", jboolean>(); }

protected:

	AccessibilityManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYMANAGER
