// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTVALUES_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTVALUES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class ContentValues; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::ContentValues>
{
	static constexpr fixed_string class_name = "android/content/ContentValues";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTVALUES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTVALUES)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTVALUES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/Byte.h>
#include <scapix/java_api/java/lang/Double.h>
#include <scapix/java_api/java/lang/Float.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/Long.h>
#include <scapix/java_api/java/lang/Short.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::ContentValues : public jni::object_base<"android/content/ContentValues",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<java::lang::String> TAG() { return get_static_field<"TAG", jni::ref<java::lang::String>>(); }

	static jni::ref<android::content::ContentValues> new_object() { return base_::new_object(); }
	static jni::ref<android::content::ContentValues> new_object(jint size) { return base_::new_object(size); }
	static jni::ref<android::content::ContentValues> new_object(jni::ref<android::content::ContentValues> from) { return base_::new_object(from); }
	jboolean equals(jni::ref<java::lang::Object> object) { return call_method<"equals", jboolean>(object); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void put(jni::ref<java::lang::String> key, jni::ref<java::lang::String> value) { return call_method<"put", void>(key, value); }
	void putAll(jni::ref<android::content::ContentValues> other) { return call_method<"putAll", void>(other); }
	void put(jni::ref<java::lang::String> key, jni::ref<java::lang::Byte> value) { return call_method<"put", void>(key, value); }
	void put(jni::ref<java::lang::String> key, jni::ref<java::lang::Short> value) { return call_method<"put", void>(key, value); }
	void put(jni::ref<java::lang::String> key, jni::ref<java::lang::Integer> value) { return call_method<"put", void>(key, value); }
	void put(jni::ref<java::lang::String> key, jni::ref<java::lang::Long> value) { return call_method<"put", void>(key, value); }
	void put(jni::ref<java::lang::String> key, jni::ref<java::lang::Float> value) { return call_method<"put", void>(key, value); }
	void put(jni::ref<java::lang::String> key, jni::ref<java::lang::Double> value) { return call_method<"put", void>(key, value); }
	void put(jni::ref<java::lang::String> key, jni::ref<java::lang::Boolean> value) { return call_method<"put", void>(key, value); }
	void put(jni::ref<java::lang::String> key, jni::ref<jni::array<jbyte>> value) { return call_method<"put", void>(key, value); }
	void putNull(jni::ref<java::lang::String> key) { return call_method<"putNull", void>(key); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	void remove(jni::ref<java::lang::String> key) { return call_method<"remove", void>(key); }
	void clear() { return call_method<"clear", void>(); }
	jboolean containsKey(jni::ref<java::lang::String> key) { return call_method<"containsKey", jboolean>(key); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::String> key) { return call_method<"get", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::lang::String> getAsString(jni::ref<java::lang::String> key) { return call_method<"getAsString", jni::ref<java::lang::String>>(key); }
	jni::ref<java::lang::Long> getAsLong(jni::ref<java::lang::String> key) { return call_method<"getAsLong", jni::ref<java::lang::Long>>(key); }
	jni::ref<java::lang::Integer> getAsInteger(jni::ref<java::lang::String> key) { return call_method<"getAsInteger", jni::ref<java::lang::Integer>>(key); }
	jni::ref<java::lang::Short> getAsShort(jni::ref<java::lang::String> key) { return call_method<"getAsShort", jni::ref<java::lang::Short>>(key); }
	jni::ref<java::lang::Byte> getAsByte(jni::ref<java::lang::String> key) { return call_method<"getAsByte", jni::ref<java::lang::Byte>>(key); }
	jni::ref<java::lang::Double> getAsDouble(jni::ref<java::lang::String> key) { return call_method<"getAsDouble", jni::ref<java::lang::Double>>(key); }
	jni::ref<java::lang::Float> getAsFloat(jni::ref<java::lang::String> key) { return call_method<"getAsFloat", jni::ref<java::lang::Float>>(key); }
	jni::ref<java::lang::Boolean> getAsBoolean(jni::ref<java::lang::String> key) { return call_method<"getAsBoolean", jni::ref<java::lang::Boolean>>(key); }
	jni::ref<jni::array<jbyte>> getAsByteArray(jni::ref<java::lang::String> key) { return call_method<"getAsByteArray", jni::ref<jni::array<jbyte>>>(key); }
	jni::ref<java::util::Set> valueSet() { return call_method<"valueSet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> parcel, jint flags) { return call_method<"writeToParcel", void>(parcel, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ContentValues(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTVALUES
