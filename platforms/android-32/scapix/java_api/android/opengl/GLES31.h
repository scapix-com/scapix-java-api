// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/opengl/GLES30.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OPENGL_GLES31_FWD
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLES31_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::opengl { class GLES31; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::opengl::GLES31>
{
	static constexpr fixed_string class_name = "android/opengl/GLES31";
	using base_classes = std::tuple<scapix::java_api::android::opengl::GLES30>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLES31_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OPENGL_GLES31)
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLES31

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::opengl::GLES31 : public jni::object_base<"android/opengl/GLES31",
	android::opengl::GLES30>
{
public:

	static jint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS() { return get_static_field<"GL_ACTIVE_ATOMIC_COUNTER_BUFFERS", jint>(); }
	static jint GL_ACTIVE_PROGRAM() { return get_static_field<"GL_ACTIVE_PROGRAM", jint>(); }
	static jint GL_ACTIVE_RESOURCES() { return get_static_field<"GL_ACTIVE_RESOURCES", jint>(); }
	static jint GL_ACTIVE_VARIABLES() { return get_static_field<"GL_ACTIVE_VARIABLES", jint>(); }
	static jint GL_ALL_BARRIER_BITS() { return get_static_field<"GL_ALL_BARRIER_BITS", jint>(); }
	static jint GL_ALL_SHADER_BITS() { return get_static_field<"GL_ALL_SHADER_BITS", jint>(); }
	static jint GL_ARRAY_SIZE() { return get_static_field<"GL_ARRAY_SIZE", jint>(); }
	static jint GL_ARRAY_STRIDE() { return get_static_field<"GL_ARRAY_STRIDE", jint>(); }
	static jint GL_ATOMIC_COUNTER_BARRIER_BIT() { return get_static_field<"GL_ATOMIC_COUNTER_BARRIER_BIT", jint>(); }
	static jint GL_ATOMIC_COUNTER_BUFFER() { return get_static_field<"GL_ATOMIC_COUNTER_BUFFER", jint>(); }
	static jint GL_ATOMIC_COUNTER_BUFFER_BINDING() { return get_static_field<"GL_ATOMIC_COUNTER_BUFFER_BINDING", jint>(); }
	static jint GL_ATOMIC_COUNTER_BUFFER_INDEX() { return get_static_field<"GL_ATOMIC_COUNTER_BUFFER_INDEX", jint>(); }
	static jint GL_ATOMIC_COUNTER_BUFFER_SIZE() { return get_static_field<"GL_ATOMIC_COUNTER_BUFFER_SIZE", jint>(); }
	static jint GL_ATOMIC_COUNTER_BUFFER_START() { return get_static_field<"GL_ATOMIC_COUNTER_BUFFER_START", jint>(); }
	static jint GL_BLOCK_INDEX() { return get_static_field<"GL_BLOCK_INDEX", jint>(); }
	static jint GL_BUFFER_BINDING() { return get_static_field<"GL_BUFFER_BINDING", jint>(); }
	static jint GL_BUFFER_DATA_SIZE() { return get_static_field<"GL_BUFFER_DATA_SIZE", jint>(); }
	static jint GL_BUFFER_UPDATE_BARRIER_BIT() { return get_static_field<"GL_BUFFER_UPDATE_BARRIER_BIT", jint>(); }
	static jint GL_BUFFER_VARIABLE() { return get_static_field<"GL_BUFFER_VARIABLE", jint>(); }
	static jint GL_COMMAND_BARRIER_BIT() { return get_static_field<"GL_COMMAND_BARRIER_BIT", jint>(); }
	static jint GL_COMPUTE_SHADER() { return get_static_field<"GL_COMPUTE_SHADER", jint>(); }
	static jint GL_COMPUTE_SHADER_BIT() { return get_static_field<"GL_COMPUTE_SHADER_BIT", jint>(); }
	static jint GL_COMPUTE_WORK_GROUP_SIZE() { return get_static_field<"GL_COMPUTE_WORK_GROUP_SIZE", jint>(); }
	static jint GL_DEPTH_STENCIL_TEXTURE_MODE() { return get_static_field<"GL_DEPTH_STENCIL_TEXTURE_MODE", jint>(); }
	static jint GL_DISPATCH_INDIRECT_BUFFER() { return get_static_field<"GL_DISPATCH_INDIRECT_BUFFER", jint>(); }
	static jint GL_DISPATCH_INDIRECT_BUFFER_BINDING() { return get_static_field<"GL_DISPATCH_INDIRECT_BUFFER_BINDING", jint>(); }
	static jint GL_DRAW_INDIRECT_BUFFER() { return get_static_field<"GL_DRAW_INDIRECT_BUFFER", jint>(); }
	static jint GL_DRAW_INDIRECT_BUFFER_BINDING() { return get_static_field<"GL_DRAW_INDIRECT_BUFFER_BINDING", jint>(); }
	static jint GL_ELEMENT_ARRAY_BARRIER_BIT() { return get_static_field<"GL_ELEMENT_ARRAY_BARRIER_BIT", jint>(); }
	static jint GL_FRAGMENT_SHADER_BIT() { return get_static_field<"GL_FRAGMENT_SHADER_BIT", jint>(); }
	static jint GL_FRAMEBUFFER_BARRIER_BIT() { return get_static_field<"GL_FRAMEBUFFER_BARRIER_BIT", jint>(); }
	static jint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS() { return get_static_field<"GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS", jint>(); }
	static jint GL_FRAMEBUFFER_DEFAULT_HEIGHT() { return get_static_field<"GL_FRAMEBUFFER_DEFAULT_HEIGHT", jint>(); }
	static jint GL_FRAMEBUFFER_DEFAULT_SAMPLES() { return get_static_field<"GL_FRAMEBUFFER_DEFAULT_SAMPLES", jint>(); }
	static jint GL_FRAMEBUFFER_DEFAULT_WIDTH() { return get_static_field<"GL_FRAMEBUFFER_DEFAULT_WIDTH", jint>(); }
	static jint GL_IMAGE_2D() { return get_static_field<"GL_IMAGE_2D", jint>(); }
	static jint GL_IMAGE_2D_ARRAY() { return get_static_field<"GL_IMAGE_2D_ARRAY", jint>(); }
	static jint GL_IMAGE_3D() { return get_static_field<"GL_IMAGE_3D", jint>(); }
	static jint GL_IMAGE_BINDING_ACCESS() { return get_static_field<"GL_IMAGE_BINDING_ACCESS", jint>(); }
	static jint GL_IMAGE_BINDING_FORMAT() { return get_static_field<"GL_IMAGE_BINDING_FORMAT", jint>(); }
	static jint GL_IMAGE_BINDING_LAYER() { return get_static_field<"GL_IMAGE_BINDING_LAYER", jint>(); }
	static jint GL_IMAGE_BINDING_LAYERED() { return get_static_field<"GL_IMAGE_BINDING_LAYERED", jint>(); }
	static jint GL_IMAGE_BINDING_LEVEL() { return get_static_field<"GL_IMAGE_BINDING_LEVEL", jint>(); }
	static jint GL_IMAGE_BINDING_NAME() { return get_static_field<"GL_IMAGE_BINDING_NAME", jint>(); }
	static jint GL_IMAGE_CUBE() { return get_static_field<"GL_IMAGE_CUBE", jint>(); }
	static jint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS() { return get_static_field<"GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS", jint>(); }
	static jint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE() { return get_static_field<"GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE", jint>(); }
	static jint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE() { return get_static_field<"GL_IMAGE_FORMAT_COMPATIBILITY_TYPE", jint>(); }
	static jint GL_INT_IMAGE_2D() { return get_static_field<"GL_INT_IMAGE_2D", jint>(); }
	static jint GL_INT_IMAGE_2D_ARRAY() { return get_static_field<"GL_INT_IMAGE_2D_ARRAY", jint>(); }
	static jint GL_INT_IMAGE_3D() { return get_static_field<"GL_INT_IMAGE_3D", jint>(); }
	static jint GL_INT_IMAGE_CUBE() { return get_static_field<"GL_INT_IMAGE_CUBE", jint>(); }
	static jint GL_INT_SAMPLER_2D_MULTISAMPLE() { return get_static_field<"GL_INT_SAMPLER_2D_MULTISAMPLE", jint>(); }
	static jint GL_IS_ROW_MAJOR() { return get_static_field<"GL_IS_ROW_MAJOR", jint>(); }
	static jint GL_LOCATION() { return get_static_field<"GL_LOCATION", jint>(); }
	static jint GL_MATRIX_STRIDE() { return get_static_field<"GL_MATRIX_STRIDE", jint>(); }
	static jint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS() { return get_static_field<"GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS", jint>(); }
	static jint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE() { return get_static_field<"GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE", jint>(); }
	static jint GL_MAX_COLOR_TEXTURE_SAMPLES() { return get_static_field<"GL_MAX_COLOR_TEXTURE_SAMPLES", jint>(); }
	static jint GL_MAX_COMBINED_ATOMIC_COUNTERS() { return get_static_field<"GL_MAX_COMBINED_ATOMIC_COUNTERS", jint>(); }
	static jint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS() { return get_static_field<"GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS", jint>(); }
	static jint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS() { return get_static_field<"GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS", jint>(); }
	static jint GL_MAX_COMBINED_IMAGE_UNIFORMS() { return get_static_field<"GL_MAX_COMBINED_IMAGE_UNIFORMS", jint>(); }
	static jint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES() { return get_static_field<"GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES", jint>(); }
	static jint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS() { return get_static_field<"GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS", jint>(); }
	static jint GL_MAX_COMPUTE_ATOMIC_COUNTERS() { return get_static_field<"GL_MAX_COMPUTE_ATOMIC_COUNTERS", jint>(); }
	static jint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS() { return get_static_field<"GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS", jint>(); }
	static jint GL_MAX_COMPUTE_IMAGE_UNIFORMS() { return get_static_field<"GL_MAX_COMPUTE_IMAGE_UNIFORMS", jint>(); }
	static jint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS() { return get_static_field<"GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS", jint>(); }
	static jint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE() { return get_static_field<"GL_MAX_COMPUTE_SHARED_MEMORY_SIZE", jint>(); }
	static jint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS() { return get_static_field<"GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS", jint>(); }
	static jint GL_MAX_COMPUTE_UNIFORM_BLOCKS() { return get_static_field<"GL_MAX_COMPUTE_UNIFORM_BLOCKS", jint>(); }
	static jint GL_MAX_COMPUTE_UNIFORM_COMPONENTS() { return get_static_field<"GL_MAX_COMPUTE_UNIFORM_COMPONENTS", jint>(); }
	static jint GL_MAX_COMPUTE_WORK_GROUP_COUNT() { return get_static_field<"GL_MAX_COMPUTE_WORK_GROUP_COUNT", jint>(); }
	static jint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS() { return get_static_field<"GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS", jint>(); }
	static jint GL_MAX_COMPUTE_WORK_GROUP_SIZE() { return get_static_field<"GL_MAX_COMPUTE_WORK_GROUP_SIZE", jint>(); }
	static jint GL_MAX_DEPTH_TEXTURE_SAMPLES() { return get_static_field<"GL_MAX_DEPTH_TEXTURE_SAMPLES", jint>(); }
	static jint GL_MAX_FRAGMENT_ATOMIC_COUNTERS() { return get_static_field<"GL_MAX_FRAGMENT_ATOMIC_COUNTERS", jint>(); }
	static jint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS() { return get_static_field<"GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS", jint>(); }
	static jint GL_MAX_FRAGMENT_IMAGE_UNIFORMS() { return get_static_field<"GL_MAX_FRAGMENT_IMAGE_UNIFORMS", jint>(); }
	static jint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS() { return get_static_field<"GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS", jint>(); }
	static jint GL_MAX_FRAMEBUFFER_HEIGHT() { return get_static_field<"GL_MAX_FRAMEBUFFER_HEIGHT", jint>(); }
	static jint GL_MAX_FRAMEBUFFER_SAMPLES() { return get_static_field<"GL_MAX_FRAMEBUFFER_SAMPLES", jint>(); }
	static jint GL_MAX_FRAMEBUFFER_WIDTH() { return get_static_field<"GL_MAX_FRAMEBUFFER_WIDTH", jint>(); }
	static jint GL_MAX_IMAGE_UNITS() { return get_static_field<"GL_MAX_IMAGE_UNITS", jint>(); }
	static jint GL_MAX_INTEGER_SAMPLES() { return get_static_field<"GL_MAX_INTEGER_SAMPLES", jint>(); }
	static jint GL_MAX_NAME_LENGTH() { return get_static_field<"GL_MAX_NAME_LENGTH", jint>(); }
	static jint GL_MAX_NUM_ACTIVE_VARIABLES() { return get_static_field<"GL_MAX_NUM_ACTIVE_VARIABLES", jint>(); }
	static jint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET() { return get_static_field<"GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET", jint>(); }
	static jint GL_MAX_SAMPLE_MASK_WORDS() { return get_static_field<"GL_MAX_SAMPLE_MASK_WORDS", jint>(); }
	static jint GL_MAX_SHADER_STORAGE_BLOCK_SIZE() { return get_static_field<"GL_MAX_SHADER_STORAGE_BLOCK_SIZE", jint>(); }
	static jint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS() { return get_static_field<"GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS", jint>(); }
	static jint GL_MAX_UNIFORM_LOCATIONS() { return get_static_field<"GL_MAX_UNIFORM_LOCATIONS", jint>(); }
	static jint GL_MAX_VERTEX_ATOMIC_COUNTERS() { return get_static_field<"GL_MAX_VERTEX_ATOMIC_COUNTERS", jint>(); }
	static jint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS() { return get_static_field<"GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS", jint>(); }
	static jint GL_MAX_VERTEX_ATTRIB_BINDINGS() { return get_static_field<"GL_MAX_VERTEX_ATTRIB_BINDINGS", jint>(); }
	static jint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET() { return get_static_field<"GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET", jint>(); }
	static jint GL_MAX_VERTEX_ATTRIB_STRIDE() { return get_static_field<"GL_MAX_VERTEX_ATTRIB_STRIDE", jint>(); }
	static jint GL_MAX_VERTEX_IMAGE_UNIFORMS() { return get_static_field<"GL_MAX_VERTEX_IMAGE_UNIFORMS", jint>(); }
	static jint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS() { return get_static_field<"GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS", jint>(); }
	static jint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET() { return get_static_field<"GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET", jint>(); }
	static jint GL_NAME_LENGTH() { return get_static_field<"GL_NAME_LENGTH", jint>(); }
	static jint GL_NUM_ACTIVE_VARIABLES() { return get_static_field<"GL_NUM_ACTIVE_VARIABLES", jint>(); }
	static jint GL_OFFSET() { return get_static_field<"GL_OFFSET", jint>(); }
	static jint GL_PIXEL_BUFFER_BARRIER_BIT() { return get_static_field<"GL_PIXEL_BUFFER_BARRIER_BIT", jint>(); }
	static jint GL_PROGRAM_INPUT() { return get_static_field<"GL_PROGRAM_INPUT", jint>(); }
	static jint GL_PROGRAM_OUTPUT() { return get_static_field<"GL_PROGRAM_OUTPUT", jint>(); }
	static jint GL_PROGRAM_PIPELINE_BINDING() { return get_static_field<"GL_PROGRAM_PIPELINE_BINDING", jint>(); }
	static jint GL_PROGRAM_SEPARABLE() { return get_static_field<"GL_PROGRAM_SEPARABLE", jint>(); }
	static jint GL_READ_ONLY() { return get_static_field<"GL_READ_ONLY", jint>(); }
	static jint GL_READ_WRITE() { return get_static_field<"GL_READ_WRITE", jint>(); }
	static jint GL_REFERENCED_BY_COMPUTE_SHADER() { return get_static_field<"GL_REFERENCED_BY_COMPUTE_SHADER", jint>(); }
	static jint GL_REFERENCED_BY_FRAGMENT_SHADER() { return get_static_field<"GL_REFERENCED_BY_FRAGMENT_SHADER", jint>(); }
	static jint GL_REFERENCED_BY_VERTEX_SHADER() { return get_static_field<"GL_REFERENCED_BY_VERTEX_SHADER", jint>(); }
	static jint GL_SAMPLER_2D_MULTISAMPLE() { return get_static_field<"GL_SAMPLER_2D_MULTISAMPLE", jint>(); }
	static jint GL_SAMPLE_MASK() { return get_static_field<"GL_SAMPLE_MASK", jint>(); }
	static jint GL_SAMPLE_MASK_VALUE() { return get_static_field<"GL_SAMPLE_MASK_VALUE", jint>(); }
	static jint GL_SAMPLE_POSITION() { return get_static_field<"GL_SAMPLE_POSITION", jint>(); }
	static jint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT() { return get_static_field<"GL_SHADER_IMAGE_ACCESS_BARRIER_BIT", jint>(); }
	static jint GL_SHADER_STORAGE_BARRIER_BIT() { return get_static_field<"GL_SHADER_STORAGE_BARRIER_BIT", jint>(); }
	static jint GL_SHADER_STORAGE_BLOCK() { return get_static_field<"GL_SHADER_STORAGE_BLOCK", jint>(); }
	static jint GL_SHADER_STORAGE_BUFFER() { return get_static_field<"GL_SHADER_STORAGE_BUFFER", jint>(); }
	static jint GL_SHADER_STORAGE_BUFFER_BINDING() { return get_static_field<"GL_SHADER_STORAGE_BUFFER_BINDING", jint>(); }
	static jint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT() { return get_static_field<"GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT", jint>(); }
	static jint GL_SHADER_STORAGE_BUFFER_SIZE() { return get_static_field<"GL_SHADER_STORAGE_BUFFER_SIZE", jint>(); }
	static jint GL_SHADER_STORAGE_BUFFER_START() { return get_static_field<"GL_SHADER_STORAGE_BUFFER_START", jint>(); }
	static jint GL_STENCIL_INDEX() { return get_static_field<"GL_STENCIL_INDEX", jint>(); }
	static jint GL_TEXTURE_2D_MULTISAMPLE() { return get_static_field<"GL_TEXTURE_2D_MULTISAMPLE", jint>(); }
	static jint GL_TEXTURE_ALPHA_SIZE() { return get_static_field<"GL_TEXTURE_ALPHA_SIZE", jint>(); }
	static jint GL_TEXTURE_ALPHA_TYPE() { return get_static_field<"GL_TEXTURE_ALPHA_TYPE", jint>(); }
	static jint GL_TEXTURE_BINDING_2D_MULTISAMPLE() { return get_static_field<"GL_TEXTURE_BINDING_2D_MULTISAMPLE", jint>(); }
	static jint GL_TEXTURE_BLUE_SIZE() { return get_static_field<"GL_TEXTURE_BLUE_SIZE", jint>(); }
	static jint GL_TEXTURE_BLUE_TYPE() { return get_static_field<"GL_TEXTURE_BLUE_TYPE", jint>(); }
	static jint GL_TEXTURE_COMPRESSED() { return get_static_field<"GL_TEXTURE_COMPRESSED", jint>(); }
	static jint GL_TEXTURE_DEPTH() { return get_static_field<"GL_TEXTURE_DEPTH", jint>(); }
	static jint GL_TEXTURE_DEPTH_SIZE() { return get_static_field<"GL_TEXTURE_DEPTH_SIZE", jint>(); }
	static jint GL_TEXTURE_DEPTH_TYPE() { return get_static_field<"GL_TEXTURE_DEPTH_TYPE", jint>(); }
	static jint GL_TEXTURE_FETCH_BARRIER_BIT() { return get_static_field<"GL_TEXTURE_FETCH_BARRIER_BIT", jint>(); }
	static jint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS() { return get_static_field<"GL_TEXTURE_FIXED_SAMPLE_LOCATIONS", jint>(); }
	static jint GL_TEXTURE_GREEN_SIZE() { return get_static_field<"GL_TEXTURE_GREEN_SIZE", jint>(); }
	static jint GL_TEXTURE_GREEN_TYPE() { return get_static_field<"GL_TEXTURE_GREEN_TYPE", jint>(); }
	static jint GL_TEXTURE_HEIGHT() { return get_static_field<"GL_TEXTURE_HEIGHT", jint>(); }
	static jint GL_TEXTURE_INTERNAL_FORMAT() { return get_static_field<"GL_TEXTURE_INTERNAL_FORMAT", jint>(); }
	static jint GL_TEXTURE_RED_SIZE() { return get_static_field<"GL_TEXTURE_RED_SIZE", jint>(); }
	static jint GL_TEXTURE_RED_TYPE() { return get_static_field<"GL_TEXTURE_RED_TYPE", jint>(); }
	static jint GL_TEXTURE_SAMPLES() { return get_static_field<"GL_TEXTURE_SAMPLES", jint>(); }
	static jint GL_TEXTURE_SHARED_SIZE() { return get_static_field<"GL_TEXTURE_SHARED_SIZE", jint>(); }
	static jint GL_TEXTURE_STENCIL_SIZE() { return get_static_field<"GL_TEXTURE_STENCIL_SIZE", jint>(); }
	static jint GL_TEXTURE_UPDATE_BARRIER_BIT() { return get_static_field<"GL_TEXTURE_UPDATE_BARRIER_BIT", jint>(); }
	static jint GL_TEXTURE_WIDTH() { return get_static_field<"GL_TEXTURE_WIDTH", jint>(); }
	static jint GL_TOP_LEVEL_ARRAY_SIZE() { return get_static_field<"GL_TOP_LEVEL_ARRAY_SIZE", jint>(); }
	static jint GL_TOP_LEVEL_ARRAY_STRIDE() { return get_static_field<"GL_TOP_LEVEL_ARRAY_STRIDE", jint>(); }
	static jint GL_TRANSFORM_FEEDBACK_BARRIER_BIT() { return get_static_field<"GL_TRANSFORM_FEEDBACK_BARRIER_BIT", jint>(); }
	static jint GL_TRANSFORM_FEEDBACK_VARYING() { return get_static_field<"GL_TRANSFORM_FEEDBACK_VARYING", jint>(); }
	static jint GL_TYPE() { return get_static_field<"GL_TYPE", jint>(); }
	static jint GL_UNIFORM() { return get_static_field<"GL_UNIFORM", jint>(); }
	static jint GL_UNIFORM_BARRIER_BIT() { return get_static_field<"GL_UNIFORM_BARRIER_BIT", jint>(); }
	static jint GL_UNIFORM_BLOCK() { return get_static_field<"GL_UNIFORM_BLOCK", jint>(); }
	static jint GL_UNSIGNED_INT_ATOMIC_COUNTER() { return get_static_field<"GL_UNSIGNED_INT_ATOMIC_COUNTER", jint>(); }
	static jint GL_UNSIGNED_INT_IMAGE_2D() { return get_static_field<"GL_UNSIGNED_INT_IMAGE_2D", jint>(); }
	static jint GL_UNSIGNED_INT_IMAGE_2D_ARRAY() { return get_static_field<"GL_UNSIGNED_INT_IMAGE_2D_ARRAY", jint>(); }
	static jint GL_UNSIGNED_INT_IMAGE_3D() { return get_static_field<"GL_UNSIGNED_INT_IMAGE_3D", jint>(); }
	static jint GL_UNSIGNED_INT_IMAGE_CUBE() { return get_static_field<"GL_UNSIGNED_INT_IMAGE_CUBE", jint>(); }
	static jint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE() { return get_static_field<"GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE", jint>(); }
	static jint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT() { return get_static_field<"GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT", jint>(); }
	static jint GL_VERTEX_ATTRIB_BINDING() { return get_static_field<"GL_VERTEX_ATTRIB_BINDING", jint>(); }
	static jint GL_VERTEX_ATTRIB_RELATIVE_OFFSET() { return get_static_field<"GL_VERTEX_ATTRIB_RELATIVE_OFFSET", jint>(); }
	static jint GL_VERTEX_BINDING_BUFFER() { return get_static_field<"GL_VERTEX_BINDING_BUFFER", jint>(); }
	static jint GL_VERTEX_BINDING_DIVISOR() { return get_static_field<"GL_VERTEX_BINDING_DIVISOR", jint>(); }
	static jint GL_VERTEX_BINDING_OFFSET() { return get_static_field<"GL_VERTEX_BINDING_OFFSET", jint>(); }
	static jint GL_VERTEX_BINDING_STRIDE() { return get_static_field<"GL_VERTEX_BINDING_STRIDE", jint>(); }
	static jint GL_VERTEX_SHADER_BIT() { return get_static_field<"GL_VERTEX_SHADER_BIT", jint>(); }
	static jint GL_WRITE_ONLY() { return get_static_field<"GL_WRITE_ONLY", jint>(); }

	static void glDispatchCompute(jint p1, jint p2, jint p3) { return call_static_method<"glDispatchCompute", void>(p1, p2, p3); }
	static void glDispatchComputeIndirect(jlong p1) { return call_static_method<"glDispatchComputeIndirect", void>(p1); }
	static void glDrawArraysIndirect(jint p1, jlong p2) { return call_static_method<"glDrawArraysIndirect", void>(p1, p2); }
	static void glDrawElementsIndirect(jint p1, jint p2, jlong p3) { return call_static_method<"glDrawElementsIndirect", void>(p1, p2, p3); }
	static void glFramebufferParameteri(jint p1, jint p2, jint p3) { return call_static_method<"glFramebufferParameteri", void>(p1, p2, p3); }
	static void glGetFramebufferParameteriv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetFramebufferParameteriv", void>(p1, p2, p3, p4); }
	static void glGetFramebufferParameteriv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetFramebufferParameteriv", void>(p1, p2, p3); }
	static void glGetProgramInterfaceiv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glGetProgramInterfaceiv", void>(p1, p2, p3, p4, p5); }
	static void glGetProgramInterfaceiv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glGetProgramInterfaceiv", void>(p1, p2, p3, p4); }
	static jint glGetProgramResourceIndex(jint p1, jint p2, jni::ref<java::lang::String> p3) { return call_static_method<"glGetProgramResourceIndex", jint>(p1, p2, p3); }
	static jni::ref<java::lang::String> glGetProgramResourceName(jint p1, jint p2, jint p3) { return call_static_method<"glGetProgramResourceName", jni::ref<java::lang::String>>(p1, p2, p3); }
	static void glGetProgramResourceiv(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jint p6, jint p7, jni::ref<jni::array<jint>> p8, jint p9, jni::ref<jni::array<jint>> p10, jint p11) { return call_static_method<"glGetProgramResourceiv", void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	static void glGetProgramResourceiv(jint p1, jint p2, jint p3, jint p4, jni::ref<java::nio::IntBuffer> p5, jint p6, jni::ref<java::nio::IntBuffer> p7, jni::ref<java::nio::IntBuffer> p8) { return call_static_method<"glGetProgramResourceiv", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jint glGetProgramResourceLocation(jint p1, jint p2, jni::ref<java::lang::String> p3) { return call_static_method<"glGetProgramResourceLocation", jint>(p1, p2, p3); }
	static void glUseProgramStages(jint p1, jint p2, jint p3) { return call_static_method<"glUseProgramStages", void>(p1, p2, p3); }
	static void glActiveShaderProgram(jint p1, jint p2) { return call_static_method<"glActiveShaderProgram", void>(p1, p2); }
	static jint glCreateShaderProgramv(jint p1, jni::ref<jni::array<java::lang::String>> p2) { return call_static_method<"glCreateShaderProgramv", jint>(p1, p2); }
	static void glBindProgramPipeline(jint p1) { return call_static_method<"glBindProgramPipeline", void>(p1); }
	static void glDeleteProgramPipelines(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glDeleteProgramPipelines", void>(p1, p2, p3); }
	static void glDeleteProgramPipelines(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glDeleteProgramPipelines", void>(p1, p2); }
	static void glGenProgramPipelines(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glGenProgramPipelines", void>(p1, p2, p3); }
	static void glGenProgramPipelines(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glGenProgramPipelines", void>(p1, p2); }
	static jboolean glIsProgramPipeline(jint p1) { return call_static_method<"glIsProgramPipeline", jboolean>(p1); }
	static void glGetProgramPipelineiv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetProgramPipelineiv", void>(p1, p2, p3, p4); }
	static void glGetProgramPipelineiv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetProgramPipelineiv", void>(p1, p2, p3); }
	static void glProgramUniform1i(jint p1, jint p2, jint p3) { return call_static_method<"glProgramUniform1i", void>(p1, p2, p3); }
	static void glProgramUniform2i(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glProgramUniform2i", void>(p1, p2, p3, p4); }
	static void glProgramUniform3i(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glProgramUniform3i", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform4i(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_static_method<"glProgramUniform4i", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniform1ui(jint p1, jint p2, jint p3) { return call_static_method<"glProgramUniform1ui", void>(p1, p2, p3); }
	static void glProgramUniform2ui(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glProgramUniform2ui", void>(p1, p2, p3, p4); }
	static void glProgramUniform3ui(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glProgramUniform3ui", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform4ui(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_static_method<"glProgramUniform4ui", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniform1f(jint p1, jint p2, jfloat p3) { return call_static_method<"glProgramUniform1f", void>(p1, p2, p3); }
	static void glProgramUniform2f(jint p1, jint p2, jfloat p3, jfloat p4) { return call_static_method<"glProgramUniform2f", void>(p1, p2, p3, p4); }
	static void glProgramUniform3f(jint p1, jint p2, jfloat p3, jfloat p4, jfloat p5) { return call_static_method<"glProgramUniform3f", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform4f(jint p1, jint p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_static_method<"glProgramUniform4f", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniform1iv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glProgramUniform1iv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform1iv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glProgramUniform1iv", void>(p1, p2, p3, p4); }
	static void glProgramUniform2iv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glProgramUniform2iv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform2iv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glProgramUniform2iv", void>(p1, p2, p3, p4); }
	static void glProgramUniform3iv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glProgramUniform3iv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform3iv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glProgramUniform3iv", void>(p1, p2, p3, p4); }
	static void glProgramUniform4iv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glProgramUniform4iv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform4iv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glProgramUniform4iv", void>(p1, p2, p3, p4); }
	static void glProgramUniform1uiv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glProgramUniform1uiv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform1uiv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glProgramUniform1uiv", void>(p1, p2, p3, p4); }
	static void glProgramUniform2uiv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glProgramUniform2uiv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform2uiv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glProgramUniform2uiv", void>(p1, p2, p3, p4); }
	static void glProgramUniform3uiv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glProgramUniform3uiv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform3uiv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glProgramUniform3uiv", void>(p1, p2, p3, p4); }
	static void glProgramUniform4uiv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glProgramUniform4uiv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform4uiv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glProgramUniform4uiv", void>(p1, p2, p3, p4); }
	static void glProgramUniform1fv(jint p1, jint p2, jint p3, jni::ref<jni::array<jfloat>> p4, jint p5) { return call_static_method<"glProgramUniform1fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform1fv(jint p1, jint p2, jint p3, jni::ref<java::nio::FloatBuffer> p4) { return call_static_method<"glProgramUniform1fv", void>(p1, p2, p3, p4); }
	static void glProgramUniform2fv(jint p1, jint p2, jint p3, jni::ref<jni::array<jfloat>> p4, jint p5) { return call_static_method<"glProgramUniform2fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform2fv(jint p1, jint p2, jint p3, jni::ref<java::nio::FloatBuffer> p4) { return call_static_method<"glProgramUniform2fv", void>(p1, p2, p3, p4); }
	static void glProgramUniform3fv(jint p1, jint p2, jint p3, jni::ref<jni::array<jfloat>> p4, jint p5) { return call_static_method<"glProgramUniform3fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform3fv(jint p1, jint p2, jint p3, jni::ref<java::nio::FloatBuffer> p4) { return call_static_method<"glProgramUniform3fv", void>(p1, p2, p3, p4); }
	static void glProgramUniform4fv(jint p1, jint p2, jint p3, jni::ref<jni::array<jfloat>> p4, jint p5) { return call_static_method<"glProgramUniform4fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniform4fv(jint p1, jint p2, jint p3, jni::ref<java::nio::FloatBuffer> p4) { return call_static_method<"glProgramUniform4fv", void>(p1, p2, p3, p4); }
	static void glProgramUniformMatrix2fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix2fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix2fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix2fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniformMatrix3fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix3fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix3fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix3fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniformMatrix4fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix4fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix4fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix4fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniformMatrix2x3fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix2x3fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix2x3fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix2x3fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniformMatrix3x2fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix3x2fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix3x2fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix3x2fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniformMatrix2x4fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix2x4fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix2x4fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix2x4fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniformMatrix4x2fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix4x2fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix4x2fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix4x2fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniformMatrix3x4fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix3x4fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix3x4fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix3x4fv", void>(p1, p2, p3, p4, p5); }
	static void glProgramUniformMatrix4x3fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<jni::array<jfloat>> p5, jint p6) { return call_static_method<"glProgramUniformMatrix4x3fv", void>(p1, p2, p3, p4, p5, p6); }
	static void glProgramUniformMatrix4x3fv(jint p1, jint p2, jint p3, jboolean p4, jni::ref<java::nio::FloatBuffer> p5) { return call_static_method<"glProgramUniformMatrix4x3fv", void>(p1, p2, p3, p4, p5); }
	static void glValidateProgramPipeline(jint p1) { return call_static_method<"glValidateProgramPipeline", void>(p1); }
	static jni::ref<java::lang::String> glGetProgramPipelineInfoLog(jint p1) { return call_static_method<"glGetProgramPipelineInfoLog", jni::ref<java::lang::String>>(p1); }
	static void glBindImageTexture(jint p1, jint p2, jint p3, jboolean p4, jint p5, jint p6, jint p7) { return call_static_method<"glBindImageTexture", void>(p1, p2, p3, p4, p5, p6, p7); }
	static void glGetBooleani_v(jint p1, jint p2, jni::ref<jni::array<jboolean>> p3, jint p4) { return call_static_method<"glGetBooleani_v", void>(p1, p2, p3, p4); }
	static void glGetBooleani_v(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetBooleani_v", void>(p1, p2, p3); }
	static void glMemoryBarrier(jint p1) { return call_static_method<"glMemoryBarrier", void>(p1); }
	static void glMemoryBarrierByRegion(jint p1) { return call_static_method<"glMemoryBarrierByRegion", void>(p1); }
	static void glTexStorage2DMultisample(jint p1, jint p2, jint p3, jint p4, jint p5, jboolean p6) { return call_static_method<"glTexStorage2DMultisample", void>(p1, p2, p3, p4, p5, p6); }
	static void glGetMultisamplefv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_static_method<"glGetMultisamplefv", void>(p1, p2, p3, p4); }
	static void glGetMultisamplefv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_static_method<"glGetMultisamplefv", void>(p1, p2, p3); }
	static void glSampleMaski(jint p1, jint p2) { return call_static_method<"glSampleMaski", void>(p1, p2); }
	static void glGetTexLevelParameteriv(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glGetTexLevelParameteriv", void>(p1, p2, p3, p4, p5); }
	static void glGetTexLevelParameteriv(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glGetTexLevelParameteriv", void>(p1, p2, p3, p4); }
	static void glGetTexLevelParameterfv(jint p1, jint p2, jint p3, jni::ref<jni::array<jfloat>> p4, jint p5) { return call_static_method<"glGetTexLevelParameterfv", void>(p1, p2, p3, p4, p5); }
	static void glGetTexLevelParameterfv(jint p1, jint p2, jint p3, jni::ref<java::nio::FloatBuffer> p4) { return call_static_method<"glGetTexLevelParameterfv", void>(p1, p2, p3, p4); }
	static void glBindVertexBuffer(jint p1, jint p2, jlong p3, jint p4) { return call_static_method<"glBindVertexBuffer", void>(p1, p2, p3, p4); }
	static void glVertexAttribFormat(jint p1, jint p2, jint p3, jboolean p4, jint p5) { return call_static_method<"glVertexAttribFormat", void>(p1, p2, p3, p4, p5); }
	static void glVertexAttribIFormat(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glVertexAttribIFormat", void>(p1, p2, p3, p4); }
	static void glVertexAttribBinding(jint p1, jint p2) { return call_static_method<"glVertexAttribBinding", void>(p1, p2); }
	static void glVertexBindingDivisor(jint p1, jint p2) { return call_static_method<"glVertexBindingDivisor", void>(p1, p2); }

protected:

	GLES31(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLES31
