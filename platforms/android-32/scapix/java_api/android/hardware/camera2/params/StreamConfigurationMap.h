// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::camera2::params { class StreamConfigurationMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::camera2::params::StreamConfigurationMap>
{
	static constexpr fixed_string class_name = "android/hardware/camera2/params/StreamConfigurationMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/util/Range.h>
#include <scapix/java_api/android/util/Size.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::camera2::params::StreamConfigurationMap : public jni::object_base<"android/hardware/camera2/params/StreamConfigurationMap",
	java::lang::Object>
{
public:

	jni::ref<jni::array<jint>> getOutputFormats() { return call_method<"getOutputFormats", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<jint>> getValidOutputFormatsForInput(jint inputFormat) { return call_method<"getValidOutputFormatsForInput", jni::ref<jni::array<jint>>>(inputFormat); }
	jni::ref<jni::array<jint>> getInputFormats() { return call_method<"getInputFormats", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<android::util::Size>> getInputSizes(jint format) { return call_method<"getInputSizes", jni::ref<jni::array<android::util::Size>>>(format); }
	jboolean isOutputSupportedFor(jint format) { return call_method<"isOutputSupportedFor", jboolean>(format); }
	static jboolean isOutputSupportedFor(jni::ref<java::lang::Class> klass) { return call_static_method<"isOutputSupportedFor", jboolean>(klass); }
	jboolean isOutputSupportedFor(jni::ref<android::view::Surface> surface) { return call_method<"isOutputSupportedFor", jboolean>(surface); }
	jni::ref<jni::array<android::util::Size>> getOutputSizes(jni::ref<java::lang::Class> klass) { return call_method<"getOutputSizes", jni::ref<jni::array<android::util::Size>>>(klass); }
	jni::ref<jni::array<android::util::Size>> getOutputSizes(jint format) { return call_method<"getOutputSizes", jni::ref<jni::array<android::util::Size>>>(format); }
	jni::ref<jni::array<android::util::Size>> getHighSpeedVideoSizes() { return call_method<"getHighSpeedVideoSizes", jni::ref<jni::array<android::util::Size>>>(); }
	jni::ref<jni::array<android::util::Range>> getHighSpeedVideoFpsRangesFor(jni::ref<android::util::Size> size) { return call_method<"getHighSpeedVideoFpsRangesFor", jni::ref<jni::array<android::util::Range>>>(size); }
	jni::ref<jni::array<android::util::Range>> getHighSpeedVideoFpsRanges() { return call_method<"getHighSpeedVideoFpsRanges", jni::ref<jni::array<android::util::Range>>>(); }
	jni::ref<jni::array<android::util::Size>> getHighSpeedVideoSizesFor(jni::ref<android::util::Range> fpsRange) { return call_method<"getHighSpeedVideoSizesFor", jni::ref<jni::array<android::util::Size>>>(fpsRange); }
	jni::ref<jni::array<android::util::Size>> getHighResolutionOutputSizes(jint format) { return call_method<"getHighResolutionOutputSizes", jni::ref<jni::array<android::util::Size>>>(format); }
	jlong getOutputMinFrameDuration(jint format, jni::ref<android::util::Size> size) { return call_method<"getOutputMinFrameDuration", jlong>(format, size); }
	jlong getOutputMinFrameDuration(jni::ref<java::lang::Class> klass, jni::ref<android::util::Size> size) { return call_method<"getOutputMinFrameDuration", jlong>(klass, size); }
	jlong getOutputStallDuration(jint format, jni::ref<android::util::Size> size) { return call_method<"getOutputStallDuration", jlong>(format, size); }
	jlong getOutputStallDuration(jni::ref<java::lang::Class> klass, jni::ref<android::util::Size> size) { return call_method<"getOutputStallDuration", jlong>(klass, size); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	StreamConfigurationMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_STREAMCONFIGURATIONMAP
