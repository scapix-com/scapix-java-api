// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_PROPERTY_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_PROPERTY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class Property; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::Property>
{
	static constexpr fixed_string class_name = "android/util/Property";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_PROPERTY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_PROPERTY)
#define SCAPIX_JAVA_API_ANDROID_UTIL_PROPERTY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::Property : public jni::object_base<"android/util/Property",
	java::lang::Object>
{
public:

	static jni::ref<android::util::Property> new_object(jni::ref<java::lang::Class> type, jni::ref<java::lang::String> name) { return base_::new_object(type, name); }
	static jni::ref<android::util::Property> of(jni::ref<java::lang::Class> hostType, jni::ref<java::lang::Class> valueType, jni::ref<java::lang::String> name) { return call_static_method<"of", jni::ref<android::util::Property>>(hostType, valueType, name); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	void set(jni::ref<java::lang::Object> object, jni::ref<java::lang::Object> value) { return call_method<"set", void>(object, value); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Class> getType() { return call_method<"getType", jni::ref<java::lang::Class>>(); }

protected:

	Property(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_PROPERTY
