// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class FragmentManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::FragmentManager>
{
	static constexpr fixed_string class_name = "android/app/FragmentManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/Fragment.h>
#include <scapix/java_api/android/app/Fragment_SavedState.h>
#include <scapix/java_api/android/app/FragmentManager_BackStackEntry.h>
#include <scapix/java_api/android/app/FragmentManager_FragmentLifecycleCallbacks.h>
#include <scapix/java_api/android/app/FragmentManager_OnBackStackChangedListener.h>
#include <scapix/java_api/android/app/FragmentTransaction.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::FragmentManager : public jni::object_base<"android/app/FragmentManager",
	java::lang::Object>
{
public:

	using OnBackStackChangedListener = FragmentManager_OnBackStackChangedListener;
	using FragmentLifecycleCallbacks = FragmentManager_FragmentLifecycleCallbacks;
	using BackStackEntry = FragmentManager_BackStackEntry;

	static jint POP_BACK_STACK_INCLUSIVE() { return get_static_field<"POP_BACK_STACK_INCLUSIVE", jint>(); }

	static jni::ref<android::app::FragmentManager> new_object() { return base_::new_object(); }
	jni::ref<android::app::FragmentTransaction> beginTransaction() { return call_method<"beginTransaction", jni::ref<android::app::FragmentTransaction>>(); }
	jboolean executePendingTransactions() { return call_method<"executePendingTransactions", jboolean>(); }
	jni::ref<android::app::Fragment> findFragmentById(jint p1) { return call_method<"findFragmentById", jni::ref<android::app::Fragment>>(p1); }
	jni::ref<android::app::Fragment> findFragmentByTag(jni::ref<java::lang::String> p1) { return call_method<"findFragmentByTag", jni::ref<android::app::Fragment>>(p1); }
	void popBackStack() { return call_method<"popBackStack", void>(); }
	jboolean popBackStackImmediate() { return call_method<"popBackStackImmediate", jboolean>(); }
	void popBackStack(jni::ref<java::lang::String> p1, jint p2) { return call_method<"popBackStack", void>(p1, p2); }
	jboolean popBackStackImmediate(jni::ref<java::lang::String> p1, jint p2) { return call_method<"popBackStackImmediate", jboolean>(p1, p2); }
	void popBackStack(jint p1, jint p2) { return call_method<"popBackStack", void>(p1, p2); }
	jboolean popBackStackImmediate(jint p1, jint p2) { return call_method<"popBackStackImmediate", jboolean>(p1, p2); }
	jint getBackStackEntryCount() { return call_method<"getBackStackEntryCount", jint>(); }
	jni::ref<android::app::FragmentManager_BackStackEntry> getBackStackEntryAt(jint p1) { return call_method<"getBackStackEntryAt", jni::ref<android::app::FragmentManager_BackStackEntry>>(p1); }
	void addOnBackStackChangedListener(jni::ref<android::app::FragmentManager_OnBackStackChangedListener> p1) { return call_method<"addOnBackStackChangedListener", void>(p1); }
	void removeOnBackStackChangedListener(jni::ref<android::app::FragmentManager_OnBackStackChangedListener> p1) { return call_method<"removeOnBackStackChangedListener", void>(p1); }
	void putFragment(jni::ref<android::os::Bundle> p1, jni::ref<java::lang::String> p2, jni::ref<android::app::Fragment> p3) { return call_method<"putFragment", void>(p1, p2, p3); }
	jni::ref<android::app::Fragment> getFragment(jni::ref<android::os::Bundle> p1, jni::ref<java::lang::String> p2) { return call_method<"getFragment", jni::ref<android::app::Fragment>>(p1, p2); }
	jni::ref<java::util::List> getFragments() { return call_method<"getFragments", jni::ref<java::util::List>>(); }
	jni::ref<android::app::Fragment_SavedState> saveFragmentInstanceState(jni::ref<android::app::Fragment> p1) { return call_method<"saveFragmentInstanceState", jni::ref<android::app::Fragment_SavedState>>(p1); }
	jboolean isDestroyed() { return call_method<"isDestroyed", jboolean>(); }
	void registerFragmentLifecycleCallbacks(jni::ref<android::app::FragmentManager_FragmentLifecycleCallbacks> p1, jboolean p2) { return call_method<"registerFragmentLifecycleCallbacks", void>(p1, p2); }
	void unregisterFragmentLifecycleCallbacks(jni::ref<android::app::FragmentManager_FragmentLifecycleCallbacks> p1) { return call_method<"unregisterFragmentLifecycleCallbacks", void>(p1); }
	jni::ref<android::app::Fragment> getPrimaryNavigationFragment() { return call_method<"getPrimaryNavigationFragment", jni::ref<android::app::Fragment>>(); }
	void dump(jni::ref<java::lang::String> p1, jni::ref<java::io::FileDescriptor> p2, jni::ref<java::io::PrintWriter> p3, jni::ref<jni::array<java::lang::String>> p4) { return call_method<"dump", void>(p1, p2, p3, p4); }
	static void enableDebugLogging(jboolean enabled) { return call_static_method<"enableDebugLogging", void>(enabled); }
	void invalidateOptionsMenu() { return call_method<"invalidateOptionsMenu", void>(); }
	jboolean isStateSaved() { return call_method<"isStateSaved", jboolean>(); }

protected:

	FragmentManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTMANAGER
