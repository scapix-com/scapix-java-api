// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ANIMATION_PROPERTYVALUESHOLDER_FWD
#define SCAPIX_JAVA_API_ANDROID_ANIMATION_PROPERTYVALUESHOLDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::animation { class PropertyValuesHolder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::animation::PropertyValuesHolder>
{
	static constexpr fixed_string class_name = "android/animation/PropertyValuesHolder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ANIMATION_PROPERTYVALUESHOLDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ANIMATION_PROPERTYVALUESHOLDER)
#define SCAPIX_JAVA_API_ANDROID_ANIMATION_PROPERTYVALUESHOLDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/animation/Keyframe.h>
#include <scapix/java_api/android/animation/TypeConverter.h>
#include <scapix/java_api/android/animation/TypeEvaluator.h>
#include <scapix/java_api/android/graphics/Path.h>
#include <scapix/java_api/android/util/Property.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::animation::PropertyValuesHolder : public jni::object_base<"android/animation/PropertyValuesHolder",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<android::animation::PropertyValuesHolder> ofInt(jni::ref<java::lang::String> propertyName, jni::ref<jni::array<jint>> values) { return call_static_method<"ofInt", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofInt(jni::ref<android::util::Property> property, jni::ref<jni::array<jint>> values) { return call_static_method<"ofInt", jni::ref<android::animation::PropertyValuesHolder>>(property, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofMultiInt(jni::ref<java::lang::String> propertyName, jni::ref<jni::array<jni::array<jint>>> values) { return call_static_method<"ofMultiInt", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofMultiInt(jni::ref<java::lang::String> propertyName, jni::ref<android::graphics::Path> path) { return call_static_method<"ofMultiInt", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, path); }
	static jni::ref<android::animation::PropertyValuesHolder> ofMultiInt(jni::ref<java::lang::String> propertyName, jni::ref<android::animation::TypeConverter> converter, jni::ref<android::animation::TypeEvaluator> evaluator, jni::ref<jni::array<java::lang::Object>> values) { return call_static_method<"ofMultiInt", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, converter, evaluator, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofMultiInt(jni::ref<java::lang::String> propertyName, jni::ref<android::animation::TypeConverter> converter, jni::ref<android::animation::TypeEvaluator> evaluator, jni::ref<jni::array<android::animation::Keyframe>> values) { return call_static_method<"ofMultiInt", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, converter, evaluator, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofFloat(jni::ref<java::lang::String> propertyName, jni::ref<jni::array<jfloat>> values) { return call_static_method<"ofFloat", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofFloat(jni::ref<android::util::Property> property, jni::ref<jni::array<jfloat>> values) { return call_static_method<"ofFloat", jni::ref<android::animation::PropertyValuesHolder>>(property, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofMultiFloat(jni::ref<java::lang::String> propertyName, jni::ref<jni::array<jni::array<jfloat>>> values) { return call_static_method<"ofMultiFloat", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofMultiFloat(jni::ref<java::lang::String> propertyName, jni::ref<android::graphics::Path> path) { return call_static_method<"ofMultiFloat", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, path); }
	static jni::ref<android::animation::PropertyValuesHolder> ofMultiFloat(jni::ref<java::lang::String> propertyName, jni::ref<android::animation::TypeConverter> converter, jni::ref<android::animation::TypeEvaluator> evaluator, jni::ref<jni::array<java::lang::Object>> values) { return call_static_method<"ofMultiFloat", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, converter, evaluator, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofMultiFloat(jni::ref<java::lang::String> propertyName, jni::ref<android::animation::TypeConverter> converter, jni::ref<android::animation::TypeEvaluator> evaluator, jni::ref<jni::array<android::animation::Keyframe>> values) { return call_static_method<"ofMultiFloat", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, converter, evaluator, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofObject(jni::ref<java::lang::String> propertyName, jni::ref<android::animation::TypeEvaluator> evaluator, jni::ref<jni::array<java::lang::Object>> values) { return call_static_method<"ofObject", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, evaluator, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofObject(jni::ref<java::lang::String> propertyName, jni::ref<android::animation::TypeConverter> converter, jni::ref<android::graphics::Path> path) { return call_static_method<"ofObject", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, converter, path); }
	static jni::ref<android::animation::PropertyValuesHolder> ofObject(jni::ref<android::util::Property> property, jni::ref<android::animation::TypeEvaluator> evaluator, jni::ref<jni::array<java::lang::Object>> values) { return call_static_method<"ofObject", jni::ref<android::animation::PropertyValuesHolder>>(property, evaluator, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofObject(jni::ref<android::util::Property> property, jni::ref<android::animation::TypeConverter> converter, jni::ref<android::animation::TypeEvaluator> evaluator, jni::ref<jni::array<java::lang::Object>> values) { return call_static_method<"ofObject", jni::ref<android::animation::PropertyValuesHolder>>(property, converter, evaluator, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofObject(jni::ref<android::util::Property> property, jni::ref<android::animation::TypeConverter> converter, jni::ref<android::graphics::Path> path) { return call_static_method<"ofObject", jni::ref<android::animation::PropertyValuesHolder>>(property, converter, path); }
	static jni::ref<android::animation::PropertyValuesHolder> ofKeyframe(jni::ref<java::lang::String> propertyName, jni::ref<jni::array<android::animation::Keyframe>> values) { return call_static_method<"ofKeyframe", jni::ref<android::animation::PropertyValuesHolder>>(propertyName, values); }
	static jni::ref<android::animation::PropertyValuesHolder> ofKeyframe(jni::ref<android::util::Property> property, jni::ref<jni::array<android::animation::Keyframe>> values) { return call_static_method<"ofKeyframe", jni::ref<android::animation::PropertyValuesHolder>>(property, values); }
	void setIntValues(jni::ref<jni::array<jint>> values) { return call_method<"setIntValues", void>(values); }
	void setFloatValues(jni::ref<jni::array<jfloat>> values) { return call_method<"setFloatValues", void>(values); }
	void setKeyframes(jni::ref<jni::array<android::animation::Keyframe>> values) { return call_method<"setKeyframes", void>(values); }
	void setObjectValues(jni::ref<jni::array<java::lang::Object>> values) { return call_method<"setObjectValues", void>(values); }
	void setConverter(jni::ref<android::animation::TypeConverter> converter) { return call_method<"setConverter", void>(converter); }
	jni::ref<android::animation::PropertyValuesHolder> clone() { return call_method<"clone", jni::ref<android::animation::PropertyValuesHolder>>(); }
	void setEvaluator(jni::ref<android::animation::TypeEvaluator> evaluator) { return call_method<"setEvaluator", void>(evaluator); }
	void setPropertyName(jni::ref<java::lang::String> propertyName) { return call_method<"setPropertyName", void>(propertyName); }
	void setProperty(jni::ref<android::util::Property> property) { return call_method<"setProperty", void>(property); }
	jni::ref<java::lang::String> getPropertyName() { return call_method<"getPropertyName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	PropertyValuesHolder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ANIMATION_PROPERTYVALUESHOLDER
