// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/database/sqlite/SQLiteClosable.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_DATABASE_CURSORWINDOW_FWD
#define SCAPIX_JAVA_API_ANDROID_DATABASE_CURSORWINDOW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::database { class CursorWindow; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::database::CursorWindow>
{
	static constexpr fixed_string class_name = "android/database/CursorWindow";
	using base_classes = std::tuple<scapix::java_api::android::database::sqlite::SQLiteClosable, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_CURSORWINDOW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_DATABASE_CURSORWINDOW)
#define SCAPIX_JAVA_API_ANDROID_DATABASE_CURSORWINDOW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/database/CharArrayBuffer.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::database::CursorWindow : public jni::object_base<"android/database/CursorWindow",
	android::database::sqlite::SQLiteClosable,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::database::CursorWindow> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	static jni::ref<android::database::CursorWindow> new_object(jni::ref<java::lang::String> name, jlong windowSizeBytes) { return base_::new_object(name, windowSizeBytes); }
	static jni::ref<android::database::CursorWindow> new_object(jboolean localWindow) { return base_::new_object(localWindow); }
	void clear() { return call_method<"clear", void>(); }
	jint getStartPosition() { return call_method<"getStartPosition", jint>(); }
	void setStartPosition(jint pos) { return call_method<"setStartPosition", void>(pos); }
	jint getNumRows() { return call_method<"getNumRows", jint>(); }
	jboolean setNumColumns(jint columnNum) { return call_method<"setNumColumns", jboolean>(columnNum); }
	jboolean allocRow() { return call_method<"allocRow", jboolean>(); }
	void freeLastRow() { return call_method<"freeLastRow", void>(); }
	jboolean isNull(jint row, jint column) { return call_method<"isNull", jboolean>(row, column); }
	jboolean isBlob(jint row, jint column) { return call_method<"isBlob", jboolean>(row, column); }
	jboolean isLong(jint row, jint column) { return call_method<"isLong", jboolean>(row, column); }
	jboolean isFloat(jint row, jint column) { return call_method<"isFloat", jboolean>(row, column); }
	jboolean isString(jint row, jint column) { return call_method<"isString", jboolean>(row, column); }
	jint getType(jint row, jint column) { return call_method<"getType", jint>(row, column); }
	jni::ref<jni::array<jbyte>> getBlob(jint row, jint column) { return call_method<"getBlob", jni::ref<jni::array<jbyte>>>(row, column); }
	jni::ref<java::lang::String> getString(jint row, jint column) { return call_method<"getString", jni::ref<java::lang::String>>(row, column); }
	void copyStringToBuffer(jint row, jint column, jni::ref<android::database::CharArrayBuffer> buffer) { return call_method<"copyStringToBuffer", void>(row, column, buffer); }
	jlong getLong(jint row, jint column) { return call_method<"getLong", jlong>(row, column); }
	jdouble getDouble(jint row, jint column) { return call_method<"getDouble", jdouble>(row, column); }
	jshort getShort(jint row, jint column) { return call_method<"getShort", jshort>(row, column); }
	jint getInt(jint row, jint column) { return call_method<"getInt", jint>(row, column); }
	jfloat getFloat(jint row, jint column) { return call_method<"getFloat", jfloat>(row, column); }
	jboolean putBlob(jni::ref<jni::array<jbyte>> value, jint row, jint column) { return call_method<"putBlob", jboolean>(value, row, column); }
	jboolean putString(jni::ref<java::lang::String> value, jint row, jint column) { return call_method<"putString", jboolean>(value, row, column); }
	jboolean putLong(jlong value, jint p2, jint row) { return call_method<"putLong", jboolean>(value, p2, row); }
	jboolean putDouble(jdouble value, jint p2, jint row) { return call_method<"putDouble", jboolean>(value, p2, row); }
	jboolean putNull(jint row, jint column) { return call_method<"putNull", jboolean>(row, column); }
	static jni::ref<android::database::CursorWindow> newFromParcel(jni::ref<android::os::Parcel> p) { return call_static_method<"newFromParcel", jni::ref<android::database::CursorWindow>>(p); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	CursorWindow(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_CURSORWINDOW
