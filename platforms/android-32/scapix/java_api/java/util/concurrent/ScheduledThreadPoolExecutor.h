// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/ThreadPoolExecutor.h>
#include <scapix/java_api/java/util/concurrent/ScheduledExecutorService.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ScheduledThreadPoolExecutor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ScheduledThreadPoolExecutor>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ScheduledThreadPoolExecutor";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::ThreadPoolExecutor, scapix::java_api::java::util::concurrent::ScheduledExecutorService>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/util/concurrent/RejectedExecutionHandler.h>
#include <scapix/java_api/java/util/concurrent/ScheduledFuture.h>
#include <scapix/java_api/java/util/concurrent/ThreadFactory.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::ScheduledThreadPoolExecutor : public jni::object_base<"java/util/concurrent/ScheduledThreadPoolExecutor",
	java::util::concurrent::ThreadPoolExecutor,
	java::util::concurrent::ScheduledExecutorService>
{
public:

	static jni::ref<java::util::concurrent::ScheduledThreadPoolExecutor> new_object(jint corePoolSize) { return base_::new_object(corePoolSize); }
	static jni::ref<java::util::concurrent::ScheduledThreadPoolExecutor> new_object(jint corePoolSize, jni::ref<java::util::concurrent::ThreadFactory> threadFactory) { return base_::new_object(corePoolSize, threadFactory); }
	static jni::ref<java::util::concurrent::ScheduledThreadPoolExecutor> new_object(jint corePoolSize, jni::ref<java::util::concurrent::RejectedExecutionHandler> handler) { return base_::new_object(corePoolSize, handler); }
	static jni::ref<java::util::concurrent::ScheduledThreadPoolExecutor> new_object(jint corePoolSize, jni::ref<java::util::concurrent::ThreadFactory> threadFactory, jni::ref<java::util::concurrent::RejectedExecutionHandler> handler) { return base_::new_object(corePoolSize, threadFactory, handler); }
	jni::ref<java::util::concurrent::ScheduledFuture> schedule(jni::ref<java::lang::Runnable> command, jlong delay, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"schedule", jni::ref<java::util::concurrent::ScheduledFuture>>(command, delay, p3); }
	jni::ref<java::util::concurrent::ScheduledFuture> schedule(jni::ref<java::util::concurrent::Callable> callable, jlong delay, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"schedule", jni::ref<java::util::concurrent::ScheduledFuture>>(callable, delay, p3); }
	jni::ref<java::util::concurrent::ScheduledFuture> scheduleAtFixedRate(jni::ref<java::lang::Runnable> command, jlong initialDelay, jlong p3, jni::ref<java::util::concurrent::TimeUnit> period) { return call_method<"scheduleAtFixedRate", jni::ref<java::util::concurrent::ScheduledFuture>>(command, initialDelay, p3, period); }
	jni::ref<java::util::concurrent::ScheduledFuture> scheduleWithFixedDelay(jni::ref<java::lang::Runnable> command, jlong initialDelay, jlong p3, jni::ref<java::util::concurrent::TimeUnit> delay) { return call_method<"scheduleWithFixedDelay", jni::ref<java::util::concurrent::ScheduledFuture>>(command, initialDelay, p3, delay); }
	void execute(jni::ref<java::lang::Runnable> command) { return call_method<"execute", void>(command); }
	jni::ref<java::util::concurrent::Future> submit(jni::ref<java::lang::Runnable> task) { return call_method<"submit", jni::ref<java::util::concurrent::Future>>(task); }
	jni::ref<java::util::concurrent::Future> submit(jni::ref<java::lang::Runnable> task, jni::ref<java::lang::Object> result) { return call_method<"submit", jni::ref<java::util::concurrent::Future>>(task, result); }
	jni::ref<java::util::concurrent::Future> submit(jni::ref<java::util::concurrent::Callable> task) { return call_method<"submit", jni::ref<java::util::concurrent::Future>>(task); }
	void setContinueExistingPeriodicTasksAfterShutdownPolicy(jboolean value) { return call_method<"setContinueExistingPeriodicTasksAfterShutdownPolicy", void>(value); }
	jboolean getContinueExistingPeriodicTasksAfterShutdownPolicy() { return call_method<"getContinueExistingPeriodicTasksAfterShutdownPolicy", jboolean>(); }
	void setExecuteExistingDelayedTasksAfterShutdownPolicy(jboolean value) { return call_method<"setExecuteExistingDelayedTasksAfterShutdownPolicy", void>(value); }
	jboolean getExecuteExistingDelayedTasksAfterShutdownPolicy() { return call_method<"getExecuteExistingDelayedTasksAfterShutdownPolicy", jboolean>(); }
	void setRemoveOnCancelPolicy(jboolean value) { return call_method<"setRemoveOnCancelPolicy", void>(value); }
	jboolean getRemoveOnCancelPolicy() { return call_method<"getRemoveOnCancelPolicy", jboolean>(); }
	void shutdown() { return call_method<"shutdown", void>(); }
	jni::ref<java::util::List> shutdownNow() { return call_method<"shutdownNow", jni::ref<java::util::List>>(); }
	jni::ref<java::util::concurrent::BlockingQueue> getQueue() { return call_method<"getQueue", jni::ref<java::util::concurrent::BlockingQueue>>(); }

protected:

	ScheduledThreadPoolExecutor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_SCHEDULEDTHREADPOOLEXECUTOR
