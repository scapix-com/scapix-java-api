// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class TransferQueue; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::TransferQueue>
{
	static constexpr fixed_string class_name = "java/util/concurrent/TransferQueue";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::BlockingQueue>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::TransferQueue : public jni::object_base<"java/util/concurrent/TransferQueue",
	java::lang::Object,
	java::util::concurrent::BlockingQueue>
{
public:

	jboolean tryTransfer(jni::ref<java::lang::Object> p1) { return call_method<"tryTransfer", jboolean>(p1); }
	void transfer(jni::ref<java::lang::Object> p1) { return call_method<"transfer", void>(p1); }
	jboolean tryTransfer(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"tryTransfer", jboolean>(p1, p2, p3); }
	jboolean hasWaitingConsumer() { return call_method<"hasWaitingConsumer", jboolean>(); }
	jint getWaitingConsumerCount() { return call_method<"getWaitingConsumerCount", jint>(); }

protected:

	TransferQueue(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TRANSFERQUEUE
