// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_PUBLISHER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_PUBLISHER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class Flow_Publisher; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::Flow_Publisher>
{
	static constexpr fixed_string class_name = "java/util/concurrent/Flow$Publisher";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_PUBLISHER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_PUBLISHER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_PUBLISHER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/Flow_Subscriber.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::Flow_Publisher : public jni::object_base<"java/util/concurrent/Flow$Publisher",
	java::lang::Object>
{
public:

	void subscribe(jni::ref<java::util::concurrent::Flow_Subscriber> p1) { return call_method<"subscribe", void>(p1); }

protected:

	Flow_Publisher(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_PUBLISHER
