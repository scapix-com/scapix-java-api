// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_JAR_PACK200_PACKER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_PACK200_PACKER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::jar { class Pack200_Packer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::jar::Pack200_Packer>
{
	static constexpr fixed_string class_name = "java/util/jar/Pack200$Packer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_PACK200_PACKER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_JAR_PACK200_PACKER)
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_PACK200_PACKER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/SortedMap.h>
#include <scapix/java_api/java/util/jar/JarFile.h>
#include <scapix/java_api/java/util/jar/JarInputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::jar::Pack200_Packer : public jni::object_base<"java/util/jar/Pack200$Packer",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> CLASS_ATTRIBUTE_PFX() { return get_static_field<"CLASS_ATTRIBUTE_PFX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CODE_ATTRIBUTE_PFX() { return get_static_field<"CODE_ATTRIBUTE_PFX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFLATE_HINT() { return get_static_field<"DEFLATE_HINT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EFFORT() { return get_static_field<"EFFORT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ERROR() { return get_static_field<"ERROR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FALSE() { return get_static_field<"FALSE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FIELD_ATTRIBUTE_PFX() { return get_static_field<"FIELD_ATTRIBUTE_PFX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> KEEP() { return get_static_field<"KEEP", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> KEEP_FILE_ORDER() { return get_static_field<"KEEP_FILE_ORDER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LATEST() { return get_static_field<"LATEST", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> METHOD_ATTRIBUTE_PFX() { return get_static_field<"METHOD_ATTRIBUTE_PFX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MODIFICATION_TIME() { return get_static_field<"MODIFICATION_TIME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PASS() { return get_static_field<"PASS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PASS_FILE_PFX() { return get_static_field<"PASS_FILE_PFX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROGRESS() { return get_static_field<"PROGRESS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SEGMENT_LIMIT() { return get_static_field<"SEGMENT_LIMIT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> STRIP() { return get_static_field<"STRIP", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TRUE() { return get_static_field<"TRUE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNKNOWN_ATTRIBUTE() { return get_static_field<"UNKNOWN_ATTRIBUTE", jni::ref<java::lang::String>>(); }

	jni::ref<java::util::SortedMap> properties() { return call_method<"properties", jni::ref<java::util::SortedMap>>(); }
	void pack(jni::ref<java::util::jar::JarFile> p1, jni::ref<java::io::OutputStream> p2) { return call_method<"pack", void>(p1, p2); }
	void pack(jni::ref<java::util::jar::JarInputStream> p1, jni::ref<java::io::OutputStream> p2) { return call_method<"pack", void>(p1, p2); }
	void addPropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> listener) { return call_method<"addPropertyChangeListener", void>(listener); }
	void removePropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> listener) { return call_method<"removePropertyChangeListener", void>(listener); }

protected:

	Pack200_Packer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_PACK200_PACKER
