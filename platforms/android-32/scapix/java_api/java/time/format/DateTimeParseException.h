// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/time/DateTimeException.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEPARSEEXCEPTION_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEPARSEEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::format { class DateTimeParseException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::format::DateTimeParseException>
{
	static constexpr fixed_string class_name = "java/time/format/DateTimeParseException";
	using base_classes = std::tuple<scapix::java_api::java::time::DateTimeException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEPARSEEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEPARSEEXCEPTION)
#define SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEPARSEEXCEPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::format::DateTimeParseException : public jni::object_base<"java/time/format/DateTimeParseException",
	java::time::DateTimeException>
{
public:

	static jni::ref<java::time::format::DateTimeParseException> new_object(jni::ref<java::lang::String> message, jni::ref<java::lang::CharSequence> parsedData, jint errorIndex) { return base_::new_object(message, parsedData, errorIndex); }
	static jni::ref<java::time::format::DateTimeParseException> new_object(jni::ref<java::lang::String> message, jni::ref<java::lang::CharSequence> parsedData, jint errorIndex, jni::ref<java::lang::Throwable> cause) { return base_::new_object(message, parsedData, errorIndex, cause); }
	jni::ref<java::lang::String> getParsedString() { return call_method<"getParsedString", jni::ref<java::lang::String>>(); }
	jint getErrorIndex() { return call_method<"getErrorIndex", jint>(); }

protected:

	DateTimeParseException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEPARSEEXCEPTION
