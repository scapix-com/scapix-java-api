// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/xml/transform/TransformerFactory.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_SAX_SAXTRANSFORMERFACTORY_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_SAX_SAXTRANSFORMERFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::transform::sax { class SAXTransformerFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::transform::sax::SAXTransformerFactory>
{
	static constexpr fixed_string class_name = "javax/xml/transform/sax/SAXTransformerFactory";
	using base_classes = std::tuple<scapix::java_api::javax::xml::transform::TransformerFactory>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_SAX_SAXTRANSFORMERFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_SAX_SAXTRANSFORMERFACTORY)
#define SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_SAX_SAXTRANSFORMERFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/transform/Templates.h>
#include <scapix/java_api/javax/xml/transform/sax/TemplatesHandler.h>
#include <scapix/java_api/javax/xml/transform/sax/TransformerHandler.h>
#include <scapix/java_api/org/xml/sax/XMLFilter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::transform::sax::SAXTransformerFactory : public jni::object_base<"javax/xml/transform/sax/SAXTransformerFactory",
	javax::xml::transform::TransformerFactory>
{
public:

	static jni::ref<java::lang::String> FEATURE() { return get_static_field<"FEATURE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FEATURE_XMLFILTER() { return get_static_field<"FEATURE_XMLFILTER", jni::ref<java::lang::String>>(); }

	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(p1); }
	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler(jni::ref<javax::xml::transform::Templates> p1) { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(p1); }
	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler() { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(); }
	jni::ref<javax::xml::transform::sax::TemplatesHandler> newTemplatesHandler() { return call_method<"newTemplatesHandler", jni::ref<javax::xml::transform::sax::TemplatesHandler>>(); }
	jni::ref<org::xml::sax::XMLFilter> newXMLFilter(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newXMLFilter", jni::ref<org::xml::sax::XMLFilter>>(p1); }
	jni::ref<org::xml::sax::XMLFilter> newXMLFilter(jni::ref<javax::xml::transform::Templates> p1) { return call_method<"newXMLFilter", jni::ref<org::xml::sax::XMLFilter>>(p1); }

protected:

	SAXTransformerFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_SAX_SAXTRANSFORMERFACTORY
