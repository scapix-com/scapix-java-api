// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class CyclicBarrier; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::CyclicBarrier>
{
	static constexpr fixed_string class_name = "java/util/concurrent/CyclicBarrier";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CYCLICBARRIER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CYCLICBARRIER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::CyclicBarrier : public jni::object_base<"java/util/concurrent/CyclicBarrier",
	java::lang::Object>
{
public:

	static jni::ref<java::util::concurrent::CyclicBarrier> new_object(jint parties, jni::ref<java::lang::Runnable> barrierAction) { return base_::new_object(parties, barrierAction); }
	static jni::ref<java::util::concurrent::CyclicBarrier> new_object(jint parties) { return base_::new_object(parties); }
	jint getParties() { return call_method<"getParties", jint>(); }
	jint await() { return call_method<"await", jint>(); }
	jint await(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"await", jint>(timeout, p2); }
	jboolean isBroken() { return call_method<"isBroken", jboolean>(); }
	void reset() { return call_method<"reset", void>(); }
	jint getNumberWaiting() { return call_method<"getNumberWaiting", jint>(); }

protected:

	CyclicBarrier(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CYCLICBARRIER
