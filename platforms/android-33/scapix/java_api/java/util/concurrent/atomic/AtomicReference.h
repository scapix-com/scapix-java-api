// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::atomic { class AtomicReference; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::atomic::AtomicReference>
{
	static constexpr fixed_string class_name = "java/util/concurrent/atomic/AtomicReference";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/UnaryOperator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::atomic::AtomicReference : public jni::object_base<"java/util/concurrent/atomic/AtomicReference",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::util::concurrent::atomic::AtomicReference> new_object(jni::ref<java::lang::Object> initialValue) { return base_::new_object(initialValue); }
	static jni::ref<java::util::concurrent::atomic::AtomicReference> new_object() { return base_::new_object(); }
	jni::ref<java::lang::Object> get() { return call_method<"get", jni::ref<java::lang::Object>>(); }
	void set(jni::ref<java::lang::Object> newValue) { return call_method<"set", void>(newValue); }
	void lazySet(jni::ref<java::lang::Object> newValue) { return call_method<"lazySet", void>(newValue); }
	jboolean compareAndSet(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"compareAndSet", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSet(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"weakCompareAndSet", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSetPlain(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"weakCompareAndSetPlain", jboolean>(expectedValue, newValue); }
	jni::ref<java::lang::Object> getAndSet(jni::ref<java::lang::Object> newValue) { return call_method<"getAndSet", jni::ref<java::lang::Object>>(newValue); }
	jni::ref<java::lang::Object> getAndUpdate(jni::ref<java::util::function::UnaryOperator> updateFunction) { return call_method<"getAndUpdate", jni::ref<java::lang::Object>>(updateFunction); }
	jni::ref<java::lang::Object> updateAndGet(jni::ref<java::util::function::UnaryOperator> updateFunction) { return call_method<"updateAndGet", jni::ref<java::lang::Object>>(updateFunction); }
	jni::ref<java::lang::Object> getAndAccumulate(jni::ref<java::lang::Object> x, jni::ref<java::util::function::BinaryOperator> accumulatorFunction) { return call_method<"getAndAccumulate", jni::ref<java::lang::Object>>(x, accumulatorFunction); }
	jni::ref<java::lang::Object> accumulateAndGet(jni::ref<java::lang::Object> x, jni::ref<java::util::function::BinaryOperator> accumulatorFunction) { return call_method<"accumulateAndGet", jni::ref<java::lang::Object>>(x, accumulatorFunction); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Object> getPlain() { return call_method<"getPlain", jni::ref<java::lang::Object>>(); }
	void setPlain(jni::ref<java::lang::Object> newValue) { return call_method<"setPlain", void>(newValue); }
	jni::ref<java::lang::Object> getOpaque() { return call_method<"getOpaque", jni::ref<java::lang::Object>>(); }
	void setOpaque(jni::ref<java::lang::Object> newValue) { return call_method<"setOpaque", void>(newValue); }
	jni::ref<java::lang::Object> getAcquire() { return call_method<"getAcquire", jni::ref<java::lang::Object>>(); }
	void setRelease(jni::ref<java::lang::Object> newValue) { return call_method<"setRelease", void>(newValue); }
	jni::ref<java::lang::Object> compareAndExchange(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"compareAndExchange", jni::ref<java::lang::Object>>(expectedValue, newValue); }
	jni::ref<java::lang::Object> compareAndExchangeAcquire(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"compareAndExchangeAcquire", jni::ref<java::lang::Object>>(expectedValue, newValue); }
	jni::ref<java::lang::Object> compareAndExchangeRelease(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"compareAndExchangeRelease", jni::ref<java::lang::Object>>(expectedValue, newValue); }
	jboolean weakCompareAndSetVolatile(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"weakCompareAndSetVolatile", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSetAcquire(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"weakCompareAndSetAcquire", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSetRelease(jni::ref<java::lang::Object> expectedValue, jni::ref<java::lang::Object> newValue) { return call_method<"weakCompareAndSetRelease", jboolean>(expectedValue, newValue); }

protected:

	AtomicReference(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCE
