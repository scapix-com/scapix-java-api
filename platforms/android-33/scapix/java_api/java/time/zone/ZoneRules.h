// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_ZONE_ZONERULES_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_ZONE_ZONERULES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::zone { class ZoneRules; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::zone::ZoneRules>
{
	static constexpr fixed_string class_name = "java/time/zone/ZoneRules";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_ZONE_ZONERULES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_ZONE_ZONERULES)
#define SCAPIX_JAVA_API_JAVA_TIME_ZONE_ZONERULES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Duration.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/zone/ZoneOffsetTransition.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::zone::ZoneRules : public jni::object_base<"java/time/zone/ZoneRules",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::time::zone::ZoneRules> of(jni::ref<java::time::ZoneOffset> baseStandardOffset, jni::ref<java::time::ZoneOffset> baseWallOffset, jni::ref<java::util::List> standardOffsetTransitionList, jni::ref<java::util::List> transitionList, jni::ref<java::util::List> lastRules) { return call_static_method<"of", jni::ref<java::time::zone::ZoneRules>>(baseStandardOffset, baseWallOffset, standardOffsetTransitionList, transitionList, lastRules); }
	static jni::ref<java::time::zone::ZoneRules> of(jni::ref<java::time::ZoneOffset> offset) { return call_static_method<"of", jni::ref<java::time::zone::ZoneRules>>(offset); }
	jboolean isFixedOffset() { return call_method<"isFixedOffset", jboolean>(); }
	jni::ref<java::time::ZoneOffset> getOffset(jni::ref<java::time::Instant> instant) { return call_method<"getOffset", jni::ref<java::time::ZoneOffset>>(instant); }
	jni::ref<java::time::ZoneOffset> getOffset(jni::ref<java::time::LocalDateTime> localDateTime) { return call_method<"getOffset", jni::ref<java::time::ZoneOffset>>(localDateTime); }
	jni::ref<java::util::List> getValidOffsets(jni::ref<java::time::LocalDateTime> localDateTime) { return call_method<"getValidOffsets", jni::ref<java::util::List>>(localDateTime); }
	jni::ref<java::time::zone::ZoneOffsetTransition> getTransition(jni::ref<java::time::LocalDateTime> localDateTime) { return call_method<"getTransition", jni::ref<java::time::zone::ZoneOffsetTransition>>(localDateTime); }
	jni::ref<java::time::ZoneOffset> getStandardOffset(jni::ref<java::time::Instant> instant) { return call_method<"getStandardOffset", jni::ref<java::time::ZoneOffset>>(instant); }
	jni::ref<java::time::Duration> getDaylightSavings(jni::ref<java::time::Instant> instant) { return call_method<"getDaylightSavings", jni::ref<java::time::Duration>>(instant); }
	jboolean isDaylightSavings(jni::ref<java::time::Instant> instant) { return call_method<"isDaylightSavings", jboolean>(instant); }
	jboolean isValidOffset(jni::ref<java::time::LocalDateTime> localDateTime, jni::ref<java::time::ZoneOffset> offset) { return call_method<"isValidOffset", jboolean>(localDateTime, offset); }
	jni::ref<java::time::zone::ZoneOffsetTransition> nextTransition(jni::ref<java::time::Instant> instant) { return call_method<"nextTransition", jni::ref<java::time::zone::ZoneOffsetTransition>>(instant); }
	jni::ref<java::time::zone::ZoneOffsetTransition> previousTransition(jni::ref<java::time::Instant> instant) { return call_method<"previousTransition", jni::ref<java::time::zone::ZoneOffsetTransition>>(instant); }
	jni::ref<java::util::List> getTransitions() { return call_method<"getTransitions", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getTransitionRules() { return call_method<"getTransitionRules", jni::ref<java::util::List>>(); }
	jboolean equals(jni::ref<java::lang::Object> otherRules) { return call_method<"equals", jboolean>(otherRules); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ZoneRules(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_ZONE_ZONERULES
