// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_MATH_MATHCONTEXT_FWD
#define SCAPIX_JAVA_API_JAVA_MATH_MATHCONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::math { class MathContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::math::MathContext>
{
	static constexpr fixed_string class_name = "java/math/MathContext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_MATH_MATHCONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_MATH_MATHCONTEXT)
#define SCAPIX_JAVA_API_JAVA_MATH_MATHCONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/RoundingMode.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::math::MathContext : public jni::object_base<"java/math/MathContext",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::math::MathContext> DECIMAL128() { return get_static_field<"DECIMAL128", jni::ref<java::math::MathContext>>(); }
	static jni::ref<java::math::MathContext> DECIMAL32() { return get_static_field<"DECIMAL32", jni::ref<java::math::MathContext>>(); }
	static jni::ref<java::math::MathContext> DECIMAL64() { return get_static_field<"DECIMAL64", jni::ref<java::math::MathContext>>(); }
	static jni::ref<java::math::MathContext> UNLIMITED() { return get_static_field<"UNLIMITED", jni::ref<java::math::MathContext>>(); }

	static jni::ref<java::math::MathContext> new_object(jint setPrecision) { return base_::new_object(setPrecision); }
	static jni::ref<java::math::MathContext> new_object(jint setPrecision, jni::ref<java::math::RoundingMode> setRoundingMode) { return base_::new_object(setPrecision, setRoundingMode); }
	static jni::ref<java::math::MathContext> new_object(jni::ref<java::lang::String> val) { return base_::new_object(val); }
	jint getPrecision() { return call_method<"getPrecision", jint>(); }
	jni::ref<java::math::RoundingMode> getRoundingMode() { return call_method<"getRoundingMode", jni::ref<java::math::RoundingMode>>(); }
	jboolean equals(jni::ref<java::lang::Object> x) { return call_method<"equals", jboolean>(x); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	MathContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_MATH_MATHCONTEXT
