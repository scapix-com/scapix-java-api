// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_TEXTDIRECTIONHEURISTIC_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_TEXTDIRECTIONHEURISTIC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class TextDirectionHeuristic; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::TextDirectionHeuristic>
{
	static constexpr fixed_string class_name = "android/text/TextDirectionHeuristic";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_TEXTDIRECTIONHEURISTIC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_TEXTDIRECTIONHEURISTIC)
#define SCAPIX_JAVA_API_ANDROID_TEXT_TEXTDIRECTIONHEURISTIC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::TextDirectionHeuristic : public jni::object_base<"android/text/TextDirectionHeuristic",
	java::lang::Object>
{
public:

	jboolean isRtl(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"isRtl", jboolean>(p1, p2, p3); }
	jboolean isRtl(jni::ref<java::lang::CharSequence> p1, jint p2, jint p3) { return call_method<"isRtl", jboolean>(p1, p2, p3); }

protected:

	TextDirectionHeuristic(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_TEXTDIRECTIONHEURISTIC
