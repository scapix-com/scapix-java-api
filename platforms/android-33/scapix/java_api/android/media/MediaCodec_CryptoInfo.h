// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaCodec_CryptoInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaCodec_CryptoInfo>
{
	static constexpr fixed_string class_name = "android/media/MediaCodec$CryptoInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/MediaCodec_CryptoInfo_Pattern.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaCodec_CryptoInfo : public jni::object_base<"android/media/MediaCodec$CryptoInfo",
	java::lang::Object>
{
public:

	using Pattern = MediaCodec_CryptoInfo_Pattern;

	jni::ref<jni::array<jbyte>> iv() { return get_field<"iv", jni::ref<jni::array<jbyte>>>(); }
	void iv(jni::ref<jni::array<jbyte>> v) { set_field<"iv", jni::ref<jni::array<jbyte>>>(v); }
	jni::ref<jni::array<jbyte>> key() { return get_field<"key", jni::ref<jni::array<jbyte>>>(); }
	void key(jni::ref<jni::array<jbyte>> v) { set_field<"key", jni::ref<jni::array<jbyte>>>(v); }
	jint mode() { return get_field<"mode", jint>(); }
	void mode(jint v) { set_field<"mode", jint>(v); }
	jni::ref<jni::array<jint>> numBytesOfClearData() { return get_field<"numBytesOfClearData", jni::ref<jni::array<jint>>>(); }
	void numBytesOfClearData(jni::ref<jni::array<jint>> v) { set_field<"numBytesOfClearData", jni::ref<jni::array<jint>>>(v); }
	jni::ref<jni::array<jint>> numBytesOfEncryptedData() { return get_field<"numBytesOfEncryptedData", jni::ref<jni::array<jint>>>(); }
	void numBytesOfEncryptedData(jni::ref<jni::array<jint>> v) { set_field<"numBytesOfEncryptedData", jni::ref<jni::array<jint>>>(v); }
	jint numSubSamples() { return get_field<"numSubSamples", jint>(); }
	void numSubSamples(jint v) { set_field<"numSubSamples", jint>(v); }

	static jni::ref<android::media::MediaCodec_CryptoInfo> new_object() { return base_::new_object(); }
	void set(jint newNumSubSamples, jni::ref<jni::array<jint>> newNumBytesOfClearData, jni::ref<jni::array<jint>> newNumBytesOfEncryptedData, jni::ref<jni::array<jbyte>> newKey, jni::ref<jni::array<jbyte>> newIV, jint newMode) { return call_method<"set", void>(newNumSubSamples, newNumBytesOfClearData, newNumBytesOfEncryptedData, newKey, newIV, newMode); }
	jni::ref<android::media::MediaCodec_CryptoInfo_Pattern> getPattern() { return call_method<"getPattern", jni::ref<android::media::MediaCodec_CryptoInfo_Pattern>>(); }
	void setPattern(jni::ref<android::media::MediaCodec_CryptoInfo_Pattern> newPattern) { return call_method<"setPattern", void>(newPattern); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	MediaCodec_CryptoInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CRYPTOINFO
