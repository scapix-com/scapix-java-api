// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/media/metrics/Event.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKERROREVENT_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKERROREVENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::metrics { class PlaybackErrorEvent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::metrics::PlaybackErrorEvent>
{
	static constexpr fixed_string class_name = "android/media/metrics/PlaybackErrorEvent";
	using base_classes = std::tuple<scapix::java_api::android::media::metrics::Event, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKERROREVENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKERROREVENT)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKERROREVENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/media/metrics/PlaybackErrorEvent_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::metrics::PlaybackErrorEvent : public jni::object_base<"android/media/metrics/PlaybackErrorEvent",
	android::media::metrics::Event,
	android::os::Parcelable>
{
public:

	using Builder = PlaybackErrorEvent_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint ERROR_AUDIO_TRACK_INIT_FAILED() { return get_static_field<"ERROR_AUDIO_TRACK_INIT_FAILED", jint>(); }
	static jint ERROR_AUDIO_TRACK_OTHER() { return get_static_field<"ERROR_AUDIO_TRACK_OTHER", jint>(); }
	static jint ERROR_AUDIO_TRACK_WRITE_FAILED() { return get_static_field<"ERROR_AUDIO_TRACK_WRITE_FAILED", jint>(); }
	static jint ERROR_DECODER_INIT_FAILED() { return get_static_field<"ERROR_DECODER_INIT_FAILED", jint>(); }
	static jint ERROR_DECODING_FAILED() { return get_static_field<"ERROR_DECODING_FAILED", jint>(); }
	static jint ERROR_DECODING_FORMAT_EXCEEDS_CAPABILITIES() { return get_static_field<"ERROR_DECODING_FORMAT_EXCEEDS_CAPABILITIES", jint>(); }
	static jint ERROR_DECODING_FORMAT_UNSUPPORTED() { return get_static_field<"ERROR_DECODING_FORMAT_UNSUPPORTED", jint>(); }
	static jint ERROR_DECODING_OTHER() { return get_static_field<"ERROR_DECODING_OTHER", jint>(); }
	static jint ERROR_DRM_CONTENT_ERROR() { return get_static_field<"ERROR_DRM_CONTENT_ERROR", jint>(); }
	static jint ERROR_DRM_DEVICE_REVOKED() { return get_static_field<"ERROR_DRM_DEVICE_REVOKED", jint>(); }
	static jint ERROR_DRM_DISALLOWED_OPERATION() { return get_static_field<"ERROR_DRM_DISALLOWED_OPERATION", jint>(); }
	static jint ERROR_DRM_LICENSE_ACQUISITION_FAILED() { return get_static_field<"ERROR_DRM_LICENSE_ACQUISITION_FAILED", jint>(); }
	static jint ERROR_DRM_OTHER() { return get_static_field<"ERROR_DRM_OTHER", jint>(); }
	static jint ERROR_DRM_PROVISIONING_FAILED() { return get_static_field<"ERROR_DRM_PROVISIONING_FAILED", jint>(); }
	static jint ERROR_DRM_SCHEME_UNSUPPORTED() { return get_static_field<"ERROR_DRM_SCHEME_UNSUPPORTED", jint>(); }
	static jint ERROR_DRM_SYSTEM_ERROR() { return get_static_field<"ERROR_DRM_SYSTEM_ERROR", jint>(); }
	static jint ERROR_IO_BAD_HTTP_STATUS() { return get_static_field<"ERROR_IO_BAD_HTTP_STATUS", jint>(); }
	static jint ERROR_IO_CONNECTION_CLOSED() { return get_static_field<"ERROR_IO_CONNECTION_CLOSED", jint>(); }
	static jint ERROR_IO_CONNECTION_TIMEOUT() { return get_static_field<"ERROR_IO_CONNECTION_TIMEOUT", jint>(); }
	static jint ERROR_IO_DNS_FAILED() { return get_static_field<"ERROR_IO_DNS_FAILED", jint>(); }
	static jint ERROR_IO_FILE_NOT_FOUND() { return get_static_field<"ERROR_IO_FILE_NOT_FOUND", jint>(); }
	static jint ERROR_IO_NETWORK_CONNECTION_FAILED() { return get_static_field<"ERROR_IO_NETWORK_CONNECTION_FAILED", jint>(); }
	static jint ERROR_IO_NETWORK_UNAVAILABLE() { return get_static_field<"ERROR_IO_NETWORK_UNAVAILABLE", jint>(); }
	static jint ERROR_IO_NO_PERMISSION() { return get_static_field<"ERROR_IO_NO_PERMISSION", jint>(); }
	static jint ERROR_IO_OTHER() { return get_static_field<"ERROR_IO_OTHER", jint>(); }
	static jint ERROR_OTHER() { return get_static_field<"ERROR_OTHER", jint>(); }
	static jint ERROR_PARSING_CONTAINER_MALFORMED() { return get_static_field<"ERROR_PARSING_CONTAINER_MALFORMED", jint>(); }
	static jint ERROR_PARSING_CONTAINER_UNSUPPORTED() { return get_static_field<"ERROR_PARSING_CONTAINER_UNSUPPORTED", jint>(); }
	static jint ERROR_PARSING_MANIFEST_MALFORMED() { return get_static_field<"ERROR_PARSING_MANIFEST_MALFORMED", jint>(); }
	static jint ERROR_PARSING_MANIFEST_UNSUPPORTED() { return get_static_field<"ERROR_PARSING_MANIFEST_UNSUPPORTED", jint>(); }
	static jint ERROR_PARSING_OTHER() { return get_static_field<"ERROR_PARSING_OTHER", jint>(); }
	static jint ERROR_PLAYER_BEHIND_LIVE_WINDOW() { return get_static_field<"ERROR_PLAYER_BEHIND_LIVE_WINDOW", jint>(); }
	static jint ERROR_PLAYER_OTHER() { return get_static_field<"ERROR_PLAYER_OTHER", jint>(); }
	static jint ERROR_PLAYER_REMOTE() { return get_static_field<"ERROR_PLAYER_REMOTE", jint>(); }
	static jint ERROR_RUNTIME() { return get_static_field<"ERROR_RUNTIME", jint>(); }
	static jint ERROR_UNKNOWN() { return get_static_field<"ERROR_UNKNOWN", jint>(); }

	jint getErrorCode() { return call_method<"getErrorCode", jint>(); }
	jint getSubErrorCode() { return call_method<"getSubErrorCode", jint>(); }
	jlong getTimeSinceCreatedMillis() { return call_method<"getTimeSinceCreatedMillis", jlong>(); }
	jni::ref<android::os::Bundle> getMetricsBundle() { return call_method<"getMetricsBundle", jni::ref<android::os::Bundle>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }

protected:

	PlaybackErrorEvent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKERROREVENT
