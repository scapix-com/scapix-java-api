// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_MEDIAMETRICSMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_MEDIAMETRICSMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::metrics { class MediaMetricsManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::metrics::MediaMetricsManager>
{
	static constexpr fixed_string class_name = "android/media/metrics/MediaMetricsManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_MEDIAMETRICSMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_MEDIAMETRICSMANAGER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_MEDIAMETRICSMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/metrics/BundleSession.h>
#include <scapix/java_api/android/media/metrics/EditingSession.h>
#include <scapix/java_api/android/media/metrics/PlaybackSession.h>
#include <scapix/java_api/android/media/metrics/RecordingSession.h>
#include <scapix/java_api/android/media/metrics/TranscodingSession.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::metrics::MediaMetricsManager : public jni::object_base<"android/media/metrics/MediaMetricsManager",
	java::lang::Object>
{
public:

	static jlong INVALID_TIMESTAMP() { return get_static_field<"INVALID_TIMESTAMP", jlong>(); }

	jni::ref<android::media::metrics::PlaybackSession> createPlaybackSession() { return call_method<"createPlaybackSession", jni::ref<android::media::metrics::PlaybackSession>>(); }
	jni::ref<android::media::metrics::RecordingSession> createRecordingSession() { return call_method<"createRecordingSession", jni::ref<android::media::metrics::RecordingSession>>(); }
	jni::ref<android::media::metrics::TranscodingSession> createTranscodingSession() { return call_method<"createTranscodingSession", jni::ref<android::media::metrics::TranscodingSession>>(); }
	jni::ref<android::media::metrics::EditingSession> createEditingSession() { return call_method<"createEditingSession", jni::ref<android::media::metrics::EditingSession>>(); }
	jni::ref<android::media::metrics::BundleSession> createBundleSession() { return call_method<"createBundleSession", jni::ref<android::media::metrics::BundleSession>>(); }
	void releaseSessionId(jni::ref<java::lang::String> sessionId) { return call_method<"releaseSessionId", void>(sessionId); }

protected:

	MediaMetricsManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_MEDIAMETRICSMANAGER
