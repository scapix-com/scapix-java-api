// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/IllegalStateException.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaCodec_CodecException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaCodec_CodecException>
{
	static constexpr fixed_string class_name = "android/media/MediaCodec$CodecException";
	using base_classes = std::tuple<scapix::java_api::java::lang::IllegalStateException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaCodec_CodecException : public jni::object_base<"android/media/MediaCodec$CodecException",
	java::lang::IllegalStateException>
{
public:

	static jint ERROR_INSUFFICIENT_RESOURCE() { return get_static_field<"ERROR_INSUFFICIENT_RESOURCE", jint>(); }
	static jint ERROR_RECLAIMED() { return get_static_field<"ERROR_RECLAIMED", jint>(); }

	jboolean isTransient() { return call_method<"isTransient", jboolean>(); }
	jboolean isRecoverable() { return call_method<"isRecoverable", jboolean>(); }
	jint getErrorCode() { return call_method<"getErrorCode", jint>(); }
	jni::ref<java::lang::String> getDiagnosticInfo() { return call_method<"getDiagnosticInfo", jni::ref<java::lang::String>>(); }

protected:

	MediaCodec_CodecException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_CODECEXCEPTION
