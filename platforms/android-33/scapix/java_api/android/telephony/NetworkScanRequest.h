// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKSCANREQUEST_FWD
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKSCANREQUEST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telephony { class NetworkScanRequest; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telephony::NetworkScanRequest>
{
	static constexpr fixed_string class_name = "android/telephony/NetworkScanRequest";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKSCANREQUEST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKSCANREQUEST)
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKSCANREQUEST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/telephony/RadioAccessSpecifier.h>
#include <scapix/java_api/java/util/ArrayList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telephony::NetworkScanRequest : public jni::object_base<"android/telephony/NetworkScanRequest",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint SCAN_TYPE_ONE_SHOT() { return get_static_field<"SCAN_TYPE_ONE_SHOT", jint>(); }
	static jint SCAN_TYPE_PERIODIC() { return get_static_field<"SCAN_TYPE_PERIODIC", jint>(); }

	static jni::ref<android::telephony::NetworkScanRequest> new_object(jint scanType, jni::ref<jni::array<android::telephony::RadioAccessSpecifier>> specifiers, jint searchPeriodicity, jint maxSearchTime, jboolean incrementalResults, jint incrementalResultsPeriodicity, jni::ref<java::util::ArrayList> mccMncs) { return base_::new_object(scanType, specifiers, searchPeriodicity, maxSearchTime, incrementalResults, incrementalResultsPeriodicity, mccMncs); }
	jint getScanType() { return call_method<"getScanType", jint>(); }
	jint getSearchPeriodicity() { return call_method<"getSearchPeriodicity", jint>(); }
	jint getMaxSearchTime() { return call_method<"getMaxSearchTime", jint>(); }
	jboolean getIncrementalResults() { return call_method<"getIncrementalResults", jboolean>(); }
	jint getIncrementalResultsPeriodicity() { return call_method<"getIncrementalResultsPeriodicity", jint>(); }
	jni::ref<jni::array<android::telephony::RadioAccessSpecifier>> getSpecifiers() { return call_method<"getSpecifiers", jni::ref<jni::array<android::telephony::RadioAccessSpecifier>>>(); }
	jni::ref<java::util::ArrayList> getPlmns() { return call_method<"getPlmns", jni::ref<java::util::ArrayList>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	NetworkScanRequest(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKSCANREQUEST
