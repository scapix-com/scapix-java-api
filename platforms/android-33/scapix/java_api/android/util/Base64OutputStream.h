// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterOutputStream.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_BASE64OUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_BASE64OUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class Base64OutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::Base64OutputStream>
{
	static constexpr fixed_string class_name = "android/util/Base64OutputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::FilterOutputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_BASE64OUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_BASE64OUTPUTSTREAM)
#define SCAPIX_JAVA_API_ANDROID_UTIL_BASE64OUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::Base64OutputStream : public jni::object_base<"android/util/Base64OutputStream",
	java::io::FilterOutputStream>
{
public:

	static jni::ref<android::util::Base64OutputStream> new_object(jni::ref<java::io::OutputStream> out, jint flags) { return base_::new_object(out, flags); }
	void write(jint b) { return call_method<"write", void>(b); }
	void write(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"write", void>(b, off, len); }
	void close() { return call_method<"close", void>(); }

protected:

	Base64OutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_BASE64OUTPUTSTREAM
