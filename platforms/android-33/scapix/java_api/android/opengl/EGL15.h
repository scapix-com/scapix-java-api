// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OPENGL_EGL15_FWD
#define SCAPIX_JAVA_API_ANDROID_OPENGL_EGL15_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::opengl { class EGL15; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::opengl::EGL15>
{
	static constexpr fixed_string class_name = "android/opengl/EGL15";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_EGL15_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OPENGL_EGL15)
#define SCAPIX_JAVA_API_ANDROID_OPENGL_EGL15

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/opengl/EGLConfig.h>
#include <scapix/java_api/android/opengl/EGLContext.h>
#include <scapix/java_api/android/opengl/EGLDisplay.h>
#include <scapix/java_api/android/opengl/EGLImage.h>
#include <scapix/java_api/android/opengl/EGLSurface.h>
#include <scapix/java_api/android/opengl/EGLSync.h>
#include <scapix/java_api/java/nio/Buffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::opengl::EGL15 : public jni::object_base<"android/opengl/EGL15",
	java::lang::Object>
{
public:

	static jint EGL_CL_EVENT_HANDLE() { return get_static_field<"EGL_CL_EVENT_HANDLE", jint>(); }
	static jint EGL_CONDITION_SATISFIED() { return get_static_field<"EGL_CONDITION_SATISFIED", jint>(); }
	static jint EGL_CONTEXT_MAJOR_VERSION() { return get_static_field<"EGL_CONTEXT_MAJOR_VERSION", jint>(); }
	static jint EGL_CONTEXT_MINOR_VERSION() { return get_static_field<"EGL_CONTEXT_MINOR_VERSION", jint>(); }
	static jint EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT() { return get_static_field<"EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT", jint>(); }
	static jint EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT() { return get_static_field<"EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT", jint>(); }
	static jint EGL_CONTEXT_OPENGL_DEBUG() { return get_static_field<"EGL_CONTEXT_OPENGL_DEBUG", jint>(); }
	static jint EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE() { return get_static_field<"EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE", jint>(); }
	static jint EGL_CONTEXT_OPENGL_PROFILE_MASK() { return get_static_field<"EGL_CONTEXT_OPENGL_PROFILE_MASK", jint>(); }
	static jint EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY() { return get_static_field<"EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY", jint>(); }
	static jint EGL_CONTEXT_OPENGL_ROBUST_ACCESS() { return get_static_field<"EGL_CONTEXT_OPENGL_ROBUST_ACCESS", jint>(); }
	static jlong EGL_FOREVER() { return get_static_field<"EGL_FOREVER", jlong>(); }
	static jint EGL_GL_COLORSPACE() { return get_static_field<"EGL_GL_COLORSPACE", jint>(); }
	static jint EGL_GL_COLORSPACE_LINEAR() { return get_static_field<"EGL_GL_COLORSPACE_LINEAR", jint>(); }
	static jint EGL_GL_COLORSPACE_SRGB() { return get_static_field<"EGL_GL_COLORSPACE_SRGB", jint>(); }
	static jint EGL_GL_RENDERBUFFER() { return get_static_field<"EGL_GL_RENDERBUFFER", jint>(); }
	static jint EGL_GL_TEXTURE_2D() { return get_static_field<"EGL_GL_TEXTURE_2D", jint>(); }
	static jint EGL_GL_TEXTURE_3D() { return get_static_field<"EGL_GL_TEXTURE_3D", jint>(); }
	static jint EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X() { return get_static_field<"EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X", jint>(); }
	static jint EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y() { return get_static_field<"EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y", jint>(); }
	static jint EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z() { return get_static_field<"EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z", jint>(); }
	static jint EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X() { return get_static_field<"EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X", jint>(); }
	static jint EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y() { return get_static_field<"EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y", jint>(); }
	static jint EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z() { return get_static_field<"EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z", jint>(); }
	static jint EGL_GL_TEXTURE_LEVEL() { return get_static_field<"EGL_GL_TEXTURE_LEVEL", jint>(); }
	static jint EGL_GL_TEXTURE_ZOFFSET() { return get_static_field<"EGL_GL_TEXTURE_ZOFFSET", jint>(); }
	static jint EGL_IMAGE_PRESERVED() { return get_static_field<"EGL_IMAGE_PRESERVED", jint>(); }
	static jint EGL_LOSE_CONTEXT_ON_RESET() { return get_static_field<"EGL_LOSE_CONTEXT_ON_RESET", jint>(); }
	static jni::ref<android::opengl::EGLContext> EGL_NO_CONTEXT() { return get_static_field<"EGL_NO_CONTEXT", jni::ref<android::opengl::EGLContext>>(); }
	static jni::ref<android::opengl::EGLDisplay> EGL_NO_DISPLAY() { return get_static_field<"EGL_NO_DISPLAY", jni::ref<android::opengl::EGLDisplay>>(); }
	static jni::ref<android::opengl::EGLImage> EGL_NO_IMAGE() { return get_static_field<"EGL_NO_IMAGE", jni::ref<android::opengl::EGLImage>>(); }
	static jint EGL_NO_RESET_NOTIFICATION() { return get_static_field<"EGL_NO_RESET_NOTIFICATION", jint>(); }
	static jni::ref<android::opengl::EGLSurface> EGL_NO_SURFACE() { return get_static_field<"EGL_NO_SURFACE", jni::ref<android::opengl::EGLSurface>>(); }
	static jni::ref<android::opengl::EGLSync> EGL_NO_SYNC() { return get_static_field<"EGL_NO_SYNC", jni::ref<android::opengl::EGLSync>>(); }
	static jint EGL_OPENGL_ES3_BIT() { return get_static_field<"EGL_OPENGL_ES3_BIT", jint>(); }
	static jint EGL_PLATFORM_ANDROID_KHR() { return get_static_field<"EGL_PLATFORM_ANDROID_KHR", jint>(); }
	static jint EGL_SIGNALED() { return get_static_field<"EGL_SIGNALED", jint>(); }
	static jint EGL_SYNC_CL_EVENT() { return get_static_field<"EGL_SYNC_CL_EVENT", jint>(); }
	static jint EGL_SYNC_CL_EVENT_COMPLETE() { return get_static_field<"EGL_SYNC_CL_EVENT_COMPLETE", jint>(); }
	static jint EGL_SYNC_CONDITION() { return get_static_field<"EGL_SYNC_CONDITION", jint>(); }
	static jint EGL_SYNC_FENCE() { return get_static_field<"EGL_SYNC_FENCE", jint>(); }
	static jint EGL_SYNC_FLUSH_COMMANDS_BIT() { return get_static_field<"EGL_SYNC_FLUSH_COMMANDS_BIT", jint>(); }
	static jint EGL_SYNC_PRIOR_COMMANDS_COMPLETE() { return get_static_field<"EGL_SYNC_PRIOR_COMMANDS_COMPLETE", jint>(); }
	static jint EGL_SYNC_STATUS() { return get_static_field<"EGL_SYNC_STATUS", jint>(); }
	static jint EGL_SYNC_TYPE() { return get_static_field<"EGL_SYNC_TYPE", jint>(); }
	static jint EGL_TIMEOUT_EXPIRED() { return get_static_field<"EGL_TIMEOUT_EXPIRED", jint>(); }
	static jint EGL_UNSIGNALED() { return get_static_field<"EGL_UNSIGNALED", jint>(); }

	static jni::ref<android::opengl::EGLSync> eglCreateSync(jni::ref<android::opengl::EGLDisplay> p1, jint p2, jni::ref<jni::array<jlong>> p3, jint p4) { return call_static_method<"eglCreateSync", jni::ref<android::opengl::EGLSync>>(p1, p2, p3, p4); }
	static jboolean eglGetSyncAttrib(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSync> p2, jint p3, jni::ref<jni::array<jlong>> p4, jint p5) { return call_static_method<"eglGetSyncAttrib", jboolean>(p1, p2, p3, p4, p5); }
	static jboolean eglDestroySync(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSync> p2) { return call_static_method<"eglDestroySync", jboolean>(p1, p2); }
	static jint eglClientWaitSync(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSync> p2, jint p3, jlong p4) { return call_static_method<"eglClientWaitSync", jint>(p1, p2, p3, p4); }
	static jni::ref<android::opengl::EGLDisplay> eglGetPlatformDisplay(jint p1, jlong p2, jni::ref<jni::array<jlong>> p3, jint p4) { return call_static_method<"eglGetPlatformDisplay", jni::ref<android::opengl::EGLDisplay>>(p1, p2, p3, p4); }
	static jni::ref<android::opengl::EGLSurface> eglCreatePlatformWindowSurface(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLConfig> p2, jni::ref<java::nio::Buffer> p3, jni::ref<jni::array<jlong>> p4, jint p5) { return call_static_method<"eglCreatePlatformWindowSurface", jni::ref<android::opengl::EGLSurface>>(p1, p2, p3, p4, p5); }
	static jni::ref<android::opengl::EGLSurface> eglCreatePlatformPixmapSurface(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLConfig> p2, jni::ref<java::nio::Buffer> p3, jni::ref<jni::array<jlong>> p4, jint p5) { return call_static_method<"eglCreatePlatformPixmapSurface", jni::ref<android::opengl::EGLSurface>>(p1, p2, p3, p4, p5); }
	static jboolean eglWaitSync(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSync> p2, jint p3) { return call_static_method<"eglWaitSync", jboolean>(p1, p2, p3); }
	static jni::ref<android::opengl::EGLImage> eglCreateImage(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLContext> p2, jint p3, jlong p4, jni::ref<jni::array<jlong>> p5, jint p6) { return call_static_method<"eglCreateImage", jni::ref<android::opengl::EGLImage>>(p1, p2, p3, p4, p5, p6); }
	static jboolean eglDestroyImage(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLImage> p2) { return call_static_method<"eglDestroyImage", jboolean>(p1, p2); }

protected:

	EGL15(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_EGL15
