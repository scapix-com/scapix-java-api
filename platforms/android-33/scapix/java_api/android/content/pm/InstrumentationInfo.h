// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/content/pm/PackageItemInfo.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content::pm { class InstrumentationInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::pm::InstrumentationInfo>
{
	static constexpr fixed_string class_name = "android/content/pm/InstrumentationInfo";
	using base_classes = std::tuple<scapix::java_api::android::content::pm::PackageItemInfo, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::pm::InstrumentationInfo : public jni::object_base<"android/content/pm/InstrumentationInfo",
	android::content::pm::PackageItemInfo,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	jni::ref<java::lang::String> dataDir() { return get_field<"dataDir", jni::ref<java::lang::String>>(); }
	void dataDir(jni::ref<java::lang::String> v) { set_field<"dataDir", jni::ref<java::lang::String>>(v); }
	jboolean functionalTest() { return get_field<"functionalTest", jboolean>(); }
	void functionalTest(jboolean v) { set_field<"functionalTest", jboolean>(v); }
	jboolean handleProfiling() { return get_field<"handleProfiling", jboolean>(); }
	void handleProfiling(jboolean v) { set_field<"handleProfiling", jboolean>(v); }
	jni::ref<java::lang::String> publicSourceDir() { return get_field<"publicSourceDir", jni::ref<java::lang::String>>(); }
	void publicSourceDir(jni::ref<java::lang::String> v) { set_field<"publicSourceDir", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> sourceDir() { return get_field<"sourceDir", jni::ref<java::lang::String>>(); }
	void sourceDir(jni::ref<java::lang::String> v) { set_field<"sourceDir", jni::ref<java::lang::String>>(v); }
	jni::ref<jni::array<java::lang::String>> splitNames() { return get_field<"splitNames", jni::ref<jni::array<java::lang::String>>>(); }
	void splitNames(jni::ref<jni::array<java::lang::String>> v) { set_field<"splitNames", jni::ref<jni::array<java::lang::String>>>(v); }
	jni::ref<jni::array<java::lang::String>> splitPublicSourceDirs() { return get_field<"splitPublicSourceDirs", jni::ref<jni::array<java::lang::String>>>(); }
	void splitPublicSourceDirs(jni::ref<jni::array<java::lang::String>> v) { set_field<"splitPublicSourceDirs", jni::ref<jni::array<java::lang::String>>>(v); }
	jni::ref<jni::array<java::lang::String>> splitSourceDirs() { return get_field<"splitSourceDirs", jni::ref<jni::array<java::lang::String>>>(); }
	void splitSourceDirs(jni::ref<jni::array<java::lang::String>> v) { set_field<"splitSourceDirs", jni::ref<jni::array<java::lang::String>>>(v); }
	jni::ref<java::lang::String> targetPackage() { return get_field<"targetPackage", jni::ref<java::lang::String>>(); }
	void targetPackage(jni::ref<java::lang::String> v) { set_field<"targetPackage", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> targetProcesses() { return get_field<"targetProcesses", jni::ref<java::lang::String>>(); }
	void targetProcesses(jni::ref<java::lang::String> v) { set_field<"targetProcesses", jni::ref<java::lang::String>>(v); }

	static jni::ref<android::content::pm::InstrumentationInfo> new_object() { return base_::new_object(); }
	static jni::ref<android::content::pm::InstrumentationInfo> new_object(jni::ref<android::content::pm::InstrumentationInfo> orig) { return base_::new_object(orig); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint parcelableFlags) { return call_method<"writeToParcel", void>(dest, parcelableFlags); }

protected:

	InstrumentationInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_INSTRUMENTATIONINFO
