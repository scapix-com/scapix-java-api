// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEITEM_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEITEM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::slice { class SliceItem; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::slice::SliceItem>
{
	static constexpr fixed_string class_name = "android/app/slice/SliceItem";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEITEM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEITEM)
#define SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEITEM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/app/RemoteInput.h>
#include <scapix/java_api/android/app/slice/Slice.h>
#include <scapix/java_api/android/graphics/drawable/Icon.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::slice::SliceItem : public jni::object_base<"android/app/slice/SliceItem",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<java::lang::String> FORMAT_ACTION() { return get_static_field<"FORMAT_ACTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FORMAT_BUNDLE() { return get_static_field<"FORMAT_BUNDLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FORMAT_IMAGE() { return get_static_field<"FORMAT_IMAGE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FORMAT_INT() { return get_static_field<"FORMAT_INT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FORMAT_LONG() { return get_static_field<"FORMAT_LONG", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FORMAT_REMOTE_INPUT() { return get_static_field<"FORMAT_REMOTE_INPUT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FORMAT_SLICE() { return get_static_field<"FORMAT_SLICE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FORMAT_TEXT() { return get_static_field<"FORMAT_TEXT", jni::ref<java::lang::String>>(); }

	jni::ref<java::util::List> getHints() { return call_method<"getHints", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> getFormat() { return call_method<"getFormat", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSubType() { return call_method<"getSubType", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::CharSequence> getText() { return call_method<"getText", jni::ref<java::lang::CharSequence>>(); }
	jni::ref<android::os::Bundle> getBundle() { return call_method<"getBundle", jni::ref<android::os::Bundle>>(); }
	jni::ref<android::graphics::drawable::Icon> getIcon() { return call_method<"getIcon", jni::ref<android::graphics::drawable::Icon>>(); }
	jni::ref<android::app::PendingIntent> getAction() { return call_method<"getAction", jni::ref<android::app::PendingIntent>>(); }
	jni::ref<android::app::RemoteInput> getRemoteInput() { return call_method<"getRemoteInput", jni::ref<android::app::RemoteInput>>(); }
	jint getInt() { return call_method<"getInt", jint>(); }
	jni::ref<android::app::slice::Slice> getSlice() { return call_method<"getSlice", jni::ref<android::app::slice::Slice>>(); }
	jlong getLong() { return call_method<"getLong", jlong>(); }
	jboolean hasHint(jni::ref<java::lang::String> hint) { return call_method<"hasHint", jboolean>(hint); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	SliceItem(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_SLICE_SLICEITEM
