// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/icu/text/UnicodeFilter.h>
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/android/icu/util/Freezable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESET_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class UnicodeSet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::UnicodeSet>
{
	static constexpr fixed_string class_name = "android/icu/text/UnicodeSet";
	using base_classes = std::tuple<scapix::java_api::android::icu::text::UnicodeFilter, scapix::java_api::java::lang::Iterable, scapix::java_api::java::lang::Comparable, scapix::java_api::android::icu::util::Freezable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESET)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/Replaceable.h>
#include <scapix/java_api/android/icu/text/SymbolTable.h>
#include <scapix/java_api/android/icu/text/UnicodeSet_ComparisonStyle.h>
#include <scapix/java_api/android/icu/text/UnicodeSet_SpanCondition.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/android/icu/text/UnicodeSet_EntryRange.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::UnicodeSet : public jni::object_base<"android/icu/text/UnicodeSet",
	android::icu::text::UnicodeFilter,
	java::lang::Iterable,
	java::lang::Comparable,
	android::icu::util::Freezable>
{
public:

	using SpanCondition = UnicodeSet_SpanCondition;
	using EntryRange = UnicodeSet_EntryRange;
	using ComparisonStyle = UnicodeSet_ComparisonStyle;

	static jint ADD_CASE_MAPPINGS() { return get_static_field<"ADD_CASE_MAPPINGS", jint>(); }
	static jni::ref<android::icu::text::UnicodeSet> ALL_CODE_POINTS() { return get_static_field<"ALL_CODE_POINTS", jni::ref<android::icu::text::UnicodeSet>>(); }
	static jint CASE() { return get_static_field<"CASE", jint>(); }
	static jint CASE_INSENSITIVE() { return get_static_field<"CASE_INSENSITIVE", jint>(); }
	static jni::ref<android::icu::text::UnicodeSet> EMPTY() { return get_static_field<"EMPTY", jni::ref<android::icu::text::UnicodeSet>>(); }
	static jint IGNORE_SPACE() { return get_static_field<"IGNORE_SPACE", jint>(); }
	static jint MAX_VALUE() { return get_static_field<"MAX_VALUE", jint>(); }
	static jint MIN_VALUE() { return get_static_field<"MIN_VALUE", jint>(); }

	static jni::ref<android::icu::text::UnicodeSet> new_object() { return base_::new_object(); }
	static jni::ref<android::icu::text::UnicodeSet> new_object(jni::ref<android::icu::text::UnicodeSet> other) { return base_::new_object(other); }
	static jni::ref<android::icu::text::UnicodeSet> new_object(jint start, jint end) { return base_::new_object(start, end); }
	static jni::ref<android::icu::text::UnicodeSet> new_object(jni::ref<jni::array<jint>> pairs) { return base_::new_object(pairs); }
	static jni::ref<android::icu::text::UnicodeSet> new_object(jni::ref<java::lang::String> pattern) { return base_::new_object(pattern); }
	static jni::ref<android::icu::text::UnicodeSet> new_object(jni::ref<java::lang::String> pattern, jboolean ignoreWhitespace) { return base_::new_object(pattern, ignoreWhitespace); }
	static jni::ref<android::icu::text::UnicodeSet> new_object(jni::ref<java::lang::String> pattern, jint options) { return base_::new_object(pattern, options); }
	static jni::ref<android::icu::text::UnicodeSet> new_object(jni::ref<java::lang::String> pattern, jni::ref<java::text::ParsePosition> pos, jni::ref<android::icu::text::SymbolTable> symbols) { return base_::new_object(pattern, pos, symbols); }
	static jni::ref<android::icu::text::UnicodeSet> new_object(jni::ref<java::lang::String> pattern, jni::ref<java::text::ParsePosition> pos, jni::ref<android::icu::text::SymbolTable> symbols, jint options) { return base_::new_object(pattern, pos, symbols, options); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<android::icu::text::UnicodeSet> set(jint start, jint end) { return call_method<"set", jni::ref<android::icu::text::UnicodeSet>>(start, end); }
	jni::ref<android::icu::text::UnicodeSet> set(jni::ref<android::icu::text::UnicodeSet> other) { return call_method<"set", jni::ref<android::icu::text::UnicodeSet>>(other); }
	jni::ref<android::icu::text::UnicodeSet> applyPattern(jni::ref<java::lang::String> pattern) { return call_method<"applyPattern", jni::ref<android::icu::text::UnicodeSet>>(pattern); }
	jni::ref<android::icu::text::UnicodeSet> applyPattern(jni::ref<java::lang::String> pattern, jboolean ignoreWhitespace) { return call_method<"applyPattern", jni::ref<android::icu::text::UnicodeSet>>(pattern, ignoreWhitespace); }
	jni::ref<android::icu::text::UnicodeSet> applyPattern(jni::ref<java::lang::String> pattern, jint options) { return call_method<"applyPattern", jni::ref<android::icu::text::UnicodeSet>>(pattern, options); }
	jni::ref<java::lang::String> toPattern(jboolean escapeUnprintable) { return call_method<"toPattern", jni::ref<java::lang::String>>(escapeUnprintable); }
	jni::ref<java::lang::StringBuffer> _generatePattern(jni::ref<java::lang::StringBuffer> result, jboolean escapeUnprintable) { return call_method<"_generatePattern", jni::ref<java::lang::StringBuffer>>(result, escapeUnprintable); }
	jni::ref<java::lang::StringBuffer> _generatePattern(jni::ref<java::lang::StringBuffer> result, jboolean escapeUnprintable, jboolean includeStrings) { return call_method<"_generatePattern", jni::ref<java::lang::StringBuffer>>(result, escapeUnprintable, includeStrings); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean matchesIndexValue(jint v) { return call_method<"matchesIndexValue", jboolean>(v); }
	jint matches(jni::ref<android::icu::text::Replaceable> text, jni::ref<jni::array<jint>> offset, jint limit, jboolean incremental) { return call_method<"matches", jint>(text, offset, limit, incremental); }
	void addMatchSetTo(jni::ref<android::icu::text::UnicodeSet> toUnionTo) { return call_method<"addMatchSetTo", void>(toUnionTo); }
	jint indexOf(jint c) { return call_method<"indexOf", jint>(c); }
	jint charAt(jint index) { return call_method<"charAt", jint>(index); }
	jni::ref<android::icu::text::UnicodeSet> add(jint start, jint end) { return call_method<"add", jni::ref<android::icu::text::UnicodeSet>>(start, end); }
	jni::ref<android::icu::text::UnicodeSet> addAll(jint start, jint end) { return call_method<"addAll", jni::ref<android::icu::text::UnicodeSet>>(start, end); }
	jni::ref<android::icu::text::UnicodeSet> add(jint c) { return call_method<"add", jni::ref<android::icu::text::UnicodeSet>>(c); }
	jni::ref<android::icu::text::UnicodeSet> add(jni::ref<java::lang::CharSequence> s) { return call_method<"add", jni::ref<android::icu::text::UnicodeSet>>(s); }
	jni::ref<android::icu::text::UnicodeSet> addAll(jni::ref<java::lang::CharSequence> s) { return call_method<"addAll", jni::ref<android::icu::text::UnicodeSet>>(s); }
	jni::ref<android::icu::text::UnicodeSet> retainAll(jni::ref<java::lang::CharSequence> s) { return call_method<"retainAll", jni::ref<android::icu::text::UnicodeSet>>(s); }
	jni::ref<android::icu::text::UnicodeSet> complementAll(jni::ref<java::lang::CharSequence> s) { return call_method<"complementAll", jni::ref<android::icu::text::UnicodeSet>>(s); }
	jni::ref<android::icu::text::UnicodeSet> removeAll(jni::ref<java::lang::CharSequence> s) { return call_method<"removeAll", jni::ref<android::icu::text::UnicodeSet>>(s); }
	jni::ref<android::icu::text::UnicodeSet> removeAllStrings() { return call_method<"removeAllStrings", jni::ref<android::icu::text::UnicodeSet>>(); }
	static jni::ref<android::icu::text::UnicodeSet> from(jni::ref<java::lang::CharSequence> s) { return call_static_method<"from", jni::ref<android::icu::text::UnicodeSet>>(s); }
	static jni::ref<android::icu::text::UnicodeSet> fromAll(jni::ref<java::lang::CharSequence> s) { return call_static_method<"fromAll", jni::ref<android::icu::text::UnicodeSet>>(s); }
	jni::ref<android::icu::text::UnicodeSet> retain(jint start, jint end) { return call_method<"retain", jni::ref<android::icu::text::UnicodeSet>>(start, end); }
	jni::ref<android::icu::text::UnicodeSet> retain(jint c) { return call_method<"retain", jni::ref<android::icu::text::UnicodeSet>>(c); }
	jni::ref<android::icu::text::UnicodeSet> retain(jni::ref<java::lang::CharSequence> cs) { return call_method<"retain", jni::ref<android::icu::text::UnicodeSet>>(cs); }
	jni::ref<android::icu::text::UnicodeSet> remove(jint start, jint end) { return call_method<"remove", jni::ref<android::icu::text::UnicodeSet>>(start, end); }
	jni::ref<android::icu::text::UnicodeSet> remove(jint c) { return call_method<"remove", jni::ref<android::icu::text::UnicodeSet>>(c); }
	jni::ref<android::icu::text::UnicodeSet> remove(jni::ref<java::lang::CharSequence> s) { return call_method<"remove", jni::ref<android::icu::text::UnicodeSet>>(s); }
	jni::ref<android::icu::text::UnicodeSet> complement(jint start, jint end) { return call_method<"complement", jni::ref<android::icu::text::UnicodeSet>>(start, end); }
	jni::ref<android::icu::text::UnicodeSet> complement(jint c) { return call_method<"complement", jni::ref<android::icu::text::UnicodeSet>>(c); }
	jni::ref<android::icu::text::UnicodeSet> complement() { return call_method<"complement", jni::ref<android::icu::text::UnicodeSet>>(); }
	jni::ref<android::icu::text::UnicodeSet> complement(jni::ref<java::lang::CharSequence> s) { return call_method<"complement", jni::ref<android::icu::text::UnicodeSet>>(s); }
	jboolean contains(jint c) { return call_method<"contains", jboolean>(c); }
	jboolean contains(jint start, jint end) { return call_method<"contains", jboolean>(start, end); }
	jboolean contains(jni::ref<java::lang::CharSequence> s) { return call_method<"contains", jboolean>(s); }
	jboolean containsAll(jni::ref<android::icu::text::UnicodeSet> b) { return call_method<"containsAll", jboolean>(b); }
	jboolean containsAll(jni::ref<java::lang::String> s) { return call_method<"containsAll", jboolean>(s); }
	jboolean containsNone(jint start, jint end) { return call_method<"containsNone", jboolean>(start, end); }
	jboolean containsNone(jni::ref<android::icu::text::UnicodeSet> b) { return call_method<"containsNone", jboolean>(b); }
	jboolean containsNone(jni::ref<java::lang::CharSequence> s) { return call_method<"containsNone", jboolean>(s); }
	jboolean containsSome(jint start, jint end) { return call_method<"containsSome", jboolean>(start, end); }
	jboolean containsSome(jni::ref<android::icu::text::UnicodeSet> s) { return call_method<"containsSome", jboolean>(s); }
	jboolean containsSome(jni::ref<java::lang::CharSequence> s) { return call_method<"containsSome", jboolean>(s); }
	jni::ref<android::icu::text::UnicodeSet> addAll(jni::ref<android::icu::text::UnicodeSet> c) { return call_method<"addAll", jni::ref<android::icu::text::UnicodeSet>>(c); }
	jni::ref<android::icu::text::UnicodeSet> retainAll(jni::ref<android::icu::text::UnicodeSet> c) { return call_method<"retainAll", jni::ref<android::icu::text::UnicodeSet>>(c); }
	jni::ref<android::icu::text::UnicodeSet> removeAll(jni::ref<android::icu::text::UnicodeSet> c) { return call_method<"removeAll", jni::ref<android::icu::text::UnicodeSet>>(c); }
	jni::ref<android::icu::text::UnicodeSet> complementAll(jni::ref<android::icu::text::UnicodeSet> c) { return call_method<"complementAll", jni::ref<android::icu::text::UnicodeSet>>(c); }
	jni::ref<android::icu::text::UnicodeSet> clear() { return call_method<"clear", jni::ref<android::icu::text::UnicodeSet>>(); }
	jint getRangeCount() { return call_method<"getRangeCount", jint>(); }
	jint getRangeStart(jint index) { return call_method<"getRangeStart", jint>(index); }
	jint getRangeEnd(jint index) { return call_method<"getRangeEnd", jint>(index); }
	jni::ref<android::icu::text::UnicodeSet> compact() { return call_method<"compact", jni::ref<android::icu::text::UnicodeSet>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Collection> addAllTo(jni::ref<java::util::Collection> target) { return call_method<"addAllTo", jni::ref<java::util::Collection>>(target); }
	jni::ref<android::icu::text::UnicodeSet> add(jni::ref<java::lang::Iterable> source) { return call_method<"add", jni::ref<android::icu::text::UnicodeSet>>(source); }
	jni::ref<android::icu::text::UnicodeSet> addAll(jni::ref<java::lang::Iterable> source) { return call_method<"addAll", jni::ref<android::icu::text::UnicodeSet>>(source); }
	jni::ref<android::icu::text::UnicodeSet> applyIntPropertyValue(jint prop, jint value) { return call_method<"applyIntPropertyValue", jni::ref<android::icu::text::UnicodeSet>>(prop, value); }
	jni::ref<android::icu::text::UnicodeSet> applyPropertyAlias(jni::ref<java::lang::String> propertyAlias, jni::ref<java::lang::String> valueAlias) { return call_method<"applyPropertyAlias", jni::ref<android::icu::text::UnicodeSet>>(propertyAlias, valueAlias); }
	jni::ref<android::icu::text::UnicodeSet> applyPropertyAlias(jni::ref<java::lang::String> propertyAlias, jni::ref<java::lang::String> valueAlias, jni::ref<android::icu::text::SymbolTable> symbols) { return call_method<"applyPropertyAlias", jni::ref<android::icu::text::UnicodeSet>>(propertyAlias, valueAlias, symbols); }
	jni::ref<android::icu::text::UnicodeSet> closeOver(jint attribute) { return call_method<"closeOver", jni::ref<android::icu::text::UnicodeSet>>(attribute); }
	jboolean isFrozen() { return call_method<"isFrozen", jboolean>(); }
	jni::ref<android::icu::text::UnicodeSet> freeze() { return call_method<"freeze", jni::ref<android::icu::text::UnicodeSet>>(); }
	jint span(jni::ref<java::lang::CharSequence> s, jni::ref<android::icu::text::UnicodeSet_SpanCondition> spanCondition) { return call_method<"span", jint>(s, spanCondition); }
	jint span(jni::ref<java::lang::CharSequence> s, jint start, jni::ref<android::icu::text::UnicodeSet_SpanCondition> spanCondition) { return call_method<"span", jint>(s, start, spanCondition); }
	jint spanBack(jni::ref<java::lang::CharSequence> s, jni::ref<android::icu::text::UnicodeSet_SpanCondition> spanCondition) { return call_method<"spanBack", jint>(s, spanCondition); }
	jint spanBack(jni::ref<java::lang::CharSequence> s, jint fromIndex, jni::ref<android::icu::text::UnicodeSet_SpanCondition> spanCondition) { return call_method<"spanBack", jint>(s, fromIndex, spanCondition); }
	jni::ref<android::icu::text::UnicodeSet> cloneAsThawed() { return call_method<"cloneAsThawed", jni::ref<android::icu::text::UnicodeSet>>(); }
	jni::ref<java::lang::Iterable> ranges() { return call_method<"ranges", jni::ref<java::lang::Iterable>>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jboolean containsAll(jni::ref<java::lang::Iterable> collection) { return call_method<"containsAll", jboolean>(collection); }
	jboolean containsNone(jni::ref<java::lang::Iterable> collection) { return call_method<"containsNone", jboolean>(collection); }
	jboolean containsSome(jni::ref<java::lang::Iterable> collection) { return call_method<"containsSome", jboolean>(collection); }
	jni::ref<android::icu::text::UnicodeSet> addAll(jni::ref<jni::array<java::lang::CharSequence>> collection) { return call_method<"addAll", jni::ref<android::icu::text::UnicodeSet>>(collection); }
	jni::ref<android::icu::text::UnicodeSet> removeAll(jni::ref<java::lang::Iterable> collection) { return call_method<"removeAll", jni::ref<android::icu::text::UnicodeSet>>(collection); }
	jni::ref<android::icu::text::UnicodeSet> retainAll(jni::ref<java::lang::Iterable> collection) { return call_method<"retainAll", jni::ref<android::icu::text::UnicodeSet>>(collection); }
	jint compareTo(jni::ref<android::icu::text::UnicodeSet> o) { return call_method<"compareTo", jint>(o); }
	jint compareTo(jni::ref<android::icu::text::UnicodeSet> o, jni::ref<android::icu::text::UnicodeSet_ComparisonStyle> style) { return call_method<"compareTo", jint>(o, style); }
	jint compareTo(jni::ref<java::lang::Iterable> other) { return call_method<"compareTo", jint>(other); }
	jni::ref<java::util::Collection> strings() { return call_method<"strings", jni::ref<java::util::Collection>>(); }

protected:

	UnicodeSet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESET
