// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESETSPANNER_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESETSPANNER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class UnicodeSetSpanner; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::UnicodeSetSpanner>
{
	static constexpr fixed_string class_name = "android/icu/text/UnicodeSetSpanner";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESETSPANNER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESETSPANNER)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESETSPANNER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/UnicodeSet.h>
#include <scapix/java_api/android/icu/text/UnicodeSet_SpanCondition.h>
#include <scapix/java_api/android/icu/text/UnicodeSetSpanner_CountMethod.h>
#include <scapix/java_api/android/icu/text/UnicodeSetSpanner_TrimOption.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::UnicodeSetSpanner : public jni::object_base<"android/icu/text/UnicodeSetSpanner",
	java::lang::Object>
{
public:

	using TrimOption = UnicodeSetSpanner_TrimOption;
	using CountMethod = UnicodeSetSpanner_CountMethod;

	static jni::ref<android::icu::text::UnicodeSetSpanner> new_object(jni::ref<android::icu::text::UnicodeSet> source) { return base_::new_object(source); }
	jni::ref<android::icu::text::UnicodeSet> getUnicodeSet() { return call_method<"getUnicodeSet", jni::ref<android::icu::text::UnicodeSet>>(); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint countIn(jni::ref<java::lang::CharSequence> sequence) { return call_method<"countIn", jint>(sequence); }
	jint countIn(jni::ref<java::lang::CharSequence> sequence, jni::ref<android::icu::text::UnicodeSetSpanner_CountMethod> countMethod) { return call_method<"countIn", jint>(sequence, countMethod); }
	jint countIn(jni::ref<java::lang::CharSequence> sequence, jni::ref<android::icu::text::UnicodeSetSpanner_CountMethod> countMethod, jni::ref<android::icu::text::UnicodeSet_SpanCondition> spanCondition) { return call_method<"countIn", jint>(sequence, countMethod, spanCondition); }
	jni::ref<java::lang::String> deleteFrom(jni::ref<java::lang::CharSequence> sequence) { return call_method<"deleteFrom", jni::ref<java::lang::String>>(sequence); }
	jni::ref<java::lang::String> deleteFrom(jni::ref<java::lang::CharSequence> sequence, jni::ref<android::icu::text::UnicodeSet_SpanCondition> spanCondition) { return call_method<"deleteFrom", jni::ref<java::lang::String>>(sequence, spanCondition); }
	jni::ref<java::lang::String> replaceFrom(jni::ref<java::lang::CharSequence> sequence, jni::ref<java::lang::CharSequence> replacement) { return call_method<"replaceFrom", jni::ref<java::lang::String>>(sequence, replacement); }
	jni::ref<java::lang::String> replaceFrom(jni::ref<java::lang::CharSequence> sequence, jni::ref<java::lang::CharSequence> replacement, jni::ref<android::icu::text::UnicodeSetSpanner_CountMethod> countMethod) { return call_method<"replaceFrom", jni::ref<java::lang::String>>(sequence, replacement, countMethod); }
	jni::ref<java::lang::String> replaceFrom(jni::ref<java::lang::CharSequence> sequence, jni::ref<java::lang::CharSequence> replacement, jni::ref<android::icu::text::UnicodeSetSpanner_CountMethod> countMethod, jni::ref<android::icu::text::UnicodeSet_SpanCondition> spanCondition) { return call_method<"replaceFrom", jni::ref<java::lang::String>>(sequence, replacement, countMethod, spanCondition); }
	jni::ref<java::lang::CharSequence> trim(jni::ref<java::lang::CharSequence> sequence) { return call_method<"trim", jni::ref<java::lang::CharSequence>>(sequence); }
	jni::ref<java::lang::CharSequence> trim(jni::ref<java::lang::CharSequence> sequence, jni::ref<android::icu::text::UnicodeSetSpanner_TrimOption> trimOption) { return call_method<"trim", jni::ref<java::lang::CharSequence>>(sequence, trimOption); }
	jni::ref<java::lang::CharSequence> trim(jni::ref<java::lang::CharSequence> sequence, jni::ref<android::icu::text::UnicodeSetSpanner_TrimOption> trimOption, jni::ref<android::icu::text::UnicodeSet_SpanCondition> spanCondition) { return call_method<"trim", jni::ref<java::lang::CharSequence>>(sequence, trimOption, spanCondition); }

protected:

	UnicodeSetSpanner(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_UNICODESETSPANNER
