// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/icu/text/UFormat.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MEASUREFORMAT_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MEASUREFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class MeasureFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::MeasureFormat>
{
	static constexpr fixed_string class_name = "android/icu/text/MeasureFormat";
	using base_classes = std::tuple<scapix::java_api::android::icu::text::UFormat>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MEASUREFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MEASUREFORMAT)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MEASUREFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/MeasureFormat_FormatWidth.h>
#include <scapix/java_api/android/icu/text/NumberFormat.h>
#include <scapix/java_api/android/icu/util/Measure.h>
#include <scapix/java_api/android/icu/util/MeasureUnit.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::MeasureFormat : public jni::object_base<"android/icu/text/MeasureFormat",
	android::icu::text::UFormat>
{
public:

	using FormatWidth = MeasureFormat_FormatWidth;

	static jni::ref<android::icu::text::MeasureFormat> getInstance(jni::ref<android::icu::util::ULocale> locale, jni::ref<android::icu::text::MeasureFormat_FormatWidth> formatWidth) { return call_static_method<"getInstance", jni::ref<android::icu::text::MeasureFormat>>(locale, formatWidth); }
	static jni::ref<android::icu::text::MeasureFormat> getInstance(jni::ref<java::util::Locale> locale, jni::ref<android::icu::text::MeasureFormat_FormatWidth> formatWidth) { return call_static_method<"getInstance", jni::ref<android::icu::text::MeasureFormat>>(locale, formatWidth); }
	static jni::ref<android::icu::text::MeasureFormat> getInstance(jni::ref<android::icu::util::ULocale> locale, jni::ref<android::icu::text::MeasureFormat_FormatWidth> formatWidth, jni::ref<android::icu::text::NumberFormat> format) { return call_static_method<"getInstance", jni::ref<android::icu::text::MeasureFormat>>(locale, formatWidth, format); }
	static jni::ref<android::icu::text::MeasureFormat> getInstance(jni::ref<java::util::Locale> locale, jni::ref<android::icu::text::MeasureFormat_FormatWidth> formatWidth, jni::ref<android::icu::text::NumberFormat> format) { return call_static_method<"getInstance", jni::ref<android::icu::text::MeasureFormat>>(locale, formatWidth, format); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<java::lang::Object> obj, jni::ref<java::lang::StringBuffer> toAppendTo, jni::ref<java::text::FieldPosition> fpos) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(obj, toAppendTo, fpos); }
	jni::ref<android::icu::util::Measure> parseObject(jni::ref<java::lang::String> source, jni::ref<java::text::ParsePosition> pos) { return call_method<"parseObject", jni::ref<android::icu::util::Measure>>(source, pos); }
	jni::ref<java::lang::String> formatMeasures(jni::ref<jni::array<android::icu::util::Measure>> measures) { return call_method<"formatMeasures", jni::ref<java::lang::String>>(measures); }
	jni::ref<java::lang::StringBuilder> formatMeasurePerUnit(jni::ref<android::icu::util::Measure> measure, jni::ref<android::icu::util::MeasureUnit> perUnit, jni::ref<java::lang::StringBuilder> appendTo, jni::ref<java::text::FieldPosition> pos) { return call_method<"formatMeasurePerUnit", jni::ref<java::lang::StringBuilder>>(measure, perUnit, appendTo, pos); }
	jni::ref<java::lang::StringBuilder> formatMeasures(jni::ref<java::lang::StringBuilder> appendTo, jni::ref<java::text::FieldPosition> fpos, jni::ref<jni::array<android::icu::util::Measure>> measures) { return call_method<"formatMeasures", jni::ref<java::lang::StringBuilder>>(appendTo, fpos, measures); }
	jni::ref<java::lang::String> getUnitDisplayName(jni::ref<android::icu::util::MeasureUnit> unit) { return call_method<"getUnitDisplayName", jni::ref<java::lang::String>>(unit); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<android::icu::text::MeasureFormat_FormatWidth> getWidth() { return call_method<"getWidth", jni::ref<android::icu::text::MeasureFormat_FormatWidth>>(); }
	jni::ref<android::icu::util::ULocale> getLocale() { return call_method<"getLocale", jni::ref<android::icu::util::ULocale>>(); }
	jni::ref<android::icu::text::NumberFormat> getNumberFormat() { return call_method<"getNumberFormat", jni::ref<android::icu::text::NumberFormat>>(); }
	static jni::ref<android::icu::text::MeasureFormat> getCurrencyFormat(jni::ref<android::icu::util::ULocale> locale) { return call_static_method<"getCurrencyFormat", jni::ref<android::icu::text::MeasureFormat>>(locale); }
	static jni::ref<android::icu::text::MeasureFormat> getCurrencyFormat(jni::ref<java::util::Locale> locale) { return call_static_method<"getCurrencyFormat", jni::ref<android::icu::text::MeasureFormat>>(locale); }
	static jni::ref<android::icu::text::MeasureFormat> getCurrencyFormat() { return call_static_method<"getCurrencyFormat", jni::ref<android::icu::text::MeasureFormat>>(); }

protected:

	MeasureFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MEASUREFORMAT
