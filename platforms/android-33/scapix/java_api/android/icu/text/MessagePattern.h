// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/android/icu/util/Freezable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MESSAGEPATTERN_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MESSAGEPATTERN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class MessagePattern; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::MessagePattern>
{
	static constexpr fixed_string class_name = "android/icu/text/MessagePattern";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable, scapix::java_api::android::icu::util::Freezable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MESSAGEPATTERN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MESSAGEPATTERN)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MESSAGEPATTERN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/MessagePattern_ApostropheMode.h>
#include <scapix/java_api/android/icu/text/MessagePattern_Part.h>
#include <scapix/java_api/android/icu/text/MessagePattern_Part_Type.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/icu/text/MessagePattern_ArgType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::MessagePattern : public jni::object_base<"android/icu/text/MessagePattern",
	java::lang::Object,
	java::lang::Cloneable,
	android::icu::util::Freezable>
{
public:

	using Part = MessagePattern_Part;
	using ArgType = MessagePattern_ArgType;
	using ApostropheMode = MessagePattern_ApostropheMode;

	static jint ARG_NAME_NOT_NUMBER() { return get_static_field<"ARG_NAME_NOT_NUMBER", jint>(); }
	static jint ARG_NAME_NOT_VALID() { return get_static_field<"ARG_NAME_NOT_VALID", jint>(); }
	static jdouble NO_NUMERIC_VALUE() { return get_static_field<"NO_NUMERIC_VALUE", jdouble>(); }

	static jni::ref<android::icu::text::MessagePattern> new_object() { return base_::new_object(); }
	static jni::ref<android::icu::text::MessagePattern> new_object(jni::ref<android::icu::text::MessagePattern_ApostropheMode> mode) { return base_::new_object(mode); }
	static jni::ref<android::icu::text::MessagePattern> new_object(jni::ref<java::lang::String> pattern) { return base_::new_object(pattern); }
	jni::ref<android::icu::text::MessagePattern> parse(jni::ref<java::lang::String> pattern) { return call_method<"parse", jni::ref<android::icu::text::MessagePattern>>(pattern); }
	jni::ref<android::icu::text::MessagePattern> parseChoiceStyle(jni::ref<java::lang::String> pattern) { return call_method<"parseChoiceStyle", jni::ref<android::icu::text::MessagePattern>>(pattern); }
	jni::ref<android::icu::text::MessagePattern> parsePluralStyle(jni::ref<java::lang::String> pattern) { return call_method<"parsePluralStyle", jni::ref<android::icu::text::MessagePattern>>(pattern); }
	jni::ref<android::icu::text::MessagePattern> parseSelectStyle(jni::ref<java::lang::String> pattern) { return call_method<"parseSelectStyle", jni::ref<android::icu::text::MessagePattern>>(pattern); }
	void clear() { return call_method<"clear", void>(); }
	void clearPatternAndSetApostropheMode(jni::ref<android::icu::text::MessagePattern_ApostropheMode> mode) { return call_method<"clearPatternAndSetApostropheMode", void>(mode); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<android::icu::text::MessagePattern_ApostropheMode> getApostropheMode() { return call_method<"getApostropheMode", jni::ref<android::icu::text::MessagePattern_ApostropheMode>>(); }
	jni::ref<java::lang::String> getPatternString() { return call_method<"getPatternString", jni::ref<java::lang::String>>(); }
	jboolean hasNamedArguments() { return call_method<"hasNamedArguments", jboolean>(); }
	jboolean hasNumberedArguments() { return call_method<"hasNumberedArguments", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jint validateArgumentName(jni::ref<java::lang::String> name) { return call_static_method<"validateArgumentName", jint>(name); }
	jni::ref<java::lang::String> autoQuoteApostropheDeep() { return call_method<"autoQuoteApostropheDeep", jni::ref<java::lang::String>>(); }
	jint countParts() { return call_method<"countParts", jint>(); }
	jni::ref<android::icu::text::MessagePattern_Part> getPart(jint i) { return call_method<"getPart", jni::ref<android::icu::text::MessagePattern_Part>>(i); }
	jni::ref<android::icu::text::MessagePattern_Part_Type> getPartType(jint i) { return call_method<"getPartType", jni::ref<android::icu::text::MessagePattern_Part_Type>>(i); }
	jint getPatternIndex(jint partIndex) { return call_method<"getPatternIndex", jint>(partIndex); }
	jni::ref<java::lang::String> getSubstring(jni::ref<android::icu::text::MessagePattern_Part> part) { return call_method<"getSubstring", jni::ref<java::lang::String>>(part); }
	jboolean partSubstringMatches(jni::ref<android::icu::text::MessagePattern_Part> part, jni::ref<java::lang::String> s) { return call_method<"partSubstringMatches", jboolean>(part, s); }
	jdouble getNumericValue(jni::ref<android::icu::text::MessagePattern_Part> part) { return call_method<"getNumericValue", jdouble>(part); }
	jdouble getPluralOffset(jint pluralStart) { return call_method<"getPluralOffset", jdouble>(pluralStart); }
	jint getLimitPartIndex(jint start) { return call_method<"getLimitPartIndex", jint>(start); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<android::icu::text::MessagePattern> cloneAsThawed() { return call_method<"cloneAsThawed", jni::ref<android::icu::text::MessagePattern>>(); }
	jni::ref<android::icu::text::MessagePattern> freeze() { return call_method<"freeze", jni::ref<android::icu::text::MessagePattern>>(); }
	jboolean isFrozen() { return call_method<"isFrozen", jboolean>(); }

protected:

	MessagePattern(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_MESSAGEPATTERN
