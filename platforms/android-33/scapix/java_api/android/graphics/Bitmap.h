// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAP_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Bitmap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Bitmap>
{
	static constexpr fixed_string class_name = "android/graphics/Bitmap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAP)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Bitmap_CompressFormat.h>
#include <scapix/java_api/android/graphics/Bitmap_Config.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Color.h>
#include <scapix/java_api/android/graphics/ColorSpace.h>
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Picture.h>
#include <scapix/java_api/android/hardware/HardwareBuffer.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/util/DisplayMetrics.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/nio/Buffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Bitmap : public jni::object_base<"android/graphics/Bitmap",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Config = Bitmap_Config;
	using CompressFormat = Bitmap_CompressFormat;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DENSITY_NONE() { return get_static_field<"DENSITY_NONE", jint>(); }

	jint getDensity() { return call_method<"getDensity", jint>(); }
	void setDensity(jint density) { return call_method<"setDensity", void>(density); }
	void reconfigure(jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config) { return call_method<"reconfigure", void>(width, height, config); }
	void setWidth(jint width) { return call_method<"setWidth", void>(width); }
	void setHeight(jint height) { return call_method<"setHeight", void>(height); }
	void setConfig(jni::ref<android::graphics::Bitmap_Config> config) { return call_method<"setConfig", void>(config); }
	void recycle() { return call_method<"recycle", void>(); }
	jboolean isRecycled() { return call_method<"isRecycled", jboolean>(); }
	jint getGenerationId() { return call_method<"getGenerationId", jint>(); }
	void copyPixelsToBuffer(jni::ref<java::nio::Buffer> dst) { return call_method<"copyPixelsToBuffer", void>(dst); }
	void copyPixelsFromBuffer(jni::ref<java::nio::Buffer> src) { return call_method<"copyPixelsFromBuffer", void>(src); }
	jni::ref<android::graphics::Bitmap> copy(jni::ref<android::graphics::Bitmap_Config> config, jboolean isMutable) { return call_method<"copy", jni::ref<android::graphics::Bitmap>>(config, isMutable); }
	jni::ref<android::graphics::Bitmap> asShared() { return call_method<"asShared", jni::ref<android::graphics::Bitmap>>(); }
	static jni::ref<android::graphics::Bitmap> wrapHardwareBuffer(jni::ref<android::hardware::HardwareBuffer> hardwareBuffer, jni::ref<android::graphics::ColorSpace> colorSpace) { return call_static_method<"wrapHardwareBuffer", jni::ref<android::graphics::Bitmap>>(hardwareBuffer, colorSpace); }
	static jni::ref<android::graphics::Bitmap> createScaledBitmap(jni::ref<android::graphics::Bitmap> src, jint dstWidth, jint dstHeight, jboolean filter) { return call_static_method<"createScaledBitmap", jni::ref<android::graphics::Bitmap>>(src, dstWidth, dstHeight, filter); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::graphics::Bitmap> src) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(src); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::graphics::Bitmap> source, jint x, jint y, jint width, jint height) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(source, x, y, width, height); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::graphics::Bitmap> source, jint x, jint y, jint width, jint height, jni::ref<android::graphics::Matrix> m, jboolean filter) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(source, x, y, width, height, m, filter); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(width, height, config); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::util::DisplayMetrics> display, jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(display, width, height, config); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config, jboolean hasAlpha) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(width, height, config, hasAlpha); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config, jboolean hasAlpha, jni::ref<android::graphics::ColorSpace> colorSpace) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(width, height, config, hasAlpha, colorSpace); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::util::DisplayMetrics> display, jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config, jboolean hasAlpha) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(display, width, height, config, hasAlpha); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::util::DisplayMetrics> display, jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config, jboolean hasAlpha, jni::ref<android::graphics::ColorSpace> colorSpace) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(display, width, height, config, hasAlpha, colorSpace); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<jni::array<jint>> colors, jint offset, jint stride, jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(colors, offset, stride, width, height, config); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::util::DisplayMetrics> display, jni::ref<jni::array<jint>> colors, jint offset, jint stride, jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(display, colors, offset, stride, width, height, config); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<jni::array<jint>> colors, jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(colors, width, height, config); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::util::DisplayMetrics> display, jni::ref<jni::array<jint>> colors, jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(display, colors, width, height, config); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::graphics::Picture> source) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(source); }
	static jni::ref<android::graphics::Bitmap> createBitmap(jni::ref<android::graphics::Picture> source, jint width, jint height, jni::ref<android::graphics::Bitmap_Config> config) { return call_static_method<"createBitmap", jni::ref<android::graphics::Bitmap>>(source, width, height, config); }
	jni::ref<jni::array<jbyte>> getNinePatchChunk() { return call_method<"getNinePatchChunk", jni::ref<jni::array<jbyte>>>(); }
	jboolean compress(jni::ref<android::graphics::Bitmap_CompressFormat> format, jint quality, jni::ref<java::io::OutputStream> stream) { return call_method<"compress", jboolean>(format, quality, stream); }
	jboolean isMutable() { return call_method<"isMutable", jboolean>(); }
	jboolean isPremultiplied() { return call_method<"isPremultiplied", jboolean>(); }
	void setPremultiplied(jboolean premultiplied) { return call_method<"setPremultiplied", void>(premultiplied); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jint getScaledWidth(jni::ref<android::graphics::Canvas> canvas) { return call_method<"getScaledWidth", jint>(canvas); }
	jint getScaledHeight(jni::ref<android::graphics::Canvas> canvas) { return call_method<"getScaledHeight", jint>(canvas); }
	jint getScaledWidth(jni::ref<android::util::DisplayMetrics> metrics) { return call_method<"getScaledWidth", jint>(metrics); }
	jint getScaledHeight(jni::ref<android::util::DisplayMetrics> metrics) { return call_method<"getScaledHeight", jint>(metrics); }
	jint getScaledWidth(jint targetDensity) { return call_method<"getScaledWidth", jint>(targetDensity); }
	jint getScaledHeight(jint targetDensity) { return call_method<"getScaledHeight", jint>(targetDensity); }
	jint getRowBytes() { return call_method<"getRowBytes", jint>(); }
	jint getByteCount() { return call_method<"getByteCount", jint>(); }
	jint getAllocationByteCount() { return call_method<"getAllocationByteCount", jint>(); }
	jni::ref<android::graphics::Bitmap_Config> getConfig() { return call_method<"getConfig", jni::ref<android::graphics::Bitmap_Config>>(); }
	jboolean hasAlpha() { return call_method<"hasAlpha", jboolean>(); }
	void setHasAlpha(jboolean hasAlpha) { return call_method<"setHasAlpha", void>(hasAlpha); }
	jboolean hasMipMap() { return call_method<"hasMipMap", jboolean>(); }
	void setHasMipMap(jboolean hasMipMap) { return call_method<"setHasMipMap", void>(hasMipMap); }
	jni::ref<android::graphics::ColorSpace> getColorSpace() { return call_method<"getColorSpace", jni::ref<android::graphics::ColorSpace>>(); }
	void setColorSpace(jni::ref<android::graphics::ColorSpace> colorSpace) { return call_method<"setColorSpace", void>(colorSpace); }
	void eraseColor(jint c) { return call_method<"eraseColor", void>(c); }
	void eraseColor(jlong color) { return call_method<"eraseColor", void>(color); }
	jint getPixel(jint x, jint y) { return call_method<"getPixel", jint>(x, y); }
	jni::ref<android::graphics::Color> getColor(jint x, jint y) { return call_method<"getColor", jni::ref<android::graphics::Color>>(x, y); }
	void getPixels(jni::ref<jni::array<jint>> pixels, jint offset, jint stride, jint x, jint y, jint width, jint height) { return call_method<"getPixels", void>(pixels, offset, stride, x, y, width, height); }
	void setPixel(jint x, jint y, jint color) { return call_method<"setPixel", void>(x, y, color); }
	void setPixels(jni::ref<jni::array<jint>> pixels, jint offset, jint stride, jint x, jint y, jint width, jint height) { return call_method<"setPixels", void>(pixels, offset, stride, x, y, width, height); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> p, jint flags) { return call_method<"writeToParcel", void>(p, flags); }
	jni::ref<android::graphics::Bitmap> extractAlpha() { return call_method<"extractAlpha", jni::ref<android::graphics::Bitmap>>(); }
	jni::ref<android::graphics::Bitmap> extractAlpha(jni::ref<android::graphics::Paint> paint, jni::ref<jni::array<jint>> offsetXY) { return call_method<"extractAlpha", jni::ref<android::graphics::Bitmap>>(paint, offsetXY); }
	jboolean sameAs(jni::ref<android::graphics::Bitmap> other) { return call_method<"sameAs", jboolean>(other); }
	void prepareToDraw() { return call_method<"prepareToDraw", void>(); }
	jni::ref<android::hardware::HardwareBuffer> getHardwareBuffer() { return call_method<"getHardwareBuffer", jni::ref<android::hardware::HardwareBuffer>>(); }

protected:

	Bitmap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAP
