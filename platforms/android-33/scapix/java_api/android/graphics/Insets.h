// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_INSETS_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_INSETS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Insets; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Insets>
{
	static constexpr fixed_string class_name = "android/graphics/Insets";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_INSETS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_INSETS)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_INSETS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Insets : public jni::object_base<"android/graphics/Insets",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<android::graphics::Insets> NONE() { return get_static_field<"NONE", jni::ref<android::graphics::Insets>>(); }
	jint bottom() { return get_field<"bottom", jint>(); }
	jint left() { return get_field<"left", jint>(); }
	jint right() { return get_field<"right", jint>(); }
	jint top() { return get_field<"top", jint>(); }

	static jni::ref<android::graphics::Insets> of(jint left, jint top, jint right, jint bottom) { return call_static_method<"of", jni::ref<android::graphics::Insets>>(left, top, right, bottom); }
	static jni::ref<android::graphics::Insets> of(jni::ref<android::graphics::Rect> r) { return call_static_method<"of", jni::ref<android::graphics::Insets>>(r); }
	static jni::ref<android::graphics::Insets> add(jni::ref<android::graphics::Insets> a, jni::ref<android::graphics::Insets> b) { return call_static_method<"add", jni::ref<android::graphics::Insets>>(a, b); }
	static jni::ref<android::graphics::Insets> subtract(jni::ref<android::graphics::Insets> a, jni::ref<android::graphics::Insets> b) { return call_static_method<"subtract", jni::ref<android::graphics::Insets>>(a, b); }
	static jni::ref<android::graphics::Insets> max(jni::ref<android::graphics::Insets> a, jni::ref<android::graphics::Insets> b) { return call_static_method<"max", jni::ref<android::graphics::Insets>>(a, b); }
	static jni::ref<android::graphics::Insets> min(jni::ref<android::graphics::Insets> a, jni::ref<android::graphics::Insets> b) { return call_static_method<"min", jni::ref<android::graphics::Insets>>(a, b); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }

protected:

	Insets(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_INSETS
