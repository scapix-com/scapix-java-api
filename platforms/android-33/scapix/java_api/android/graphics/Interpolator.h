// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_INTERPOLATOR_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_INTERPOLATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Interpolator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Interpolator>
{
	static constexpr fixed_string class_name = "android/graphics/Interpolator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_INTERPOLATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_INTERPOLATOR)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_INTERPOLATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Interpolator_Result.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Interpolator : public jni::object_base<"android/graphics/Interpolator",
	java::lang::Object>
{
public:

	using Result = Interpolator_Result;

	static jni::ref<android::graphics::Interpolator> new_object(jint valueCount) { return base_::new_object(valueCount); }
	static jni::ref<android::graphics::Interpolator> new_object(jint valueCount, jint frameCount) { return base_::new_object(valueCount, frameCount); }
	void reset(jint valueCount) { return call_method<"reset", void>(valueCount); }
	void reset(jint valueCount, jint frameCount) { return call_method<"reset", void>(valueCount, frameCount); }
	jint getKeyFrameCount() { return call_method<"getKeyFrameCount", jint>(); }
	jint getValueCount() { return call_method<"getValueCount", jint>(); }
	void setKeyFrame(jint index, jint msec, jni::ref<jni::array<jfloat>> values) { return call_method<"setKeyFrame", void>(index, msec, values); }
	void setKeyFrame(jint index, jint msec, jni::ref<jni::array<jfloat>> values, jni::ref<jni::array<jfloat>> blend) { return call_method<"setKeyFrame", void>(index, msec, values, blend); }
	void setRepeatMirror(jfloat repeatCount, jboolean mirror) { return call_method<"setRepeatMirror", void>(repeatCount, mirror); }
	jni::ref<android::graphics::Interpolator_Result> timeToValues(jni::ref<jni::array<jfloat>> values) { return call_method<"timeToValues", jni::ref<android::graphics::Interpolator_Result>>(values); }
	jni::ref<android::graphics::Interpolator_Result> timeToValues(jint msec, jni::ref<jni::array<jfloat>> values) { return call_method<"timeToValues", jni::ref<android::graphics::Interpolator_Result>>(msec, values); }

protected:

	Interpolator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_INTERPOLATOR
