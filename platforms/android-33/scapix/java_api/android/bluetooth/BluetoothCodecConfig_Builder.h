// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth { class BluetoothCodecConfig_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::BluetoothCodecConfig_Builder>
{
	static constexpr fixed_string class_name = "android/bluetooth/BluetoothCodecConfig$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/BluetoothCodecConfig.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::BluetoothCodecConfig_Builder : public jni::object_base<"android/bluetooth/BluetoothCodecConfig$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> new_object() { return base_::new_object(); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setCodecType(jint codecType) { return call_method<"setCodecType", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(codecType); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setCodecPriority(jint codecPriority) { return call_method<"setCodecPriority", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(codecPriority); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setSampleRate(jint sampleRate) { return call_method<"setSampleRate", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(sampleRate); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setBitsPerSample(jint bitsPerSample) { return call_method<"setBitsPerSample", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(bitsPerSample); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setChannelMode(jint channelMode) { return call_method<"setChannelMode", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(channelMode); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setCodecSpecific1(jlong codecSpecific1) { return call_method<"setCodecSpecific1", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(codecSpecific1); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setCodecSpecific2(jlong codecSpecific2) { return call_method<"setCodecSpecific2", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(codecSpecific2); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setCodecSpecific3(jlong codecSpecific3) { return call_method<"setCodecSpecific3", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(codecSpecific3); }
	jni::ref<android::bluetooth::BluetoothCodecConfig_Builder> setCodecSpecific4(jlong codecSpecific4) { return call_method<"setCodecSpecific4", jni::ref<android::bluetooth::BluetoothCodecConfig_Builder>>(codecSpecific4); }
	jni::ref<android::bluetooth::BluetoothCodecConfig> build() { return call_method<"build", jni::ref<android::bluetooth::BluetoothCodecConfig>>(); }

protected:

	BluetoothCodecConfig_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_BUILDER
