// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth::le { class ScanFilter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::le::ScanFilter>
{
	static constexpr fixed_string class_name = "android/bluetooth/le/ScanFilter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/le/ScanResult.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/ParcelUuid.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/bluetooth/le/ScanFilter_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::le::ScanFilter : public jni::object_base<"android/bluetooth/le/ScanFilter",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = ScanFilter_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jni::ref<java::lang::String> getDeviceName() { return call_method<"getDeviceName", jni::ref<java::lang::String>>(); }
	jni::ref<android::os::ParcelUuid> getServiceUuid() { return call_method<"getServiceUuid", jni::ref<android::os::ParcelUuid>>(); }
	jni::ref<android::os::ParcelUuid> getServiceUuidMask() { return call_method<"getServiceUuidMask", jni::ref<android::os::ParcelUuid>>(); }
	jni::ref<android::os::ParcelUuid> getServiceSolicitationUuid() { return call_method<"getServiceSolicitationUuid", jni::ref<android::os::ParcelUuid>>(); }
	jni::ref<android::os::ParcelUuid> getServiceSolicitationUuidMask() { return call_method<"getServiceSolicitationUuidMask", jni::ref<android::os::ParcelUuid>>(); }
	jni::ref<java::lang::String> getDeviceAddress() { return call_method<"getDeviceAddress", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> getServiceData() { return call_method<"getServiceData", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> getServiceDataMask() { return call_method<"getServiceDataMask", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<android::os::ParcelUuid> getServiceDataUuid() { return call_method<"getServiceDataUuid", jni::ref<android::os::ParcelUuid>>(); }
	jint getManufacturerId() { return call_method<"getManufacturerId", jint>(); }
	jni::ref<jni::array<jbyte>> getManufacturerData() { return call_method<"getManufacturerData", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> getManufacturerDataMask() { return call_method<"getManufacturerDataMask", jni::ref<jni::array<jbyte>>>(); }
	jint getAdvertisingDataType() { return call_method<"getAdvertisingDataType", jint>(); }
	jni::ref<jni::array<jbyte>> getAdvertisingData() { return call_method<"getAdvertisingData", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> getAdvertisingDataMask() { return call_method<"getAdvertisingDataMask", jni::ref<jni::array<jbyte>>>(); }
	jboolean matches(jni::ref<android::bluetooth::le::ScanResult> scanResult) { return call_method<"matches", jboolean>(scanResult); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }

protected:

	ScanFilter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANFILTER
