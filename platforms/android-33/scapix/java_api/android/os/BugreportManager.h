// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_BUGREPORTMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_BUGREPORTMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class BugreportManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::BugreportManager>
{
	static constexpr fixed_string class_name = "android/os/BugreportManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_BUGREPORTMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_BUGREPORTMANAGER)
#define SCAPIX_JAVA_API_ANDROID_OS_BUGREPORTMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/BugreportManager_BugreportCallback.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::BugreportManager : public jni::object_base<"android/os/BugreportManager",
	java::lang::Object>
{
public:

	using BugreportCallback = BugreportManager_BugreportCallback;

	void startConnectivityBugreport(jni::ref<android::os::ParcelFileDescriptor> bugreportFd, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::BugreportManager_BugreportCallback> callback) { return call_method<"startConnectivityBugreport", void>(bugreportFd, executor, callback); }
	void cancelBugreport() { return call_method<"cancelBugreport", void>(); }

protected:

	BugreportManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_BUGREPORTMANAGER
