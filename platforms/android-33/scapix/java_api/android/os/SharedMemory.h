// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_SHAREDMEMORY_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_SHAREDMEMORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class SharedMemory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::SharedMemory>
{
	static constexpr fixed_string class_name = "android/os/SharedMemory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_SHAREDMEMORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_SHAREDMEMORY)
#define SCAPIX_JAVA_API_ANDROID_OS_SHAREDMEMORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::SharedMemory : public jni::object_base<"android/os/SharedMemory",
	java::lang::Object,
	android::os::Parcelable,
	java::io::Closeable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::os::SharedMemory> create(jni::ref<java::lang::String> name, jint size) { return call_static_method<"create", jni::ref<android::os::SharedMemory>>(name, size); }
	static jni::ref<android::os::SharedMemory> fromFileDescriptor(jni::ref<android::os::ParcelFileDescriptor> fd) { return call_static_method<"fromFileDescriptor", jni::ref<android::os::SharedMemory>>(fd); }
	jboolean setProtect(jint prot) { return call_method<"setProtect", jboolean>(prot); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jni::ref<java::nio::ByteBuffer> mapReadWrite() { return call_method<"mapReadWrite", jni::ref<java::nio::ByteBuffer>>(); }
	jni::ref<java::nio::ByteBuffer> mapReadOnly() { return call_method<"mapReadOnly", jni::ref<java::nio::ByteBuffer>>(); }
	jni::ref<java::nio::ByteBuffer> map(jint prot, jint offset, jint length) { return call_method<"map", jni::ref<java::nio::ByteBuffer>>(prot, offset, length); }
	static void unmap(jni::ref<java::nio::ByteBuffer> buffer) { return call_static_method<"unmap", void>(buffer); }
	void close() { return call_method<"close", void>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	SharedMemory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_SHAREDMEMORY
