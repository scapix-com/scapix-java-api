// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_DISPLAY_DEVICEPRODUCTINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_DISPLAY_DEVICEPRODUCTINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::display { class DeviceProductInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::display::DeviceProductInfo>
{
	static constexpr fixed_string class_name = "android/hardware/display/DeviceProductInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_DISPLAY_DEVICEPRODUCTINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_DISPLAY_DEVICEPRODUCTINFO)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_DISPLAY_DEVICEPRODUCTINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::display::DeviceProductInfo : public jni::object_base<"android/hardware/display/DeviceProductInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jint CONNECTION_TO_SINK_BUILT_IN() { return get_static_field<"CONNECTION_TO_SINK_BUILT_IN", jint>(); }
	static jint CONNECTION_TO_SINK_DIRECT() { return get_static_field<"CONNECTION_TO_SINK_DIRECT", jint>(); }
	static jint CONNECTION_TO_SINK_TRANSITIVE() { return get_static_field<"CONNECTION_TO_SINK_TRANSITIVE", jint>(); }
	static jint CONNECTION_TO_SINK_UNKNOWN() { return get_static_field<"CONNECTION_TO_SINK_UNKNOWN", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::hardware::display::DeviceProductInfo> new_object(jni::ref<java::lang::String> name, jni::ref<java::lang::String> manufacturerPnpId, jni::ref<java::lang::String> productId, jint modelYear, jint connectionToSinkType) { return base_::new_object(name, manufacturerPnpId, productId, modelYear, connectionToSinkType); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getManufacturerPnpId() { return call_method<"getManufacturerPnpId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getProductId() { return call_method<"getProductId", jni::ref<java::lang::String>>(); }
	jint getModelYear() { return call_method<"getModelYear", jint>(); }
	jint getManufactureYear() { return call_method<"getManufactureYear", jint>(); }
	jint getManufactureWeek() { return call_method<"getManufactureWeek", jint>(); }
	jint getConnectionToSinkType() { return call_method<"getConnectionToSinkType", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	DeviceProductInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_DISPLAY_DEVICEPRODUCTINFO
