// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_MULTIRESOLUTIONSTREAMCONFIGURATIONMAP_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_MULTIRESOLUTIONSTREAMCONFIGURATIONMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::camera2::params { class MultiResolutionStreamConfigurationMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::camera2::params::MultiResolutionStreamConfigurationMap>
{
	static constexpr fixed_string class_name = "android/hardware/camera2/params/MultiResolutionStreamConfigurationMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_MULTIRESOLUTIONSTREAMCONFIGURATIONMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_MULTIRESOLUTIONSTREAMCONFIGURATIONMAP)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_MULTIRESOLUTIONSTREAMCONFIGURATIONMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::camera2::params::MultiResolutionStreamConfigurationMap : public jni::object_base<"android/hardware/camera2/params/MultiResolutionStreamConfigurationMap",
	java::lang::Object>
{
public:

	jni::ref<jni::array<jint>> getOutputFormats() { return call_method<"getOutputFormats", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<jint>> getInputFormats() { return call_method<"getInputFormats", jni::ref<jni::array<jint>>>(); }
	jni::ref<java::util::Collection> getOutputInfo(jint format) { return call_method<"getOutputInfo", jni::ref<java::util::Collection>>(format); }
	jni::ref<java::util::Collection> getInputInfo(jint format) { return call_method<"getInputInfo", jni::ref<java::util::Collection>>(format); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	MultiResolutionStreamConfigurationMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_MULTIRESOLUTIONSTREAMCONFIGURATIONMAP
