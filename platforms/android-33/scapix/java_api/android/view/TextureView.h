// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/view/View.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_TEXTUREVIEW_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_TEXTUREVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class TextureView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::TextureView>
{
	static constexpr fixed_string class_name = "android/view/TextureView";
	using base_classes = std::tuple<scapix::java_api::android::view::View>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_TEXTUREVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_TEXTUREVIEW)
#define SCAPIX_JAVA_API_ANDROID_VIEW_TEXTUREVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/SurfaceTexture.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/TextureView_SurfaceTextureListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::TextureView : public jni::object_base<"android/view/TextureView",
	android::view::View>
{
public:

	using SurfaceTextureListener = TextureView_SurfaceTextureListener;

	static jni::ref<android::view::TextureView> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::view::TextureView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::view::TextureView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::view::TextureView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jboolean isOpaque() { return call_method<"isOpaque", jboolean>(); }
	void setOpaque(jboolean opaque) { return call_method<"setOpaque", void>(opaque); }
	void setLayerType(jint layerType, jni::ref<android::graphics::Paint> paint) { return call_method<"setLayerType", void>(layerType, paint); }
	void setLayerPaint(jni::ref<android::graphics::Paint> paint) { return call_method<"setLayerPaint", void>(paint); }
	jint getLayerType() { return call_method<"getLayerType", jint>(); }
	void buildLayer() { return call_method<"buildLayer", void>(); }
	void setForeground(jni::ref<android::graphics::drawable::Drawable> foreground) { return call_method<"setForeground", void>(foreground); }
	void setBackgroundDrawable(jni::ref<android::graphics::drawable::Drawable> background) { return call_method<"setBackgroundDrawable", void>(background); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }
	void setTransform(jni::ref<android::graphics::Matrix> transform) { return call_method<"setTransform", void>(transform); }
	jni::ref<android::graphics::Matrix> getTransform(jni::ref<android::graphics::Matrix> transform) { return call_method<"getTransform", jni::ref<android::graphics::Matrix>>(transform); }
	jni::ref<android::graphics::Bitmap> getBitmap() { return call_method<"getBitmap", jni::ref<android::graphics::Bitmap>>(); }
	jni::ref<android::graphics::Bitmap> getBitmap(jint width, jint height) { return call_method<"getBitmap", jni::ref<android::graphics::Bitmap>>(width, height); }
	jni::ref<android::graphics::Bitmap> getBitmap(jni::ref<android::graphics::Bitmap> bitmap) { return call_method<"getBitmap", jni::ref<android::graphics::Bitmap>>(bitmap); }
	jboolean isAvailable() { return call_method<"isAvailable", jboolean>(); }
	jni::ref<android::graphics::Canvas> lockCanvas() { return call_method<"lockCanvas", jni::ref<android::graphics::Canvas>>(); }
	jni::ref<android::graphics::Canvas> lockCanvas(jni::ref<android::graphics::Rect> dirty) { return call_method<"lockCanvas", jni::ref<android::graphics::Canvas>>(dirty); }
	void unlockCanvasAndPost(jni::ref<android::graphics::Canvas> canvas) { return call_method<"unlockCanvasAndPost", void>(canvas); }
	jni::ref<android::graphics::SurfaceTexture> getSurfaceTexture() { return call_method<"getSurfaceTexture", jni::ref<android::graphics::SurfaceTexture>>(); }
	void setSurfaceTexture(jni::ref<android::graphics::SurfaceTexture> surfaceTexture) { return call_method<"setSurfaceTexture", void>(surfaceTexture); }
	jni::ref<android::view::TextureView_SurfaceTextureListener> getSurfaceTextureListener() { return call_method<"getSurfaceTextureListener", jni::ref<android::view::TextureView_SurfaceTextureListener>>(); }
	void setSurfaceTextureListener(jni::ref<android::view::TextureView_SurfaceTextureListener> listener) { return call_method<"setSurfaceTextureListener", void>(listener); }

protected:

	TextureView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_TEXTUREVIEW
