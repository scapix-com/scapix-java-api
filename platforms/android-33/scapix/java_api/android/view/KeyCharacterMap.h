// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_KEYCHARACTERMAP_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_KEYCHARACTERMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class KeyCharacterMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::KeyCharacterMap>
{
	static constexpr fixed_string class_name = "android/view/KeyCharacterMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_KEYCHARACTERMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_KEYCHARACTERMAP)
#define SCAPIX_JAVA_API_ANDROID_VIEW_KEYCHARACTERMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/view/KeyCharacterMap_KeyData.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/KeyCharacterMap_UnavailableException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::KeyCharacterMap : public jni::object_base<"android/view/KeyCharacterMap",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using UnavailableException = KeyCharacterMap_UnavailableException;
	using KeyData = KeyCharacterMap_KeyData;

	static jint ALPHA() { return get_static_field<"ALPHA", jint>(); }
	static jint BUILT_IN_KEYBOARD() { return get_static_field<"BUILT_IN_KEYBOARD", jint>(); }
	static jint COMBINING_ACCENT() { return get_static_field<"COMBINING_ACCENT", jint>(); }
	static jint COMBINING_ACCENT_MASK() { return get_static_field<"COMBINING_ACCENT_MASK", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint FULL() { return get_static_field<"FULL", jint>(); }
	static jchar HEX_INPUT() { return get_static_field<"HEX_INPUT", jchar>(); }
	static jint MODIFIER_BEHAVIOR_CHORDED() { return get_static_field<"MODIFIER_BEHAVIOR_CHORDED", jint>(); }
	static jint MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED() { return get_static_field<"MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED", jint>(); }
	static jint NUMERIC() { return get_static_field<"NUMERIC", jint>(); }
	static jchar PICKER_DIALOG_INPUT() { return get_static_field<"PICKER_DIALOG_INPUT", jchar>(); }
	static jint PREDICTIVE() { return get_static_field<"PREDICTIVE", jint>(); }
	static jint SPECIAL_FUNCTION() { return get_static_field<"SPECIAL_FUNCTION", jint>(); }
	static jint VIRTUAL_KEYBOARD() { return get_static_field<"VIRTUAL_KEYBOARD", jint>(); }

	static jni::ref<android::view::KeyCharacterMap> load(jint deviceId) { return call_static_method<"load", jni::ref<android::view::KeyCharacterMap>>(deviceId); }
	jint get(jint keyCode, jint metaState) { return call_method<"get", jint>(keyCode, metaState); }
	jchar getNumber(jint keyCode) { return call_method<"getNumber", jchar>(keyCode); }
	jchar getMatch(jint keyCode, jni::ref<jni::array<jchar>> chars) { return call_method<"getMatch", jchar>(keyCode, chars); }
	jchar getMatch(jint keyCode, jni::ref<jni::array<jchar>> chars, jint metaState) { return call_method<"getMatch", jchar>(keyCode, chars, metaState); }
	jchar getDisplayLabel(jint keyCode) { return call_method<"getDisplayLabel", jchar>(keyCode); }
	static jint getDeadChar(jint accent, jint c) { return call_static_method<"getDeadChar", jint>(accent, c); }
	jboolean getKeyData(jint keyCode, jni::ref<android::view::KeyCharacterMap_KeyData> results) { return call_method<"getKeyData", jboolean>(keyCode, results); }
	jni::ref<jni::array<android::view::KeyEvent>> getEvents(jni::ref<jni::array<jchar>> chars) { return call_method<"getEvents", jni::ref<jni::array<android::view::KeyEvent>>>(chars); }
	jboolean isPrintingKey(jint keyCode) { return call_method<"isPrintingKey", jboolean>(keyCode); }
	jint getKeyboardType() { return call_method<"getKeyboardType", jint>(); }
	jint getModifierBehavior() { return call_method<"getModifierBehavior", jint>(); }
	static jboolean deviceHasKey(jint keyCode) { return call_static_method<"deviceHasKey", jboolean>(keyCode); }
	static jni::ref<jni::array<jboolean>> deviceHasKeys(jni::ref<jni::array<jint>> keyCodes) { return call_static_method<"deviceHasKeys", jni::ref<jni::array<jboolean>>>(keyCodes); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }

protected:

	KeyCharacterMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_KEYCHARACTERMAP
