// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/view/ViewManager.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_WINDOWMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_WINDOWMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class WindowManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::WindowManager>
{
	static constexpr fixed_string class_name = "android/view/WindowManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::view::ViewManager>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_WINDOWMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_WINDOWMANAGER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_WINDOWMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/view/Display.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/WindowMetrics.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/android/view/WindowManager_LayoutParams.h>
#include <scapix/java_api/android/view/WindowManager_InvalidDisplayException.h>
#include <scapix/java_api/android/view/WindowManager_BadTokenException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::WindowManager : public jni::object_base<"android/view/WindowManager",
	java::lang::Object,
	android::view::ViewManager>
{
public:

	using LayoutParams = WindowManager_LayoutParams;
	using InvalidDisplayException = WindowManager_InvalidDisplayException;
	using BadTokenException = WindowManager_BadTokenException;

	jni::ref<android::view::Display> getDefaultDisplay() { return call_method<"getDefaultDisplay", jni::ref<android::view::Display>>(); }
	void removeViewImmediate(jni::ref<android::view::View> p1) { return call_method<"removeViewImmediate", void>(p1); }
	jni::ref<android::view::WindowMetrics> getCurrentWindowMetrics() { return call_method<"getCurrentWindowMetrics", jni::ref<android::view::WindowMetrics>>(); }
	jni::ref<android::view::WindowMetrics> getMaximumWindowMetrics() { return call_method<"getMaximumWindowMetrics", jni::ref<android::view::WindowMetrics>>(); }
	jboolean isCrossWindowBlurEnabled() { return call_method<"isCrossWindowBlurEnabled", jboolean>(); }
	void addCrossWindowBlurEnabledListener(jni::ref<java::util::function::Consumer> listener) { return call_method<"addCrossWindowBlurEnabledListener", void>(listener); }
	void addCrossWindowBlurEnabledListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> listener) { return call_method<"addCrossWindowBlurEnabledListener", void>(executor, listener); }
	void removeCrossWindowBlurEnabledListener(jni::ref<java::util::function::Consumer> listener) { return call_method<"removeCrossWindowBlurEnabledListener", void>(listener); }

protected:

	WindowManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_WINDOWMANAGER
