// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_FWD
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::provider { class MediaStore; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::provider::MediaStore>
{
	static constexpr fixed_string class_name = "android/provider/MediaStore";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE)
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/android/provider/MediaStore_Video.h>
#include <scapix/java_api/android/provider/MediaStore_PickerMediaColumns.h>
#include <scapix/java_api/android/provider/MediaStore_MediaColumns.h>
#include <scapix/java_api/android/provider/MediaStore_Images.h>
#include <scapix/java_api/android/provider/MediaStore_Files.h>
#include <scapix/java_api/android/provider/MediaStore_Downloads.h>
#include <scapix/java_api/android/provider/MediaStore_DownloadColumns.h>
#include <scapix/java_api/android/provider/MediaStore_Audio.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::provider::MediaStore : public jni::object_base<"android/provider/MediaStore",
	java::lang::Object>
{
public:

	using Video = MediaStore_Video;
	using PickerMediaColumns = MediaStore_PickerMediaColumns;
	using MediaColumns = MediaStore_MediaColumns;
	using Images = MediaStore_Images;
	using Files = MediaStore_Files;
	using Downloads = MediaStore_Downloads;
	using DownloadColumns = MediaStore_DownloadColumns;
	using Audio = MediaStore_Audio;

	static jni::ref<java::lang::String> ACTION_IMAGE_CAPTURE() { return get_static_field<"ACTION_IMAGE_CAPTURE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_IMAGE_CAPTURE_SECURE() { return get_static_field<"ACTION_IMAGE_CAPTURE_SECURE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_PICK_IMAGES() { return get_static_field<"ACTION_PICK_IMAGES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_PICK_IMAGES_SETTINGS() { return get_static_field<"ACTION_PICK_IMAGES_SETTINGS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_REVIEW() { return get_static_field<"ACTION_REVIEW", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_REVIEW_SECURE() { return get_static_field<"ACTION_REVIEW_SECURE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_VIDEO_CAPTURE() { return get_static_field<"ACTION_VIDEO_CAPTURE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTHORITY() { return get_static_field<"AUTHORITY", jni::ref<java::lang::String>>(); }
	static jni::ref<android::net::Uri> AUTHORITY_URI() { return get_static_field<"AUTHORITY_URI", jni::ref<android::net::Uri>>(); }
	static jni::ref<java::lang::String> EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT() { return get_static_field<"EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_BRIGHTNESS() { return get_static_field<"EXTRA_BRIGHTNESS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_DURATION_LIMIT() { return get_static_field<"EXTRA_DURATION_LIMIT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_FINISH_ON_COMPLETION() { return get_static_field<"EXTRA_FINISH_ON_COMPLETION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_FULL_SCREEN() { return get_static_field<"EXTRA_FULL_SCREEN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_ALBUM() { return get_static_field<"EXTRA_MEDIA_ALBUM", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_ARTIST() { return get_static_field<"EXTRA_MEDIA_ARTIST", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_CAPABILITIES() { return get_static_field<"EXTRA_MEDIA_CAPABILITIES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_CAPABILITIES_UID() { return get_static_field<"EXTRA_MEDIA_CAPABILITIES_UID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_FOCUS() { return get_static_field<"EXTRA_MEDIA_FOCUS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_GENRE() { return get_static_field<"EXTRA_MEDIA_GENRE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_PLAYLIST() { return get_static_field<"EXTRA_MEDIA_PLAYLIST", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_RADIO_CHANNEL() { return get_static_field<"EXTRA_MEDIA_RADIO_CHANNEL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MEDIA_TITLE() { return get_static_field<"EXTRA_MEDIA_TITLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_OUTPUT() { return get_static_field<"EXTRA_OUTPUT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PICK_IMAGES_MAX() { return get_static_field<"EXTRA_PICK_IMAGES_MAX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SCREEN_ORIENTATION() { return get_static_field<"EXTRA_SCREEN_ORIENTATION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SHOW_ACTION_ICONS() { return get_static_field<"EXTRA_SHOW_ACTION_ICONS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SIZE_LIMIT() { return get_static_field<"EXTRA_SIZE_LIMIT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_VIDEO_QUALITY() { return get_static_field<"EXTRA_VIDEO_QUALITY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH() { return get_static_field<"INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_ACTION_MEDIA_SEARCH() { return get_static_field<"INTENT_ACTION_MEDIA_SEARCH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_ACTION_MUSIC_PLAYER() { return get_static_field<"INTENT_ACTION_MUSIC_PLAYER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_ACTION_STILL_IMAGE_CAMERA() { return get_static_field<"INTENT_ACTION_STILL_IMAGE_CAMERA", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE() { return get_static_field<"INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_ACTION_TEXT_OPEN_FROM_SEARCH() { return get_static_field<"INTENT_ACTION_TEXT_OPEN_FROM_SEARCH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_ACTION_VIDEO_CAMERA() { return get_static_field<"INTENT_ACTION_VIDEO_CAMERA", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH() { return get_static_field<"INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH", jni::ref<java::lang::String>>(); }
	static jint MATCH_DEFAULT() { return get_static_field<"MATCH_DEFAULT", jint>(); }
	static jint MATCH_EXCLUDE() { return get_static_field<"MATCH_EXCLUDE", jint>(); }
	static jint MATCH_INCLUDE() { return get_static_field<"MATCH_INCLUDE", jint>(); }
	static jint MATCH_ONLY() { return get_static_field<"MATCH_ONLY", jint>(); }
	static jni::ref<java::lang::String> MEDIA_IGNORE_FILENAME() { return get_static_field<"MEDIA_IGNORE_FILENAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MEDIA_SCANNER_VOLUME() { return get_static_field<"MEDIA_SCANNER_VOLUME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> META_DATA_REVIEW_GALLERY_PREWARM_SERVICE() { return get_static_field<"META_DATA_REVIEW_GALLERY_PREWARM_SERVICE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE() { return get_static_field<"META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES() { return get_static_field<"QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> QUERY_ARG_MATCH_FAVORITE() { return get_static_field<"QUERY_ARG_MATCH_FAVORITE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> QUERY_ARG_MATCH_PENDING() { return get_static_field<"QUERY_ARG_MATCH_PENDING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> QUERY_ARG_MATCH_TRASHED() { return get_static_field<"QUERY_ARG_MATCH_TRASHED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> QUERY_ARG_RELATED_URI() { return get_static_field<"QUERY_ARG_RELATED_URI", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNKNOWN_STRING() { return get_static_field<"UNKNOWN_STRING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> VOLUME_EXTERNAL() { return get_static_field<"VOLUME_EXTERNAL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> VOLUME_EXTERNAL_PRIMARY() { return get_static_field<"VOLUME_EXTERNAL_PRIMARY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> VOLUME_INTERNAL() { return get_static_field<"VOLUME_INTERNAL", jni::ref<java::lang::String>>(); }

	static jni::ref<android::provider::MediaStore> new_object() { return base_::new_object(); }
	static jint getPickImagesMaxLimit() { return call_static_method<"getPickImagesMaxLimit", jint>(); }
	static jni::ref<android::net::Uri> setIncludePending(jni::ref<android::net::Uri> uri) { return call_static_method<"setIncludePending", jni::ref<android::net::Uri>>(uri); }
	static jni::ref<android::net::Uri> setRequireOriginal(jni::ref<android::net::Uri> uri) { return call_static_method<"setRequireOriginal", jni::ref<android::net::Uri>>(uri); }
	static jboolean getRequireOriginal(jni::ref<android::net::Uri> uri) { return call_static_method<"getRequireOriginal", jboolean>(uri); }
	static jni::ref<android::os::ParcelFileDescriptor> getOriginalMediaFormatFileDescriptor(jni::ref<android::content::Context> context, jni::ref<android::os::ParcelFileDescriptor> fileDescriptor) { return call_static_method<"getOriginalMediaFormatFileDescriptor", jni::ref<android::os::ParcelFileDescriptor>>(context, fileDescriptor); }
	static jni::ref<android::app::PendingIntent> createWriteRequest(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::util::Collection> uris) { return call_static_method<"createWriteRequest", jni::ref<android::app::PendingIntent>>(resolver, uris); }
	static jni::ref<android::app::PendingIntent> createTrashRequest(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::util::Collection> uris, jboolean value) { return call_static_method<"createTrashRequest", jni::ref<android::app::PendingIntent>>(resolver, uris, value); }
	static jni::ref<android::app::PendingIntent> createFavoriteRequest(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::util::Collection> uris, jboolean value) { return call_static_method<"createFavoriteRequest", jni::ref<android::app::PendingIntent>>(resolver, uris, value); }
	static jni::ref<android::app::PendingIntent> createDeleteRequest(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::util::Collection> uris) { return call_static_method<"createDeleteRequest", jni::ref<android::app::PendingIntent>>(resolver, uris); }
	static jni::ref<java::util::Set> getExternalVolumeNames(jni::ref<android::content::Context> context) { return call_static_method<"getExternalVolumeNames", jni::ref<java::util::Set>>(context); }
	static jni::ref<java::util::Set> getRecentExternalVolumeNames(jni::ref<android::content::Context> context) { return call_static_method<"getRecentExternalVolumeNames", jni::ref<java::util::Set>>(context); }
	static jni::ref<java::lang::String> getVolumeName(jni::ref<android::net::Uri> uri) { return call_static_method<"getVolumeName", jni::ref<java::lang::String>>(uri); }
	static jni::ref<android::net::Uri> getMediaScannerUri() { return call_static_method<"getMediaScannerUri", jni::ref<android::net::Uri>>(); }
	static jni::ref<java::lang::String> getVersion(jni::ref<android::content::Context> context) { return call_static_method<"getVersion", jni::ref<java::lang::String>>(context); }
	static jni::ref<java::lang::String> getVersion(jni::ref<android::content::Context> context, jni::ref<java::lang::String> volumeName) { return call_static_method<"getVersion", jni::ref<java::lang::String>>(context, volumeName); }
	static jlong getGeneration(jni::ref<android::content::Context> context, jni::ref<java::lang::String> volumeName) { return call_static_method<"getGeneration", jlong>(context, volumeName); }
	static jni::ref<android::net::Uri> getDocumentUri(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> mediaUri) { return call_static_method<"getDocumentUri", jni::ref<android::net::Uri>>(context, mediaUri); }
	static jni::ref<android::net::Uri> getMediaUri(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> documentUri) { return call_static_method<"getMediaUri", jni::ref<android::net::Uri>>(context, documentUri); }
	static jboolean isCurrentSystemGallery(jni::ref<android::content::ContentResolver> resolver, jint uid, jni::ref<java::lang::String> packageName) { return call_static_method<"isCurrentSystemGallery", jboolean>(resolver, uid, packageName); }
	static jni::ref<android::net::Uri> getRedactedUri(jni::ref<android::content::ContentResolver> resolver, jni::ref<android::net::Uri> uri) { return call_static_method<"getRedactedUri", jni::ref<android::net::Uri>>(resolver, uri); }
	static jni::ref<java::util::List> getRedactedUri(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::util::List> uris) { return call_static_method<"getRedactedUri", jni::ref<java::util::List>>(resolver, uris); }
	static jboolean canManageMedia(jni::ref<android::content::Context> context) { return call_static_method<"canManageMedia", jboolean>(context); }
	static jboolean isCurrentCloudMediaProviderAuthority(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::lang::String> authority) { return call_static_method<"isCurrentCloudMediaProviderAuthority", jboolean>(resolver, authority); }
	static jboolean isSupportedCloudMediaProviderAuthority(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::lang::String> authority) { return call_static_method<"isSupportedCloudMediaProviderAuthority", jboolean>(resolver, authority); }
	static void notifyCloudMediaChangedEvent(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::lang::String> authority, jni::ref<java::lang::String> currentMediaCollectionId) { return call_static_method<"notifyCloudMediaChangedEvent", void>(resolver, authority, currentMediaCollectionId); }

protected:

	MediaStore(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE
