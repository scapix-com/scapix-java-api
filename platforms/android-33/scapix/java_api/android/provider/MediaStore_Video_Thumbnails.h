// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/provider/BaseColumns.h>

#ifndef SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_VIDEO_THUMBNAILS_FWD
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_VIDEO_THUMBNAILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::provider { class MediaStore_Video_Thumbnails; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::provider::MediaStore_Video_Thumbnails>
{
	static constexpr fixed_string class_name = "android/provider/MediaStore$Video$Thumbnails";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::provider::BaseColumns>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_VIDEO_THUMBNAILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_VIDEO_THUMBNAILS)
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_VIDEO_THUMBNAILS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/BitmapFactory_Options.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/util/Size.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::provider::MediaStore_Video_Thumbnails : public jni::object_base<"android/provider/MediaStore$Video$Thumbnails",
	java::lang::Object,
	android::provider::BaseColumns>
{
public:

	static jni::ref<java::lang::String> DATA() { return get_static_field<"DATA", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFAULT_SORT_ORDER() { return get_static_field<"DEFAULT_SORT_ORDER", jni::ref<java::lang::String>>(); }
	static jni::ref<android::net::Uri> EXTERNAL_CONTENT_URI() { return get_static_field<"EXTERNAL_CONTENT_URI", jni::ref<android::net::Uri>>(); }
	static jint FULL_SCREEN_KIND() { return get_static_field<"FULL_SCREEN_KIND", jint>(); }
	static jni::ref<java::lang::String> HEIGHT() { return get_static_field<"HEIGHT", jni::ref<java::lang::String>>(); }
	static jni::ref<android::net::Uri> INTERNAL_CONTENT_URI() { return get_static_field<"INTERNAL_CONTENT_URI", jni::ref<android::net::Uri>>(); }
	static jni::ref<java::lang::String> KIND() { return get_static_field<"KIND", jni::ref<java::lang::String>>(); }
	static jint MICRO_KIND() { return get_static_field<"MICRO_KIND", jint>(); }
	static jint MINI_KIND() { return get_static_field<"MINI_KIND", jint>(); }
	static jni::ref<java::lang::String> VIDEO_ID() { return get_static_field<"VIDEO_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIDTH() { return get_static_field<"WIDTH", jni::ref<java::lang::String>>(); }

	static jni::ref<android::provider::MediaStore_Video_Thumbnails> new_object() { return base_::new_object(); }
	static void cancelThumbnailRequest(jni::ref<android::content::ContentResolver> cr, jlong origId) { return call_static_method<"cancelThumbnailRequest", void>(cr, origId); }
	static jni::ref<android::graphics::Bitmap> getThumbnail(jni::ref<android::content::ContentResolver> cr, jlong videoId, jint p3, jni::ref<android::graphics::BitmapFactory_Options> kind) { return call_static_method<"getThumbnail", jni::ref<android::graphics::Bitmap>>(cr, videoId, p3, kind); }
	static void cancelThumbnailRequest(jni::ref<android::content::ContentResolver> cr, jlong videoId, jlong p3) { return call_static_method<"cancelThumbnailRequest", void>(cr, videoId, p3); }
	static jni::ref<android::graphics::Bitmap> getThumbnail(jni::ref<android::content::ContentResolver> cr, jlong videoId, jlong p3, jint groupId, jni::ref<android::graphics::BitmapFactory_Options> p5) { return call_static_method<"getThumbnail", jni::ref<android::graphics::Bitmap>>(cr, videoId, p3, groupId, p5); }
	static jni::ref<android::net::Uri> getContentUri(jni::ref<java::lang::String> volumeName) { return call_static_method<"getContentUri", jni::ref<android::net::Uri>>(volumeName); }
	static jni::ref<android::util::Size> getKindSize(jint kind) { return call_static_method<"getKindSize", jni::ref<android::util::Size>>(kind); }

protected:

	MediaStore_Video_Thumbnails(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_MEDIASTORE_VIDEO_THUMBNAILS
