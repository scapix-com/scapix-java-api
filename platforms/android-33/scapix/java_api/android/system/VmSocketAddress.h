// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/net/SocketAddress.h>

#ifndef SCAPIX_JAVA_API_ANDROID_SYSTEM_VMSOCKETADDRESS_FWD
#define SCAPIX_JAVA_API_ANDROID_SYSTEM_VMSOCKETADDRESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::system { class VmSocketAddress; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::system::VmSocketAddress>
{
	static constexpr fixed_string class_name = "android/system/VmSocketAddress";
	using base_classes = std::tuple<scapix::java_api::java::net::SocketAddress>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SYSTEM_VMSOCKETADDRESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_SYSTEM_VMSOCKETADDRESS)
#define SCAPIX_JAVA_API_ANDROID_SYSTEM_VMSOCKETADDRESS

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::system::VmSocketAddress : public jni::object_base<"android/system/VmSocketAddress",
	java::net::SocketAddress>
{
public:

	static jni::ref<android::system::VmSocketAddress> new_object(jint svmPort, jint svmCid) { return base_::new_object(svmPort, svmCid); }
	jint getSvmPort() { return call_method<"getSvmPort", jint>(); }
	jint getSvmCid() { return call_method<"getSvmCid", jint>(); }

protected:

	VmSocketAddress(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SYSTEM_VMSOCKETADDRESS
