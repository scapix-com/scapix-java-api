// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_VPNMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_VPNMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class VpnManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::VpnManager>
{
	static constexpr fixed_string class_name = "android/net/VpnManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_VPNMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_VPNMANAGER)
#define SCAPIX_JAVA_API_ANDROID_NET_VPNMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/net/PlatformVpnProfile.h>
#include <scapix/java_api/android/net/VpnProfileState.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::VpnManager : public jni::object_base<"android/net/VpnManager",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> ACTION_VPN_MANAGER_EVENT() { return get_static_field<"ACTION_VPN_MANAGER_EVENT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED() { return get_static_field<"CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CATEGORY_EVENT_DEACTIVATED_BY_USER() { return get_static_field<"CATEGORY_EVENT_DEACTIVATED_BY_USER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CATEGORY_EVENT_IKE_ERROR() { return get_static_field<"CATEGORY_EVENT_IKE_ERROR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CATEGORY_EVENT_NETWORK_ERROR() { return get_static_field<"CATEGORY_EVENT_NETWORK_ERROR", jni::ref<java::lang::String>>(); }
	static jint ERROR_CLASS_NOT_RECOVERABLE() { return get_static_field<"ERROR_CLASS_NOT_RECOVERABLE", jint>(); }
	static jint ERROR_CLASS_RECOVERABLE() { return get_static_field<"ERROR_CLASS_RECOVERABLE", jint>(); }
	static jint ERROR_CODE_NETWORK_IO() { return get_static_field<"ERROR_CODE_NETWORK_IO", jint>(); }
	static jint ERROR_CODE_NETWORK_LOST() { return get_static_field<"ERROR_CODE_NETWORK_LOST", jint>(); }
	static jint ERROR_CODE_NETWORK_PROTOCOL_TIMEOUT() { return get_static_field<"ERROR_CODE_NETWORK_PROTOCOL_TIMEOUT", jint>(); }
	static jint ERROR_CODE_NETWORK_UNKNOWN_HOST() { return get_static_field<"ERROR_CODE_NETWORK_UNKNOWN_HOST", jint>(); }
	static jni::ref<java::lang::String> EXTRA_ERROR_CLASS() { return get_static_field<"EXTRA_ERROR_CLASS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_ERROR_CODE() { return get_static_field<"EXTRA_ERROR_CODE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SESSION_KEY() { return get_static_field<"EXTRA_SESSION_KEY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_TIMESTAMP_MILLIS() { return get_static_field<"EXTRA_TIMESTAMP_MILLIS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_UNDERLYING_LINK_PROPERTIES() { return get_static_field<"EXTRA_UNDERLYING_LINK_PROPERTIES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_UNDERLYING_NETWORK() { return get_static_field<"EXTRA_UNDERLYING_NETWORK", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_UNDERLYING_NETWORK_CAPABILITIES() { return get_static_field<"EXTRA_UNDERLYING_NETWORK_CAPABILITIES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_VPN_PROFILE_STATE() { return get_static_field<"EXTRA_VPN_PROFILE_STATE", jni::ref<java::lang::String>>(); }

	jni::ref<android::content::Intent> provisionVpnProfile(jni::ref<android::net::PlatformVpnProfile> profile) { return call_method<"provisionVpnProfile", jni::ref<android::content::Intent>>(profile); }
	void deleteProvisionedVpnProfile() { return call_method<"deleteProvisionedVpnProfile", void>(); }
	jni::ref<java::lang::String> startProvisionedVpnProfileSession() { return call_method<"startProvisionedVpnProfileSession", jni::ref<java::lang::String>>(); }
	void startProvisionedVpnProfile() { return call_method<"startProvisionedVpnProfile", void>(); }
	void stopProvisionedVpnProfile() { return call_method<"stopProvisionedVpnProfile", void>(); }
	jni::ref<android::net::VpnProfileState> getProvisionedVpnProfileState() { return call_method<"getProvisionedVpnProfileState", jni::ref<android::net::VpnProfileState>>(); }

protected:

	VpnManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_VPNMANAGER
