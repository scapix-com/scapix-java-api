// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_URI_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_URI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class Uri; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::Uri>
{
	static constexpr fixed_string class_name = "android/net/Uri";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_URI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_URI)
#define SCAPIX_JAVA_API_ANDROID_NET_URI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/Uri_Builder.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::Uri : public jni::object_base<"android/net/Uri",
	java::lang::Object,
	android::os::Parcelable,
	java::lang::Comparable>
{
public:

	using Builder = Uri_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<android::net::Uri> EMPTY() { return get_static_field<"EMPTY", jni::ref<android::net::Uri>>(); }

	jboolean isHierarchical() { return call_method<"isHierarchical", jboolean>(); }
	jboolean isOpaque() { return call_method<"isOpaque", jboolean>(); }
	jboolean isRelative() { return call_method<"isRelative", jboolean>(); }
	jboolean isAbsolute() { return call_method<"isAbsolute", jboolean>(); }
	jni::ref<java::lang::String> getScheme() { return call_method<"getScheme", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSchemeSpecificPart() { return call_method<"getSchemeSpecificPart", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncodedSchemeSpecificPart() { return call_method<"getEncodedSchemeSpecificPart", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAuthority() { return call_method<"getAuthority", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncodedAuthority() { return call_method<"getEncodedAuthority", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getUserInfo() { return call_method<"getUserInfo", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncodedUserInfo() { return call_method<"getEncodedUserInfo", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getHost() { return call_method<"getHost", jni::ref<java::lang::String>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	jni::ref<java::lang::String> getPath() { return call_method<"getPath", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncodedPath() { return call_method<"getEncodedPath", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getQuery() { return call_method<"getQuery", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncodedQuery() { return call_method<"getEncodedQuery", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFragment() { return call_method<"getFragment", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncodedFragment() { return call_method<"getEncodedFragment", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::List> getPathSegments() { return call_method<"getPathSegments", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> getLastPathSegment() { return call_method<"getLastPathSegment", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint compareTo(jni::ref<android::net::Uri> other) { return call_method<"compareTo", jint>(other); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<android::net::Uri_Builder> buildUpon() { return call_method<"buildUpon", jni::ref<android::net::Uri_Builder>>(); }
	static jni::ref<android::net::Uri> parse(jni::ref<java::lang::String> uriString) { return call_static_method<"parse", jni::ref<android::net::Uri>>(uriString); }
	static jni::ref<android::net::Uri> fromFile(jni::ref<java::io::File> file) { return call_static_method<"fromFile", jni::ref<android::net::Uri>>(file); }
	static jni::ref<android::net::Uri> fromParts(jni::ref<java::lang::String> scheme, jni::ref<java::lang::String> ssp, jni::ref<java::lang::String> fragment) { return call_static_method<"fromParts", jni::ref<android::net::Uri>>(scheme, ssp, fragment); }
	jni::ref<java::util::Set> getQueryParameterNames() { return call_method<"getQueryParameterNames", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::List> getQueryParameters(jni::ref<java::lang::String> key) { return call_method<"getQueryParameters", jni::ref<java::util::List>>(key); }
	jni::ref<java::lang::String> getQueryParameter(jni::ref<java::lang::String> key) { return call_method<"getQueryParameter", jni::ref<java::lang::String>>(key); }
	jboolean getBooleanQueryParameter(jni::ref<java::lang::String> key, jboolean defaultValue) { return call_method<"getBooleanQueryParameter", jboolean>(key, defaultValue); }
	jni::ref<android::net::Uri> normalizeScheme() { return call_method<"normalizeScheme", jni::ref<android::net::Uri>>(); }
	static void writeToParcel(jni::ref<android::os::Parcel> out, jni::ref<android::net::Uri> uri) { return call_static_method<"writeToParcel", void>(out, uri); }
	static jni::ref<java::lang::String> encode(jni::ref<java::lang::String> s) { return call_static_method<"encode", jni::ref<java::lang::String>>(s); }
	static jni::ref<java::lang::String> encode(jni::ref<java::lang::String> s, jni::ref<java::lang::String> allow) { return call_static_method<"encode", jni::ref<java::lang::String>>(s, allow); }
	static jni::ref<java::lang::String> decode(jni::ref<java::lang::String> s) { return call_static_method<"decode", jni::ref<java::lang::String>>(s); }
	static jni::ref<android::net::Uri> withAppendedPath(jni::ref<android::net::Uri> baseUri, jni::ref<java::lang::String> pathSegment) { return call_static_method<"withAppendedPath", jni::ref<android::net::Uri>>(baseUri, pathSegment); }

protected:

	Uri(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_URI
