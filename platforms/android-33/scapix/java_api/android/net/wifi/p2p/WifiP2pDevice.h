// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PDEVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PDEVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi::p2p { class WifiP2pDevice; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::p2p::WifiP2pDevice>
{
	static constexpr fixed_string class_name = "android/net/wifi/p2p/WifiP2pDevice";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PDEVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PDEVICE)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PDEVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pWfdInfo.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::p2p::WifiP2pDevice : public jni::object_base<"android/net/wifi/p2p/WifiP2pDevice",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jint AVAILABLE() { return get_static_field<"AVAILABLE", jint>(); }
	static jint CONNECTED() { return get_static_field<"CONNECTED", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint FAILED() { return get_static_field<"FAILED", jint>(); }
	static jint INVITED() { return get_static_field<"INVITED", jint>(); }
	static jint UNAVAILABLE() { return get_static_field<"UNAVAILABLE", jint>(); }
	jni::ref<java::lang::String> deviceAddress() { return get_field<"deviceAddress", jni::ref<java::lang::String>>(); }
	void deviceAddress(jni::ref<java::lang::String> v) { set_field<"deviceAddress", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> deviceName() { return get_field<"deviceName", jni::ref<java::lang::String>>(); }
	void deviceName(jni::ref<java::lang::String> v) { set_field<"deviceName", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> primaryDeviceType() { return get_field<"primaryDeviceType", jni::ref<java::lang::String>>(); }
	void primaryDeviceType(jni::ref<java::lang::String> v) { set_field<"primaryDeviceType", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> secondaryDeviceType() { return get_field<"secondaryDeviceType", jni::ref<java::lang::String>>(); }
	void secondaryDeviceType(jni::ref<java::lang::String> v) { set_field<"secondaryDeviceType", jni::ref<java::lang::String>>(v); }
	jint status() { return get_field<"status", jint>(); }
	void status(jint v) { set_field<"status", jint>(v); }

	static jni::ref<android::net::wifi::p2p::WifiP2pDevice> new_object() { return base_::new_object(); }
	static jni::ref<android::net::wifi::p2p::WifiP2pDevice> new_object(jni::ref<android::net::wifi::p2p::WifiP2pDevice> source) { return base_::new_object(source); }
	jni::ref<android::net::wifi::p2p::WifiP2pWfdInfo> getWfdInfo() { return call_method<"getWfdInfo", jni::ref<android::net::wifi::p2p::WifiP2pWfdInfo>>(); }
	jboolean wpsPbcSupported() { return call_method<"wpsPbcSupported", jboolean>(); }
	jboolean wpsKeypadSupported() { return call_method<"wpsKeypadSupported", jboolean>(); }
	jboolean wpsDisplaySupported() { return call_method<"wpsDisplaySupported", jboolean>(); }
	jboolean isServiceDiscoveryCapable() { return call_method<"isServiceDiscoveryCapable", jboolean>(); }
	jboolean isGroupOwner() { return call_method<"isGroupOwner", jboolean>(); }
	void update(jni::ref<android::net::wifi::p2p::WifiP2pDevice> device) { return call_method<"update", void>(device); }
	jni::ref<java::util::List> getVendorElements() { return call_method<"getVendorElements", jni::ref<java::util::List>>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	WifiP2pDevice(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PDEVICE
