// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi::hotspot2::pps { class Credential; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::hotspot2::pps::Credential>
{
	static constexpr fixed_string class_name = "android/net/wifi/hotspot2/pps/Credential";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/wifi/hotspot2/pps/Credential_CertificateCredential.h>
#include <scapix/java_api/android/net/wifi/hotspot2/pps/Credential_SimCredential.h>
#include <scapix/java_api/android/net/wifi/hotspot2/pps/Credential_UserCredential.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::hotspot2::pps::Credential : public jni::object_base<"android/net/wifi/hotspot2/pps/Credential",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using UserCredential = Credential_UserCredential;
	using SimCredential = Credential_SimCredential;
	using CertificateCredential = Credential_CertificateCredential;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::net::wifi::hotspot2::pps::Credential> new_object() { return base_::new_object(); }
	static jni::ref<android::net::wifi::hotspot2::pps::Credential> new_object(jni::ref<android::net::wifi::hotspot2::pps::Credential> source) { return base_::new_object(source); }
	void setRealm(jni::ref<java::lang::String> realm) { return call_method<"setRealm", void>(realm); }
	jni::ref<java::lang::String> getRealm() { return call_method<"getRealm", jni::ref<java::lang::String>>(); }
	void setUserCredential(jni::ref<android::net::wifi::hotspot2::pps::Credential_UserCredential> userCredential) { return call_method<"setUserCredential", void>(userCredential); }
	jni::ref<android::net::wifi::hotspot2::pps::Credential_UserCredential> getUserCredential() { return call_method<"getUserCredential", jni::ref<android::net::wifi::hotspot2::pps::Credential_UserCredential>>(); }
	void setCertCredential(jni::ref<android::net::wifi::hotspot2::pps::Credential_CertificateCredential> certCredential) { return call_method<"setCertCredential", void>(certCredential); }
	jni::ref<android::net::wifi::hotspot2::pps::Credential_CertificateCredential> getCertCredential() { return call_method<"getCertCredential", jni::ref<android::net::wifi::hotspot2::pps::Credential_CertificateCredential>>(); }
	void setSimCredential(jni::ref<android::net::wifi::hotspot2::pps::Credential_SimCredential> simCredential) { return call_method<"setSimCredential", void>(simCredential); }
	jni::ref<android::net::wifi::hotspot2::pps::Credential_SimCredential> getSimCredential() { return call_method<"getSimCredential", jni::ref<android::net::wifi::hotspot2::pps::Credential_SimCredential>>(); }
	void setCaCertificate(jni::ref<java::security::cert::X509Certificate> caCertificate) { return call_method<"setCaCertificate", void>(caCertificate); }
	jni::ref<java::security::cert::X509Certificate> getCaCertificate() { return call_method<"getCaCertificate", jni::ref<java::security::cert::X509Certificate>>(); }
	void setClientCertificateChain(jni::ref<jni::array<java::security::cert::X509Certificate>> certificateChain) { return call_method<"setClientCertificateChain", void>(certificateChain); }
	jni::ref<jni::array<java::security::cert::X509Certificate>> getClientCertificateChain() { return call_method<"getClientCertificateChain", jni::ref<jni::array<java::security::cert::X509Certificate>>>(); }
	void setClientPrivateKey(jni::ref<java::security::PrivateKey> clientPrivateKey) { return call_method<"setClientPrivateKey", void>(clientPrivateKey); }
	jni::ref<java::security::PrivateKey> getClientPrivateKey() { return call_method<"getClientPrivateKey", jni::ref<java::security::PrivateKey>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jboolean equals(jni::ref<java::lang::Object> thatObject) { return call_method<"equals", jboolean>(thatObject); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Credential(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_HOTSPOT2_PPS_CREDENTIAL
