// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_CONNECTIVITYREPORT_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_CONNECTIVITYREPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class ConnectivityDiagnosticsManager_ConnectivityReport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::ConnectivityDiagnosticsManager_ConnectivityReport>
{
	static constexpr fixed_string class_name = "android/net/ConnectivityDiagnosticsManager$ConnectivityReport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_CONNECTIVITYREPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_CONNECTIVITYREPORT)
#define SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_CONNECTIVITYREPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/LinkProperties.h>
#include <scapix/java_api/android/net/Network.h>
#include <scapix/java_api/android/net/NetworkCapabilities.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::ConnectivityDiagnosticsManager_ConnectivityReport : public jni::object_base<"android/net/ConnectivityDiagnosticsManager$ConnectivityReport",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<java::lang::String> KEY_NETWORK_PROBES_ATTEMPTED_BITMASK() { return get_static_field<"KEY_NETWORK_PROBES_ATTEMPTED_BITMASK", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> KEY_NETWORK_PROBES_SUCCEEDED_BITMASK() { return get_static_field<"KEY_NETWORK_PROBES_SUCCEEDED_BITMASK", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> KEY_NETWORK_VALIDATION_RESULT() { return get_static_field<"KEY_NETWORK_VALIDATION_RESULT", jni::ref<java::lang::String>>(); }
	static jint NETWORK_PROBE_DNS() { return get_static_field<"NETWORK_PROBE_DNS", jint>(); }
	static jint NETWORK_PROBE_FALLBACK() { return get_static_field<"NETWORK_PROBE_FALLBACK", jint>(); }
	static jint NETWORK_PROBE_HTTP() { return get_static_field<"NETWORK_PROBE_HTTP", jint>(); }
	static jint NETWORK_PROBE_HTTPS() { return get_static_field<"NETWORK_PROBE_HTTPS", jint>(); }
	static jint NETWORK_PROBE_PRIVATE_DNS() { return get_static_field<"NETWORK_PROBE_PRIVATE_DNS", jint>(); }
	static jint NETWORK_VALIDATION_RESULT_INVALID() { return get_static_field<"NETWORK_VALIDATION_RESULT_INVALID", jint>(); }
	static jint NETWORK_VALIDATION_RESULT_PARTIALLY_VALID() { return get_static_field<"NETWORK_VALIDATION_RESULT_PARTIALLY_VALID", jint>(); }
	static jint NETWORK_VALIDATION_RESULT_SKIPPED() { return get_static_field<"NETWORK_VALIDATION_RESULT_SKIPPED", jint>(); }
	static jint NETWORK_VALIDATION_RESULT_VALID() { return get_static_field<"NETWORK_VALIDATION_RESULT_VALID", jint>(); }

	static jni::ref<android::net::ConnectivityDiagnosticsManager_ConnectivityReport> new_object(jni::ref<android::net::Network> network, jlong reportTimestamp, jni::ref<android::net::LinkProperties> p3, jni::ref<android::net::NetworkCapabilities> linkProperties, jni::ref<android::os::PersistableBundle> networkCapabilities) { return base_::new_object(network, reportTimestamp, p3, linkProperties, networkCapabilities); }
	jni::ref<android::net::Network> getNetwork() { return call_method<"getNetwork", jni::ref<android::net::Network>>(); }
	jlong getReportTimestamp() { return call_method<"getReportTimestamp", jlong>(); }
	jni::ref<android::net::LinkProperties> getLinkProperties() { return call_method<"getLinkProperties", jni::ref<android::net::LinkProperties>>(); }
	jni::ref<android::net::NetworkCapabilities> getNetworkCapabilities() { return call_method<"getNetworkCapabilities", jni::ref<android::net::NetworkCapabilities>>(); }
	jni::ref<android::os::PersistableBundle> getAdditionalInfo() { return call_method<"getAdditionalInfo", jni::ref<android::os::PersistableBundle>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	ConnectivityDiagnosticsManager_ConnectivityReport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_CONNECTIVITYDIAGNOSTICSMANAGER_CONNECTIVITYREPORT
