// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_SAPROPOSAL_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_SAPROPOSAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::ipsec::ike { class SaProposal; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::ipsec::ike::SaProposal>
{
	static constexpr fixed_string class_name = "android/net/ipsec/ike/SaProposal";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_SAPROPOSAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_SAPROPOSAL)
#define SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_SAPROPOSAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::ipsec::ike::SaProposal : public jni::object_base<"android/net/ipsec/ike/SaProposal",
	java::lang::Object>
{
public:

	static jint DH_GROUP_1024_BIT_MODP() { return get_static_field<"DH_GROUP_1024_BIT_MODP", jint>(); }
	static jint DH_GROUP_1536_BIT_MODP() { return get_static_field<"DH_GROUP_1536_BIT_MODP", jint>(); }
	static jint DH_GROUP_2048_BIT_MODP() { return get_static_field<"DH_GROUP_2048_BIT_MODP", jint>(); }
	static jint DH_GROUP_3072_BIT_MODP() { return get_static_field<"DH_GROUP_3072_BIT_MODP", jint>(); }
	static jint DH_GROUP_4096_BIT_MODP() { return get_static_field<"DH_GROUP_4096_BIT_MODP", jint>(); }
	static jint DH_GROUP_CURVE_25519() { return get_static_field<"DH_GROUP_CURVE_25519", jint>(); }
	static jint DH_GROUP_NONE() { return get_static_field<"DH_GROUP_NONE", jint>(); }
	static jint ENCRYPTION_ALGORITHM_3DES() { return get_static_field<"ENCRYPTION_ALGORITHM_3DES", jint>(); }
	static jint ENCRYPTION_ALGORITHM_AES_CBC() { return get_static_field<"ENCRYPTION_ALGORITHM_AES_CBC", jint>(); }
	static jint ENCRYPTION_ALGORITHM_AES_CTR() { return get_static_field<"ENCRYPTION_ALGORITHM_AES_CTR", jint>(); }
	static jint ENCRYPTION_ALGORITHM_AES_GCM_12() { return get_static_field<"ENCRYPTION_ALGORITHM_AES_GCM_12", jint>(); }
	static jint ENCRYPTION_ALGORITHM_AES_GCM_16() { return get_static_field<"ENCRYPTION_ALGORITHM_AES_GCM_16", jint>(); }
	static jint ENCRYPTION_ALGORITHM_AES_GCM_8() { return get_static_field<"ENCRYPTION_ALGORITHM_AES_GCM_8", jint>(); }
	static jint ENCRYPTION_ALGORITHM_CHACHA20_POLY1305() { return get_static_field<"ENCRYPTION_ALGORITHM_CHACHA20_POLY1305", jint>(); }
	static jint INTEGRITY_ALGORITHM_AES_CMAC_96() { return get_static_field<"INTEGRITY_ALGORITHM_AES_CMAC_96", jint>(); }
	static jint INTEGRITY_ALGORITHM_AES_XCBC_96() { return get_static_field<"INTEGRITY_ALGORITHM_AES_XCBC_96", jint>(); }
	static jint INTEGRITY_ALGORITHM_HMAC_SHA1_96() { return get_static_field<"INTEGRITY_ALGORITHM_HMAC_SHA1_96", jint>(); }
	static jint INTEGRITY_ALGORITHM_HMAC_SHA2_256_128() { return get_static_field<"INTEGRITY_ALGORITHM_HMAC_SHA2_256_128", jint>(); }
	static jint INTEGRITY_ALGORITHM_HMAC_SHA2_384_192() { return get_static_field<"INTEGRITY_ALGORITHM_HMAC_SHA2_384_192", jint>(); }
	static jint INTEGRITY_ALGORITHM_HMAC_SHA2_512_256() { return get_static_field<"INTEGRITY_ALGORITHM_HMAC_SHA2_512_256", jint>(); }
	static jint INTEGRITY_ALGORITHM_NONE() { return get_static_field<"INTEGRITY_ALGORITHM_NONE", jint>(); }
	static jint KEY_LEN_AES_128() { return get_static_field<"KEY_LEN_AES_128", jint>(); }
	static jint KEY_LEN_AES_192() { return get_static_field<"KEY_LEN_AES_192", jint>(); }
	static jint KEY_LEN_AES_256() { return get_static_field<"KEY_LEN_AES_256", jint>(); }
	static jint KEY_LEN_UNUSED() { return get_static_field<"KEY_LEN_UNUSED", jint>(); }
	static jint PSEUDORANDOM_FUNCTION_AES128_CMAC() { return get_static_field<"PSEUDORANDOM_FUNCTION_AES128_CMAC", jint>(); }
	static jint PSEUDORANDOM_FUNCTION_AES128_XCBC() { return get_static_field<"PSEUDORANDOM_FUNCTION_AES128_XCBC", jint>(); }
	static jint PSEUDORANDOM_FUNCTION_HMAC_SHA1() { return get_static_field<"PSEUDORANDOM_FUNCTION_HMAC_SHA1", jint>(); }
	static jint PSEUDORANDOM_FUNCTION_SHA2_256() { return get_static_field<"PSEUDORANDOM_FUNCTION_SHA2_256", jint>(); }
	static jint PSEUDORANDOM_FUNCTION_SHA2_384() { return get_static_field<"PSEUDORANDOM_FUNCTION_SHA2_384", jint>(); }
	static jint PSEUDORANDOM_FUNCTION_SHA2_512() { return get_static_field<"PSEUDORANDOM_FUNCTION_SHA2_512", jint>(); }

	jni::ref<java::util::List> getEncryptionAlgorithms() { return call_method<"getEncryptionAlgorithms", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getIntegrityAlgorithms() { return call_method<"getIntegrityAlgorithms", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getDhGroups() { return call_method<"getDhGroups", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	static jni::ref<java::util::Set> getSupportedDhGroups() { return call_static_method<"getSupportedDhGroups", jni::ref<java::util::Set>>(); }

protected:

	SaProposal(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_SAPROPOSAL
