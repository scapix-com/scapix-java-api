// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESESSIONPARAMS_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESESSIONPARAMS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::ipsec::ike { class IkeSessionParams; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::ipsec::ike::IkeSessionParams>
{
	static constexpr fixed_string class_name = "android/net/ipsec/ike/IkeSessionParams";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESESSIONPARAMS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESESSIONPARAMS)
#define SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESESSIONPARAMS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/Network.h>
#include <scapix/java_api/android/net/ipsec/ike/IkeIdentification.h>
#include <scapix/java_api/android/net/ipsec/ike/IkeSessionParams_IkeAuthConfig.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/android/net/ipsec/ike/IkeSessionParams_IkeAuthPskConfig.h>
#include <scapix/java_api/android/net/ipsec/ike/IkeSessionParams_IkeAuthEapConfig.h>
#include <scapix/java_api/android/net/ipsec/ike/IkeSessionParams_IkeAuthDigitalSignRemoteConfig.h>
#include <scapix/java_api/android/net/ipsec/ike/IkeSessionParams_IkeAuthDigitalSignLocalConfig.h>
#include <scapix/java_api/android/net/ipsec/ike/IkeSessionParams_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::ipsec::ike::IkeSessionParams : public jni::object_base<"android/net/ipsec/ike/IkeSessionParams",
	java::lang::Object>
{
public:

	using IkeAuthPskConfig = IkeSessionParams_IkeAuthPskConfig;
	using IkeAuthEapConfig = IkeSessionParams_IkeAuthEapConfig;
	using IkeAuthDigitalSignRemoteConfig = IkeSessionParams_IkeAuthDigitalSignRemoteConfig;
	using IkeAuthDigitalSignLocalConfig = IkeSessionParams_IkeAuthDigitalSignLocalConfig;
	using IkeAuthConfig = IkeSessionParams_IkeAuthConfig;
	using Builder = IkeSessionParams_Builder;

	static jint IKE_OPTION_ACCEPT_ANY_REMOTE_ID() { return get_static_field<"IKE_OPTION_ACCEPT_ANY_REMOTE_ID", jint>(); }
	static jint IKE_OPTION_EAP_ONLY_AUTH() { return get_static_field<"IKE_OPTION_EAP_ONLY_AUTH", jint>(); }
	static jint IKE_OPTION_FORCE_PORT_4500() { return get_static_field<"IKE_OPTION_FORCE_PORT_4500", jint>(); }
	static jint IKE_OPTION_INITIAL_CONTACT() { return get_static_field<"IKE_OPTION_INITIAL_CONTACT", jint>(); }
	static jint IKE_OPTION_MOBIKE() { return get_static_field<"IKE_OPTION_MOBIKE", jint>(); }

	jni::ref<java::lang::String> getServerHostname() { return call_method<"getServerHostname", jni::ref<java::lang::String>>(); }
	jni::ref<android::net::Network> getNetwork() { return call_method<"getNetwork", jni::ref<android::net::Network>>(); }
	jni::ref<java::util::List> getIkeSaProposals() { return call_method<"getIkeSaProposals", jni::ref<java::util::List>>(); }
	jni::ref<android::net::ipsec::ike::IkeIdentification> getLocalIdentification() { return call_method<"getLocalIdentification", jni::ref<android::net::ipsec::ike::IkeIdentification>>(); }
	jni::ref<android::net::ipsec::ike::IkeIdentification> getRemoteIdentification() { return call_method<"getRemoteIdentification", jni::ref<android::net::ipsec::ike::IkeIdentification>>(); }
	jni::ref<android::net::ipsec::ike::IkeSessionParams_IkeAuthConfig> getLocalAuthConfig() { return call_method<"getLocalAuthConfig", jni::ref<android::net::ipsec::ike::IkeSessionParams_IkeAuthConfig>>(); }
	jni::ref<android::net::ipsec::ike::IkeSessionParams_IkeAuthConfig> getRemoteAuthConfig() { return call_method<"getRemoteAuthConfig", jni::ref<android::net::ipsec::ike::IkeSessionParams_IkeAuthConfig>>(); }
	jint getHardLifetimeSeconds() { return call_method<"getHardLifetimeSeconds", jint>(); }
	jint getSoftLifetimeSeconds() { return call_method<"getSoftLifetimeSeconds", jint>(); }
	jint getDpdDelaySeconds() { return call_method<"getDpdDelaySeconds", jint>(); }
	jint getNattKeepAliveDelaySeconds() { return call_method<"getNattKeepAliveDelaySeconds", jint>(); }
	jni::ref<jni::array<jint>> getRetransmissionTimeoutsMillis() { return call_method<"getRetransmissionTimeoutsMillis", jni::ref<jni::array<jint>>>(); }
	jboolean hasIkeOption(jint ikeOption) { return call_method<"hasIkeOption", jboolean>(ikeOption); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }

protected:

	IkeSessionParams(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_IPSEC_IKE_IKESESSIONPARAMS
