// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/renderscript/BaseObj.h>

#ifndef SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPT_FWD
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::renderscript { class Script; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::renderscript::Script>
{
	static constexpr fixed_string class_name = "android/renderscript/Script";
	using base_classes = std::tuple<scapix::java_api::android::renderscript::BaseObj>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPT)
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/renderscript/Allocation.h>
#include <scapix/java_api/android/renderscript/Element.h>
#include <scapix/java_api/android/renderscript/FieldPacker.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/renderscript/Script_LaunchOptions.h>
#include <scapix/java_api/android/renderscript/Script_KernelID.h>
#include <scapix/java_api/android/renderscript/Script_InvokeID.h>
#include <scapix/java_api/android/renderscript/Script_FieldID.h>
#include <scapix/java_api/android/renderscript/Script_FieldBase.h>
#include <scapix/java_api/android/renderscript/Script_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::renderscript::Script : public jni::object_base<"android/renderscript/Script",
	android::renderscript::BaseObj>
{
public:

	using LaunchOptions = Script_LaunchOptions;
	using KernelID = Script_KernelID;
	using InvokeID = Script_InvokeID;
	using FieldID = Script_FieldID;
	using FieldBase = Script_FieldBase;
	using Builder = Script_Builder;

	void bindAllocation(jni::ref<android::renderscript::Allocation> va, jint slot) { return call_method<"bindAllocation", void>(va, slot); }
	void setVar(jint index, jfloat v) { return call_method<"setVar", void>(index, v); }
	jfloat getVarF(jint index) { return call_method<"getVarF", jfloat>(index); }
	void setVar(jint index, jdouble v) { return call_method<"setVar", void>(index, v); }
	jdouble getVarD(jint index) { return call_method<"getVarD", jdouble>(index); }
	void setVar(jint index, jint v) { return call_method<"setVar", void>(index, v); }
	jint getVarI(jint index) { return call_method<"getVarI", jint>(index); }
	void setVar(jint index, jlong v) { return call_method<"setVar", void>(index, v); }
	jlong getVarJ(jint index) { return call_method<"getVarJ", jlong>(index); }
	void setVar(jint index, jboolean v) { return call_method<"setVar", void>(index, v); }
	jboolean getVarB(jint index) { return call_method<"getVarB", jboolean>(index); }
	void setVar(jint index, jni::ref<android::renderscript::BaseObj> o) { return call_method<"setVar", void>(index, o); }
	void setVar(jint index, jni::ref<android::renderscript::FieldPacker> v) { return call_method<"setVar", void>(index, v); }
	void setVar(jint index, jni::ref<android::renderscript::FieldPacker> v, jni::ref<android::renderscript::Element> e, jni::ref<jni::array<jint>> dims) { return call_method<"setVar", void>(index, v, e, dims); }
	void getVarV(jint index, jni::ref<android::renderscript::FieldPacker> v) { return call_method<"getVarV", void>(index, v); }
	void setTimeZone(jni::ref<java::lang::String> timeZone) { return call_method<"setTimeZone", void>(timeZone); }

protected:

	Script(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPT
