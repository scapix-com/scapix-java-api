// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/renderscript/ScriptIntrinsic.h>

#ifndef SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND_FWD
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::renderscript { class ScriptIntrinsicBlend; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::renderscript::ScriptIntrinsicBlend>
{
	static constexpr fixed_string class_name = "android/renderscript/ScriptIntrinsicBlend";
	using base_classes = std::tuple<scapix::java_api::android::renderscript::ScriptIntrinsic>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND)
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/renderscript/Allocation.h>
#include <scapix/java_api/android/renderscript/Element.h>
#include <scapix/java_api/android/renderscript/RenderScript.h>
#include <scapix/java_api/android/renderscript/Script_KernelID.h>
#include <scapix/java_api/android/renderscript/Script_LaunchOptions.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::renderscript::ScriptIntrinsicBlend : public jni::object_base<"android/renderscript/ScriptIntrinsicBlend",
	android::renderscript::ScriptIntrinsic>
{
public:

	static jni::ref<android::renderscript::ScriptIntrinsicBlend> create(jni::ref<android::renderscript::RenderScript> rs, jni::ref<android::renderscript::Element> e) { return call_static_method<"create", jni::ref<android::renderscript::ScriptIntrinsicBlend>>(rs, e); }
	void forEachClear(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachClear", void>(ain, aout); }
	void forEachClear(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachClear", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDClear() { return call_method<"getKernelIDClear", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachSrc(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachSrc", void>(ain, aout); }
	void forEachSrc(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachSrc", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDSrc() { return call_method<"getKernelIDSrc", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachDst(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachDst", void>(ain, aout); }
	void forEachDst(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachDst", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDDst() { return call_method<"getKernelIDDst", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachSrcOver(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachSrcOver", void>(ain, aout); }
	void forEachSrcOver(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachSrcOver", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDSrcOver() { return call_method<"getKernelIDSrcOver", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachDstOver(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachDstOver", void>(ain, aout); }
	void forEachDstOver(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachDstOver", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDDstOver() { return call_method<"getKernelIDDstOver", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachSrcIn(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachSrcIn", void>(ain, aout); }
	void forEachSrcIn(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachSrcIn", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDSrcIn() { return call_method<"getKernelIDSrcIn", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachDstIn(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachDstIn", void>(ain, aout); }
	void forEachDstIn(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachDstIn", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDDstIn() { return call_method<"getKernelIDDstIn", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachSrcOut(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachSrcOut", void>(ain, aout); }
	void forEachSrcOut(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachSrcOut", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDSrcOut() { return call_method<"getKernelIDSrcOut", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachDstOut(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachDstOut", void>(ain, aout); }
	void forEachDstOut(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachDstOut", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDDstOut() { return call_method<"getKernelIDDstOut", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachSrcAtop(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachSrcAtop", void>(ain, aout); }
	void forEachSrcAtop(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachSrcAtop", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDSrcAtop() { return call_method<"getKernelIDSrcAtop", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachDstAtop(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachDstAtop", void>(ain, aout); }
	void forEachDstAtop(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachDstAtop", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDDstAtop() { return call_method<"getKernelIDDstAtop", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachXor(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachXor", void>(ain, aout); }
	void forEachXor(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachXor", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDXor() { return call_method<"getKernelIDXor", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachMultiply(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachMultiply", void>(ain, aout); }
	void forEachMultiply(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachMultiply", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDMultiply() { return call_method<"getKernelIDMultiply", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachAdd(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachAdd", void>(ain, aout); }
	void forEachAdd(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachAdd", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDAdd() { return call_method<"getKernelIDAdd", jni::ref<android::renderscript::Script_KernelID>>(); }
	void forEachSubtract(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout) { return call_method<"forEachSubtract", void>(ain, aout); }
	void forEachSubtract(jni::ref<android::renderscript::Allocation> ain, jni::ref<android::renderscript::Allocation> aout, jni::ref<android::renderscript::Script_LaunchOptions> opt) { return call_method<"forEachSubtract", void>(ain, aout, opt); }
	jni::ref<android::renderscript::Script_KernelID> getKernelIDSubtract() { return call_method<"getKernelIDSubtract", jni::ref<android::renderscript::Script_KernelID>>(); }

protected:

	ScriptIntrinsicBlend(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_SCRIPTINTRINSICBLEND
