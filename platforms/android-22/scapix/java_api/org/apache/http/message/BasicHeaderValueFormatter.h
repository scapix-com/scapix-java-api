// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/message/HeaderValueFormatter.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHEADERVALUEFORMATTER_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHEADERVALUEFORMATTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::message { class BasicHeaderValueFormatter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::message::BasicHeaderValueFormatter>
{
	static constexpr fixed_string class_name = "org/apache/http/message/BasicHeaderValueFormatter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::message::HeaderValueFormatter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHEADERVALUEFORMATTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHEADERVALUEFORMATTER)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHEADERVALUEFORMATTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/apache/http/HeaderElement.h>
#include <scapix/java_api/org/apache/http/NameValuePair.h>
#include <scapix/java_api/org/apache/http/util/CharArrayBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::message::BasicHeaderValueFormatter : public jni::object_base<"org/apache/http/message/BasicHeaderValueFormatter",
	java::lang::Object,
	org::apache::http::message::HeaderValueFormatter>
{
public:

	static jni::ref<org::apache::http::message::BasicHeaderValueFormatter> DEFAULT() { return get_static_field<"DEFAULT", jni::ref<org::apache::http::message::BasicHeaderValueFormatter>>(); }
	static jni::ref<java::lang::String> SEPARATORS() { return get_static_field<"SEPARATORS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNSAFE_CHARS() { return get_static_field<"UNSAFE_CHARS", jni::ref<java::lang::String>>(); }

	static jni::ref<org::apache::http::message::BasicHeaderValueFormatter> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> formatElements(jni::ref<jni::array<org::apache::http::HeaderElement>> elems, jboolean quote, jni::ref<org::apache::http::message::HeaderValueFormatter> formatter) { return call_static_method<"formatElements", jni::ref<java::lang::String>>(elems, quote, formatter); }
	jni::ref<org::apache::http::util::CharArrayBuffer> formatElements(jni::ref<org::apache::http::util::CharArrayBuffer> buffer, jni::ref<jni::array<org::apache::http::HeaderElement>> elems, jboolean quote) { return call_method<"formatElements", jni::ref<org::apache::http::util::CharArrayBuffer>>(buffer, elems, quote); }
	static jni::ref<java::lang::String> formatHeaderElement(jni::ref<org::apache::http::HeaderElement> elem, jboolean quote, jni::ref<org::apache::http::message::HeaderValueFormatter> formatter) { return call_static_method<"formatHeaderElement", jni::ref<java::lang::String>>(elem, quote, formatter); }
	jni::ref<org::apache::http::util::CharArrayBuffer> formatHeaderElement(jni::ref<org::apache::http::util::CharArrayBuffer> buffer, jni::ref<org::apache::http::HeaderElement> elem, jboolean quote) { return call_method<"formatHeaderElement", jni::ref<org::apache::http::util::CharArrayBuffer>>(buffer, elem, quote); }
	static jni::ref<java::lang::String> formatParameters(jni::ref<jni::array<org::apache::http::NameValuePair>> nvps, jboolean quote, jni::ref<org::apache::http::message::HeaderValueFormatter> formatter) { return call_static_method<"formatParameters", jni::ref<java::lang::String>>(nvps, quote, formatter); }
	jni::ref<org::apache::http::util::CharArrayBuffer> formatParameters(jni::ref<org::apache::http::util::CharArrayBuffer> buffer, jni::ref<jni::array<org::apache::http::NameValuePair>> nvps, jboolean quote) { return call_method<"formatParameters", jni::ref<org::apache::http::util::CharArrayBuffer>>(buffer, nvps, quote); }
	static jni::ref<java::lang::String> formatNameValuePair(jni::ref<org::apache::http::NameValuePair> nvp, jboolean quote, jni::ref<org::apache::http::message::HeaderValueFormatter> formatter) { return call_static_method<"formatNameValuePair", jni::ref<java::lang::String>>(nvp, quote, formatter); }
	jni::ref<org::apache::http::util::CharArrayBuffer> formatNameValuePair(jni::ref<org::apache::http::util::CharArrayBuffer> buffer, jni::ref<org::apache::http::NameValuePair> nvp, jboolean quote) { return call_method<"formatNameValuePair", jni::ref<org::apache::http::util::CharArrayBuffer>>(buffer, nvp, quote); }

protected:

	BasicHeaderValueFormatter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHEADERVALUEFORMATTER
