// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/apache/http/message/AbstractHttpMessage.h>
#include <scapix/java_api/org/apache/http/HttpResponse.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHTTPRESPONSE_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHTTPRESPONSE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::message { class BasicHttpResponse; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::message::BasicHttpResponse>
{
	static constexpr fixed_string class_name = "org/apache/http/message/BasicHttpResponse";
	using base_classes = std::tuple<scapix::java_api::org::apache::http::message::AbstractHttpMessage, scapix::java_api::org::apache::http::HttpResponse>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHTTPRESPONSE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHTTPRESPONSE)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHTTPRESPONSE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/org/apache/http/HttpEntity.h>
#include <scapix/java_api/org/apache/http/ProtocolVersion.h>
#include <scapix/java_api/org/apache/http/ReasonPhraseCatalog.h>
#include <scapix/java_api/org/apache/http/StatusLine.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::message::BasicHttpResponse : public jni::object_base<"org/apache/http/message/BasicHttpResponse",
	org::apache::http::message::AbstractHttpMessage,
	org::apache::http::HttpResponse>
{
public:

	static jni::ref<org::apache::http::message::BasicHttpResponse> new_object(jni::ref<org::apache::http::StatusLine> statusline, jni::ref<org::apache::http::ReasonPhraseCatalog> catalog, jni::ref<java::util::Locale> locale) { return base_::new_object(statusline, catalog, locale); }
	static jni::ref<org::apache::http::message::BasicHttpResponse> new_object(jni::ref<org::apache::http::StatusLine> statusline) { return base_::new_object(statusline); }
	static jni::ref<org::apache::http::message::BasicHttpResponse> new_object(jni::ref<org::apache::http::ProtocolVersion> ver, jint code, jni::ref<java::lang::String> reason) { return base_::new_object(ver, code, reason); }
	jni::ref<org::apache::http::ProtocolVersion> getProtocolVersion() { return call_method<"getProtocolVersion", jni::ref<org::apache::http::ProtocolVersion>>(); }
	jni::ref<org::apache::http::StatusLine> getStatusLine() { return call_method<"getStatusLine", jni::ref<org::apache::http::StatusLine>>(); }
	jni::ref<org::apache::http::HttpEntity> getEntity() { return call_method<"getEntity", jni::ref<org::apache::http::HttpEntity>>(); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	void setStatusLine(jni::ref<org::apache::http::StatusLine> statusline) { return call_method<"setStatusLine", void>(statusline); }
	void setStatusLine(jni::ref<org::apache::http::ProtocolVersion> ver, jint code) { return call_method<"setStatusLine", void>(ver, code); }
	void setStatusLine(jni::ref<org::apache::http::ProtocolVersion> ver, jint code, jni::ref<java::lang::String> reason) { return call_method<"setStatusLine", void>(ver, code, reason); }
	void setStatusCode(jint code) { return call_method<"setStatusCode", void>(code); }
	void setReasonPhrase(jni::ref<java::lang::String> reason) { return call_method<"setReasonPhrase", void>(reason); }
	void setEntity(jni::ref<org::apache::http::HttpEntity> entity) { return call_method<"setEntity", void>(entity); }
	void setLocale(jni::ref<java::util::Locale> loc) { return call_method<"setLocale", void>(loc); }

protected:

	BasicHttpResponse(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICHTTPRESPONSE
