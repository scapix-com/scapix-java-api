// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/apache/http/impl/SocketHttpClientConnection.h>
#include <scapix/java_api/org/apache/http/conn/OperatedClientConnection.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_DEFAULTCLIENTCONNECTION_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_DEFAULTCLIENTCONNECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::impl::conn { class DefaultClientConnection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::impl::conn::DefaultClientConnection>
{
	static constexpr fixed_string class_name = "org/apache/http/impl/conn/DefaultClientConnection";
	using base_classes = std::tuple<scapix::java_api::org::apache::http::impl::SocketHttpClientConnection, scapix::java_api::org::apache::http::conn::OperatedClientConnection>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_DEFAULTCLIENTCONNECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_DEFAULTCLIENTCONNECTION)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_DEFAULTCLIENTCONNECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/org/apache/http/HttpHost.h>
#include <scapix/java_api/org/apache/http/HttpRequest.h>
#include <scapix/java_api/org/apache/http/HttpResponse.h>
#include <scapix/java_api/org/apache/http/params/HttpParams.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::impl::conn::DefaultClientConnection : public jni::object_base<"org/apache/http/impl/conn/DefaultClientConnection",
	org::apache::http::impl::SocketHttpClientConnection,
	org::apache::http::conn::OperatedClientConnection>
{
public:

	static jni::ref<org::apache::http::impl::conn::DefaultClientConnection> new_object() { return base_::new_object(); }
	jni::ref<org::apache::http::HttpHost> getTargetHost() { return call_method<"getTargetHost", jni::ref<org::apache::http::HttpHost>>(); }
	jboolean isSecure() { return call_method<"isSecure", jboolean>(); }
	jni::ref<java::net::Socket> getSocket() { return call_method<"getSocket", jni::ref<java::net::Socket>>(); }
	void opening(jni::ref<java::net::Socket> sock, jni::ref<org::apache::http::HttpHost> target) { return call_method<"opening", void>(sock, target); }
	void openCompleted(jboolean secure, jni::ref<org::apache::http::params::HttpParams> params) { return call_method<"openCompleted", void>(secure, params); }
	void shutdown() { return call_method<"shutdown", void>(); }
	void close() { return call_method<"close", void>(); }
	void update(jni::ref<java::net::Socket> sock, jni::ref<org::apache::http::HttpHost> target, jboolean secure, jni::ref<org::apache::http::params::HttpParams> params) { return call_method<"update", void>(sock, target, secure, params); }
	jni::ref<org::apache::http::HttpResponse> receiveResponseHeader() { return call_method<"receiveResponseHeader", jni::ref<org::apache::http::HttpResponse>>(); }
	void sendRequestHeader(jni::ref<org::apache::http::HttpRequest> request) { return call_method<"sendRequestHeader", void>(request); }

protected:

	DefaultClientConnection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_DEFAULTCLIENTCONNECTION
