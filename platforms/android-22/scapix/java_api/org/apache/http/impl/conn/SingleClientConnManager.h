// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/conn/ClientConnectionManager.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_SINGLECLIENTCONNMANAGER_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_SINGLECLIENTCONNMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::impl::conn { class SingleClientConnManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::impl::conn::SingleClientConnManager>
{
	static constexpr fixed_string class_name = "org/apache/http/impl/conn/SingleClientConnManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::conn::ClientConnectionManager>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_SINGLECLIENTCONNMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_SINGLECLIENTCONNMANAGER)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_SINGLECLIENTCONNMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/org/apache/http/conn/ClientConnectionRequest.h>
#include <scapix/java_api/org/apache/http/conn/ManagedClientConnection.h>
#include <scapix/java_api/org/apache/http/conn/routing/HttpRoute.h>
#include <scapix/java_api/org/apache/http/conn/scheme/SchemeRegistry.h>
#include <scapix/java_api/org/apache/http/params/HttpParams.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::impl::conn::SingleClientConnManager : public jni::object_base<"org/apache/http/impl/conn/SingleClientConnManager",
	java::lang::Object,
	org::apache::http::conn::ClientConnectionManager>
{
public:

	static jni::ref<java::lang::String> MISUSE_MESSAGE() { return get_static_field<"MISUSE_MESSAGE", jni::ref<java::lang::String>>(); }

	static jni::ref<org::apache::http::impl::conn::SingleClientConnManager> new_object(jni::ref<org::apache::http::params::HttpParams> params, jni::ref<org::apache::http::conn::scheme::SchemeRegistry> schreg) { return base_::new_object(params, schreg); }
	jni::ref<org::apache::http::conn::scheme::SchemeRegistry> getSchemeRegistry() { return call_method<"getSchemeRegistry", jni::ref<org::apache::http::conn::scheme::SchemeRegistry>>(); }
	jni::ref<org::apache::http::conn::ClientConnectionRequest> requestConnection(jni::ref<org::apache::http::conn::routing::HttpRoute> route, jni::ref<java::lang::Object> state) { return call_method<"requestConnection", jni::ref<org::apache::http::conn::ClientConnectionRequest>>(route, state); }
	jni::ref<org::apache::http::conn::ManagedClientConnection> getConnection(jni::ref<org::apache::http::conn::routing::HttpRoute> route, jni::ref<java::lang::Object> state) { return call_method<"getConnection", jni::ref<org::apache::http::conn::ManagedClientConnection>>(route, state); }
	void releaseConnection(jni::ref<org::apache::http::conn::ManagedClientConnection> conn, jlong validDuration, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"releaseConnection", void>(conn, validDuration, p3); }
	void closeExpiredConnections() { return call_method<"closeExpiredConnections", void>(); }
	void closeIdleConnections(jlong idletime, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"closeIdleConnections", void>(idletime, p2); }
	void shutdown() { return call_method<"shutdown", void>(); }

protected:

	SingleClientConnManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_SINGLECLIENTCONNMANAGER
