// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_TSCCM_ROUTESPECIFICPOOL_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_TSCCM_ROUTESPECIFICPOOL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::impl::conn::tsccm { class RouteSpecificPool; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::impl::conn::tsccm::RouteSpecificPool>
{
	static constexpr fixed_string class_name = "org/apache/http/impl/conn/tsccm/RouteSpecificPool";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_TSCCM_ROUTESPECIFICPOOL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_TSCCM_ROUTESPECIFICPOOL)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_TSCCM_ROUTESPECIFICPOOL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/org/apache/http/conn/routing/HttpRoute.h>
#include <scapix/java_api/org/apache/http/impl/conn/tsccm/BasicPoolEntry.h>
#include <scapix/java_api/org/apache/http/impl/conn/tsccm/WaitingThread.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::impl::conn::tsccm::RouteSpecificPool : public jni::object_base<"org/apache/http/impl/conn/tsccm/RouteSpecificPool",
	java::lang::Object>
{
public:

	static jni::ref<org::apache::http::impl::conn::tsccm::RouteSpecificPool> new_object(jni::ref<org::apache::http::conn::routing::HttpRoute> route, jint maxEntries) { return base_::new_object(route, maxEntries); }
	jni::ref<org::apache::http::conn::routing::HttpRoute> getRoute() { return call_method<"getRoute", jni::ref<org::apache::http::conn::routing::HttpRoute>>(); }
	jint getMaxEntries() { return call_method<"getMaxEntries", jint>(); }
	jboolean isUnused() { return call_method<"isUnused", jboolean>(); }
	jint getCapacity() { return call_method<"getCapacity", jint>(); }
	jint getEntryCount() { return call_method<"getEntryCount", jint>(); }
	jni::ref<org::apache::http::impl::conn::tsccm::BasicPoolEntry> allocEntry(jni::ref<java::lang::Object> state) { return call_method<"allocEntry", jni::ref<org::apache::http::impl::conn::tsccm::BasicPoolEntry>>(state); }
	void freeEntry(jni::ref<org::apache::http::impl::conn::tsccm::BasicPoolEntry> entry) { return call_method<"freeEntry", void>(entry); }
	void createdEntry(jni::ref<org::apache::http::impl::conn::tsccm::BasicPoolEntry> entry) { return call_method<"createdEntry", void>(entry); }
	jboolean deleteEntry(jni::ref<org::apache::http::impl::conn::tsccm::BasicPoolEntry> entry) { return call_method<"deleteEntry", jboolean>(entry); }
	void dropEntry() { return call_method<"dropEntry", void>(); }
	void queueThread(jni::ref<org::apache::http::impl::conn::tsccm::WaitingThread> wt) { return call_method<"queueThread", void>(wt); }
	jboolean hasThread() { return call_method<"hasThread", jboolean>(); }
	jni::ref<org::apache::http::impl::conn::tsccm::WaitingThread> nextThread() { return call_method<"nextThread", jni::ref<org::apache::http::impl::conn::tsccm::WaitingThread>>(); }
	void removeThread(jni::ref<org::apache::http::impl::conn::tsccm::WaitingThread> wt) { return call_method<"removeThread", void>(wt); }

protected:

	RouteSpecificPool(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_TSCCM_ROUTESPECIFICPOOL
