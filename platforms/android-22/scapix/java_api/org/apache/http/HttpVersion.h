// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/apache/http/ProtocolVersion.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_HTTPVERSION_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_HTTPVERSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http { class HttpVersion; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::HttpVersion>
{
	static constexpr fixed_string class_name = "org/apache/http/HttpVersion";
	using base_classes = std::tuple<scapix::java_api::org::apache::http::ProtocolVersion, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_HTTPVERSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_HTTPVERSION)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_HTTPVERSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::HttpVersion : public jni::object_base<"org/apache/http/HttpVersion",
	org::apache::http::ProtocolVersion,
	java::io::Serializable>
{
public:

	static jni::ref<java::lang::String> HTTP() { return get_static_field<"HTTP", jni::ref<java::lang::String>>(); }
	static jni::ref<org::apache::http::HttpVersion> HTTP_0_9() { return get_static_field<"HTTP_0_9", jni::ref<org::apache::http::HttpVersion>>(); }
	static jni::ref<org::apache::http::HttpVersion> HTTP_1_0() { return get_static_field<"HTTP_1_0", jni::ref<org::apache::http::HttpVersion>>(); }
	static jni::ref<org::apache::http::HttpVersion> HTTP_1_1() { return get_static_field<"HTTP_1_1", jni::ref<org::apache::http::HttpVersion>>(); }

	static jni::ref<org::apache::http::HttpVersion> new_object(jint major, jint minor) { return base_::new_object(major, minor); }
	jni::ref<org::apache::http::ProtocolVersion> forVersion(jint major, jint minor) { return call_method<"forVersion", jni::ref<org::apache::http::ProtocolVersion>>(major, minor); }

protected:

	HttpVersion(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_HTTPVERSION
