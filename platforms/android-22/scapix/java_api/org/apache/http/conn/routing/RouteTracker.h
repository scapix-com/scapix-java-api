// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/conn/routing/RouteInfo.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_ROUTING_ROUTETRACKER_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_ROUTING_ROUTETRACKER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::conn::routing { class RouteTracker; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::conn::routing::RouteTracker>
{
	static constexpr fixed_string class_name = "org/apache/http/conn/routing/RouteTracker";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::conn::routing::RouteInfo, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_ROUTING_ROUTETRACKER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_ROUTING_ROUTETRACKER)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_ROUTING_ROUTETRACKER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/org/apache/http/HttpHost.h>
#include <scapix/java_api/org/apache/http/conn/routing/HttpRoute.h>
#include <scapix/java_api/org/apache/http/conn/routing/RouteInfo_LayerType.h>
#include <scapix/java_api/org/apache/http/conn/routing/RouteInfo_TunnelType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::conn::routing::RouteTracker : public jni::object_base<"org/apache/http/conn/routing/RouteTracker",
	java::lang::Object,
	org::apache::http::conn::routing::RouteInfo,
	java::lang::Cloneable>
{
public:

	static jni::ref<org::apache::http::conn::routing::RouteTracker> new_object(jni::ref<org::apache::http::HttpHost> target, jni::ref<java::net::InetAddress> local) { return base_::new_object(target, local); }
	static jni::ref<org::apache::http::conn::routing::RouteTracker> new_object(jni::ref<org::apache::http::conn::routing::HttpRoute> route) { return base_::new_object(route); }
	void connectTarget(jboolean secure) { return call_method<"connectTarget", void>(secure); }
	void connectProxy(jni::ref<org::apache::http::HttpHost> proxy, jboolean secure) { return call_method<"connectProxy", void>(proxy, secure); }
	void tunnelTarget(jboolean secure) { return call_method<"tunnelTarget", void>(secure); }
	void tunnelProxy(jni::ref<org::apache::http::HttpHost> proxy, jboolean secure) { return call_method<"tunnelProxy", void>(proxy, secure); }
	void layerProtocol(jboolean secure) { return call_method<"layerProtocol", void>(secure); }
	jni::ref<org::apache::http::HttpHost> getTargetHost() { return call_method<"getTargetHost", jni::ref<org::apache::http::HttpHost>>(); }
	jni::ref<java::net::InetAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::InetAddress>>(); }
	jint getHopCount() { return call_method<"getHopCount", jint>(); }
	jni::ref<org::apache::http::HttpHost> getHopTarget(jint hop) { return call_method<"getHopTarget", jni::ref<org::apache::http::HttpHost>>(hop); }
	jni::ref<org::apache::http::HttpHost> getProxyHost() { return call_method<"getProxyHost", jni::ref<org::apache::http::HttpHost>>(); }
	jboolean isConnected() { return call_method<"isConnected", jboolean>(); }
	jni::ref<org::apache::http::conn::routing::RouteInfo_TunnelType> getTunnelType() { return call_method<"getTunnelType", jni::ref<org::apache::http::conn::routing::RouteInfo_TunnelType>>(); }
	jboolean isTunnelled() { return call_method<"isTunnelled", jboolean>(); }
	jni::ref<org::apache::http::conn::routing::RouteInfo_LayerType> getLayerType() { return call_method<"getLayerType", jni::ref<org::apache::http::conn::routing::RouteInfo_LayerType>>(); }
	jboolean isLayered() { return call_method<"isLayered", jboolean>(); }
	jboolean isSecure() { return call_method<"isSecure", jboolean>(); }
	jni::ref<org::apache::http::conn::routing::HttpRoute> toRoute() { return call_method<"toRoute", jni::ref<org::apache::http::conn::routing::HttpRoute>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	RouteTracker(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_ROUTING_ROUTETRACKER
