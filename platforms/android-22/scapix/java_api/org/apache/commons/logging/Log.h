// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_COMMONS_LOGGING_LOG_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_COMMONS_LOGGING_LOG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::commons::logging { class Log; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::commons::logging::Log>
{
	static constexpr fixed_string class_name = "org/apache/commons/logging/Log";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_COMMONS_LOGGING_LOG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_COMMONS_LOGGING_LOG)
#define SCAPIX_JAVA_API_ORG_APACHE_COMMONS_LOGGING_LOG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Throwable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::commons::logging::Log : public jni::object_base<"org/apache/commons/logging/Log",
	java::lang::Object>
{
public:

	jboolean isDebugEnabled() { return call_method<"isDebugEnabled", jboolean>(); }
	jboolean isErrorEnabled() { return call_method<"isErrorEnabled", jboolean>(); }
	jboolean isFatalEnabled() { return call_method<"isFatalEnabled", jboolean>(); }
	jboolean isInfoEnabled() { return call_method<"isInfoEnabled", jboolean>(); }
	jboolean isTraceEnabled() { return call_method<"isTraceEnabled", jboolean>(); }
	jboolean isWarnEnabled() { return call_method<"isWarnEnabled", jboolean>(); }
	void trace(jni::ref<java::lang::Object> p1) { return call_method<"trace", void>(p1); }
	void trace(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"trace", void>(p1, p2); }
	void debug(jni::ref<java::lang::Object> p1) { return call_method<"debug", void>(p1); }
	void debug(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"debug", void>(p1, p2); }
	void info(jni::ref<java::lang::Object> p1) { return call_method<"info", void>(p1); }
	void info(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"info", void>(p1, p2); }
	void warn(jni::ref<java::lang::Object> p1) { return call_method<"warn", void>(p1); }
	void warn(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"warn", void>(p1, p2); }
	void error(jni::ref<java::lang::Object> p1) { return call_method<"error", void>(p1); }
	void error(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"error", void>(p1, p2); }
	void fatal(jni::ref<java::lang::Object> p1) { return call_method<"fatal", void>(p1); }
	void fatal(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"fatal", void>(p1, p2); }

protected:

	Log(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_COMMONS_LOGGING_LOG
