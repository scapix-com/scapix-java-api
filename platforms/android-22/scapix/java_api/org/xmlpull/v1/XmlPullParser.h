// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_XMLPULL_V1_XMLPULLPARSER_FWD
#define SCAPIX_JAVA_API_ORG_XMLPULL_V1_XMLPULLPARSER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::xmlpull::v1 { class XmlPullParser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::xmlpull::v1::XmlPullParser>
{
	static constexpr fixed_string class_name = "org/xmlpull/v1/XmlPullParser";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XMLPULL_V1_XMLPULLPARSER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_XMLPULL_V1_XMLPULLPARSER)
#define SCAPIX_JAVA_API_ORG_XMLPULL_V1_XMLPULLPARSER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::xmlpull::v1::XmlPullParser : public jni::object_base<"org/xmlpull/v1/XmlPullParser",
	java::lang::Object>
{
public:

	static jint CDSECT() { return get_static_field<"CDSECT", jint>(); }
	static jint COMMENT() { return get_static_field<"COMMENT", jint>(); }
	static jint DOCDECL() { return get_static_field<"DOCDECL", jint>(); }
	static jint END_DOCUMENT() { return get_static_field<"END_DOCUMENT", jint>(); }
	static jint END_TAG() { return get_static_field<"END_TAG", jint>(); }
	static jint ENTITY_REF() { return get_static_field<"ENTITY_REF", jint>(); }
	static jni::ref<java::lang::String> FEATURE_PROCESS_DOCDECL() { return get_static_field<"FEATURE_PROCESS_DOCDECL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FEATURE_PROCESS_NAMESPACES() { return get_static_field<"FEATURE_PROCESS_NAMESPACES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FEATURE_REPORT_NAMESPACE_ATTRIBUTES() { return get_static_field<"FEATURE_REPORT_NAMESPACE_ATTRIBUTES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FEATURE_VALIDATION() { return get_static_field<"FEATURE_VALIDATION", jni::ref<java::lang::String>>(); }
	static jint IGNORABLE_WHITESPACE() { return get_static_field<"IGNORABLE_WHITESPACE", jint>(); }
	static jni::ref<java::lang::String> NO_NAMESPACE() { return get_static_field<"NO_NAMESPACE", jni::ref<java::lang::String>>(); }
	static jint PROCESSING_INSTRUCTION() { return get_static_field<"PROCESSING_INSTRUCTION", jint>(); }
	static jint START_DOCUMENT() { return get_static_field<"START_DOCUMENT", jint>(); }
	static jint START_TAG() { return get_static_field<"START_TAG", jint>(); }
	static jint TEXT() { return get_static_field<"TEXT", jint>(); }
	static jni::ref<jni::array<java::lang::String>> TYPES() { return get_static_field<"TYPES", jni::ref<jni::array<java::lang::String>>>(); }

	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	jboolean getFeature(jni::ref<java::lang::String> p1) { return call_method<"getFeature", jboolean>(p1); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	void setInput(jni::ref<java::io::Reader> p1) { return call_method<"setInput", void>(p1); }
	void setInput(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"setInput", void>(p1, p2); }
	jni::ref<java::lang::String> getInputEncoding() { return call_method<"getInputEncoding", jni::ref<java::lang::String>>(); }
	void defineEntityReplacementText(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"defineEntityReplacementText", void>(p1, p2); }
	jint getNamespaceCount(jint p1) { return call_method<"getNamespaceCount", jint>(p1); }
	jni::ref<java::lang::String> getNamespacePrefix(jint p1) { return call_method<"getNamespacePrefix", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNamespaceUri(jint p1) { return call_method<"getNamespaceUri", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNamespace(jni::ref<java::lang::String> p1) { return call_method<"getNamespace", jni::ref<java::lang::String>>(p1); }
	jint getDepth() { return call_method<"getDepth", jint>(); }
	jni::ref<java::lang::String> getPositionDescription() { return call_method<"getPositionDescription", jni::ref<java::lang::String>>(); }
	jint getLineNumber() { return call_method<"getLineNumber", jint>(); }
	jint getColumnNumber() { return call_method<"getColumnNumber", jint>(); }
	jboolean isWhitespace() { return call_method<"isWhitespace", jboolean>(); }
	jni::ref<java::lang::String> getText() { return call_method<"getText", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jchar>> getTextCharacters(jni::ref<jni::array<jint>> p1) { return call_method<"getTextCharacters", jni::ref<jni::array<jchar>>>(p1); }
	jni::ref<java::lang::String> getNamespace() { return call_method<"getNamespace", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPrefix() { return call_method<"getPrefix", jni::ref<java::lang::String>>(); }
	jboolean isEmptyElementTag() { return call_method<"isEmptyElementTag", jboolean>(); }
	jint getAttributeCount() { return call_method<"getAttributeCount", jint>(); }
	jni::ref<java::lang::String> getAttributeNamespace(jint p1) { return call_method<"getAttributeNamespace", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAttributeName(jint p1) { return call_method<"getAttributeName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAttributePrefix(jint p1) { return call_method<"getAttributePrefix", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAttributeType(jint p1) { return call_method<"getAttributeType", jni::ref<java::lang::String>>(p1); }
	jboolean isAttributeDefault(jint p1) { return call_method<"isAttributeDefault", jboolean>(p1); }
	jni::ref<java::lang::String> getAttributeValue(jint p1) { return call_method<"getAttributeValue", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAttributeValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeValue", jni::ref<java::lang::String>>(p1, p2); }
	jint getEventType() { return call_method<"getEventType", jint>(); }
	jint next() { return call_method<"next", jint>(); }
	jint nextToken() { return call_method<"nextToken", jint>(); }
	void require(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"require", void>(p1, p2, p3); }
	jni::ref<java::lang::String> nextText() { return call_method<"nextText", jni::ref<java::lang::String>>(); }
	jint nextTag() { return call_method<"nextTag", jint>(); }

protected:

	XmlPullParser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XMLPULL_V1_XMLPULLPARSER
