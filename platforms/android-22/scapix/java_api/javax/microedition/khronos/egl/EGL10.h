// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/microedition/khronos/egl/EGL.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_EGL_EGL10_FWD
#define SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_EGL_EGL10_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::microedition::khronos::egl { class EGL10; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::microedition::khronos::egl::EGL10>
{
	static constexpr fixed_string class_name = "javax/microedition/khronos/egl/EGL10";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::microedition::khronos::egl::EGL>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_EGL_EGL10_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_EGL_EGL10)
#define SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_EGL_EGL10

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/microedition/khronos/egl/EGLConfig.h>
#include <scapix/java_api/javax/microedition/khronos/egl/EGLContext.h>
#include <scapix/java_api/javax/microedition/khronos/egl/EGLDisplay.h>
#include <scapix/java_api/javax/microedition/khronos/egl/EGLSurface.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::microedition::khronos::egl::EGL10 : public jni::object_base<"javax/microedition/khronos/egl/EGL10",
	java::lang::Object,
	javax::microedition::khronos::egl::EGL>
{
public:

	static jint EGL_ALPHA_FORMAT() { return get_static_field<"EGL_ALPHA_FORMAT", jint>(); }
	static jint EGL_ALPHA_MASK_SIZE() { return get_static_field<"EGL_ALPHA_MASK_SIZE", jint>(); }
	static jint EGL_ALPHA_SIZE() { return get_static_field<"EGL_ALPHA_SIZE", jint>(); }
	static jint EGL_BAD_ACCESS() { return get_static_field<"EGL_BAD_ACCESS", jint>(); }
	static jint EGL_BAD_ALLOC() { return get_static_field<"EGL_BAD_ALLOC", jint>(); }
	static jint EGL_BAD_ATTRIBUTE() { return get_static_field<"EGL_BAD_ATTRIBUTE", jint>(); }
	static jint EGL_BAD_CONFIG() { return get_static_field<"EGL_BAD_CONFIG", jint>(); }
	static jint EGL_BAD_CONTEXT() { return get_static_field<"EGL_BAD_CONTEXT", jint>(); }
	static jint EGL_BAD_CURRENT_SURFACE() { return get_static_field<"EGL_BAD_CURRENT_SURFACE", jint>(); }
	static jint EGL_BAD_DISPLAY() { return get_static_field<"EGL_BAD_DISPLAY", jint>(); }
	static jint EGL_BAD_MATCH() { return get_static_field<"EGL_BAD_MATCH", jint>(); }
	static jint EGL_BAD_NATIVE_PIXMAP() { return get_static_field<"EGL_BAD_NATIVE_PIXMAP", jint>(); }
	static jint EGL_BAD_NATIVE_WINDOW() { return get_static_field<"EGL_BAD_NATIVE_WINDOW", jint>(); }
	static jint EGL_BAD_PARAMETER() { return get_static_field<"EGL_BAD_PARAMETER", jint>(); }
	static jint EGL_BAD_SURFACE() { return get_static_field<"EGL_BAD_SURFACE", jint>(); }
	static jint EGL_BLUE_SIZE() { return get_static_field<"EGL_BLUE_SIZE", jint>(); }
	static jint EGL_BUFFER_SIZE() { return get_static_field<"EGL_BUFFER_SIZE", jint>(); }
	static jint EGL_COLORSPACE() { return get_static_field<"EGL_COLORSPACE", jint>(); }
	static jint EGL_COLOR_BUFFER_TYPE() { return get_static_field<"EGL_COLOR_BUFFER_TYPE", jint>(); }
	static jint EGL_CONFIG_CAVEAT() { return get_static_field<"EGL_CONFIG_CAVEAT", jint>(); }
	static jint EGL_CONFIG_ID() { return get_static_field<"EGL_CONFIG_ID", jint>(); }
	static jint EGL_CORE_NATIVE_ENGINE() { return get_static_field<"EGL_CORE_NATIVE_ENGINE", jint>(); }
	static jni::ref<java::lang::Object> EGL_DEFAULT_DISPLAY() { return get_static_field<"EGL_DEFAULT_DISPLAY", jni::ref<java::lang::Object>>(); }
	static jint EGL_DEPTH_SIZE() { return get_static_field<"EGL_DEPTH_SIZE", jint>(); }
	static jint EGL_DONT_CARE() { return get_static_field<"EGL_DONT_CARE", jint>(); }
	static jint EGL_DRAW() { return get_static_field<"EGL_DRAW", jint>(); }
	static jint EGL_EXTENSIONS() { return get_static_field<"EGL_EXTENSIONS", jint>(); }
	static jint EGL_GREEN_SIZE() { return get_static_field<"EGL_GREEN_SIZE", jint>(); }
	static jint EGL_HEIGHT() { return get_static_field<"EGL_HEIGHT", jint>(); }
	static jint EGL_HORIZONTAL_RESOLUTION() { return get_static_field<"EGL_HORIZONTAL_RESOLUTION", jint>(); }
	static jint EGL_LARGEST_PBUFFER() { return get_static_field<"EGL_LARGEST_PBUFFER", jint>(); }
	static jint EGL_LEVEL() { return get_static_field<"EGL_LEVEL", jint>(); }
	static jint EGL_LUMINANCE_BUFFER() { return get_static_field<"EGL_LUMINANCE_BUFFER", jint>(); }
	static jint EGL_LUMINANCE_SIZE() { return get_static_field<"EGL_LUMINANCE_SIZE", jint>(); }
	static jint EGL_MAX_PBUFFER_HEIGHT() { return get_static_field<"EGL_MAX_PBUFFER_HEIGHT", jint>(); }
	static jint EGL_MAX_PBUFFER_PIXELS() { return get_static_field<"EGL_MAX_PBUFFER_PIXELS", jint>(); }
	static jint EGL_MAX_PBUFFER_WIDTH() { return get_static_field<"EGL_MAX_PBUFFER_WIDTH", jint>(); }
	static jint EGL_NATIVE_RENDERABLE() { return get_static_field<"EGL_NATIVE_RENDERABLE", jint>(); }
	static jint EGL_NATIVE_VISUAL_ID() { return get_static_field<"EGL_NATIVE_VISUAL_ID", jint>(); }
	static jint EGL_NATIVE_VISUAL_TYPE() { return get_static_field<"EGL_NATIVE_VISUAL_TYPE", jint>(); }
	static jint EGL_NONE() { return get_static_field<"EGL_NONE", jint>(); }
	static jint EGL_NON_CONFORMANT_CONFIG() { return get_static_field<"EGL_NON_CONFORMANT_CONFIG", jint>(); }
	static jint EGL_NOT_INITIALIZED() { return get_static_field<"EGL_NOT_INITIALIZED", jint>(); }
	static jni::ref<javax::microedition::khronos::egl::EGLContext> EGL_NO_CONTEXT() { return get_static_field<"EGL_NO_CONTEXT", jni::ref<javax::microedition::khronos::egl::EGLContext>>(); }
	static jni::ref<javax::microedition::khronos::egl::EGLDisplay> EGL_NO_DISPLAY() { return get_static_field<"EGL_NO_DISPLAY", jni::ref<javax::microedition::khronos::egl::EGLDisplay>>(); }
	static jni::ref<javax::microedition::khronos::egl::EGLSurface> EGL_NO_SURFACE() { return get_static_field<"EGL_NO_SURFACE", jni::ref<javax::microedition::khronos::egl::EGLSurface>>(); }
	static jint EGL_PBUFFER_BIT() { return get_static_field<"EGL_PBUFFER_BIT", jint>(); }
	static jint EGL_PIXEL_ASPECT_RATIO() { return get_static_field<"EGL_PIXEL_ASPECT_RATIO", jint>(); }
	static jint EGL_PIXMAP_BIT() { return get_static_field<"EGL_PIXMAP_BIT", jint>(); }
	static jint EGL_READ() { return get_static_field<"EGL_READ", jint>(); }
	static jint EGL_RED_SIZE() { return get_static_field<"EGL_RED_SIZE", jint>(); }
	static jint EGL_RENDERABLE_TYPE() { return get_static_field<"EGL_RENDERABLE_TYPE", jint>(); }
	static jint EGL_RENDER_BUFFER() { return get_static_field<"EGL_RENDER_BUFFER", jint>(); }
	static jint EGL_RGB_BUFFER() { return get_static_field<"EGL_RGB_BUFFER", jint>(); }
	static jint EGL_SAMPLES() { return get_static_field<"EGL_SAMPLES", jint>(); }
	static jint EGL_SAMPLE_BUFFERS() { return get_static_field<"EGL_SAMPLE_BUFFERS", jint>(); }
	static jint EGL_SINGLE_BUFFER() { return get_static_field<"EGL_SINGLE_BUFFER", jint>(); }
	static jint EGL_SLOW_CONFIG() { return get_static_field<"EGL_SLOW_CONFIG", jint>(); }
	static jint EGL_STENCIL_SIZE() { return get_static_field<"EGL_STENCIL_SIZE", jint>(); }
	static jint EGL_SUCCESS() { return get_static_field<"EGL_SUCCESS", jint>(); }
	static jint EGL_SURFACE_TYPE() { return get_static_field<"EGL_SURFACE_TYPE", jint>(); }
	static jint EGL_TRANSPARENT_BLUE_VALUE() { return get_static_field<"EGL_TRANSPARENT_BLUE_VALUE", jint>(); }
	static jint EGL_TRANSPARENT_GREEN_VALUE() { return get_static_field<"EGL_TRANSPARENT_GREEN_VALUE", jint>(); }
	static jint EGL_TRANSPARENT_RED_VALUE() { return get_static_field<"EGL_TRANSPARENT_RED_VALUE", jint>(); }
	static jint EGL_TRANSPARENT_RGB() { return get_static_field<"EGL_TRANSPARENT_RGB", jint>(); }
	static jint EGL_TRANSPARENT_TYPE() { return get_static_field<"EGL_TRANSPARENT_TYPE", jint>(); }
	static jint EGL_VENDOR() { return get_static_field<"EGL_VENDOR", jint>(); }
	static jint EGL_VERSION() { return get_static_field<"EGL_VERSION", jint>(); }
	static jint EGL_VERTICAL_RESOLUTION() { return get_static_field<"EGL_VERTICAL_RESOLUTION", jint>(); }
	static jint EGL_WIDTH() { return get_static_field<"EGL_WIDTH", jint>(); }
	static jint EGL_WINDOW_BIT() { return get_static_field<"EGL_WINDOW_BIT", jint>(); }

	jboolean eglChooseConfig(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<javax::microedition::khronos::egl::EGLConfig>> p3, jint p4, jni::ref<jni::array<jint>> p5) { return call_method<"eglChooseConfig", jboolean>(p1, p2, p3, p4, p5); }
	jboolean eglCopyBuffers(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLSurface> p2, jni::ref<java::lang::Object> p3) { return call_method<"eglCopyBuffers", jboolean>(p1, p2, p3); }
	jni::ref<javax::microedition::khronos::egl::EGLContext> eglCreateContext(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLConfig> p2, jni::ref<javax::microedition::khronos::egl::EGLContext> p3, jni::ref<jni::array<jint>> p4) { return call_method<"eglCreateContext", jni::ref<javax::microedition::khronos::egl::EGLContext>>(p1, p2, p3, p4); }
	jni::ref<javax::microedition::khronos::egl::EGLSurface> eglCreatePbufferSurface(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLConfig> p2, jni::ref<jni::array<jint>> p3) { return call_method<"eglCreatePbufferSurface", jni::ref<javax::microedition::khronos::egl::EGLSurface>>(p1, p2, p3); }
	jni::ref<javax::microedition::khronos::egl::EGLSurface> eglCreatePixmapSurface(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLConfig> p2, jni::ref<java::lang::Object> p3, jni::ref<jni::array<jint>> p4) { return call_method<"eglCreatePixmapSurface", jni::ref<javax::microedition::khronos::egl::EGLSurface>>(p1, p2, p3, p4); }
	jni::ref<javax::microedition::khronos::egl::EGLSurface> eglCreateWindowSurface(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLConfig> p2, jni::ref<java::lang::Object> p3, jni::ref<jni::array<jint>> p4) { return call_method<"eglCreateWindowSurface", jni::ref<javax::microedition::khronos::egl::EGLSurface>>(p1, p2, p3, p4); }
	jboolean eglDestroyContext(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLContext> p2) { return call_method<"eglDestroyContext", jboolean>(p1, p2); }
	jboolean eglDestroySurface(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLSurface> p2) { return call_method<"eglDestroySurface", jboolean>(p1, p2); }
	jboolean eglGetConfigAttrib(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLConfig> p2, jint p3, jni::ref<jni::array<jint>> p4) { return call_method<"eglGetConfigAttrib", jboolean>(p1, p2, p3, p4); }
	jboolean eglGetConfigs(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<jni::array<javax::microedition::khronos::egl::EGLConfig>> p2, jint p3, jni::ref<jni::array<jint>> p4) { return call_method<"eglGetConfigs", jboolean>(p1, p2, p3, p4); }
	jni::ref<javax::microedition::khronos::egl::EGLContext> eglGetCurrentContext() { return call_method<"eglGetCurrentContext", jni::ref<javax::microedition::khronos::egl::EGLContext>>(); }
	jni::ref<javax::microedition::khronos::egl::EGLDisplay> eglGetCurrentDisplay() { return call_method<"eglGetCurrentDisplay", jni::ref<javax::microedition::khronos::egl::EGLDisplay>>(); }
	jni::ref<javax::microedition::khronos::egl::EGLSurface> eglGetCurrentSurface(jint p1) { return call_method<"eglGetCurrentSurface", jni::ref<javax::microedition::khronos::egl::EGLSurface>>(p1); }
	jni::ref<javax::microedition::khronos::egl::EGLDisplay> eglGetDisplay(jni::ref<java::lang::Object> p1) { return call_method<"eglGetDisplay", jni::ref<javax::microedition::khronos::egl::EGLDisplay>>(p1); }
	jint eglGetError() { return call_method<"eglGetError", jint>(); }
	jboolean eglInitialize(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<jni::array<jint>> p2) { return call_method<"eglInitialize", jboolean>(p1, p2); }
	jboolean eglMakeCurrent(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLSurface> p2, jni::ref<javax::microedition::khronos::egl::EGLSurface> p3, jni::ref<javax::microedition::khronos::egl::EGLContext> p4) { return call_method<"eglMakeCurrent", jboolean>(p1, p2, p3, p4); }
	jboolean eglQueryContext(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLContext> p2, jint p3, jni::ref<jni::array<jint>> p4) { return call_method<"eglQueryContext", jboolean>(p1, p2, p3, p4); }
	jni::ref<java::lang::String> eglQueryString(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jint p2) { return call_method<"eglQueryString", jni::ref<java::lang::String>>(p1, p2); }
	jboolean eglQuerySurface(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLSurface> p2, jint p3, jni::ref<jni::array<jint>> p4) { return call_method<"eglQuerySurface", jboolean>(p1, p2, p3, p4); }
	jboolean eglSwapBuffers(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1, jni::ref<javax::microedition::khronos::egl::EGLSurface> p2) { return call_method<"eglSwapBuffers", jboolean>(p1, p2); }
	jboolean eglTerminate(jni::ref<javax::microedition::khronos::egl::EGLDisplay> p1) { return call_method<"eglTerminate", jboolean>(p1); }
	jboolean eglWaitGL() { return call_method<"eglWaitGL", jboolean>(); }
	jboolean eglWaitNative(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"eglWaitNative", jboolean>(p1, p2); }

protected:

	EGL10(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_EGL_EGL10
