// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/security/Principal.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_X500_X500PRINCIPAL_FWD
#define SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_X500_X500PRINCIPAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::security::auth::x500 { class X500Principal; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::security::auth::x500::X500Principal>
{
	static constexpr fixed_string class_name = "javax/security/auth/x500/X500Principal";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::security::Principal>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_X500_X500PRINCIPAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_X500_X500PRINCIPAL)
#define SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_X500_X500PRINCIPAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::security::auth::x500::X500Principal : public jni::object_base<"javax/security/auth/x500/X500Principal",
	java::lang::Object,
	java::io::Serializable,
	java::security::Principal>
{
public:

	static jni::ref<java::lang::String> CANONICAL() { return get_static_field<"CANONICAL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RFC1779() { return get_static_field<"RFC1779", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RFC2253() { return get_static_field<"RFC2253", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::security::auth::x500::X500Principal> new_object(jni::ref<jni::array<jbyte>> name) { return base_::new_object(name); }
	static jni::ref<javax::security::auth::x500::X500Principal> new_object(jni::ref<java::io::InputStream> in) { return base_::new_object(in); }
	static jni::ref<javax::security::auth::x500::X500Principal> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	static jni::ref<javax::security::auth::x500::X500Principal> new_object(jni::ref<java::lang::String> name, jni::ref<java::util::Map> keywordMap) { return base_::new_object(name, keywordMap); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jni::ref<jni::array<jbyte>> getEncoded() { return call_method<"getEncoded", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getName(jni::ref<java::lang::String> format) { return call_method<"getName", jni::ref<java::lang::String>>(format); }
	jni::ref<java::lang::String> getName(jni::ref<java::lang::String> format, jni::ref<java::util::Map> oidMap) { return call_method<"getName", jni::ref<java::lang::String>>(format, oidMap); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	X500Principal(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_X500_X500PRINCIPAL
