// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/bluetooth/BluetoothProfile.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEALTH_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEALTH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth { class BluetoothHealth; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::BluetoothHealth>
{
	static constexpr fixed_string class_name = "android/bluetooth/BluetoothHealth";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::bluetooth::BluetoothProfile>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEALTH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEALTH)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEALTH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/android/bluetooth/BluetoothHealthAppConfiguration.h>
#include <scapix/java_api/android/bluetooth/BluetoothHealthCallback.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::BluetoothHealth : public jni::object_base<"android/bluetooth/BluetoothHealth",
	java::lang::Object,
	android::bluetooth::BluetoothProfile>
{
public:

	static jint APP_CONFIG_REGISTRATION_FAILURE() { return get_static_field<"APP_CONFIG_REGISTRATION_FAILURE", jint>(); }
	static jint APP_CONFIG_REGISTRATION_SUCCESS() { return get_static_field<"APP_CONFIG_REGISTRATION_SUCCESS", jint>(); }
	static jint APP_CONFIG_UNREGISTRATION_FAILURE() { return get_static_field<"APP_CONFIG_UNREGISTRATION_FAILURE", jint>(); }
	static jint APP_CONFIG_UNREGISTRATION_SUCCESS() { return get_static_field<"APP_CONFIG_UNREGISTRATION_SUCCESS", jint>(); }
	static jint CHANNEL_TYPE_RELIABLE() { return get_static_field<"CHANNEL_TYPE_RELIABLE", jint>(); }
	static jint CHANNEL_TYPE_STREAMING() { return get_static_field<"CHANNEL_TYPE_STREAMING", jint>(); }
	static jint SINK_ROLE() { return get_static_field<"SINK_ROLE", jint>(); }
	static jint SOURCE_ROLE() { return get_static_field<"SOURCE_ROLE", jint>(); }
	static jint STATE_CHANNEL_CONNECTED() { return get_static_field<"STATE_CHANNEL_CONNECTED", jint>(); }
	static jint STATE_CHANNEL_CONNECTING() { return get_static_field<"STATE_CHANNEL_CONNECTING", jint>(); }
	static jint STATE_CHANNEL_DISCONNECTED() { return get_static_field<"STATE_CHANNEL_DISCONNECTED", jint>(); }
	static jint STATE_CHANNEL_DISCONNECTING() { return get_static_field<"STATE_CHANNEL_DISCONNECTING", jint>(); }

	jboolean registerSinkAppConfiguration(jni::ref<java::lang::String> name, jint dataType, jni::ref<android::bluetooth::BluetoothHealthCallback> callback) { return call_method<"registerSinkAppConfiguration", jboolean>(name, dataType, callback); }
	jboolean unregisterAppConfiguration(jni::ref<android::bluetooth::BluetoothHealthAppConfiguration> config) { return call_method<"unregisterAppConfiguration", jboolean>(config); }
	jboolean connectChannelToSource(jni::ref<android::bluetooth::BluetoothDevice> device, jni::ref<android::bluetooth::BluetoothHealthAppConfiguration> config) { return call_method<"connectChannelToSource", jboolean>(device, config); }
	jboolean disconnectChannel(jni::ref<android::bluetooth::BluetoothDevice> device, jni::ref<android::bluetooth::BluetoothHealthAppConfiguration> config, jint channelId) { return call_method<"disconnectChannel", jboolean>(device, config, channelId); }
	jni::ref<android::os::ParcelFileDescriptor> getMainChannelFd(jni::ref<android::bluetooth::BluetoothDevice> device, jni::ref<android::bluetooth::BluetoothHealthAppConfiguration> config) { return call_method<"getMainChannelFd", jni::ref<android::os::ParcelFileDescriptor>>(device, config); }
	jint getConnectionState(jni::ref<android::bluetooth::BluetoothDevice> device) { return call_method<"getConnectionState", jint>(device); }
	jni::ref<java::util::List> getConnectedDevices() { return call_method<"getConnectedDevices", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getDevicesMatchingConnectionStates(jni::ref<jni::array<jint>> states) { return call_method<"getDevicesMatchingConnectionStates", jni::ref<java::util::List>>(states); }

protected:

	BluetoothHealth(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHHEALTH
