// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/media/audiofx/AudioEffect.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::audiofx { class EnvironmentalReverb; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::audiofx::EnvironmentalReverb>
{
	static constexpr fixed_string class_name = "android/media/audiofx/EnvironmentalReverb";
	using base_classes = std::tuple<scapix::java_api::android::media::audiofx::AudioEffect>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/audiofx/EnvironmentalReverb_OnParameterChangeListener.h>
#include <scapix/java_api/android/media/audiofx/EnvironmentalReverb_Settings.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::audiofx::EnvironmentalReverb : public jni::object_base<"android/media/audiofx/EnvironmentalReverb",
	android::media::audiofx::AudioEffect>
{
public:

	using Settings = EnvironmentalReverb_Settings;
	using OnParameterChangeListener = EnvironmentalReverb_OnParameterChangeListener;

	static jint PARAM_DECAY_HF_RATIO() { return get_static_field<"PARAM_DECAY_HF_RATIO", jint>(); }
	static jint PARAM_DECAY_TIME() { return get_static_field<"PARAM_DECAY_TIME", jint>(); }
	static jint PARAM_DENSITY() { return get_static_field<"PARAM_DENSITY", jint>(); }
	static jint PARAM_DIFFUSION() { return get_static_field<"PARAM_DIFFUSION", jint>(); }
	static jint PARAM_REFLECTIONS_DELAY() { return get_static_field<"PARAM_REFLECTIONS_DELAY", jint>(); }
	static jint PARAM_REFLECTIONS_LEVEL() { return get_static_field<"PARAM_REFLECTIONS_LEVEL", jint>(); }
	static jint PARAM_REVERB_DELAY() { return get_static_field<"PARAM_REVERB_DELAY", jint>(); }
	static jint PARAM_REVERB_LEVEL() { return get_static_field<"PARAM_REVERB_LEVEL", jint>(); }
	static jint PARAM_ROOM_HF_LEVEL() { return get_static_field<"PARAM_ROOM_HF_LEVEL", jint>(); }
	static jint PARAM_ROOM_LEVEL() { return get_static_field<"PARAM_ROOM_LEVEL", jint>(); }

	static jni::ref<android::media::audiofx::EnvironmentalReverb> new_object(jint priority, jint audioSession) { return base_::new_object(priority, audioSession); }
	void setRoomLevel(jshort room) { return call_method<"setRoomLevel", void>(room); }
	jshort getRoomLevel() { return call_method<"getRoomLevel", jshort>(); }
	void setRoomHFLevel(jshort roomHF) { return call_method<"setRoomHFLevel", void>(roomHF); }
	jshort getRoomHFLevel() { return call_method<"getRoomHFLevel", jshort>(); }
	void setDecayTime(jint decayTime) { return call_method<"setDecayTime", void>(decayTime); }
	jint getDecayTime() { return call_method<"getDecayTime", jint>(); }
	void setDecayHFRatio(jshort decayHFRatio) { return call_method<"setDecayHFRatio", void>(decayHFRatio); }
	jshort getDecayHFRatio() { return call_method<"getDecayHFRatio", jshort>(); }
	void setReflectionsLevel(jshort reflectionsLevel) { return call_method<"setReflectionsLevel", void>(reflectionsLevel); }
	jshort getReflectionsLevel() { return call_method<"getReflectionsLevel", jshort>(); }
	void setReflectionsDelay(jint reflectionsDelay) { return call_method<"setReflectionsDelay", void>(reflectionsDelay); }
	jint getReflectionsDelay() { return call_method<"getReflectionsDelay", jint>(); }
	void setReverbLevel(jshort reverbLevel) { return call_method<"setReverbLevel", void>(reverbLevel); }
	jshort getReverbLevel() { return call_method<"getReverbLevel", jshort>(); }
	void setReverbDelay(jint reverbDelay) { return call_method<"setReverbDelay", void>(reverbDelay); }
	jint getReverbDelay() { return call_method<"getReverbDelay", jint>(); }
	void setDiffusion(jshort diffusion) { return call_method<"setDiffusion", void>(diffusion); }
	jshort getDiffusion() { return call_method<"getDiffusion", jshort>(); }
	void setDensity(jshort density) { return call_method<"setDensity", void>(density); }
	jshort getDensity() { return call_method<"getDensity", jshort>(); }
	void setParameterListener(jni::ref<android::media::audiofx::EnvironmentalReverb_OnParameterChangeListener> listener) { return call_method<"setParameterListener", void>(listener); }
	jni::ref<android::media::audiofx::EnvironmentalReverb_Settings> getProperties() { return call_method<"getProperties", jni::ref<android::media::audiofx::EnvironmentalReverb_Settings>>(); }
	void setProperties(jni::ref<android::media::audiofx::EnvironmentalReverb_Settings> settings) { return call_method<"setProperties", void>(settings); }

protected:

	EnvironmentalReverb(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_ENVIRONMENTALREVERB
