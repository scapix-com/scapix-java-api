// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaPlayer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaPlayer>
{
	static constexpr fixed_string class_name = "android/media/MediaPlayer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/media/MediaPlayer_OnBufferingUpdateListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnCompletionListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnErrorListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnInfoListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnPreparedListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnSeekCompleteListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnTimedTextListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnVideoSizeChangedListener.h>
#include <scapix/java_api/android/media/MediaPlayer_TrackInfo.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/android/view/SurfaceHolder.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaPlayer : public jni::object_base<"android/media/MediaPlayer",
	java::lang::Object>
{
public:

	using OnInfoListener = MediaPlayer_OnInfoListener;
	using OnErrorListener = MediaPlayer_OnErrorListener;
	using OnTimedTextListener = MediaPlayer_OnTimedTextListener;
	using OnVideoSizeChangedListener = MediaPlayer_OnVideoSizeChangedListener;
	using OnSeekCompleteListener = MediaPlayer_OnSeekCompleteListener;
	using OnBufferingUpdateListener = MediaPlayer_OnBufferingUpdateListener;
	using OnCompletionListener = MediaPlayer_OnCompletionListener;
	using OnPreparedListener = MediaPlayer_OnPreparedListener;
	using TrackInfo = MediaPlayer_TrackInfo;

	static jint MEDIA_ERROR_IO() { return get_static_field<"MEDIA_ERROR_IO", jint>(); }
	static jint MEDIA_ERROR_MALFORMED() { return get_static_field<"MEDIA_ERROR_MALFORMED", jint>(); }
	static jint MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK() { return get_static_field<"MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK", jint>(); }
	static jint MEDIA_ERROR_SERVER_DIED() { return get_static_field<"MEDIA_ERROR_SERVER_DIED", jint>(); }
	static jint MEDIA_ERROR_TIMED_OUT() { return get_static_field<"MEDIA_ERROR_TIMED_OUT", jint>(); }
	static jint MEDIA_ERROR_UNKNOWN() { return get_static_field<"MEDIA_ERROR_UNKNOWN", jint>(); }
	static jint MEDIA_ERROR_UNSUPPORTED() { return get_static_field<"MEDIA_ERROR_UNSUPPORTED", jint>(); }
	static jint MEDIA_INFO_BAD_INTERLEAVING() { return get_static_field<"MEDIA_INFO_BAD_INTERLEAVING", jint>(); }
	static jint MEDIA_INFO_BUFFERING_END() { return get_static_field<"MEDIA_INFO_BUFFERING_END", jint>(); }
	static jint MEDIA_INFO_BUFFERING_START() { return get_static_field<"MEDIA_INFO_BUFFERING_START", jint>(); }
	static jint MEDIA_INFO_METADATA_UPDATE() { return get_static_field<"MEDIA_INFO_METADATA_UPDATE", jint>(); }
	static jint MEDIA_INFO_NOT_SEEKABLE() { return get_static_field<"MEDIA_INFO_NOT_SEEKABLE", jint>(); }
	static jint MEDIA_INFO_SUBTITLE_TIMED_OUT() { return get_static_field<"MEDIA_INFO_SUBTITLE_TIMED_OUT", jint>(); }
	static jint MEDIA_INFO_UNKNOWN() { return get_static_field<"MEDIA_INFO_UNKNOWN", jint>(); }
	static jint MEDIA_INFO_UNSUPPORTED_SUBTITLE() { return get_static_field<"MEDIA_INFO_UNSUPPORTED_SUBTITLE", jint>(); }
	static jint MEDIA_INFO_VIDEO_RENDERING_START() { return get_static_field<"MEDIA_INFO_VIDEO_RENDERING_START", jint>(); }
	static jint MEDIA_INFO_VIDEO_TRACK_LAGGING() { return get_static_field<"MEDIA_INFO_VIDEO_TRACK_LAGGING", jint>(); }
	static jni::ref<java::lang::String> MEDIA_MIMETYPE_TEXT_SUBRIP() { return get_static_field<"MEDIA_MIMETYPE_TEXT_SUBRIP", jni::ref<java::lang::String>>(); }
	static jint VIDEO_SCALING_MODE_SCALE_TO_FIT() { return get_static_field<"VIDEO_SCALING_MODE_SCALE_TO_FIT", jint>(); }
	static jint VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING() { return get_static_field<"VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING", jint>(); }

	static jni::ref<android::media::MediaPlayer> new_object() { return base_::new_object(); }
	void setDisplay(jni::ref<android::view::SurfaceHolder> sh) { return call_method<"setDisplay", void>(sh); }
	void setSurface(jni::ref<android::view::Surface> surface) { return call_method<"setSurface", void>(surface); }
	void setVideoScalingMode(jint mode) { return call_method<"setVideoScalingMode", void>(mode); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, uri); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<android::view::SurfaceHolder> holder) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, uri, holder); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<android::view::SurfaceHolder> holder, jni::ref<android::media::AudioAttributes> audioAttributes, jint audioSessionId) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, uri, holder, audioAttributes, audioSessionId); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jint resid) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, resid); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jint resid, jni::ref<android::media::AudioAttributes> audioAttributes, jint audioSessionId) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, resid, audioAttributes, audioSessionId); }
	void setDataSource(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri) { return call_method<"setDataSource", void>(context, uri); }
	void setDataSource(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<java::util::Map> headers) { return call_method<"setDataSource", void>(context, uri, headers); }
	void setDataSource(jni::ref<java::lang::String> path) { return call_method<"setDataSource", void>(path); }
	void setDataSource(jni::ref<java::io::FileDescriptor> fd) { return call_method<"setDataSource", void>(fd); }
	void setDataSource(jni::ref<java::io::FileDescriptor> fd, jlong offset, jlong p3) { return call_method<"setDataSource", void>(fd, offset, p3); }
	void prepare() { return call_method<"prepare", void>(); }
	void prepareAsync() { return call_method<"prepareAsync", void>(); }
	void start() { return call_method<"start", void>(); }
	void stop() { return call_method<"stop", void>(); }
	void pause() { return call_method<"pause", void>(); }
	void setWakeMode(jni::ref<android::content::Context> context, jint mode) { return call_method<"setWakeMode", void>(context, mode); }
	void setScreenOnWhilePlaying(jboolean screenOn) { return call_method<"setScreenOnWhilePlaying", void>(screenOn); }
	jint getVideoWidth() { return call_method<"getVideoWidth", jint>(); }
	jint getVideoHeight() { return call_method<"getVideoHeight", jint>(); }
	jboolean isPlaying() { return call_method<"isPlaying", jboolean>(); }
	void seekTo(jint p1) { return call_method<"seekTo", void>(p1); }
	jint getCurrentPosition() { return call_method<"getCurrentPosition", jint>(); }
	jint getDuration() { return call_method<"getDuration", jint>(); }
	void setNextMediaPlayer(jni::ref<android::media::MediaPlayer> p1) { return call_method<"setNextMediaPlayer", void>(p1); }
	void release() { return call_method<"release", void>(); }
	void reset() { return call_method<"reset", void>(); }
	void setAudioStreamType(jint streamtype) { return call_method<"setAudioStreamType", void>(streamtype); }
	void setAudioAttributes(jni::ref<android::media::AudioAttributes> attributes) { return call_method<"setAudioAttributes", void>(attributes); }
	void setLooping(jboolean p1) { return call_method<"setLooping", void>(p1); }
	jboolean isLooping() { return call_method<"isLooping", jboolean>(); }
	void setVolume(jfloat leftVolume, jfloat rightVolume) { return call_method<"setVolume", void>(leftVolume, rightVolume); }
	void setAudioSessionId(jint p1) { return call_method<"setAudioSessionId", void>(p1); }
	jint getAudioSessionId() { return call_method<"getAudioSessionId", jint>(); }
	void attachAuxEffect(jint p1) { return call_method<"attachAuxEffect", void>(p1); }
	void setAuxEffectSendLevel(jfloat level) { return call_method<"setAuxEffectSendLevel", void>(level); }
	jni::ref<jni::array<android::media::MediaPlayer_TrackInfo>> getTrackInfo() { return call_method<"getTrackInfo", jni::ref<jni::array<android::media::MediaPlayer_TrackInfo>>>(); }
	void addTimedTextSource(jni::ref<java::lang::String> path, jni::ref<java::lang::String> mimeType) { return call_method<"addTimedTextSource", void>(path, mimeType); }
	void addTimedTextSource(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeType) { return call_method<"addTimedTextSource", void>(context, uri, mimeType); }
	void addTimedTextSource(jni::ref<java::io::FileDescriptor> fd, jni::ref<java::lang::String> mimeType) { return call_method<"addTimedTextSource", void>(fd, mimeType); }
	void addTimedTextSource(jni::ref<java::io::FileDescriptor> fd, jlong offset, jlong p3, jni::ref<java::lang::String> length) { return call_method<"addTimedTextSource", void>(fd, offset, p3, length); }
	jint getSelectedTrack(jint trackType) { return call_method<"getSelectedTrack", jint>(trackType); }
	void selectTrack(jint index) { return call_method<"selectTrack", void>(index); }
	void deselectTrack(jint index) { return call_method<"deselectTrack", void>(index); }
	void setOnPreparedListener(jni::ref<android::media::MediaPlayer_OnPreparedListener> listener) { return call_method<"setOnPreparedListener", void>(listener); }
	void setOnCompletionListener(jni::ref<android::media::MediaPlayer_OnCompletionListener> listener) { return call_method<"setOnCompletionListener", void>(listener); }
	void setOnBufferingUpdateListener(jni::ref<android::media::MediaPlayer_OnBufferingUpdateListener> listener) { return call_method<"setOnBufferingUpdateListener", void>(listener); }
	void setOnSeekCompleteListener(jni::ref<android::media::MediaPlayer_OnSeekCompleteListener> listener) { return call_method<"setOnSeekCompleteListener", void>(listener); }
	void setOnVideoSizeChangedListener(jni::ref<android::media::MediaPlayer_OnVideoSizeChangedListener> listener) { return call_method<"setOnVideoSizeChangedListener", void>(listener); }
	void setOnTimedTextListener(jni::ref<android::media::MediaPlayer_OnTimedTextListener> listener) { return call_method<"setOnTimedTextListener", void>(listener); }
	void setOnErrorListener(jni::ref<android::media::MediaPlayer_OnErrorListener> listener) { return call_method<"setOnErrorListener", void>(listener); }
	void setOnInfoListener(jni::ref<android::media::MediaPlayer_OnInfoListener> listener) { return call_method<"setOnInfoListener", void>(listener); }

protected:

	MediaPlayer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER
