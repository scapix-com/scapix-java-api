// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaRouter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaRouter>
{
	static constexpr fixed_string class_name = "android/media/MediaRouter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/MediaRouter_Callback.h>
#include <scapix/java_api/android/media/MediaRouter_RouteCategory.h>
#include <scapix/java_api/android/media/MediaRouter_RouteInfo.h>
#include <scapix/java_api/android/media/MediaRouter_UserRouteInfo.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/android/media/MediaRouter_VolumeCallback.h>
#include <scapix/java_api/android/media/MediaRouter_SimpleCallback.h>
#include <scapix/java_api/android/media/MediaRouter_RouteGroup.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaRouter : public jni::object_base<"android/media/MediaRouter",
	java::lang::Object>
{
public:

	using VolumeCallback = MediaRouter_VolumeCallback;
	using SimpleCallback = MediaRouter_SimpleCallback;
	using Callback = MediaRouter_Callback;
	using RouteCategory = MediaRouter_RouteCategory;
	using RouteGroup = MediaRouter_RouteGroup;
	using UserRouteInfo = MediaRouter_UserRouteInfo;
	using RouteInfo = MediaRouter_RouteInfo;

	static jint CALLBACK_FLAG_PERFORM_ACTIVE_SCAN() { return get_static_field<"CALLBACK_FLAG_PERFORM_ACTIVE_SCAN", jint>(); }
	static jint CALLBACK_FLAG_UNFILTERED_EVENTS() { return get_static_field<"CALLBACK_FLAG_UNFILTERED_EVENTS", jint>(); }
	static jint ROUTE_TYPE_LIVE_AUDIO() { return get_static_field<"ROUTE_TYPE_LIVE_AUDIO", jint>(); }
	static jint ROUTE_TYPE_LIVE_VIDEO() { return get_static_field<"ROUTE_TYPE_LIVE_VIDEO", jint>(); }
	static jint ROUTE_TYPE_USER() { return get_static_field<"ROUTE_TYPE_USER", jint>(); }

	jni::ref<android::media::MediaRouter_RouteInfo> getDefaultRoute() { return call_method<"getDefaultRoute", jni::ref<android::media::MediaRouter_RouteInfo>>(); }
	jni::ref<android::media::MediaRouter_RouteInfo> getSelectedRoute(jint type) { return call_method<"getSelectedRoute", jni::ref<android::media::MediaRouter_RouteInfo>>(type); }
	void addCallback(jint types, jni::ref<android::media::MediaRouter_Callback> cb) { return call_method<"addCallback", void>(types, cb); }
	void addCallback(jint types, jni::ref<android::media::MediaRouter_Callback> cb, jint flags) { return call_method<"addCallback", void>(types, cb, flags); }
	void removeCallback(jni::ref<android::media::MediaRouter_Callback> cb) { return call_method<"removeCallback", void>(cb); }
	void selectRoute(jint types, jni::ref<android::media::MediaRouter_RouteInfo> route) { return call_method<"selectRoute", void>(types, route); }
	void addUserRoute(jni::ref<android::media::MediaRouter_UserRouteInfo> info) { return call_method<"addUserRoute", void>(info); }
	void removeUserRoute(jni::ref<android::media::MediaRouter_UserRouteInfo> info) { return call_method<"removeUserRoute", void>(info); }
	void clearUserRoutes() { return call_method<"clearUserRoutes", void>(); }
	jint getCategoryCount() { return call_method<"getCategoryCount", jint>(); }
	jni::ref<android::media::MediaRouter_RouteCategory> getCategoryAt(jint index) { return call_method<"getCategoryAt", jni::ref<android::media::MediaRouter_RouteCategory>>(index); }
	jint getRouteCount() { return call_method<"getRouteCount", jint>(); }
	jni::ref<android::media::MediaRouter_RouteInfo> getRouteAt(jint index) { return call_method<"getRouteAt", jni::ref<android::media::MediaRouter_RouteInfo>>(index); }
	jni::ref<android::media::MediaRouter_UserRouteInfo> createUserRoute(jni::ref<android::media::MediaRouter_RouteCategory> category) { return call_method<"createUserRoute", jni::ref<android::media::MediaRouter_UserRouteInfo>>(category); }
	jni::ref<android::media::MediaRouter_RouteCategory> createRouteCategory(jni::ref<java::lang::CharSequence> name, jboolean isGroupable) { return call_method<"createRouteCategory", jni::ref<android::media::MediaRouter_RouteCategory>>(name, isGroupable); }
	jni::ref<android::media::MediaRouter_RouteCategory> createRouteCategory(jint nameResId, jboolean isGroupable) { return call_method<"createRouteCategory", jni::ref<android::media::MediaRouter_RouteCategory>>(nameResId, isGroupable); }

protected:

	MediaRouter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTER
