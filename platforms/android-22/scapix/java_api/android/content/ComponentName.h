// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_COMPONENTNAME_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_COMPONENTNAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class ComponentName; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::ComponentName>
{
	static constexpr fixed_string class_name = "android/content/ComponentName";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_COMPONENTNAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_COMPONENTNAME)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_COMPONENTNAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::ComponentName : public jni::object_base<"android/content/ComponentName",
	java::lang::Object,
	android::os::Parcelable,
	java::lang::Cloneable,
	java::lang::Comparable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::content::ComponentName> new_object(jni::ref<java::lang::String> pkg, jni::ref<java::lang::String> cls) { return base_::new_object(pkg, cls); }
	static jni::ref<android::content::ComponentName> new_object(jni::ref<android::content::Context> pkg, jni::ref<java::lang::String> cls) { return base_::new_object(pkg, cls); }
	static jni::ref<android::content::ComponentName> new_object(jni::ref<android::content::Context> pkg, jni::ref<java::lang::Class> cls) { return base_::new_object(pkg, cls); }
	static jni::ref<android::content::ComponentName> new_object(jni::ref<android::os::Parcel> in) { return base_::new_object(in); }
	jni::ref<android::content::ComponentName> clone() { return call_method<"clone", jni::ref<android::content::ComponentName>>(); }
	jni::ref<java::lang::String> getPackageName() { return call_method<"getPackageName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getShortClassName() { return call_method<"getShortClassName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> flattenToString() { return call_method<"flattenToString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> flattenToShortString() { return call_method<"flattenToShortString", jni::ref<java::lang::String>>(); }
	static jni::ref<android::content::ComponentName> unflattenFromString(jni::ref<java::lang::String> str) { return call_static_method<"unflattenFromString", jni::ref<android::content::ComponentName>>(str); }
	jni::ref<java::lang::String> toShortString() { return call_method<"toShortString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint compareTo(jni::ref<android::content::ComponentName> that) { return call_method<"compareTo", jint>(that); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	static void writeToParcel(jni::ref<android::content::ComponentName> c, jni::ref<android::os::Parcel> out) { return call_static_method<"writeToParcel", void>(c, out); }
	static jni::ref<android::content::ComponentName> readFromParcel(jni::ref<android::os::Parcel> in) { return call_static_method<"readFromParcel", jni::ref<android::content::ComponentName>>(in); }

protected:

	ComponentName(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_COMPONENTNAME
