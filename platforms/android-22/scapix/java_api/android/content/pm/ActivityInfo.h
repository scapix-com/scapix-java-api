// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/content/pm/ComponentInfo.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_PM_ACTIVITYINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_ACTIVITYINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content::pm { class ActivityInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::pm::ActivityInfo>
{
	static constexpr fixed_string class_name = "android/content/pm/ActivityInfo";
	using base_classes = std::tuple<scapix::java_api::android::content::pm::ComponentInfo, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_ACTIVITYINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_PM_ACTIVITYINFO)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_ACTIVITYINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::pm::ActivityInfo : public jni::object_base<"android/content/pm/ActivityInfo",
	android::content::pm::ComponentInfo,
	android::os::Parcelable>
{
public:

	static jint CONFIG_DENSITY() { return get_static_field<"CONFIG_DENSITY", jint>(); }
	static jint CONFIG_FONT_SCALE() { return get_static_field<"CONFIG_FONT_SCALE", jint>(); }
	static jint CONFIG_KEYBOARD() { return get_static_field<"CONFIG_KEYBOARD", jint>(); }
	static jint CONFIG_KEYBOARD_HIDDEN() { return get_static_field<"CONFIG_KEYBOARD_HIDDEN", jint>(); }
	static jint CONFIG_LAYOUT_DIRECTION() { return get_static_field<"CONFIG_LAYOUT_DIRECTION", jint>(); }
	static jint CONFIG_LOCALE() { return get_static_field<"CONFIG_LOCALE", jint>(); }
	static jint CONFIG_MCC() { return get_static_field<"CONFIG_MCC", jint>(); }
	static jint CONFIG_MNC() { return get_static_field<"CONFIG_MNC", jint>(); }
	static jint CONFIG_NAVIGATION() { return get_static_field<"CONFIG_NAVIGATION", jint>(); }
	static jint CONFIG_ORIENTATION() { return get_static_field<"CONFIG_ORIENTATION", jint>(); }
	static jint CONFIG_SCREEN_LAYOUT() { return get_static_field<"CONFIG_SCREEN_LAYOUT", jint>(); }
	static jint CONFIG_SCREEN_SIZE() { return get_static_field<"CONFIG_SCREEN_SIZE", jint>(); }
	static jint CONFIG_SMALLEST_SCREEN_SIZE() { return get_static_field<"CONFIG_SMALLEST_SCREEN_SIZE", jint>(); }
	static jint CONFIG_TOUCHSCREEN() { return get_static_field<"CONFIG_TOUCHSCREEN", jint>(); }
	static jint CONFIG_UI_MODE() { return get_static_field<"CONFIG_UI_MODE", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DOCUMENT_LAUNCH_ALWAYS() { return get_static_field<"DOCUMENT_LAUNCH_ALWAYS", jint>(); }
	static jint DOCUMENT_LAUNCH_INTO_EXISTING() { return get_static_field<"DOCUMENT_LAUNCH_INTO_EXISTING", jint>(); }
	static jint DOCUMENT_LAUNCH_NEVER() { return get_static_field<"DOCUMENT_LAUNCH_NEVER", jint>(); }
	static jint DOCUMENT_LAUNCH_NONE() { return get_static_field<"DOCUMENT_LAUNCH_NONE", jint>(); }
	static jint FLAG_ALLOW_TASK_REPARENTING() { return get_static_field<"FLAG_ALLOW_TASK_REPARENTING", jint>(); }
	static jint FLAG_ALWAYS_RETAIN_TASK_STATE() { return get_static_field<"FLAG_ALWAYS_RETAIN_TASK_STATE", jint>(); }
	static jint FLAG_AUTO_REMOVE_FROM_RECENTS() { return get_static_field<"FLAG_AUTO_REMOVE_FROM_RECENTS", jint>(); }
	static jint FLAG_CLEAR_TASK_ON_LAUNCH() { return get_static_field<"FLAG_CLEAR_TASK_ON_LAUNCH", jint>(); }
	static jint FLAG_EXCLUDE_FROM_RECENTS() { return get_static_field<"FLAG_EXCLUDE_FROM_RECENTS", jint>(); }
	static jint FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS() { return get_static_field<"FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS", jint>(); }
	static jint FLAG_FINISH_ON_TASK_LAUNCH() { return get_static_field<"FLAG_FINISH_ON_TASK_LAUNCH", jint>(); }
	static jint FLAG_HARDWARE_ACCELERATED() { return get_static_field<"FLAG_HARDWARE_ACCELERATED", jint>(); }
	static jint FLAG_IMMERSIVE() { return get_static_field<"FLAG_IMMERSIVE", jint>(); }
	static jint FLAG_MULTIPROCESS() { return get_static_field<"FLAG_MULTIPROCESS", jint>(); }
	static jint FLAG_NO_HISTORY() { return get_static_field<"FLAG_NO_HISTORY", jint>(); }
	static jint FLAG_RELINQUISH_TASK_IDENTITY() { return get_static_field<"FLAG_RELINQUISH_TASK_IDENTITY", jint>(); }
	static jint FLAG_RESUME_WHILE_PAUSING() { return get_static_field<"FLAG_RESUME_WHILE_PAUSING", jint>(); }
	static jint FLAG_SINGLE_USER() { return get_static_field<"FLAG_SINGLE_USER", jint>(); }
	static jint FLAG_STATE_NOT_NEEDED() { return get_static_field<"FLAG_STATE_NOT_NEEDED", jint>(); }
	static jint LAUNCH_MULTIPLE() { return get_static_field<"LAUNCH_MULTIPLE", jint>(); }
	static jint LAUNCH_SINGLE_INSTANCE() { return get_static_field<"LAUNCH_SINGLE_INSTANCE", jint>(); }
	static jint LAUNCH_SINGLE_TASK() { return get_static_field<"LAUNCH_SINGLE_TASK", jint>(); }
	static jint LAUNCH_SINGLE_TOP() { return get_static_field<"LAUNCH_SINGLE_TOP", jint>(); }
	static jint PERSIST_ACROSS_REBOOTS() { return get_static_field<"PERSIST_ACROSS_REBOOTS", jint>(); }
	static jint PERSIST_NEVER() { return get_static_field<"PERSIST_NEVER", jint>(); }
	static jint PERSIST_ROOT_ONLY() { return get_static_field<"PERSIST_ROOT_ONLY", jint>(); }
	static jint SCREEN_ORIENTATION_BEHIND() { return get_static_field<"SCREEN_ORIENTATION_BEHIND", jint>(); }
	static jint SCREEN_ORIENTATION_FULL_SENSOR() { return get_static_field<"SCREEN_ORIENTATION_FULL_SENSOR", jint>(); }
	static jint SCREEN_ORIENTATION_FULL_USER() { return get_static_field<"SCREEN_ORIENTATION_FULL_USER", jint>(); }
	static jint SCREEN_ORIENTATION_LANDSCAPE() { return get_static_field<"SCREEN_ORIENTATION_LANDSCAPE", jint>(); }
	static jint SCREEN_ORIENTATION_LOCKED() { return get_static_field<"SCREEN_ORIENTATION_LOCKED", jint>(); }
	static jint SCREEN_ORIENTATION_NOSENSOR() { return get_static_field<"SCREEN_ORIENTATION_NOSENSOR", jint>(); }
	static jint SCREEN_ORIENTATION_PORTRAIT() { return get_static_field<"SCREEN_ORIENTATION_PORTRAIT", jint>(); }
	static jint SCREEN_ORIENTATION_REVERSE_LANDSCAPE() { return get_static_field<"SCREEN_ORIENTATION_REVERSE_LANDSCAPE", jint>(); }
	static jint SCREEN_ORIENTATION_REVERSE_PORTRAIT() { return get_static_field<"SCREEN_ORIENTATION_REVERSE_PORTRAIT", jint>(); }
	static jint SCREEN_ORIENTATION_SENSOR() { return get_static_field<"SCREEN_ORIENTATION_SENSOR", jint>(); }
	static jint SCREEN_ORIENTATION_SENSOR_LANDSCAPE() { return get_static_field<"SCREEN_ORIENTATION_SENSOR_LANDSCAPE", jint>(); }
	static jint SCREEN_ORIENTATION_SENSOR_PORTRAIT() { return get_static_field<"SCREEN_ORIENTATION_SENSOR_PORTRAIT", jint>(); }
	static jint SCREEN_ORIENTATION_UNSPECIFIED() { return get_static_field<"SCREEN_ORIENTATION_UNSPECIFIED", jint>(); }
	static jint SCREEN_ORIENTATION_USER() { return get_static_field<"SCREEN_ORIENTATION_USER", jint>(); }
	static jint SCREEN_ORIENTATION_USER_LANDSCAPE() { return get_static_field<"SCREEN_ORIENTATION_USER_LANDSCAPE", jint>(); }
	static jint SCREEN_ORIENTATION_USER_PORTRAIT() { return get_static_field<"SCREEN_ORIENTATION_USER_PORTRAIT", jint>(); }
	static jint UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW() { return get_static_field<"UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW", jint>(); }
	jint configChanges() { return get_field<"configChanges", jint>(); }
	void configChanges(jint v) { set_field<"configChanges", jint>(v); }
	jint documentLaunchMode() { return get_field<"documentLaunchMode", jint>(); }
	void documentLaunchMode(jint v) { set_field<"documentLaunchMode", jint>(v); }
	jint flags() { return get_field<"flags", jint>(); }
	void flags(jint v) { set_field<"flags", jint>(v); }
	jint launchMode() { return get_field<"launchMode", jint>(); }
	void launchMode(jint v) { set_field<"launchMode", jint>(v); }
	jint maxRecents() { return get_field<"maxRecents", jint>(); }
	void maxRecents(jint v) { set_field<"maxRecents", jint>(v); }
	jni::ref<java::lang::String> parentActivityName() { return get_field<"parentActivityName", jni::ref<java::lang::String>>(); }
	void parentActivityName(jni::ref<java::lang::String> v) { set_field<"parentActivityName", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> permission() { return get_field<"permission", jni::ref<java::lang::String>>(); }
	void permission(jni::ref<java::lang::String> v) { set_field<"permission", jni::ref<java::lang::String>>(v); }
	jint persistableMode() { return get_field<"persistableMode", jint>(); }
	void persistableMode(jint v) { set_field<"persistableMode", jint>(v); }
	jint screenOrientation() { return get_field<"screenOrientation", jint>(); }
	void screenOrientation(jint v) { set_field<"screenOrientation", jint>(v); }
	jint softInputMode() { return get_field<"softInputMode", jint>(); }
	void softInputMode(jint v) { set_field<"softInputMode", jint>(v); }
	jni::ref<java::lang::String> targetActivity() { return get_field<"targetActivity", jni::ref<java::lang::String>>(); }
	void targetActivity(jni::ref<java::lang::String> v) { set_field<"targetActivity", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> taskAffinity() { return get_field<"taskAffinity", jni::ref<java::lang::String>>(); }
	void taskAffinity(jni::ref<java::lang::String> v) { set_field<"taskAffinity", jni::ref<java::lang::String>>(v); }
	jint theme() { return get_field<"theme", jint>(); }
	void theme(jint v) { set_field<"theme", jint>(v); }
	jint uiOptions() { return get_field<"uiOptions", jint>(); }
	void uiOptions(jint v) { set_field<"uiOptions", jint>(v); }

	static jni::ref<android::content::pm::ActivityInfo> new_object() { return base_::new_object(); }
	static jni::ref<android::content::pm::ActivityInfo> new_object(jni::ref<android::content::pm::ActivityInfo> orig) { return base_::new_object(orig); }
	jint getThemeResource() { return call_method<"getThemeResource", jint>(); }
	void dump(jni::ref<android::util::Printer> pw, jni::ref<java::lang::String> prefix) { return call_method<"dump", void>(pw, prefix); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint parcelableFlags) { return call_method<"writeToParcel", void>(dest, parcelableFlags); }

protected:

	ActivityInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_ACTIVITYINFO
