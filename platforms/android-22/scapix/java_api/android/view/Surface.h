// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_SURFACE_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_SURFACE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class Surface; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::Surface>
{
	static constexpr fixed_string class_name = "android/view/Surface";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_SURFACE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_SURFACE)
#define SCAPIX_JAVA_API_ANDROID_VIEW_SURFACE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/SurfaceTexture.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/view/Surface_OutOfResourcesException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::Surface : public jni::object_base<"android/view/Surface",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using OutOfResourcesException = Surface_OutOfResourcesException;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint ROTATION_0() { return get_static_field<"ROTATION_0", jint>(); }
	static jint ROTATION_180() { return get_static_field<"ROTATION_180", jint>(); }
	static jint ROTATION_270() { return get_static_field<"ROTATION_270", jint>(); }
	static jint ROTATION_90() { return get_static_field<"ROTATION_90", jint>(); }

	static jni::ref<android::view::Surface> new_object(jni::ref<android::graphics::SurfaceTexture> surfaceTexture) { return base_::new_object(surfaceTexture); }
	void release() { return call_method<"release", void>(); }
	jboolean isValid() { return call_method<"isValid", jboolean>(); }
	jni::ref<android::graphics::Canvas> lockCanvas(jni::ref<android::graphics::Rect> inOutDirty) { return call_method<"lockCanvas", jni::ref<android::graphics::Canvas>>(inOutDirty); }
	void unlockCanvasAndPost(jni::ref<android::graphics::Canvas> canvas) { return call_method<"unlockCanvasAndPost", void>(canvas); }
	void unlockCanvas(jni::ref<android::graphics::Canvas> canvas) { return call_method<"unlockCanvas", void>(canvas); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void readFromParcel(jni::ref<android::os::Parcel> source) { return call_method<"readFromParcel", void>(source); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Surface(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_SURFACE
