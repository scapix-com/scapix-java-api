// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ANIMATION_KEYFRAME_FWD
#define SCAPIX_JAVA_API_ANDROID_ANIMATION_KEYFRAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::animation { class Keyframe; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::animation::Keyframe>
{
	static constexpr fixed_string class_name = "android/animation/Keyframe";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ANIMATION_KEYFRAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ANIMATION_KEYFRAME)
#define SCAPIX_JAVA_API_ANDROID_ANIMATION_KEYFRAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/animation/TimeInterpolator.h>
#include <scapix/java_api/java/lang/Class.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::animation::Keyframe : public jni::object_base<"android/animation/Keyframe",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<android::animation::Keyframe> new_object() { return base_::new_object(); }
	static jni::ref<android::animation::Keyframe> ofInt(jfloat fraction, jint value) { return call_static_method<"ofInt", jni::ref<android::animation::Keyframe>>(fraction, value); }
	static jni::ref<android::animation::Keyframe> ofInt(jfloat fraction) { return call_static_method<"ofInt", jni::ref<android::animation::Keyframe>>(fraction); }
	static jni::ref<android::animation::Keyframe> ofFloat(jfloat fraction, jfloat value) { return call_static_method<"ofFloat", jni::ref<android::animation::Keyframe>>(fraction, value); }
	static jni::ref<android::animation::Keyframe> ofFloat(jfloat fraction) { return call_static_method<"ofFloat", jni::ref<android::animation::Keyframe>>(fraction); }
	static jni::ref<android::animation::Keyframe> ofObject(jfloat fraction, jni::ref<java::lang::Object> value) { return call_static_method<"ofObject", jni::ref<android::animation::Keyframe>>(fraction, value); }
	static jni::ref<android::animation::Keyframe> ofObject(jfloat fraction) { return call_static_method<"ofObject", jni::ref<android::animation::Keyframe>>(fraction); }
	jboolean hasValue() { return call_method<"hasValue", jboolean>(); }
	jni::ref<java::lang::Object> getValue() { return call_method<"getValue", jni::ref<java::lang::Object>>(); }
	void setValue(jni::ref<java::lang::Object> p1) { return call_method<"setValue", void>(p1); }
	jfloat getFraction() { return call_method<"getFraction", jfloat>(); }
	void setFraction(jfloat fraction) { return call_method<"setFraction", void>(fraction); }
	jni::ref<android::animation::TimeInterpolator> getInterpolator() { return call_method<"getInterpolator", jni::ref<android::animation::TimeInterpolator>>(); }
	void setInterpolator(jni::ref<android::animation::TimeInterpolator> interpolator) { return call_method<"setInterpolator", void>(interpolator); }
	jni::ref<java::lang::Class> getType() { return call_method<"getType", jni::ref<java::lang::Class>>(); }
	jni::ref<android::animation::Keyframe> clone() { return call_method<"clone", jni::ref<android::animation::Keyframe>>(); }

protected:

	Keyframe(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ANIMATION_KEYFRAME
