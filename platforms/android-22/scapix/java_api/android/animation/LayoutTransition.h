// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ANIMATION_LAYOUTTRANSITION_FWD
#define SCAPIX_JAVA_API_ANDROID_ANIMATION_LAYOUTTRANSITION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::animation { class LayoutTransition; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::animation::LayoutTransition>
{
	static constexpr fixed_string class_name = "android/animation/LayoutTransition";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ANIMATION_LAYOUTTRANSITION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ANIMATION_LAYOUTTRANSITION)
#define SCAPIX_JAVA_API_ANDROID_ANIMATION_LAYOUTTRANSITION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/animation/Animator.h>
#include <scapix/java_api/android/animation/LayoutTransition_TransitionListener.h>
#include <scapix/java_api/android/animation/TimeInterpolator.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::animation::LayoutTransition : public jni::object_base<"android/animation/LayoutTransition",
	java::lang::Object>
{
public:

	using TransitionListener = LayoutTransition_TransitionListener;

	static jint APPEARING() { return get_static_field<"APPEARING", jint>(); }
	static jint CHANGE_APPEARING() { return get_static_field<"CHANGE_APPEARING", jint>(); }
	static jint CHANGE_DISAPPEARING() { return get_static_field<"CHANGE_DISAPPEARING", jint>(); }
	static jint CHANGING() { return get_static_field<"CHANGING", jint>(); }
	static jint DISAPPEARING() { return get_static_field<"DISAPPEARING", jint>(); }

	static jni::ref<android::animation::LayoutTransition> new_object() { return base_::new_object(); }
	void setDuration(jlong duration) { return call_method<"setDuration", void>(duration); }
	void enableTransitionType(jint transitionType) { return call_method<"enableTransitionType", void>(transitionType); }
	void disableTransitionType(jint transitionType) { return call_method<"disableTransitionType", void>(transitionType); }
	jboolean isTransitionTypeEnabled(jint transitionType) { return call_method<"isTransitionTypeEnabled", jboolean>(transitionType); }
	void setStartDelay(jint transitionType, jlong delay) { return call_method<"setStartDelay", void>(transitionType, delay); }
	jlong getStartDelay(jint transitionType) { return call_method<"getStartDelay", jlong>(transitionType); }
	void setDuration(jint transitionType, jlong duration) { return call_method<"setDuration", void>(transitionType, duration); }
	jlong getDuration(jint transitionType) { return call_method<"getDuration", jlong>(transitionType); }
	void setStagger(jint transitionType, jlong duration) { return call_method<"setStagger", void>(transitionType, duration); }
	jlong getStagger(jint transitionType) { return call_method<"getStagger", jlong>(transitionType); }
	void setInterpolator(jint transitionType, jni::ref<android::animation::TimeInterpolator> interpolator) { return call_method<"setInterpolator", void>(transitionType, interpolator); }
	jni::ref<android::animation::TimeInterpolator> getInterpolator(jint transitionType) { return call_method<"getInterpolator", jni::ref<android::animation::TimeInterpolator>>(transitionType); }
	void setAnimator(jint transitionType, jni::ref<android::animation::Animator> animator) { return call_method<"setAnimator", void>(transitionType, animator); }
	jni::ref<android::animation::Animator> getAnimator(jint transitionType) { return call_method<"getAnimator", jni::ref<android::animation::Animator>>(transitionType); }
	void setAnimateParentHierarchy(jboolean animateParentHierarchy) { return call_method<"setAnimateParentHierarchy", void>(animateParentHierarchy); }
	jboolean isChangingLayout() { return call_method<"isChangingLayout", jboolean>(); }
	jboolean isRunning() { return call_method<"isRunning", jboolean>(); }
	void addChild(jni::ref<android::view::ViewGroup> parent, jni::ref<android::view::View> child) { return call_method<"addChild", void>(parent, child); }
	void showChild(jni::ref<android::view::ViewGroup> parent, jni::ref<android::view::View> child) { return call_method<"showChild", void>(parent, child); }
	void showChild(jni::ref<android::view::ViewGroup> parent, jni::ref<android::view::View> child, jint oldVisibility) { return call_method<"showChild", void>(parent, child, oldVisibility); }
	void removeChild(jni::ref<android::view::ViewGroup> parent, jni::ref<android::view::View> child) { return call_method<"removeChild", void>(parent, child); }
	void hideChild(jni::ref<android::view::ViewGroup> parent, jni::ref<android::view::View> child) { return call_method<"hideChild", void>(parent, child); }
	void hideChild(jni::ref<android::view::ViewGroup> parent, jni::ref<android::view::View> child, jint newVisibility) { return call_method<"hideChild", void>(parent, child, newVisibility); }
	void addTransitionListener(jni::ref<android::animation::LayoutTransition_TransitionListener> listener) { return call_method<"addTransitionListener", void>(listener); }
	void removeTransitionListener(jni::ref<android::animation::LayoutTransition_TransitionListener> listener) { return call_method<"removeTransitionListener", void>(listener); }
	jni::ref<java::util::List> getTransitionListeners() { return call_method<"getTransitionListeners", jni::ref<java::util::List>>(); }

protected:

	LayoutTransition(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ANIMATION_LAYOUTTRANSITION
