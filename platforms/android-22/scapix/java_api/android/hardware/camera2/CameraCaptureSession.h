// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::camera2 { class CameraCaptureSession; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::camera2::CameraCaptureSession>
{
	static constexpr fixed_string class_name = "android/hardware/camera2/CameraCaptureSession";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/camera2/CameraCaptureSession_CaptureCallback.h>
#include <scapix/java_api/android/hardware/camera2/CameraDevice.h>
#include <scapix/java_api/android/hardware/camera2/CaptureRequest.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/android/hardware/camera2/CameraCaptureSession_StateCallback.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::camera2::CameraCaptureSession : public jni::object_base<"android/hardware/camera2/CameraCaptureSession",
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	using CaptureCallback = CameraCaptureSession_CaptureCallback;
	using StateCallback = CameraCaptureSession_StateCallback;

	static jni::ref<android::hardware::camera2::CameraCaptureSession> new_object() { return base_::new_object(); }
	jni::ref<android::hardware::camera2::CameraDevice> getDevice() { return call_method<"getDevice", jni::ref<android::hardware::camera2::CameraDevice>>(); }
	jint capture(jni::ref<android::hardware::camera2::CaptureRequest> p1, jni::ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, jni::ref<android::os::Handler> p3) { return call_method<"capture", jint>(p1, p2, p3); }
	jint captureBurst(jni::ref<java::util::List> p1, jni::ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, jni::ref<android::os::Handler> p3) { return call_method<"captureBurst", jint>(p1, p2, p3); }
	jint setRepeatingRequest(jni::ref<android::hardware::camera2::CaptureRequest> p1, jni::ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, jni::ref<android::os::Handler> p3) { return call_method<"setRepeatingRequest", jint>(p1, p2, p3); }
	jint setRepeatingBurst(jni::ref<java::util::List> p1, jni::ref<android::hardware::camera2::CameraCaptureSession_CaptureCallback> p2, jni::ref<android::os::Handler> p3) { return call_method<"setRepeatingBurst", jint>(p1, p2, p3); }
	void stopRepeating() { return call_method<"stopRepeating", void>(); }
	void abortCaptures() { return call_method<"abortCaptures", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	CameraCaptureSession(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERACAPTURESESSION
