// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR_FWD
#define SCAPIX_JAVA_API_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::accounts { class AbstractAccountAuthenticator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::accounts::AbstractAccountAuthenticator>
{
	static constexpr fixed_string class_name = "android/accounts/AbstractAccountAuthenticator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR)
#define SCAPIX_JAVA_API_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/accounts/Account.h>
#include <scapix/java_api/android/accounts/AccountAuthenticatorResponse.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::accounts::AbstractAccountAuthenticator : public jni::object_base<"android/accounts/AbstractAccountAuthenticator",
	java::lang::Object>
{
public:

	static jni::ref<android::accounts::AbstractAccountAuthenticator> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	jni::ref<android::os::IBinder> getIBinder() { return call_method<"getIBinder", jni::ref<android::os::IBinder>>(); }
	jni::ref<android::os::Bundle> editProperties(jni::ref<android::accounts::AccountAuthenticatorResponse> p1, jni::ref<java::lang::String> p2) { return call_method<"editProperties", jni::ref<android::os::Bundle>>(p1, p2); }
	jni::ref<android::os::Bundle> addAccount(jni::ref<android::accounts::AccountAuthenticatorResponse> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<java::lang::String>> p4, jni::ref<android::os::Bundle> p5) { return call_method<"addAccount", jni::ref<android::os::Bundle>>(p1, p2, p3, p4, p5); }
	jni::ref<android::os::Bundle> confirmCredentials(jni::ref<android::accounts::AccountAuthenticatorResponse> p1, jni::ref<android::accounts::Account> p2, jni::ref<android::os::Bundle> p3) { return call_method<"confirmCredentials", jni::ref<android::os::Bundle>>(p1, p2, p3); }
	jni::ref<android::os::Bundle> getAuthToken(jni::ref<android::accounts::AccountAuthenticatorResponse> p1, jni::ref<android::accounts::Account> p2, jni::ref<java::lang::String> p3, jni::ref<android::os::Bundle> p4) { return call_method<"getAuthToken", jni::ref<android::os::Bundle>>(p1, p2, p3, p4); }
	jni::ref<java::lang::String> getAuthTokenLabel(jni::ref<java::lang::String> p1) { return call_method<"getAuthTokenLabel", jni::ref<java::lang::String>>(p1); }
	jni::ref<android::os::Bundle> updateCredentials(jni::ref<android::accounts::AccountAuthenticatorResponse> p1, jni::ref<android::accounts::Account> p2, jni::ref<java::lang::String> p3, jni::ref<android::os::Bundle> p4) { return call_method<"updateCredentials", jni::ref<android::os::Bundle>>(p1, p2, p3, p4); }
	jni::ref<android::os::Bundle> hasFeatures(jni::ref<android::accounts::AccountAuthenticatorResponse> p1, jni::ref<android::accounts::Account> p2, jni::ref<jni::array<java::lang::String>> p3) { return call_method<"hasFeatures", jni::ref<android::os::Bundle>>(p1, p2, p3); }
	jni::ref<android::os::Bundle> getAccountRemovalAllowed(jni::ref<android::accounts::AccountAuthenticatorResponse> response, jni::ref<android::accounts::Account> account) { return call_method<"getAccountRemovalAllowed", jni::ref<android::os::Bundle>>(response, account); }
	jni::ref<android::os::Bundle> getAccountCredentialsForCloning(jni::ref<android::accounts::AccountAuthenticatorResponse> response, jni::ref<android::accounts::Account> account) { return call_method<"getAccountCredentialsForCloning", jni::ref<android::os::Bundle>>(response, account); }
	jni::ref<android::os::Bundle> addAccountFromCredentials(jni::ref<android::accounts::AccountAuthenticatorResponse> response, jni::ref<android::accounts::Account> account, jni::ref<android::os::Bundle> accountCredentials) { return call_method<"addAccountFromCredentials", jni::ref<android::os::Bundle>>(response, account, accountCredentials); }

protected:

	AbstractAccountAuthenticator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ACCOUNTS_ABSTRACTACCOUNTAUTHENTICATOR
