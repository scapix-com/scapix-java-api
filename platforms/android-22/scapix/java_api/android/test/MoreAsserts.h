// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_MOREASSERTS_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_MOREASSERTS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test { class MoreAsserts; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::MoreAsserts>
{
	static constexpr fixed_string class_name = "android/test/MoreAsserts";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_MOREASSERTS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_MOREASSERTS)
#define SCAPIX_JAVA_API_ANDROID_TEST_MOREASSERTS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/regex/MatchResult.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::MoreAsserts : public jni::object_base<"android/test/MoreAsserts",
	java::lang::Object>
{
public:

	static void assertAssignableFrom(jni::ref<java::lang::Class> expected, jni::ref<java::lang::Object> actual) { return call_static_method<"assertAssignableFrom", void>(expected, actual); }
	static void assertAssignableFrom(jni::ref<java::lang::Class> expected, jni::ref<java::lang::Class> actual) { return call_static_method<"assertAssignableFrom", void>(expected, actual); }
	static void assertNotEqual(jni::ref<java::lang::String> message, jni::ref<java::lang::Object> unexpected, jni::ref<java::lang::Object> actual) { return call_static_method<"assertNotEqual", void>(message, unexpected, actual); }
	static void assertNotEqual(jni::ref<java::lang::Object> unexpected, jni::ref<java::lang::Object> actual) { return call_static_method<"assertNotEqual", void>(unexpected, actual); }
	static void assertEquals(jni::ref<java::lang::String> message, jni::ref<jni::array<jbyte>> expected, jni::ref<jni::array<jbyte>> actual) { return call_static_method<"assertEquals", void>(message, expected, actual); }
	static void assertEquals(jni::ref<jni::array<jbyte>> expected, jni::ref<jni::array<jbyte>> actual) { return call_static_method<"assertEquals", void>(expected, actual); }
	static void assertEquals(jni::ref<java::lang::String> message, jni::ref<jni::array<jint>> expected, jni::ref<jni::array<jint>> actual) { return call_static_method<"assertEquals", void>(message, expected, actual); }
	static void assertEquals(jni::ref<jni::array<jint>> expected, jni::ref<jni::array<jint>> actual) { return call_static_method<"assertEquals", void>(expected, actual); }
	static void assertEquals(jni::ref<java::lang::String> message, jni::ref<jni::array<jdouble>> expected, jni::ref<jni::array<jdouble>> actual) { return call_static_method<"assertEquals", void>(message, expected, actual); }
	static void assertEquals(jni::ref<jni::array<jdouble>> expected, jni::ref<jni::array<jdouble>> actual) { return call_static_method<"assertEquals", void>(expected, actual); }
	static void assertEquals(jni::ref<java::lang::String> message, jni::ref<jni::array<java::lang::Object>> expected, jni::ref<jni::array<java::lang::Object>> actual) { return call_static_method<"assertEquals", void>(message, expected, actual); }
	static void assertEquals(jni::ref<jni::array<java::lang::Object>> expected, jni::ref<jni::array<java::lang::Object>> actual) { return call_static_method<"assertEquals", void>(expected, actual); }
	static void assertEquals(jni::ref<java::lang::String> message, jni::ref<java::util::Set> expected, jni::ref<java::util::Set> actual) { return call_static_method<"assertEquals", void>(message, expected, actual); }
	static void assertEquals(jni::ref<java::util::Set> expected, jni::ref<java::util::Set> actual) { return call_static_method<"assertEquals", void>(expected, actual); }
	static jni::ref<java::util::regex::MatchResult> assertMatchesRegex(jni::ref<java::lang::String> message, jni::ref<java::lang::String> expectedRegex, jni::ref<java::lang::String> actual) { return call_static_method<"assertMatchesRegex", jni::ref<java::util::regex::MatchResult>>(message, expectedRegex, actual); }
	static jni::ref<java::util::regex::MatchResult> assertMatchesRegex(jni::ref<java::lang::String> expectedRegex, jni::ref<java::lang::String> actual) { return call_static_method<"assertMatchesRegex", jni::ref<java::util::regex::MatchResult>>(expectedRegex, actual); }
	static jni::ref<java::util::regex::MatchResult> assertContainsRegex(jni::ref<java::lang::String> message, jni::ref<java::lang::String> expectedRegex, jni::ref<java::lang::String> actual) { return call_static_method<"assertContainsRegex", jni::ref<java::util::regex::MatchResult>>(message, expectedRegex, actual); }
	static jni::ref<java::util::regex::MatchResult> assertContainsRegex(jni::ref<java::lang::String> expectedRegex, jni::ref<java::lang::String> actual) { return call_static_method<"assertContainsRegex", jni::ref<java::util::regex::MatchResult>>(expectedRegex, actual); }
	static void assertNotMatchesRegex(jni::ref<java::lang::String> message, jni::ref<java::lang::String> expectedRegex, jni::ref<java::lang::String> actual) { return call_static_method<"assertNotMatchesRegex", void>(message, expectedRegex, actual); }
	static void assertNotMatchesRegex(jni::ref<java::lang::String> expectedRegex, jni::ref<java::lang::String> actual) { return call_static_method<"assertNotMatchesRegex", void>(expectedRegex, actual); }
	static void assertNotContainsRegex(jni::ref<java::lang::String> message, jni::ref<java::lang::String> expectedRegex, jni::ref<java::lang::String> actual) { return call_static_method<"assertNotContainsRegex", void>(message, expectedRegex, actual); }
	static void assertNotContainsRegex(jni::ref<java::lang::String> expectedRegex, jni::ref<java::lang::String> actual) { return call_static_method<"assertNotContainsRegex", void>(expectedRegex, actual); }
	static void assertContentsInOrder(jni::ref<java::lang::String> message, jni::ref<java::lang::Iterable> actual, jni::ref<jni::array<java::lang::Object>> expected) { return call_static_method<"assertContentsInOrder", void>(message, actual, expected); }
	static void assertContentsInOrder(jni::ref<java::lang::Iterable> actual, jni::ref<jni::array<java::lang::Object>> expected) { return call_static_method<"assertContentsInOrder", void>(actual, expected); }
	static void assertContentsInAnyOrder(jni::ref<java::lang::String> message, jni::ref<java::lang::Iterable> actual, jni::ref<jni::array<java::lang::Object>> expected) { return call_static_method<"assertContentsInAnyOrder", void>(message, actual, expected); }
	static void assertContentsInAnyOrder(jni::ref<java::lang::Iterable> actual, jni::ref<jni::array<java::lang::Object>> expected) { return call_static_method<"assertContentsInAnyOrder", void>(actual, expected); }
	static void assertEmpty(jni::ref<java::lang::String> message, jni::ref<java::lang::Iterable> iterable) { return call_static_method<"assertEmpty", void>(message, iterable); }
	static void assertEmpty(jni::ref<java::lang::Iterable> iterable) { return call_static_method<"assertEmpty", void>(iterable); }
	static void assertEmpty(jni::ref<java::lang::String> message, jni::ref<java::util::Map> map) { return call_static_method<"assertEmpty", void>(message, map); }
	static void assertEmpty(jni::ref<java::util::Map> map) { return call_static_method<"assertEmpty", void>(map); }
	static void assertNotEmpty(jni::ref<java::lang::String> message, jni::ref<java::lang::Iterable> iterable) { return call_static_method<"assertNotEmpty", void>(message, iterable); }
	static void assertNotEmpty(jni::ref<java::lang::Iterable> iterable) { return call_static_method<"assertNotEmpty", void>(iterable); }
	static void assertNotEmpty(jni::ref<java::lang::String> message, jni::ref<java::util::Map> map) { return call_static_method<"assertNotEmpty", void>(message, map); }
	static void assertNotEmpty(jni::ref<java::util::Map> map) { return call_static_method<"assertNotEmpty", void>(map); }
	static void checkEqualsAndHashCodeMethods(jni::ref<java::lang::String> message, jni::ref<java::lang::Object> lhs, jni::ref<java::lang::Object> rhs, jboolean expectedResult) { return call_static_method<"checkEqualsAndHashCodeMethods", void>(message, lhs, rhs, expectedResult); }
	static void checkEqualsAndHashCodeMethods(jni::ref<java::lang::Object> lhs, jni::ref<java::lang::Object> rhs, jboolean expectedResult) { return call_static_method<"checkEqualsAndHashCodeMethods", void>(lhs, rhs, expectedResult); }

protected:

	MoreAsserts(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_MOREASSERTS
