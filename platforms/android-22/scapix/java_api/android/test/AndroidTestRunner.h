// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/junit/runner/BaseTestRunner.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_ANDROIDTESTRUNNER_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_ANDROIDTESTRUNNER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test { class AndroidTestRunner; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::AndroidTestRunner>
{
	static constexpr fixed_string class_name = "android/test/AndroidTestRunner";
	using base_classes = std::tuple<scapix::java_api::junit::runner::BaseTestRunner>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_ANDROIDTESTRUNNER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_ANDROIDTESTRUNNER)
#define SCAPIX_JAVA_API_ANDROID_TEST_ANDROIDTESTRUNNER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/Instrumentation.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/junit/framework/Test.h>
#include <scapix/java_api/junit/framework/TestListener.h>
#include <scapix/java_api/junit/framework/TestResult.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::AndroidTestRunner : public jni::object_base<"android/test/AndroidTestRunner",
	junit::runner::BaseTestRunner>
{
public:

	static jni::ref<android::test::AndroidTestRunner> new_object() { return base_::new_object(); }
	void setTestClassName(jni::ref<java::lang::String> testClassName, jni::ref<java::lang::String> testMethodName) { return call_method<"setTestClassName", void>(testClassName, testMethodName); }
	void setTest(jni::ref<junit::framework::Test> test) { return call_method<"setTest", void>(test); }
	void clearTestListeners() { return call_method<"clearTestListeners", void>(); }
	void addTestListener(jni::ref<junit::framework::TestListener> testListener) { return call_method<"addTestListener", void>(testListener); }
	jni::ref<java::util::List> getTestCases() { return call_method<"getTestCases", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> getTestClassName() { return call_method<"getTestClassName", jni::ref<java::lang::String>>(); }
	jni::ref<junit::framework::TestResult> getTestResult() { return call_method<"getTestResult", jni::ref<junit::framework::TestResult>>(); }
	void runTest() { return call_method<"runTest", void>(); }
	void runTest(jni::ref<junit::framework::TestResult> testResult) { return call_method<"runTest", void>(testResult); }
	void setContext(jni::ref<android::content::Context> context) { return call_method<"setContext", void>(context); }
	void setInstrumentation(jni::ref<android::app::Instrumentation> instrumentation) { return call_method<"setInstrumentation", void>(instrumentation); }
	void setInstrumentaiton(jni::ref<android::app::Instrumentation> instrumentation) { return call_method<"setInstrumentaiton", void>(instrumentation); }
	void testStarted(jni::ref<java::lang::String> testName) { return call_method<"testStarted", void>(testName); }
	void testEnded(jni::ref<java::lang::String> testName) { return call_method<"testEnded", void>(testName); }
	void testFailed(jint status, jni::ref<junit::framework::Test> test, jni::ref<java::lang::Throwable> t) { return call_method<"testFailed", void>(status, test, t); }

protected:

	AndroidTestRunner(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_ANDROIDTESTRUNNER
