// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/junit/framework/TestCase.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_INSTRUMENTATIONTESTCASE_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_INSTRUMENTATIONTESTCASE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test { class InstrumentationTestCase; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::InstrumentationTestCase>
{
	static constexpr fixed_string class_name = "android/test/InstrumentationTestCase";
	using base_classes = std::tuple<scapix::java_api::junit::framework::TestCase>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_INSTRUMENTATIONTESTCASE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_INSTRUMENTATIONTESTCASE)
#define SCAPIX_JAVA_API_ANDROID_TEST_INSTRUMENTATIONTESTCASE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/Activity.h>
#include <scapix/java_api/android/app/Instrumentation.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::InstrumentationTestCase : public jni::object_base<"android/test/InstrumentationTestCase",
	junit::framework::TestCase>
{
public:

	static jni::ref<android::test::InstrumentationTestCase> new_object() { return base_::new_object(); }
	void injectInstrumentation(jni::ref<android::app::Instrumentation> instrumentation) { return call_method<"injectInstrumentation", void>(instrumentation); }
	void injectInsrumentation(jni::ref<android::app::Instrumentation> instrumentation) { return call_method<"injectInsrumentation", void>(instrumentation); }
	jni::ref<android::app::Instrumentation> getInstrumentation() { return call_method<"getInstrumentation", jni::ref<android::app::Instrumentation>>(); }
	jni::ref<android::app::Activity> launchActivity(jni::ref<java::lang::String> pkg, jni::ref<java::lang::Class> activityCls, jni::ref<android::os::Bundle> extras) { return call_method<"launchActivity", jni::ref<android::app::Activity>>(pkg, activityCls, extras); }
	jni::ref<android::app::Activity> launchActivityWithIntent(jni::ref<java::lang::String> pkg, jni::ref<java::lang::Class> activityCls, jni::ref<android::content::Intent> intent) { return call_method<"launchActivityWithIntent", jni::ref<android::app::Activity>>(pkg, activityCls, intent); }
	void runTestOnUiThread(jni::ref<java::lang::Runnable> r) { return call_method<"runTestOnUiThread", void>(r); }
	void sendKeys(jni::ref<java::lang::String> keysSequence) { return call_method<"sendKeys", void>(keysSequence); }
	void sendKeys(jni::ref<jni::array<jint>> keys) { return call_method<"sendKeys", void>(keys); }
	void sendRepeatedKeys(jni::ref<jni::array<jint>> keys) { return call_method<"sendRepeatedKeys", void>(keys); }

protected:

	InstrumentationTestCase(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_INSTRUMENTATIONTESTCASE
