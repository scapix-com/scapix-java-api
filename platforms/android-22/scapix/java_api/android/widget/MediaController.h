// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/FrameLayout.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_MEDIACONTROLLER_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_MEDIACONTROLLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class MediaController; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::MediaController>
{
	static constexpr fixed_string class_name = "android/widget/MediaController";
	using base_classes = std::tuple<scapix::java_api::android::widget::FrameLayout>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_MEDIACONTROLLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_MEDIACONTROLLER)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_MEDIACONTROLLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/View_OnClickListener.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/widget/MediaController_MediaPlayerControl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::MediaController : public jni::object_base<"android/widget/MediaController",
	android::widget::FrameLayout>
{
public:

	using MediaPlayerControl = MediaController_MediaPlayerControl;

	static jni::ref<android::widget::MediaController> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::MediaController> new_object(jni::ref<android::content::Context> context, jboolean useFastForward) { return base_::new_object(context, useFastForward); }
	static jni::ref<android::widget::MediaController> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	void onFinishInflate() { return call_method<"onFinishInflate", void>(); }
	void setMediaPlayer(jni::ref<android::widget::MediaController_MediaPlayerControl> player) { return call_method<"setMediaPlayer", void>(player); }
	void setAnchorView(jni::ref<android::view::View> view) { return call_method<"setAnchorView", void>(view); }
	void show() { return call_method<"show", void>(); }
	void show(jint timeout) { return call_method<"show", void>(timeout); }
	jboolean isShowing() { return call_method<"isShowing", jboolean>(); }
	void hide() { return call_method<"hide", void>(); }
	jboolean onTouchEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onTouchEvent", jboolean>(event); }
	jboolean onTrackballEvent(jni::ref<android::view::MotionEvent> ev) { return call_method<"onTrackballEvent", jboolean>(ev); }
	jboolean dispatchKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEvent", jboolean>(event); }
	void setEnabled(jboolean enabled) { return call_method<"setEnabled", void>(enabled); }
	void onInitializeAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onInitializeAccessibilityEvent", void>(event); }
	void onInitializeAccessibilityNodeInfo(jni::ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<"onInitializeAccessibilityNodeInfo", void>(info); }
	void setPrevNextListeners(jni::ref<android::view::View_OnClickListener> next, jni::ref<android::view::View_OnClickListener> prev) { return call_method<"setPrevNextListeners", void>(next, prev); }

protected:

	MediaController(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_MEDIACONTROLLER
