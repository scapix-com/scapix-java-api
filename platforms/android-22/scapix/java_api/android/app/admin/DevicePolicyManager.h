// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::admin { class DevicePolicyManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::admin::DevicePolicyManager>
{
	static constexpr fixed_string class_name = "android/app/admin/DevicePolicyManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter.h>
#include <scapix/java_api/android/net/ProxyInfo.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::admin::DevicePolicyManager : public jni::object_base<"android/app/admin/DevicePolicyManager",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> ACTION_ADD_DEVICE_ADMIN() { return get_static_field<"ACTION_ADD_DEVICE_ADMIN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_PROVISION_MANAGED_PROFILE() { return get_static_field<"ACTION_PROVISION_MANAGED_PROFILE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SET_NEW_PASSWORD() { return get_static_field<"ACTION_SET_NEW_PASSWORD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_START_ENCRYPTION() { return get_static_field<"ACTION_START_ENCRYPTION", jni::ref<java::lang::String>>(); }
	static jint ENCRYPTION_STATUS_ACTIVATING() { return get_static_field<"ENCRYPTION_STATUS_ACTIVATING", jint>(); }
	static jint ENCRYPTION_STATUS_ACTIVE() { return get_static_field<"ENCRYPTION_STATUS_ACTIVE", jint>(); }
	static jint ENCRYPTION_STATUS_INACTIVE() { return get_static_field<"ENCRYPTION_STATUS_INACTIVE", jint>(); }
	static jint ENCRYPTION_STATUS_UNSUPPORTED() { return get_static_field<"ENCRYPTION_STATUS_UNSUPPORTED", jint>(); }
	static jni::ref<java::lang::String> EXTRA_ADD_EXPLANATION() { return get_static_field<"EXTRA_ADD_EXPLANATION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_DEVICE_ADMIN() { return get_static_field<"EXTRA_DEVICE_ADMIN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE() { return get_static_field<"EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE() { return get_static_field<"EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM() { return get_static_field<"EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER() { return get_static_field<"EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION() { return get_static_field<"EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME() { return get_static_field<"EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_EMAIL_ADDRESS() { return get_static_field<"EXTRA_PROVISIONING_EMAIL_ADDRESS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED() { return get_static_field<"EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_LOCALE() { return get_static_field<"EXTRA_PROVISIONING_LOCALE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_LOCAL_TIME() { return get_static_field<"EXTRA_PROVISIONING_LOCAL_TIME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_TIME_ZONE() { return get_static_field<"EXTRA_PROVISIONING_TIME_ZONE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_WIFI_HIDDEN() { return get_static_field<"EXTRA_PROVISIONING_WIFI_HIDDEN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PAC_URL() { return get_static_field<"EXTRA_PROVISIONING_WIFI_PAC_URL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PASSWORD() { return get_static_field<"EXTRA_PROVISIONING_WIFI_PASSWORD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PROXY_BYPASS() { return get_static_field<"EXTRA_PROVISIONING_WIFI_PROXY_BYPASS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PROXY_HOST() { return get_static_field<"EXTRA_PROVISIONING_WIFI_PROXY_HOST", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_WIFI_PROXY_PORT() { return get_static_field<"EXTRA_PROVISIONING_WIFI_PROXY_PORT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_WIFI_SECURITY_TYPE() { return get_static_field<"EXTRA_PROVISIONING_WIFI_SECURITY_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PROVISIONING_WIFI_SSID() { return get_static_field<"EXTRA_PROVISIONING_WIFI_SSID", jni::ref<java::lang::String>>(); }
	static jint FLAG_MANAGED_CAN_ACCESS_PARENT() { return get_static_field<"FLAG_MANAGED_CAN_ACCESS_PARENT", jint>(); }
	static jint FLAG_PARENT_CAN_ACCESS_MANAGED() { return get_static_field<"FLAG_PARENT_CAN_ACCESS_MANAGED", jint>(); }
	static jint KEYGUARD_DISABLE_FEATURES_ALL() { return get_static_field<"KEYGUARD_DISABLE_FEATURES_ALL", jint>(); }
	static jint KEYGUARD_DISABLE_FEATURES_NONE() { return get_static_field<"KEYGUARD_DISABLE_FEATURES_NONE", jint>(); }
	static jint KEYGUARD_DISABLE_FINGERPRINT() { return get_static_field<"KEYGUARD_DISABLE_FINGERPRINT", jint>(); }
	static jint KEYGUARD_DISABLE_SECURE_CAMERA() { return get_static_field<"KEYGUARD_DISABLE_SECURE_CAMERA", jint>(); }
	static jint KEYGUARD_DISABLE_SECURE_NOTIFICATIONS() { return get_static_field<"KEYGUARD_DISABLE_SECURE_NOTIFICATIONS", jint>(); }
	static jint KEYGUARD_DISABLE_TRUST_AGENTS() { return get_static_field<"KEYGUARD_DISABLE_TRUST_AGENTS", jint>(); }
	static jint KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS() { return get_static_field<"KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS", jint>(); }
	static jint KEYGUARD_DISABLE_WIDGETS_ALL() { return get_static_field<"KEYGUARD_DISABLE_WIDGETS_ALL", jint>(); }
	static jni::ref<java::lang::String> MIME_TYPE_PROVISIONING_NFC() { return get_static_field<"MIME_TYPE_PROVISIONING_NFC", jni::ref<java::lang::String>>(); }
	static jint PASSWORD_QUALITY_ALPHABETIC() { return get_static_field<"PASSWORD_QUALITY_ALPHABETIC", jint>(); }
	static jint PASSWORD_QUALITY_ALPHANUMERIC() { return get_static_field<"PASSWORD_QUALITY_ALPHANUMERIC", jint>(); }
	static jint PASSWORD_QUALITY_BIOMETRIC_WEAK() { return get_static_field<"PASSWORD_QUALITY_BIOMETRIC_WEAK", jint>(); }
	static jint PASSWORD_QUALITY_COMPLEX() { return get_static_field<"PASSWORD_QUALITY_COMPLEX", jint>(); }
	static jint PASSWORD_QUALITY_NUMERIC() { return get_static_field<"PASSWORD_QUALITY_NUMERIC", jint>(); }
	static jint PASSWORD_QUALITY_NUMERIC_COMPLEX() { return get_static_field<"PASSWORD_QUALITY_NUMERIC_COMPLEX", jint>(); }
	static jint PASSWORD_QUALITY_SOMETHING() { return get_static_field<"PASSWORD_QUALITY_SOMETHING", jint>(); }
	static jint PASSWORD_QUALITY_UNSPECIFIED() { return get_static_field<"PASSWORD_QUALITY_UNSPECIFIED", jint>(); }
	static jint RESET_PASSWORD_REQUIRE_ENTRY() { return get_static_field<"RESET_PASSWORD_REQUIRE_ENTRY", jint>(); }
	static jint WIPE_EXTERNAL_STORAGE() { return get_static_field<"WIPE_EXTERNAL_STORAGE", jint>(); }
	static jint WIPE_RESET_PROTECTION_DATA() { return get_static_field<"WIPE_RESET_PROTECTION_DATA", jint>(); }

	jboolean isAdminActive(jni::ref<android::content::ComponentName> who) { return call_method<"isAdminActive", jboolean>(who); }
	jni::ref<java::util::List> getActiveAdmins() { return call_method<"getActiveAdmins", jni::ref<java::util::List>>(); }
	void removeActiveAdmin(jni::ref<android::content::ComponentName> who) { return call_method<"removeActiveAdmin", void>(who); }
	jboolean hasGrantedPolicy(jni::ref<android::content::ComponentName> admin, jint usesPolicy) { return call_method<"hasGrantedPolicy", jboolean>(admin, usesPolicy); }
	void setPasswordQuality(jni::ref<android::content::ComponentName> admin, jint quality) { return call_method<"setPasswordQuality", void>(admin, quality); }
	jint getPasswordQuality(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordQuality", jint>(admin); }
	void setPasswordMinimumLength(jni::ref<android::content::ComponentName> admin, jint length) { return call_method<"setPasswordMinimumLength", void>(admin, length); }
	jint getPasswordMinimumLength(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordMinimumLength", jint>(admin); }
	void setPasswordMinimumUpperCase(jni::ref<android::content::ComponentName> admin, jint length) { return call_method<"setPasswordMinimumUpperCase", void>(admin, length); }
	jint getPasswordMinimumUpperCase(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordMinimumUpperCase", jint>(admin); }
	void setPasswordMinimumLowerCase(jni::ref<android::content::ComponentName> admin, jint length) { return call_method<"setPasswordMinimumLowerCase", void>(admin, length); }
	jint getPasswordMinimumLowerCase(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordMinimumLowerCase", jint>(admin); }
	void setPasswordMinimumLetters(jni::ref<android::content::ComponentName> admin, jint length) { return call_method<"setPasswordMinimumLetters", void>(admin, length); }
	jint getPasswordMinimumLetters(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordMinimumLetters", jint>(admin); }
	void setPasswordMinimumNumeric(jni::ref<android::content::ComponentName> admin, jint length) { return call_method<"setPasswordMinimumNumeric", void>(admin, length); }
	jint getPasswordMinimumNumeric(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordMinimumNumeric", jint>(admin); }
	void setPasswordMinimumSymbols(jni::ref<android::content::ComponentName> admin, jint length) { return call_method<"setPasswordMinimumSymbols", void>(admin, length); }
	jint getPasswordMinimumSymbols(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordMinimumSymbols", jint>(admin); }
	void setPasswordMinimumNonLetter(jni::ref<android::content::ComponentName> admin, jint length) { return call_method<"setPasswordMinimumNonLetter", void>(admin, length); }
	jint getPasswordMinimumNonLetter(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordMinimumNonLetter", jint>(admin); }
	void setPasswordHistoryLength(jni::ref<android::content::ComponentName> admin, jint length) { return call_method<"setPasswordHistoryLength", void>(admin, length); }
	void setPasswordExpirationTimeout(jni::ref<android::content::ComponentName> admin, jlong timeout) { return call_method<"setPasswordExpirationTimeout", void>(admin, timeout); }
	jlong getPasswordExpirationTimeout(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordExpirationTimeout", jlong>(admin); }
	jlong getPasswordExpiration(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordExpiration", jlong>(admin); }
	jint getPasswordHistoryLength(jni::ref<android::content::ComponentName> admin) { return call_method<"getPasswordHistoryLength", jint>(admin); }
	jint getPasswordMaximumLength(jint quality) { return call_method<"getPasswordMaximumLength", jint>(quality); }
	jboolean isActivePasswordSufficient() { return call_method<"isActivePasswordSufficient", jboolean>(); }
	jint getCurrentFailedPasswordAttempts() { return call_method<"getCurrentFailedPasswordAttempts", jint>(); }
	void setMaximumFailedPasswordsForWipe(jni::ref<android::content::ComponentName> admin, jint num) { return call_method<"setMaximumFailedPasswordsForWipe", void>(admin, num); }
	jint getMaximumFailedPasswordsForWipe(jni::ref<android::content::ComponentName> admin) { return call_method<"getMaximumFailedPasswordsForWipe", jint>(admin); }
	jboolean resetPassword(jni::ref<java::lang::String> password, jint flags) { return call_method<"resetPassword", jboolean>(password, flags); }
	void setMaximumTimeToLock(jni::ref<android::content::ComponentName> admin, jlong timeMs) { return call_method<"setMaximumTimeToLock", void>(admin, timeMs); }
	jlong getMaximumTimeToLock(jni::ref<android::content::ComponentName> admin) { return call_method<"getMaximumTimeToLock", jlong>(admin); }
	void lockNow() { return call_method<"lockNow", void>(); }
	void wipeData(jint flags) { return call_method<"wipeData", void>(flags); }
	void setRecommendedGlobalProxy(jni::ref<android::content::ComponentName> admin, jni::ref<android::net::ProxyInfo> proxyInfo) { return call_method<"setRecommendedGlobalProxy", void>(admin, proxyInfo); }
	jint setStorageEncryption(jni::ref<android::content::ComponentName> admin, jboolean encrypt) { return call_method<"setStorageEncryption", jint>(admin, encrypt); }
	jboolean getStorageEncryption(jni::ref<android::content::ComponentName> admin) { return call_method<"getStorageEncryption", jboolean>(admin); }
	jint getStorageEncryptionStatus() { return call_method<"getStorageEncryptionStatus", jint>(); }
	jboolean installCaCert(jni::ref<android::content::ComponentName> admin, jni::ref<jni::array<jbyte>> certBuffer) { return call_method<"installCaCert", jboolean>(admin, certBuffer); }
	void uninstallCaCert(jni::ref<android::content::ComponentName> admin, jni::ref<jni::array<jbyte>> certBuffer) { return call_method<"uninstallCaCert", void>(admin, certBuffer); }
	jni::ref<java::util::List> getInstalledCaCerts(jni::ref<android::content::ComponentName> admin) { return call_method<"getInstalledCaCerts", jni::ref<java::util::List>>(admin); }
	void uninstallAllUserCaCerts(jni::ref<android::content::ComponentName> admin) { return call_method<"uninstallAllUserCaCerts", void>(admin); }
	jboolean hasCaCertInstalled(jni::ref<android::content::ComponentName> admin, jni::ref<jni::array<jbyte>> certBuffer) { return call_method<"hasCaCertInstalled", jboolean>(admin, certBuffer); }
	jboolean installKeyPair(jni::ref<android::content::ComponentName> who, jni::ref<java::security::PrivateKey> privKey, jni::ref<java::security::cert::Certificate> cert, jni::ref<java::lang::String> alias) { return call_method<"installKeyPair", jboolean>(who, privKey, cert, alias); }
	void setCameraDisabled(jni::ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<"setCameraDisabled", void>(admin, disabled); }
	jboolean getCameraDisabled(jni::ref<android::content::ComponentName> admin) { return call_method<"getCameraDisabled", jboolean>(admin); }
	void setScreenCaptureDisabled(jni::ref<android::content::ComponentName> admin, jboolean disabled) { return call_method<"setScreenCaptureDisabled", void>(admin, disabled); }
	jboolean getScreenCaptureDisabled(jni::ref<android::content::ComponentName> admin) { return call_method<"getScreenCaptureDisabled", jboolean>(admin); }
	void setAutoTimeRequired(jni::ref<android::content::ComponentName> admin, jboolean required) { return call_method<"setAutoTimeRequired", void>(admin, required); }
	jboolean getAutoTimeRequired() { return call_method<"getAutoTimeRequired", jboolean>(); }
	void setKeyguardDisabledFeatures(jni::ref<android::content::ComponentName> admin, jint which) { return call_method<"setKeyguardDisabledFeatures", void>(admin, which); }
	jint getKeyguardDisabledFeatures(jni::ref<android::content::ComponentName> admin) { return call_method<"getKeyguardDisabledFeatures", jint>(admin); }
	jboolean isDeviceOwnerApp(jni::ref<java::lang::String> packageName) { return call_method<"isDeviceOwnerApp", jboolean>(packageName); }
	void clearDeviceOwnerApp(jni::ref<java::lang::String> packageName) { return call_method<"clearDeviceOwnerApp", void>(packageName); }
	void setProfileEnabled(jni::ref<android::content::ComponentName> admin) { return call_method<"setProfileEnabled", void>(admin); }
	void setProfileName(jni::ref<android::content::ComponentName> who, jni::ref<java::lang::String> profileName) { return call_method<"setProfileName", void>(who, profileName); }
	jboolean isProfileOwnerApp(jni::ref<java::lang::String> packageName) { return call_method<"isProfileOwnerApp", jboolean>(packageName); }
	void addPersistentPreferredActivity(jni::ref<android::content::ComponentName> admin, jni::ref<android::content::IntentFilter> filter, jni::ref<android::content::ComponentName> activity) { return call_method<"addPersistentPreferredActivity", void>(admin, filter, activity); }
	void clearPackagePersistentPreferredActivities(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName) { return call_method<"clearPackagePersistentPreferredActivities", void>(admin, packageName); }
	void setApplicationRestrictions(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName, jni::ref<android::os::Bundle> settings) { return call_method<"setApplicationRestrictions", void>(admin, packageName, settings); }
	void setCrossProfileCallerIdDisabled(jni::ref<android::content::ComponentName> who, jboolean disabled) { return call_method<"setCrossProfileCallerIdDisabled", void>(who, disabled); }
	jboolean getCrossProfileCallerIdDisabled(jni::ref<android::content::ComponentName> who) { return call_method<"getCrossProfileCallerIdDisabled", jboolean>(who); }
	void addCrossProfileIntentFilter(jni::ref<android::content::ComponentName> admin, jni::ref<android::content::IntentFilter> filter, jint flags) { return call_method<"addCrossProfileIntentFilter", void>(admin, filter, flags); }
	void clearCrossProfileIntentFilters(jni::ref<android::content::ComponentName> admin) { return call_method<"clearCrossProfileIntentFilters", void>(admin); }
	jboolean setPermittedAccessibilityServices(jni::ref<android::content::ComponentName> admin, jni::ref<java::util::List> packageNames) { return call_method<"setPermittedAccessibilityServices", jboolean>(admin, packageNames); }
	jni::ref<java::util::List> getPermittedAccessibilityServices(jni::ref<android::content::ComponentName> admin) { return call_method<"getPermittedAccessibilityServices", jni::ref<java::util::List>>(admin); }
	jboolean setPermittedInputMethods(jni::ref<android::content::ComponentName> admin, jni::ref<java::util::List> packageNames) { return call_method<"setPermittedInputMethods", jboolean>(admin, packageNames); }
	jni::ref<java::util::List> getPermittedInputMethods(jni::ref<android::content::ComponentName> admin) { return call_method<"getPermittedInputMethods", jni::ref<java::util::List>>(admin); }
	jni::ref<android::os::UserHandle> createUser(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> name) { return call_method<"createUser", jni::ref<android::os::UserHandle>>(admin, name); }
	jni::ref<android::os::UserHandle> createAndInitializeUser(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> name, jni::ref<java::lang::String> ownerName, jni::ref<android::content::ComponentName> profileOwnerComponent, jni::ref<android::os::Bundle> adminExtras) { return call_method<"createAndInitializeUser", jni::ref<android::os::UserHandle>>(admin, name, ownerName, profileOwnerComponent, adminExtras); }
	jboolean removeUser(jni::ref<android::content::ComponentName> admin, jni::ref<android::os::UserHandle> userHandle) { return call_method<"removeUser", jboolean>(admin, userHandle); }
	jboolean switchUser(jni::ref<android::content::ComponentName> admin, jni::ref<android::os::UserHandle> userHandle) { return call_method<"switchUser", jboolean>(admin, userHandle); }
	jni::ref<android::os::Bundle> getApplicationRestrictions(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName) { return call_method<"getApplicationRestrictions", jni::ref<android::os::Bundle>>(admin, packageName); }
	void addUserRestriction(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> key) { return call_method<"addUserRestriction", void>(admin, key); }
	void clearUserRestriction(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> key) { return call_method<"clearUserRestriction", void>(admin, key); }
	jboolean setApplicationHidden(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName, jboolean hidden) { return call_method<"setApplicationHidden", jboolean>(admin, packageName, hidden); }
	jboolean isApplicationHidden(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName) { return call_method<"isApplicationHidden", jboolean>(admin, packageName); }
	void enableSystemApp(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName) { return call_method<"enableSystemApp", void>(admin, packageName); }
	jint enableSystemApp(jni::ref<android::content::ComponentName> admin, jni::ref<android::content::Intent> intent) { return call_method<"enableSystemApp", jint>(admin, intent); }
	void setAccountManagementDisabled(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> accountType, jboolean disabled) { return call_method<"setAccountManagementDisabled", void>(admin, accountType, disabled); }
	jni::ref<jni::array<java::lang::String>> getAccountTypesWithManagementDisabled() { return call_method<"getAccountTypesWithManagementDisabled", jni::ref<jni::array<java::lang::String>>>(); }
	void setLockTaskPackages(jni::ref<android::content::ComponentName> admin, jni::ref<jni::array<java::lang::String>> packages) { return call_method<"setLockTaskPackages", void>(admin, packages); }
	jboolean isLockTaskPermitted(jni::ref<java::lang::String> pkg) { return call_method<"isLockTaskPermitted", jboolean>(pkg); }
	void setGlobalSetting(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> setting, jni::ref<java::lang::String> value) { return call_method<"setGlobalSetting", void>(admin, setting, value); }
	void setSecureSetting(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> setting, jni::ref<java::lang::String> value) { return call_method<"setSecureSetting", void>(admin, setting, value); }
	void setRestrictionsProvider(jni::ref<android::content::ComponentName> admin, jni::ref<android::content::ComponentName> provider) { return call_method<"setRestrictionsProvider", void>(admin, provider); }
	void setMasterVolumeMuted(jni::ref<android::content::ComponentName> admin, jboolean on) { return call_method<"setMasterVolumeMuted", void>(admin, on); }
	jboolean isMasterVolumeMuted(jni::ref<android::content::ComponentName> admin) { return call_method<"isMasterVolumeMuted", jboolean>(admin); }
	void setUninstallBlocked(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName, jboolean uninstallBlocked) { return call_method<"setUninstallBlocked", void>(admin, packageName, uninstallBlocked); }
	jboolean isUninstallBlocked(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName) { return call_method<"isUninstallBlocked", jboolean>(admin, packageName); }
	jboolean addCrossProfileWidgetProvider(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName) { return call_method<"addCrossProfileWidgetProvider", jboolean>(admin, packageName); }
	jboolean removeCrossProfileWidgetProvider(jni::ref<android::content::ComponentName> admin, jni::ref<java::lang::String> packageName) { return call_method<"removeCrossProfileWidgetProvider", jboolean>(admin, packageName); }
	jni::ref<java::util::List> getCrossProfileWidgetProviders(jni::ref<android::content::ComponentName> admin) { return call_method<"getCrossProfileWidgetProviders", jni::ref<java::util::List>>(admin); }

protected:

	DevicePolicyManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYMANAGER
