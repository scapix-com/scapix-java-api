// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTTRANSACTION_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTTRANSACTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class FragmentTransaction; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::FragmentTransaction>
{
	static constexpr fixed_string class_name = "android/app/FragmentTransaction";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTTRANSACTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTTRANSACTION)
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTTRANSACTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/Fragment.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::FragmentTransaction : public jni::object_base<"android/app/FragmentTransaction",
	java::lang::Object>
{
public:

	static jint TRANSIT_ENTER_MASK() { return get_static_field<"TRANSIT_ENTER_MASK", jint>(); }
	static jint TRANSIT_EXIT_MASK() { return get_static_field<"TRANSIT_EXIT_MASK", jint>(); }
	static jint TRANSIT_FRAGMENT_CLOSE() { return get_static_field<"TRANSIT_FRAGMENT_CLOSE", jint>(); }
	static jint TRANSIT_FRAGMENT_FADE() { return get_static_field<"TRANSIT_FRAGMENT_FADE", jint>(); }
	static jint TRANSIT_FRAGMENT_OPEN() { return get_static_field<"TRANSIT_FRAGMENT_OPEN", jint>(); }
	static jint TRANSIT_NONE() { return get_static_field<"TRANSIT_NONE", jint>(); }
	static jint TRANSIT_UNSET() { return get_static_field<"TRANSIT_UNSET", jint>(); }

	static jni::ref<android::app::FragmentTransaction> new_object() { return base_::new_object(); }
	jni::ref<android::app::FragmentTransaction> add(jni::ref<android::app::Fragment> p1, jni::ref<java::lang::String> p2) { return call_method<"add", jni::ref<android::app::FragmentTransaction>>(p1, p2); }
	jni::ref<android::app::FragmentTransaction> add(jint p1, jni::ref<android::app::Fragment> p2) { return call_method<"add", jni::ref<android::app::FragmentTransaction>>(p1, p2); }
	jni::ref<android::app::FragmentTransaction> add(jint p1, jni::ref<android::app::Fragment> p2, jni::ref<java::lang::String> p3) { return call_method<"add", jni::ref<android::app::FragmentTransaction>>(p1, p2, p3); }
	jni::ref<android::app::FragmentTransaction> replace(jint p1, jni::ref<android::app::Fragment> p2) { return call_method<"replace", jni::ref<android::app::FragmentTransaction>>(p1, p2); }
	jni::ref<android::app::FragmentTransaction> replace(jint p1, jni::ref<android::app::Fragment> p2, jni::ref<java::lang::String> p3) { return call_method<"replace", jni::ref<android::app::FragmentTransaction>>(p1, p2, p3); }
	jni::ref<android::app::FragmentTransaction> remove(jni::ref<android::app::Fragment> p1) { return call_method<"remove", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> hide(jni::ref<android::app::Fragment> p1) { return call_method<"hide", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> show(jni::ref<android::app::Fragment> p1) { return call_method<"show", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> detach(jni::ref<android::app::Fragment> p1) { return call_method<"detach", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> attach(jni::ref<android::app::Fragment> p1) { return call_method<"attach", jni::ref<android::app::FragmentTransaction>>(p1); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<android::app::FragmentTransaction> setCustomAnimations(jint p1, jint p2) { return call_method<"setCustomAnimations", jni::ref<android::app::FragmentTransaction>>(p1, p2); }
	jni::ref<android::app::FragmentTransaction> setCustomAnimations(jint p1, jint p2, jint p3, jint p4) { return call_method<"setCustomAnimations", jni::ref<android::app::FragmentTransaction>>(p1, p2, p3, p4); }
	jni::ref<android::app::FragmentTransaction> setTransition(jint p1) { return call_method<"setTransition", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> addSharedElement(jni::ref<android::view::View> p1, jni::ref<java::lang::String> p2) { return call_method<"addSharedElement", jni::ref<android::app::FragmentTransaction>>(p1, p2); }
	jni::ref<android::app::FragmentTransaction> setTransitionStyle(jint p1) { return call_method<"setTransitionStyle", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> addToBackStack(jni::ref<java::lang::String> p1) { return call_method<"addToBackStack", jni::ref<android::app::FragmentTransaction>>(p1); }
	jboolean isAddToBackStackAllowed() { return call_method<"isAddToBackStackAllowed", jboolean>(); }
	jni::ref<android::app::FragmentTransaction> disallowAddToBackStack() { return call_method<"disallowAddToBackStack", jni::ref<android::app::FragmentTransaction>>(); }
	jni::ref<android::app::FragmentTransaction> setBreadCrumbTitle(jint p1) { return call_method<"setBreadCrumbTitle", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> setBreadCrumbTitle(jni::ref<java::lang::CharSequence> p1) { return call_method<"setBreadCrumbTitle", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> setBreadCrumbShortTitle(jint p1) { return call_method<"setBreadCrumbShortTitle", jni::ref<android::app::FragmentTransaction>>(p1); }
	jni::ref<android::app::FragmentTransaction> setBreadCrumbShortTitle(jni::ref<java::lang::CharSequence> p1) { return call_method<"setBreadCrumbShortTitle", jni::ref<android::app::FragmentTransaction>>(p1); }
	jint commit() { return call_method<"commit", jint>(); }
	jint commitAllowingStateLoss() { return call_method<"commitAllowingStateLoss", jint>(); }

protected:

	FragmentTransaction(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTTRANSACTION
