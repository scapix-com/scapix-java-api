// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_SELECTION_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_SELECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class Selection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::Selection>
{
	static constexpr fixed_string class_name = "android/text/Selection";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_SELECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_SELECTION)
#define SCAPIX_JAVA_API_ANDROID_TEXT_SELECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/text/Layout.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::Selection : public jni::object_base<"android/text/Selection",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::Object> SELECTION_END() { return get_static_field<"SELECTION_END", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> SELECTION_START() { return get_static_field<"SELECTION_START", jni::ref<java::lang::Object>>(); }

	static jint getSelectionStart(jni::ref<java::lang::CharSequence> text) { return call_static_method<"getSelectionStart", jint>(text); }
	static jint getSelectionEnd(jni::ref<java::lang::CharSequence> text) { return call_static_method<"getSelectionEnd", jint>(text); }
	static void setSelection(jni::ref<android::text::Spannable> text, jint start, jint stop) { return call_static_method<"setSelection", void>(text, start, stop); }
	static void setSelection(jni::ref<android::text::Spannable> text, jint index) { return call_static_method<"setSelection", void>(text, index); }
	static void selectAll(jni::ref<android::text::Spannable> text) { return call_static_method<"selectAll", void>(text); }
	static void extendSelection(jni::ref<android::text::Spannable> text, jint index) { return call_static_method<"extendSelection", void>(text, index); }
	static void removeSelection(jni::ref<android::text::Spannable> text) { return call_static_method<"removeSelection", void>(text); }
	static jboolean moveUp(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"moveUp", jboolean>(text, layout); }
	static jboolean moveDown(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"moveDown", jboolean>(text, layout); }
	static jboolean moveLeft(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"moveLeft", jboolean>(text, layout); }
	static jboolean moveRight(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"moveRight", jboolean>(text, layout); }
	static jboolean extendUp(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"extendUp", jboolean>(text, layout); }
	static jboolean extendDown(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"extendDown", jboolean>(text, layout); }
	static jboolean extendLeft(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"extendLeft", jboolean>(text, layout); }
	static jboolean extendRight(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"extendRight", jboolean>(text, layout); }
	static jboolean extendToLeftEdge(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"extendToLeftEdge", jboolean>(text, layout); }
	static jboolean extendToRightEdge(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"extendToRightEdge", jboolean>(text, layout); }
	static jboolean moveToLeftEdge(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"moveToLeftEdge", jboolean>(text, layout); }
	static jboolean moveToRightEdge(jni::ref<android::text::Spannable> text, jni::ref<android::text::Layout> layout) { return call_static_method<"moveToRightEdge", jboolean>(text, layout); }

protected:

	Selection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_SELECTION
