// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_FORMAT_TIME_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_FORMAT_TIME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text::format { class Time; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::format::Time>
{
	static constexpr fixed_string class_name = "android/text/format/Time";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_FORMAT_TIME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_FORMAT_TIME)
#define SCAPIX_JAVA_API_ANDROID_TEXT_FORMAT_TIME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::format::Time : public jni::object_base<"android/text/format/Time",
	java::lang::Object>
{
public:

	static jint EPOCH_JULIAN_DAY() { return get_static_field<"EPOCH_JULIAN_DAY", jint>(); }
	static jint FRIDAY() { return get_static_field<"FRIDAY", jint>(); }
	static jint HOUR() { return get_static_field<"HOUR", jint>(); }
	static jint MINUTE() { return get_static_field<"MINUTE", jint>(); }
	static jint MONDAY() { return get_static_field<"MONDAY", jint>(); }
	static jint MONDAY_BEFORE_JULIAN_EPOCH() { return get_static_field<"MONDAY_BEFORE_JULIAN_EPOCH", jint>(); }
	static jint MONTH() { return get_static_field<"MONTH", jint>(); }
	static jint MONTH_DAY() { return get_static_field<"MONTH_DAY", jint>(); }
	static jint SATURDAY() { return get_static_field<"SATURDAY", jint>(); }
	static jint SECOND() { return get_static_field<"SECOND", jint>(); }
	static jint SUNDAY() { return get_static_field<"SUNDAY", jint>(); }
	static jint THURSDAY() { return get_static_field<"THURSDAY", jint>(); }
	static jni::ref<java::lang::String> TIMEZONE_UTC() { return get_static_field<"TIMEZONE_UTC", jni::ref<java::lang::String>>(); }
	static jint TUESDAY() { return get_static_field<"TUESDAY", jint>(); }
	static jint WEDNESDAY() { return get_static_field<"WEDNESDAY", jint>(); }
	static jint WEEK_DAY() { return get_static_field<"WEEK_DAY", jint>(); }
	static jint WEEK_NUM() { return get_static_field<"WEEK_NUM", jint>(); }
	static jint YEAR() { return get_static_field<"YEAR", jint>(); }
	static jint YEAR_DAY() { return get_static_field<"YEAR_DAY", jint>(); }
	jboolean allDay() { return get_field<"allDay", jboolean>(); }
	void allDay(jboolean v) { set_field<"allDay", jboolean>(v); }
	jlong gmtoff() { return get_field<"gmtoff", jlong>(); }
	void gmtoff(jlong v) { set_field<"gmtoff", jlong>(v); }
	jint hour() { return get_field<"hour", jint>(); }
	void hour(jint v) { set_field<"hour", jint>(v); }
	jint isDst() { return get_field<"isDst", jint>(); }
	void isDst(jint v) { set_field<"isDst", jint>(v); }
	jint minute() { return get_field<"minute", jint>(); }
	void minute(jint v) { set_field<"minute", jint>(v); }
	jint month() { return get_field<"month", jint>(); }
	void month(jint v) { set_field<"month", jint>(v); }
	jint monthDay() { return get_field<"monthDay", jint>(); }
	void monthDay(jint v) { set_field<"monthDay", jint>(v); }
	jint second() { return get_field<"second", jint>(); }
	void second(jint v) { set_field<"second", jint>(v); }
	jni::ref<java::lang::String> timezone() { return get_field<"timezone", jni::ref<java::lang::String>>(); }
	void timezone(jni::ref<java::lang::String> v) { set_field<"timezone", jni::ref<java::lang::String>>(v); }
	jint weekDay() { return get_field<"weekDay", jint>(); }
	void weekDay(jint v) { set_field<"weekDay", jint>(v); }
	jint year() { return get_field<"year", jint>(); }
	void year(jint v) { set_field<"year", jint>(v); }
	jint yearDay() { return get_field<"yearDay", jint>(); }
	void yearDay(jint v) { set_field<"yearDay", jint>(v); }

	static jni::ref<android::text::format::Time> new_object(jni::ref<java::lang::String> timezoneId) { return base_::new_object(timezoneId); }
	static jni::ref<android::text::format::Time> new_object() { return base_::new_object(); }
	static jni::ref<android::text::format::Time> new_object(jni::ref<android::text::format::Time> other) { return base_::new_object(other); }
	jlong normalize(jboolean ignoreDst) { return call_method<"normalize", jlong>(ignoreDst); }
	void switchTimezone(jni::ref<java::lang::String> timezone) { return call_method<"switchTimezone", void>(timezone); }
	jint getActualMaximum(jint field) { return call_method<"getActualMaximum", jint>(field); }
	void clear(jni::ref<java::lang::String> timezoneId) { return call_method<"clear", void>(timezoneId); }
	static jint compare(jni::ref<android::text::format::Time> a, jni::ref<android::text::format::Time> b) { return call_static_method<"compare", jint>(a, b); }
	jni::ref<java::lang::String> format(jni::ref<java::lang::String> format) { return call_method<"format", jni::ref<java::lang::String>>(format); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean parse(jni::ref<java::lang::String> s) { return call_method<"parse", jboolean>(s); }
	jboolean parse3339(jni::ref<java::lang::String> s) { return call_method<"parse3339", jboolean>(s); }
	static jni::ref<java::lang::String> getCurrentTimezone() { return call_static_method<"getCurrentTimezone", jni::ref<java::lang::String>>(); }
	void setToNow() { return call_method<"setToNow", void>(); }
	jlong toMillis(jboolean ignoreDst) { return call_method<"toMillis", jlong>(ignoreDst); }
	void set(jlong millis) { return call_method<"set", void>(millis); }
	jni::ref<java::lang::String> format2445() { return call_method<"format2445", jni::ref<java::lang::String>>(); }
	void set(jni::ref<android::text::format::Time> that) { return call_method<"set", void>(that); }
	void set(jint second, jint minute, jint hour, jint monthDay, jint month, jint year) { return call_method<"set", void>(second, minute, hour, monthDay, month, year); }
	void set(jint monthDay, jint month, jint year) { return call_method<"set", void>(monthDay, month, year); }
	jboolean before(jni::ref<android::text::format::Time> that) { return call_method<"before", jboolean>(that); }
	jboolean after(jni::ref<android::text::format::Time> that) { return call_method<"after", jboolean>(that); }
	jint getWeekNumber() { return call_method<"getWeekNumber", jint>(); }
	jni::ref<java::lang::String> format3339(jboolean allDay) { return call_method<"format3339", jni::ref<java::lang::String>>(allDay); }
	static jboolean isEpoch(jni::ref<android::text::format::Time> time) { return call_static_method<"isEpoch", jboolean>(time); }
	static jint getJulianDay(jlong millis, jlong p2) { return call_static_method<"getJulianDay", jint>(millis, p2); }
	jlong setJulianDay(jint julianDay) { return call_method<"setJulianDay", jlong>(julianDay); }
	static jint getWeeksSinceEpochFromJulianDay(jint julianDay, jint firstDayOfWeek) { return call_static_method<"getWeeksSinceEpochFromJulianDay", jint>(julianDay, firstDayOfWeek); }
	static jint getJulianMondayFromWeeksSinceEpoch(jint week) { return call_static_method<"getJulianMondayFromWeeksSinceEpoch", jint>(week); }

protected:

	Time(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_FORMAT_TIME
