// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPPROFILE_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPPROFILE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::sip { class SipProfile; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::sip::SipProfile>
{
	static constexpr fixed_string class_name = "android/net/sip/SipProfile";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPPROFILE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPPROFILE)
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPPROFILE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/net/sip/SipProfile_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::sip::SipProfile : public jni::object_base<"android/net/sip/SipProfile",
	java::lang::Object,
	android::os::Parcelable,
	java::io::Serializable,
	java::lang::Cloneable>
{
public:

	using Builder = SipProfile_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	jni::ref<java::lang::String> getUriString() { return call_method<"getUriString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDisplayName() { return call_method<"getDisplayName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getUserName() { return call_method<"getUserName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAuthUserName() { return call_method<"getAuthUserName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPassword() { return call_method<"getPassword", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSipDomain() { return call_method<"getSipDomain", jni::ref<java::lang::String>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	jni::ref<java::lang::String> getProtocol() { return call_method<"getProtocol", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getProxyAddress() { return call_method<"getProxyAddress", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getProfileName() { return call_method<"getProfileName", jni::ref<java::lang::String>>(); }
	jboolean getSendKeepAlive() { return call_method<"getSendKeepAlive", jboolean>(); }
	jboolean getAutoRegistration() { return call_method<"getAutoRegistration", jboolean>(); }

protected:

	SipProfile(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPPROFILE
