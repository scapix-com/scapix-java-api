// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_PSKKEYMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_PSKKEYMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class PskKeyManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::PskKeyManager>
{
	static constexpr fixed_string class_name = "android/net/PskKeyManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_PSKKEYMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_PSKKEYMANAGER)
#define SCAPIX_JAVA_API_ANDROID_NET_PSKKEYMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/javax/crypto/SecretKey.h>
#include <scapix/java_api/javax/net/ssl/SSLEngine.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::PskKeyManager : public jni::object_base<"android/net/PskKeyManager",
	java::lang::Object>
{
public:

	static jint MAX_IDENTITY_HINT_LENGTH_BYTES() { return get_static_field<"MAX_IDENTITY_HINT_LENGTH_BYTES", jint>(); }
	static jint MAX_IDENTITY_LENGTH_BYTES() { return get_static_field<"MAX_IDENTITY_LENGTH_BYTES", jint>(); }
	static jint MAX_KEY_LENGTH_BYTES() { return get_static_field<"MAX_KEY_LENGTH_BYTES", jint>(); }

	static jni::ref<android::net::PskKeyManager> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> chooseServerKeyIdentityHint(jni::ref<java::net::Socket> socket) { return call_method<"chooseServerKeyIdentityHint", jni::ref<java::lang::String>>(socket); }
	jni::ref<java::lang::String> chooseServerKeyIdentityHint(jni::ref<javax::net::ssl::SSLEngine> engine) { return call_method<"chooseServerKeyIdentityHint", jni::ref<java::lang::String>>(engine); }
	jni::ref<java::lang::String> chooseClientKeyIdentity(jni::ref<java::lang::String> identityHint, jni::ref<java::net::Socket> socket) { return call_method<"chooseClientKeyIdentity", jni::ref<java::lang::String>>(identityHint, socket); }
	jni::ref<java::lang::String> chooseClientKeyIdentity(jni::ref<java::lang::String> identityHint, jni::ref<javax::net::ssl::SSLEngine> engine) { return call_method<"chooseClientKeyIdentity", jni::ref<java::lang::String>>(identityHint, engine); }
	jni::ref<javax::crypto::SecretKey> getKey(jni::ref<java::lang::String> identityHint, jni::ref<java::lang::String> identity, jni::ref<java::net::Socket> socket) { return call_method<"getKey", jni::ref<javax::crypto::SecretKey>>(identityHint, identity, socket); }
	jni::ref<javax::crypto::SecretKey> getKey(jni::ref<java::lang::String> identityHint, jni::ref<java::lang::String> identity, jni::ref<javax::net::ssl::SSLEngine> engine) { return call_method<"getKey", jni::ref<javax::crypto::SecretKey>>(identityHint, identity, engine); }

protected:

	PskKeyManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_PSKKEYMANAGER
