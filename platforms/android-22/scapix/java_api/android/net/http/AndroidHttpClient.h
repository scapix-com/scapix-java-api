// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/client/HttpClient.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_HTTP_ANDROIDHTTPCLIENT_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_HTTP_ANDROIDHTTPCLIENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::http { class AndroidHttpClient; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::http::AndroidHttpClient>
{
	static constexpr fixed_string class_name = "android/net/http/AndroidHttpClient";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::client::HttpClient>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_HTTP_ANDROIDHTTPCLIENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_HTTP_ANDROIDHTTPCLIENT)
#define SCAPIX_JAVA_API_ANDROID_NET_HTTP_ANDROIDHTTPCLIENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/apache/http/HttpEntity.h>
#include <scapix/java_api/org/apache/http/HttpHost.h>
#include <scapix/java_api/org/apache/http/HttpRequest.h>
#include <scapix/java_api/org/apache/http/HttpResponse.h>
#include <scapix/java_api/org/apache/http/client/ResponseHandler.h>
#include <scapix/java_api/org/apache/http/client/methods/HttpUriRequest.h>
#include <scapix/java_api/org/apache/http/conn/ClientConnectionManager.h>
#include <scapix/java_api/org/apache/http/entity/AbstractHttpEntity.h>
#include <scapix/java_api/org/apache/http/params/HttpParams.h>
#include <scapix/java_api/org/apache/http/protocol/HttpContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::http::AndroidHttpClient : public jni::object_base<"android/net/http/AndroidHttpClient",
	java::lang::Object,
	org::apache::http::client::HttpClient>
{
public:

	static jlong DEFAULT_SYNC_MIN_GZIP_BYTES() { return get_static_field<"DEFAULT_SYNC_MIN_GZIP_BYTES", jlong>(); }
	static void DEFAULT_SYNC_MIN_GZIP_BYTES(jlong v) { set_static_field<"DEFAULT_SYNC_MIN_GZIP_BYTES", jlong>(v); }

	static jni::ref<android::net::http::AndroidHttpClient> newInstance(jni::ref<java::lang::String> userAgent, jni::ref<android::content::Context> context) { return call_static_method<"newInstance", jni::ref<android::net::http::AndroidHttpClient>>(userAgent, context); }
	static jni::ref<android::net::http::AndroidHttpClient> newInstance(jni::ref<java::lang::String> userAgent) { return call_static_method<"newInstance", jni::ref<android::net::http::AndroidHttpClient>>(userAgent); }
	static void modifyRequestToAcceptGzipResponse(jni::ref<org::apache::http::HttpRequest> request) { return call_static_method<"modifyRequestToAcceptGzipResponse", void>(request); }
	static jni::ref<java::io::InputStream> getUngzippedContent(jni::ref<org::apache::http::HttpEntity> entity) { return call_static_method<"getUngzippedContent", jni::ref<java::io::InputStream>>(entity); }
	void close() { return call_method<"close", void>(); }
	jni::ref<org::apache::http::params::HttpParams> getParams() { return call_method<"getParams", jni::ref<org::apache::http::params::HttpParams>>(); }
	jni::ref<org::apache::http::conn::ClientConnectionManager> getConnectionManager() { return call_method<"getConnectionManager", jni::ref<org::apache::http::conn::ClientConnectionManager>>(); }
	jni::ref<org::apache::http::HttpResponse> execute(jni::ref<org::apache::http::client::methods::HttpUriRequest> request) { return call_method<"execute", jni::ref<org::apache::http::HttpResponse>>(request); }
	jni::ref<org::apache::http::HttpResponse> execute(jni::ref<org::apache::http::client::methods::HttpUriRequest> request, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"execute", jni::ref<org::apache::http::HttpResponse>>(request, context); }
	jni::ref<org::apache::http::HttpResponse> execute(jni::ref<org::apache::http::HttpHost> target, jni::ref<org::apache::http::HttpRequest> request) { return call_method<"execute", jni::ref<org::apache::http::HttpResponse>>(target, request); }
	jni::ref<org::apache::http::HttpResponse> execute(jni::ref<org::apache::http::HttpHost> target, jni::ref<org::apache::http::HttpRequest> request, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"execute", jni::ref<org::apache::http::HttpResponse>>(target, request, context); }
	jni::ref<java::lang::Object> execute(jni::ref<org::apache::http::client::methods::HttpUriRequest> request, jni::ref<org::apache::http::client::ResponseHandler> responseHandler) { return call_method<"execute", jni::ref<java::lang::Object>>(request, responseHandler); }
	jni::ref<java::lang::Object> execute(jni::ref<org::apache::http::client::methods::HttpUriRequest> request, jni::ref<org::apache::http::client::ResponseHandler> responseHandler, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"execute", jni::ref<java::lang::Object>>(request, responseHandler, context); }
	jni::ref<java::lang::Object> execute(jni::ref<org::apache::http::HttpHost> target, jni::ref<org::apache::http::HttpRequest> request, jni::ref<org::apache::http::client::ResponseHandler> responseHandler) { return call_method<"execute", jni::ref<java::lang::Object>>(target, request, responseHandler); }
	jni::ref<java::lang::Object> execute(jni::ref<org::apache::http::HttpHost> target, jni::ref<org::apache::http::HttpRequest> request, jni::ref<org::apache::http::client::ResponseHandler> responseHandler, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"execute", jni::ref<java::lang::Object>>(target, request, responseHandler, context); }
	static jni::ref<org::apache::http::entity::AbstractHttpEntity> getCompressedEntity(jni::ref<jni::array<jbyte>> data, jni::ref<android::content::ContentResolver> resolver) { return call_static_method<"getCompressedEntity", jni::ref<org::apache::http::entity::AbstractHttpEntity>>(data, resolver); }
	static jlong getMinGzipSize(jni::ref<android::content::ContentResolver> resolver) { return call_static_method<"getMinGzipSize", jlong>(resolver); }
	void enableCurlLogging(jni::ref<java::lang::String> name, jint level) { return call_method<"enableCurlLogging", void>(name, level); }
	void disableCurlLogging() { return call_method<"disableCurlLogging", void>(); }
	static jlong parseDate(jni::ref<java::lang::String> dateString) { return call_static_method<"parseDate", jlong>(dateString); }

protected:

	AndroidHttpClient(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_HTTP_ANDROIDHTTPCLIENT
