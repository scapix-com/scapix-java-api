// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_OBJECTSTREAMFIELD_FWD
#define SCAPIX_JAVA_API_JAVA_IO_OBJECTSTREAMFIELD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class ObjectStreamField; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::ObjectStreamField>
{
	static constexpr fixed_string class_name = "java/io/ObjectStreamField";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OBJECTSTREAMFIELD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_OBJECTSTREAMFIELD)
#define SCAPIX_JAVA_API_JAVA_IO_OBJECTSTREAMFIELD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::ObjectStreamField : public jni::object_base<"java/io/ObjectStreamField",
	java::lang::Object,
	java::lang::Comparable>
{
public:

	static jni::ref<java::io::ObjectStreamField> new_object(jni::ref<java::lang::String> name, jni::ref<java::lang::Class> cl) { return base_::new_object(name, cl); }
	static jni::ref<java::io::ObjectStreamField> new_object(jni::ref<java::lang::String> name, jni::ref<java::lang::Class> cl, jboolean unshared) { return base_::new_object(name, cl, unshared); }
	jint compareTo(jni::ref<java::lang::Object> o) { return call_method<"compareTo", jint>(o); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getOffset() { return call_method<"getOffset", jint>(); }
	jni::ref<java::lang::Class> getType() { return call_method<"getType", jni::ref<java::lang::Class>>(); }
	jchar getTypeCode() { return call_method<"getTypeCode", jchar>(); }
	jni::ref<java::lang::String> getTypeString() { return call_method<"getTypeString", jni::ref<java::lang::String>>(); }
	jboolean isPrimitive() { return call_method<"isPrimitive", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean isUnshared() { return call_method<"isUnshared", jboolean>(); }

protected:

	ObjectStreamField(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OBJECTSTREAMFIELD
