// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/ObjectOutput.h>
#include <scapix/java_api/java/io/ObjectStreamConstants.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class ObjectOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::ObjectOutputStream>
{
	static constexpr fixed_string class_name = "java/io/ObjectOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::OutputStream, scapix::java_api::java::io::ObjectOutput, scapix::java_api::java::io::ObjectStreamConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/ObjectOutputStream_PutField.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::ObjectOutputStream : public jni::object_base<"java/io/ObjectOutputStream",
	java::io::OutputStream,
	java::io::ObjectOutput,
	java::io::ObjectStreamConstants>
{
public:

	using PutField = ObjectOutputStream_PutField;

	static jni::ref<java::io::ObjectOutputStream> new_object(jni::ref<java::io::OutputStream> output) { return base_::new_object(output); }
	void close() { return call_method<"close", void>(); }
	void defaultWriteObject() { return call_method<"defaultWriteObject", void>(); }
	void flush() { return call_method<"flush", void>(); }
	jni::ref<java::io::ObjectOutputStream_PutField> putFields() { return call_method<"putFields", jni::ref<java::io::ObjectOutputStream_PutField>>(); }
	void reset() { return call_method<"reset", void>(); }
	void useProtocolVersion(jint version) { return call_method<"useProtocolVersion", void>(version); }
	void write(jni::ref<jni::array<jbyte>> buffer, jint offset, jint length) { return call_method<"write", void>(buffer, offset, length); }
	void write(jint value) { return call_method<"write", void>(value); }
	void writeBoolean(jboolean value) { return call_method<"writeBoolean", void>(value); }
	void writeByte(jint value) { return call_method<"writeByte", void>(value); }
	void writeBytes(jni::ref<java::lang::String> value) { return call_method<"writeBytes", void>(value); }
	void writeChar(jint value) { return call_method<"writeChar", void>(value); }
	void writeChars(jni::ref<java::lang::String> value) { return call_method<"writeChars", void>(value); }
	void writeDouble(jdouble value) { return call_method<"writeDouble", void>(value); }
	void writeFields() { return call_method<"writeFields", void>(); }
	void writeFloat(jfloat value) { return call_method<"writeFloat", void>(value); }
	void writeInt(jint value) { return call_method<"writeInt", void>(value); }
	void writeLong(jlong value) { return call_method<"writeLong", void>(value); }
	void writeObject(jni::ref<java::lang::Object> object) { return call_method<"writeObject", void>(object); }
	void writeUnshared(jni::ref<java::lang::Object> object) { return call_method<"writeUnshared", void>(object); }
	void writeShort(jint value) { return call_method<"writeShort", void>(value); }
	void writeUTF(jni::ref<java::lang::String> value) { return call_method<"writeUTF", void>(value); }

protected:

	ObjectOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM
