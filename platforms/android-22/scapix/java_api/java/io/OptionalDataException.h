// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/ObjectStreamException.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_OPTIONALDATAEXCEPTION_FWD
#define SCAPIX_JAVA_API_JAVA_IO_OPTIONALDATAEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class OptionalDataException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::OptionalDataException>
{
	static constexpr fixed_string class_name = "java/io/OptionalDataException";
	using base_classes = std::tuple<scapix::java_api::java::io::ObjectStreamException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OPTIONALDATAEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_OPTIONALDATAEXCEPTION)
#define SCAPIX_JAVA_API_JAVA_IO_OPTIONALDATAEXCEPTION

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::OptionalDataException : public jni::object_base<"java/io/OptionalDataException",
	java::io::ObjectStreamException>
{
public:

	jboolean eof() { return get_field<"eof", jboolean>(); }
	void eof(jboolean v) { set_field<"eof", jboolean>(v); }
	jint length() { return get_field<"length", jint>(); }
	void length(jint v) { set_field<"length", jint>(v); }


protected:

	OptionalDataException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OPTIONALDATAEXCEPTION
