// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/Writer.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_BUFFEREDWRITER_FWD
#define SCAPIX_JAVA_API_JAVA_IO_BUFFEREDWRITER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class BufferedWriter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::BufferedWriter>
{
	static constexpr fixed_string class_name = "java/io/BufferedWriter";
	using base_classes = std::tuple<scapix::java_api::java::io::Writer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_BUFFEREDWRITER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_BUFFEREDWRITER)
#define SCAPIX_JAVA_API_JAVA_IO_BUFFEREDWRITER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::BufferedWriter : public jni::object_base<"java/io/BufferedWriter",
	java::io::Writer>
{
public:

	static jni::ref<java::io::BufferedWriter> new_object(jni::ref<java::io::Writer> out) { return base_::new_object(out); }
	static jni::ref<java::io::BufferedWriter> new_object(jni::ref<java::io::Writer> out, jint size) { return base_::new_object(out, size); }
	void close() { return call_method<"close", void>(); }
	void flush() { return call_method<"flush", void>(); }
	void newLine() { return call_method<"newLine", void>(); }
	void write(jni::ref<jni::array<jchar>> buffer, jint offset, jint count) { return call_method<"write", void>(buffer, offset, count); }
	void write(jint oneChar) { return call_method<"write", void>(oneChar); }
	void write(jni::ref<java::lang::String> str, jint offset, jint count) { return call_method<"write", void>(str, offset, count); }

protected:

	BufferedWriter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_BUFFEREDWRITER
