// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_DOUBLE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_DOUBLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Double; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Double>
{
	static constexpr fixed_string class_name = "java/lang/Double";
	using base_classes = std::tuple<scapix::java_api::java::lang::Number, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_DOUBLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_DOUBLE)
#define SCAPIX_JAVA_API_JAVA_LANG_DOUBLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Double : public jni::object_base<"java/lang/Double",
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jint MAX_EXPONENT() { return get_static_field<"MAX_EXPONENT", jint>(); }
	static jdouble MAX_VALUE() { return get_static_field<"MAX_VALUE", jdouble>(); }
	static jint MIN_EXPONENT() { return get_static_field<"MIN_EXPONENT", jint>(); }
	static jdouble MIN_NORMAL() { return get_static_field<"MIN_NORMAL", jdouble>(); }
	static jdouble MIN_VALUE() { return get_static_field<"MIN_VALUE", jdouble>(); }
	static jdouble NEGATIVE_INFINITY() { return get_static_field<"NEGATIVE_INFINITY", jdouble>(); }
	static jdouble NaN() { return get_static_field<"NaN", jdouble>(); }
	static jdouble POSITIVE_INFINITY() { return get_static_field<"POSITIVE_INFINITY", jdouble>(); }
	static jint SIZE() { return get_static_field<"SIZE", jint>(); }
	static jni::ref<java::lang::Class> TYPE() { return get_static_field<"TYPE", jni::ref<java::lang::Class>>(); }

	static jni::ref<java::lang::Double> new_object(jdouble value) { return base_::new_object(value); }
	static jni::ref<java::lang::Double> new_object(jni::ref<java::lang::String> string) { return base_::new_object(string); }
	jint compareTo(jni::ref<java::lang::Double> object) { return call_method<"compareTo", jint>(object); }
	jbyte byteValue() { return call_method<"byteValue", jbyte>(); }
	static jlong doubleToLongBits(jdouble value) { return call_static_method<"doubleToLongBits", jlong>(value); }
	static jlong doubleToRawLongBits(jdouble p1) { return call_static_method<"doubleToRawLongBits", jlong>(p1); }
	jdouble doubleValue() { return call_method<"doubleValue", jdouble>(); }
	jboolean equals(jni::ref<java::lang::Object> object) { return call_method<"equals", jboolean>(object); }
	jfloat floatValue() { return call_method<"floatValue", jfloat>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint intValue() { return call_method<"intValue", jint>(); }
	jboolean isInfinite() { return call_method<"isInfinite", jboolean>(); }
	static jboolean isInfinite(jdouble d) { return call_static_method<"isInfinite", jboolean>(d); }
	jboolean isNaN() { return call_method<"isNaN", jboolean>(); }
	static jboolean isNaN(jdouble d) { return call_static_method<"isNaN", jboolean>(d); }
	static jdouble longBitsToDouble(jlong p1) { return call_static_method<"longBitsToDouble", jdouble>(p1); }
	jlong longValue() { return call_method<"longValue", jlong>(); }
	static jdouble parseDouble(jni::ref<java::lang::String> string) { return call_static_method<"parseDouble", jdouble>(string); }
	jshort shortValue() { return call_method<"shortValue", jshort>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> toString(jdouble d) { return call_static_method<"toString", jni::ref<java::lang::String>>(d); }
	static jni::ref<java::lang::Double> valueOf(jni::ref<java::lang::String> string) { return call_static_method<"valueOf", jni::ref<java::lang::Double>>(string); }
	static jint compare(jdouble double1, jdouble p2) { return call_static_method<"compare", jint>(double1, p2); }
	static jni::ref<java::lang::Double> valueOf(jdouble d) { return call_static_method<"valueOf", jni::ref<java::lang::Double>>(d); }
	static jni::ref<java::lang::String> toHexString(jdouble d) { return call_static_method<"toHexString", jni::ref<java::lang::String>>(d); }

protected:

	Double(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_DOUBLE
