// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedElement.h>
#include <scapix/java_api/java/lang/reflect/GenericDeclaration.h>
#include <scapix/java_api/java/lang/reflect/Type.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASS_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Class; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Class>
{
	static constexpr fixed_string class_name = "java/lang/Class";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::reflect::AnnotatedElement, scapix::java_api::java::lang::reflect::GenericDeclaration, scapix::java_api::java::lang::reflect::Type>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASS)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Package.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/java/lang/reflect/TypeVariable.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/security/ProtectionDomain.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Class : public jni::object_base<"java/lang/Class",
	java::lang::Object,
	java::io::Serializable,
	java::lang::reflect::AnnotatedElement,
	java::lang::reflect::GenericDeclaration,
	java::lang::reflect::Type>
{
public:

	static jni::ref<java::lang::Class> forName(jni::ref<java::lang::String> className) { return call_static_method<"forName", jni::ref<java::lang::Class>>(className); }
	static jni::ref<java::lang::Class> forName(jni::ref<java::lang::String> className, jboolean shouldInitialize, jni::ref<java::lang::ClassLoader> classLoader) { return call_static_method<"forName", jni::ref<java::lang::Class>>(className, shouldInitialize, classLoader); }
	jni::ref<jni::array<java::lang::Class>> getClasses() { return call_method<"getClasses", jni::ref<jni::array<java::lang::Class>>>(); }
	jni::ref<java::lang::annotation::Annotation> getAnnotation(jni::ref<java::lang::Class> annotationType) { return call_method<"getAnnotation", jni::ref<java::lang::annotation::Annotation>>(annotationType); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getAnnotations() { return call_method<"getAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(); }
	jni::ref<java::lang::String> getCanonicalName() { return call_method<"getCanonicalName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::ClassLoader> getClassLoader() { return call_method<"getClassLoader", jni::ref<java::lang::ClassLoader>>(); }
	jni::ref<java::lang::Class> getComponentType() { return call_method<"getComponentType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::reflect::Constructor> getConstructor(jni::ref<jni::array<java::lang::Class>> parameterTypes) { return call_method<"getConstructor", jni::ref<java::lang::reflect::Constructor>>(parameterTypes); }
	jni::ref<java::lang::reflect::Constructor> getDeclaredConstructor(jni::ref<jni::array<java::lang::Class>> parameterTypes) { return call_method<"getDeclaredConstructor", jni::ref<java::lang::reflect::Constructor>>(parameterTypes); }
	jni::ref<jni::array<java::lang::reflect::Constructor>> getConstructors() { return call_method<"getConstructors", jni::ref<jni::array<java::lang::reflect::Constructor>>>(); }
	jni::ref<jni::array<java::lang::reflect::Constructor>> getDeclaredConstructors() { return call_method<"getDeclaredConstructors", jni::ref<jni::array<java::lang::reflect::Constructor>>>(); }
	jni::ref<java::lang::reflect::Method> getDeclaredMethod(jni::ref<java::lang::String> name, jni::ref<jni::array<java::lang::Class>> parameterTypes) { return call_method<"getDeclaredMethod", jni::ref<java::lang::reflect::Method>>(name, parameterTypes); }
	jni::ref<java::lang::reflect::Method> getMethod(jni::ref<java::lang::String> name, jni::ref<jni::array<java::lang::Class>> parameterTypes) { return call_method<"getMethod", jni::ref<java::lang::reflect::Method>>(name, parameterTypes); }
	jni::ref<jni::array<java::lang::reflect::Method>> getDeclaredMethods() { return call_method<"getDeclaredMethods", jni::ref<jni::array<java::lang::reflect::Method>>>(); }
	jni::ref<jni::array<java::lang::reflect::Method>> getMethods() { return call_method<"getMethods", jni::ref<jni::array<java::lang::reflect::Method>>>(); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getDeclaredAnnotations() { return call_method<"getDeclaredAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(); }
	jni::ref<jni::array<java::lang::Class>> getDeclaredClasses() { return call_method<"getDeclaredClasses", jni::ref<jni::array<java::lang::Class>>>(); }
	jni::ref<java::lang::reflect::Field> getDeclaredField(jni::ref<java::lang::String> name) { return call_method<"getDeclaredField", jni::ref<java::lang::reflect::Field>>(name); }
	jni::ref<jni::array<java::lang::reflect::Field>> getDeclaredFields() { return call_method<"getDeclaredFields", jni::ref<jni::array<java::lang::reflect::Field>>>(); }
	jni::ref<java::lang::Class> getDeclaringClass() { return call_method<"getDeclaringClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> getEnclosingClass() { return call_method<"getEnclosingClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::reflect::Constructor> getEnclosingConstructor() { return call_method<"getEnclosingConstructor", jni::ref<java::lang::reflect::Constructor>>(); }
	jni::ref<java::lang::reflect::Method> getEnclosingMethod() { return call_method<"getEnclosingMethod", jni::ref<java::lang::reflect::Method>>(); }
	jni::ref<jni::array<java::lang::Object>> getEnumConstants() { return call_method<"getEnumConstants", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<java::lang::reflect::Field> getField(jni::ref<java::lang::String> name) { return call_method<"getField", jni::ref<java::lang::reflect::Field>>(name); }
	jni::ref<jni::array<java::lang::reflect::Field>> getFields() { return call_method<"getFields", jni::ref<jni::array<java::lang::reflect::Field>>>(); }
	jni::ref<jni::array<java::lang::reflect::Type>> getGenericInterfaces() { return call_method<"getGenericInterfaces", jni::ref<jni::array<java::lang::reflect::Type>>>(); }
	jni::ref<java::lang::reflect::Type> getGenericSuperclass() { return call_method<"getGenericSuperclass", jni::ref<java::lang::reflect::Type>>(); }
	jni::ref<jni::array<java::lang::Class>> getInterfaces() { return call_method<"getInterfaces", jni::ref<jni::array<java::lang::Class>>>(); }
	jint getModifiers() { return call_method<"getModifiers", jint>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSimpleName() { return call_method<"getSimpleName", jni::ref<java::lang::String>>(); }
	jni::ref<java::security::ProtectionDomain> getProtectionDomain() { return call_method<"getProtectionDomain", jni::ref<java::security::ProtectionDomain>>(); }
	jni::ref<java::net::URL> getResource(jni::ref<java::lang::String> resourceName) { return call_method<"getResource", jni::ref<java::net::URL>>(resourceName); }
	jni::ref<java::io::InputStream> getResourceAsStream(jni::ref<java::lang::String> resourceName) { return call_method<"getResourceAsStream", jni::ref<java::io::InputStream>>(resourceName); }
	jni::ref<jni::array<java::lang::Object>> getSigners() { return call_method<"getSigners", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<java::lang::Class> getSuperclass() { return call_method<"getSuperclass", jni::ref<java::lang::Class>>(); }
	jni::ref<jni::array<java::lang::reflect::TypeVariable>> getTypeParameters() { return call_method<"getTypeParameters", jni::ref<jni::array<java::lang::reflect::TypeVariable>>>(); }
	jboolean isAnnotation() { return call_method<"isAnnotation", jboolean>(); }
	jboolean isAnnotationPresent(jni::ref<java::lang::Class> annotationType) { return call_method<"isAnnotationPresent", jboolean>(annotationType); }
	jboolean isAnonymousClass() { return call_method<"isAnonymousClass", jboolean>(); }
	jboolean isArray() { return call_method<"isArray", jboolean>(); }
	jboolean isAssignableFrom(jni::ref<java::lang::Class> c) { return call_method<"isAssignableFrom", jboolean>(c); }
	jboolean isEnum() { return call_method<"isEnum", jboolean>(); }
	jboolean isInstance(jni::ref<java::lang::Object> object) { return call_method<"isInstance", jboolean>(object); }
	jboolean isInterface() { return call_method<"isInterface", jboolean>(); }
	jboolean isLocalClass() { return call_method<"isLocalClass", jboolean>(); }
	jboolean isMemberClass() { return call_method<"isMemberClass", jboolean>(); }
	jboolean isPrimitive() { return call_method<"isPrimitive", jboolean>(); }
	jboolean isSynthetic() { return call_method<"isSynthetic", jboolean>(); }
	jni::ref<java::lang::Object> newInstance() { return call_method<"newInstance", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Package> getPackage() { return call_method<"getPackage", jni::ref<java::lang::Package>>(); }
	jboolean desiredAssertionStatus() { return call_method<"desiredAssertionStatus", jboolean>(); }
	jni::ref<java::lang::Class> asSubclass(jni::ref<java::lang::Class> c) { return call_method<"asSubclass", jni::ref<java::lang::Class>>(c); }
	jni::ref<java::lang::Object> cast(jni::ref<java::lang::Object> obj) { return call_method<"cast", jni::ref<java::lang::Object>>(obj); }

protected:

	Class(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASS
