// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_LONG_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_LONG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Long; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Long>
{
	static constexpr fixed_string class_name = "java/lang/Long";
	using base_classes = std::tuple<scapix::java_api::java::lang::Number, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_LONG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_LONG)
#define SCAPIX_JAVA_API_JAVA_LANG_LONG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Long : public jni::object_base<"java/lang/Long",
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jlong MAX_VALUE() { return get_static_field<"MAX_VALUE", jlong>(); }
	static jlong MIN_VALUE() { return get_static_field<"MIN_VALUE", jlong>(); }
	static jint SIZE() { return get_static_field<"SIZE", jint>(); }
	static jni::ref<java::lang::Class> TYPE() { return get_static_field<"TYPE", jni::ref<java::lang::Class>>(); }

	static jni::ref<java::lang::Long> new_object(jlong value) { return base_::new_object(value); }
	static jni::ref<java::lang::Long> new_object(jni::ref<java::lang::String> string) { return base_::new_object(string); }
	jbyte byteValue() { return call_method<"byteValue", jbyte>(); }
	jint compareTo(jni::ref<java::lang::Long> object) { return call_method<"compareTo", jint>(object); }
	static jint compare(jlong lhs, jlong p2) { return call_static_method<"compare", jint>(lhs, p2); }
	static jni::ref<java::lang::Long> decode(jni::ref<java::lang::String> string) { return call_static_method<"decode", jni::ref<java::lang::Long>>(string); }
	jdouble doubleValue() { return call_method<"doubleValue", jdouble>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jfloat floatValue() { return call_method<"floatValue", jfloat>(); }
	static jni::ref<java::lang::Long> getLong(jni::ref<java::lang::String> string) { return call_static_method<"getLong", jni::ref<java::lang::Long>>(string); }
	static jni::ref<java::lang::Long> getLong(jni::ref<java::lang::String> string, jlong defaultValue) { return call_static_method<"getLong", jni::ref<java::lang::Long>>(string, defaultValue); }
	static jni::ref<java::lang::Long> getLong(jni::ref<java::lang::String> string, jni::ref<java::lang::Long> defaultValue) { return call_static_method<"getLong", jni::ref<java::lang::Long>>(string, defaultValue); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint intValue() { return call_method<"intValue", jint>(); }
	jlong longValue() { return call_method<"longValue", jlong>(); }
	static jlong parseLong(jni::ref<java::lang::String> string) { return call_static_method<"parseLong", jlong>(string); }
	static jlong parseLong(jni::ref<java::lang::String> string, jint radix) { return call_static_method<"parseLong", jlong>(string, radix); }
	jshort shortValue() { return call_method<"shortValue", jshort>(); }
	static jni::ref<java::lang::String> toBinaryString(jlong v) { return call_static_method<"toBinaryString", jni::ref<java::lang::String>>(v); }
	static jni::ref<java::lang::String> toHexString(jlong v) { return call_static_method<"toHexString", jni::ref<java::lang::String>>(v); }
	static jni::ref<java::lang::String> toOctalString(jlong v) { return call_static_method<"toOctalString", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> toString(jlong n) { return call_static_method<"toString", jni::ref<java::lang::String>>(n); }
	static jni::ref<java::lang::String> toString(jlong v, jint p2) { return call_static_method<"toString", jni::ref<java::lang::String>>(v, p2); }
	static jni::ref<java::lang::Long> valueOf(jni::ref<java::lang::String> string) { return call_static_method<"valueOf", jni::ref<java::lang::Long>>(string); }
	static jni::ref<java::lang::Long> valueOf(jni::ref<java::lang::String> string, jint radix) { return call_static_method<"valueOf", jni::ref<java::lang::Long>>(string, radix); }
	static jlong highestOneBit(jlong v) { return call_static_method<"highestOneBit", jlong>(v); }
	static jlong lowestOneBit(jlong v) { return call_static_method<"lowestOneBit", jlong>(v); }
	static jint numberOfLeadingZeros(jlong v) { return call_static_method<"numberOfLeadingZeros", jint>(v); }
	static jint numberOfTrailingZeros(jlong v) { return call_static_method<"numberOfTrailingZeros", jint>(v); }
	static jint bitCount(jlong v) { return call_static_method<"bitCount", jint>(v); }
	static jlong rotateLeft(jlong v, jint p2) { return call_static_method<"rotateLeft", jlong>(v, p2); }
	static jlong rotateRight(jlong v, jint p2) { return call_static_method<"rotateRight", jlong>(v, p2); }
	static jlong reverseBytes(jlong v) { return call_static_method<"reverseBytes", jlong>(v); }
	static jlong reverse(jlong v) { return call_static_method<"reverse", jlong>(v); }
	static jint signum(jlong v) { return call_static_method<"signum", jint>(v); }
	static jni::ref<java::lang::Long> valueOf(jlong v) { return call_static_method<"valueOf", jni::ref<java::lang::Long>>(v); }

protected:

	Long(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_LONG
