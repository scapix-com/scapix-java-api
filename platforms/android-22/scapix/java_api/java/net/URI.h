// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_URI_FWD
#define SCAPIX_JAVA_API_JAVA_NET_URI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class URI; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::URI>
{
	static constexpr fixed_string class_name = "java/net/URI";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_URI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_URI)
#define SCAPIX_JAVA_API_JAVA_NET_URI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::net::URI : public jni::object_base<"java/net/URI",
	java::lang::Object,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static jni::ref<java::net::URI> new_object(jni::ref<java::lang::String> spec) { return base_::new_object(spec); }
	static jni::ref<java::net::URI> new_object(jni::ref<java::lang::String> scheme, jni::ref<java::lang::String> schemeSpecificPart, jni::ref<java::lang::String> fragment) { return base_::new_object(scheme, schemeSpecificPart, fragment); }
	static jni::ref<java::net::URI> new_object(jni::ref<java::lang::String> scheme, jni::ref<java::lang::String> userInfo, jni::ref<java::lang::String> host, jint port, jni::ref<java::lang::String> path, jni::ref<java::lang::String> query, jni::ref<java::lang::String> fragment) { return base_::new_object(scheme, userInfo, host, port, path, query, fragment); }
	static jni::ref<java::net::URI> new_object(jni::ref<java::lang::String> scheme, jni::ref<java::lang::String> host, jni::ref<java::lang::String> path, jni::ref<java::lang::String> fragment) { return base_::new_object(scheme, host, path, fragment); }
	static jni::ref<java::net::URI> new_object(jni::ref<java::lang::String> scheme, jni::ref<java::lang::String> authority, jni::ref<java::lang::String> path, jni::ref<java::lang::String> query, jni::ref<java::lang::String> fragment) { return base_::new_object(scheme, authority, path, query, fragment); }
	jint compareTo(jni::ref<java::net::URI> uri) { return call_method<"compareTo", jint>(uri); }
	static jni::ref<java::net::URI> create(jni::ref<java::lang::String> uri) { return call_static_method<"create", jni::ref<java::net::URI>>(uri); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jni::ref<java::lang::String> getScheme() { return call_method<"getScheme", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSchemeSpecificPart() { return call_method<"getSchemeSpecificPart", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getRawSchemeSpecificPart() { return call_method<"getRawSchemeSpecificPart", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAuthority() { return call_method<"getAuthority", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getRawAuthority() { return call_method<"getRawAuthority", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getUserInfo() { return call_method<"getUserInfo", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getRawUserInfo() { return call_method<"getRawUserInfo", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getHost() { return call_method<"getHost", jni::ref<java::lang::String>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	jni::ref<java::lang::String> getPath() { return call_method<"getPath", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getRawPath() { return call_method<"getRawPath", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getQuery() { return call_method<"getQuery", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getRawQuery() { return call_method<"getRawQuery", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFragment() { return call_method<"getFragment", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getRawFragment() { return call_method<"getRawFragment", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean isAbsolute() { return call_method<"isAbsolute", jboolean>(); }
	jboolean isOpaque() { return call_method<"isOpaque", jboolean>(); }
	jni::ref<java::net::URI> normalize() { return call_method<"normalize", jni::ref<java::net::URI>>(); }
	jni::ref<java::net::URI> parseServerAuthority() { return call_method<"parseServerAuthority", jni::ref<java::net::URI>>(); }
	jni::ref<java::net::URI> relativize(jni::ref<java::net::URI> relative) { return call_method<"relativize", jni::ref<java::net::URI>>(relative); }
	jni::ref<java::net::URI> resolve(jni::ref<java::net::URI> relative) { return call_method<"resolve", jni::ref<java::net::URI>>(relative); }
	jni::ref<java::net::URI> resolve(jni::ref<java::lang::String> relative) { return call_method<"resolve", jni::ref<java::net::URI>>(relative); }
	jni::ref<java::lang::String> toASCIIString() { return call_method<"toASCIIString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::net::URL> toURL() { return call_method<"toURL", jni::ref<java::net::URL>>(); }

protected:

	URI(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_URI
