// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Date.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_TIMESTAMP_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_TIMESTAMP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class Timestamp; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::Timestamp>
{
	static constexpr fixed_string class_name = "java/sql/Timestamp";
	using base_classes = std::tuple<scapix::java_api::java::util::Date>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_TIMESTAMP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_TIMESTAMP)
#define SCAPIX_JAVA_API_JAVA_SQL_TIMESTAMP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::Timestamp : public jni::object_base<"java/sql/Timestamp",
	java::util::Date>
{
public:

	static jni::ref<java::sql::Timestamp> new_object(jint theYear, jint theMonth, jint theDate, jint theHour, jint theMinute, jint theSecond, jint theNano) { return base_::new_object(theYear, theMonth, theDate, theHour, theMinute, theSecond, theNano); }
	static jni::ref<java::sql::Timestamp> new_object(jlong theTime) { return base_::new_object(theTime); }
	jboolean after(jni::ref<java::sql::Timestamp> theTimestamp) { return call_method<"after", jboolean>(theTimestamp); }
	jboolean before(jni::ref<java::sql::Timestamp> theTimestamp) { return call_method<"before", jboolean>(theTimestamp); }
	jint compareTo(jni::ref<java::util::Date> theObject) { return call_method<"compareTo", jint>(theObject); }
	jint compareTo(jni::ref<java::sql::Timestamp> theTimestamp) { return call_method<"compareTo", jint>(theTimestamp); }
	jboolean equals(jni::ref<java::lang::Object> theObject) { return call_method<"equals", jboolean>(theObject); }
	jboolean equals(jni::ref<java::sql::Timestamp> theTimestamp) { return call_method<"equals", jboolean>(theTimestamp); }
	jint getNanos() { return call_method<"getNanos", jint>(); }
	jlong getTime() { return call_method<"getTime", jlong>(); }
	void setNanos(jint n) { return call_method<"setNanos", void>(n); }
	void setTime(jlong theTime) { return call_method<"setTime", void>(theTime); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::sql::Timestamp> valueOf(jni::ref<java::lang::String> s) { return call_static_method<"valueOf", jni::ref<java::sql::Timestamp>>(s); }

protected:

	Timestamp(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_TIMESTAMP
