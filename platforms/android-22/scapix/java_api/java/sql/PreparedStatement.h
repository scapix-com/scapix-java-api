// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Statement.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_PREPAREDSTATEMENT_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_PREPAREDSTATEMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class PreparedStatement; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::PreparedStatement>
{
	static constexpr fixed_string class_name = "java/sql/PreparedStatement";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::sql::Statement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_PREPAREDSTATEMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_PREPAREDSTATEMENT)
#define SCAPIX_JAVA_API_JAVA_SQL_PREPAREDSTATEMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/ParameterMetaData.h>
#include <scapix/java_api/java/sql/Ref.h>
#include <scapix/java_api/java/sql/ResultSet.h>
#include <scapix/java_api/java/sql/ResultSetMetaData.h>
#include <scapix/java_api/java/sql/RowId.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Calendar.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::PreparedStatement : public jni::object_base<"java/sql/PreparedStatement",
	java::lang::Object,
	java::sql::Statement>
{
public:

	void addBatch() { return call_method<"addBatch", void>(); }
	void clearParameters() { return call_method<"clearParameters", void>(); }
	jboolean execute() { return call_method<"execute", jboolean>(); }
	jni::ref<java::sql::ResultSet> executeQuery() { return call_method<"executeQuery", jni::ref<java::sql::ResultSet>>(); }
	jint executeUpdate() { return call_method<"executeUpdate", jint>(); }
	jni::ref<java::sql::ResultSetMetaData> getMetaData() { return call_method<"getMetaData", jni::ref<java::sql::ResultSetMetaData>>(); }
	jni::ref<java::sql::ParameterMetaData> getParameterMetaData() { return call_method<"getParameterMetaData", jni::ref<java::sql::ParameterMetaData>>(); }
	void setArray(jint p1, jni::ref<java::sql::Array> p2) { return call_method<"setArray", void>(p1, p2); }
	void setAsciiStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setAsciiStream", void>(p1, p2, p3); }
	void setBigDecimal(jint p1, jni::ref<java::math::BigDecimal> p2) { return call_method<"setBigDecimal", void>(p1, p2); }
	void setBinaryStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setBinaryStream", void>(p1, p2, p3); }
	void setBlob(jint p1, jni::ref<java::sql::Blob> p2) { return call_method<"setBlob", void>(p1, p2); }
	void setBoolean(jint p1, jboolean p2) { return call_method<"setBoolean", void>(p1, p2); }
	void setByte(jint p1, jbyte p2) { return call_method<"setByte", void>(p1, p2); }
	void setBytes(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"setBytes", void>(p1, p2); }
	void setCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jint p3) { return call_method<"setCharacterStream", void>(p1, p2, p3); }
	void setClob(jint p1, jni::ref<java::sql::Clob> p2) { return call_method<"setClob", void>(p1, p2); }
	void setDate(jint p1, jni::ref<java::sql::Date> p2) { return call_method<"setDate", void>(p1, p2); }
	void setDate(jint p1, jni::ref<java::sql::Date> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setDate", void>(p1, p2, p3); }
	void setDouble(jint p1, jdouble p2) { return call_method<"setDouble", void>(p1, p2); }
	void setFloat(jint p1, jfloat p2) { return call_method<"setFloat", void>(p1, p2); }
	void setInt(jint p1, jint p2) { return call_method<"setInt", void>(p1, p2); }
	void setLong(jint p1, jlong p2) { return call_method<"setLong", void>(p1, p2); }
	void setNull(jint p1, jint p2) { return call_method<"setNull", void>(p1, p2); }
	void setNull(jint p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"setNull", void>(p1, p2, p3); }
	void setObject(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"setObject", void>(p1, p2); }
	void setObject(jint p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"setObject", void>(p1, p2, p3); }
	void setObject(jint p1, jni::ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<"setObject", void>(p1, p2, p3, p4); }
	void setRef(jint p1, jni::ref<java::sql::Ref> p2) { return call_method<"setRef", void>(p1, p2); }
	void setShort(jint p1, jshort p2) { return call_method<"setShort", void>(p1, p2); }
	void setString(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setString", void>(p1, p2); }
	void setTime(jint p1, jni::ref<java::sql::Time> p2) { return call_method<"setTime", void>(p1, p2); }
	void setTime(jint p1, jni::ref<java::sql::Time> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setTime", void>(p1, p2, p3); }
	void setTimestamp(jint p1, jni::ref<java::sql::Timestamp> p2) { return call_method<"setTimestamp", void>(p1, p2); }
	void setTimestamp(jint p1, jni::ref<java::sql::Timestamp> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setTimestamp", void>(p1, p2, p3); }
	void setUnicodeStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setUnicodeStream", void>(p1, p2, p3); }
	void setURL(jint p1, jni::ref<java::net::URL> p2) { return call_method<"setURL", void>(p1, p2); }
	void setRowId(jint p1, jni::ref<java::sql::RowId> p2) { return call_method<"setRowId", void>(p1, p2); }
	void setNString(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setNString", void>(p1, p2); }
	void setNCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setNCharacterStream", void>(p1, p2, p3); }
	void setNClob(jint p1, jni::ref<java::sql::NClob> p2) { return call_method<"setNClob", void>(p1, p2); }
	void setClob(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setClob", void>(p1, p2, p3); }
	void setBlob(jint p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"setBlob", void>(p1, p2, p3); }
	void setNClob(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setNClob", void>(p1, p2, p3); }
	void setSQLXML(jint p1, jni::ref<java::sql::SQLXML> p2) { return call_method<"setSQLXML", void>(p1, p2); }
	void setAsciiStream(jint p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"setAsciiStream", void>(p1, p2, p3); }
	void setBinaryStream(jint p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"setBinaryStream", void>(p1, p2, p3); }
	void setCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setCharacterStream", void>(p1, p2, p3); }
	void setAsciiStream(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"setAsciiStream", void>(p1, p2); }
	void setBinaryStream(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"setBinaryStream", void>(p1, p2); }
	void setCharacterStream(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"setCharacterStream", void>(p1, p2); }
	void setNCharacterStream(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"setNCharacterStream", void>(p1, p2); }
	void setClob(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"setClob", void>(p1, p2); }
	void setBlob(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"setBlob", void>(p1, p2); }
	void setNClob(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"setNClob", void>(p1, p2); }

protected:

	PreparedStatement(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_PREPAREDSTATEMENT
