// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Wrapper.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_DATABASEMETADATA_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_DATABASEMETADATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class DatabaseMetaData; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::DatabaseMetaData>
{
	static constexpr fixed_string class_name = "java/sql/DatabaseMetaData";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::sql::Wrapper>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_DATABASEMETADATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_DATABASEMETADATA)
#define SCAPIX_JAVA_API_JAVA_SQL_DATABASEMETADATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/sql/Connection.h>
#include <scapix/java_api/java/sql/ResultSet.h>
#include <scapix/java_api/java/sql/RowIdLifetime.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::DatabaseMetaData : public jni::object_base<"java/sql/DatabaseMetaData",
	java::lang::Object,
	java::sql::Wrapper>
{
public:

	static jshort attributeNoNulls() { return get_static_field<"attributeNoNulls", jshort>(); }
	static jshort attributeNullable() { return get_static_field<"attributeNullable", jshort>(); }
	static jshort attributeNullableUnknown() { return get_static_field<"attributeNullableUnknown", jshort>(); }
	static jint bestRowNotPseudo() { return get_static_field<"bestRowNotPseudo", jint>(); }
	static jint bestRowPseudo() { return get_static_field<"bestRowPseudo", jint>(); }
	static jint bestRowSession() { return get_static_field<"bestRowSession", jint>(); }
	static jint bestRowTemporary() { return get_static_field<"bestRowTemporary", jint>(); }
	static jint bestRowTransaction() { return get_static_field<"bestRowTransaction", jint>(); }
	static jint bestRowUnknown() { return get_static_field<"bestRowUnknown", jint>(); }
	static jint columnNoNulls() { return get_static_field<"columnNoNulls", jint>(); }
	static jint columnNullable() { return get_static_field<"columnNullable", jint>(); }
	static jint columnNullableUnknown() { return get_static_field<"columnNullableUnknown", jint>(); }
	static jint functionColumnIn() { return get_static_field<"functionColumnIn", jint>(); }
	static jint functionColumnInOut() { return get_static_field<"functionColumnInOut", jint>(); }
	static jint functionColumnOut() { return get_static_field<"functionColumnOut", jint>(); }
	static jint functionColumnResult() { return get_static_field<"functionColumnResult", jint>(); }
	static jint functionColumnUnknown() { return get_static_field<"functionColumnUnknown", jint>(); }
	static jint functionNoNulls() { return get_static_field<"functionNoNulls", jint>(); }
	static jint functionNoTable() { return get_static_field<"functionNoTable", jint>(); }
	static jint functionNullable() { return get_static_field<"functionNullable", jint>(); }
	static jint functionNullableUnknown() { return get_static_field<"functionNullableUnknown", jint>(); }
	static jint functionResultUnknown() { return get_static_field<"functionResultUnknown", jint>(); }
	static jint functionReturn() { return get_static_field<"functionReturn", jint>(); }
	static jint functionReturnsTable() { return get_static_field<"functionReturnsTable", jint>(); }
	static jint importedKeyCascade() { return get_static_field<"importedKeyCascade", jint>(); }
	static jint importedKeyInitiallyDeferred() { return get_static_field<"importedKeyInitiallyDeferred", jint>(); }
	static jint importedKeyInitiallyImmediate() { return get_static_field<"importedKeyInitiallyImmediate", jint>(); }
	static jint importedKeyNoAction() { return get_static_field<"importedKeyNoAction", jint>(); }
	static jint importedKeyNotDeferrable() { return get_static_field<"importedKeyNotDeferrable", jint>(); }
	static jint importedKeyRestrict() { return get_static_field<"importedKeyRestrict", jint>(); }
	static jint importedKeySetDefault() { return get_static_field<"importedKeySetDefault", jint>(); }
	static jint importedKeySetNull() { return get_static_field<"importedKeySetNull", jint>(); }
	static jint procedureColumnIn() { return get_static_field<"procedureColumnIn", jint>(); }
	static jint procedureColumnInOut() { return get_static_field<"procedureColumnInOut", jint>(); }
	static jint procedureColumnOut() { return get_static_field<"procedureColumnOut", jint>(); }
	static jint procedureColumnResult() { return get_static_field<"procedureColumnResult", jint>(); }
	static jint procedureColumnReturn() { return get_static_field<"procedureColumnReturn", jint>(); }
	static jint procedureColumnUnknown() { return get_static_field<"procedureColumnUnknown", jint>(); }
	static jint procedureNoNulls() { return get_static_field<"procedureNoNulls", jint>(); }
	static jint procedureNoResult() { return get_static_field<"procedureNoResult", jint>(); }
	static jint procedureNullable() { return get_static_field<"procedureNullable", jint>(); }
	static jint procedureNullableUnknown() { return get_static_field<"procedureNullableUnknown", jint>(); }
	static jint procedureResultUnknown() { return get_static_field<"procedureResultUnknown", jint>(); }
	static jint procedureReturnsResult() { return get_static_field<"procedureReturnsResult", jint>(); }
	static jint sqlStateSQL() { return get_static_field<"sqlStateSQL", jint>(); }
	static jint sqlStateSQL99() { return get_static_field<"sqlStateSQL99", jint>(); }
	static jint sqlStateXOpen() { return get_static_field<"sqlStateXOpen", jint>(); }
	static jshort tableIndexClustered() { return get_static_field<"tableIndexClustered", jshort>(); }
	static jshort tableIndexHashed() { return get_static_field<"tableIndexHashed", jshort>(); }
	static jshort tableIndexOther() { return get_static_field<"tableIndexOther", jshort>(); }
	static jshort tableIndexStatistic() { return get_static_field<"tableIndexStatistic", jshort>(); }
	static jint typeNoNulls() { return get_static_field<"typeNoNulls", jint>(); }
	static jint typeNullable() { return get_static_field<"typeNullable", jint>(); }
	static jint typeNullableUnknown() { return get_static_field<"typeNullableUnknown", jint>(); }
	static jint typePredBasic() { return get_static_field<"typePredBasic", jint>(); }
	static jint typePredChar() { return get_static_field<"typePredChar", jint>(); }
	static jint typePredNone() { return get_static_field<"typePredNone", jint>(); }
	static jint typeSearchable() { return get_static_field<"typeSearchable", jint>(); }
	static jint versionColumnNotPseudo() { return get_static_field<"versionColumnNotPseudo", jint>(); }
	static jint versionColumnPseudo() { return get_static_field<"versionColumnPseudo", jint>(); }
	static jint versionColumnUnknown() { return get_static_field<"versionColumnUnknown", jint>(); }

	jboolean allProceduresAreCallable() { return call_method<"allProceduresAreCallable", jboolean>(); }
	jboolean allTablesAreSelectable() { return call_method<"allTablesAreSelectable", jboolean>(); }
	jboolean dataDefinitionCausesTransactionCommit() { return call_method<"dataDefinitionCausesTransactionCommit", jboolean>(); }
	jboolean dataDefinitionIgnoredInTransactions() { return call_method<"dataDefinitionIgnoredInTransactions", jboolean>(); }
	jboolean deletesAreDetected(jint p1) { return call_method<"deletesAreDetected", jboolean>(p1); }
	jboolean doesMaxRowSizeIncludeBlobs() { return call_method<"doesMaxRowSizeIncludeBlobs", jboolean>(); }
	jni::ref<java::sql::ResultSet> getAttributes(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"getAttributes", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
	jni::ref<java::sql::ResultSet> getBestRowIdentifier(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jint p4, jboolean p5) { return call_method<"getBestRowIdentifier", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4, p5); }
	jni::ref<java::sql::ResultSet> getCatalogs() { return call_method<"getCatalogs", jni::ref<java::sql::ResultSet>>(); }
	jni::ref<java::lang::String> getCatalogSeparator() { return call_method<"getCatalogSeparator", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getCatalogTerm() { return call_method<"getCatalogTerm", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSet> getColumnPrivileges(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"getColumnPrivileges", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
	jni::ref<java::sql::ResultSet> getColumns(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"getColumns", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
	jni::ref<java::sql::Connection> getConnection() { return call_method<"getConnection", jni::ref<java::sql::Connection>>(); }
	jni::ref<java::sql::ResultSet> getCrossReference(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::String> p6) { return call_method<"getCrossReference", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4, p5, p6); }
	jint getDatabaseMajorVersion() { return call_method<"getDatabaseMajorVersion", jint>(); }
	jint getDatabaseMinorVersion() { return call_method<"getDatabaseMinorVersion", jint>(); }
	jni::ref<java::lang::String> getDatabaseProductName() { return call_method<"getDatabaseProductName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDatabaseProductVersion() { return call_method<"getDatabaseProductVersion", jni::ref<java::lang::String>>(); }
	jint getDefaultTransactionIsolation() { return call_method<"getDefaultTransactionIsolation", jint>(); }
	jint getDriverMajorVersion() { return call_method<"getDriverMajorVersion", jint>(); }
	jint getDriverMinorVersion() { return call_method<"getDriverMinorVersion", jint>(); }
	jni::ref<java::lang::String> getDriverName() { return call_method<"getDriverName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDriverVersion() { return call_method<"getDriverVersion", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSet> getExportedKeys(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getExportedKeys", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jni::ref<java::lang::String> getExtraNameCharacters() { return call_method<"getExtraNameCharacters", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getIdentifierQuoteString() { return call_method<"getIdentifierQuoteString", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSet> getImportedKeys(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getImportedKeys", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jni::ref<java::sql::ResultSet> getIndexInfo(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jboolean p4, jboolean p5) { return call_method<"getIndexInfo", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4, p5); }
	jint getJDBCMajorVersion() { return call_method<"getJDBCMajorVersion", jint>(); }
	jint getJDBCMinorVersion() { return call_method<"getJDBCMinorVersion", jint>(); }
	jint getMaxBinaryLiteralLength() { return call_method<"getMaxBinaryLiteralLength", jint>(); }
	jint getMaxCatalogNameLength() { return call_method<"getMaxCatalogNameLength", jint>(); }
	jint getMaxCharLiteralLength() { return call_method<"getMaxCharLiteralLength", jint>(); }
	jint getMaxColumnNameLength() { return call_method<"getMaxColumnNameLength", jint>(); }
	jint getMaxColumnsInGroupBy() { return call_method<"getMaxColumnsInGroupBy", jint>(); }
	jint getMaxColumnsInIndex() { return call_method<"getMaxColumnsInIndex", jint>(); }
	jint getMaxColumnsInOrderBy() { return call_method<"getMaxColumnsInOrderBy", jint>(); }
	jint getMaxColumnsInSelect() { return call_method<"getMaxColumnsInSelect", jint>(); }
	jint getMaxColumnsInTable() { return call_method<"getMaxColumnsInTable", jint>(); }
	jint getMaxConnections() { return call_method<"getMaxConnections", jint>(); }
	jint getMaxCursorNameLength() { return call_method<"getMaxCursorNameLength", jint>(); }
	jint getMaxIndexLength() { return call_method<"getMaxIndexLength", jint>(); }
	jint getMaxProcedureNameLength() { return call_method<"getMaxProcedureNameLength", jint>(); }
	jint getMaxRowSize() { return call_method<"getMaxRowSize", jint>(); }
	jint getMaxSchemaNameLength() { return call_method<"getMaxSchemaNameLength", jint>(); }
	jint getMaxStatementLength() { return call_method<"getMaxStatementLength", jint>(); }
	jint getMaxStatements() { return call_method<"getMaxStatements", jint>(); }
	jint getMaxTableNameLength() { return call_method<"getMaxTableNameLength", jint>(); }
	jint getMaxTablesInSelect() { return call_method<"getMaxTablesInSelect", jint>(); }
	jint getMaxUserNameLength() { return call_method<"getMaxUserNameLength", jint>(); }
	jni::ref<java::lang::String> getNumericFunctions() { return call_method<"getNumericFunctions", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSet> getPrimaryKeys(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getPrimaryKeys", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jni::ref<java::sql::ResultSet> getProcedureColumns(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"getProcedureColumns", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
	jni::ref<java::sql::ResultSet> getProcedures(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getProcedures", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jni::ref<java::lang::String> getProcedureTerm() { return call_method<"getProcedureTerm", jni::ref<java::lang::String>>(); }
	jint getResultSetHoldability() { return call_method<"getResultSetHoldability", jint>(); }
	jni::ref<java::sql::ResultSet> getSchemas() { return call_method<"getSchemas", jni::ref<java::sql::ResultSet>>(); }
	jni::ref<java::lang::String> getSchemaTerm() { return call_method<"getSchemaTerm", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSearchStringEscape() { return call_method<"getSearchStringEscape", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSQLKeywords() { return call_method<"getSQLKeywords", jni::ref<java::lang::String>>(); }
	jint getSQLStateType() { return call_method<"getSQLStateType", jint>(); }
	jni::ref<java::lang::String> getStringFunctions() { return call_method<"getStringFunctions", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSet> getSuperTables(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getSuperTables", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jni::ref<java::sql::ResultSet> getSuperTypes(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getSuperTypes", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jni::ref<java::lang::String> getSystemFunctions() { return call_method<"getSystemFunctions", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSet> getTablePrivileges(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getTablePrivileges", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jni::ref<java::sql::ResultSet> getTables(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<java::lang::String>> p4) { return call_method<"getTables", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
	jni::ref<java::sql::ResultSet> getTableTypes() { return call_method<"getTableTypes", jni::ref<java::sql::ResultSet>>(); }
	jni::ref<java::lang::String> getTimeDateFunctions() { return call_method<"getTimeDateFunctions", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSet> getTypeInfo() { return call_method<"getTypeInfo", jni::ref<java::sql::ResultSet>>(); }
	jni::ref<java::sql::ResultSet> getUDTs(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<jint>> p4) { return call_method<"getUDTs", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
	jni::ref<java::lang::String> getURL() { return call_method<"getURL", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getUserName() { return call_method<"getUserName", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSet> getVersionColumns(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getVersionColumns", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jboolean insertsAreDetected(jint p1) { return call_method<"insertsAreDetected", jboolean>(p1); }
	jboolean isCatalogAtStart() { return call_method<"isCatalogAtStart", jboolean>(); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	jboolean locatorsUpdateCopy() { return call_method<"locatorsUpdateCopy", jboolean>(); }
	jboolean nullPlusNonNullIsNull() { return call_method<"nullPlusNonNullIsNull", jboolean>(); }
	jboolean nullsAreSortedAtEnd() { return call_method<"nullsAreSortedAtEnd", jboolean>(); }
	jboolean nullsAreSortedAtStart() { return call_method<"nullsAreSortedAtStart", jboolean>(); }
	jboolean nullsAreSortedHigh() { return call_method<"nullsAreSortedHigh", jboolean>(); }
	jboolean nullsAreSortedLow() { return call_method<"nullsAreSortedLow", jboolean>(); }
	jboolean othersDeletesAreVisible(jint p1) { return call_method<"othersDeletesAreVisible", jboolean>(p1); }
	jboolean othersInsertsAreVisible(jint p1) { return call_method<"othersInsertsAreVisible", jboolean>(p1); }
	jboolean othersUpdatesAreVisible(jint p1) { return call_method<"othersUpdatesAreVisible", jboolean>(p1); }
	jboolean ownDeletesAreVisible(jint p1) { return call_method<"ownDeletesAreVisible", jboolean>(p1); }
	jboolean ownInsertsAreVisible(jint p1) { return call_method<"ownInsertsAreVisible", jboolean>(p1); }
	jboolean ownUpdatesAreVisible(jint p1) { return call_method<"ownUpdatesAreVisible", jboolean>(p1); }
	jboolean storesLowerCaseIdentifiers() { return call_method<"storesLowerCaseIdentifiers", jboolean>(); }
	jboolean storesLowerCaseQuotedIdentifiers() { return call_method<"storesLowerCaseQuotedIdentifiers", jboolean>(); }
	jboolean storesMixedCaseIdentifiers() { return call_method<"storesMixedCaseIdentifiers", jboolean>(); }
	jboolean storesMixedCaseQuotedIdentifiers() { return call_method<"storesMixedCaseQuotedIdentifiers", jboolean>(); }
	jboolean storesUpperCaseIdentifiers() { return call_method<"storesUpperCaseIdentifiers", jboolean>(); }
	jboolean storesUpperCaseQuotedIdentifiers() { return call_method<"storesUpperCaseQuotedIdentifiers", jboolean>(); }
	jboolean supportsAlterTableWithAddColumn() { return call_method<"supportsAlterTableWithAddColumn", jboolean>(); }
	jboolean supportsAlterTableWithDropColumn() { return call_method<"supportsAlterTableWithDropColumn", jboolean>(); }
	jboolean supportsANSI92EntryLevelSQL() { return call_method<"supportsANSI92EntryLevelSQL", jboolean>(); }
	jboolean supportsANSI92FullSQL() { return call_method<"supportsANSI92FullSQL", jboolean>(); }
	jboolean supportsANSI92IntermediateSQL() { return call_method<"supportsANSI92IntermediateSQL", jboolean>(); }
	jboolean supportsBatchUpdates() { return call_method<"supportsBatchUpdates", jboolean>(); }
	jboolean supportsCatalogsInDataManipulation() { return call_method<"supportsCatalogsInDataManipulation", jboolean>(); }
	jboolean supportsCatalogsInIndexDefinitions() { return call_method<"supportsCatalogsInIndexDefinitions", jboolean>(); }
	jboolean supportsCatalogsInPrivilegeDefinitions() { return call_method<"supportsCatalogsInPrivilegeDefinitions", jboolean>(); }
	jboolean supportsCatalogsInProcedureCalls() { return call_method<"supportsCatalogsInProcedureCalls", jboolean>(); }
	jboolean supportsCatalogsInTableDefinitions() { return call_method<"supportsCatalogsInTableDefinitions", jboolean>(); }
	jboolean supportsColumnAliasing() { return call_method<"supportsColumnAliasing", jboolean>(); }
	jboolean supportsConvert() { return call_method<"supportsConvert", jboolean>(); }
	jboolean supportsConvert(jint p1, jint p2) { return call_method<"supportsConvert", jboolean>(p1, p2); }
	jboolean supportsCoreSQLGrammar() { return call_method<"supportsCoreSQLGrammar", jboolean>(); }
	jboolean supportsCorrelatedSubqueries() { return call_method<"supportsCorrelatedSubqueries", jboolean>(); }
	jboolean supportsDataDefinitionAndDataManipulationTransactions() { return call_method<"supportsDataDefinitionAndDataManipulationTransactions", jboolean>(); }
	jboolean supportsDataManipulationTransactionsOnly() { return call_method<"supportsDataManipulationTransactionsOnly", jboolean>(); }
	jboolean supportsDifferentTableCorrelationNames() { return call_method<"supportsDifferentTableCorrelationNames", jboolean>(); }
	jboolean supportsExpressionsInOrderBy() { return call_method<"supportsExpressionsInOrderBy", jboolean>(); }
	jboolean supportsExtendedSQLGrammar() { return call_method<"supportsExtendedSQLGrammar", jboolean>(); }
	jboolean supportsFullOuterJoins() { return call_method<"supportsFullOuterJoins", jboolean>(); }
	jboolean supportsGetGeneratedKeys() { return call_method<"supportsGetGeneratedKeys", jboolean>(); }
	jboolean supportsGroupBy() { return call_method<"supportsGroupBy", jboolean>(); }
	jboolean supportsGroupByBeyondSelect() { return call_method<"supportsGroupByBeyondSelect", jboolean>(); }
	jboolean supportsGroupByUnrelated() { return call_method<"supportsGroupByUnrelated", jboolean>(); }
	jboolean supportsIntegrityEnhancementFacility() { return call_method<"supportsIntegrityEnhancementFacility", jboolean>(); }
	jboolean supportsLikeEscapeClause() { return call_method<"supportsLikeEscapeClause", jboolean>(); }
	jboolean supportsLimitedOuterJoins() { return call_method<"supportsLimitedOuterJoins", jboolean>(); }
	jboolean supportsMinimumSQLGrammar() { return call_method<"supportsMinimumSQLGrammar", jboolean>(); }
	jboolean supportsMixedCaseIdentifiers() { return call_method<"supportsMixedCaseIdentifiers", jboolean>(); }
	jboolean supportsMixedCaseQuotedIdentifiers() { return call_method<"supportsMixedCaseQuotedIdentifiers", jboolean>(); }
	jboolean supportsMultipleOpenResults() { return call_method<"supportsMultipleOpenResults", jboolean>(); }
	jboolean supportsMultipleResultSets() { return call_method<"supportsMultipleResultSets", jboolean>(); }
	jboolean supportsMultipleTransactions() { return call_method<"supportsMultipleTransactions", jboolean>(); }
	jboolean supportsNamedParameters() { return call_method<"supportsNamedParameters", jboolean>(); }
	jboolean supportsNonNullableColumns() { return call_method<"supportsNonNullableColumns", jboolean>(); }
	jboolean supportsOpenCursorsAcrossCommit() { return call_method<"supportsOpenCursorsAcrossCommit", jboolean>(); }
	jboolean supportsOpenCursorsAcrossRollback() { return call_method<"supportsOpenCursorsAcrossRollback", jboolean>(); }
	jboolean supportsOpenStatementsAcrossCommit() { return call_method<"supportsOpenStatementsAcrossCommit", jboolean>(); }
	jboolean supportsOpenStatementsAcrossRollback() { return call_method<"supportsOpenStatementsAcrossRollback", jboolean>(); }
	jboolean supportsOrderByUnrelated() { return call_method<"supportsOrderByUnrelated", jboolean>(); }
	jboolean supportsOuterJoins() { return call_method<"supportsOuterJoins", jboolean>(); }
	jboolean supportsPositionedDelete() { return call_method<"supportsPositionedDelete", jboolean>(); }
	jboolean supportsPositionedUpdate() { return call_method<"supportsPositionedUpdate", jboolean>(); }
	jboolean supportsResultSetConcurrency(jint p1, jint p2) { return call_method<"supportsResultSetConcurrency", jboolean>(p1, p2); }
	jboolean supportsResultSetHoldability(jint p1) { return call_method<"supportsResultSetHoldability", jboolean>(p1); }
	jboolean supportsResultSetType(jint p1) { return call_method<"supportsResultSetType", jboolean>(p1); }
	jboolean supportsSavepoints() { return call_method<"supportsSavepoints", jboolean>(); }
	jboolean supportsSchemasInDataManipulation() { return call_method<"supportsSchemasInDataManipulation", jboolean>(); }
	jboolean supportsSchemasInIndexDefinitions() { return call_method<"supportsSchemasInIndexDefinitions", jboolean>(); }
	jboolean supportsSchemasInPrivilegeDefinitions() { return call_method<"supportsSchemasInPrivilegeDefinitions", jboolean>(); }
	jboolean supportsSchemasInProcedureCalls() { return call_method<"supportsSchemasInProcedureCalls", jboolean>(); }
	jboolean supportsSchemasInTableDefinitions() { return call_method<"supportsSchemasInTableDefinitions", jboolean>(); }
	jboolean supportsSelectForUpdate() { return call_method<"supportsSelectForUpdate", jboolean>(); }
	jboolean supportsStatementPooling() { return call_method<"supportsStatementPooling", jboolean>(); }
	jboolean supportsStoredProcedures() { return call_method<"supportsStoredProcedures", jboolean>(); }
	jboolean supportsSubqueriesInComparisons() { return call_method<"supportsSubqueriesInComparisons", jboolean>(); }
	jboolean supportsSubqueriesInExists() { return call_method<"supportsSubqueriesInExists", jboolean>(); }
	jboolean supportsSubqueriesInIns() { return call_method<"supportsSubqueriesInIns", jboolean>(); }
	jboolean supportsSubqueriesInQuantifieds() { return call_method<"supportsSubqueriesInQuantifieds", jboolean>(); }
	jboolean supportsTableCorrelationNames() { return call_method<"supportsTableCorrelationNames", jboolean>(); }
	jboolean supportsTransactionIsolationLevel(jint p1) { return call_method<"supportsTransactionIsolationLevel", jboolean>(p1); }
	jboolean supportsTransactions() { return call_method<"supportsTransactions", jboolean>(); }
	jboolean supportsUnion() { return call_method<"supportsUnion", jboolean>(); }
	jboolean supportsUnionAll() { return call_method<"supportsUnionAll", jboolean>(); }
	jboolean updatesAreDetected(jint p1) { return call_method<"updatesAreDetected", jboolean>(p1); }
	jboolean usesLocalFilePerTable() { return call_method<"usesLocalFilePerTable", jboolean>(); }
	jboolean usesLocalFiles() { return call_method<"usesLocalFiles", jboolean>(); }
	jboolean autoCommitFailureClosesAllResultSets() { return call_method<"autoCommitFailureClosesAllResultSets", jboolean>(); }
	jni::ref<java::sql::ResultSet> getClientInfoProperties() { return call_method<"getClientInfoProperties", jni::ref<java::sql::ResultSet>>(); }
	jni::ref<java::sql::ResultSet> getFunctionColumns(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"getFunctionColumns", jni::ref<java::sql::ResultSet>>(p1, p2, p3, p4); }
	jni::ref<java::sql::ResultSet> getFunctions(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getFunctions", jni::ref<java::sql::ResultSet>>(p1, p2, p3); }
	jni::ref<java::sql::RowIdLifetime> getRowIdLifetime() { return call_method<"getRowIdLifetime", jni::ref<java::sql::RowIdLifetime>>(); }
	jni::ref<java::sql::ResultSet> getSchemas(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getSchemas", jni::ref<java::sql::ResultSet>>(p1, p2); }
	jboolean supportsStoredFunctionsUsingCallSyntax() { return call_method<"supportsStoredFunctionsUsingCallSyntax", jboolean>(); }

protected:

	DatabaseMetaData(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_DATABASEMETADATA
