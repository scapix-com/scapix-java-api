// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_SECURITY_ALGORITHMPARAMETERS_FWD
#define SCAPIX_JAVA_API_JAVA_SECURITY_ALGORITHMPARAMETERS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::security { class AlgorithmParameters; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::security::AlgorithmParameters>
{
	static constexpr fixed_string class_name = "java/security/AlgorithmParameters";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_ALGORITHMPARAMETERS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SECURITY_ALGORITHMPARAMETERS)
#define SCAPIX_JAVA_API_JAVA_SECURITY_ALGORITHMPARAMETERS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::security::AlgorithmParameters : public jni::object_base<"java/security/AlgorithmParameters",
	java::lang::Object>
{
public:

	static jni::ref<java::security::AlgorithmParameters> getInstance(jni::ref<java::lang::String> algorithm) { return call_static_method<"getInstance", jni::ref<java::security::AlgorithmParameters>>(algorithm); }
	static jni::ref<java::security::AlgorithmParameters> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::lang::String> provider) { return call_static_method<"getInstance", jni::ref<java::security::AlgorithmParameters>>(algorithm, provider); }
	static jni::ref<java::security::AlgorithmParameters> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::security::Provider> provider) { return call_static_method<"getInstance", jni::ref<java::security::AlgorithmParameters>>(algorithm, provider); }
	jni::ref<java::security::Provider> getProvider() { return call_method<"getProvider", jni::ref<java::security::Provider>>(); }
	jni::ref<java::lang::String> getAlgorithm() { return call_method<"getAlgorithm", jni::ref<java::lang::String>>(); }
	void init(jni::ref<java::security::spec::AlgorithmParameterSpec> paramSpec) { return call_method<"init", void>(paramSpec); }
	void init(jni::ref<jni::array<jbyte>> params) { return call_method<"init", void>(params); }
	void init(jni::ref<jni::array<jbyte>> params, jni::ref<java::lang::String> format) { return call_method<"init", void>(params, format); }
	jni::ref<java::security::spec::AlgorithmParameterSpec> getParameterSpec(jni::ref<java::lang::Class> paramSpec) { return call_method<"getParameterSpec", jni::ref<java::security::spec::AlgorithmParameterSpec>>(paramSpec); }
	jni::ref<jni::array<jbyte>> getEncoded() { return call_method<"getEncoded", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> getEncoded(jni::ref<java::lang::String> format) { return call_method<"getEncoded", jni::ref<jni::array<jbyte>>>(format); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AlgorithmParameters(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_ALGORITHMPARAMETERS
