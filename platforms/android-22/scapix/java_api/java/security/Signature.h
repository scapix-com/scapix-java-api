// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/security/SignatureSpi.h>

#ifndef SCAPIX_JAVA_API_JAVA_SECURITY_SIGNATURE_FWD
#define SCAPIX_JAVA_API_JAVA_SECURITY_SIGNATURE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::security { class Signature; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::security::Signature>
{
	static constexpr fixed_string class_name = "java/security/Signature";
	using base_classes = std::tuple<scapix::java_api::java::security::SignatureSpi>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_SIGNATURE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SECURITY_SIGNATURE)
#define SCAPIX_JAVA_API_JAVA_SECURITY_SIGNATURE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/security/AlgorithmParameters.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::security::Signature : public jni::object_base<"java/security/Signature",
	java::security::SignatureSpi>
{
public:

	static jni::ref<java::security::Signature> getInstance(jni::ref<java::lang::String> algorithm) { return call_static_method<"getInstance", jni::ref<java::security::Signature>>(algorithm); }
	static jni::ref<java::security::Signature> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::lang::String> provider) { return call_static_method<"getInstance", jni::ref<java::security::Signature>>(algorithm, provider); }
	static jni::ref<java::security::Signature> getInstance(jni::ref<java::lang::String> algorithm, jni::ref<java::security::Provider> provider) { return call_static_method<"getInstance", jni::ref<java::security::Signature>>(algorithm, provider); }
	jni::ref<java::security::Provider> getProvider() { return call_method<"getProvider", jni::ref<java::security::Provider>>(); }
	jni::ref<java::lang::String> getAlgorithm() { return call_method<"getAlgorithm", jni::ref<java::lang::String>>(); }
	void initVerify(jni::ref<java::security::PublicKey> publicKey) { return call_method<"initVerify", void>(publicKey); }
	void initVerify(jni::ref<java::security::cert::Certificate> certificate) { return call_method<"initVerify", void>(certificate); }
	void initSign(jni::ref<java::security::PrivateKey> privateKey) { return call_method<"initSign", void>(privateKey); }
	void initSign(jni::ref<java::security::PrivateKey> privateKey, jni::ref<java::security::SecureRandom> random) { return call_method<"initSign", void>(privateKey, random); }
	jni::ref<jni::array<jbyte>> sign() { return call_method<"sign", jni::ref<jni::array<jbyte>>>(); }
	jint sign(jni::ref<jni::array<jbyte>> outbuf, jint offset, jint len) { return call_method<"sign", jint>(outbuf, offset, len); }
	jboolean verify(jni::ref<jni::array<jbyte>> signature) { return call_method<"verify", jboolean>(signature); }
	jboolean verify(jni::ref<jni::array<jbyte>> signature, jint offset, jint length) { return call_method<"verify", jboolean>(signature, offset, length); }
	void update(jbyte b) { return call_method<"update", void>(b); }
	void update(jni::ref<jni::array<jbyte>> data) { return call_method<"update", void>(data); }
	void update(jni::ref<jni::array<jbyte>> data, jint off, jint len) { return call_method<"update", void>(data, off, len); }
	void update(jni::ref<java::nio::ByteBuffer> data) { return call_method<"update", void>(data); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void setParameter(jni::ref<java::lang::String> param, jni::ref<java::lang::Object> value) { return call_method<"setParameter", void>(param, value); }
	void setParameter(jni::ref<java::security::spec::AlgorithmParameterSpec> params) { return call_method<"setParameter", void>(params); }
	jni::ref<java::security::AlgorithmParameters> getParameters() { return call_method<"getParameters", jni::ref<java::security::AlgorithmParameters>>(); }
	jni::ref<java::lang::Object> getParameter(jni::ref<java::lang::String> param) { return call_method<"getParameter", jni::ref<java::lang::Object>>(param); }

protected:

	Signature(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_SIGNATURE
