// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Arrays; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Arrays>
{
	static constexpr fixed_string class_name = "java/util/Arrays";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS)
#define SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Arrays : public jni::object_base<"java/util/Arrays",
	java::lang::Object>
{
public:

	static jni::ref<java::util::List> asList(jni::ref<jni::array<java::lang::Object>> array) { return call_static_method<"asList", jni::ref<java::util::List>>(array); }
	static jint binarySearch(jni::ref<jni::array<jbyte>> array, jbyte value) { return call_static_method<"binarySearch", jint>(array, value); }
	static jint binarySearch(jni::ref<jni::array<jbyte>> array, jint startIndex, jint endIndex, jbyte value) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value); }
	static jint binarySearch(jni::ref<jni::array<jchar>> array, jchar value) { return call_static_method<"binarySearch", jint>(array, value); }
	static jint binarySearch(jni::ref<jni::array<jchar>> array, jint startIndex, jint endIndex, jchar value) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value); }
	static jint binarySearch(jni::ref<jni::array<jdouble>> array, jdouble value) { return call_static_method<"binarySearch", jint>(array, value); }
	static jint binarySearch(jni::ref<jni::array<jdouble>> array, jint startIndex, jint endIndex, jdouble value) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value); }
	static jint binarySearch(jni::ref<jni::array<jfloat>> array, jfloat value) { return call_static_method<"binarySearch", jint>(array, value); }
	static jint binarySearch(jni::ref<jni::array<jfloat>> array, jint startIndex, jint endIndex, jfloat value) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value); }
	static jint binarySearch(jni::ref<jni::array<jint>> array, jint value) { return call_static_method<"binarySearch", jint>(array, value); }
	static jint binarySearch(jni::ref<jni::array<jint>> array, jint startIndex, jint endIndex, jint value) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value); }
	static jint binarySearch(jni::ref<jni::array<jlong>> array, jlong value) { return call_static_method<"binarySearch", jint>(array, value); }
	static jint binarySearch(jni::ref<jni::array<jlong>> array, jint startIndex, jint endIndex, jlong value) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> array, jni::ref<java::lang::Object> value) { return call_static_method<"binarySearch", jint>(array, value); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> array, jint startIndex, jint endIndex, jni::ref<java::lang::Object> value) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> array, jni::ref<java::lang::Object> value, jni::ref<java::util::Comparator> comparator) { return call_static_method<"binarySearch", jint>(array, value, comparator); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> array, jint startIndex, jint endIndex, jni::ref<java::lang::Object> value, jni::ref<java::util::Comparator> comparator) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value, comparator); }
	static jint binarySearch(jni::ref<jni::array<jshort>> array, jshort value) { return call_static_method<"binarySearch", jint>(array, value); }
	static jint binarySearch(jni::ref<jni::array<jshort>> array, jint startIndex, jint endIndex, jshort value) { return call_static_method<"binarySearch", jint>(array, startIndex, endIndex, value); }
	static void fill(jni::ref<jni::array<jbyte>> array, jbyte value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<jbyte>> array, jint start, jint end, jbyte value) { return call_static_method<"fill", void>(array, start, end, value); }
	static void fill(jni::ref<jni::array<jshort>> array, jshort value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<jshort>> array, jint start, jint end, jshort value) { return call_static_method<"fill", void>(array, start, end, value); }
	static void fill(jni::ref<jni::array<jchar>> array, jchar value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<jchar>> array, jint start, jint end, jchar value) { return call_static_method<"fill", void>(array, start, end, value); }
	static void fill(jni::ref<jni::array<jint>> array, jint value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<jint>> array, jint start, jint end, jint value) { return call_static_method<"fill", void>(array, start, end, value); }
	static void fill(jni::ref<jni::array<jlong>> array, jlong value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<jlong>> array, jint start, jint end, jlong value) { return call_static_method<"fill", void>(array, start, end, value); }
	static void fill(jni::ref<jni::array<jfloat>> array, jfloat value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<jfloat>> array, jint start, jint end, jfloat value) { return call_static_method<"fill", void>(array, start, end, value); }
	static void fill(jni::ref<jni::array<jdouble>> array, jdouble value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<jdouble>> array, jint start, jint end, jdouble value) { return call_static_method<"fill", void>(array, start, end, value); }
	static void fill(jni::ref<jni::array<jboolean>> array, jboolean value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<jboolean>> array, jint start, jint end, jboolean value) { return call_static_method<"fill", void>(array, start, end, value); }
	static void fill(jni::ref<jni::array<java::lang::Object>> array, jni::ref<java::lang::Object> value) { return call_static_method<"fill", void>(array, value); }
	static void fill(jni::ref<jni::array<java::lang::Object>> array, jint start, jint end, jni::ref<java::lang::Object> value) { return call_static_method<"fill", void>(array, start, end, value); }
	static jint hashCode(jni::ref<jni::array<jboolean>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint hashCode(jni::ref<jni::array<jint>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint hashCode(jni::ref<jni::array<jshort>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint hashCode(jni::ref<jni::array<jchar>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint hashCode(jni::ref<jni::array<jbyte>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint hashCode(jni::ref<jni::array<jlong>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint hashCode(jni::ref<jni::array<jfloat>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint hashCode(jni::ref<jni::array<jdouble>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint hashCode(jni::ref<jni::array<java::lang::Object>> array) { return call_static_method<"hashCode", jint>(array); }
	static jint deepHashCode(jni::ref<jni::array<java::lang::Object>> array) { return call_static_method<"deepHashCode", jint>(array); }
	static jboolean equals(jni::ref<jni::array<jbyte>> array1, jni::ref<jni::array<jbyte>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean equals(jni::ref<jni::array<jshort>> array1, jni::ref<jni::array<jshort>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean equals(jni::ref<jni::array<jchar>> array1, jni::ref<jni::array<jchar>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean equals(jni::ref<jni::array<jint>> array1, jni::ref<jni::array<jint>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean equals(jni::ref<jni::array<jlong>> array1, jni::ref<jni::array<jlong>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean equals(jni::ref<jni::array<jfloat>> array1, jni::ref<jni::array<jfloat>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean equals(jni::ref<jni::array<jdouble>> array1, jni::ref<jni::array<jdouble>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean equals(jni::ref<jni::array<jboolean>> array1, jni::ref<jni::array<jboolean>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean equals(jni::ref<jni::array<java::lang::Object>> array1, jni::ref<jni::array<java::lang::Object>> array2) { return call_static_method<"equals", jboolean>(array1, array2); }
	static jboolean deepEquals(jni::ref<jni::array<java::lang::Object>> array1, jni::ref<jni::array<java::lang::Object>> array2) { return call_static_method<"deepEquals", jboolean>(array1, array2); }
	static void sort(jni::ref<jni::array<jbyte>> array) { return call_static_method<"sort", void>(array); }
	static void sort(jni::ref<jni::array<jbyte>> array, jint start, jint end) { return call_static_method<"sort", void>(array, start, end); }
	static void sort(jni::ref<jni::array<jchar>> array) { return call_static_method<"sort", void>(array); }
	static void sort(jni::ref<jni::array<jchar>> array, jint start, jint end) { return call_static_method<"sort", void>(array, start, end); }
	static void sort(jni::ref<jni::array<jdouble>> array) { return call_static_method<"sort", void>(array); }
	static void sort(jni::ref<jni::array<jdouble>> array, jint start, jint end) { return call_static_method<"sort", void>(array, start, end); }
	static void sort(jni::ref<jni::array<jfloat>> array) { return call_static_method<"sort", void>(array); }
	static void sort(jni::ref<jni::array<jfloat>> array, jint start, jint end) { return call_static_method<"sort", void>(array, start, end); }
	static void sort(jni::ref<jni::array<jint>> array) { return call_static_method<"sort", void>(array); }
	static void sort(jni::ref<jni::array<jint>> array, jint start, jint end) { return call_static_method<"sort", void>(array, start, end); }
	static void sort(jni::ref<jni::array<jlong>> array) { return call_static_method<"sort", void>(array); }
	static void sort(jni::ref<jni::array<jlong>> array, jint start, jint end) { return call_static_method<"sort", void>(array, start, end); }
	static void sort(jni::ref<jni::array<jshort>> array) { return call_static_method<"sort", void>(array); }
	static void sort(jni::ref<jni::array<jshort>> array, jint start, jint end) { return call_static_method<"sort", void>(array, start, end); }
	static void sort(jni::ref<jni::array<java::lang::Object>> array) { return call_static_method<"sort", void>(array); }
	static void sort(jni::ref<jni::array<java::lang::Object>> array, jint start, jint end) { return call_static_method<"sort", void>(array, start, end); }
	static void sort(jni::ref<jni::array<java::lang::Object>> array, jint start, jint end, jni::ref<java::util::Comparator> comparator) { return call_static_method<"sort", void>(array, start, end, comparator); }
	static void sort(jni::ref<jni::array<java::lang::Object>> array, jni::ref<java::util::Comparator> comparator) { return call_static_method<"sort", void>(array, comparator); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jboolean>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jbyte>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jchar>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jdouble>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jfloat>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jint>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jlong>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jshort>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<java::lang::Object>> array) { return call_static_method<"toString", jni::ref<java::lang::String>>(array); }
	static jni::ref<java::lang::String> deepToString(jni::ref<jni::array<java::lang::Object>> array) { return call_static_method<"deepToString", jni::ref<java::lang::String>>(array); }
	static jni::ref<jni::array<jboolean>> copyOf(jni::ref<jni::array<jboolean>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jboolean>>>(original, newLength); }
	static jni::ref<jni::array<jbyte>> copyOf(jni::ref<jni::array<jbyte>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jbyte>>>(original, newLength); }
	static jni::ref<jni::array<jchar>> copyOf(jni::ref<jni::array<jchar>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jchar>>>(original, newLength); }
	static jni::ref<jni::array<jdouble>> copyOf(jni::ref<jni::array<jdouble>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jdouble>>>(original, newLength); }
	static jni::ref<jni::array<jfloat>> copyOf(jni::ref<jni::array<jfloat>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jfloat>>>(original, newLength); }
	static jni::ref<jni::array<jint>> copyOf(jni::ref<jni::array<jint>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jint>>>(original, newLength); }
	static jni::ref<jni::array<jlong>> copyOf(jni::ref<jni::array<jlong>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jlong>>>(original, newLength); }
	static jni::ref<jni::array<jshort>> copyOf(jni::ref<jni::array<jshort>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jshort>>>(original, newLength); }
	static jni::ref<jni::array<java::lang::Object>> copyOf(jni::ref<jni::array<java::lang::Object>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<java::lang::Object>>>(original, newLength); }
	static jni::ref<jni::array<java::lang::Object>> copyOf(jni::ref<jni::array<java::lang::Object>> original, jint newLength, jni::ref<java::lang::Class> newType) { return call_static_method<"copyOf", jni::ref<jni::array<java::lang::Object>>>(original, newLength, newType); }
	static jni::ref<jni::array<jboolean>> copyOfRange(jni::ref<jni::array<jboolean>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<jboolean>>>(original, start, end); }
	static jni::ref<jni::array<jbyte>> copyOfRange(jni::ref<jni::array<jbyte>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<jbyte>>>(original, start, end); }
	static jni::ref<jni::array<jchar>> copyOfRange(jni::ref<jni::array<jchar>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<jchar>>>(original, start, end); }
	static jni::ref<jni::array<jdouble>> copyOfRange(jni::ref<jni::array<jdouble>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<jdouble>>>(original, start, end); }
	static jni::ref<jni::array<jfloat>> copyOfRange(jni::ref<jni::array<jfloat>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<jfloat>>>(original, start, end); }
	static jni::ref<jni::array<jint>> copyOfRange(jni::ref<jni::array<jint>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<jint>>>(original, start, end); }
	static jni::ref<jni::array<jlong>> copyOfRange(jni::ref<jni::array<jlong>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<jlong>>>(original, start, end); }
	static jni::ref<jni::array<jshort>> copyOfRange(jni::ref<jni::array<jshort>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<jshort>>>(original, start, end); }
	static jni::ref<jni::array<java::lang::Object>> copyOfRange(jni::ref<jni::array<java::lang::Object>> original, jint start, jint end) { return call_static_method<"copyOfRange", jni::ref<jni::array<java::lang::Object>>>(original, start, end); }
	static jni::ref<jni::array<java::lang::Object>> copyOfRange(jni::ref<jni::array<java::lang::Object>> original, jint start, jint end, jni::ref<java::lang::Class> newType) { return call_static_method<"copyOfRange", jni::ref<jni::array<java::lang::Object>>>(original, start, end, newType); }

protected:

	Arrays(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS
