// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractList.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/util/RandomAccess.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ARRAYLIST_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ARRAYLIST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class ArrayList; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::ArrayList>
{
	static constexpr fixed_string class_name = "java/util/ArrayList";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractList, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::io::Serializable, scapix::java_api::java::util::RandomAccess>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ARRAYLIST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ARRAYLIST)
#define SCAPIX_JAVA_API_JAVA_UTIL_ARRAYLIST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::ArrayList : public jni::object_base<"java/util/ArrayList",
	java::util::AbstractList,
	java::lang::Cloneable,
	java::io::Serializable,
	java::util::RandomAccess>
{
public:

	static jni::ref<java::util::ArrayList> new_object(jint capacity) { return base_::new_object(capacity); }
	static jni::ref<java::util::ArrayList> new_object() { return base_::new_object(); }
	static jni::ref<java::util::ArrayList> new_object(jni::ref<java::util::Collection> collection) { return base_::new_object(collection); }
	jboolean add(jni::ref<java::lang::Object> object) { return call_method<"add", jboolean>(object); }
	void add(jint index, jni::ref<java::lang::Object> object) { return call_method<"add", void>(index, object); }
	jboolean addAll(jni::ref<java::util::Collection> collection) { return call_method<"addAll", jboolean>(collection); }
	jboolean addAll(jint index, jni::ref<java::util::Collection> collection) { return call_method<"addAll", jboolean>(index, collection); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	void ensureCapacity(jint minimumCapacity) { return call_method<"ensureCapacity", void>(minimumCapacity); }
	jni::ref<java::lang::Object> get(jint index) { return call_method<"get", jni::ref<java::lang::Object>>(index); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean contains(jni::ref<java::lang::Object> object) { return call_method<"contains", jboolean>(object); }
	jint indexOf(jni::ref<java::lang::Object> object) { return call_method<"indexOf", jint>(object); }
	jint lastIndexOf(jni::ref<java::lang::Object> object) { return call_method<"lastIndexOf", jint>(object); }
	jni::ref<java::lang::Object> remove(jint index) { return call_method<"remove", jni::ref<java::lang::Object>>(index); }
	jboolean remove(jni::ref<java::lang::Object> object) { return call_method<"remove", jboolean>(object); }
	jni::ref<java::lang::Object> set(jint index, jni::ref<java::lang::Object> object) { return call_method<"set", jni::ref<java::lang::Object>>(index, object); }
	jni::ref<jni::array<java::lang::Object>> toArray() { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<jni::array<java::lang::Object>> toArray(jni::ref<jni::array<java::lang::Object>> contents) { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(contents); }
	void trimToSize() { return call_method<"trimToSize", void>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }

protected:

	ArrayList(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ARRAYLIST
