// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/logging/StreamHandler.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_SOCKETHANDLER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_SOCKETHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::logging { class SocketHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::logging::SocketHandler>
{
	static constexpr fixed_string class_name = "java/util/logging/SocketHandler";
	using base_classes = std::tuple<scapix::java_api::java::util::logging::StreamHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_SOCKETHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_SOCKETHANDLER)
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_SOCKETHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/logging/LogRecord.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::logging::SocketHandler : public jni::object_base<"java/util/logging/SocketHandler",
	java::util::logging::StreamHandler>
{
public:

	static jni::ref<java::util::logging::SocketHandler> new_object() { return base_::new_object(); }
	static jni::ref<java::util::logging::SocketHandler> new_object(jni::ref<java::lang::String> host, jint port) { return base_::new_object(host, port); }
	void close() { return call_method<"close", void>(); }
	void publish(jni::ref<java::util::logging::LogRecord> record) { return call_method<"publish", void>(record); }

protected:

	SocketHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_SOCKETHANDLER
