// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::atomic { class AtomicStampedReference; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::atomic::AtomicStampedReference>
{
	static constexpr fixed_string class_name = "java/util/concurrent/atomic/AtomicStampedReference";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::atomic::AtomicStampedReference : public jni::object_base<"java/util/concurrent/atomic/AtomicStampedReference",
	java::lang::Object>
{
public:

	static jni::ref<java::util::concurrent::atomic::AtomicStampedReference> new_object(jni::ref<java::lang::Object> initialRef, jint initialStamp) { return base_::new_object(initialRef, initialStamp); }
	jni::ref<java::lang::Object> getReference() { return call_method<"getReference", jni::ref<java::lang::Object>>(); }
	jint getStamp() { return call_method<"getStamp", jint>(); }
	jni::ref<java::lang::Object> get(jni::ref<jni::array<jint>> stampHolder) { return call_method<"get", jni::ref<java::lang::Object>>(stampHolder); }
	jboolean weakCompareAndSet(jni::ref<java::lang::Object> expectedReference, jni::ref<java::lang::Object> newReference, jint expectedStamp, jint newStamp) { return call_method<"weakCompareAndSet", jboolean>(expectedReference, newReference, expectedStamp, newStamp); }
	jboolean compareAndSet(jni::ref<java::lang::Object> expectedReference, jni::ref<java::lang::Object> newReference, jint expectedStamp, jint newStamp) { return call_method<"compareAndSet", jboolean>(expectedReference, newReference, expectedStamp, newStamp); }
	void set(jni::ref<java::lang::Object> newReference, jint newStamp) { return call_method<"set", void>(newReference, newStamp); }
	jboolean attemptStamp(jni::ref<java::lang::Object> expectedReference, jint newStamp) { return call_method<"attemptStamp", jboolean>(expectedReference, newStamp); }

protected:

	AtomicStampedReference(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICSTAMPEDREFERENCE
