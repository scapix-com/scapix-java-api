// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterOutputStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::zip { class DeflaterOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::zip::DeflaterOutputStream>
{
	static constexpr fixed_string class_name = "java/util/zip/DeflaterOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::FilterOutputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/util/zip/Deflater.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::zip::DeflaterOutputStream : public jni::object_base<"java/util/zip/DeflaterOutputStream",
	java::io::FilterOutputStream>
{
public:

	static jni::ref<java::util::zip::DeflaterOutputStream> new_object(jni::ref<java::io::OutputStream> os) { return base_::new_object(os); }
	static jni::ref<java::util::zip::DeflaterOutputStream> new_object(jni::ref<java::io::OutputStream> os, jni::ref<java::util::zip::Deflater> def) { return base_::new_object(os, def); }
	static jni::ref<java::util::zip::DeflaterOutputStream> new_object(jni::ref<java::io::OutputStream> os, jni::ref<java::util::zip::Deflater> def, jint bufferSize) { return base_::new_object(os, def, bufferSize); }
	static jni::ref<java::util::zip::DeflaterOutputStream> new_object(jni::ref<java::io::OutputStream> os, jboolean syncFlush) { return base_::new_object(os, syncFlush); }
	static jni::ref<java::util::zip::DeflaterOutputStream> new_object(jni::ref<java::io::OutputStream> os, jni::ref<java::util::zip::Deflater> def, jboolean syncFlush) { return base_::new_object(os, def, syncFlush); }
	static jni::ref<java::util::zip::DeflaterOutputStream> new_object(jni::ref<java::io::OutputStream> os, jni::ref<java::util::zip::Deflater> def, jint bufferSize, jboolean syncFlush) { return base_::new_object(os, def, bufferSize, syncFlush); }
	void close() { return call_method<"close", void>(); }
	void finish() { return call_method<"finish", void>(); }
	void write(jint i) { return call_method<"write", void>(i); }
	void write(jni::ref<jni::array<jbyte>> buffer, jint offset, jint byteCount) { return call_method<"write", void>(buffer, offset, byteCount); }
	void flush() { return call_method<"flush", void>(); }

protected:

	DeflaterOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM
