// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractMap.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/util/Map.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ENUMMAP_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ENUMMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class EnumMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::EnumMap>
{
	static constexpr fixed_string class_name = "java/util/EnumMap";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractMap, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::util::Map>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ENUMMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ENUMMAP)
#define SCAPIX_JAVA_API_JAVA_UTIL_ENUMMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::EnumMap : public jni::object_base<"java/util/EnumMap",
	java::util::AbstractMap,
	java::io::Serializable,
	java::lang::Cloneable,
	java::util::Map>
{
public:

	static jni::ref<java::util::EnumMap> new_object(jni::ref<java::lang::Class> keyType) { return base_::new_object(keyType); }
	static jni::ref<java::util::EnumMap> new_object(jni::ref<java::util::EnumMap> map) { return base_::new_object(map); }
	static jni::ref<java::util::EnumMap> new_object(jni::ref<java::util::Map> map) { return base_::new_object(map); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<java::util::EnumMap> clone() { return call_method<"clone", jni::ref<java::util::EnumMap>>(); }
	jboolean containsKey(jni::ref<java::lang::Object> key) { return call_method<"containsKey", jboolean>(key); }
	jboolean containsValue(jni::ref<java::lang::Object> value) { return call_method<"containsValue", jboolean>(value); }
	jni::ref<java::util::Set> entrySet() { return call_method<"entrySet", jni::ref<java::util::Set>>(); }
	jboolean equals(jni::ref<java::lang::Object> object) { return call_method<"equals", jboolean>(object); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> key) { return call_method<"get", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Enum> key, jni::ref<java::lang::Object> value) { return call_method<"put", jni::ref<java::lang::Object>>(key, value); }
	void putAll(jni::ref<java::util::Map> map) { return call_method<"putAll", void>(map); }
	jni::ref<java::lang::Object> remove(jni::ref<java::lang::Object> key) { return call_method<"remove", jni::ref<java::lang::Object>>(key); }
	jint size() { return call_method<"size", jint>(); }
	jni::ref<java::util::Collection> values() { return call_method<"values", jni::ref<java::util::Collection>>(); }

protected:

	EnumMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ENUMMAP
