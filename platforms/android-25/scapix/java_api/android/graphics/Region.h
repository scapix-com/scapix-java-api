// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_REGION_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_REGION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Region; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Region>
{
	static constexpr fixed_string class_name = "android/graphics/Region";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_REGION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_REGION)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_REGION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Path.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/Region_Op.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Region : public jni::object_base<"android/graphics/Region",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Op = Region_Op;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::graphics::Region> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::Region> new_object(jni::ref<android::graphics::Region> region) { return base_::new_object(region); }
	static jni::ref<android::graphics::Region> new_object(jni::ref<android::graphics::Rect> r) { return base_::new_object(r); }
	static jni::ref<android::graphics::Region> new_object(jint left, jint top, jint right, jint bottom) { return base_::new_object(left, top, right, bottom); }
	void setEmpty() { return call_method<"setEmpty", void>(); }
	jboolean set(jni::ref<android::graphics::Region> region) { return call_method<"set", jboolean>(region); }
	jboolean set(jni::ref<android::graphics::Rect> r) { return call_method<"set", jboolean>(r); }
	jboolean set(jint left, jint top, jint right, jint bottom) { return call_method<"set", jboolean>(left, top, right, bottom); }
	jboolean setPath(jni::ref<android::graphics::Path> path, jni::ref<android::graphics::Region> clip) { return call_method<"setPath", jboolean>(path, clip); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean isRect() { return call_method<"isRect", jboolean>(); }
	jboolean isComplex() { return call_method<"isComplex", jboolean>(); }
	jni::ref<android::graphics::Rect> getBounds() { return call_method<"getBounds", jni::ref<android::graphics::Rect>>(); }
	jboolean getBounds(jni::ref<android::graphics::Rect> r) { return call_method<"getBounds", jboolean>(r); }
	jni::ref<android::graphics::Path> getBoundaryPath() { return call_method<"getBoundaryPath", jni::ref<android::graphics::Path>>(); }
	jboolean getBoundaryPath(jni::ref<android::graphics::Path> path) { return call_method<"getBoundaryPath", jboolean>(path); }
	jboolean contains(jint p1, jint p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean quickContains(jni::ref<android::graphics::Rect> r) { return call_method<"quickContains", jboolean>(r); }
	jboolean quickContains(jint p1, jint p2, jint p3, jint p4) { return call_method<"quickContains", jboolean>(p1, p2, p3, p4); }
	jboolean quickReject(jni::ref<android::graphics::Rect> r) { return call_method<"quickReject", jboolean>(r); }
	jboolean quickReject(jint p1, jint p2, jint p3, jint p4) { return call_method<"quickReject", jboolean>(p1, p2, p3, p4); }
	jboolean quickReject(jni::ref<android::graphics::Region> p1) { return call_method<"quickReject", jboolean>(p1); }
	void translate(jint dx, jint dy) { return call_method<"translate", void>(dx, dy); }
	void translate(jint p1, jint p2, jni::ref<android::graphics::Region> p3) { return call_method<"translate", void>(p1, p2, p3); }
	jboolean union_(jni::ref<android::graphics::Rect> r) { return call_method<"union", jboolean>(r); }
	jboolean op(jni::ref<android::graphics::Rect> r, jni::ref<android::graphics::Region_Op> op) { return call_method<"op", jboolean>(r, op); }
	jboolean op(jint left, jint top, jint right, jint bottom, jni::ref<android::graphics::Region_Op> op) { return call_method<"op", jboolean>(left, top, right, bottom, op); }
	jboolean op(jni::ref<android::graphics::Region> region, jni::ref<android::graphics::Region_Op> op) { return call_method<"op", jboolean>(region, op); }
	jboolean op(jni::ref<android::graphics::Rect> rect, jni::ref<android::graphics::Region> region, jni::ref<android::graphics::Region_Op> op) { return call_method<"op", jboolean>(rect, region, op); }
	jboolean op(jni::ref<android::graphics::Region> region1, jni::ref<android::graphics::Region> region2, jni::ref<android::graphics::Region_Op> op) { return call_method<"op", jboolean>(region1, region2, op); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> p, jint flags) { return call_method<"writeToParcel", void>(p, flags); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }

protected:

	Region(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_REGION
