// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_PAIR_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_PAIR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class Pair; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::Pair>
{
	static constexpr fixed_string class_name = "android/util/Pair";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_PAIR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_PAIR)
#define SCAPIX_JAVA_API_ANDROID_UTIL_PAIR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::Pair : public jni::object_base<"android/util/Pair",
	java::lang::Object>
{
public:

	jni::ref<java::lang::Object> first() { return get_field<"first", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> second() { return get_field<"second", jni::ref<java::lang::Object>>(); }

	static jni::ref<android::util::Pair> new_object(jni::ref<java::lang::Object> first, jni::ref<java::lang::Object> second) { return base_::new_object(first, second); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<android::util::Pair> create(jni::ref<java::lang::Object> a, jni::ref<java::lang::Object> b) { return call_static_method<"create", jni::ref<android::util::Pair>>(a, b); }

protected:

	Pair(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_PAIR
