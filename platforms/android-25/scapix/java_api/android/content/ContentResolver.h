// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTRESOLVER_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTRESOLVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class ContentResolver; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::ContentResolver>
{
	static constexpr fixed_string class_name = "android/content/ContentResolver";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTRESOLVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTRESOLVER)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTRESOLVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/accounts/Account.h>
#include <scapix/java_api/android/content/ContentProviderClient.h>
#include <scapix/java_api/android/content/ContentProviderResult.h>
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/SyncAdapterType.h>
#include <scapix/java_api/android/content/SyncInfo.h>
#include <scapix/java_api/android/content/SyncRequest.h>
#include <scapix/java_api/android/content/SyncStatusObserver.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/database/ContentObserver.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::ContentResolver : public jni::object_base<"android/content/ContentResolver",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> ANY_CURSOR_ITEM_TYPE() { return get_static_field<"ANY_CURSOR_ITEM_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CURSOR_DIR_BASE_TYPE() { return get_static_field<"CURSOR_DIR_BASE_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CURSOR_ITEM_BASE_TYPE() { return get_static_field<"CURSOR_ITEM_BASE_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SIZE() { return get_static_field<"EXTRA_SIZE", jni::ref<java::lang::String>>(); }
	static jint NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS() { return get_static_field<"NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS", jint>(); }
	static jint NOTIFY_SYNC_TO_NETWORK() { return get_static_field<"NOTIFY_SYNC_TO_NETWORK", jint>(); }
	static jni::ref<java::lang::String> SCHEME_ANDROID_RESOURCE() { return get_static_field<"SCHEME_ANDROID_RESOURCE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SCHEME_CONTENT() { return get_static_field<"SCHEME_CONTENT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SCHEME_FILE() { return get_static_field<"SCHEME_FILE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_ACCOUNT() { return get_static_field<"SYNC_EXTRAS_ACCOUNT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS() { return get_static_field<"SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_DO_NOT_RETRY() { return get_static_field<"SYNC_EXTRAS_DO_NOT_RETRY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_EXPEDITED() { return get_static_field<"SYNC_EXTRAS_EXPEDITED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_FORCE() { return get_static_field<"SYNC_EXTRAS_FORCE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_IGNORE_BACKOFF() { return get_static_field<"SYNC_EXTRAS_IGNORE_BACKOFF", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_IGNORE_SETTINGS() { return get_static_field<"SYNC_EXTRAS_IGNORE_SETTINGS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_INITIALIZE() { return get_static_field<"SYNC_EXTRAS_INITIALIZE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_MANUAL() { return get_static_field<"SYNC_EXTRAS_MANUAL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS() { return get_static_field<"SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_REQUIRE_CHARGING() { return get_static_field<"SYNC_EXTRAS_REQUIRE_CHARGING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SYNC_EXTRAS_UPLOAD() { return get_static_field<"SYNC_EXTRAS_UPLOAD", jni::ref<java::lang::String>>(); }
	static jint SYNC_OBSERVER_TYPE_ACTIVE() { return get_static_field<"SYNC_OBSERVER_TYPE_ACTIVE", jint>(); }
	static jint SYNC_OBSERVER_TYPE_PENDING() { return get_static_field<"SYNC_OBSERVER_TYPE_PENDING", jint>(); }
	static jint SYNC_OBSERVER_TYPE_SETTINGS() { return get_static_field<"SYNC_OBSERVER_TYPE_SETTINGS", jint>(); }

	static jni::ref<android::content::ContentResolver> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	jni::ref<java::lang::String> getType(jni::ref<android::net::Uri> url) { return call_method<"getType", jni::ref<java::lang::String>>(url); }
	jni::ref<jni::array<java::lang::String>> getStreamTypes(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> mimeTypeFilter) { return call_method<"getStreamTypes", jni::ref<jni::array<java::lang::String>>>(url, mimeTypeFilter); }
	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> uri, jni::ref<jni::array<java::lang::String>> projection, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> sortOrder) { return call_method<"query", jni::ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder); }
	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> uri, jni::ref<jni::array<java::lang::String>> projection, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> sortOrder, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"query", jni::ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder, cancellationSignal); }
	jni::ref<android::net::Uri> canonicalize(jni::ref<android::net::Uri> url) { return call_method<"canonicalize", jni::ref<android::net::Uri>>(url); }
	jni::ref<android::net::Uri> uncanonicalize(jni::ref<android::net::Uri> url) { return call_method<"uncanonicalize", jni::ref<android::net::Uri>>(url); }
	jni::ref<java::io::InputStream> openInputStream(jni::ref<android::net::Uri> uri) { return call_method<"openInputStream", jni::ref<java::io::InputStream>>(uri); }
	jni::ref<java::io::OutputStream> openOutputStream(jni::ref<android::net::Uri> uri) { return call_method<"openOutputStream", jni::ref<java::io::OutputStream>>(uri); }
	jni::ref<java::io::OutputStream> openOutputStream(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mode) { return call_method<"openOutputStream", jni::ref<java::io::OutputStream>>(uri, mode); }
	jni::ref<android::os::ParcelFileDescriptor> openFileDescriptor(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mode) { return call_method<"openFileDescriptor", jni::ref<android::os::ParcelFileDescriptor>>(uri, mode); }
	jni::ref<android::os::ParcelFileDescriptor> openFileDescriptor(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mode, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"openFileDescriptor", jni::ref<android::os::ParcelFileDescriptor>>(uri, mode, cancellationSignal); }
	jni::ref<android::content::res::AssetFileDescriptor> openAssetFileDescriptor(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mode) { return call_method<"openAssetFileDescriptor", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mode); }
	jni::ref<android::content::res::AssetFileDescriptor> openAssetFileDescriptor(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mode, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"openAssetFileDescriptor", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mode, cancellationSignal); }
	jni::ref<android::content::res::AssetFileDescriptor> openTypedAssetFileDescriptor(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeType, jni::ref<android::os::Bundle> opts) { return call_method<"openTypedAssetFileDescriptor", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mimeType, opts); }
	jni::ref<android::content::res::AssetFileDescriptor> openTypedAssetFileDescriptor(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeType, jni::ref<android::os::Bundle> opts, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"openTypedAssetFileDescriptor", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mimeType, opts, cancellationSignal); }
	jni::ref<android::net::Uri> insert(jni::ref<android::net::Uri> url, jni::ref<android::content::ContentValues> values) { return call_method<"insert", jni::ref<android::net::Uri>>(url, values); }
	jni::ref<jni::array<android::content::ContentProviderResult>> applyBatch(jni::ref<java::lang::String> authority, jni::ref<java::util::ArrayList> operations) { return call_method<"applyBatch", jni::ref<jni::array<android::content::ContentProviderResult>>>(authority, operations); }
	jint bulkInsert(jni::ref<android::net::Uri> url, jni::ref<jni::array<android::content::ContentValues>> values) { return call_method<"bulkInsert", jint>(url, values); }
	jint delete_(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> where, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_method<"delete", jint>(url, where, selectionArgs); }
	jint update(jni::ref<android::net::Uri> uri, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> where, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_method<"update", jint>(uri, values, where, selectionArgs); }
	jni::ref<android::os::Bundle> call(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> method, jni::ref<java::lang::String> arg, jni::ref<android::os::Bundle> extras) { return call_method<"call", jni::ref<android::os::Bundle>>(uri, method, arg, extras); }
	jni::ref<android::content::ContentProviderClient> acquireContentProviderClient(jni::ref<android::net::Uri> uri) { return call_method<"acquireContentProviderClient", jni::ref<android::content::ContentProviderClient>>(uri); }
	jni::ref<android::content::ContentProviderClient> acquireContentProviderClient(jni::ref<java::lang::String> name) { return call_method<"acquireContentProviderClient", jni::ref<android::content::ContentProviderClient>>(name); }
	jni::ref<android::content::ContentProviderClient> acquireUnstableContentProviderClient(jni::ref<android::net::Uri> uri) { return call_method<"acquireUnstableContentProviderClient", jni::ref<android::content::ContentProviderClient>>(uri); }
	jni::ref<android::content::ContentProviderClient> acquireUnstableContentProviderClient(jni::ref<java::lang::String> name) { return call_method<"acquireUnstableContentProviderClient", jni::ref<android::content::ContentProviderClient>>(name); }
	void registerContentObserver(jni::ref<android::net::Uri> uri, jboolean notifyForDescendants, jni::ref<android::database::ContentObserver> observer) { return call_method<"registerContentObserver", void>(uri, notifyForDescendants, observer); }
	void unregisterContentObserver(jni::ref<android::database::ContentObserver> observer) { return call_method<"unregisterContentObserver", void>(observer); }
	void notifyChange(jni::ref<android::net::Uri> uri, jni::ref<android::database::ContentObserver> observer) { return call_method<"notifyChange", void>(uri, observer); }
	void notifyChange(jni::ref<android::net::Uri> uri, jni::ref<android::database::ContentObserver> observer, jboolean syncToNetwork) { return call_method<"notifyChange", void>(uri, observer, syncToNetwork); }
	void notifyChange(jni::ref<android::net::Uri> uri, jni::ref<android::database::ContentObserver> observer, jint flags) { return call_method<"notifyChange", void>(uri, observer, flags); }
	void takePersistableUriPermission(jni::ref<android::net::Uri> uri, jint modeFlags) { return call_method<"takePersistableUriPermission", void>(uri, modeFlags); }
	void releasePersistableUriPermission(jni::ref<android::net::Uri> uri, jint modeFlags) { return call_method<"releasePersistableUriPermission", void>(uri, modeFlags); }
	jni::ref<java::util::List> getPersistedUriPermissions() { return call_method<"getPersistedUriPermissions", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getOutgoingPersistedUriPermissions() { return call_method<"getOutgoingPersistedUriPermissions", jni::ref<java::util::List>>(); }
	void startSync(jni::ref<android::net::Uri> uri, jni::ref<android::os::Bundle> extras) { return call_method<"startSync", void>(uri, extras); }
	static void requestSync(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority, jni::ref<android::os::Bundle> extras) { return call_static_method<"requestSync", void>(account, authority, extras); }
	static void requestSync(jni::ref<android::content::SyncRequest> request) { return call_static_method<"requestSync", void>(request); }
	static void validateSyncExtrasBundle(jni::ref<android::os::Bundle> extras) { return call_static_method<"validateSyncExtrasBundle", void>(extras); }
	void cancelSync(jni::ref<android::net::Uri> uri) { return call_method<"cancelSync", void>(uri); }
	static void cancelSync(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority) { return call_static_method<"cancelSync", void>(account, authority); }
	static jni::ref<jni::array<android::content::SyncAdapterType>> getSyncAdapterTypes() { return call_static_method<"getSyncAdapterTypes", jni::ref<jni::array<android::content::SyncAdapterType>>>(); }
	static jboolean getSyncAutomatically(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority) { return call_static_method<"getSyncAutomatically", jboolean>(account, authority); }
	static void setSyncAutomatically(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority, jboolean sync) { return call_static_method<"setSyncAutomatically", void>(account, authority, sync); }
	static void addPeriodicSync(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority, jni::ref<android::os::Bundle> extras, jlong pollFrequency) { return call_static_method<"addPeriodicSync", void>(account, authority, extras, pollFrequency); }
	static void removePeriodicSync(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority, jni::ref<android::os::Bundle> extras) { return call_static_method<"removePeriodicSync", void>(account, authority, extras); }
	static void cancelSync(jni::ref<android::content::SyncRequest> request) { return call_static_method<"cancelSync", void>(request); }
	static jni::ref<java::util::List> getPeriodicSyncs(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority) { return call_static_method<"getPeriodicSyncs", jni::ref<java::util::List>>(account, authority); }
	static jint getIsSyncable(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority) { return call_static_method<"getIsSyncable", jint>(account, authority); }
	static void setIsSyncable(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority, jint syncable) { return call_static_method<"setIsSyncable", void>(account, authority, syncable); }
	static jboolean getMasterSyncAutomatically() { return call_static_method<"getMasterSyncAutomatically", jboolean>(); }
	static void setMasterSyncAutomatically(jboolean sync) { return call_static_method<"setMasterSyncAutomatically", void>(sync); }
	static jboolean isSyncActive(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority) { return call_static_method<"isSyncActive", jboolean>(account, authority); }
	static jni::ref<android::content::SyncInfo> getCurrentSync() { return call_static_method<"getCurrentSync", jni::ref<android::content::SyncInfo>>(); }
	static jni::ref<java::util::List> getCurrentSyncs() { return call_static_method<"getCurrentSyncs", jni::ref<java::util::List>>(); }
	static jboolean isSyncPending(jni::ref<android::accounts::Account> account, jni::ref<java::lang::String> authority) { return call_static_method<"isSyncPending", jboolean>(account, authority); }
	static jni::ref<java::lang::Object> addStatusChangeListener(jint mask, jni::ref<android::content::SyncStatusObserver> callback) { return call_static_method<"addStatusChangeListener", jni::ref<java::lang::Object>>(mask, callback); }
	static void removeStatusChangeListener(jni::ref<java::lang::Object> handle) { return call_static_method<"removeStatusChangeListener", void>(handle); }

protected:

	ContentResolver(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CONTENTRESOLVER
