// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_INTENTFILTER_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_INTENTFILTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class IntentFilter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::IntentFilter>
{
	static constexpr fixed_string class_name = "android/content/IntentFilter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_INTENTFILTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_INTENTFILTER)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_INTENTFILTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter_AuthorityEntry.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PatternMatcher.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#include <scapix/java_api/org/xmlpull/v1/XmlSerializer.h>
#include <scapix/java_api/android/content/IntentFilter_MalformedMimeTypeException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::IntentFilter : public jni::object_base<"android/content/IntentFilter",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using AuthorityEntry = IntentFilter_AuthorityEntry;
	using MalformedMimeTypeException = IntentFilter_MalformedMimeTypeException;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint MATCH_ADJUSTMENT_MASK() { return get_static_field<"MATCH_ADJUSTMENT_MASK", jint>(); }
	static jint MATCH_ADJUSTMENT_NORMAL() { return get_static_field<"MATCH_ADJUSTMENT_NORMAL", jint>(); }
	static jint MATCH_CATEGORY_EMPTY() { return get_static_field<"MATCH_CATEGORY_EMPTY", jint>(); }
	static jint MATCH_CATEGORY_HOST() { return get_static_field<"MATCH_CATEGORY_HOST", jint>(); }
	static jint MATCH_CATEGORY_MASK() { return get_static_field<"MATCH_CATEGORY_MASK", jint>(); }
	static jint MATCH_CATEGORY_PATH() { return get_static_field<"MATCH_CATEGORY_PATH", jint>(); }
	static jint MATCH_CATEGORY_PORT() { return get_static_field<"MATCH_CATEGORY_PORT", jint>(); }
	static jint MATCH_CATEGORY_SCHEME() { return get_static_field<"MATCH_CATEGORY_SCHEME", jint>(); }
	static jint MATCH_CATEGORY_SCHEME_SPECIFIC_PART() { return get_static_field<"MATCH_CATEGORY_SCHEME_SPECIFIC_PART", jint>(); }
	static jint MATCH_CATEGORY_TYPE() { return get_static_field<"MATCH_CATEGORY_TYPE", jint>(); }
	static jint NO_MATCH_ACTION() { return get_static_field<"NO_MATCH_ACTION", jint>(); }
	static jint NO_MATCH_CATEGORY() { return get_static_field<"NO_MATCH_CATEGORY", jint>(); }
	static jint NO_MATCH_DATA() { return get_static_field<"NO_MATCH_DATA", jint>(); }
	static jint NO_MATCH_TYPE() { return get_static_field<"NO_MATCH_TYPE", jint>(); }
	static jint SYSTEM_HIGH_PRIORITY() { return get_static_field<"SYSTEM_HIGH_PRIORITY", jint>(); }
	static jint SYSTEM_LOW_PRIORITY() { return get_static_field<"SYSTEM_LOW_PRIORITY", jint>(); }

	static jni::ref<android::content::IntentFilter> new_object() { return base_::new_object(); }
	static jni::ref<android::content::IntentFilter> new_object(jni::ref<java::lang::String> action) { return base_::new_object(action); }
	static jni::ref<android::content::IntentFilter> new_object(jni::ref<java::lang::String> action, jni::ref<java::lang::String> dataType) { return base_::new_object(action, dataType); }
	static jni::ref<android::content::IntentFilter> new_object(jni::ref<android::content::IntentFilter> o) { return base_::new_object(o); }
	static jni::ref<android::content::IntentFilter> create(jni::ref<java::lang::String> action, jni::ref<java::lang::String> dataType) { return call_static_method<"create", jni::ref<android::content::IntentFilter>>(action, dataType); }
	void setPriority(jint priority) { return call_method<"setPriority", void>(priority); }
	jint getPriority() { return call_method<"getPriority", jint>(); }
	void addAction(jni::ref<java::lang::String> action) { return call_method<"addAction", void>(action); }
	jint countActions() { return call_method<"countActions", jint>(); }
	jni::ref<java::lang::String> getAction(jint index) { return call_method<"getAction", jni::ref<java::lang::String>>(index); }
	jboolean hasAction(jni::ref<java::lang::String> action) { return call_method<"hasAction", jboolean>(action); }
	jboolean matchAction(jni::ref<java::lang::String> action) { return call_method<"matchAction", jboolean>(action); }
	jni::ref<java::util::Iterator> actionsIterator() { return call_method<"actionsIterator", jni::ref<java::util::Iterator>>(); }
	void addDataType(jni::ref<java::lang::String> type) { return call_method<"addDataType", void>(type); }
	jboolean hasDataType(jni::ref<java::lang::String> type) { return call_method<"hasDataType", jboolean>(type); }
	jint countDataTypes() { return call_method<"countDataTypes", jint>(); }
	jni::ref<java::lang::String> getDataType(jint index) { return call_method<"getDataType", jni::ref<java::lang::String>>(index); }
	jni::ref<java::util::Iterator> typesIterator() { return call_method<"typesIterator", jni::ref<java::util::Iterator>>(); }
	void addDataScheme(jni::ref<java::lang::String> scheme) { return call_method<"addDataScheme", void>(scheme); }
	jint countDataSchemes() { return call_method<"countDataSchemes", jint>(); }
	jni::ref<java::lang::String> getDataScheme(jint index) { return call_method<"getDataScheme", jni::ref<java::lang::String>>(index); }
	jboolean hasDataScheme(jni::ref<java::lang::String> scheme) { return call_method<"hasDataScheme", jboolean>(scheme); }
	jni::ref<java::util::Iterator> schemesIterator() { return call_method<"schemesIterator", jni::ref<java::util::Iterator>>(); }
	void addDataSchemeSpecificPart(jni::ref<java::lang::String> ssp, jint type) { return call_method<"addDataSchemeSpecificPart", void>(ssp, type); }
	jint countDataSchemeSpecificParts() { return call_method<"countDataSchemeSpecificParts", jint>(); }
	jni::ref<android::os::PatternMatcher> getDataSchemeSpecificPart(jint index) { return call_method<"getDataSchemeSpecificPart", jni::ref<android::os::PatternMatcher>>(index); }
	jboolean hasDataSchemeSpecificPart(jni::ref<java::lang::String> data) { return call_method<"hasDataSchemeSpecificPart", jboolean>(data); }
	jni::ref<java::util::Iterator> schemeSpecificPartsIterator() { return call_method<"schemeSpecificPartsIterator", jni::ref<java::util::Iterator>>(); }
	void addDataAuthority(jni::ref<java::lang::String> host, jni::ref<java::lang::String> port) { return call_method<"addDataAuthority", void>(host, port); }
	jint countDataAuthorities() { return call_method<"countDataAuthorities", jint>(); }
	jni::ref<android::content::IntentFilter_AuthorityEntry> getDataAuthority(jint index) { return call_method<"getDataAuthority", jni::ref<android::content::IntentFilter_AuthorityEntry>>(index); }
	jboolean hasDataAuthority(jni::ref<android::net::Uri> data) { return call_method<"hasDataAuthority", jboolean>(data); }
	jni::ref<java::util::Iterator> authoritiesIterator() { return call_method<"authoritiesIterator", jni::ref<java::util::Iterator>>(); }
	void addDataPath(jni::ref<java::lang::String> path, jint type) { return call_method<"addDataPath", void>(path, type); }
	jint countDataPaths() { return call_method<"countDataPaths", jint>(); }
	jni::ref<android::os::PatternMatcher> getDataPath(jint index) { return call_method<"getDataPath", jni::ref<android::os::PatternMatcher>>(index); }
	jboolean hasDataPath(jni::ref<java::lang::String> data) { return call_method<"hasDataPath", jboolean>(data); }
	jni::ref<java::util::Iterator> pathsIterator() { return call_method<"pathsIterator", jni::ref<java::util::Iterator>>(); }
	jint matchDataAuthority(jni::ref<android::net::Uri> data) { return call_method<"matchDataAuthority", jint>(data); }
	jint matchData(jni::ref<java::lang::String> type, jni::ref<java::lang::String> scheme, jni::ref<android::net::Uri> data) { return call_method<"matchData", jint>(type, scheme, data); }
	void addCategory(jni::ref<java::lang::String> category) { return call_method<"addCategory", void>(category); }
	jint countCategories() { return call_method<"countCategories", jint>(); }
	jni::ref<java::lang::String> getCategory(jint index) { return call_method<"getCategory", jni::ref<java::lang::String>>(index); }
	jboolean hasCategory(jni::ref<java::lang::String> category) { return call_method<"hasCategory", jboolean>(category); }
	jni::ref<java::util::Iterator> categoriesIterator() { return call_method<"categoriesIterator", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::lang::String> matchCategories(jni::ref<java::util::Set> categories) { return call_method<"matchCategories", jni::ref<java::lang::String>>(categories); }
	jint match(jni::ref<android::content::ContentResolver> resolver, jni::ref<android::content::Intent> intent, jboolean resolve, jni::ref<java::lang::String> logTag) { return call_method<"match", jint>(resolver, intent, resolve, logTag); }
	jint match(jni::ref<java::lang::String> action, jni::ref<java::lang::String> type, jni::ref<java::lang::String> scheme, jni::ref<android::net::Uri> data, jni::ref<java::util::Set> categories, jni::ref<java::lang::String> logTag) { return call_method<"match", jint>(action, type, scheme, data, categories, logTag); }
	void writeToXml(jni::ref<org::xmlpull::v1::XmlSerializer> serializer) { return call_method<"writeToXml", void>(serializer); }
	void readFromXml(jni::ref<org::xmlpull::v1::XmlPullParser> parser) { return call_method<"readFromXml", void>(parser); }
	void dump(jni::ref<android::util::Printer> du, jni::ref<java::lang::String> prefix) { return call_method<"dump", void>(du, prefix); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	IntentFilter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_INTENTFILTER
