// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_VIEWPARENT_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEWPARENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class ViewParent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::ViewParent>
{
	static constexpr fixed_string class_name = "android/view/ViewParent";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEWPARENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_VIEWPARENT)
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEWPARENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/view/ActionMode.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/ContextMenu.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::ViewParent : public jni::object_base<"android/view/ViewParent",
	java::lang::Object>
{
public:

	void requestLayout() { return call_method<"requestLayout", void>(); }
	jboolean isLayoutRequested() { return call_method<"isLayoutRequested", jboolean>(); }
	void requestTransparentRegion(jni::ref<android::view::View> p1) { return call_method<"requestTransparentRegion", void>(p1); }
	void invalidateChild(jni::ref<android::view::View> p1, jni::ref<android::graphics::Rect> p2) { return call_method<"invalidateChild", void>(p1, p2); }
	jni::ref<android::view::ViewParent> invalidateChildInParent(jni::ref<jni::array<jint>> p1, jni::ref<android::graphics::Rect> p2) { return call_method<"invalidateChildInParent", jni::ref<android::view::ViewParent>>(p1, p2); }
	jni::ref<android::view::ViewParent> getParent() { return call_method<"getParent", jni::ref<android::view::ViewParent>>(); }
	void requestChildFocus(jni::ref<android::view::View> p1, jni::ref<android::view::View> p2) { return call_method<"requestChildFocus", void>(p1, p2); }
	void recomputeViewAttributes(jni::ref<android::view::View> p1) { return call_method<"recomputeViewAttributes", void>(p1); }
	void clearChildFocus(jni::ref<android::view::View> p1) { return call_method<"clearChildFocus", void>(p1); }
	jboolean getChildVisibleRect(jni::ref<android::view::View> p1, jni::ref<android::graphics::Rect> p2, jni::ref<android::graphics::Point> p3) { return call_method<"getChildVisibleRect", jboolean>(p1, p2, p3); }
	jni::ref<android::view::View> focusSearch(jni::ref<android::view::View> p1, jint p2) { return call_method<"focusSearch", jni::ref<android::view::View>>(p1, p2); }
	void bringChildToFront(jni::ref<android::view::View> p1) { return call_method<"bringChildToFront", void>(p1); }
	void focusableViewAvailable(jni::ref<android::view::View> p1) { return call_method<"focusableViewAvailable", void>(p1); }
	jboolean showContextMenuForChild(jni::ref<android::view::View> p1) { return call_method<"showContextMenuForChild", jboolean>(p1); }
	jboolean showContextMenuForChild(jni::ref<android::view::View> p1, jfloat p2, jfloat p3) { return call_method<"showContextMenuForChild", jboolean>(p1, p2, p3); }
	void createContextMenu(jni::ref<android::view::ContextMenu> p1) { return call_method<"createContextMenu", void>(p1); }
	jni::ref<android::view::ActionMode> startActionModeForChild(jni::ref<android::view::View> p1, jni::ref<android::view::ActionMode_Callback> p2) { return call_method<"startActionModeForChild", jni::ref<android::view::ActionMode>>(p1, p2); }
	jni::ref<android::view::ActionMode> startActionModeForChild(jni::ref<android::view::View> p1, jni::ref<android::view::ActionMode_Callback> p2, jint p3) { return call_method<"startActionModeForChild", jni::ref<android::view::ActionMode>>(p1, p2, p3); }
	void childDrawableStateChanged(jni::ref<android::view::View> p1) { return call_method<"childDrawableStateChanged", void>(p1); }
	void requestDisallowInterceptTouchEvent(jboolean p1) { return call_method<"requestDisallowInterceptTouchEvent", void>(p1); }
	jboolean requestChildRectangleOnScreen(jni::ref<android::view::View> p1, jni::ref<android::graphics::Rect> p2, jboolean p3) { return call_method<"requestChildRectangleOnScreen", jboolean>(p1, p2, p3); }
	jboolean requestSendAccessibilityEvent(jni::ref<android::view::View> p1, jni::ref<android::view::accessibility::AccessibilityEvent> p2) { return call_method<"requestSendAccessibilityEvent", jboolean>(p1, p2); }
	void childHasTransientStateChanged(jni::ref<android::view::View> p1, jboolean p2) { return call_method<"childHasTransientStateChanged", void>(p1, p2); }
	void requestFitSystemWindows() { return call_method<"requestFitSystemWindows", void>(); }
	jni::ref<android::view::ViewParent> getParentForAccessibility() { return call_method<"getParentForAccessibility", jni::ref<android::view::ViewParent>>(); }
	void notifySubtreeAccessibilityStateChanged(jni::ref<android::view::View> p1, jni::ref<android::view::View> p2, jint p3) { return call_method<"notifySubtreeAccessibilityStateChanged", void>(p1, p2, p3); }
	jboolean canResolveLayoutDirection() { return call_method<"canResolveLayoutDirection", jboolean>(); }
	jboolean isLayoutDirectionResolved() { return call_method<"isLayoutDirectionResolved", jboolean>(); }
	jint getLayoutDirection() { return call_method<"getLayoutDirection", jint>(); }
	jboolean canResolveTextDirection() { return call_method<"canResolveTextDirection", jboolean>(); }
	jboolean isTextDirectionResolved() { return call_method<"isTextDirectionResolved", jboolean>(); }
	jint getTextDirection() { return call_method<"getTextDirection", jint>(); }
	jboolean canResolveTextAlignment() { return call_method<"canResolveTextAlignment", jboolean>(); }
	jboolean isTextAlignmentResolved() { return call_method<"isTextAlignmentResolved", jboolean>(); }
	jint getTextAlignment() { return call_method<"getTextAlignment", jint>(); }
	jboolean onStartNestedScroll(jni::ref<android::view::View> p1, jni::ref<android::view::View> p2, jint p3) { return call_method<"onStartNestedScroll", jboolean>(p1, p2, p3); }
	void onNestedScrollAccepted(jni::ref<android::view::View> p1, jni::ref<android::view::View> p2, jint p3) { return call_method<"onNestedScrollAccepted", void>(p1, p2, p3); }
	void onStopNestedScroll(jni::ref<android::view::View> p1) { return call_method<"onStopNestedScroll", void>(p1); }
	void onNestedScroll(jni::ref<android::view::View> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"onNestedScroll", void>(p1, p2, p3, p4, p5); }
	void onNestedPreScroll(jni::ref<android::view::View> p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4) { return call_method<"onNestedPreScroll", void>(p1, p2, p3, p4); }
	jboolean onNestedFling(jni::ref<android::view::View> p1, jfloat p2, jfloat p3, jboolean p4) { return call_method<"onNestedFling", jboolean>(p1, p2, p3, p4); }
	jboolean onNestedPreFling(jni::ref<android::view::View> p1, jfloat p2, jfloat p3) { return call_method<"onNestedPreFling", jboolean>(p1, p2, p3); }
	jboolean onNestedPrePerformAccessibilityAction(jni::ref<android::view::View> p1, jint p2, jni::ref<android::os::Bundle> p3) { return call_method<"onNestedPrePerformAccessibilityAction", jboolean>(p1, p2, p3); }

protected:

	ViewParent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEWPARENT
