// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGINTERNAL_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGINTERNAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class SpannableStringInternal; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::SpannableStringInternal>
{
	static constexpr fixed_string class_name = "android/text/SpannableStringInternal";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGINTERNAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGINTERNAL)
#define SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGINTERNAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class android::text::SpannableStringInternal : public jni::object_base<"android/text/SpannableStringInternal",
	java::lang::Object>
{
public:

	jint length() { return call_method<"length", jint>(); }
	jchar charAt(jint i) { return call_method<"charAt", jchar>(i); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void getChars(jint start, jint end, jni::ref<jni::array<jchar>> dest, jint off) { return call_method<"getChars", void>(start, end, dest, off); }
	jint getSpanStart(jni::ref<java::lang::Object> what) { return call_method<"getSpanStart", jint>(what); }
	jint getSpanEnd(jni::ref<java::lang::Object> what) { return call_method<"getSpanEnd", jint>(what); }
	jint getSpanFlags(jni::ref<java::lang::Object> what) { return call_method<"getSpanFlags", jint>(what); }
	jni::ref<jni::array<java::lang::Object>> getSpans(jint queryStart, jint queryEnd, jni::ref<java::lang::Class> kind) { return call_method<"getSpans", jni::ref<jni::array<java::lang::Object>>>(queryStart, queryEnd, kind); }
	jint nextSpanTransition(jint start, jint limit, jni::ref<java::lang::Class> kind) { return call_method<"nextSpanTransition", jint>(start, limit, kind); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	SpannableStringInternal(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGINTERNAL
