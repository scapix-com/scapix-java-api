// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_ANDROIDCHARACTER_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_ANDROIDCHARACTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class AndroidCharacter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::AndroidCharacter>
{
	static constexpr fixed_string class_name = "android/text/AndroidCharacter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_ANDROIDCHARACTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_ANDROIDCHARACTER)
#define SCAPIX_JAVA_API_ANDROID_TEXT_ANDROIDCHARACTER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::AndroidCharacter : public jni::object_base<"android/text/AndroidCharacter",
	java::lang::Object>
{
public:

	static jint EAST_ASIAN_WIDTH_AMBIGUOUS() { return get_static_field<"EAST_ASIAN_WIDTH_AMBIGUOUS", jint>(); }
	static jint EAST_ASIAN_WIDTH_FULL_WIDTH() { return get_static_field<"EAST_ASIAN_WIDTH_FULL_WIDTH", jint>(); }
	static jint EAST_ASIAN_WIDTH_HALF_WIDTH() { return get_static_field<"EAST_ASIAN_WIDTH_HALF_WIDTH", jint>(); }
	static jint EAST_ASIAN_WIDTH_NARROW() { return get_static_field<"EAST_ASIAN_WIDTH_NARROW", jint>(); }
	static jint EAST_ASIAN_WIDTH_NEUTRAL() { return get_static_field<"EAST_ASIAN_WIDTH_NEUTRAL", jint>(); }
	static jint EAST_ASIAN_WIDTH_WIDE() { return get_static_field<"EAST_ASIAN_WIDTH_WIDE", jint>(); }

	static jni::ref<android::text::AndroidCharacter> new_object() { return base_::new_object(); }
	static void getDirectionalities(jni::ref<jni::array<jchar>> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_static_method<"getDirectionalities", void>(p1, p2, p3); }
	static jint getEastAsianWidth(jchar p1) { return call_static_method<"getEastAsianWidth", jint>(p1); }
	static void getEastAsianWidths(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jni::ref<jni::array<jbyte>> p4) { return call_static_method<"getEastAsianWidths", void>(p1, p2, p3, p4); }
	static jboolean mirror(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_static_method<"mirror", jboolean>(p1, p2, p3); }
	static jchar getMirror(jchar p1) { return call_static_method<"getMirror", jchar>(p1); }

protected:

	AndroidCharacter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_ANDROIDCHARACTER
