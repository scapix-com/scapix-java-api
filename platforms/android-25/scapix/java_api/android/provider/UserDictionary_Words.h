// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/provider/BaseColumns.h>

#ifndef SCAPIX_JAVA_API_ANDROID_PROVIDER_USERDICTIONARY_WORDS_FWD
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_USERDICTIONARY_WORDS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::provider { class UserDictionary_Words; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::provider::UserDictionary_Words>
{
	static constexpr fixed_string class_name = "android/provider/UserDictionary$Words";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::provider::BaseColumns>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_USERDICTIONARY_WORDS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_PROVIDER_USERDICTIONARY_WORDS)
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_USERDICTIONARY_WORDS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::provider::UserDictionary_Words : public jni::object_base<"android/provider/UserDictionary$Words",
	java::lang::Object,
	android::provider::BaseColumns>
{
public:

	static jni::ref<java::lang::String> APP_ID() { return get_static_field<"APP_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONTENT_ITEM_TYPE() { return get_static_field<"CONTENT_ITEM_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONTENT_TYPE() { return get_static_field<"CONTENT_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<android::net::Uri> CONTENT_URI() { return get_static_field<"CONTENT_URI", jni::ref<android::net::Uri>>(); }
	static jni::ref<java::lang::String> DEFAULT_SORT_ORDER() { return get_static_field<"DEFAULT_SORT_ORDER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FREQUENCY() { return get_static_field<"FREQUENCY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LOCALE() { return get_static_field<"LOCALE", jni::ref<java::lang::String>>(); }
	static jint LOCALE_TYPE_ALL() { return get_static_field<"LOCALE_TYPE_ALL", jint>(); }
	static jint LOCALE_TYPE_CURRENT() { return get_static_field<"LOCALE_TYPE_CURRENT", jint>(); }
	static jni::ref<java::lang::String> SHORTCUT() { return get_static_field<"SHORTCUT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WORD() { return get_static_field<"WORD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> _ID() { return get_static_field<"_ID", jni::ref<java::lang::String>>(); }

	static jni::ref<android::provider::UserDictionary_Words> new_object() { return base_::new_object(); }
	static void addWord(jni::ref<android::content::Context> context, jni::ref<java::lang::String> word, jint frequency, jint localeType) { return call_static_method<"addWord", void>(context, word, frequency, localeType); }
	static void addWord(jni::ref<android::content::Context> context, jni::ref<java::lang::String> word, jint frequency, jni::ref<java::lang::String> shortcut, jni::ref<java::util::Locale> locale) { return call_static_method<"addWord", void>(context, word, frequency, shortcut, locale); }

protected:

	UserDictionary_Words(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_USERDICTIONARY_WORDS
