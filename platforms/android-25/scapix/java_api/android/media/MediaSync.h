// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIASYNC_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIASYNC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaSync; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaSync>
{
	static constexpr fixed_string class_name = "android/media/MediaSync";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIASYNC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIASYNC)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIASYNC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/AudioTrack.h>
#include <scapix/java_api/android/media/MediaSync_Callback.h>
#include <scapix/java_api/android/media/MediaSync_OnErrorListener.h>
#include <scapix/java_api/android/media/MediaTimestamp.h>
#include <scapix/java_api/android/media/PlaybackParams.h>
#include <scapix/java_api/android/media/SyncParams.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaSync : public jni::object_base<"android/media/MediaSync",
	java::lang::Object>
{
public:

	using OnErrorListener = MediaSync_OnErrorListener;
	using Callback = MediaSync_Callback;

	static jint MEDIASYNC_ERROR_AUDIOTRACK_FAIL() { return get_static_field<"MEDIASYNC_ERROR_AUDIOTRACK_FAIL", jint>(); }
	static jint MEDIASYNC_ERROR_SURFACE_FAIL() { return get_static_field<"MEDIASYNC_ERROR_SURFACE_FAIL", jint>(); }

	static jni::ref<android::media::MediaSync> new_object() { return base_::new_object(); }
	void release() { return call_method<"release", void>(); }
	void setCallback(jni::ref<android::media::MediaSync_Callback> cb, jni::ref<android::os::Handler> handler) { return call_method<"setCallback", void>(cb, handler); }
	void setOnErrorListener(jni::ref<android::media::MediaSync_OnErrorListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"setOnErrorListener", void>(listener, handler); }
	void setSurface(jni::ref<android::view::Surface> surface) { return call_method<"setSurface", void>(surface); }
	void setAudioTrack(jni::ref<android::media::AudioTrack> audioTrack) { return call_method<"setAudioTrack", void>(audioTrack); }
	jni::ref<android::view::Surface> createInputSurface() { return call_method<"createInputSurface", jni::ref<android::view::Surface>>(); }
	void setPlaybackParams(jni::ref<android::media::PlaybackParams> params) { return call_method<"setPlaybackParams", void>(params); }
	jni::ref<android::media::PlaybackParams> getPlaybackParams() { return call_method<"getPlaybackParams", jni::ref<android::media::PlaybackParams>>(); }
	void setSyncParams(jni::ref<android::media::SyncParams> params) { return call_method<"setSyncParams", void>(params); }
	jni::ref<android::media::SyncParams> getSyncParams() { return call_method<"getSyncParams", jni::ref<android::media::SyncParams>>(); }
	void flush() { return call_method<"flush", void>(); }
	jni::ref<android::media::MediaTimestamp> getTimestamp() { return call_method<"getTimestamp", jni::ref<android::media::MediaTimestamp>>(); }
	void queueAudio(jni::ref<java::nio::ByteBuffer> audioData, jint bufferId, jlong presentationTimeUs) { return call_method<"queueAudio", void>(audioData, bufferId, presentationTimeUs); }

protected:

	MediaSync(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIASYNC
