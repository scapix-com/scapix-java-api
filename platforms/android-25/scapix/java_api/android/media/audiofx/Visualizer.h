// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_VISUALIZER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_VISUALIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::audiofx { class Visualizer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::audiofx::Visualizer>
{
	static constexpr fixed_string class_name = "android/media/audiofx/Visualizer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_VISUALIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_VISUALIZER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_VISUALIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/audiofx/Visualizer_MeasurementPeakRms.h>
#include <scapix/java_api/android/media/audiofx/Visualizer_OnDataCaptureListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::audiofx::Visualizer : public jni::object_base<"android/media/audiofx/Visualizer",
	java::lang::Object>
{
public:

	using OnDataCaptureListener = Visualizer_OnDataCaptureListener;
	using MeasurementPeakRms = Visualizer_MeasurementPeakRms;

	static jint ALREADY_EXISTS() { return get_static_field<"ALREADY_EXISTS", jint>(); }
	static jint ERROR() { return get_static_field<"ERROR", jint>(); }
	static jint ERROR_BAD_VALUE() { return get_static_field<"ERROR_BAD_VALUE", jint>(); }
	static jint ERROR_DEAD_OBJECT() { return get_static_field<"ERROR_DEAD_OBJECT", jint>(); }
	static jint ERROR_INVALID_OPERATION() { return get_static_field<"ERROR_INVALID_OPERATION", jint>(); }
	static jint ERROR_NO_INIT() { return get_static_field<"ERROR_NO_INIT", jint>(); }
	static jint ERROR_NO_MEMORY() { return get_static_field<"ERROR_NO_MEMORY", jint>(); }
	static jint MEASUREMENT_MODE_NONE() { return get_static_field<"MEASUREMENT_MODE_NONE", jint>(); }
	static jint MEASUREMENT_MODE_PEAK_RMS() { return get_static_field<"MEASUREMENT_MODE_PEAK_RMS", jint>(); }
	static jint SCALING_MODE_AS_PLAYED() { return get_static_field<"SCALING_MODE_AS_PLAYED", jint>(); }
	static jint SCALING_MODE_NORMALIZED() { return get_static_field<"SCALING_MODE_NORMALIZED", jint>(); }
	static jint STATE_ENABLED() { return get_static_field<"STATE_ENABLED", jint>(); }
	static jint STATE_INITIALIZED() { return get_static_field<"STATE_INITIALIZED", jint>(); }
	static jint STATE_UNINITIALIZED() { return get_static_field<"STATE_UNINITIALIZED", jint>(); }
	static jint SUCCESS() { return get_static_field<"SUCCESS", jint>(); }

	static jni::ref<android::media::audiofx::Visualizer> new_object(jint audioSession) { return base_::new_object(audioSession); }
	void release() { return call_method<"release", void>(); }
	jint setEnabled(jboolean enabled) { return call_method<"setEnabled", jint>(enabled); }
	jboolean getEnabled() { return call_method<"getEnabled", jboolean>(); }
	static jni::ref<jni::array<jint>> getCaptureSizeRange() { return call_static_method<"getCaptureSizeRange", jni::ref<jni::array<jint>>>(); }
	static jint getMaxCaptureRate() { return call_static_method<"getMaxCaptureRate", jint>(); }
	jint setCaptureSize(jint size) { return call_method<"setCaptureSize", jint>(size); }
	jint getCaptureSize() { return call_method<"getCaptureSize", jint>(); }
	jint setScalingMode(jint mode) { return call_method<"setScalingMode", jint>(mode); }
	jint getScalingMode() { return call_method<"getScalingMode", jint>(); }
	jint setMeasurementMode(jint mode) { return call_method<"setMeasurementMode", jint>(mode); }
	jint getMeasurementMode() { return call_method<"getMeasurementMode", jint>(); }
	jint getSamplingRate() { return call_method<"getSamplingRate", jint>(); }
	jint getWaveForm(jni::ref<jni::array<jbyte>> waveform) { return call_method<"getWaveForm", jint>(waveform); }
	jint getFft(jni::ref<jni::array<jbyte>> fft) { return call_method<"getFft", jint>(fft); }
	jint getMeasurementPeakRms(jni::ref<android::media::audiofx::Visualizer_MeasurementPeakRms> measurement) { return call_method<"getMeasurementPeakRms", jint>(measurement); }
	jint setDataCaptureListener(jni::ref<android::media::audiofx::Visualizer_OnDataCaptureListener> listener, jint rate, jboolean waveform, jboolean fft) { return call_method<"setDataCaptureListener", jint>(listener, rate, waveform, fft); }

protected:

	Visualizer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOFX_VISUALIZER
