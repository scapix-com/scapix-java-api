// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware { class Camera; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::Camera>
{
	static constexpr fixed_string class_name = "android/hardware/Camera";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/SurfaceTexture.h>
#include <scapix/java_api/android/hardware/Camera_AutoFocusCallback.h>
#include <scapix/java_api/android/hardware/Camera_AutoFocusMoveCallback.h>
#include <scapix/java_api/android/hardware/Camera_CameraInfo.h>
#include <scapix/java_api/android/hardware/Camera_ErrorCallback.h>
#include <scapix/java_api/android/hardware/Camera_FaceDetectionListener.h>
#include <scapix/java_api/android/hardware/Camera_OnZoomChangeListener.h>
#include <scapix/java_api/android/hardware/Camera_Parameters.h>
#include <scapix/java_api/android/hardware/Camera_PictureCallback.h>
#include <scapix/java_api/android/hardware/Camera_PreviewCallback.h>
#include <scapix/java_api/android/hardware/Camera_ShutterCallback.h>
#include <scapix/java_api/android/view/SurfaceHolder.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/hardware/Camera_Area.h>
#include <scapix/java_api/android/hardware/Camera_Size.h>
#include <scapix/java_api/android/hardware/Camera_Face.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::Camera : public jni::object_base<"android/hardware/Camera",
	java::lang::Object>
{
public:

	using Parameters = Camera_Parameters;
	using Area = Camera_Area;
	using Size = Camera_Size;
	using ErrorCallback = Camera_ErrorCallback;
	using Face = Camera_Face;
	using FaceDetectionListener = Camera_FaceDetectionListener;
	using OnZoomChangeListener = Camera_OnZoomChangeListener;
	using PictureCallback = Camera_PictureCallback;
	using ShutterCallback = Camera_ShutterCallback;
	using AutoFocusMoveCallback = Camera_AutoFocusMoveCallback;
	using AutoFocusCallback = Camera_AutoFocusCallback;
	using PreviewCallback = Camera_PreviewCallback;
	using CameraInfo = Camera_CameraInfo;

	static jni::ref<java::lang::String> ACTION_NEW_PICTURE() { return get_static_field<"ACTION_NEW_PICTURE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_NEW_VIDEO() { return get_static_field<"ACTION_NEW_VIDEO", jni::ref<java::lang::String>>(); }
	static jint CAMERA_ERROR_EVICTED() { return get_static_field<"CAMERA_ERROR_EVICTED", jint>(); }
	static jint CAMERA_ERROR_SERVER_DIED() { return get_static_field<"CAMERA_ERROR_SERVER_DIED", jint>(); }
	static jint CAMERA_ERROR_UNKNOWN() { return get_static_field<"CAMERA_ERROR_UNKNOWN", jint>(); }

	static jint getNumberOfCameras() { return call_static_method<"getNumberOfCameras", jint>(); }
	static void getCameraInfo(jint cameraId, jni::ref<android::hardware::Camera_CameraInfo> cameraInfo) { return call_static_method<"getCameraInfo", void>(cameraId, cameraInfo); }
	static jni::ref<android::hardware::Camera> open(jint cameraId) { return call_static_method<"open", jni::ref<android::hardware::Camera>>(cameraId); }
	static jni::ref<android::hardware::Camera> open() { return call_static_method<"open", jni::ref<android::hardware::Camera>>(); }
	void release() { return call_method<"release", void>(); }
	void unlock() { return call_method<"unlock", void>(); }
	void lock() { return call_method<"lock", void>(); }
	void reconnect() { return call_method<"reconnect", void>(); }
	void setPreviewDisplay(jni::ref<android::view::SurfaceHolder> holder) { return call_method<"setPreviewDisplay", void>(holder); }
	void setPreviewTexture(jni::ref<android::graphics::SurfaceTexture> p1) { return call_method<"setPreviewTexture", void>(p1); }
	void startPreview() { return call_method<"startPreview", void>(); }
	void stopPreview() { return call_method<"stopPreview", void>(); }
	void setPreviewCallback(jni::ref<android::hardware::Camera_PreviewCallback> cb) { return call_method<"setPreviewCallback", void>(cb); }
	void setOneShotPreviewCallback(jni::ref<android::hardware::Camera_PreviewCallback> cb) { return call_method<"setOneShotPreviewCallback", void>(cb); }
	void setPreviewCallbackWithBuffer(jni::ref<android::hardware::Camera_PreviewCallback> cb) { return call_method<"setPreviewCallbackWithBuffer", void>(cb); }
	void addCallbackBuffer(jni::ref<jni::array<jbyte>> callbackBuffer) { return call_method<"addCallbackBuffer", void>(callbackBuffer); }
	void autoFocus(jni::ref<android::hardware::Camera_AutoFocusCallback> cb) { return call_method<"autoFocus", void>(cb); }
	void cancelAutoFocus() { return call_method<"cancelAutoFocus", void>(); }
	void setAutoFocusMoveCallback(jni::ref<android::hardware::Camera_AutoFocusMoveCallback> cb) { return call_method<"setAutoFocusMoveCallback", void>(cb); }
	void takePicture(jni::ref<android::hardware::Camera_ShutterCallback> shutter, jni::ref<android::hardware::Camera_PictureCallback> raw, jni::ref<android::hardware::Camera_PictureCallback> jpeg) { return call_method<"takePicture", void>(shutter, raw, jpeg); }
	void takePicture(jni::ref<android::hardware::Camera_ShutterCallback> shutter, jni::ref<android::hardware::Camera_PictureCallback> raw, jni::ref<android::hardware::Camera_PictureCallback> postview, jni::ref<android::hardware::Camera_PictureCallback> jpeg) { return call_method<"takePicture", void>(shutter, raw, postview, jpeg); }
	void startSmoothZoom(jint p1) { return call_method<"startSmoothZoom", void>(p1); }
	void stopSmoothZoom() { return call_method<"stopSmoothZoom", void>(); }
	void setDisplayOrientation(jint p1) { return call_method<"setDisplayOrientation", void>(p1); }
	jboolean enableShutterSound(jboolean enabled) { return call_method<"enableShutterSound", jboolean>(enabled); }
	void setZoomChangeListener(jni::ref<android::hardware::Camera_OnZoomChangeListener> listener) { return call_method<"setZoomChangeListener", void>(listener); }
	void setFaceDetectionListener(jni::ref<android::hardware::Camera_FaceDetectionListener> listener) { return call_method<"setFaceDetectionListener", void>(listener); }
	void startFaceDetection() { return call_method<"startFaceDetection", void>(); }
	void stopFaceDetection() { return call_method<"stopFaceDetection", void>(); }
	void setErrorCallback(jni::ref<android::hardware::Camera_ErrorCallback> cb) { return call_method<"setErrorCallback", void>(cb); }
	void setParameters(jni::ref<android::hardware::Camera_Parameters> params) { return call_method<"setParameters", void>(params); }
	jni::ref<android::hardware::Camera_Parameters> getParameters() { return call_method<"getParameters", jni::ref<android::hardware::Camera_Parameters>>(); }

protected:

	Camera(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA
