// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTCONTROLLER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTCONTROLLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class FragmentController; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::FragmentController>
{
	static constexpr fixed_string class_name = "android/app/FragmentController";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTCONTROLLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTCONTROLLER)
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTCONTROLLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/Fragment.h>
#include <scapix/java_api/android/app/FragmentHostCallback.h>
#include <scapix/java_api/android/app/FragmentManager.h>
#include <scapix/java_api/android/app/FragmentManagerNonConfig.h>
#include <scapix/java_api/android/app/LoaderManager.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/util/ArrayMap.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/Menu.h>
#include <scapix/java_api/android/view/MenuInflater.h>
#include <scapix/java_api/android/view/MenuItem.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::FragmentController : public jni::object_base<"android/app/FragmentController",
	java::lang::Object>
{
public:

	static jni::ref<android::app::FragmentController> createController(jni::ref<android::app::FragmentHostCallback> callbacks) { return call_static_method<"createController", jni::ref<android::app::FragmentController>>(callbacks); }
	jni::ref<android::app::FragmentManager> getFragmentManager() { return call_method<"getFragmentManager", jni::ref<android::app::FragmentManager>>(); }
	jni::ref<android::app::LoaderManager> getLoaderManager() { return call_method<"getLoaderManager", jni::ref<android::app::LoaderManager>>(); }
	jni::ref<android::app::Fragment> findFragmentByWho(jni::ref<java::lang::String> who) { return call_method<"findFragmentByWho", jni::ref<android::app::Fragment>>(who); }
	void attachHost(jni::ref<android::app::Fragment> parent) { return call_method<"attachHost", void>(parent); }
	jni::ref<android::view::View> onCreateView(jni::ref<android::view::View> parent, jni::ref<java::lang::String> name, jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return call_method<"onCreateView", jni::ref<android::view::View>>(parent, name, context, attrs); }
	void noteStateNotSaved() { return call_method<"noteStateNotSaved", void>(); }
	jni::ref<android::os::Parcelable> saveAllState() { return call_method<"saveAllState", jni::ref<android::os::Parcelable>>(); }
	void restoreAllState(jni::ref<android::os::Parcelable> state, jni::ref<java::util::List> nonConfigList) { return call_method<"restoreAllState", void>(state, nonConfigList); }
	void restoreAllState(jni::ref<android::os::Parcelable> state, jni::ref<android::app::FragmentManagerNonConfig> nonConfig) { return call_method<"restoreAllState", void>(state, nonConfig); }
	jni::ref<java::util::List> retainNonConfig() { return call_method<"retainNonConfig", jni::ref<java::util::List>>(); }
	jni::ref<android::app::FragmentManagerNonConfig> retainNestedNonConfig() { return call_method<"retainNestedNonConfig", jni::ref<android::app::FragmentManagerNonConfig>>(); }
	void dispatchCreate() { return call_method<"dispatchCreate", void>(); }
	void dispatchActivityCreated() { return call_method<"dispatchActivityCreated", void>(); }
	void dispatchStart() { return call_method<"dispatchStart", void>(); }
	void dispatchResume() { return call_method<"dispatchResume", void>(); }
	void dispatchPause() { return call_method<"dispatchPause", void>(); }
	void dispatchStop() { return call_method<"dispatchStop", void>(); }
	void dispatchDestroyView() { return call_method<"dispatchDestroyView", void>(); }
	void dispatchDestroy() { return call_method<"dispatchDestroy", void>(); }
	void dispatchMultiWindowModeChanged(jboolean isInMultiWindowMode) { return call_method<"dispatchMultiWindowModeChanged", void>(isInMultiWindowMode); }
	void dispatchPictureInPictureModeChanged(jboolean isInPictureInPictureMode) { return call_method<"dispatchPictureInPictureModeChanged", void>(isInPictureInPictureMode); }
	void dispatchConfigurationChanged(jni::ref<android::content::res::Configuration> newConfig) { return call_method<"dispatchConfigurationChanged", void>(newConfig); }
	void dispatchLowMemory() { return call_method<"dispatchLowMemory", void>(); }
	void dispatchTrimMemory(jint level) { return call_method<"dispatchTrimMemory", void>(level); }
	jboolean dispatchCreateOptionsMenu(jni::ref<android::view::Menu> menu, jni::ref<android::view::MenuInflater> inflater) { return call_method<"dispatchCreateOptionsMenu", jboolean>(menu, inflater); }
	jboolean dispatchPrepareOptionsMenu(jni::ref<android::view::Menu> menu) { return call_method<"dispatchPrepareOptionsMenu", jboolean>(menu); }
	jboolean dispatchOptionsItemSelected(jni::ref<android::view::MenuItem> item) { return call_method<"dispatchOptionsItemSelected", jboolean>(item); }
	jboolean dispatchContextItemSelected(jni::ref<android::view::MenuItem> item) { return call_method<"dispatchContextItemSelected", jboolean>(item); }
	void dispatchOptionsMenuClosed(jni::ref<android::view::Menu> menu) { return call_method<"dispatchOptionsMenuClosed", void>(menu); }
	jboolean execPendingActions() { return call_method<"execPendingActions", jboolean>(); }
	void doLoaderStart() { return call_method<"doLoaderStart", void>(); }
	void doLoaderStop(jboolean retain) { return call_method<"doLoaderStop", void>(retain); }
	void doLoaderDestroy() { return call_method<"doLoaderDestroy", void>(); }
	void reportLoaderStart() { return call_method<"reportLoaderStart", void>(); }
	jni::ref<android::util::ArrayMap> retainLoaderNonConfig() { return call_method<"retainLoaderNonConfig", jni::ref<android::util::ArrayMap>>(); }
	void restoreLoaderNonConfig(jni::ref<android::util::ArrayMap> loaderManagers) { return call_method<"restoreLoaderNonConfig", void>(loaderManagers); }
	void dumpLoaders(jni::ref<java::lang::String> prefix, jni::ref<java::io::FileDescriptor> fd, jni::ref<java::io::PrintWriter> writer, jni::ref<jni::array<java::lang::String>> args) { return call_method<"dumpLoaders", void>(prefix, fd, writer, args); }

protected:

	FragmentController(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTCONTROLLER
