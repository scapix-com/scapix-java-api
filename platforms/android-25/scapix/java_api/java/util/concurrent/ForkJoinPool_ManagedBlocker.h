// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_MANAGEDBLOCKER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_MANAGEDBLOCKER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ForkJoinPool_ManagedBlocker; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ForkJoinPool_ManagedBlocker>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ForkJoinPool$ManagedBlocker";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_MANAGEDBLOCKER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_MANAGEDBLOCKER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_MANAGEDBLOCKER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::ForkJoinPool_ManagedBlocker : public jni::object_base<"java/util/concurrent/ForkJoinPool$ManagedBlocker",
	java::lang::Object>
{
public:

	jboolean block() { return call_method<"block", jboolean>(); }
	jboolean isReleasable() { return call_method<"isReleasable", jboolean>(); }

protected:

	ForkJoinPool_ManagedBlocker(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINPOOL_MANAGEDBLOCKER
