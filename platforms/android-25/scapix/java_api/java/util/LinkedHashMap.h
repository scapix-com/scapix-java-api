// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/HashMap.h>
#include <scapix/java_api/java/util/Map.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_LINKEDHASHMAP_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_LINKEDHASHMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class LinkedHashMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::LinkedHashMap>
{
	static constexpr fixed_string class_name = "java/util/LinkedHashMap";
	using base_classes = std::tuple<scapix::java_api::java::util::HashMap, scapix::java_api::java::util::Map>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LINKEDHASHMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_LINKEDHASHMAP)
#define SCAPIX_JAVA_API_JAVA_UTIL_LINKEDHASHMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::LinkedHashMap : public jni::object_base<"java/util/LinkedHashMap",
	java::util::HashMap,
	java::util::Map>
{
public:

	static jni::ref<java::util::LinkedHashMap> new_object(jint initialCapacity, jfloat loadFactor) { return base_::new_object(initialCapacity, loadFactor); }
	static jni::ref<java::util::LinkedHashMap> new_object(jint initialCapacity) { return base_::new_object(initialCapacity); }
	static jni::ref<java::util::LinkedHashMap> new_object() { return base_::new_object(); }
	static jni::ref<java::util::LinkedHashMap> new_object(jni::ref<java::util::Map> m) { return base_::new_object(m); }
	static jni::ref<java::util::LinkedHashMap> new_object(jint initialCapacity, jfloat loadFactor, jboolean accessOrder) { return base_::new_object(initialCapacity, loadFactor, accessOrder); }
	jboolean containsValue(jni::ref<java::lang::Object> value) { return call_method<"containsValue", jboolean>(value); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> key) { return call_method<"get", jni::ref<java::lang::Object>>(key); }
	void clear() { return call_method<"clear", void>(); }
	void forEach(jni::ref<java::util::function::BiConsumer> action) { return call_method<"forEach", void>(action); }
	void replaceAll(jni::ref<java::util::function::BiFunction> function) { return call_method<"replaceAll", void>(function); }

protected:

	LinkedHashMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LINKEDHASHMAP
