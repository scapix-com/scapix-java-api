// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/test/AndroidTestCase.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_PROVIDERTESTCASE2_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_PROVIDERTESTCASE2_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test { class ProviderTestCase2; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::ProviderTestCase2>
{
	static constexpr fixed_string class_name = "android/test/ProviderTestCase2";
	using base_classes = std::tuple<scapix::java_api::android::test::AndroidTestCase>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_PROVIDERTESTCASE2_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_PROVIDERTESTCASE2)
#define SCAPIX_JAVA_API_ANDROID_TEST_PROVIDERTESTCASE2

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentProvider.h>
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/test/IsolatedContext.h>
#include <scapix/java_api/android/test/mock/MockContentResolver.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::ProviderTestCase2 : public jni::object_base<"android/test/ProviderTestCase2",
	android::test::AndroidTestCase>
{
public:

	static jni::ref<android::test::ProviderTestCase2> new_object(jni::ref<java::lang::Class> providerClass, jni::ref<java::lang::String> providerAuthority) { return base_::new_object(providerClass, providerAuthority); }
	jni::ref<android::content::ContentProvider> getProvider() { return call_method<"getProvider", jni::ref<android::content::ContentProvider>>(); }
	jni::ref<android::test::mock::MockContentResolver> getMockContentResolver() { return call_method<"getMockContentResolver", jni::ref<android::test::mock::MockContentResolver>>(); }
	jni::ref<android::test::IsolatedContext> getMockContext() { return call_method<"getMockContext", jni::ref<android::test::IsolatedContext>>(); }
	static jni::ref<android::content::ContentResolver> newResolverWithContentProviderFromSql(jni::ref<android::content::Context> targetContext, jni::ref<java::lang::String> filenamePrefix, jni::ref<java::lang::Class> providerClass, jni::ref<java::lang::String> authority, jni::ref<java::lang::String> databaseName, jint databaseVersion, jni::ref<java::lang::String> sql) { return call_static_method<"newResolverWithContentProviderFromSql", jni::ref<android::content::ContentResolver>>(targetContext, filenamePrefix, providerClass, authority, databaseName, databaseVersion, sql); }

protected:

	ProviderTestCase2(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_PROVIDERTESTCASE2
