// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_SUITEBUILDER_TESTSUITEBUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_SUITEBUILDER_TESTSUITEBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test::suitebuilder { class TestSuiteBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::suitebuilder::TestSuiteBuilder>
{
	static constexpr fixed_string class_name = "android/test/suitebuilder/TestSuiteBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_SUITEBUILDER_TESTSUITEBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_SUITEBUILDER_TESTSUITEBUILDER)
#define SCAPIX_JAVA_API_ANDROID_TEST_SUITEBUILDER_TESTSUITEBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/android/internal/util/Predicate.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/junit/framework/TestSuite.h>
#include <scapix/java_api/android/test/suitebuilder/TestSuiteBuilder_FailedToCreateTests.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::suitebuilder::TestSuiteBuilder : public jni::object_base<"android/test/suitebuilder/TestSuiteBuilder",
	java::lang::Object>
{
public:

	using FailedToCreateTests = TestSuiteBuilder_FailedToCreateTests;

	static jni::ref<android::test::suitebuilder::TestSuiteBuilder> new_object(jni::ref<java::lang::Class> clazz) { return base_::new_object(clazz); }
	static jni::ref<android::test::suitebuilder::TestSuiteBuilder> new_object(jni::ref<java::lang::String> name, jni::ref<java::lang::ClassLoader> classLoader) { return base_::new_object(name, classLoader); }
	jni::ref<android::test::suitebuilder::TestSuiteBuilder> includePackages(jni::ref<jni::array<java::lang::String>> packageNames) { return call_method<"includePackages", jni::ref<android::test::suitebuilder::TestSuiteBuilder>>(packageNames); }
	jni::ref<android::test::suitebuilder::TestSuiteBuilder> excludePackages(jni::ref<jni::array<java::lang::String>> packageNames) { return call_method<"excludePackages", jni::ref<android::test::suitebuilder::TestSuiteBuilder>>(packageNames); }
	jni::ref<android::test::suitebuilder::TestSuiteBuilder> addRequirements(jni::ref<java::util::List> predicates) { return call_method<"addRequirements", jni::ref<android::test::suitebuilder::TestSuiteBuilder>>(predicates); }
	jni::ref<android::test::suitebuilder::TestSuiteBuilder> includeAllPackagesUnderHere() { return call_method<"includeAllPackagesUnderHere", jni::ref<android::test::suitebuilder::TestSuiteBuilder>>(); }
	jni::ref<android::test::suitebuilder::TestSuiteBuilder> named(jni::ref<java::lang::String> newSuiteName) { return call_method<"named", jni::ref<android::test::suitebuilder::TestSuiteBuilder>>(newSuiteName); }
	jni::ref<junit::framework::TestSuite> build() { return call_method<"build", jni::ref<junit::framework::TestSuite>>(); }
	jni::ref<android::test::suitebuilder::TestSuiteBuilder> addRequirements(jni::ref<jni::array<com::android::internal::util::Predicate>> predicates) { return call_method<"addRequirements", jni::ref<android::test::suitebuilder::TestSuiteBuilder>>(predicates); }

protected:

	TestSuiteBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_SUITEBUILDER_TESTSUITEBUILDER
