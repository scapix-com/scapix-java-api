// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_VIEWASSERTS_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_VIEWASSERTS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test { class ViewAsserts; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::ViewAsserts>
{
	static constexpr fixed_string class_name = "android/test/ViewAsserts";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_VIEWASSERTS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_VIEWASSERTS)
#define SCAPIX_JAVA_API_ANDROID_TEST_VIEWASSERTS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::ViewAsserts : public jni::object_base<"android/test/ViewAsserts",
	java::lang::Object>
{
public:

	static void assertOnScreen(jni::ref<android::view::View> origin, jni::ref<android::view::View> view) { return call_static_method<"assertOnScreen", void>(origin, view); }
	static void assertOffScreenBelow(jni::ref<android::view::View> origin, jni::ref<android::view::View> view) { return call_static_method<"assertOffScreenBelow", void>(origin, view); }
	static void assertOffScreenAbove(jni::ref<android::view::View> origin, jni::ref<android::view::View> view) { return call_static_method<"assertOffScreenAbove", void>(origin, view); }
	static void assertHasScreenCoordinates(jni::ref<android::view::View> origin, jni::ref<android::view::View> view, jint x, jint y) { return call_static_method<"assertHasScreenCoordinates", void>(origin, view, x, y); }
	static void assertBaselineAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second) { return call_static_method<"assertBaselineAligned", void>(first, second); }
	static void assertRightAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second) { return call_static_method<"assertRightAligned", void>(first, second); }
	static void assertRightAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second, jint margin) { return call_static_method<"assertRightAligned", void>(first, second, margin); }
	static void assertLeftAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second) { return call_static_method<"assertLeftAligned", void>(first, second); }
	static void assertLeftAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second, jint margin) { return call_static_method<"assertLeftAligned", void>(first, second, margin); }
	static void assertBottomAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second) { return call_static_method<"assertBottomAligned", void>(first, second); }
	static void assertBottomAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second, jint margin) { return call_static_method<"assertBottomAligned", void>(first, second, margin); }
	static void assertTopAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second) { return call_static_method<"assertTopAligned", void>(first, second); }
	static void assertTopAligned(jni::ref<android::view::View> first, jni::ref<android::view::View> second, jint margin) { return call_static_method<"assertTopAligned", void>(first, second, margin); }
	static void assertHorizontalCenterAligned(jni::ref<android::view::View> reference, jni::ref<android::view::View> test) { return call_static_method<"assertHorizontalCenterAligned", void>(reference, test); }
	static void assertVerticalCenterAligned(jni::ref<android::view::View> reference, jni::ref<android::view::View> test) { return call_static_method<"assertVerticalCenterAligned", void>(reference, test); }
	static void assertGroupIntegrity(jni::ref<android::view::ViewGroup> parent) { return call_static_method<"assertGroupIntegrity", void>(parent); }
	static void assertGroupContains(jni::ref<android::view::ViewGroup> parent, jni::ref<android::view::View> child) { return call_static_method<"assertGroupContains", void>(parent, child); }
	static void assertGroupNotContains(jni::ref<android::view::ViewGroup> parent, jni::ref<android::view::View> child) { return call_static_method<"assertGroupNotContains", void>(parent, child); }

protected:

	ViewAsserts(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_VIEWASSERTS
