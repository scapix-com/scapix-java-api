// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/content/ContentProvider.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_MOCK_MOCKCONTENTPROVIDER_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_MOCK_MOCKCONTENTPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test::mock { class MockContentProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::mock::MockContentProvider>
{
	static constexpr fixed_string class_name = "android/test/mock/MockContentProvider";
	using base_classes = std::tuple<scapix::java_api::android::content::ContentProvider>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_MOCK_MOCKCONTENTPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_MOCK_MOCKCONTENTPROVIDER)
#define SCAPIX_JAVA_API_ANDROID_TEST_MOCK_MOCKCONTENTPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentProviderResult.h>
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/pm/PathPermission.h>
#include <scapix/java_api/android/content/pm/ProviderInfo.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::mock::MockContentProvider : public jni::object_base<"android/test/mock/MockContentProvider",
	android::content::ContentProvider>
{
public:

	static jni::ref<android::test::mock::MockContentProvider> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::test::mock::MockContentProvider> new_object(jni::ref<android::content::Context> context, jni::ref<java::lang::String> readPermission, jni::ref<java::lang::String> writePermission, jni::ref<jni::array<android::content::pm::PathPermission>> pathPermissions) { return base_::new_object(context, readPermission, writePermission, pathPermissions); }
	jint delete_(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_method<"delete", jint>(uri, selection, selectionArgs); }
	jni::ref<java::lang::String> getType(jni::ref<android::net::Uri> uri) { return call_method<"getType", jni::ref<java::lang::String>>(uri); }
	jni::ref<android::net::Uri> insert(jni::ref<android::net::Uri> uri, jni::ref<android::content::ContentValues> values) { return call_method<"insert", jni::ref<android::net::Uri>>(uri, values); }
	jboolean onCreate() { return call_method<"onCreate", jboolean>(); }
	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> uri, jni::ref<jni::array<java::lang::String>> projection, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> sortOrder) { return call_method<"query", jni::ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder); }
	jint update(jni::ref<android::net::Uri> uri, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_method<"update", jint>(uri, values, selection, selectionArgs); }
	jint bulkInsert(jni::ref<android::net::Uri> uri, jni::ref<jni::array<android::content::ContentValues>> values) { return call_method<"bulkInsert", jint>(uri, values); }
	void attachInfo(jni::ref<android::content::Context> context, jni::ref<android::content::pm::ProviderInfo> info) { return call_method<"attachInfo", void>(context, info); }
	jni::ref<jni::array<android::content::ContentProviderResult>> applyBatch(jni::ref<java::util::ArrayList> operations) { return call_method<"applyBatch", jni::ref<jni::array<android::content::ContentProviderResult>>>(operations); }
	jni::ref<jni::array<java::lang::String>> getStreamTypes(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> mimeTypeFilter) { return call_method<"getStreamTypes", jni::ref<jni::array<java::lang::String>>>(url, mimeTypeFilter); }
	jni::ref<android::content::res::AssetFileDescriptor> openTypedAssetFile(jni::ref<android::net::Uri> url, jni::ref<java::lang::String> mimeType, jni::ref<android::os::Bundle> opts) { return call_method<"openTypedAssetFile", jni::ref<android::content::res::AssetFileDescriptor>>(url, mimeType, opts); }

protected:

	MockContentProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_MOCK_MOCKCONTENTPROVIDER
