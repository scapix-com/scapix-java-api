// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHDEVICEFILTER_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHDEVICEFILTER_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::companion { class BluetoothDeviceFilter_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::companion::BluetoothDeviceFilter_Builder>
{
	static constexpr fixed_string class_name = "android/companion/BluetoothDeviceFilter$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHDEVICEFILTER_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHDEVICEFILTER_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHDEVICEFILTER_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/companion/BluetoothDeviceFilter.h>
#include <scapix/java_api/android/os/ParcelUuid.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/regex/Pattern.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::companion::BluetoothDeviceFilter_Builder : public jni::object_base<"android/companion/BluetoothDeviceFilter$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::companion::BluetoothDeviceFilter_Builder> new_object() { return base_::new_object(); }
	jni::ref<android::companion::BluetoothDeviceFilter_Builder> setNamePattern(jni::ref<java::util::regex::Pattern> regex) { return call_method<"setNamePattern", jni::ref<android::companion::BluetoothDeviceFilter_Builder>>(regex); }
	jni::ref<android::companion::BluetoothDeviceFilter_Builder> setAddress(jni::ref<java::lang::String> address) { return call_method<"setAddress", jni::ref<android::companion::BluetoothDeviceFilter_Builder>>(address); }
	jni::ref<android::companion::BluetoothDeviceFilter_Builder> addServiceUuid(jni::ref<android::os::ParcelUuid> serviceUuid, jni::ref<android::os::ParcelUuid> serviceUuidMask) { return call_method<"addServiceUuid", jni::ref<android::companion::BluetoothDeviceFilter_Builder>>(serviceUuid, serviceUuidMask); }
	jni::ref<android::companion::BluetoothDeviceFilter> build() { return call_method<"build", jni::ref<android::companion::BluetoothDeviceFilter>>(); }

protected:

	BluetoothDeviceFilter_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_COMPANION_BLUETOOTHDEVICEFILTER_BUILDER
