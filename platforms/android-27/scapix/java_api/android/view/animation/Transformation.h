// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_TRANSFORMATION_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_TRANSFORMATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::animation { class Transformation; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::animation::Transformation>
{
	static constexpr fixed_string class_name = "android/view/animation/Transformation";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_TRANSFORMATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_TRANSFORMATION)
#define SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_TRANSFORMATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::animation::Transformation : public jni::object_base<"android/view/animation/Transformation",
	java::lang::Object>
{
public:

	static jint TYPE_ALPHA() { return get_static_field<"TYPE_ALPHA", jint>(); }
	static jint TYPE_BOTH() { return get_static_field<"TYPE_BOTH", jint>(); }
	static jint TYPE_IDENTITY() { return get_static_field<"TYPE_IDENTITY", jint>(); }
	static jint TYPE_MATRIX() { return get_static_field<"TYPE_MATRIX", jint>(); }

	static jni::ref<android::view::animation::Transformation> new_object() { return base_::new_object(); }
	void clear() { return call_method<"clear", void>(); }
	jint getTransformationType() { return call_method<"getTransformationType", jint>(); }
	void setTransformationType(jint transformationType) { return call_method<"setTransformationType", void>(transformationType); }
	void set(jni::ref<android::view::animation::Transformation> t) { return call_method<"set", void>(t); }
	void compose(jni::ref<android::view::animation::Transformation> t) { return call_method<"compose", void>(t); }
	jni::ref<android::graphics::Matrix> getMatrix() { return call_method<"getMatrix", jni::ref<android::graphics::Matrix>>(); }
	void setAlpha(jfloat alpha) { return call_method<"setAlpha", void>(alpha); }
	jfloat getAlpha() { return call_method<"getAlpha", jfloat>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toShortString() { return call_method<"toShortString", jni::ref<java::lang::String>>(); }

protected:

	Transformation(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_TRANSFORMATION
