// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_GRAVITY_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_GRAVITY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class Gravity; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::Gravity>
{
	static constexpr fixed_string class_name = "android/view/Gravity";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_GRAVITY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_GRAVITY)
#define SCAPIX_JAVA_API_ANDROID_VIEW_GRAVITY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Rect.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::Gravity : public jni::object_base<"android/view/Gravity",
	java::lang::Object>
{
public:

	static jint AXIS_CLIP() { return get_static_field<"AXIS_CLIP", jint>(); }
	static jint AXIS_PULL_AFTER() { return get_static_field<"AXIS_PULL_AFTER", jint>(); }
	static jint AXIS_PULL_BEFORE() { return get_static_field<"AXIS_PULL_BEFORE", jint>(); }
	static jint AXIS_SPECIFIED() { return get_static_field<"AXIS_SPECIFIED", jint>(); }
	static jint AXIS_X_SHIFT() { return get_static_field<"AXIS_X_SHIFT", jint>(); }
	static jint AXIS_Y_SHIFT() { return get_static_field<"AXIS_Y_SHIFT", jint>(); }
	static jint BOTTOM() { return get_static_field<"BOTTOM", jint>(); }
	static jint CENTER() { return get_static_field<"CENTER", jint>(); }
	static jint CENTER_HORIZONTAL() { return get_static_field<"CENTER_HORIZONTAL", jint>(); }
	static jint CENTER_VERTICAL() { return get_static_field<"CENTER_VERTICAL", jint>(); }
	static jint CLIP_HORIZONTAL() { return get_static_field<"CLIP_HORIZONTAL", jint>(); }
	static jint CLIP_VERTICAL() { return get_static_field<"CLIP_VERTICAL", jint>(); }
	static jint DISPLAY_CLIP_HORIZONTAL() { return get_static_field<"DISPLAY_CLIP_HORIZONTAL", jint>(); }
	static jint DISPLAY_CLIP_VERTICAL() { return get_static_field<"DISPLAY_CLIP_VERTICAL", jint>(); }
	static jint END() { return get_static_field<"END", jint>(); }
	static jint FILL() { return get_static_field<"FILL", jint>(); }
	static jint FILL_HORIZONTAL() { return get_static_field<"FILL_HORIZONTAL", jint>(); }
	static jint FILL_VERTICAL() { return get_static_field<"FILL_VERTICAL", jint>(); }
	static jint HORIZONTAL_GRAVITY_MASK() { return get_static_field<"HORIZONTAL_GRAVITY_MASK", jint>(); }
	static jint LEFT() { return get_static_field<"LEFT", jint>(); }
	static jint NO_GRAVITY() { return get_static_field<"NO_GRAVITY", jint>(); }
	static jint RELATIVE_HORIZONTAL_GRAVITY_MASK() { return get_static_field<"RELATIVE_HORIZONTAL_GRAVITY_MASK", jint>(); }
	static jint RELATIVE_LAYOUT_DIRECTION() { return get_static_field<"RELATIVE_LAYOUT_DIRECTION", jint>(); }
	static jint RIGHT() { return get_static_field<"RIGHT", jint>(); }
	static jint START() { return get_static_field<"START", jint>(); }
	static jint TOP() { return get_static_field<"TOP", jint>(); }
	static jint VERTICAL_GRAVITY_MASK() { return get_static_field<"VERTICAL_GRAVITY_MASK", jint>(); }

	static jni::ref<android::view::Gravity> new_object() { return base_::new_object(); }
	static void apply(jint gravity, jint w, jint h, jni::ref<android::graphics::Rect> container, jni::ref<android::graphics::Rect> outRect) { return call_static_method<"apply", void>(gravity, w, h, container, outRect); }
	static void apply(jint gravity, jint w, jint h, jni::ref<android::graphics::Rect> container, jni::ref<android::graphics::Rect> outRect, jint layoutDirection) { return call_static_method<"apply", void>(gravity, w, h, container, outRect, layoutDirection); }
	static void apply(jint gravity, jint w, jint h, jni::ref<android::graphics::Rect> container, jint xAdj, jint yAdj, jni::ref<android::graphics::Rect> outRect) { return call_static_method<"apply", void>(gravity, w, h, container, xAdj, yAdj, outRect); }
	static void apply(jint gravity, jint w, jint h, jni::ref<android::graphics::Rect> container, jint xAdj, jint yAdj, jni::ref<android::graphics::Rect> outRect, jint layoutDirection) { return call_static_method<"apply", void>(gravity, w, h, container, xAdj, yAdj, outRect, layoutDirection); }
	static void applyDisplay(jint gravity, jni::ref<android::graphics::Rect> display, jni::ref<android::graphics::Rect> inoutObj) { return call_static_method<"applyDisplay", void>(gravity, display, inoutObj); }
	static void applyDisplay(jint gravity, jni::ref<android::graphics::Rect> display, jni::ref<android::graphics::Rect> inoutObj, jint layoutDirection) { return call_static_method<"applyDisplay", void>(gravity, display, inoutObj, layoutDirection); }
	static jboolean isVertical(jint gravity) { return call_static_method<"isVertical", jboolean>(gravity); }
	static jboolean isHorizontal(jint gravity) { return call_static_method<"isHorizontal", jboolean>(gravity); }
	static jint getAbsoluteGravity(jint gravity, jint layoutDirection) { return call_static_method<"getAbsoluteGravity", jint>(gravity, layoutDirection); }

protected:

	Gravity(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_GRAVITY
