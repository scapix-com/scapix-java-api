// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class UrlQuerySanitizer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::UrlQuerySanitizer>
{
	static constexpr fixed_string class_name = "android/net/UrlQuerySanitizer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER)
#define SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/UrlQuerySanitizer_ValueSanitizer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/android/net/UrlQuerySanitizer_IllegalCharacterValueSanitizer.h>
#include <scapix/java_api/android/net/UrlQuerySanitizer_ParameterValuePair.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::UrlQuerySanitizer : public jni::object_base<"android/net/UrlQuerySanitizer",
	java::lang::Object>
{
public:

	using IllegalCharacterValueSanitizer = UrlQuerySanitizer_IllegalCharacterValueSanitizer;
	using ValueSanitizer = UrlQuerySanitizer_ValueSanitizer;
	using ParameterValuePair = UrlQuerySanitizer_ParameterValuePair;

	static jni::ref<android::net::UrlQuerySanitizer> new_object() { return base_::new_object(); }
	static jni::ref<android::net::UrlQuerySanitizer> new_object(jni::ref<java::lang::String> url) { return base_::new_object(url); }
	jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getUnregisteredParameterValueSanitizer() { return call_method<"getUnregisteredParameterValueSanitizer", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	void setUnregisteredParameterValueSanitizer(jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> sanitizer) { return call_method<"setUnregisteredParameterValueSanitizer", void>(sanitizer); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAllIllegal() { return call_static_method<"getAllIllegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAllButNulLegal() { return call_static_method<"getAllButNulLegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAllButWhitespaceLegal() { return call_static_method<"getAllButWhitespaceLegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getUrlLegal() { return call_static_method<"getUrlLegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getUrlAndSpaceLegal() { return call_static_method<"getUrlAndSpaceLegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAmpLegal() { return call_static_method<"getAmpLegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAmpAndSpaceLegal() { return call_static_method<"getAmpAndSpaceLegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getSpaceLegal() { return call_static_method<"getSpaceLegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	static jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getAllButNulAndAngleBracketsLegal() { return call_static_method<"getAllButNulAndAngleBracketsLegal", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(); }
	void parseUrl(jni::ref<java::lang::String> url) { return call_method<"parseUrl", void>(url); }
	void parseQuery(jni::ref<java::lang::String> query) { return call_method<"parseQuery", void>(query); }
	jni::ref<java::util::Set> getParameterSet() { return call_method<"getParameterSet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::List> getParameterList() { return call_method<"getParameterList", jni::ref<java::util::List>>(); }
	jboolean hasParameter(jni::ref<java::lang::String> parameter) { return call_method<"hasParameter", jboolean>(parameter); }
	jni::ref<java::lang::String> getValue(jni::ref<java::lang::String> parameter) { return call_method<"getValue", jni::ref<java::lang::String>>(parameter); }
	void registerParameter(jni::ref<java::lang::String> parameter, jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> valueSanitizer) { return call_method<"registerParameter", void>(parameter, valueSanitizer); }
	void registerParameters(jni::ref<jni::array<java::lang::String>> parameters, jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> valueSanitizer) { return call_method<"registerParameters", void>(parameters, valueSanitizer); }
	void setAllowUnregisteredParamaters(jboolean allowUnregisteredParamaters) { return call_method<"setAllowUnregisteredParamaters", void>(allowUnregisteredParamaters); }
	jboolean getAllowUnregisteredParamaters() { return call_method<"getAllowUnregisteredParamaters", jboolean>(); }
	void setPreferFirstRepeatedParameter(jboolean preferFirstRepeatedParameter) { return call_method<"setPreferFirstRepeatedParameter", void>(preferFirstRepeatedParameter); }
	jboolean getPreferFirstRepeatedParameter() { return call_method<"getPreferFirstRepeatedParameter", jboolean>(); }
	jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getValueSanitizer(jni::ref<java::lang::String> parameter) { return call_method<"getValueSanitizer", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(parameter); }
	jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer> getEffectiveValueSanitizer(jni::ref<java::lang::String> parameter) { return call_method<"getEffectiveValueSanitizer", jni::ref<android::net::UrlQuerySanitizer_ValueSanitizer>>(parameter); }
	jni::ref<java::lang::String> unescape(jni::ref<java::lang::String> string) { return call_method<"unescape", jni::ref<java::lang::String>>(string); }

protected:

	UrlQuerySanitizer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_URLQUERYSANITIZER
