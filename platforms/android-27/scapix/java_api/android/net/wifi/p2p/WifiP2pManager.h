// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi::p2p { class WifiP2pManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::p2p::WifiP2pManager>
{
	static constexpr fixed_string class_name = "android/net/wifi/p2p/WifiP2pManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PMANAGER)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pConfig.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_ActionListener.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_Channel.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_ChannelListener.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_ConnectionInfoListener.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_DnsSdServiceResponseListener.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_DnsSdTxtRecordListener.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_GroupInfoListener.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_PeerListListener.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_ServiceResponseListener.h>
#include <scapix/java_api/android/net/wifi/p2p/WifiP2pManager_UpnpServiceResponseListener.h>
#include <scapix/java_api/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.h>
#include <scapix/java_api/android/net/wifi/p2p/nsd/WifiP2pServiceRequest.h>
#include <scapix/java_api/android/os/Looper.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::p2p::WifiP2pManager : public jni::object_base<"android/net/wifi/p2p/WifiP2pManager",
	java::lang::Object>
{
public:

	using Channel = WifiP2pManager_Channel;
	using UpnpServiceResponseListener = WifiP2pManager_UpnpServiceResponseListener;
	using DnsSdTxtRecordListener = WifiP2pManager_DnsSdTxtRecordListener;
	using DnsSdServiceResponseListener = WifiP2pManager_DnsSdServiceResponseListener;
	using ServiceResponseListener = WifiP2pManager_ServiceResponseListener;
	using GroupInfoListener = WifiP2pManager_GroupInfoListener;
	using ConnectionInfoListener = WifiP2pManager_ConnectionInfoListener;
	using PeerListListener = WifiP2pManager_PeerListListener;
	using ActionListener = WifiP2pManager_ActionListener;
	using ChannelListener = WifiP2pManager_ChannelListener;

	static jint BUSY() { return get_static_field<"BUSY", jint>(); }
	static jint ERROR() { return get_static_field<"ERROR", jint>(); }
	static jni::ref<java::lang::String> EXTRA_DISCOVERY_STATE() { return get_static_field<"EXTRA_DISCOVERY_STATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_NETWORK_INFO() { return get_static_field<"EXTRA_NETWORK_INFO", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_P2P_DEVICE_LIST() { return get_static_field<"EXTRA_P2P_DEVICE_LIST", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_WIFI_P2P_DEVICE() { return get_static_field<"EXTRA_WIFI_P2P_DEVICE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_WIFI_P2P_GROUP() { return get_static_field<"EXTRA_WIFI_P2P_GROUP", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_WIFI_P2P_INFO() { return get_static_field<"EXTRA_WIFI_P2P_INFO", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_WIFI_STATE() { return get_static_field<"EXTRA_WIFI_STATE", jni::ref<java::lang::String>>(); }
	static jint NO_SERVICE_REQUESTS() { return get_static_field<"NO_SERVICE_REQUESTS", jint>(); }
	static jint P2P_UNSUPPORTED() { return get_static_field<"P2P_UNSUPPORTED", jint>(); }
	static jni::ref<java::lang::String> WIFI_P2P_CONNECTION_CHANGED_ACTION() { return get_static_field<"WIFI_P2P_CONNECTION_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_P2P_DISCOVERY_CHANGED_ACTION() { return get_static_field<"WIFI_P2P_DISCOVERY_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jint WIFI_P2P_DISCOVERY_STARTED() { return get_static_field<"WIFI_P2P_DISCOVERY_STARTED", jint>(); }
	static jint WIFI_P2P_DISCOVERY_STOPPED() { return get_static_field<"WIFI_P2P_DISCOVERY_STOPPED", jint>(); }
	static jni::ref<java::lang::String> WIFI_P2P_PEERS_CHANGED_ACTION() { return get_static_field<"WIFI_P2P_PEERS_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WIFI_P2P_STATE_CHANGED_ACTION() { return get_static_field<"WIFI_P2P_STATE_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jint WIFI_P2P_STATE_DISABLED() { return get_static_field<"WIFI_P2P_STATE_DISABLED", jint>(); }
	static jint WIFI_P2P_STATE_ENABLED() { return get_static_field<"WIFI_P2P_STATE_ENABLED", jint>(); }
	static jni::ref<java::lang::String> WIFI_P2P_THIS_DEVICE_CHANGED_ACTION() { return get_static_field<"WIFI_P2P_THIS_DEVICE_CHANGED_ACTION", jni::ref<java::lang::String>>(); }

	jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> initialize(jni::ref<android::content::Context> srcContext, jni::ref<android::os::Looper> srcLooper, jni::ref<android::net::wifi::p2p::WifiP2pManager_ChannelListener> listener) { return call_method<"initialize", jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel>>(srcContext, srcLooper, listener); }
	void discoverPeers(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"discoverPeers", void>(c, listener); }
	void stopPeerDiscovery(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"stopPeerDiscovery", void>(c, listener); }
	void connect(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pConfig> config, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"connect", void>(c, config, listener); }
	void cancelConnect(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"cancelConnect", void>(c, listener); }
	void createGroup(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"createGroup", void>(c, listener); }
	void removeGroup(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"removeGroup", void>(c, listener); }
	void addLocalService(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::nsd::WifiP2pServiceInfo> servInfo, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"addLocalService", void>(c, servInfo, listener); }
	void removeLocalService(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::nsd::WifiP2pServiceInfo> servInfo, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"removeLocalService", void>(c, servInfo, listener); }
	void clearLocalServices(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"clearLocalServices", void>(c, listener); }
	void setServiceResponseListener(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ServiceResponseListener> listener) { return call_method<"setServiceResponseListener", void>(c, listener); }
	void setDnsSdResponseListeners(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_DnsSdServiceResponseListener> servListener, jni::ref<android::net::wifi::p2p::WifiP2pManager_DnsSdTxtRecordListener> txtListener) { return call_method<"setDnsSdResponseListeners", void>(c, servListener, txtListener); }
	void setUpnpServiceResponseListener(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_UpnpServiceResponseListener> listener) { return call_method<"setUpnpServiceResponseListener", void>(c, listener); }
	void discoverServices(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"discoverServices", void>(c, listener); }
	void addServiceRequest(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::nsd::WifiP2pServiceRequest> req, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"addServiceRequest", void>(c, req, listener); }
	void removeServiceRequest(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::nsd::WifiP2pServiceRequest> req, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"removeServiceRequest", void>(c, req, listener); }
	void clearServiceRequests(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ActionListener> listener) { return call_method<"clearServiceRequests", void>(c, listener); }
	void requestPeers(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_PeerListListener> listener) { return call_method<"requestPeers", void>(c, listener); }
	void requestConnectionInfo(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_ConnectionInfoListener> listener) { return call_method<"requestConnectionInfo", void>(c, listener); }
	void requestGroupInfo(jni::ref<android::net::wifi::p2p::WifiP2pManager_Channel> c, jni::ref<android::net::wifi::p2p::WifiP2pManager_GroupInfoListener> listener) { return call_method<"requestGroupInfo", void>(c, listener); }

protected:

	WifiP2pManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PMANAGER
