// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_NINEPATCH_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_NINEPATCH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class NinePatch; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::NinePatch>
{
	static constexpr fixed_string class_name = "android/graphics/NinePatch";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_NINEPATCH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_NINEPATCH)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_NINEPATCH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/RectF.h>
#include <scapix/java_api/android/graphics/Region.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::NinePatch : public jni::object_base<"android/graphics/NinePatch",
	java::lang::Object>
{
public:

	static jni::ref<android::graphics::NinePatch> new_object(jni::ref<android::graphics::Bitmap> bitmap, jni::ref<jni::array<jbyte>> chunk) { return base_::new_object(bitmap, chunk); }
	static jni::ref<android::graphics::NinePatch> new_object(jni::ref<android::graphics::Bitmap> bitmap, jni::ref<jni::array<jbyte>> chunk, jni::ref<java::lang::String> srcName) { return base_::new_object(bitmap, chunk, srcName); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<android::graphics::Paint> getPaint() { return call_method<"getPaint", jni::ref<android::graphics::Paint>>(); }
	void setPaint(jni::ref<android::graphics::Paint> p) { return call_method<"setPaint", void>(p); }
	jni::ref<android::graphics::Bitmap> getBitmap() { return call_method<"getBitmap", jni::ref<android::graphics::Bitmap>>(); }
	void draw(jni::ref<android::graphics::Canvas> canvas, jni::ref<android::graphics::RectF> location) { return call_method<"draw", void>(canvas, location); }
	void draw(jni::ref<android::graphics::Canvas> canvas, jni::ref<android::graphics::Rect> location) { return call_method<"draw", void>(canvas, location); }
	void draw(jni::ref<android::graphics::Canvas> canvas, jni::ref<android::graphics::Rect> location, jni::ref<android::graphics::Paint> paint) { return call_method<"draw", void>(canvas, location, paint); }
	jint getDensity() { return call_method<"getDensity", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jboolean hasAlpha() { return call_method<"hasAlpha", jboolean>(); }
	jni::ref<android::graphics::Region> getTransparentRegion(jni::ref<android::graphics::Rect> bounds) { return call_method<"getTransparentRegion", jni::ref<android::graphics::Region>>(bounds); }
	static jboolean isNinePatchChunk(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"isNinePatchChunk", jboolean>(p1); }

protected:

	NinePatch(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_NINEPATCH
