// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/DrawableContainer.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/android/graphics/drawable/Animatable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics::drawable { class AnimationDrawable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::drawable::AnimationDrawable>
{
	static constexpr fixed_string class_name = "android/graphics/drawable/AnimationDrawable";
	using base_classes = std::tuple<scapix::java_api::android::graphics::drawable::DrawableContainer, scapix::java_api::java::lang::Runnable, scapix::java_api::android::graphics::drawable::Animatable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::drawable::AnimationDrawable : public jni::object_base<"android/graphics/drawable/AnimationDrawable",
	android::graphics::drawable::DrawableContainer,
	java::lang::Runnable,
	android::graphics::drawable::Animatable>
{
public:

	static jni::ref<android::graphics::drawable::AnimationDrawable> new_object() { return base_::new_object(); }
	jboolean setVisible(jboolean visible, jboolean restart) { return call_method<"setVisible", jboolean>(visible, restart); }
	void start() { return call_method<"start", void>(); }
	void stop() { return call_method<"stop", void>(); }
	jboolean isRunning() { return call_method<"isRunning", jboolean>(); }
	void run() { return call_method<"run", void>(); }
	void unscheduleSelf(jni::ref<java::lang::Runnable> what) { return call_method<"unscheduleSelf", void>(what); }
	jint getNumberOfFrames() { return call_method<"getNumberOfFrames", jint>(); }
	jni::ref<android::graphics::drawable::Drawable> getFrame(jint index) { return call_method<"getFrame", jni::ref<android::graphics::drawable::Drawable>>(index); }
	jint getDuration(jint i) { return call_method<"getDuration", jint>(i); }
	jboolean isOneShot() { return call_method<"isOneShot", jboolean>(); }
	void setOneShot(jboolean oneShot) { return call_method<"setOneShot", void>(oneShot); }
	void addFrame(jni::ref<android::graphics::drawable::Drawable> frame, jint duration) { return call_method<"addFrame", void>(frame, duration); }
	void inflate(jni::ref<android::content::res::Resources> r, jni::ref<org::xmlpull::v1::XmlPullParser> parser, jni::ref<android::util::AttributeSet> attrs, jni::ref<android::content::res::Resources_Theme> theme) { return call_method<"inflate", void>(r, parser, attrs, theme); }
	jni::ref<android::graphics::drawable::Drawable> mutate() { return call_method<"mutate", jni::ref<android::graphics::drawable::Drawable>>(); }

protected:

	AnimationDrawable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_ANIMATIONDRAWABLE
