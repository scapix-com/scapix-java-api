// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_RECTF_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_RECTF_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class RectF; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::RectF>
{
	static constexpr fixed_string class_name = "android/graphics/RectF";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_RECTF_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_RECTF)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_RECTF

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::RectF : public jni::object_base<"android/graphics/RectF",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	jfloat bottom() { return get_field<"bottom", jfloat>(); }
	void bottom(jfloat v) { set_field<"bottom", jfloat>(v); }
	jfloat left() { return get_field<"left", jfloat>(); }
	void left(jfloat v) { set_field<"left", jfloat>(v); }
	jfloat right() { return get_field<"right", jfloat>(); }
	void right(jfloat v) { set_field<"right", jfloat>(v); }
	jfloat top() { return get_field<"top", jfloat>(); }
	void top(jfloat v) { set_field<"top", jfloat>(v); }

	static jni::ref<android::graphics::RectF> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::RectF> new_object(jfloat left, jfloat top, jfloat right, jfloat bottom) { return base_::new_object(left, top, right, bottom); }
	static jni::ref<android::graphics::RectF> new_object(jni::ref<android::graphics::RectF> r) { return base_::new_object(r); }
	static jni::ref<android::graphics::RectF> new_object(jni::ref<android::graphics::Rect> r) { return base_::new_object(r); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toShortString() { return call_method<"toShortString", jni::ref<java::lang::String>>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jfloat width() { return call_method<"width", jfloat>(); }
	jfloat height() { return call_method<"height", jfloat>(); }
	jfloat centerX() { return call_method<"centerX", jfloat>(); }
	jfloat centerY() { return call_method<"centerY", jfloat>(); }
	void setEmpty() { return call_method<"setEmpty", void>(); }
	void set(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<"set", void>(left, top, right, bottom); }
	void set(jni::ref<android::graphics::RectF> src) { return call_method<"set", void>(src); }
	void set(jni::ref<android::graphics::Rect> src) { return call_method<"set", void>(src); }
	void offset(jfloat dx, jfloat dy) { return call_method<"offset", void>(dx, dy); }
	void offsetTo(jfloat newLeft, jfloat newTop) { return call_method<"offsetTo", void>(newLeft, newTop); }
	void inset(jfloat dx, jfloat dy) { return call_method<"inset", void>(dx, dy); }
	jboolean contains(jfloat x, jfloat y) { return call_method<"contains", jboolean>(x, y); }
	jboolean contains(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<"contains", jboolean>(left, top, right, bottom); }
	jboolean contains(jni::ref<android::graphics::RectF> r) { return call_method<"contains", jboolean>(r); }
	jboolean intersect(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<"intersect", jboolean>(left, top, right, bottom); }
	jboolean intersect(jni::ref<android::graphics::RectF> r) { return call_method<"intersect", jboolean>(r); }
	jboolean setIntersect(jni::ref<android::graphics::RectF> a, jni::ref<android::graphics::RectF> b) { return call_method<"setIntersect", jboolean>(a, b); }
	jboolean intersects(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<"intersects", jboolean>(left, top, right, bottom); }
	static jboolean intersects(jni::ref<android::graphics::RectF> a, jni::ref<android::graphics::RectF> b) { return call_static_method<"intersects", jboolean>(a, b); }
	void round(jni::ref<android::graphics::Rect> dst) { return call_method<"round", void>(dst); }
	void roundOut(jni::ref<android::graphics::Rect> dst) { return call_method<"roundOut", void>(dst); }
	void union_(jfloat left, jfloat top, jfloat right, jfloat bottom) { return call_method<"union", void>(left, top, right, bottom); }
	void union_(jni::ref<android::graphics::RectF> r) { return call_method<"union", void>(r); }
	void union_(jfloat x, jfloat y) { return call_method<"union", void>(x, y); }
	void sort() { return call_method<"sort", void>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	void readFromParcel(jni::ref<android::os::Parcel> in) { return call_method<"readFromParcel", void>(in); }

protected:

	RectF(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_RECTF
