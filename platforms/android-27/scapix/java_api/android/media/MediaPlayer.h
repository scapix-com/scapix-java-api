// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/media/VolumeAutomation.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaPlayer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaPlayer>
{
	static constexpr fixed_string class_name = "android/media/MediaPlayer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::media::VolumeAutomation>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/media/MediaDataSource.h>
#include <scapix/java_api/android/media/MediaDrm_KeyRequest.h>
#include <scapix/java_api/android/media/MediaPlayer_DrmInfo.h>
#include <scapix/java_api/android/media/MediaPlayer_OnBufferingUpdateListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnCompletionListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnDrmConfigHelper.h>
#include <scapix/java_api/android/media/MediaPlayer_OnDrmInfoListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnDrmPreparedListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnErrorListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnInfoListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnPreparedListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnSeekCompleteListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnTimedMetaDataAvailableListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnTimedTextListener.h>
#include <scapix/java_api/android/media/MediaPlayer_OnVideoSizeChangedListener.h>
#include <scapix/java_api/android/media/MediaPlayer_TrackInfo.h>
#include <scapix/java_api/android/media/MediaTimestamp.h>
#include <scapix/java_api/android/media/PlaybackParams.h>
#include <scapix/java_api/android/media/SyncParams.h>
#include <scapix/java_api/android/media/VolumeShaper.h>
#include <scapix/java_api/android/media/VolumeShaper_Configuration.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/android/view/SurfaceHolder.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/UUID.h>
#include <scapix/java_api/android/media/MediaPlayer_MetricsConstants.h>
#include <scapix/java_api/android/media/MediaPlayer_ProvisioningServerErrorException.h>
#include <scapix/java_api/android/media/MediaPlayer_ProvisioningNetworkErrorException.h>
#include <scapix/java_api/android/media/MediaPlayer_NoDrmSchemeException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaPlayer : public jni::object_base<"android/media/MediaPlayer",
	java::lang::Object,
	android::media::VolumeAutomation>
{
public:

	using MetricsConstants = MediaPlayer_MetricsConstants;
	using ProvisioningServerErrorException = MediaPlayer_ProvisioningServerErrorException;
	using ProvisioningNetworkErrorException = MediaPlayer_ProvisioningNetworkErrorException;
	using NoDrmSchemeException = MediaPlayer_NoDrmSchemeException;
	using DrmInfo = MediaPlayer_DrmInfo;
	using OnDrmPreparedListener = MediaPlayer_OnDrmPreparedListener;
	using OnDrmInfoListener = MediaPlayer_OnDrmInfoListener;
	using OnDrmConfigHelper = MediaPlayer_OnDrmConfigHelper;
	using OnInfoListener = MediaPlayer_OnInfoListener;
	using OnErrorListener = MediaPlayer_OnErrorListener;
	using OnTimedMetaDataAvailableListener = MediaPlayer_OnTimedMetaDataAvailableListener;
	using OnTimedTextListener = MediaPlayer_OnTimedTextListener;
	using OnVideoSizeChangedListener = MediaPlayer_OnVideoSizeChangedListener;
	using OnSeekCompleteListener = MediaPlayer_OnSeekCompleteListener;
	using OnBufferingUpdateListener = MediaPlayer_OnBufferingUpdateListener;
	using OnCompletionListener = MediaPlayer_OnCompletionListener;
	using OnPreparedListener = MediaPlayer_OnPreparedListener;
	using TrackInfo = MediaPlayer_TrackInfo;

	static jint MEDIA_ERROR_IO() { return get_static_field<"MEDIA_ERROR_IO", jint>(); }
	static jint MEDIA_ERROR_MALFORMED() { return get_static_field<"MEDIA_ERROR_MALFORMED", jint>(); }
	static jint MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK() { return get_static_field<"MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK", jint>(); }
	static jint MEDIA_ERROR_SERVER_DIED() { return get_static_field<"MEDIA_ERROR_SERVER_DIED", jint>(); }
	static jint MEDIA_ERROR_TIMED_OUT() { return get_static_field<"MEDIA_ERROR_TIMED_OUT", jint>(); }
	static jint MEDIA_ERROR_UNKNOWN() { return get_static_field<"MEDIA_ERROR_UNKNOWN", jint>(); }
	static jint MEDIA_ERROR_UNSUPPORTED() { return get_static_field<"MEDIA_ERROR_UNSUPPORTED", jint>(); }
	static jint MEDIA_INFO_AUDIO_NOT_PLAYING() { return get_static_field<"MEDIA_INFO_AUDIO_NOT_PLAYING", jint>(); }
	static jint MEDIA_INFO_BAD_INTERLEAVING() { return get_static_field<"MEDIA_INFO_BAD_INTERLEAVING", jint>(); }
	static jint MEDIA_INFO_BUFFERING_END() { return get_static_field<"MEDIA_INFO_BUFFERING_END", jint>(); }
	static jint MEDIA_INFO_BUFFERING_START() { return get_static_field<"MEDIA_INFO_BUFFERING_START", jint>(); }
	static jint MEDIA_INFO_METADATA_UPDATE() { return get_static_field<"MEDIA_INFO_METADATA_UPDATE", jint>(); }
	static jint MEDIA_INFO_NOT_SEEKABLE() { return get_static_field<"MEDIA_INFO_NOT_SEEKABLE", jint>(); }
	static jint MEDIA_INFO_SUBTITLE_TIMED_OUT() { return get_static_field<"MEDIA_INFO_SUBTITLE_TIMED_OUT", jint>(); }
	static jint MEDIA_INFO_UNKNOWN() { return get_static_field<"MEDIA_INFO_UNKNOWN", jint>(); }
	static jint MEDIA_INFO_UNSUPPORTED_SUBTITLE() { return get_static_field<"MEDIA_INFO_UNSUPPORTED_SUBTITLE", jint>(); }
	static jint MEDIA_INFO_VIDEO_NOT_PLAYING() { return get_static_field<"MEDIA_INFO_VIDEO_NOT_PLAYING", jint>(); }
	static jint MEDIA_INFO_VIDEO_RENDERING_START() { return get_static_field<"MEDIA_INFO_VIDEO_RENDERING_START", jint>(); }
	static jint MEDIA_INFO_VIDEO_TRACK_LAGGING() { return get_static_field<"MEDIA_INFO_VIDEO_TRACK_LAGGING", jint>(); }
	static jni::ref<java::lang::String> MEDIA_MIMETYPE_TEXT_SUBRIP() { return get_static_field<"MEDIA_MIMETYPE_TEXT_SUBRIP", jni::ref<java::lang::String>>(); }
	static jint PREPARE_DRM_STATUS_PREPARATION_ERROR() { return get_static_field<"PREPARE_DRM_STATUS_PREPARATION_ERROR", jint>(); }
	static jint PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR() { return get_static_field<"PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR", jint>(); }
	static jint PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR() { return get_static_field<"PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR", jint>(); }
	static jint PREPARE_DRM_STATUS_SUCCESS() { return get_static_field<"PREPARE_DRM_STATUS_SUCCESS", jint>(); }
	static jint SEEK_CLOSEST() { return get_static_field<"SEEK_CLOSEST", jint>(); }
	static jint SEEK_CLOSEST_SYNC() { return get_static_field<"SEEK_CLOSEST_SYNC", jint>(); }
	static jint SEEK_NEXT_SYNC() { return get_static_field<"SEEK_NEXT_SYNC", jint>(); }
	static jint SEEK_PREVIOUS_SYNC() { return get_static_field<"SEEK_PREVIOUS_SYNC", jint>(); }
	static jint VIDEO_SCALING_MODE_SCALE_TO_FIT() { return get_static_field<"VIDEO_SCALING_MODE_SCALE_TO_FIT", jint>(); }
	static jint VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING() { return get_static_field<"VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING", jint>(); }

	static jni::ref<android::media::MediaPlayer> new_object() { return base_::new_object(); }
	void setDisplay(jni::ref<android::view::SurfaceHolder> sh) { return call_method<"setDisplay", void>(sh); }
	void setSurface(jni::ref<android::view::Surface> surface) { return call_method<"setSurface", void>(surface); }
	void setVideoScalingMode(jint mode) { return call_method<"setVideoScalingMode", void>(mode); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, uri); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<android::view::SurfaceHolder> holder) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, uri, holder); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<android::view::SurfaceHolder> holder, jni::ref<android::media::AudioAttributes> audioAttributes, jint audioSessionId) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, uri, holder, audioAttributes, audioSessionId); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jint resid) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, resid); }
	static jni::ref<android::media::MediaPlayer> create(jni::ref<android::content::Context> context, jint resid, jni::ref<android::media::AudioAttributes> audioAttributes, jint audioSessionId) { return call_static_method<"create", jni::ref<android::media::MediaPlayer>>(context, resid, audioAttributes, audioSessionId); }
	void setDataSource(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri) { return call_method<"setDataSource", void>(context, uri); }
	void setDataSource(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<java::util::Map> headers, jni::ref<java::util::List> cookies) { return call_method<"setDataSource", void>(context, uri, headers, cookies); }
	void setDataSource(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<java::util::Map> headers) { return call_method<"setDataSource", void>(context, uri, headers); }
	void setDataSource(jni::ref<java::lang::String> path) { return call_method<"setDataSource", void>(path); }
	void setDataSource(jni::ref<android::content::res::AssetFileDescriptor> afd) { return call_method<"setDataSource", void>(afd); }
	void setDataSource(jni::ref<java::io::FileDescriptor> fd) { return call_method<"setDataSource", void>(fd); }
	void setDataSource(jni::ref<java::io::FileDescriptor> fd, jlong offset, jlong p3) { return call_method<"setDataSource", void>(fd, offset, p3); }
	void setDataSource(jni::ref<android::media::MediaDataSource> dataSource) { return call_method<"setDataSource", void>(dataSource); }
	void prepare() { return call_method<"prepare", void>(); }
	void prepareAsync() { return call_method<"prepareAsync", void>(); }
	void start() { return call_method<"start", void>(); }
	void stop() { return call_method<"stop", void>(); }
	void pause() { return call_method<"pause", void>(); }
	jni::ref<android::media::VolumeShaper> createVolumeShaper(jni::ref<android::media::VolumeShaper_Configuration> configuration) { return call_method<"createVolumeShaper", jni::ref<android::media::VolumeShaper>>(configuration); }
	void setWakeMode(jni::ref<android::content::Context> context, jint mode) { return call_method<"setWakeMode", void>(context, mode); }
	void setScreenOnWhilePlaying(jboolean screenOn) { return call_method<"setScreenOnWhilePlaying", void>(screenOn); }
	jint getVideoWidth() { return call_method<"getVideoWidth", jint>(); }
	jint getVideoHeight() { return call_method<"getVideoHeight", jint>(); }
	jni::ref<android::os::PersistableBundle> getMetrics() { return call_method<"getMetrics", jni::ref<android::os::PersistableBundle>>(); }
	jboolean isPlaying() { return call_method<"isPlaying", jboolean>(); }
	void setPlaybackParams(jni::ref<android::media::PlaybackParams> p1) { return call_method<"setPlaybackParams", void>(p1); }
	jni::ref<android::media::PlaybackParams> getPlaybackParams() { return call_method<"getPlaybackParams", jni::ref<android::media::PlaybackParams>>(); }
	void setSyncParams(jni::ref<android::media::SyncParams> p1) { return call_method<"setSyncParams", void>(p1); }
	jni::ref<android::media::SyncParams> getSyncParams() { return call_method<"getSyncParams", jni::ref<android::media::SyncParams>>(); }
	void seekTo(jlong msec, jint p2) { return call_method<"seekTo", void>(msec, p2); }
	void seekTo(jint msec) { return call_method<"seekTo", void>(msec); }
	jni::ref<android::media::MediaTimestamp> getTimestamp() { return call_method<"getTimestamp", jni::ref<android::media::MediaTimestamp>>(); }
	jint getCurrentPosition() { return call_method<"getCurrentPosition", jint>(); }
	jint getDuration() { return call_method<"getDuration", jint>(); }
	void setNextMediaPlayer(jni::ref<android::media::MediaPlayer> p1) { return call_method<"setNextMediaPlayer", void>(p1); }
	void release() { return call_method<"release", void>(); }
	void reset() { return call_method<"reset", void>(); }
	void setAudioStreamType(jint streamtype) { return call_method<"setAudioStreamType", void>(streamtype); }
	void setAudioAttributes(jni::ref<android::media::AudioAttributes> attributes) { return call_method<"setAudioAttributes", void>(attributes); }
	void setLooping(jboolean p1) { return call_method<"setLooping", void>(p1); }
	jboolean isLooping() { return call_method<"isLooping", jboolean>(); }
	void setVolume(jfloat leftVolume, jfloat rightVolume) { return call_method<"setVolume", void>(leftVolume, rightVolume); }
	void setAudioSessionId(jint p1) { return call_method<"setAudioSessionId", void>(p1); }
	jint getAudioSessionId() { return call_method<"getAudioSessionId", jint>(); }
	void attachAuxEffect(jint p1) { return call_method<"attachAuxEffect", void>(p1); }
	void setAuxEffectSendLevel(jfloat level) { return call_method<"setAuxEffectSendLevel", void>(level); }
	jni::ref<jni::array<android::media::MediaPlayer_TrackInfo>> getTrackInfo() { return call_method<"getTrackInfo", jni::ref<jni::array<android::media::MediaPlayer_TrackInfo>>>(); }
	void addTimedTextSource(jni::ref<java::lang::String> path, jni::ref<java::lang::String> mimeType) { return call_method<"addTimedTextSource", void>(path, mimeType); }
	void addTimedTextSource(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeType) { return call_method<"addTimedTextSource", void>(context, uri, mimeType); }
	void addTimedTextSource(jni::ref<java::io::FileDescriptor> fd, jni::ref<java::lang::String> mimeType) { return call_method<"addTimedTextSource", void>(fd, mimeType); }
	void addTimedTextSource(jni::ref<java::io::FileDescriptor> fd, jlong offset, jlong p3, jni::ref<java::lang::String> length) { return call_method<"addTimedTextSource", void>(fd, offset, p3, length); }
	jint getSelectedTrack(jint trackType) { return call_method<"getSelectedTrack", jint>(trackType); }
	void selectTrack(jint index) { return call_method<"selectTrack", void>(index); }
	void deselectTrack(jint index) { return call_method<"deselectTrack", void>(index); }
	void setOnPreparedListener(jni::ref<android::media::MediaPlayer_OnPreparedListener> listener) { return call_method<"setOnPreparedListener", void>(listener); }
	void setOnCompletionListener(jni::ref<android::media::MediaPlayer_OnCompletionListener> listener) { return call_method<"setOnCompletionListener", void>(listener); }
	void setOnBufferingUpdateListener(jni::ref<android::media::MediaPlayer_OnBufferingUpdateListener> listener) { return call_method<"setOnBufferingUpdateListener", void>(listener); }
	void setOnSeekCompleteListener(jni::ref<android::media::MediaPlayer_OnSeekCompleteListener> listener) { return call_method<"setOnSeekCompleteListener", void>(listener); }
	void setOnVideoSizeChangedListener(jni::ref<android::media::MediaPlayer_OnVideoSizeChangedListener> listener) { return call_method<"setOnVideoSizeChangedListener", void>(listener); }
	void setOnTimedTextListener(jni::ref<android::media::MediaPlayer_OnTimedTextListener> listener) { return call_method<"setOnTimedTextListener", void>(listener); }
	void setOnTimedMetaDataAvailableListener(jni::ref<android::media::MediaPlayer_OnTimedMetaDataAvailableListener> listener) { return call_method<"setOnTimedMetaDataAvailableListener", void>(listener); }
	void setOnErrorListener(jni::ref<android::media::MediaPlayer_OnErrorListener> listener) { return call_method<"setOnErrorListener", void>(listener); }
	void setOnInfoListener(jni::ref<android::media::MediaPlayer_OnInfoListener> listener) { return call_method<"setOnInfoListener", void>(listener); }
	void setOnDrmConfigHelper(jni::ref<android::media::MediaPlayer_OnDrmConfigHelper> listener) { return call_method<"setOnDrmConfigHelper", void>(listener); }
	void setOnDrmInfoListener(jni::ref<android::media::MediaPlayer_OnDrmInfoListener> listener) { return call_method<"setOnDrmInfoListener", void>(listener); }
	void setOnDrmInfoListener(jni::ref<android::media::MediaPlayer_OnDrmInfoListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"setOnDrmInfoListener", void>(listener, handler); }
	void setOnDrmPreparedListener(jni::ref<android::media::MediaPlayer_OnDrmPreparedListener> listener) { return call_method<"setOnDrmPreparedListener", void>(listener); }
	void setOnDrmPreparedListener(jni::ref<android::media::MediaPlayer_OnDrmPreparedListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"setOnDrmPreparedListener", void>(listener, handler); }
	jni::ref<android::media::MediaPlayer_DrmInfo> getDrmInfo() { return call_method<"getDrmInfo", jni::ref<android::media::MediaPlayer_DrmInfo>>(); }
	void prepareDrm(jni::ref<java::util::UUID> uuid) { return call_method<"prepareDrm", void>(uuid); }
	void releaseDrm() { return call_method<"releaseDrm", void>(); }
	jni::ref<android::media::MediaDrm_KeyRequest> getKeyRequest(jni::ref<jni::array<jbyte>> keySetId, jni::ref<jni::array<jbyte>> initData, jni::ref<java::lang::String> mimeType, jint keyType, jni::ref<java::util::Map> optionalParameters) { return call_method<"getKeyRequest", jni::ref<android::media::MediaDrm_KeyRequest>>(keySetId, initData, mimeType, keyType, optionalParameters); }
	jni::ref<jni::array<jbyte>> provideKeyResponse(jni::ref<jni::array<jbyte>> keySetId, jni::ref<jni::array<jbyte>> response) { return call_method<"provideKeyResponse", jni::ref<jni::array<jbyte>>>(keySetId, response); }
	void restoreKeys(jni::ref<jni::array<jbyte>> keySetId) { return call_method<"restoreKeys", void>(keySetId); }
	jni::ref<java::lang::String> getDrmPropertyString(jni::ref<java::lang::String> propertyName) { return call_method<"getDrmPropertyString", jni::ref<java::lang::String>>(propertyName); }
	void setDrmPropertyString(jni::ref<java::lang::String> propertyName, jni::ref<java::lang::String> value) { return call_method<"setDrmPropertyString", void>(propertyName, value); }

protected:

	MediaPlayer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPLAYER
