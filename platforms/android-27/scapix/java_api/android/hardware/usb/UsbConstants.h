// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBCONSTANTS_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBCONSTANTS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::usb { class UsbConstants; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::usb::UsbConstants>
{
	static constexpr fixed_string class_name = "android/hardware/usb/UsbConstants";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBCONSTANTS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBCONSTANTS)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBCONSTANTS

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::usb::UsbConstants : public jni::object_base<"android/hardware/usb/UsbConstants",
	java::lang::Object>
{
public:

	static jint USB_CLASS_APP_SPEC() { return get_static_field<"USB_CLASS_APP_SPEC", jint>(); }
	static jint USB_CLASS_AUDIO() { return get_static_field<"USB_CLASS_AUDIO", jint>(); }
	static jint USB_CLASS_CDC_DATA() { return get_static_field<"USB_CLASS_CDC_DATA", jint>(); }
	static jint USB_CLASS_COMM() { return get_static_field<"USB_CLASS_COMM", jint>(); }
	static jint USB_CLASS_CONTENT_SEC() { return get_static_field<"USB_CLASS_CONTENT_SEC", jint>(); }
	static jint USB_CLASS_CSCID() { return get_static_field<"USB_CLASS_CSCID", jint>(); }
	static jint USB_CLASS_HID() { return get_static_field<"USB_CLASS_HID", jint>(); }
	static jint USB_CLASS_HUB() { return get_static_field<"USB_CLASS_HUB", jint>(); }
	static jint USB_CLASS_MASS_STORAGE() { return get_static_field<"USB_CLASS_MASS_STORAGE", jint>(); }
	static jint USB_CLASS_MISC() { return get_static_field<"USB_CLASS_MISC", jint>(); }
	static jint USB_CLASS_PER_INTERFACE() { return get_static_field<"USB_CLASS_PER_INTERFACE", jint>(); }
	static jint USB_CLASS_PHYSICA() { return get_static_field<"USB_CLASS_PHYSICA", jint>(); }
	static jint USB_CLASS_PRINTER() { return get_static_field<"USB_CLASS_PRINTER", jint>(); }
	static jint USB_CLASS_STILL_IMAGE() { return get_static_field<"USB_CLASS_STILL_IMAGE", jint>(); }
	static jint USB_CLASS_VENDOR_SPEC() { return get_static_field<"USB_CLASS_VENDOR_SPEC", jint>(); }
	static jint USB_CLASS_VIDEO() { return get_static_field<"USB_CLASS_VIDEO", jint>(); }
	static jint USB_CLASS_WIRELESS_CONTROLLER() { return get_static_field<"USB_CLASS_WIRELESS_CONTROLLER", jint>(); }
	static jint USB_DIR_IN() { return get_static_field<"USB_DIR_IN", jint>(); }
	static jint USB_DIR_OUT() { return get_static_field<"USB_DIR_OUT", jint>(); }
	static jint USB_ENDPOINT_DIR_MASK() { return get_static_field<"USB_ENDPOINT_DIR_MASK", jint>(); }
	static jint USB_ENDPOINT_NUMBER_MASK() { return get_static_field<"USB_ENDPOINT_NUMBER_MASK", jint>(); }
	static jint USB_ENDPOINT_XFERTYPE_MASK() { return get_static_field<"USB_ENDPOINT_XFERTYPE_MASK", jint>(); }
	static jint USB_ENDPOINT_XFER_BULK() { return get_static_field<"USB_ENDPOINT_XFER_BULK", jint>(); }
	static jint USB_ENDPOINT_XFER_CONTROL() { return get_static_field<"USB_ENDPOINT_XFER_CONTROL", jint>(); }
	static jint USB_ENDPOINT_XFER_INT() { return get_static_field<"USB_ENDPOINT_XFER_INT", jint>(); }
	static jint USB_ENDPOINT_XFER_ISOC() { return get_static_field<"USB_ENDPOINT_XFER_ISOC", jint>(); }
	static jint USB_INTERFACE_SUBCLASS_BOOT() { return get_static_field<"USB_INTERFACE_SUBCLASS_BOOT", jint>(); }
	static jint USB_SUBCLASS_VENDOR_SPEC() { return get_static_field<"USB_SUBCLASS_VENDOR_SPEC", jint>(); }
	static jint USB_TYPE_CLASS() { return get_static_field<"USB_TYPE_CLASS", jint>(); }
	static jint USB_TYPE_MASK() { return get_static_field<"USB_TYPE_MASK", jint>(); }
	static jint USB_TYPE_RESERVED() { return get_static_field<"USB_TYPE_RESERVED", jint>(); }
	static jint USB_TYPE_STANDARD() { return get_static_field<"USB_TYPE_STANDARD", jint>(); }
	static jint USB_TYPE_VENDOR() { return get_static_field<"USB_TYPE_VENDOR", jint>(); }

	static jni::ref<android::hardware::usb::UsbConstants> new_object() { return base_::new_object(); }

protected:

	UsbConstants(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_USB_USBCONSTANTS
