// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_RATIONAL_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_RATIONAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class Rational; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::Rational>
{
	static constexpr fixed_string class_name = "android/util/Rational";
	using base_classes = std::tuple<scapix::java_api::java::lang::Number, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_RATIONAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_RATIONAL)
#define SCAPIX_JAVA_API_ANDROID_UTIL_RATIONAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::Rational : public jni::object_base<"android/util/Rational",
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jni::ref<android::util::Rational> NEGATIVE_INFINITY() { return get_static_field<"NEGATIVE_INFINITY", jni::ref<android::util::Rational>>(); }
	static jni::ref<android::util::Rational> NaN() { return get_static_field<"NaN", jni::ref<android::util::Rational>>(); }
	static jni::ref<android::util::Rational> POSITIVE_INFINITY() { return get_static_field<"POSITIVE_INFINITY", jni::ref<android::util::Rational>>(); }
	static jni::ref<android::util::Rational> ZERO() { return get_static_field<"ZERO", jni::ref<android::util::Rational>>(); }

	static jni::ref<android::util::Rational> new_object(jint numerator, jint denominator) { return base_::new_object(numerator, denominator); }
	jint getNumerator() { return call_method<"getNumerator", jint>(); }
	jint getDenominator() { return call_method<"getDenominator", jint>(); }
	jboolean isNaN() { return call_method<"isNaN", jboolean>(); }
	jboolean isInfinite() { return call_method<"isInfinite", jboolean>(); }
	jboolean isFinite() { return call_method<"isFinite", jboolean>(); }
	jboolean isZero() { return call_method<"isZero", jboolean>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jdouble doubleValue() { return call_method<"doubleValue", jdouble>(); }
	jfloat floatValue() { return call_method<"floatValue", jfloat>(); }
	jint intValue() { return call_method<"intValue", jint>(); }
	jlong longValue() { return call_method<"longValue", jlong>(); }
	jshort shortValue() { return call_method<"shortValue", jshort>(); }
	jint compareTo(jni::ref<android::util::Rational> another) { return call_method<"compareTo", jint>(another); }
	static jni::ref<android::util::Rational> parseRational(jni::ref<java::lang::String> string) { return call_static_method<"parseRational", jni::ref<android::util::Rational>>(string); }

protected:

	Rational(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_RATIONAL
