// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_URIMATCHER_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_URIMATCHER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class UriMatcher; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::UriMatcher>
{
	static constexpr fixed_string class_name = "android/content/UriMatcher";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_URIMATCHER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_URIMATCHER)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_URIMATCHER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::UriMatcher : public jni::object_base<"android/content/UriMatcher",
	java::lang::Object>
{
public:

	static jint NO_MATCH() { return get_static_field<"NO_MATCH", jint>(); }

	static jni::ref<android::content::UriMatcher> new_object(jint code) { return base_::new_object(code); }
	void addURI(jni::ref<java::lang::String> authority, jni::ref<java::lang::String> path, jint code) { return call_method<"addURI", void>(authority, path, code); }
	jint match(jni::ref<android::net::Uri> uri) { return call_method<"match", jint>(uri); }

protected:

	UriMatcher(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_URIMATCHER
