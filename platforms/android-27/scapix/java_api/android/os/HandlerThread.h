// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Thread.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_HANDLERTHREAD_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_HANDLERTHREAD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class HandlerThread; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::HandlerThread>
{
	static constexpr fixed_string class_name = "android/os/HandlerThread";
	using base_classes = std::tuple<scapix::java_api::java::lang::Thread>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_HANDLERTHREAD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_HANDLERTHREAD)
#define SCAPIX_JAVA_API_ANDROID_OS_HANDLERTHREAD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Looper.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::HandlerThread : public jni::object_base<"android/os/HandlerThread",
	java::lang::Thread>
{
public:

	static jni::ref<android::os::HandlerThread> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	static jni::ref<android::os::HandlerThread> new_object(jni::ref<java::lang::String> name, jint priority) { return base_::new_object(name, priority); }
	void run() { return call_method<"run", void>(); }
	jni::ref<android::os::Looper> getLooper() { return call_method<"getLooper", jni::ref<android::os::Looper>>(); }
	jboolean quit() { return call_method<"quit", jboolean>(); }
	jboolean quitSafely() { return call_method<"quitSafely", jboolean>(); }
	jint getThreadId() { return call_method<"getThreadId", jint>(); }

protected:

	HandlerThread(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_HANDLERTHREAD
