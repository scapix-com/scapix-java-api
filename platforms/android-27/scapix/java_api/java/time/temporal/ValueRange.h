// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_VALUERANGE_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_VALUERANGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::temporal { class ValueRange; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::temporal::ValueRange>
{
	static constexpr fixed_string class_name = "java/time/temporal/ValueRange";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_VALUERANGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_VALUERANGE)
#define SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_VALUERANGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::temporal::ValueRange : public jni::object_base<"java/time/temporal/ValueRange",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::time::temporal::ValueRange> of(jlong min, jlong p2) { return call_static_method<"of", jni::ref<java::time::temporal::ValueRange>>(min, p2); }
	static jni::ref<java::time::temporal::ValueRange> of(jlong min, jlong p2, jlong maxSmallest) { return call_static_method<"of", jni::ref<java::time::temporal::ValueRange>>(min, p2, maxSmallest); }
	static jni::ref<java::time::temporal::ValueRange> of(jlong minSmallest, jlong p2, jlong minLargest, jlong p4) { return call_static_method<"of", jni::ref<java::time::temporal::ValueRange>>(minSmallest, p2, minLargest, p4); }
	jboolean isFixed() { return call_method<"isFixed", jboolean>(); }
	jlong getMinimum() { return call_method<"getMinimum", jlong>(); }
	jlong getLargestMinimum() { return call_method<"getLargestMinimum", jlong>(); }
	jlong getSmallestMaximum() { return call_method<"getSmallestMaximum", jlong>(); }
	jlong getMaximum() { return call_method<"getMaximum", jlong>(); }
	jboolean isIntValue() { return call_method<"isIntValue", jboolean>(); }
	jboolean isValidValue(jlong value) { return call_method<"isValidValue", jboolean>(value); }
	jboolean isValidIntValue(jlong value) { return call_method<"isValidIntValue", jboolean>(value); }
	jlong checkValidValue(jlong value, jni::ref<java::time::temporal::TemporalField> p2) { return call_method<"checkValidValue", jlong>(value, p2); }
	jint checkValidIntValue(jlong value, jni::ref<java::time::temporal::TemporalField> p2) { return call_method<"checkValidIntValue", jint>(value, p2); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ValueRange(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_VALUERANGE
