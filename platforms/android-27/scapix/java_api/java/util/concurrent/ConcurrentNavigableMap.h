// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/ConcurrentMap.h>
#include <scapix/java_api/java/util/NavigableMap.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ConcurrentNavigableMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ConcurrentNavigableMap>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ConcurrentNavigableMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::ConcurrentMap, scapix::java_api::java::util::NavigableMap>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/NavigableSet.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::ConcurrentNavigableMap : public jni::object_base<"java/util/concurrent/ConcurrentNavigableMap",
	java::lang::Object,
	java::util::concurrent::ConcurrentMap,
	java::util::NavigableMap>
{
public:

	jni::ref<java::util::concurrent::ConcurrentNavigableMap> subMap(jni::ref<java::lang::Object> p1, jboolean p2, jni::ref<java::lang::Object> p3, jboolean p4) { return call_method<"subMap", jni::ref<java::util::concurrent::ConcurrentNavigableMap>>(p1, p2, p3, p4); }
	jni::ref<java::util::concurrent::ConcurrentNavigableMap> headMap(jni::ref<java::lang::Object> p1, jboolean p2) { return call_method<"headMap", jni::ref<java::util::concurrent::ConcurrentNavigableMap>>(p1, p2); }
	jni::ref<java::util::concurrent::ConcurrentNavigableMap> tailMap(jni::ref<java::lang::Object> p1, jboolean p2) { return call_method<"tailMap", jni::ref<java::util::concurrent::ConcurrentNavigableMap>>(p1, p2); }
	jni::ref<java::util::concurrent::ConcurrentNavigableMap> subMap(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"subMap", jni::ref<java::util::concurrent::ConcurrentNavigableMap>>(p1, p2); }
	jni::ref<java::util::concurrent::ConcurrentNavigableMap> headMap(jni::ref<java::lang::Object> p1) { return call_method<"headMap", jni::ref<java::util::concurrent::ConcurrentNavigableMap>>(p1); }
	jni::ref<java::util::concurrent::ConcurrentNavigableMap> tailMap(jni::ref<java::lang::Object> p1) { return call_method<"tailMap", jni::ref<java::util::concurrent::ConcurrentNavigableMap>>(p1); }
	jni::ref<java::util::concurrent::ConcurrentNavigableMap> descendingMap() { return call_method<"descendingMap", jni::ref<java::util::concurrent::ConcurrentNavigableMap>>(); }
	jni::ref<java::util::NavigableSet> navigableKeySet() { return call_method<"navigableKeySet", jni::ref<java::util::NavigableSet>>(); }
	jni::ref<java::util::NavigableSet> keySet() { return call_method<"keySet", jni::ref<java::util::NavigableSet>>(); }
	jni::ref<java::util::NavigableSet> descendingKeySet() { return call_method<"descendingKeySet", jni::ref<java::util::NavigableSet>>(); }

protected:

	ConcurrentNavigableMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTNAVIGABLEMAP
