// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::transform { class TransformerFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::transform::TransformerFactory>
{
	static constexpr fixed_string class_name = "javax/xml/transform/TransformerFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY)
#define SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/transform/ErrorListener.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/transform/Templates.h>
#include <scapix/java_api/javax/xml/transform/Transformer.h>
#include <scapix/java_api/javax/xml/transform/URIResolver.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::transform::TransformerFactory : public jni::object_base<"javax/xml/transform/TransformerFactory",
	java::lang::Object>
{
public:

	static jni::ref<javax::xml::transform::TransformerFactory> newInstance() { return call_static_method<"newInstance", jni::ref<javax::xml::transform::TransformerFactory>>(); }
	static jni::ref<javax::xml::transform::TransformerFactory> newInstance(jni::ref<java::lang::String> factoryClassName, jni::ref<java::lang::ClassLoader> classLoader) { return call_static_method<"newInstance", jni::ref<javax::xml::transform::TransformerFactory>>(factoryClassName, classLoader); }
	jni::ref<javax::xml::transform::Transformer> newTransformer(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTransformer", jni::ref<javax::xml::transform::Transformer>>(p1); }
	jni::ref<javax::xml::transform::Transformer> newTransformer() { return call_method<"newTransformer", jni::ref<javax::xml::transform::Transformer>>(); }
	jni::ref<javax::xml::transform::Templates> newTemplates(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTemplates", jni::ref<javax::xml::transform::Templates>>(p1); }
	jni::ref<javax::xml::transform::Source> getAssociatedStylesheet(jni::ref<javax::xml::transform::Source> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"getAssociatedStylesheet", jni::ref<javax::xml::transform::Source>>(p1, p2, p3, p4); }
	void setURIResolver(jni::ref<javax::xml::transform::URIResolver> p1) { return call_method<"setURIResolver", void>(p1); }
	jni::ref<javax::xml::transform::URIResolver> getURIResolver() { return call_method<"getURIResolver", jni::ref<javax::xml::transform::URIResolver>>(); }
	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	jboolean getFeature(jni::ref<java::lang::String> p1) { return call_method<"getFeature", jboolean>(p1); }
	void setAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setAttribute", void>(p1, p2); }
	jni::ref<java::lang::Object> getAttribute(jni::ref<java::lang::String> p1) { return call_method<"getAttribute", jni::ref<java::lang::Object>>(p1); }
	void setErrorListener(jni::ref<javax::xml::transform::ErrorListener> p1) { return call_method<"setErrorListener", void>(p1); }
	jni::ref<javax::xml::transform::ErrorListener> getErrorListener() { return call_method<"getErrorListener", jni::ref<javax::xml::transform::ErrorListener>>(); }

protected:

	TransformerFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_TRANSFORM_TRANSFORMERFACTORY
