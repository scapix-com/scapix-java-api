// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_NET_SSL_SSLENGINE_FWD
#define SCAPIX_JAVA_API_JAVAX_NET_SSL_SSLENGINE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::net::ssl { class SSLEngine; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::net::ssl::SSLEngine>
{
	static constexpr fixed_string class_name = "javax/net/ssl/SSLEngine";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_NET_SSL_SSLENGINE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_NET_SSL_SSLENGINE)
#define SCAPIX_JAVA_API_JAVAX_NET_SSL_SSLENGINE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/javax/net/ssl/SSLEngineResult.h>
#include <scapix/java_api/javax/net/ssl/SSLEngineResult_HandshakeStatus.h>
#include <scapix/java_api/javax/net/ssl/SSLParameters.h>
#include <scapix/java_api/javax/net/ssl/SSLSession.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::net::ssl::SSLEngine : public jni::object_base<"javax/net/ssl/SSLEngine",
	java::lang::Object>
{
public:

	jni::ref<java::lang::String> getPeerHost() { return call_method<"getPeerHost", jni::ref<java::lang::String>>(); }
	jint getPeerPort() { return call_method<"getPeerPort", jint>(); }
	jni::ref<javax::net::ssl::SSLEngineResult> wrap(jni::ref<java::nio::ByteBuffer> src, jni::ref<java::nio::ByteBuffer> dst) { return call_method<"wrap", jni::ref<javax::net::ssl::SSLEngineResult>>(src, dst); }
	jni::ref<javax::net::ssl::SSLEngineResult> wrap(jni::ref<jni::array<java::nio::ByteBuffer>> srcs, jni::ref<java::nio::ByteBuffer> dst) { return call_method<"wrap", jni::ref<javax::net::ssl::SSLEngineResult>>(srcs, dst); }
	jni::ref<javax::net::ssl::SSLEngineResult> wrap(jni::ref<jni::array<java::nio::ByteBuffer>> p1, jint p2, jint p3, jni::ref<java::nio::ByteBuffer> p4) { return call_method<"wrap", jni::ref<javax::net::ssl::SSLEngineResult>>(p1, p2, p3, p4); }
	jni::ref<javax::net::ssl::SSLEngineResult> unwrap(jni::ref<java::nio::ByteBuffer> src, jni::ref<java::nio::ByteBuffer> dst) { return call_method<"unwrap", jni::ref<javax::net::ssl::SSLEngineResult>>(src, dst); }
	jni::ref<javax::net::ssl::SSLEngineResult> unwrap(jni::ref<java::nio::ByteBuffer> src, jni::ref<jni::array<java::nio::ByteBuffer>> dsts) { return call_method<"unwrap", jni::ref<javax::net::ssl::SSLEngineResult>>(src, dsts); }
	jni::ref<javax::net::ssl::SSLEngineResult> unwrap(jni::ref<java::nio::ByteBuffer> p1, jni::ref<jni::array<java::nio::ByteBuffer>> p2, jint p3, jint p4) { return call_method<"unwrap", jni::ref<javax::net::ssl::SSLEngineResult>>(p1, p2, p3, p4); }
	jni::ref<java::lang::Runnable> getDelegatedTask() { return call_method<"getDelegatedTask", jni::ref<java::lang::Runnable>>(); }
	void closeInbound() { return call_method<"closeInbound", void>(); }
	jboolean isInboundDone() { return call_method<"isInboundDone", jboolean>(); }
	void closeOutbound() { return call_method<"closeOutbound", void>(); }
	jboolean isOutboundDone() { return call_method<"isOutboundDone", jboolean>(); }
	jni::ref<jni::array<java::lang::String>> getSupportedCipherSuites() { return call_method<"getSupportedCipherSuites", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getEnabledCipherSuites() { return call_method<"getEnabledCipherSuites", jni::ref<jni::array<java::lang::String>>>(); }
	void setEnabledCipherSuites(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"setEnabledCipherSuites", void>(p1); }
	jni::ref<jni::array<java::lang::String>> getSupportedProtocols() { return call_method<"getSupportedProtocols", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getEnabledProtocols() { return call_method<"getEnabledProtocols", jni::ref<jni::array<java::lang::String>>>(); }
	void setEnabledProtocols(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"setEnabledProtocols", void>(p1); }
	jni::ref<javax::net::ssl::SSLSession> getSession() { return call_method<"getSession", jni::ref<javax::net::ssl::SSLSession>>(); }
	jni::ref<javax::net::ssl::SSLSession> getHandshakeSession() { return call_method<"getHandshakeSession", jni::ref<javax::net::ssl::SSLSession>>(); }
	void beginHandshake() { return call_method<"beginHandshake", void>(); }
	jni::ref<javax::net::ssl::SSLEngineResult_HandshakeStatus> getHandshakeStatus() { return call_method<"getHandshakeStatus", jni::ref<javax::net::ssl::SSLEngineResult_HandshakeStatus>>(); }
	void setUseClientMode(jboolean p1) { return call_method<"setUseClientMode", void>(p1); }
	jboolean getUseClientMode() { return call_method<"getUseClientMode", jboolean>(); }
	void setNeedClientAuth(jboolean p1) { return call_method<"setNeedClientAuth", void>(p1); }
	jboolean getNeedClientAuth() { return call_method<"getNeedClientAuth", jboolean>(); }
	void setWantClientAuth(jboolean p1) { return call_method<"setWantClientAuth", void>(p1); }
	jboolean getWantClientAuth() { return call_method<"getWantClientAuth", jboolean>(); }
	void setEnableSessionCreation(jboolean p1) { return call_method<"setEnableSessionCreation", void>(p1); }
	jboolean getEnableSessionCreation() { return call_method<"getEnableSessionCreation", jboolean>(); }
	jni::ref<javax::net::ssl::SSLParameters> getSSLParameters() { return call_method<"getSSLParameters", jni::ref<javax::net::ssl::SSLParameters>>(); }
	void setSSLParameters(jni::ref<javax::net::ssl::SSLParameters> params) { return call_method<"setSSLParameters", void>(params); }

protected:

	SSLEngine(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_NET_SSL_SSLENGINE
