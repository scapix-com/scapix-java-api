// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/microedition/khronos/opengles/GL.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXTENSIONPACK_FWD
#define SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXTENSIONPACK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::microedition::khronos::opengles { class GL11ExtensionPack; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::microedition::khronos::opengles::GL11ExtensionPack>
{
	static constexpr fixed_string class_name = "javax/microedition/khronos/opengles/GL11ExtensionPack";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::microedition::khronos::opengles::GL>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXTENSIONPACK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXTENSIONPACK)
#define SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXTENSIONPACK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::microedition::khronos::opengles::GL11ExtensionPack : public jni::object_base<"javax/microedition/khronos/opengles/GL11ExtensionPack",
	java::lang::Object,
	javax::microedition::khronos::opengles::GL>
{
public:

	static jint GL_BLEND_DST_ALPHA() { return get_static_field<"GL_BLEND_DST_ALPHA", jint>(); }
	static jint GL_BLEND_DST_RGB() { return get_static_field<"GL_BLEND_DST_RGB", jint>(); }
	static jint GL_BLEND_EQUATION() { return get_static_field<"GL_BLEND_EQUATION", jint>(); }
	static jint GL_BLEND_EQUATION_ALPHA() { return get_static_field<"GL_BLEND_EQUATION_ALPHA", jint>(); }
	static jint GL_BLEND_EQUATION_RGB() { return get_static_field<"GL_BLEND_EQUATION_RGB", jint>(); }
	static jint GL_BLEND_SRC_ALPHA() { return get_static_field<"GL_BLEND_SRC_ALPHA", jint>(); }
	static jint GL_BLEND_SRC_RGB() { return get_static_field<"GL_BLEND_SRC_RGB", jint>(); }
	static jint GL_COLOR_ATTACHMENT0_OES() { return get_static_field<"GL_COLOR_ATTACHMENT0_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT10_OES() { return get_static_field<"GL_COLOR_ATTACHMENT10_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT11_OES() { return get_static_field<"GL_COLOR_ATTACHMENT11_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT12_OES() { return get_static_field<"GL_COLOR_ATTACHMENT12_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT13_OES() { return get_static_field<"GL_COLOR_ATTACHMENT13_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT14_OES() { return get_static_field<"GL_COLOR_ATTACHMENT14_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT15_OES() { return get_static_field<"GL_COLOR_ATTACHMENT15_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT1_OES() { return get_static_field<"GL_COLOR_ATTACHMENT1_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT2_OES() { return get_static_field<"GL_COLOR_ATTACHMENT2_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT3_OES() { return get_static_field<"GL_COLOR_ATTACHMENT3_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT4_OES() { return get_static_field<"GL_COLOR_ATTACHMENT4_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT5_OES() { return get_static_field<"GL_COLOR_ATTACHMENT5_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT6_OES() { return get_static_field<"GL_COLOR_ATTACHMENT6_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT7_OES() { return get_static_field<"GL_COLOR_ATTACHMENT7_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT8_OES() { return get_static_field<"GL_COLOR_ATTACHMENT8_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT9_OES() { return get_static_field<"GL_COLOR_ATTACHMENT9_OES", jint>(); }
	static jint GL_DECR_WRAP() { return get_static_field<"GL_DECR_WRAP", jint>(); }
	static jint GL_DEPTH_ATTACHMENT_OES() { return get_static_field<"GL_DEPTH_ATTACHMENT_OES", jint>(); }
	static jint GL_DEPTH_COMPONENT() { return get_static_field<"GL_DEPTH_COMPONENT", jint>(); }
	static jint GL_DEPTH_COMPONENT16() { return get_static_field<"GL_DEPTH_COMPONENT16", jint>(); }
	static jint GL_DEPTH_COMPONENT24() { return get_static_field<"GL_DEPTH_COMPONENT24", jint>(); }
	static jint GL_DEPTH_COMPONENT32() { return get_static_field<"GL_DEPTH_COMPONENT32", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES", jint>(); }
	static jint GL_FRAMEBUFFER_BINDING_OES() { return get_static_field<"GL_FRAMEBUFFER_BINDING_OES", jint>(); }
	static jint GL_FRAMEBUFFER_COMPLETE_OES() { return get_static_field<"GL_FRAMEBUFFER_COMPLETE_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES", jint>(); }
	static jint GL_FRAMEBUFFER_OES() { return get_static_field<"GL_FRAMEBUFFER_OES", jint>(); }
	static jint GL_FRAMEBUFFER_UNSUPPORTED_OES() { return get_static_field<"GL_FRAMEBUFFER_UNSUPPORTED_OES", jint>(); }
	static jint GL_FUNC_ADD() { return get_static_field<"GL_FUNC_ADD", jint>(); }
	static jint GL_FUNC_REVERSE_SUBTRACT() { return get_static_field<"GL_FUNC_REVERSE_SUBTRACT", jint>(); }
	static jint GL_FUNC_SUBTRACT() { return get_static_field<"GL_FUNC_SUBTRACT", jint>(); }
	static jint GL_INCR_WRAP() { return get_static_field<"GL_INCR_WRAP", jint>(); }
	static jint GL_INVALID_FRAMEBUFFER_OPERATION_OES() { return get_static_field<"GL_INVALID_FRAMEBUFFER_OPERATION_OES", jint>(); }
	static jint GL_MAX_COLOR_ATTACHMENTS_OES() { return get_static_field<"GL_MAX_COLOR_ATTACHMENTS_OES", jint>(); }
	static jint GL_MAX_CUBE_MAP_TEXTURE_SIZE() { return get_static_field<"GL_MAX_CUBE_MAP_TEXTURE_SIZE", jint>(); }
	static jint GL_MAX_RENDERBUFFER_SIZE_OES() { return get_static_field<"GL_MAX_RENDERBUFFER_SIZE_OES", jint>(); }
	static jint GL_MIRRORED_REPEAT() { return get_static_field<"GL_MIRRORED_REPEAT", jint>(); }
	static jint GL_NORMAL_MAP() { return get_static_field<"GL_NORMAL_MAP", jint>(); }
	static jint GL_REFLECTION_MAP() { return get_static_field<"GL_REFLECTION_MAP", jint>(); }
	static jint GL_RENDERBUFFER_ALPHA_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_ALPHA_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_BINDING_OES() { return get_static_field<"GL_RENDERBUFFER_BINDING_OES", jint>(); }
	static jint GL_RENDERBUFFER_BLUE_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_BLUE_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_DEPTH_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_DEPTH_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_GREEN_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_GREEN_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_HEIGHT_OES() { return get_static_field<"GL_RENDERBUFFER_HEIGHT_OES", jint>(); }
	static jint GL_RENDERBUFFER_INTERNAL_FORMAT_OES() { return get_static_field<"GL_RENDERBUFFER_INTERNAL_FORMAT_OES", jint>(); }
	static jint GL_RENDERBUFFER_OES() { return get_static_field<"GL_RENDERBUFFER_OES", jint>(); }
	static jint GL_RENDERBUFFER_RED_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_RED_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_STENCIL_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_STENCIL_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_WIDTH_OES() { return get_static_field<"GL_RENDERBUFFER_WIDTH_OES", jint>(); }
	static jint GL_RGB565_OES() { return get_static_field<"GL_RGB565_OES", jint>(); }
	static jint GL_RGB5_A1() { return get_static_field<"GL_RGB5_A1", jint>(); }
	static jint GL_RGB8() { return get_static_field<"GL_RGB8", jint>(); }
	static jint GL_RGBA4() { return get_static_field<"GL_RGBA4", jint>(); }
	static jint GL_RGBA8() { return get_static_field<"GL_RGBA8", jint>(); }
	static jint GL_STENCIL_ATTACHMENT_OES() { return get_static_field<"GL_STENCIL_ATTACHMENT_OES", jint>(); }
	static jint GL_STENCIL_INDEX() { return get_static_field<"GL_STENCIL_INDEX", jint>(); }
	static jint GL_STENCIL_INDEX1_OES() { return get_static_field<"GL_STENCIL_INDEX1_OES", jint>(); }
	static jint GL_STENCIL_INDEX4_OES() { return get_static_field<"GL_STENCIL_INDEX4_OES", jint>(); }
	static jint GL_STENCIL_INDEX8_OES() { return get_static_field<"GL_STENCIL_INDEX8_OES", jint>(); }
	static jint GL_STR() { return get_static_field<"GL_STR", jint>(); }
	static jint GL_TEXTURE_BINDING_CUBE_MAP() { return get_static_field<"GL_TEXTURE_BINDING_CUBE_MAP", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP() { return get_static_field<"GL_TEXTURE_CUBE_MAP", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_X() { return get_static_field<"GL_TEXTURE_CUBE_MAP_NEGATIVE_X", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y() { return get_static_field<"GL_TEXTURE_CUBE_MAP_NEGATIVE_Y", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z() { return get_static_field<"GL_TEXTURE_CUBE_MAP_NEGATIVE_Z", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_X() { return get_static_field<"GL_TEXTURE_CUBE_MAP_POSITIVE_X", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_Y() { return get_static_field<"GL_TEXTURE_CUBE_MAP_POSITIVE_Y", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_Z() { return get_static_field<"GL_TEXTURE_CUBE_MAP_POSITIVE_Z", jint>(); }
	static jint GL_TEXTURE_GEN_MODE() { return get_static_field<"GL_TEXTURE_GEN_MODE", jint>(); }
	static jint GL_TEXTURE_GEN_STR() { return get_static_field<"GL_TEXTURE_GEN_STR", jint>(); }

	void glBindFramebufferOES(jint p1, jint p2) { return call_method<"glBindFramebufferOES", void>(p1, p2); }
	void glBindRenderbufferOES(jint p1, jint p2) { return call_method<"glBindRenderbufferOES", void>(p1, p2); }
	void glBindTexture(jint p1, jint p2) { return call_method<"glBindTexture", void>(p1, p2); }
	void glBlendEquation(jint p1) { return call_method<"glBlendEquation", void>(p1); }
	void glBlendEquationSeparate(jint p1, jint p2) { return call_method<"glBlendEquationSeparate", void>(p1, p2); }
	void glBlendFuncSeparate(jint p1, jint p2, jint p3, jint p4) { return call_method<"glBlendFuncSeparate", void>(p1, p2, p3, p4); }
	jint glCheckFramebufferStatusOES(jint p1) { return call_method<"glCheckFramebufferStatusOES", jint>(p1); }
	void glCompressedTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jni::ref<java::nio::Buffer> p8) { return call_method<"glCompressedTexImage2D", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void glCopyTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8) { return call_method<"glCopyTexImage2D", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void glDeleteFramebuffersOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glDeleteFramebuffersOES", void>(p1, p2, p3); }
	void glDeleteFramebuffersOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glDeleteFramebuffersOES", void>(p1, p2); }
	void glDeleteRenderbuffersOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glDeleteRenderbuffersOES", void>(p1, p2, p3); }
	void glDeleteRenderbuffersOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glDeleteRenderbuffersOES", void>(p1, p2); }
	void glEnable(jint p1) { return call_method<"glEnable", void>(p1); }
	void glFramebufferRenderbufferOES(jint p1, jint p2, jint p3, jint p4) { return call_method<"glFramebufferRenderbufferOES", void>(p1, p2, p3, p4); }
	void glFramebufferTexture2DOES(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"glFramebufferTexture2DOES", void>(p1, p2, p3, p4, p5); }
	void glGenerateMipmapOES(jint p1) { return call_method<"glGenerateMipmapOES", void>(p1); }
	void glGenFramebuffersOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glGenFramebuffersOES", void>(p1, p2, p3); }
	void glGenFramebuffersOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glGenFramebuffersOES", void>(p1, p2); }
	void glGenRenderbuffersOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glGenRenderbuffersOES", void>(p1, p2, p3); }
	void glGenRenderbuffersOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glGenRenderbuffersOES", void>(p1, p2); }
	void glGetFramebufferAttachmentParameterivOES(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_method<"glGetFramebufferAttachmentParameterivOES", void>(p1, p2, p3, p4, p5); }
	void glGetFramebufferAttachmentParameterivOES(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_method<"glGetFramebufferAttachmentParameterivOES", void>(p1, p2, p3, p4); }
	void glGetIntegerv(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"glGetIntegerv", void>(p1, p2, p3); }
	void glGetIntegerv(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_method<"glGetIntegerv", void>(p1, p2); }
	void glGetRenderbufferParameterivOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetRenderbufferParameterivOES", void>(p1, p2, p3, p4); }
	void glGetRenderbufferParameterivOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetRenderbufferParameterivOES", void>(p1, p2, p3); }
	void glGetTexGenfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_method<"glGetTexGenfv", void>(p1, p2, p3, p4); }
	void glGetTexGenfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_method<"glGetTexGenfv", void>(p1, p2, p3); }
	void glGetTexGeniv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetTexGeniv", void>(p1, p2, p3, p4); }
	void glGetTexGeniv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetTexGeniv", void>(p1, p2, p3); }
	void glGetTexGenxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glGetTexGenxv", void>(p1, p2, p3, p4); }
	void glGetTexGenxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glGetTexGenxv", void>(p1, p2, p3); }
	jboolean glIsFramebufferOES(jint p1) { return call_method<"glIsFramebufferOES", jboolean>(p1); }
	jboolean glIsRenderbufferOES(jint p1) { return call_method<"glIsRenderbufferOES", jboolean>(p1); }
	void glRenderbufferStorageOES(jint p1, jint p2, jint p3, jint p4) { return call_method<"glRenderbufferStorageOES", void>(p1, p2, p3, p4); }
	void glStencilOp(jint p1, jint p2, jint p3) { return call_method<"glStencilOp", void>(p1, p2, p3); }
	void glTexEnvf(jint p1, jint p2, jfloat p3) { return call_method<"glTexEnvf", void>(p1, p2, p3); }
	void glTexEnvfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_method<"glTexEnvfv", void>(p1, p2, p3, p4); }
	void glTexEnvfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_method<"glTexEnvfv", void>(p1, p2, p3); }
	void glTexEnvx(jint p1, jint p2, jint p3) { return call_method<"glTexEnvx", void>(p1, p2, p3); }
	void glTexEnvxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glTexEnvxv", void>(p1, p2, p3, p4); }
	void glTexEnvxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glTexEnvxv", void>(p1, p2, p3); }
	void glTexGenf(jint p1, jint p2, jfloat p3) { return call_method<"glTexGenf", void>(p1, p2, p3); }
	void glTexGenfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_method<"glTexGenfv", void>(p1, p2, p3, p4); }
	void glTexGenfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_method<"glTexGenfv", void>(p1, p2, p3); }
	void glTexGeni(jint p1, jint p2, jint p3) { return call_method<"glTexGeni", void>(p1, p2, p3); }
	void glTexGeniv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glTexGeniv", void>(p1, p2, p3, p4); }
	void glTexGeniv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glTexGeniv", void>(p1, p2, p3); }
	void glTexGenx(jint p1, jint p2, jint p3) { return call_method<"glTexGenx", void>(p1, p2, p3); }
	void glTexGenxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"glTexGenxv", void>(p1, p2, p3, p4); }
	void glTexGenxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_method<"glTexGenxv", void>(p1, p2, p3); }
	void glTexParameterf(jint p1, jint p2, jfloat p3) { return call_method<"glTexParameterf", void>(p1, p2, p3); }

protected:

	GL11ExtensionPack(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXTENSIONPACK
