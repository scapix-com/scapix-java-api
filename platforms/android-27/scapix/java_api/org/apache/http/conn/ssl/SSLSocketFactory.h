// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/conn/scheme/LayeredSocketFactory.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::conn::ssl { class SSLSocketFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::conn::ssl::SSLSocketFactory>
{
	static constexpr fixed_string class_name = "org/apache/http/conn/ssl/SSLSocketFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::conn::scheme::LayeredSocketFactory>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/java/security/KeyStore.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/org/apache/http/conn/scheme/HostNameResolver.h>
#include <scapix/java_api/org/apache/http/conn/ssl/X509HostnameVerifier.h>
#include <scapix/java_api/org/apache/http/params/HttpParams.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::conn::ssl::SSLSocketFactory : public jni::object_base<"org/apache/http/conn/ssl/SSLSocketFactory",
	java::lang::Object,
	org::apache::http::conn::scheme::LayeredSocketFactory>
{
public:

	static jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier> ALLOW_ALL_HOSTNAME_VERIFIER() { return get_static_field<"ALLOW_ALL_HOSTNAME_VERIFIER", jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier>>(); }
	static jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier> BROWSER_COMPATIBLE_HOSTNAME_VERIFIER() { return get_static_field<"BROWSER_COMPATIBLE_HOSTNAME_VERIFIER", jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier>>(); }
	static jni::ref<java::lang::String> SSL() { return get_static_field<"SSL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SSLV2() { return get_static_field<"SSLV2", jni::ref<java::lang::String>>(); }
	static jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier> STRICT_HOSTNAME_VERIFIER() { return get_static_field<"STRICT_HOSTNAME_VERIFIER", jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier>>(); }
	static jni::ref<java::lang::String> TLS() { return get_static_field<"TLS", jni::ref<java::lang::String>>(); }

	static jni::ref<org::apache::http::conn::ssl::SSLSocketFactory> new_object(jni::ref<java::lang::String> algorithm, jni::ref<java::security::KeyStore> keystore, jni::ref<java::lang::String> keystorePassword, jni::ref<java::security::KeyStore> truststore, jni::ref<java::security::SecureRandom> random, jni::ref<org::apache::http::conn::scheme::HostNameResolver> nameResolver) { return base_::new_object(algorithm, keystore, keystorePassword, truststore, random, nameResolver); }
	static jni::ref<org::apache::http::conn::ssl::SSLSocketFactory> new_object(jni::ref<java::security::KeyStore> keystore, jni::ref<java::lang::String> keystorePassword, jni::ref<java::security::KeyStore> truststore) { return base_::new_object(keystore, keystorePassword, truststore); }
	static jni::ref<org::apache::http::conn::ssl::SSLSocketFactory> new_object(jni::ref<java::security::KeyStore> keystore, jni::ref<java::lang::String> keystorePassword) { return base_::new_object(keystore, keystorePassword); }
	static jni::ref<org::apache::http::conn::ssl::SSLSocketFactory> new_object(jni::ref<java::security::KeyStore> truststore) { return base_::new_object(truststore); }
	static jni::ref<org::apache::http::conn::ssl::SSLSocketFactory> getSocketFactory() { return call_static_method<"getSocketFactory", jni::ref<org::apache::http::conn::ssl::SSLSocketFactory>>(); }
	jni::ref<java::net::Socket> createSocket() { return call_method<"createSocket", jni::ref<java::net::Socket>>(); }
	jni::ref<java::net::Socket> connectSocket(jni::ref<java::net::Socket> sock, jni::ref<java::lang::String> host, jint port, jni::ref<java::net::InetAddress> localAddress, jint localPort, jni::ref<org::apache::http::params::HttpParams> params) { return call_method<"connectSocket", jni::ref<java::net::Socket>>(sock, host, port, localAddress, localPort, params); }
	jboolean isSecure(jni::ref<java::net::Socket> sock) { return call_method<"isSecure", jboolean>(sock); }
	jni::ref<java::net::Socket> createSocket(jni::ref<java::net::Socket> socket, jni::ref<java::lang::String> host, jint port, jboolean autoClose) { return call_method<"createSocket", jni::ref<java::net::Socket>>(socket, host, port, autoClose); }
	void setHostnameVerifier(jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier> hostnameVerifier) { return call_method<"setHostnameVerifier", void>(hostnameVerifier); }
	jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier> getHostnameVerifier() { return call_method<"getHostnameVerifier", jni::ref<org::apache::http::conn::ssl::X509HostnameVerifier>>(); }

protected:

	SSLSocketFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_SSL_SSLSOCKETFACTORY
