// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#include <scapix/java_api/org/xml/sax/XMLReader.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>

#ifndef SCAPIX_JAVA_API_ORG_XMLPULL_V1_SAX2_DRIVER_FWD
#define SCAPIX_JAVA_API_ORG_XMLPULL_V1_SAX2_DRIVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::xmlpull::v1::sax2 { class Driver; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::xmlpull::v1::sax2::Driver>
{
	static constexpr fixed_string class_name = "org/xmlpull/v1/sax2/Driver";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::xml::sax::Locator, scapix::java_api::org::xml::sax::XMLReader, scapix::java_api::org::xml::sax::Attributes>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XMLPULL_V1_SAX2_DRIVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_XMLPULL_V1_SAX2_DRIVER)
#define SCAPIX_JAVA_API_ORG_XMLPULL_V1_SAX2_DRIVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/org/xml/sax/EntityResolver.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::xmlpull::v1::sax2::Driver : public jni::object_base<"org/xmlpull/v1/sax2/Driver",
	java::lang::Object,
	org::xml::sax::Locator,
	org::xml::sax::XMLReader,
	org::xml::sax::Attributes>
{
public:

	static jni::ref<org::xmlpull::v1::sax2::Driver> new_object() { return base_::new_object(); }
	static jni::ref<org::xmlpull::v1::sax2::Driver> new_object(jni::ref<org::xmlpull::v1::XmlPullParser> pp) { return base_::new_object(pp); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<java::lang::String> getURI(jint index) { return call_method<"getURI", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getLocalName(jint index) { return call_method<"getLocalName", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getQName(jint index) { return call_method<"getQName", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getType(jint index) { return call_method<"getType", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getValue(jint index) { return call_method<"getValue", jni::ref<java::lang::String>>(index); }
	jint getIndex(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName) { return call_method<"getIndex", jint>(uri, localName); }
	jint getIndex(jni::ref<java::lang::String> qName) { return call_method<"getIndex", jint>(qName); }
	jni::ref<java::lang::String> getType(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName) { return call_method<"getType", jni::ref<java::lang::String>>(uri, localName); }
	jni::ref<java::lang::String> getType(jni::ref<java::lang::String> qName) { return call_method<"getType", jni::ref<java::lang::String>>(qName); }
	jni::ref<java::lang::String> getValue(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName) { return call_method<"getValue", jni::ref<java::lang::String>>(uri, localName); }
	jni::ref<java::lang::String> getValue(jni::ref<java::lang::String> qName) { return call_method<"getValue", jni::ref<java::lang::String>>(qName); }
	jni::ref<java::lang::String> getPublicId() { return call_method<"getPublicId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSystemId() { return call_method<"getSystemId", jni::ref<java::lang::String>>(); }
	jint getLineNumber() { return call_method<"getLineNumber", jint>(); }
	jint getColumnNumber() { return call_method<"getColumnNumber", jint>(); }
	jboolean getFeature(jni::ref<java::lang::String> name) { return call_method<"getFeature", jboolean>(name); }
	void setFeature(jni::ref<java::lang::String> name, jboolean value) { return call_method<"setFeature", void>(name, value); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> name) { return call_method<"getProperty", jni::ref<java::lang::Object>>(name); }
	void setProperty(jni::ref<java::lang::String> name, jni::ref<java::lang::Object> value) { return call_method<"setProperty", void>(name, value); }
	void setEntityResolver(jni::ref<org::xml::sax::EntityResolver> resolver) { return call_method<"setEntityResolver", void>(resolver); }
	jni::ref<org::xml::sax::EntityResolver> getEntityResolver() { return call_method<"getEntityResolver", jni::ref<org::xml::sax::EntityResolver>>(); }
	void setDTDHandler(jni::ref<org::xml::sax::DTDHandler> handler) { return call_method<"setDTDHandler", void>(handler); }
	jni::ref<org::xml::sax::DTDHandler> getDTDHandler() { return call_method<"getDTDHandler", jni::ref<org::xml::sax::DTDHandler>>(); }
	void setContentHandler(jni::ref<org::xml::sax::ContentHandler> handler) { return call_method<"setContentHandler", void>(handler); }
	jni::ref<org::xml::sax::ContentHandler> getContentHandler() { return call_method<"getContentHandler", jni::ref<org::xml::sax::ContentHandler>>(); }
	void setErrorHandler(jni::ref<org::xml::sax::ErrorHandler> handler) { return call_method<"setErrorHandler", void>(handler); }
	jni::ref<org::xml::sax::ErrorHandler> getErrorHandler() { return call_method<"getErrorHandler", jni::ref<org::xml::sax::ErrorHandler>>(); }
	void parse(jni::ref<org::xml::sax::InputSource> source) { return call_method<"parse", void>(source); }
	void parse(jni::ref<java::lang::String> systemId) { return call_method<"parse", void>(systemId); }
	void parseSubTree(jni::ref<org::xmlpull::v1::XmlPullParser> pp) { return call_method<"parseSubTree", void>(pp); }

protected:

	Driver(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XMLPULL_V1_SAX2_DRIVER
