// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_APPENDABLE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_APPENDABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Appendable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Appendable>
{
	static constexpr fixed_string class_name = "java/lang/Appendable";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_APPENDABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_APPENDABLE)
#define SCAPIX_JAVA_API_JAVA_LANG_APPENDABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Appendable : public jni::object_base<"java/lang/Appendable",
	java::lang::Object>
{
public:

	jni::ref<java::lang::Appendable> append(jni::ref<java::lang::CharSequence> p1) { return call_method<"append", jni::ref<java::lang::Appendable>>(p1); }
	jni::ref<java::lang::Appendable> append(jni::ref<java::lang::CharSequence> p1, jint p2, jint p3) { return call_method<"append", jni::ref<java::lang::Appendable>>(p1, p2, p3); }
	jni::ref<java::lang::Appendable> append(jchar p1) { return call_method<"append", jni::ref<java::lang::Appendable>>(p1); }

protected:

	Appendable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_APPENDABLE
