// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/Channel.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_READABLEBYTECHANNEL_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_READABLEBYTECHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::channels { class ReadableByteChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::channels::ReadableByteChannel>
{
	static constexpr fixed_string class_name = "java/nio/channels/ReadableByteChannel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::nio::channels::Channel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_READABLEBYTECHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_READABLEBYTECHANNEL)
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_READABLEBYTECHANNEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::channels::ReadableByteChannel : public jni::object_base<"java/nio/channels/ReadableByteChannel",
	java::lang::Object,
	java::nio::channels::Channel>
{
public:

	jint read(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"read", jint>(p1); }

protected:

	ReadableByteChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_READABLEBYTECHANNEL
