// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ASYNCHRONOUSCHANNELPROVIDER_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ASYNCHRONOUSCHANNELPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::channels::spi { class AsynchronousChannelProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::channels::spi::AsynchronousChannelProvider>
{
	static constexpr fixed_string class_name = "java/nio/channels/spi/AsynchronousChannelProvider";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ASYNCHRONOUSCHANNELPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ASYNCHRONOUSCHANNELPROVIDER)
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ASYNCHRONOUSCHANNELPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/channels/AsynchronousChannelGroup.h>
#include <scapix/java_api/java/nio/channels/AsynchronousServerSocketChannel.h>
#include <scapix/java_api/java/nio/channels/AsynchronousSocketChannel.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>
#include <scapix/java_api/java/util/concurrent/ThreadFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::channels::spi::AsynchronousChannelProvider : public jni::object_base<"java/nio/channels/spi/AsynchronousChannelProvider",
	java::lang::Object>
{
public:

	static jni::ref<java::nio::channels::spi::AsynchronousChannelProvider> provider() { return call_static_method<"provider", jni::ref<java::nio::channels::spi::AsynchronousChannelProvider>>(); }
	jni::ref<java::nio::channels::AsynchronousChannelGroup> openAsynchronousChannelGroup(jint p1, jni::ref<java::util::concurrent::ThreadFactory> p2) { return call_method<"openAsynchronousChannelGroup", jni::ref<java::nio::channels::AsynchronousChannelGroup>>(p1, p2); }
	jni::ref<java::nio::channels::AsynchronousChannelGroup> openAsynchronousChannelGroup(jni::ref<java::util::concurrent::ExecutorService> p1, jint p2) { return call_method<"openAsynchronousChannelGroup", jni::ref<java::nio::channels::AsynchronousChannelGroup>>(p1, p2); }
	jni::ref<java::nio::channels::AsynchronousServerSocketChannel> openAsynchronousServerSocketChannel(jni::ref<java::nio::channels::AsynchronousChannelGroup> p1) { return call_method<"openAsynchronousServerSocketChannel", jni::ref<java::nio::channels::AsynchronousServerSocketChannel>>(p1); }
	jni::ref<java::nio::channels::AsynchronousSocketChannel> openAsynchronousSocketChannel(jni::ref<java::nio::channels::AsynchronousChannelGroup> p1) { return call_method<"openAsynchronousSocketChannel", jni::ref<java::nio::channels::AsynchronousSocketChannel>>(p1); }

protected:

	AsynchronousChannelProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ASYNCHRONOUSCHANNELPROVIDER
