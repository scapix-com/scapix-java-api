// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/ByteBuffer.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_MAPPEDBYTEBUFFER_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_MAPPEDBYTEBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio { class MappedByteBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::MappedByteBuffer>
{
	static constexpr fixed_string class_name = "java/nio/MappedByteBuffer";
	using base_classes = std::tuple<scapix::java_api::java::nio::ByteBuffer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_MAPPEDBYTEBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_MAPPEDBYTEBUFFER)
#define SCAPIX_JAVA_API_JAVA_NIO_MAPPEDBYTEBUFFER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::MappedByteBuffer : public jni::object_base<"java/nio/MappedByteBuffer",
	java::nio::ByteBuffer>
{
public:

	jboolean isLoaded() { return call_method<"isLoaded", jboolean>(); }
	jni::ref<java::nio::MappedByteBuffer> load() { return call_method<"load", jni::ref<java::nio::MappedByteBuffer>>(); }
	jni::ref<java::nio::MappedByteBuffer> force() { return call_method<"force", jni::ref<java::nio::MappedByteBuffer>>(); }
	jni::ref<java::nio::ByteBuffer> slice() { return call_method<"slice", jni::ref<java::nio::ByteBuffer>>(); }
	jni::ref<java::nio::MappedByteBuffer> slice(jint p1, jint p2) { return call_method<"slice", jni::ref<java::nio::MappedByteBuffer>>(p1, p2); }
	jni::ref<java::nio::ByteBuffer> duplicate() { return call_method<"duplicate", jni::ref<java::nio::ByteBuffer>>(); }

protected:

	MappedByteBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_MAPPEDBYTEBUFFER
