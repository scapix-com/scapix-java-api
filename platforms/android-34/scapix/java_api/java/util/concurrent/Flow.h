// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class Flow; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::Flow>
{
	static constexpr fixed_string class_name = "java/util/concurrent/Flow";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/Flow_Subscription.h>
#include <scapix/java_api/java/util/concurrent/Flow_Subscriber.h>
#include <scapix/java_api/java/util/concurrent/Flow_Publisher.h>
#include <scapix/java_api/java/util/concurrent/Flow_Processor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::Flow : public jni::object_base<"java/util/concurrent/Flow",
	java::lang::Object>
{
public:

	using Subscription = Flow_Subscription;
	using Subscriber = Flow_Subscriber;
	using Publisher = Flow_Publisher;
	using Processor = Flow_Processor;

	static jint defaultBufferSize() { return call_static_method<"defaultBufferSize", jint>(); }

protected:

	Flow(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW
