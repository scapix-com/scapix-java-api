// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_SOCKETOPTIONS_FWD
#define SCAPIX_JAVA_API_JAVA_NET_SOCKETOPTIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class SocketOptions; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::SocketOptions>
{
	static constexpr fixed_string class_name = "java/net/SocketOptions";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKETOPTIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_SOCKETOPTIONS)
#define SCAPIX_JAVA_API_JAVA_NET_SOCKETOPTIONS

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::net::SocketOptions : public jni::object_base<"java/net/SocketOptions",
	java::lang::Object>
{
public:

	static jint IP_MULTICAST_IF() { return get_static_field<"IP_MULTICAST_IF", jint>(); }
	static jint IP_MULTICAST_IF2() { return get_static_field<"IP_MULTICAST_IF2", jint>(); }
	static jint IP_MULTICAST_LOOP() { return get_static_field<"IP_MULTICAST_LOOP", jint>(); }
	static jint IP_TOS() { return get_static_field<"IP_TOS", jint>(); }
	static jint SO_BINDADDR() { return get_static_field<"SO_BINDADDR", jint>(); }
	static jint SO_BROADCAST() { return get_static_field<"SO_BROADCAST", jint>(); }
	static jint SO_KEEPALIVE() { return get_static_field<"SO_KEEPALIVE", jint>(); }
	static jint SO_LINGER() { return get_static_field<"SO_LINGER", jint>(); }
	static jint SO_OOBINLINE() { return get_static_field<"SO_OOBINLINE", jint>(); }
	static jint SO_RCVBUF() { return get_static_field<"SO_RCVBUF", jint>(); }
	static jint SO_REUSEADDR() { return get_static_field<"SO_REUSEADDR", jint>(); }
	static jint SO_REUSEPORT() { return get_static_field<"SO_REUSEPORT", jint>(); }
	static jint SO_SNDBUF() { return get_static_field<"SO_SNDBUF", jint>(); }
	static jint SO_TIMEOUT() { return get_static_field<"SO_TIMEOUT", jint>(); }
	static jint TCP_NODELAY() { return get_static_field<"TCP_NODELAY", jint>(); }

	void setOption(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"setOption", void>(p1, p2); }
	jni::ref<java::lang::Object> getOption(jint p1) { return call_method<"getOption", jni::ref<java::lang::Object>>(p1); }

protected:

	SocketOptions(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKETOPTIONS
