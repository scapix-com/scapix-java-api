// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_LOCALDATE_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_LOCALDATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time { class LocalDate; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::LocalDate>
{
	static constexpr fixed_string class_name = "java/time/LocalDate";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::temporal::Temporal, scapix::java_api::java::time::temporal::TemporalAdjuster, scapix::java_api::java::time::chrono::ChronoLocalDate, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_LOCALDATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_LOCALDATE)
#define SCAPIX_JAVA_API_JAVA_TIME_LOCALDATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/DayOfWeek.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/OffsetDateTime.h>
#include <scapix/java_api/java/time/OffsetTime.h>
#include <scapix/java_api/java/time/Period.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/ZonedDateTime.h>
#include <scapix/java_api/java/time/chrono/Era.h>
#include <scapix/java_api/java/time/chrono/IsoChronology.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::LocalDate : public jni::object_base<"java/time/LocalDate",
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::time::chrono::ChronoLocalDate,
	java::io::Serializable>
{
public:

	static jni::ref<java::time::LocalDate> EPOCH() { return get_static_field<"EPOCH", jni::ref<java::time::LocalDate>>(); }
	static jni::ref<java::time::LocalDate> MAX() { return get_static_field<"MAX", jni::ref<java::time::LocalDate>>(); }
	static jni::ref<java::time::LocalDate> MIN() { return get_static_field<"MIN", jni::ref<java::time::LocalDate>>(); }

	static jni::ref<java::time::LocalDate> now() { return call_static_method<"now", jni::ref<java::time::LocalDate>>(); }
	static jni::ref<java::time::LocalDate> now(jni::ref<java::time::ZoneId> zone) { return call_static_method<"now", jni::ref<java::time::LocalDate>>(zone); }
	static jni::ref<java::time::LocalDate> now(jni::ref<java::time::Clock> clock) { return call_static_method<"now", jni::ref<java::time::LocalDate>>(clock); }
	static jni::ref<java::time::LocalDate> of(jint year, jni::ref<java::time::Month> month, jint dayOfMonth) { return call_static_method<"of", jni::ref<java::time::LocalDate>>(year, month, dayOfMonth); }
	static jni::ref<java::time::LocalDate> of(jint year, jint month, jint dayOfMonth) { return call_static_method<"of", jni::ref<java::time::LocalDate>>(year, month, dayOfMonth); }
	static jni::ref<java::time::LocalDate> ofYearDay(jint year, jint dayOfYear) { return call_static_method<"ofYearDay", jni::ref<java::time::LocalDate>>(year, dayOfYear); }
	static jni::ref<java::time::LocalDate> ofInstant(jni::ref<java::time::Instant> instant, jni::ref<java::time::ZoneId> zone) { return call_static_method<"ofInstant", jni::ref<java::time::LocalDate>>(instant, zone); }
	static jni::ref<java::time::LocalDate> ofEpochDay(jlong epochDay) { return call_static_method<"ofEpochDay", jni::ref<java::time::LocalDate>>(epochDay); }
	static jni::ref<java::time::LocalDate> from(jni::ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<"from", jni::ref<java::time::LocalDate>>(temporal); }
	static jni::ref<java::time::LocalDate> parse(jni::ref<java::lang::CharSequence> text) { return call_static_method<"parse", jni::ref<java::time::LocalDate>>(text); }
	static jni::ref<java::time::LocalDate> parse(jni::ref<java::lang::CharSequence> text, jni::ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<"parse", jni::ref<java::time::LocalDate>>(text, formatter); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"isSupported", jboolean>(field); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"isSupported", jboolean>(unit); }
	jni::ref<java::time::temporal::ValueRange> range(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"range", jni::ref<java::time::temporal::ValueRange>>(field); }
	jint get(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"get", jint>(field); }
	jlong getLong(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"getLong", jlong>(field); }
	jni::ref<java::time::chrono::IsoChronology> getChronology() { return call_method<"getChronology", jni::ref<java::time::chrono::IsoChronology>>(); }
	jni::ref<java::time::chrono::Era> getEra() { return call_method<"getEra", jni::ref<java::time::chrono::Era>>(); }
	jint getYear() { return call_method<"getYear", jint>(); }
	jint getMonthValue() { return call_method<"getMonthValue", jint>(); }
	jni::ref<java::time::Month> getMonth() { return call_method<"getMonth", jni::ref<java::time::Month>>(); }
	jint getDayOfMonth() { return call_method<"getDayOfMonth", jint>(); }
	jint getDayOfYear() { return call_method<"getDayOfYear", jint>(); }
	jni::ref<java::time::DayOfWeek> getDayOfWeek() { return call_method<"getDayOfWeek", jni::ref<java::time::DayOfWeek>>(); }
	jboolean isLeapYear() { return call_method<"isLeapYear", jboolean>(); }
	jint lengthOfMonth() { return call_method<"lengthOfMonth", jint>(); }
	jint lengthOfYear() { return call_method<"lengthOfYear", jint>(); }
	jni::ref<java::time::LocalDate> with(jni::ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<"with", jni::ref<java::time::LocalDate>>(adjuster); }
	jni::ref<java::time::LocalDate> with(jni::ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<"with", jni::ref<java::time::LocalDate>>(field, newValue); }
	jni::ref<java::time::LocalDate> withYear(jint year) { return call_method<"withYear", jni::ref<java::time::LocalDate>>(year); }
	jni::ref<java::time::LocalDate> withMonth(jint month) { return call_method<"withMonth", jni::ref<java::time::LocalDate>>(month); }
	jni::ref<java::time::LocalDate> withDayOfMonth(jint dayOfMonth) { return call_method<"withDayOfMonth", jni::ref<java::time::LocalDate>>(dayOfMonth); }
	jni::ref<java::time::LocalDate> withDayOfYear(jint dayOfYear) { return call_method<"withDayOfYear", jni::ref<java::time::LocalDate>>(dayOfYear); }
	jni::ref<java::time::LocalDate> plus(jni::ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<"plus", jni::ref<java::time::LocalDate>>(amountToAdd); }
	jni::ref<java::time::LocalDate> plus(jlong amountToAdd, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"plus", jni::ref<java::time::LocalDate>>(amountToAdd, p2); }
	jni::ref<java::time::LocalDate> plusYears(jlong yearsToAdd) { return call_method<"plusYears", jni::ref<java::time::LocalDate>>(yearsToAdd); }
	jni::ref<java::time::LocalDate> plusMonths(jlong monthsToAdd) { return call_method<"plusMonths", jni::ref<java::time::LocalDate>>(monthsToAdd); }
	jni::ref<java::time::LocalDate> plusWeeks(jlong weeksToAdd) { return call_method<"plusWeeks", jni::ref<java::time::LocalDate>>(weeksToAdd); }
	jni::ref<java::time::LocalDate> plusDays(jlong daysToAdd) { return call_method<"plusDays", jni::ref<java::time::LocalDate>>(daysToAdd); }
	jni::ref<java::time::LocalDate> minus(jni::ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<"minus", jni::ref<java::time::LocalDate>>(amountToSubtract); }
	jni::ref<java::time::LocalDate> minus(jlong amountToSubtract, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"minus", jni::ref<java::time::LocalDate>>(amountToSubtract, p2); }
	jni::ref<java::time::LocalDate> minusYears(jlong yearsToSubtract) { return call_method<"minusYears", jni::ref<java::time::LocalDate>>(yearsToSubtract); }
	jni::ref<java::time::LocalDate> minusMonths(jlong monthsToSubtract) { return call_method<"minusMonths", jni::ref<java::time::LocalDate>>(monthsToSubtract); }
	jni::ref<java::time::LocalDate> minusWeeks(jlong weeksToSubtract) { return call_method<"minusWeeks", jni::ref<java::time::LocalDate>>(weeksToSubtract); }
	jni::ref<java::time::LocalDate> minusDays(jlong daysToSubtract) { return call_method<"minusDays", jni::ref<java::time::LocalDate>>(daysToSubtract); }
	jni::ref<java::lang::Object> query(jni::ref<java::time::temporal::TemporalQuery> query) { return call_method<"query", jni::ref<java::lang::Object>>(query); }
	jni::ref<java::time::temporal::Temporal> adjustInto(jni::ref<java::time::temporal::Temporal> temporal) { return call_method<"adjustInto", jni::ref<java::time::temporal::Temporal>>(temporal); }
	jlong until(jni::ref<java::time::temporal::Temporal> endExclusive, jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"until", jlong>(endExclusive, unit); }
	jni::ref<java::time::Period> until(jni::ref<java::time::chrono::ChronoLocalDate> endDateExclusive) { return call_method<"until", jni::ref<java::time::Period>>(endDateExclusive); }
	jni::ref<java::util::stream::Stream> datesUntil(jni::ref<java::time::LocalDate> endExclusive) { return call_method<"datesUntil", jni::ref<java::util::stream::Stream>>(endExclusive); }
	jni::ref<java::util::stream::Stream> datesUntil(jni::ref<java::time::LocalDate> endExclusive, jni::ref<java::time::Period> step) { return call_method<"datesUntil", jni::ref<java::util::stream::Stream>>(endExclusive, step); }
	jni::ref<java::lang::String> format(jni::ref<java::time::format::DateTimeFormatter> formatter) { return call_method<"format", jni::ref<java::lang::String>>(formatter); }
	jni::ref<java::time::LocalDateTime> atTime(jni::ref<java::time::LocalTime> time) { return call_method<"atTime", jni::ref<java::time::LocalDateTime>>(time); }
	jni::ref<java::time::LocalDateTime> atTime(jint hour, jint minute) { return call_method<"atTime", jni::ref<java::time::LocalDateTime>>(hour, minute); }
	jni::ref<java::time::LocalDateTime> atTime(jint hour, jint minute, jint second) { return call_method<"atTime", jni::ref<java::time::LocalDateTime>>(hour, minute, second); }
	jni::ref<java::time::LocalDateTime> atTime(jint hour, jint minute, jint second, jint nanoOfSecond) { return call_method<"atTime", jni::ref<java::time::LocalDateTime>>(hour, minute, second, nanoOfSecond); }
	jni::ref<java::time::OffsetDateTime> atTime(jni::ref<java::time::OffsetTime> time) { return call_method<"atTime", jni::ref<java::time::OffsetDateTime>>(time); }
	jni::ref<java::time::LocalDateTime> atStartOfDay() { return call_method<"atStartOfDay", jni::ref<java::time::LocalDateTime>>(); }
	jni::ref<java::time::ZonedDateTime> atStartOfDay(jni::ref<java::time::ZoneId> zone) { return call_method<"atStartOfDay", jni::ref<java::time::ZonedDateTime>>(zone); }
	jlong toEpochDay() { return call_method<"toEpochDay", jlong>(); }
	jlong toEpochSecond(jni::ref<java::time::LocalTime> time, jni::ref<java::time::ZoneOffset> offset) { return call_method<"toEpochSecond", jlong>(time, offset); }
	jint compareTo(jni::ref<java::time::chrono::ChronoLocalDate> other) { return call_method<"compareTo", jint>(other); }
	jboolean isAfter(jni::ref<java::time::chrono::ChronoLocalDate> other) { return call_method<"isAfter", jboolean>(other); }
	jboolean isBefore(jni::ref<java::time::chrono::ChronoLocalDate> other) { return call_method<"isBefore", jboolean>(other); }
	jboolean isEqual(jni::ref<java::time::chrono::ChronoLocalDate> other) { return call_method<"isEqual", jboolean>(other); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	LocalDate(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_LOCALDATE
