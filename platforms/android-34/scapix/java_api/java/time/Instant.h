// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_INSTANT_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_INSTANT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time { class Instant; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::Instant>
{
	static constexpr fixed_string class_name = "java/time/Instant";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::temporal::Temporal, scapix::java_api::java::time::temporal::TemporalAdjuster, scapix::java_api::java::lang::Comparable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_INSTANT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_INSTANT)
#define SCAPIX_JAVA_API_JAVA_TIME_INSTANT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/OffsetDateTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/ZonedDateTime.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::Instant : public jni::object_base<"java/time/Instant",
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static jni::ref<java::time::Instant> EPOCH() { return get_static_field<"EPOCH", jni::ref<java::time::Instant>>(); }
	static jni::ref<java::time::Instant> MAX() { return get_static_field<"MAX", jni::ref<java::time::Instant>>(); }
	static jni::ref<java::time::Instant> MIN() { return get_static_field<"MIN", jni::ref<java::time::Instant>>(); }

	static jni::ref<java::time::Instant> now() { return call_static_method<"now", jni::ref<java::time::Instant>>(); }
	static jni::ref<java::time::Instant> now(jni::ref<java::time::Clock> clock) { return call_static_method<"now", jni::ref<java::time::Instant>>(clock); }
	static jni::ref<java::time::Instant> ofEpochSecond(jlong epochSecond) { return call_static_method<"ofEpochSecond", jni::ref<java::time::Instant>>(epochSecond); }
	static jni::ref<java::time::Instant> ofEpochSecond(jlong epochSecond, jlong p2) { return call_static_method<"ofEpochSecond", jni::ref<java::time::Instant>>(epochSecond, p2); }
	static jni::ref<java::time::Instant> ofEpochMilli(jlong epochMilli) { return call_static_method<"ofEpochMilli", jni::ref<java::time::Instant>>(epochMilli); }
	static jni::ref<java::time::Instant> from(jni::ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<"from", jni::ref<java::time::Instant>>(temporal); }
	static jni::ref<java::time::Instant> parse(jni::ref<java::lang::CharSequence> text) { return call_static_method<"parse", jni::ref<java::time::Instant>>(text); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"isSupported", jboolean>(field); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"isSupported", jboolean>(unit); }
	jni::ref<java::time::temporal::ValueRange> range(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"range", jni::ref<java::time::temporal::ValueRange>>(field); }
	jint get(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"get", jint>(field); }
	jlong getLong(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"getLong", jlong>(field); }
	jlong getEpochSecond() { return call_method<"getEpochSecond", jlong>(); }
	jint getNano() { return call_method<"getNano", jint>(); }
	jni::ref<java::time::Instant> with(jni::ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<"with", jni::ref<java::time::Instant>>(adjuster); }
	jni::ref<java::time::Instant> with(jni::ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<"with", jni::ref<java::time::Instant>>(field, newValue); }
	jni::ref<java::time::Instant> truncatedTo(jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"truncatedTo", jni::ref<java::time::Instant>>(unit); }
	jni::ref<java::time::Instant> plus(jni::ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<"plus", jni::ref<java::time::Instant>>(amountToAdd); }
	jni::ref<java::time::Instant> plus(jlong amountToAdd, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"plus", jni::ref<java::time::Instant>>(amountToAdd, p2); }
	jni::ref<java::time::Instant> plusSeconds(jlong secondsToAdd) { return call_method<"plusSeconds", jni::ref<java::time::Instant>>(secondsToAdd); }
	jni::ref<java::time::Instant> plusMillis(jlong millisToAdd) { return call_method<"plusMillis", jni::ref<java::time::Instant>>(millisToAdd); }
	jni::ref<java::time::Instant> plusNanos(jlong nanosToAdd) { return call_method<"plusNanos", jni::ref<java::time::Instant>>(nanosToAdd); }
	jni::ref<java::time::Instant> minus(jni::ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<"minus", jni::ref<java::time::Instant>>(amountToSubtract); }
	jni::ref<java::time::Instant> minus(jlong amountToSubtract, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"minus", jni::ref<java::time::Instant>>(amountToSubtract, p2); }
	jni::ref<java::time::Instant> minusSeconds(jlong secondsToSubtract) { return call_method<"minusSeconds", jni::ref<java::time::Instant>>(secondsToSubtract); }
	jni::ref<java::time::Instant> minusMillis(jlong millisToSubtract) { return call_method<"minusMillis", jni::ref<java::time::Instant>>(millisToSubtract); }
	jni::ref<java::time::Instant> minusNanos(jlong nanosToSubtract) { return call_method<"minusNanos", jni::ref<java::time::Instant>>(nanosToSubtract); }
	jni::ref<java::lang::Object> query(jni::ref<java::time::temporal::TemporalQuery> query) { return call_method<"query", jni::ref<java::lang::Object>>(query); }
	jni::ref<java::time::temporal::Temporal> adjustInto(jni::ref<java::time::temporal::Temporal> temporal) { return call_method<"adjustInto", jni::ref<java::time::temporal::Temporal>>(temporal); }
	jlong until(jni::ref<java::time::temporal::Temporal> endExclusive, jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"until", jlong>(endExclusive, unit); }
	jni::ref<java::time::OffsetDateTime> atOffset(jni::ref<java::time::ZoneOffset> offset) { return call_method<"atOffset", jni::ref<java::time::OffsetDateTime>>(offset); }
	jni::ref<java::time::ZonedDateTime> atZone(jni::ref<java::time::ZoneId> zone) { return call_method<"atZone", jni::ref<java::time::ZonedDateTime>>(zone); }
	jlong toEpochMilli() { return call_method<"toEpochMilli", jlong>(); }
	jint compareTo(jni::ref<java::time::Instant> otherInstant) { return call_method<"compareTo", jint>(otherInstant); }
	jboolean isAfter(jni::ref<java::time::Instant> otherInstant) { return call_method<"isAfter", jboolean>(otherInstant); }
	jboolean isBefore(jni::ref<java::time::Instant> otherInstant) { return call_method<"isBefore", jboolean>(otherInstant); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Instant(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_INSTANT
