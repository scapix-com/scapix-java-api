// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/chrono/ChronoZonedDateTime.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_ZONEDDATETIME_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_ZONEDDATETIME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time { class ZonedDateTime; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::ZonedDateTime>
{
	static constexpr fixed_string class_name = "java/time/ZonedDateTime";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::temporal::Temporal, scapix::java_api::java::time::chrono::ChronoZonedDateTime, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_ZONEDDATETIME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_ZONEDDATETIME)
#define SCAPIX_JAVA_API_JAVA_TIME_ZONEDDATETIME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/DayOfWeek.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/LocalDateTime.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/OffsetDateTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::ZonedDateTime : public jni::object_base<"java/time/ZonedDateTime",
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::chrono::ChronoZonedDateTime,
	java::io::Serializable>
{
public:

	static jni::ref<java::time::ZonedDateTime> now() { return call_static_method<"now", jni::ref<java::time::ZonedDateTime>>(); }
	static jni::ref<java::time::ZonedDateTime> now(jni::ref<java::time::ZoneId> zone) { return call_static_method<"now", jni::ref<java::time::ZonedDateTime>>(zone); }
	static jni::ref<java::time::ZonedDateTime> now(jni::ref<java::time::Clock> clock) { return call_static_method<"now", jni::ref<java::time::ZonedDateTime>>(clock); }
	static jni::ref<java::time::ZonedDateTime> of(jni::ref<java::time::LocalDate> date, jni::ref<java::time::LocalTime> time, jni::ref<java::time::ZoneId> zone) { return call_static_method<"of", jni::ref<java::time::ZonedDateTime>>(date, time, zone); }
	static jni::ref<java::time::ZonedDateTime> of(jni::ref<java::time::LocalDateTime> localDateTime, jni::ref<java::time::ZoneId> zone) { return call_static_method<"of", jni::ref<java::time::ZonedDateTime>>(localDateTime, zone); }
	static jni::ref<java::time::ZonedDateTime> of(jint year, jint month, jint dayOfMonth, jint hour, jint minute, jint second, jint nanoOfSecond, jni::ref<java::time::ZoneId> zone) { return call_static_method<"of", jni::ref<java::time::ZonedDateTime>>(year, month, dayOfMonth, hour, minute, second, nanoOfSecond, zone); }
	static jni::ref<java::time::ZonedDateTime> ofLocal(jni::ref<java::time::LocalDateTime> localDateTime, jni::ref<java::time::ZoneId> zone, jni::ref<java::time::ZoneOffset> preferredOffset) { return call_static_method<"ofLocal", jni::ref<java::time::ZonedDateTime>>(localDateTime, zone, preferredOffset); }
	static jni::ref<java::time::ZonedDateTime> ofInstant(jni::ref<java::time::Instant> instant, jni::ref<java::time::ZoneId> zone) { return call_static_method<"ofInstant", jni::ref<java::time::ZonedDateTime>>(instant, zone); }
	static jni::ref<java::time::ZonedDateTime> ofInstant(jni::ref<java::time::LocalDateTime> localDateTime, jni::ref<java::time::ZoneOffset> offset, jni::ref<java::time::ZoneId> zone) { return call_static_method<"ofInstant", jni::ref<java::time::ZonedDateTime>>(localDateTime, offset, zone); }
	static jni::ref<java::time::ZonedDateTime> ofStrict(jni::ref<java::time::LocalDateTime> localDateTime, jni::ref<java::time::ZoneOffset> offset, jni::ref<java::time::ZoneId> zone) { return call_static_method<"ofStrict", jni::ref<java::time::ZonedDateTime>>(localDateTime, offset, zone); }
	static jni::ref<java::time::ZonedDateTime> from(jni::ref<java::time::temporal::TemporalAccessor> temporal) { return call_static_method<"from", jni::ref<java::time::ZonedDateTime>>(temporal); }
	static jni::ref<java::time::ZonedDateTime> parse(jni::ref<java::lang::CharSequence> text) { return call_static_method<"parse", jni::ref<java::time::ZonedDateTime>>(text); }
	static jni::ref<java::time::ZonedDateTime> parse(jni::ref<java::lang::CharSequence> text, jni::ref<java::time::format::DateTimeFormatter> formatter) { return call_static_method<"parse", jni::ref<java::time::ZonedDateTime>>(text, formatter); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"isSupported", jboolean>(field); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"isSupported", jboolean>(unit); }
	jni::ref<java::time::temporal::ValueRange> range(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"range", jni::ref<java::time::temporal::ValueRange>>(field); }
	jint get(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"get", jint>(field); }
	jlong getLong(jni::ref<java::time::temporal::TemporalField> field) { return call_method<"getLong", jlong>(field); }
	jni::ref<java::time::ZoneOffset> getOffset() { return call_method<"getOffset", jni::ref<java::time::ZoneOffset>>(); }
	jni::ref<java::time::ZonedDateTime> withEarlierOffsetAtOverlap() { return call_method<"withEarlierOffsetAtOverlap", jni::ref<java::time::ZonedDateTime>>(); }
	jni::ref<java::time::ZonedDateTime> withLaterOffsetAtOverlap() { return call_method<"withLaterOffsetAtOverlap", jni::ref<java::time::ZonedDateTime>>(); }
	jni::ref<java::time::ZoneId> getZone() { return call_method<"getZone", jni::ref<java::time::ZoneId>>(); }
	jni::ref<java::time::ZonedDateTime> withZoneSameLocal(jni::ref<java::time::ZoneId> zone) { return call_method<"withZoneSameLocal", jni::ref<java::time::ZonedDateTime>>(zone); }
	jni::ref<java::time::ZonedDateTime> withZoneSameInstant(jni::ref<java::time::ZoneId> zone) { return call_method<"withZoneSameInstant", jni::ref<java::time::ZonedDateTime>>(zone); }
	jni::ref<java::time::ZonedDateTime> withFixedOffsetZone() { return call_method<"withFixedOffsetZone", jni::ref<java::time::ZonedDateTime>>(); }
	jni::ref<java::time::LocalDateTime> toLocalDateTime() { return call_method<"toLocalDateTime", jni::ref<java::time::LocalDateTime>>(); }
	jni::ref<java::time::LocalDate> toLocalDate() { return call_method<"toLocalDate", jni::ref<java::time::LocalDate>>(); }
	jint getYear() { return call_method<"getYear", jint>(); }
	jint getMonthValue() { return call_method<"getMonthValue", jint>(); }
	jni::ref<java::time::Month> getMonth() { return call_method<"getMonth", jni::ref<java::time::Month>>(); }
	jint getDayOfMonth() { return call_method<"getDayOfMonth", jint>(); }
	jint getDayOfYear() { return call_method<"getDayOfYear", jint>(); }
	jni::ref<java::time::DayOfWeek> getDayOfWeek() { return call_method<"getDayOfWeek", jni::ref<java::time::DayOfWeek>>(); }
	jni::ref<java::time::LocalTime> toLocalTime() { return call_method<"toLocalTime", jni::ref<java::time::LocalTime>>(); }
	jint getHour() { return call_method<"getHour", jint>(); }
	jint getMinute() { return call_method<"getMinute", jint>(); }
	jint getSecond() { return call_method<"getSecond", jint>(); }
	jint getNano() { return call_method<"getNano", jint>(); }
	jni::ref<java::time::ZonedDateTime> with(jni::ref<java::time::temporal::TemporalAdjuster> adjuster) { return call_method<"with", jni::ref<java::time::ZonedDateTime>>(adjuster); }
	jni::ref<java::time::ZonedDateTime> with(jni::ref<java::time::temporal::TemporalField> field, jlong newValue) { return call_method<"with", jni::ref<java::time::ZonedDateTime>>(field, newValue); }
	jni::ref<java::time::ZonedDateTime> withYear(jint year) { return call_method<"withYear", jni::ref<java::time::ZonedDateTime>>(year); }
	jni::ref<java::time::ZonedDateTime> withMonth(jint month) { return call_method<"withMonth", jni::ref<java::time::ZonedDateTime>>(month); }
	jni::ref<java::time::ZonedDateTime> withDayOfMonth(jint dayOfMonth) { return call_method<"withDayOfMonth", jni::ref<java::time::ZonedDateTime>>(dayOfMonth); }
	jni::ref<java::time::ZonedDateTime> withDayOfYear(jint dayOfYear) { return call_method<"withDayOfYear", jni::ref<java::time::ZonedDateTime>>(dayOfYear); }
	jni::ref<java::time::ZonedDateTime> withHour(jint hour) { return call_method<"withHour", jni::ref<java::time::ZonedDateTime>>(hour); }
	jni::ref<java::time::ZonedDateTime> withMinute(jint minute) { return call_method<"withMinute", jni::ref<java::time::ZonedDateTime>>(minute); }
	jni::ref<java::time::ZonedDateTime> withSecond(jint second) { return call_method<"withSecond", jni::ref<java::time::ZonedDateTime>>(second); }
	jni::ref<java::time::ZonedDateTime> withNano(jint nanoOfSecond) { return call_method<"withNano", jni::ref<java::time::ZonedDateTime>>(nanoOfSecond); }
	jni::ref<java::time::ZonedDateTime> truncatedTo(jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"truncatedTo", jni::ref<java::time::ZonedDateTime>>(unit); }
	jni::ref<java::time::ZonedDateTime> plus(jni::ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<"plus", jni::ref<java::time::ZonedDateTime>>(amountToAdd); }
	jni::ref<java::time::ZonedDateTime> plus(jlong amountToAdd, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"plus", jni::ref<java::time::ZonedDateTime>>(amountToAdd, p2); }
	jni::ref<java::time::ZonedDateTime> plusYears(jlong years) { return call_method<"plusYears", jni::ref<java::time::ZonedDateTime>>(years); }
	jni::ref<java::time::ZonedDateTime> plusMonths(jlong months) { return call_method<"plusMonths", jni::ref<java::time::ZonedDateTime>>(months); }
	jni::ref<java::time::ZonedDateTime> plusWeeks(jlong weeks) { return call_method<"plusWeeks", jni::ref<java::time::ZonedDateTime>>(weeks); }
	jni::ref<java::time::ZonedDateTime> plusDays(jlong days) { return call_method<"plusDays", jni::ref<java::time::ZonedDateTime>>(days); }
	jni::ref<java::time::ZonedDateTime> plusHours(jlong hours) { return call_method<"plusHours", jni::ref<java::time::ZonedDateTime>>(hours); }
	jni::ref<java::time::ZonedDateTime> plusMinutes(jlong minutes) { return call_method<"plusMinutes", jni::ref<java::time::ZonedDateTime>>(minutes); }
	jni::ref<java::time::ZonedDateTime> plusSeconds(jlong seconds) { return call_method<"plusSeconds", jni::ref<java::time::ZonedDateTime>>(seconds); }
	jni::ref<java::time::ZonedDateTime> plusNanos(jlong nanos) { return call_method<"plusNanos", jni::ref<java::time::ZonedDateTime>>(nanos); }
	jni::ref<java::time::ZonedDateTime> minus(jni::ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<"minus", jni::ref<java::time::ZonedDateTime>>(amountToSubtract); }
	jni::ref<java::time::ZonedDateTime> minus(jlong amountToSubtract, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"minus", jni::ref<java::time::ZonedDateTime>>(amountToSubtract, p2); }
	jni::ref<java::time::ZonedDateTime> minusYears(jlong years) { return call_method<"minusYears", jni::ref<java::time::ZonedDateTime>>(years); }
	jni::ref<java::time::ZonedDateTime> minusMonths(jlong months) { return call_method<"minusMonths", jni::ref<java::time::ZonedDateTime>>(months); }
	jni::ref<java::time::ZonedDateTime> minusWeeks(jlong weeks) { return call_method<"minusWeeks", jni::ref<java::time::ZonedDateTime>>(weeks); }
	jni::ref<java::time::ZonedDateTime> minusDays(jlong days) { return call_method<"minusDays", jni::ref<java::time::ZonedDateTime>>(days); }
	jni::ref<java::time::ZonedDateTime> minusHours(jlong hours) { return call_method<"minusHours", jni::ref<java::time::ZonedDateTime>>(hours); }
	jni::ref<java::time::ZonedDateTime> minusMinutes(jlong minutes) { return call_method<"minusMinutes", jni::ref<java::time::ZonedDateTime>>(minutes); }
	jni::ref<java::time::ZonedDateTime> minusSeconds(jlong seconds) { return call_method<"minusSeconds", jni::ref<java::time::ZonedDateTime>>(seconds); }
	jni::ref<java::time::ZonedDateTime> minusNanos(jlong nanos) { return call_method<"minusNanos", jni::ref<java::time::ZonedDateTime>>(nanos); }
	jni::ref<java::lang::Object> query(jni::ref<java::time::temporal::TemporalQuery> query) { return call_method<"query", jni::ref<java::lang::Object>>(query); }
	jlong until(jni::ref<java::time::temporal::Temporal> endExclusive, jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"until", jlong>(endExclusive, unit); }
	jni::ref<java::lang::String> format(jni::ref<java::time::format::DateTimeFormatter> formatter) { return call_method<"format", jni::ref<java::lang::String>>(formatter); }
	jni::ref<java::time::OffsetDateTime> toOffsetDateTime() { return call_method<"toOffsetDateTime", jni::ref<java::time::OffsetDateTime>>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ZonedDateTime(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_ZONEDDATETIME
