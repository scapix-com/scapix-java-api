// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_SECURITY_IDENTITY_IDENTITYCREDENTIAL_FWD
#define SCAPIX_JAVA_API_ANDROID_SECURITY_IDENTITY_IDENTITYCREDENTIAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::security::identity { class IdentityCredential; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::security::identity::IdentityCredential>
{
	static constexpr fixed_string class_name = "android/security/identity/IdentityCredential";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SECURITY_IDENTITY_IDENTITYCREDENTIAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_SECURITY_IDENTITY_IDENTITYCREDENTIAL)
#define SCAPIX_JAVA_API_ANDROID_SECURITY_IDENTITY_IDENTITYCREDENTIAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/security/identity/PersonalizationData.h>
#include <scapix/java_api/android/security/identity/ResultData.h>
#include <scapix/java_api/java/security/KeyPair.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::security::identity::IdentityCredential : public jni::object_base<"android/security/identity/IdentityCredential",
	java::lang::Object>
{
public:

	jni::ref<java::security::KeyPair> createEphemeralKeyPair() { return call_method<"createEphemeralKeyPair", jni::ref<java::security::KeyPair>>(); }
	void setReaderEphemeralPublicKey(jni::ref<java::security::PublicKey> p1) { return call_method<"setReaderEphemeralPublicKey", void>(p1); }
	jni::ref<jni::array<jbyte>> encryptMessageToReader(jni::ref<jni::array<jbyte>> p1) { return call_method<"encryptMessageToReader", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jbyte>> decryptMessageFromReader(jni::ref<jni::array<jbyte>> p1) { return call_method<"decryptMessageFromReader", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<java::util::Collection> getCredentialKeyCertificateChain() { return call_method<"getCredentialKeyCertificateChain", jni::ref<java::util::Collection>>(); }
	void setAllowUsingExhaustedKeys(jboolean p1) { return call_method<"setAllowUsingExhaustedKeys", void>(p1); }
	void setAllowUsingExpiredKeys(jboolean allowUsingExpiredKeys) { return call_method<"setAllowUsingExpiredKeys", void>(allowUsingExpiredKeys); }
	jni::ref<android::security::identity::ResultData> getEntries(jni::ref<jni::array<jbyte>> p1, jni::ref<java::util::Map> p2, jni::ref<jni::array<jbyte>> p3, jni::ref<jni::array<jbyte>> p4) { return call_method<"getEntries", jni::ref<android::security::identity::ResultData>>(p1, p2, p3, p4); }
	void setAvailableAuthenticationKeys(jint p1, jint p2) { return call_method<"setAvailableAuthenticationKeys", void>(p1, p2); }
	jni::ref<java::util::Collection> getAuthKeysNeedingCertification() { return call_method<"getAuthKeysNeedingCertification", jni::ref<java::util::Collection>>(); }
	void storeStaticAuthenticationData(jni::ref<java::security::cert::X509Certificate> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"storeStaticAuthenticationData", void>(p1, p2); }
	void storeStaticAuthenticationData(jni::ref<java::security::cert::X509Certificate> authenticationKey, jni::ref<java::time::Instant> expirationDate, jni::ref<jni::array<jbyte>> staticAuthData) { return call_method<"storeStaticAuthenticationData", void>(authenticationKey, expirationDate, staticAuthData); }
	jni::ref<jni::array<jint>> getAuthenticationDataUsageCount() { return call_method<"getAuthenticationDataUsageCount", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<jbyte>> proveOwnership(jni::ref<jni::array<jbyte>> challenge) { return call_method<"proveOwnership", jni::ref<jni::array<jbyte>>>(challenge); }
	jni::ref<jni::array<jbyte>> delete_(jni::ref<jni::array<jbyte>> challenge) { return call_method<"delete", jni::ref<jni::array<jbyte>>>(challenge); }
	jni::ref<jni::array<jbyte>> update(jni::ref<android::security::identity::PersonalizationData> personalizationData) { return call_method<"update", jni::ref<jni::array<jbyte>>>(personalizationData); }
	void setAvailableAuthenticationKeys(jint keyCount, jint maxUsesPerKey, jlong minValidTimeMillis) { return call_method<"setAvailableAuthenticationKeys", void>(keyCount, maxUsesPerKey, minValidTimeMillis); }
	jni::ref<java::util::List> getAuthenticationKeyMetadata() { return call_method<"getAuthenticationKeyMetadata", jni::ref<java::util::List>>(); }

protected:

	IdentityCredential(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SECURITY_IDENTITY_IDENTITYCREDENTIAL
