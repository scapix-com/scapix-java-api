// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_ACCESSIBILITYDELEGATE_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_ACCESSIBILITYDELEGATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class View_AccessibilityDelegate; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::View_AccessibilityDelegate>
{
	static constexpr fixed_string class_name = "android/view/View$AccessibilityDelegate";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_ACCESSIBILITYDELEGATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_ACCESSIBILITYDELEGATE)
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_ACCESSIBILITYDELEGATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeProvider.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::View_AccessibilityDelegate : public jni::object_base<"android/view/View$AccessibilityDelegate",
	java::lang::Object>
{
public:

	static jni::ref<android::view::View_AccessibilityDelegate> new_object() { return base_::new_object(); }
	void sendAccessibilityEvent(jni::ref<android::view::View> host, jint eventType) { return call_method<"sendAccessibilityEvent", void>(host, eventType); }
	jboolean performAccessibilityAction(jni::ref<android::view::View> host, jint action, jni::ref<android::os::Bundle> args) { return call_method<"performAccessibilityAction", jboolean>(host, action, args); }
	void sendAccessibilityEventUnchecked(jni::ref<android::view::View> host, jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"sendAccessibilityEventUnchecked", void>(host, event); }
	jboolean dispatchPopulateAccessibilityEvent(jni::ref<android::view::View> host, jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"dispatchPopulateAccessibilityEvent", jboolean>(host, event); }
	void onPopulateAccessibilityEvent(jni::ref<android::view::View> host, jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onPopulateAccessibilityEvent", void>(host, event); }
	void onInitializeAccessibilityEvent(jni::ref<android::view::View> host, jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onInitializeAccessibilityEvent", void>(host, event); }
	void onInitializeAccessibilityNodeInfo(jni::ref<android::view::View> host, jni::ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<"onInitializeAccessibilityNodeInfo", void>(host, info); }
	void addExtraDataToAccessibilityNodeInfo(jni::ref<android::view::View> host, jni::ref<android::view::accessibility::AccessibilityNodeInfo> info, jni::ref<java::lang::String> extraDataKey, jni::ref<android::os::Bundle> arguments) { return call_method<"addExtraDataToAccessibilityNodeInfo", void>(host, info, extraDataKey, arguments); }
	jboolean onRequestSendAccessibilityEvent(jni::ref<android::view::ViewGroup> host, jni::ref<android::view::View> child, jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onRequestSendAccessibilityEvent", jboolean>(host, child, event); }
	jni::ref<android::view::accessibility::AccessibilityNodeProvider> getAccessibilityNodeProvider(jni::ref<android::view::View> host) { return call_method<"getAccessibilityNodeProvider", jni::ref<android::view::accessibility::AccessibilityNodeProvider>>(host); }

protected:

	View_AccessibilityDelegate(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_ACCESSIBILITYDELEGATE
