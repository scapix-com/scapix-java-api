// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_TEXTAPPEARANCEINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_TEXTAPPEARANCEINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::inputmethod { class TextAppearanceInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::inputmethod::TextAppearanceInfo>
{
	static constexpr fixed_string class_name = "android/view/inputmethod/TextAppearanceInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_TEXTAPPEARANCEINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_TEXTAPPEARANCEINFO)
#define SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_TEXTAPPEARANCEINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/LocaleList.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/view/inputmethod/TextAppearanceInfo_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::inputmethod::TextAppearanceInfo : public jni::object_base<"android/view/inputmethod/TextAppearanceInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = TextAppearanceInfo_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jfloat getTextSize() { return call_method<"getTextSize", jfloat>(); }
	jni::ref<android::os::LocaleList> getTextLocales() { return call_method<"getTextLocales", jni::ref<android::os::LocaleList>>(); }
	jni::ref<java::lang::String> getSystemFontFamilyName() { return call_method<"getSystemFontFamilyName", jni::ref<java::lang::String>>(); }
	jint getTextFontWeight() { return call_method<"getTextFontWeight", jint>(); }
	jint getTextStyle() { return call_method<"getTextStyle", jint>(); }
	jboolean isAllCaps() { return call_method<"isAllCaps", jboolean>(); }
	jfloat getShadowDx() { return call_method<"getShadowDx", jfloat>(); }
	jfloat getShadowDy() { return call_method<"getShadowDy", jfloat>(); }
	jfloat getShadowRadius() { return call_method<"getShadowRadius", jfloat>(); }
	jint getShadowColor() { return call_method<"getShadowColor", jint>(); }
	jboolean isElegantTextHeight() { return call_method<"isElegantTextHeight", jboolean>(); }
	jboolean isFallbackLineSpacing() { return call_method<"isFallbackLineSpacing", jboolean>(); }
	jfloat getLetterSpacing() { return call_method<"getLetterSpacing", jfloat>(); }
	jni::ref<java::lang::String> getFontFeatureSettings() { return call_method<"getFontFeatureSettings", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFontVariationSettings() { return call_method<"getFontVariationSettings", jni::ref<java::lang::String>>(); }
	jint getLineBreakStyle() { return call_method<"getLineBreakStyle", jint>(); }
	jint getLineBreakWordStyle() { return call_method<"getLineBreakWordStyle", jint>(); }
	jfloat getTextScaleX() { return call_method<"getTextScaleX", jfloat>(); }
	jint getHighlightTextColor() { return call_method<"getHighlightTextColor", jint>(); }
	jint getTextColor() { return call_method<"getTextColor", jint>(); }
	jint getHintTextColor() { return call_method<"getHintTextColor", jint>(); }
	jint getLinkTextColor() { return call_method<"getLinkTextColor", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	TextAppearanceInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_INPUTMETHOD_TEXTAPPEARANCEINFO
