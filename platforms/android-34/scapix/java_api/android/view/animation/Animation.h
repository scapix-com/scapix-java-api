// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_ANIMATION_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_ANIMATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::animation { class Animation; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::animation::Animation>
{
	static constexpr fixed_string class_name = "android/view/animation/Animation";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_ANIMATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_ANIMATION)
#define SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_ANIMATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/animation/Animation_AnimationListener.h>
#include <scapix/java_api/android/view/animation/Interpolator.h>
#include <scapix/java_api/android/view/animation/Transformation.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::animation::Animation : public jni::object_base<"android/view/animation/Animation",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using AnimationListener = Animation_AnimationListener;

	static jint ABSOLUTE() { return get_static_field<"ABSOLUTE", jint>(); }
	static jint INFINITE() { return get_static_field<"INFINITE", jint>(); }
	static jint RELATIVE_TO_PARENT() { return get_static_field<"RELATIVE_TO_PARENT", jint>(); }
	static jint RELATIVE_TO_SELF() { return get_static_field<"RELATIVE_TO_SELF", jint>(); }
	static jint RESTART() { return get_static_field<"RESTART", jint>(); }
	static jint REVERSE() { return get_static_field<"REVERSE", jint>(); }
	static jint START_ON_FIRST_FRAME() { return get_static_field<"START_ON_FIRST_FRAME", jint>(); }
	static jint ZORDER_BOTTOM() { return get_static_field<"ZORDER_BOTTOM", jint>(); }
	static jint ZORDER_NORMAL() { return get_static_field<"ZORDER_NORMAL", jint>(); }
	static jint ZORDER_TOP() { return get_static_field<"ZORDER_TOP", jint>(); }

	static jni::ref<android::view::animation::Animation> new_object() { return base_::new_object(); }
	static jni::ref<android::view::animation::Animation> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	void reset() { return call_method<"reset", void>(); }
	void cancel() { return call_method<"cancel", void>(); }
	jboolean isInitialized() { return call_method<"isInitialized", jboolean>(); }
	void initialize(jint width, jint height, jint parentWidth, jint parentHeight) { return call_method<"initialize", void>(width, height, parentWidth, parentHeight); }
	void setInterpolator(jni::ref<android::content::Context> context, jint resID) { return call_method<"setInterpolator", void>(context, resID); }
	void setInterpolator(jni::ref<android::view::animation::Interpolator> i) { return call_method<"setInterpolator", void>(i); }
	void setStartOffset(jlong startOffset) { return call_method<"setStartOffset", void>(startOffset); }
	void setDuration(jlong durationMillis) { return call_method<"setDuration", void>(durationMillis); }
	void restrictDuration(jlong durationMillis) { return call_method<"restrictDuration", void>(durationMillis); }
	void scaleCurrentDuration(jfloat scale) { return call_method<"scaleCurrentDuration", void>(scale); }
	void setStartTime(jlong startTimeMillis) { return call_method<"setStartTime", void>(startTimeMillis); }
	void start() { return call_method<"start", void>(); }
	void startNow() { return call_method<"startNow", void>(); }
	void setRepeatMode(jint repeatMode) { return call_method<"setRepeatMode", void>(repeatMode); }
	void setRepeatCount(jint repeatCount) { return call_method<"setRepeatCount", void>(repeatCount); }
	jboolean isFillEnabled() { return call_method<"isFillEnabled", jboolean>(); }
	void setFillEnabled(jboolean fillEnabled) { return call_method<"setFillEnabled", void>(fillEnabled); }
	void setFillBefore(jboolean fillBefore) { return call_method<"setFillBefore", void>(fillBefore); }
	void setFillAfter(jboolean fillAfter) { return call_method<"setFillAfter", void>(fillAfter); }
	void setZAdjustment(jint zAdjustment) { return call_method<"setZAdjustment", void>(zAdjustment); }
	void setBackgroundColor(jint bg) { return call_method<"setBackgroundColor", void>(bg); }
	void setDetachWallpaper(jboolean detachWallpaper) { return call_method<"setDetachWallpaper", void>(detachWallpaper); }
	void setShowBackdrop(jboolean showBackdrop) { return call_method<"setShowBackdrop", void>(showBackdrop); }
	void setBackdropColor(jint backdropColor) { return call_method<"setBackdropColor", void>(backdropColor); }
	jni::ref<android::view::animation::Interpolator> getInterpolator() { return call_method<"getInterpolator", jni::ref<android::view::animation::Interpolator>>(); }
	jlong getStartTime() { return call_method<"getStartTime", jlong>(); }
	jlong getDuration() { return call_method<"getDuration", jlong>(); }
	jlong getStartOffset() { return call_method<"getStartOffset", jlong>(); }
	jint getRepeatMode() { return call_method<"getRepeatMode", jint>(); }
	jint getRepeatCount() { return call_method<"getRepeatCount", jint>(); }
	jboolean getFillBefore() { return call_method<"getFillBefore", jboolean>(); }
	jboolean getFillAfter() { return call_method<"getFillAfter", jboolean>(); }
	jint getZAdjustment() { return call_method<"getZAdjustment", jint>(); }
	jint getBackgroundColor() { return call_method<"getBackgroundColor", jint>(); }
	jboolean getDetachWallpaper() { return call_method<"getDetachWallpaper", jboolean>(); }
	jboolean getShowBackdrop() { return call_method<"getShowBackdrop", jboolean>(); }
	jint getBackdropColor() { return call_method<"getBackdropColor", jint>(); }
	jboolean willChangeTransformationMatrix() { return call_method<"willChangeTransformationMatrix", jboolean>(); }
	jboolean willChangeBounds() { return call_method<"willChangeBounds", jboolean>(); }
	void setAnimationListener(jni::ref<android::view::animation::Animation_AnimationListener> listener) { return call_method<"setAnimationListener", void>(listener); }
	jlong computeDurationHint() { return call_method<"computeDurationHint", jlong>(); }
	jboolean getTransformation(jlong currentTime, jni::ref<android::view::animation::Transformation> p2) { return call_method<"getTransformation", jboolean>(currentTime, p2); }
	jboolean getTransformation(jlong currentTime, jni::ref<android::view::animation::Transformation> p2, jfloat outTransformation) { return call_method<"getTransformation", jboolean>(currentTime, p2, outTransformation); }
	jboolean hasStarted() { return call_method<"hasStarted", jboolean>(); }
	jboolean hasEnded() { return call_method<"hasEnded", jboolean>(); }

protected:

	Animation(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_ANIMATION
