// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::animation { class LayoutAnimationController; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::animation::LayoutAnimationController>
{
	static constexpr fixed_string class_name = "android/view/animation/LayoutAnimationController";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/animation/Animation.h>
#include <scapix/java_api/android/view/animation/Interpolator.h>
#include <scapix/java_api/android/view/animation/LayoutAnimationController_AnimationParameters.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::animation::LayoutAnimationController : public jni::object_base<"android/view/animation/LayoutAnimationController",
	java::lang::Object>
{
public:

	using AnimationParameters = LayoutAnimationController_AnimationParameters;

	static jint ORDER_NORMAL() { return get_static_field<"ORDER_NORMAL", jint>(); }
	static jint ORDER_RANDOM() { return get_static_field<"ORDER_RANDOM", jint>(); }
	static jint ORDER_REVERSE() { return get_static_field<"ORDER_REVERSE", jint>(); }

	static jni::ref<android::view::animation::LayoutAnimationController> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::view::animation::LayoutAnimationController> new_object(jni::ref<android::view::animation::Animation> animation) { return base_::new_object(animation); }
	static jni::ref<android::view::animation::LayoutAnimationController> new_object(jni::ref<android::view::animation::Animation> animation, jfloat delay) { return base_::new_object(animation, delay); }
	jint getOrder() { return call_method<"getOrder", jint>(); }
	void setOrder(jint order) { return call_method<"setOrder", void>(order); }
	void setAnimation(jni::ref<android::content::Context> context, jint resourceID) { return call_method<"setAnimation", void>(context, resourceID); }
	void setAnimation(jni::ref<android::view::animation::Animation> animation) { return call_method<"setAnimation", void>(animation); }
	jni::ref<android::view::animation::Animation> getAnimation() { return call_method<"getAnimation", jni::ref<android::view::animation::Animation>>(); }
	void setInterpolator(jni::ref<android::content::Context> context, jint resourceID) { return call_method<"setInterpolator", void>(context, resourceID); }
	void setInterpolator(jni::ref<android::view::animation::Interpolator> interpolator) { return call_method<"setInterpolator", void>(interpolator); }
	jni::ref<android::view::animation::Interpolator> getInterpolator() { return call_method<"getInterpolator", jni::ref<android::view::animation::Interpolator>>(); }
	jfloat getDelay() { return call_method<"getDelay", jfloat>(); }
	void setDelay(jfloat delay) { return call_method<"setDelay", void>(delay); }
	jboolean willOverlap() { return call_method<"willOverlap", jboolean>(); }
	void start() { return call_method<"start", void>(); }
	jni::ref<android::view::animation::Animation> getAnimationForView(jni::ref<android::view::View> view) { return call_method<"getAnimationForView", jni::ref<android::view::animation::Animation>>(view); }
	jboolean isDone() { return call_method<"isDone", jboolean>(); }

protected:

	LayoutAnimationController(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ANIMATION_LAYOUTANIMATIONCONTROLLER
