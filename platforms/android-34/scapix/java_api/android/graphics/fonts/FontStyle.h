// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONTSTYLE_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONTSTYLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics::fonts { class FontStyle; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::fonts::FontStyle>
{
	static constexpr fixed_string class_name = "android/graphics/fonts/FontStyle";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONTSTYLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONTSTYLE)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONTSTYLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::fonts::FontStyle : public jni::object_base<"android/graphics/fonts/FontStyle",
	java::lang::Object>
{
public:

	static jint FONT_SLANT_ITALIC() { return get_static_field<"FONT_SLANT_ITALIC", jint>(); }
	static jint FONT_SLANT_UPRIGHT() { return get_static_field<"FONT_SLANT_UPRIGHT", jint>(); }
	static jint FONT_WEIGHT_BLACK() { return get_static_field<"FONT_WEIGHT_BLACK", jint>(); }
	static jint FONT_WEIGHT_BOLD() { return get_static_field<"FONT_WEIGHT_BOLD", jint>(); }
	static jint FONT_WEIGHT_EXTRA_BOLD() { return get_static_field<"FONT_WEIGHT_EXTRA_BOLD", jint>(); }
	static jint FONT_WEIGHT_EXTRA_LIGHT() { return get_static_field<"FONT_WEIGHT_EXTRA_LIGHT", jint>(); }
	static jint FONT_WEIGHT_LIGHT() { return get_static_field<"FONT_WEIGHT_LIGHT", jint>(); }
	static jint FONT_WEIGHT_MAX() { return get_static_field<"FONT_WEIGHT_MAX", jint>(); }
	static jint FONT_WEIGHT_MEDIUM() { return get_static_field<"FONT_WEIGHT_MEDIUM", jint>(); }
	static jint FONT_WEIGHT_MIN() { return get_static_field<"FONT_WEIGHT_MIN", jint>(); }
	static jint FONT_WEIGHT_NORMAL() { return get_static_field<"FONT_WEIGHT_NORMAL", jint>(); }
	static jint FONT_WEIGHT_SEMI_BOLD() { return get_static_field<"FONT_WEIGHT_SEMI_BOLD", jint>(); }
	static jint FONT_WEIGHT_THIN() { return get_static_field<"FONT_WEIGHT_THIN", jint>(); }
	static jint FONT_WEIGHT_UNSPECIFIED() { return get_static_field<"FONT_WEIGHT_UNSPECIFIED", jint>(); }

	static jni::ref<android::graphics::fonts::FontStyle> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::fonts::FontStyle> new_object(jint weight, jint slant) { return base_::new_object(weight, slant); }
	jint getWeight() { return call_method<"getWeight", jint>(); }
	jint getSlant() { return call_method<"getSlant", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	FontStyle(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONTSTYLE
