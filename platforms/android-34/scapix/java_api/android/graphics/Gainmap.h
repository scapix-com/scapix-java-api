// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_GAINMAP_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_GAINMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Gainmap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Gainmap>
{
	static constexpr fixed_string class_name = "android/graphics/Gainmap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_GAINMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_GAINMAP)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_GAINMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Gainmap : public jni::object_base<"android/graphics/Gainmap",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::graphics::Gainmap> new_object(jni::ref<android::graphics::Bitmap> gainmapContents) { return base_::new_object(gainmapContents); }
	jni::ref<android::graphics::Bitmap> getGainmapContents() { return call_method<"getGainmapContents", jni::ref<android::graphics::Bitmap>>(); }
	void setGainmapContents(jni::ref<android::graphics::Bitmap> bitmap) { return call_method<"setGainmapContents", void>(bitmap); }
	void setRatioMin(jfloat r, jfloat g, jfloat b) { return call_method<"setRatioMin", void>(r, g, b); }
	jni::ref<jni::array<jfloat>> getRatioMin() { return call_method<"getRatioMin", jni::ref<jni::array<jfloat>>>(); }
	void setRatioMax(jfloat r, jfloat g, jfloat b) { return call_method<"setRatioMax", void>(r, g, b); }
	jni::ref<jni::array<jfloat>> getRatioMax() { return call_method<"getRatioMax", jni::ref<jni::array<jfloat>>>(); }
	void setGamma(jfloat r, jfloat g, jfloat b) { return call_method<"setGamma", void>(r, g, b); }
	jni::ref<jni::array<jfloat>> getGamma() { return call_method<"getGamma", jni::ref<jni::array<jfloat>>>(); }
	void setEpsilonSdr(jfloat r, jfloat g, jfloat b) { return call_method<"setEpsilonSdr", void>(r, g, b); }
	jni::ref<jni::array<jfloat>> getEpsilonSdr() { return call_method<"getEpsilonSdr", jni::ref<jni::array<jfloat>>>(); }
	void setEpsilonHdr(jfloat r, jfloat g, jfloat b) { return call_method<"setEpsilonHdr", void>(r, g, b); }
	jni::ref<jni::array<jfloat>> getEpsilonHdr() { return call_method<"getEpsilonHdr", jni::ref<jni::array<jfloat>>>(); }
	void setDisplayRatioForFullHdr(jfloat max) { return call_method<"setDisplayRatioForFullHdr", void>(max); }
	jfloat getDisplayRatioForFullHdr() { return call_method<"getDisplayRatioForFullHdr", jfloat>(); }
	void setMinDisplayRatioForHdrTransition(jfloat min) { return call_method<"setMinDisplayRatioForHdrTransition", void>(min); }
	jfloat getMinDisplayRatioForHdrTransition() { return call_method<"getMinDisplayRatioForHdrTransition", jfloat>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	Gainmap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_GAINMAP
