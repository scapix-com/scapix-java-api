// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_PATHMEASURE_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_PATHMEASURE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class PathMeasure; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::PathMeasure>
{
	static constexpr fixed_string class_name = "android/graphics/PathMeasure";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_PATHMEASURE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_PATHMEASURE)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_PATHMEASURE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Path.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::PathMeasure : public jni::object_base<"android/graphics/PathMeasure",
	java::lang::Object>
{
public:

	static jint POSITION_MATRIX_FLAG() { return get_static_field<"POSITION_MATRIX_FLAG", jint>(); }
	static jint TANGENT_MATRIX_FLAG() { return get_static_field<"TANGENT_MATRIX_FLAG", jint>(); }

	static jni::ref<android::graphics::PathMeasure> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::PathMeasure> new_object(jni::ref<android::graphics::Path> path, jboolean forceClosed) { return base_::new_object(path, forceClosed); }
	void setPath(jni::ref<android::graphics::Path> path, jboolean forceClosed) { return call_method<"setPath", void>(path, forceClosed); }
	jfloat getLength() { return call_method<"getLength", jfloat>(); }
	jboolean getPosTan(jfloat distance, jni::ref<jni::array<jfloat>> pos, jni::ref<jni::array<jfloat>> tan) { return call_method<"getPosTan", jboolean>(distance, pos, tan); }
	jboolean getMatrix(jfloat distance, jni::ref<android::graphics::Matrix> matrix, jint flags) { return call_method<"getMatrix", jboolean>(distance, matrix, flags); }
	jboolean getSegment(jfloat startD, jfloat stopD, jni::ref<android::graphics::Path> dst, jboolean startWithMoveTo) { return call_method<"getSegment", jboolean>(startD, stopD, dst, startWithMoveTo); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	jboolean nextContour() { return call_method<"nextContour", jboolean>(); }

protected:

	PathMeasure(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_PATHMEASURE
