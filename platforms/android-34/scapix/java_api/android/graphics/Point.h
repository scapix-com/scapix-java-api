// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_POINT_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_POINT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Point; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Point>
{
	static constexpr fixed_string class_name = "android/graphics/Point";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_POINT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_POINT)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_POINT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Point : public jni::object_base<"android/graphics/Point",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	jint x() { return get_field<"x", jint>(); }
	void x(jint v) { set_field<"x", jint>(v); }
	jint y() { return get_field<"y", jint>(); }
	void y(jint v) { set_field<"y", jint>(v); }

	static jni::ref<android::graphics::Point> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::Point> new_object(jint x, jint y) { return base_::new_object(x, y); }
	static jni::ref<android::graphics::Point> new_object(jni::ref<android::graphics::Point> src) { return base_::new_object(src); }
	void set(jint x, jint y) { return call_method<"set", void>(x, y); }
	void negate() { return call_method<"negate", void>(); }
	void offset(jint dx, jint dy) { return call_method<"offset", void>(dx, dy); }
	jboolean equals(jint x, jint y) { return call_method<"equals", jboolean>(x, y); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	void readFromParcel(jni::ref<android::os::Parcel> in) { return call_method<"readFromParcel", void>(in); }

protected:

	Point(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_POINT
