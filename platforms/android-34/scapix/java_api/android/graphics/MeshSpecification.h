// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESHSPECIFICATION_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESHSPECIFICATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class MeshSpecification; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::MeshSpecification>
{
	static constexpr fixed_string class_name = "android/graphics/MeshSpecification";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESHSPECIFICATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESHSPECIFICATION)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESHSPECIFICATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/ColorSpace.h>
#include <scapix/java_api/android/graphics/MeshSpecification_Attribute.h>
#include <scapix/java_api/android/graphics/MeshSpecification_Varying.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::MeshSpecification : public jni::object_base<"android/graphics/MeshSpecification",
	java::lang::Object>
{
public:

	using Varying = MeshSpecification_Varying;
	using Attribute = MeshSpecification_Attribute;

	static jint ALPHA_TYPE_OPAQUE() { return get_static_field<"ALPHA_TYPE_OPAQUE", jint>(); }
	static jint ALPHA_TYPE_PREMULTIPLIED() { return get_static_field<"ALPHA_TYPE_PREMULTIPLIED", jint>(); }
	static jint ALPHA_TYPE_UNKNOWN() { return get_static_field<"ALPHA_TYPE_UNKNOWN", jint>(); }
	static jint ALPHA_TYPE_UNPREMULTIPLIED() { return get_static_field<"ALPHA_TYPE_UNPREMULTIPLIED", jint>(); }
	static jint TYPE_FLOAT() { return get_static_field<"TYPE_FLOAT", jint>(); }
	static jint TYPE_FLOAT2() { return get_static_field<"TYPE_FLOAT2", jint>(); }
	static jint TYPE_FLOAT3() { return get_static_field<"TYPE_FLOAT3", jint>(); }
	static jint TYPE_FLOAT4() { return get_static_field<"TYPE_FLOAT4", jint>(); }
	static jint TYPE_UBYTE4() { return get_static_field<"TYPE_UBYTE4", jint>(); }

	static jni::ref<android::graphics::MeshSpecification> make(jni::ref<jni::array<android::graphics::MeshSpecification_Attribute>> attributes, jint vertexStride, jni::ref<jni::array<android::graphics::MeshSpecification_Varying>> varyings, jni::ref<java::lang::String> vertexShader, jni::ref<java::lang::String> fragmentShader) { return call_static_method<"make", jni::ref<android::graphics::MeshSpecification>>(attributes, vertexStride, varyings, vertexShader, fragmentShader); }
	static jni::ref<android::graphics::MeshSpecification> make(jni::ref<jni::array<android::graphics::MeshSpecification_Attribute>> attributes, jint vertexStride, jni::ref<jni::array<android::graphics::MeshSpecification_Varying>> varyings, jni::ref<java::lang::String> vertexShader, jni::ref<java::lang::String> fragmentShader, jni::ref<android::graphics::ColorSpace> colorSpace) { return call_static_method<"make", jni::ref<android::graphics::MeshSpecification>>(attributes, vertexStride, varyings, vertexShader, fragmentShader, colorSpace); }
	static jni::ref<android::graphics::MeshSpecification> make(jni::ref<jni::array<android::graphics::MeshSpecification_Attribute>> attributes, jint vertexStride, jni::ref<jni::array<android::graphics::MeshSpecification_Varying>> varyings, jni::ref<java::lang::String> vertexShader, jni::ref<java::lang::String> fragmentShader, jni::ref<android::graphics::ColorSpace> colorSpace, jint alphaType) { return call_static_method<"make", jni::ref<android::graphics::MeshSpecification>>(attributes, vertexStride, varyings, vertexShader, fragmentShader, colorSpace, alphaType); }

protected:

	MeshSpecification(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESHSPECIFICATION
