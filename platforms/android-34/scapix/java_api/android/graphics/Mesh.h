// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESH_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Mesh; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Mesh>
{
	static constexpr fixed_string class_name = "android/graphics/Mesh";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESH)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Color.h>
#include <scapix/java_api/android/graphics/MeshSpecification.h>
#include <scapix/java_api/android/graphics/RectF.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/ShortBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Mesh : public jni::object_base<"android/graphics/Mesh",
	java::lang::Object>
{
public:

	static jint TRIANGLES() { return get_static_field<"TRIANGLES", jint>(); }
	static jint TRIANGLE_STRIP() { return get_static_field<"TRIANGLE_STRIP", jint>(); }

	static jni::ref<android::graphics::Mesh> new_object(jni::ref<android::graphics::MeshSpecification> meshSpec, jint mode, jni::ref<java::nio::Buffer> vertexBuffer, jint vertexCount, jni::ref<android::graphics::RectF> bounds) { return base_::new_object(meshSpec, mode, vertexBuffer, vertexCount, bounds); }
	static jni::ref<android::graphics::Mesh> new_object(jni::ref<android::graphics::MeshSpecification> meshSpec, jint mode, jni::ref<java::nio::Buffer> vertexBuffer, jint vertexCount, jni::ref<java::nio::ShortBuffer> indexBuffer, jni::ref<android::graphics::RectF> bounds) { return base_::new_object(meshSpec, mode, vertexBuffer, vertexCount, indexBuffer, bounds); }
	void setColorUniform(jni::ref<java::lang::String> uniformName, jint color) { return call_method<"setColorUniform", void>(uniformName, color); }
	void setColorUniform(jni::ref<java::lang::String> uniformName, jlong color) { return call_method<"setColorUniform", void>(uniformName, color); }
	void setColorUniform(jni::ref<java::lang::String> uniformName, jni::ref<android::graphics::Color> color) { return call_method<"setColorUniform", void>(uniformName, color); }
	void setFloatUniform(jni::ref<java::lang::String> uniformName, jfloat value) { return call_method<"setFloatUniform", void>(uniformName, value); }
	void setFloatUniform(jni::ref<java::lang::String> uniformName, jfloat value1, jfloat value2) { return call_method<"setFloatUniform", void>(uniformName, value1, value2); }
	void setFloatUniform(jni::ref<java::lang::String> uniformName, jfloat value1, jfloat value2, jfloat value3) { return call_method<"setFloatUniform", void>(uniformName, value1, value2, value3); }
	void setFloatUniform(jni::ref<java::lang::String> uniformName, jfloat value1, jfloat value2, jfloat value3, jfloat value4) { return call_method<"setFloatUniform", void>(uniformName, value1, value2, value3, value4); }
	void setFloatUniform(jni::ref<java::lang::String> uniformName, jni::ref<jni::array<jfloat>> values) { return call_method<"setFloatUniform", void>(uniformName, values); }
	void setIntUniform(jni::ref<java::lang::String> uniformName, jint value) { return call_method<"setIntUniform", void>(uniformName, value); }
	void setIntUniform(jni::ref<java::lang::String> uniformName, jint value1, jint value2) { return call_method<"setIntUniform", void>(uniformName, value1, value2); }
	void setIntUniform(jni::ref<java::lang::String> uniformName, jint value1, jint value2, jint value3) { return call_method<"setIntUniform", void>(uniformName, value1, value2, value3); }
	void setIntUniform(jni::ref<java::lang::String> uniformName, jint value1, jint value2, jint value3, jint value4) { return call_method<"setIntUniform", void>(uniformName, value1, value2, value3, value4); }
	void setIntUniform(jni::ref<java::lang::String> uniformName, jni::ref<jni::array<jint>> values) { return call_method<"setIntUniform", void>(uniformName, values); }

protected:

	Mesh(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_MESH
