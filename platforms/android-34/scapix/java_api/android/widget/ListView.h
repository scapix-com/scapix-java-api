// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/AbsListView.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_LISTVIEW_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_LISTVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class ListView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::ListView>
{
	static constexpr fixed_string class_name = "android/widget/ListView";
	using base_classes = std::tuple<scapix::java_api::android::widget::AbsListView>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_LISTVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_LISTVIEW)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_LISTVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/widget/ListAdapter.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/widget/ListView_FixedViewInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::ListView : public jni::object_base<"android/widget/ListView",
	android::widget::AbsListView>
{
public:

	using FixedViewInfo = ListView_FixedViewInfo;

	static jni::ref<android::widget::ListView> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::ListView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::ListView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::widget::ListView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jint getMaxScrollAmount() { return call_method<"getMaxScrollAmount", jint>(); }
	void addHeaderView(jni::ref<android::view::View> v, jni::ref<java::lang::Object> data, jboolean isSelectable) { return call_method<"addHeaderView", void>(v, data, isSelectable); }
	void addHeaderView(jni::ref<android::view::View> v) { return call_method<"addHeaderView", void>(v); }
	jint getHeaderViewsCount() { return call_method<"getHeaderViewsCount", jint>(); }
	jboolean removeHeaderView(jni::ref<android::view::View> v) { return call_method<"removeHeaderView", jboolean>(v); }
	void addFooterView(jni::ref<android::view::View> v, jni::ref<java::lang::Object> data, jboolean isSelectable) { return call_method<"addFooterView", void>(v, data, isSelectable); }
	void addFooterView(jni::ref<android::view::View> v) { return call_method<"addFooterView", void>(v); }
	jint getFooterViewsCount() { return call_method<"getFooterViewsCount", jint>(); }
	jboolean removeFooterView(jni::ref<android::view::View> v) { return call_method<"removeFooterView", jboolean>(v); }
	jni::ref<android::widget::ListAdapter> getAdapter() { return call_method<"getAdapter", jni::ref<android::widget::ListAdapter>>(); }
	void setRemoteViewsAdapter(jni::ref<android::content::Intent> intent) { return call_method<"setRemoteViewsAdapter", void>(intent); }
	void setAdapter(jni::ref<android::widget::ListAdapter> adapter) { return call_method<"setAdapter", void>(adapter); }
	jboolean requestChildRectangleOnScreen(jni::ref<android::view::View> child, jni::ref<android::graphics::Rect> rect, jboolean immediate) { return call_method<"requestChildRectangleOnScreen", jboolean>(child, rect, immediate); }
	void smoothScrollToPosition(jint position) { return call_method<"smoothScrollToPosition", void>(position); }
	void smoothScrollByOffset(jint offset) { return call_method<"smoothScrollByOffset", void>(offset); }
	void setSelection(jint position) { return call_method<"setSelection", void>(position); }
	void setSelectionAfterHeaderView() { return call_method<"setSelectionAfterHeaderView", void>(); }
	jboolean dispatchKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEvent", jboolean>(event); }
	jboolean onKeyDown(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyDown", jboolean>(keyCode, event); }
	jboolean onKeyMultiple(jint keyCode, jint repeatCount, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyMultiple", jboolean>(keyCode, repeatCount, event); }
	jboolean onKeyUp(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyUp", jboolean>(keyCode, event); }
	void setItemsCanFocus(jboolean itemsCanFocus) { return call_method<"setItemsCanFocus", void>(itemsCanFocus); }
	jboolean getItemsCanFocus() { return call_method<"getItemsCanFocus", jboolean>(); }
	jboolean isOpaque() { return call_method<"isOpaque", jboolean>(); }
	void setCacheColorHint(jint color) { return call_method<"setCacheColorHint", void>(color); }
	jni::ref<android::graphics::drawable::Drawable> getDivider() { return call_method<"getDivider", jni::ref<android::graphics::drawable::Drawable>>(); }
	void setDivider(jni::ref<android::graphics::drawable::Drawable> divider) { return call_method<"setDivider", void>(divider); }
	jint getDividerHeight() { return call_method<"getDividerHeight", jint>(); }
	void setDividerHeight(jint height) { return call_method<"setDividerHeight", void>(height); }
	void setHeaderDividersEnabled(jboolean headerDividersEnabled) { return call_method<"setHeaderDividersEnabled", void>(headerDividersEnabled); }
	jboolean areHeaderDividersEnabled() { return call_method<"areHeaderDividersEnabled", jboolean>(); }
	void setFooterDividersEnabled(jboolean footerDividersEnabled) { return call_method<"setFooterDividersEnabled", void>(footerDividersEnabled); }
	jboolean areFooterDividersEnabled() { return call_method<"areFooterDividersEnabled", jboolean>(); }
	void setOverscrollHeader(jni::ref<android::graphics::drawable::Drawable> header) { return call_method<"setOverscrollHeader", void>(header); }
	jni::ref<android::graphics::drawable::Drawable> getOverscrollHeader() { return call_method<"getOverscrollHeader", jni::ref<android::graphics::drawable::Drawable>>(); }
	void setOverscrollFooter(jni::ref<android::graphics::drawable::Drawable> footer) { return call_method<"setOverscrollFooter", void>(footer); }
	jni::ref<android::graphics::drawable::Drawable> getOverscrollFooter() { return call_method<"getOverscrollFooter", jni::ref<android::graphics::drawable::Drawable>>(); }
	jni::ref<jni::array<jlong>> getCheckItemIds() { return call_method<"getCheckItemIds", jni::ref<jni::array<jlong>>>(); }
	jni::ref<java::lang::CharSequence> getAccessibilityClassName() { return call_method<"getAccessibilityClassName", jni::ref<java::lang::CharSequence>>(); }
	void onInitializeAccessibilityNodeInfoForItem(jni::ref<android::view::View> view, jint position, jni::ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<"onInitializeAccessibilityNodeInfoForItem", void>(view, position, info); }

protected:

	ListView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_LISTVIEW
