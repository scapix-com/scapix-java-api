// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_DATATYPES_DEVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_DATATYPES_DEVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::health::connect::datatypes { class Device; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::health::connect::datatypes::Device>
{
	static constexpr fixed_string class_name = "android/health/connect/datatypes/Device";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_DATATYPES_DEVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_DATATYPES_DEVICE)
#define SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_DATATYPES_DEVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/health/connect/datatypes/Device_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::health::connect::datatypes::Device : public jni::object_base<"android/health/connect/datatypes/Device",
	java::lang::Object>
{
public:

	using Builder = Device_Builder;

	static jint DEVICE_TYPE_CHEST_STRAP() { return get_static_field<"DEVICE_TYPE_CHEST_STRAP", jint>(); }
	static jint DEVICE_TYPE_FITNESS_BAND() { return get_static_field<"DEVICE_TYPE_FITNESS_BAND", jint>(); }
	static jint DEVICE_TYPE_HEAD_MOUNTED() { return get_static_field<"DEVICE_TYPE_HEAD_MOUNTED", jint>(); }
	static jint DEVICE_TYPE_PHONE() { return get_static_field<"DEVICE_TYPE_PHONE", jint>(); }
	static jint DEVICE_TYPE_RING() { return get_static_field<"DEVICE_TYPE_RING", jint>(); }
	static jint DEVICE_TYPE_SCALE() { return get_static_field<"DEVICE_TYPE_SCALE", jint>(); }
	static jint DEVICE_TYPE_SMART_DISPLAY() { return get_static_field<"DEVICE_TYPE_SMART_DISPLAY", jint>(); }
	static jint DEVICE_TYPE_UNKNOWN() { return get_static_field<"DEVICE_TYPE_UNKNOWN", jint>(); }
	static jint DEVICE_TYPE_WATCH() { return get_static_field<"DEVICE_TYPE_WATCH", jint>(); }

	jni::ref<java::lang::String> getManufacturer() { return call_method<"getManufacturer", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getModel() { return call_method<"getModel", jni::ref<java::lang::String>>(); }
	jint getType() { return call_method<"getType", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> object) { return call_method<"equals", jboolean>(object); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	Device(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_DATATYPES_DEVICE
