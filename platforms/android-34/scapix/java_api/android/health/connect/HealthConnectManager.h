// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_HEALTHCONNECTMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_HEALTHCONNECTMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::health::connect { class HealthConnectManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::health::connect::HealthConnectManager>
{
	static constexpr fixed_string class_name = "android/health/connect/HealthConnectManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_HEALTHCONNECTMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_HEALTHCONNECTMANAGER)
#define SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_HEALTHCONNECTMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/health/connect/AggregateRecordsRequest.h>
#include <scapix/java_api/android/health/connect/ReadRecordsRequest.h>
#include <scapix/java_api/android/health/connect/TimeRangeFilter.h>
#include <scapix/java_api/android/health/connect/changelog/ChangeLogTokenRequest.h>
#include <scapix/java_api/android/health/connect/changelog/ChangeLogsRequest.h>
#include <scapix/java_api/android/os/OutcomeReceiver.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Duration.h>
#include <scapix/java_api/java/time/Period.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::health::connect::HealthConnectManager : public jni::object_base<"android/health/connect/HealthConnectManager",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> ACTION_MANAGE_HEALTH_PERMISSIONS() { return get_static_field<"ACTION_MANAGE_HEALTH_PERMISSIONS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_REQUEST_EXERCISE_ROUTE() { return get_static_field<"ACTION_REQUEST_EXERCISE_ROUTE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CATEGORY_HEALTH_PERMISSIONS() { return get_static_field<"CATEGORY_HEALTH_PERMISSIONS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_EXERCISE_ROUTE() { return get_static_field<"EXTRA_EXERCISE_ROUTE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SESSION_ID() { return get_static_field<"EXTRA_SESSION_ID", jni::ref<java::lang::String>>(); }

	void insertRecords(jni::ref<java::util::List> records, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"insertRecords", void>(records, executor, callback); }
	void aggregate(jni::ref<android::health::connect::AggregateRecordsRequest> request, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"aggregate", void>(request, executor, callback); }
	void aggregateGroupByDuration(jni::ref<android::health::connect::AggregateRecordsRequest> request, jni::ref<java::time::Duration> duration, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"aggregateGroupByDuration", void>(request, duration, executor, callback); }
	void aggregateGroupByPeriod(jni::ref<android::health::connect::AggregateRecordsRequest> request, jni::ref<java::time::Period> period, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"aggregateGroupByPeriod", void>(request, period, executor, callback); }
	void deleteRecords(jni::ref<java::util::List> recordIds, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"deleteRecords", void>(recordIds, executor, callback); }
	void deleteRecords(jni::ref<java::lang::Class> recordType, jni::ref<android::health::connect::TimeRangeFilter> timeRangeFilter, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"deleteRecords", void>(recordType, timeRangeFilter, executor, callback); }
	void getChangeLogs(jni::ref<android::health::connect::changelog::ChangeLogsRequest> changeLogsRequest, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"getChangeLogs", void>(changeLogsRequest, executor, callback); }
	void getChangeLogToken(jni::ref<android::health::connect::changelog::ChangeLogTokenRequest> request, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"getChangeLogToken", void>(request, executor, callback); }
	void readRecords(jni::ref<android::health::connect::ReadRecordsRequest> request, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"readRecords", void>(request, executor, callback); }
	void updateRecords(jni::ref<java::util::List> records, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"updateRecords", void>(records, executor, callback); }

protected:

	HealthConnectManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HEALTH_CONNECT_HEALTHCONNECTMANAGER
