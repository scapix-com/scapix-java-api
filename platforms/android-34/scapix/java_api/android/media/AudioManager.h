// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class AudioManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::AudioManager>
{
	static constexpr fixed_string class_name = "android/media/AudioManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOMANAGER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/media/AudioDeviceCallback.h>
#include <scapix/java_api/android/media/AudioDeviceInfo.h>
#include <scapix/java_api/android/media/AudioFocusRequest.h>
#include <scapix/java_api/android/media/AudioFormat.h>
#include <scapix/java_api/android/media/AudioManager_AudioPlaybackCallback.h>
#include <scapix/java_api/android/media/AudioManager_AudioRecordingCallback.h>
#include <scapix/java_api/android/media/AudioManager_OnAudioFocusChangeListener.h>
#include <scapix/java_api/android/media/AudioManager_OnCommunicationDeviceChangedListener.h>
#include <scapix/java_api/android/media/AudioManager_OnModeChangedListener.h>
#include <scapix/java_api/android/media/AudioManager_OnPreferredMixerAttributesChangedListener.h>
#include <scapix/java_api/android/media/AudioMixerAttributes.h>
#include <scapix/java_api/android/media/RemoteControlClient.h>
#include <scapix/java_api/android/media/RemoteController.h>
#include <scapix/java_api/android/media/Spatializer.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::AudioManager : public jni::object_base<"android/media/AudioManager",
	java::lang::Object>
{
public:

	using OnPreferredMixerAttributesChangedListener = AudioManager_OnPreferredMixerAttributesChangedListener;
	using OnModeChangedListener = AudioManager_OnModeChangedListener;
	using OnCommunicationDeviceChangedListener = AudioManager_OnCommunicationDeviceChangedListener;
	using OnAudioFocusChangeListener = AudioManager_OnAudioFocusChangeListener;
	using AudioRecordingCallback = AudioManager_AudioRecordingCallback;
	using AudioPlaybackCallback = AudioManager_AudioPlaybackCallback;

	static jni::ref<java::lang::String> ACTION_AUDIO_BECOMING_NOISY() { return get_static_field<"ACTION_AUDIO_BECOMING_NOISY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_HDMI_AUDIO_PLUG() { return get_static_field<"ACTION_HDMI_AUDIO_PLUG", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_HEADSET_PLUG() { return get_static_field<"ACTION_HEADSET_PLUG", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_MICROPHONE_MUTE_CHANGED() { return get_static_field<"ACTION_MICROPHONE_MUTE_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SCO_AUDIO_STATE_CHANGED() { return get_static_field<"ACTION_SCO_AUDIO_STATE_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SCO_AUDIO_STATE_UPDATED() { return get_static_field<"ACTION_SCO_AUDIO_STATE_UPDATED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_SPEAKERPHONE_STATE_CHANGED() { return get_static_field<"ACTION_SPEAKERPHONE_STATE_CHANGED", jni::ref<java::lang::String>>(); }
	static jint ADJUST_LOWER() { return get_static_field<"ADJUST_LOWER", jint>(); }
	static jint ADJUST_MUTE() { return get_static_field<"ADJUST_MUTE", jint>(); }
	static jint ADJUST_RAISE() { return get_static_field<"ADJUST_RAISE", jint>(); }
	static jint ADJUST_SAME() { return get_static_field<"ADJUST_SAME", jint>(); }
	static jint ADJUST_TOGGLE_MUTE() { return get_static_field<"ADJUST_TOGGLE_MUTE", jint>(); }
	static jint ADJUST_UNMUTE() { return get_static_field<"ADJUST_UNMUTE", jint>(); }
	static jint AUDIOFOCUS_GAIN() { return get_static_field<"AUDIOFOCUS_GAIN", jint>(); }
	static jint AUDIOFOCUS_GAIN_TRANSIENT() { return get_static_field<"AUDIOFOCUS_GAIN_TRANSIENT", jint>(); }
	static jint AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE() { return get_static_field<"AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE", jint>(); }
	static jint AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK() { return get_static_field<"AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK", jint>(); }
	static jint AUDIOFOCUS_LOSS() { return get_static_field<"AUDIOFOCUS_LOSS", jint>(); }
	static jint AUDIOFOCUS_LOSS_TRANSIENT() { return get_static_field<"AUDIOFOCUS_LOSS_TRANSIENT", jint>(); }
	static jint AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK() { return get_static_field<"AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK", jint>(); }
	static jint AUDIOFOCUS_NONE() { return get_static_field<"AUDIOFOCUS_NONE", jint>(); }
	static jint AUDIOFOCUS_REQUEST_DELAYED() { return get_static_field<"AUDIOFOCUS_REQUEST_DELAYED", jint>(); }
	static jint AUDIOFOCUS_REQUEST_FAILED() { return get_static_field<"AUDIOFOCUS_REQUEST_FAILED", jint>(); }
	static jint AUDIOFOCUS_REQUEST_GRANTED() { return get_static_field<"AUDIOFOCUS_REQUEST_GRANTED", jint>(); }
	static jint AUDIO_SESSION_ID_GENERATE() { return get_static_field<"AUDIO_SESSION_ID_GENERATE", jint>(); }
	static jint DIRECT_PLAYBACK_BITSTREAM_SUPPORTED() { return get_static_field<"DIRECT_PLAYBACK_BITSTREAM_SUPPORTED", jint>(); }
	static jint DIRECT_PLAYBACK_NOT_SUPPORTED() { return get_static_field<"DIRECT_PLAYBACK_NOT_SUPPORTED", jint>(); }
	static jint DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED() { return get_static_field<"DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED", jint>(); }
	static jint DIRECT_PLAYBACK_OFFLOAD_SUPPORTED() { return get_static_field<"DIRECT_PLAYBACK_OFFLOAD_SUPPORTED", jint>(); }
	static jint ENCODED_SURROUND_OUTPUT_ALWAYS() { return get_static_field<"ENCODED_SURROUND_OUTPUT_ALWAYS", jint>(); }
	static jint ENCODED_SURROUND_OUTPUT_AUTO() { return get_static_field<"ENCODED_SURROUND_OUTPUT_AUTO", jint>(); }
	static jint ENCODED_SURROUND_OUTPUT_MANUAL() { return get_static_field<"ENCODED_SURROUND_OUTPUT_MANUAL", jint>(); }
	static jint ENCODED_SURROUND_OUTPUT_NEVER() { return get_static_field<"ENCODED_SURROUND_OUTPUT_NEVER", jint>(); }
	static jint ENCODED_SURROUND_OUTPUT_UNKNOWN() { return get_static_field<"ENCODED_SURROUND_OUTPUT_UNKNOWN", jint>(); }
	static jint ERROR() { return get_static_field<"ERROR", jint>(); }
	static jint ERROR_DEAD_OBJECT() { return get_static_field<"ERROR_DEAD_OBJECT", jint>(); }
	static jni::ref<java::lang::String> EXTRA_AUDIO_PLUG_STATE() { return get_static_field<"EXTRA_AUDIO_PLUG_STATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_ENCODINGS() { return get_static_field<"EXTRA_ENCODINGS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_MAX_CHANNEL_COUNT() { return get_static_field<"EXTRA_MAX_CHANNEL_COUNT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_RINGER_MODE() { return get_static_field<"EXTRA_RINGER_MODE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SCO_AUDIO_PREVIOUS_STATE() { return get_static_field<"EXTRA_SCO_AUDIO_PREVIOUS_STATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SCO_AUDIO_STATE() { return get_static_field<"EXTRA_SCO_AUDIO_STATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_VIBRATE_SETTING() { return get_static_field<"EXTRA_VIBRATE_SETTING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_VIBRATE_TYPE() { return get_static_field<"EXTRA_VIBRATE_TYPE", jni::ref<java::lang::String>>(); }
	static jint FLAG_ALLOW_RINGER_MODES() { return get_static_field<"FLAG_ALLOW_RINGER_MODES", jint>(); }
	static jint FLAG_PLAY_SOUND() { return get_static_field<"FLAG_PLAY_SOUND", jint>(); }
	static jint FLAG_REMOVE_SOUND_AND_VIBRATE() { return get_static_field<"FLAG_REMOVE_SOUND_AND_VIBRATE", jint>(); }
	static jint FLAG_SHOW_UI() { return get_static_field<"FLAG_SHOW_UI", jint>(); }
	static jint FLAG_VIBRATE() { return get_static_field<"FLAG_VIBRATE", jint>(); }
	static jint FX_BACK() { return get_static_field<"FX_BACK", jint>(); }
	static jint FX_FOCUS_NAVIGATION_DOWN() { return get_static_field<"FX_FOCUS_NAVIGATION_DOWN", jint>(); }
	static jint FX_FOCUS_NAVIGATION_LEFT() { return get_static_field<"FX_FOCUS_NAVIGATION_LEFT", jint>(); }
	static jint FX_FOCUS_NAVIGATION_RIGHT() { return get_static_field<"FX_FOCUS_NAVIGATION_RIGHT", jint>(); }
	static jint FX_FOCUS_NAVIGATION_UP() { return get_static_field<"FX_FOCUS_NAVIGATION_UP", jint>(); }
	static jint FX_KEYPRESS_DELETE() { return get_static_field<"FX_KEYPRESS_DELETE", jint>(); }
	static jint FX_KEYPRESS_INVALID() { return get_static_field<"FX_KEYPRESS_INVALID", jint>(); }
	static jint FX_KEYPRESS_RETURN() { return get_static_field<"FX_KEYPRESS_RETURN", jint>(); }
	static jint FX_KEYPRESS_SPACEBAR() { return get_static_field<"FX_KEYPRESS_SPACEBAR", jint>(); }
	static jint FX_KEYPRESS_STANDARD() { return get_static_field<"FX_KEYPRESS_STANDARD", jint>(); }
	static jint FX_KEY_CLICK() { return get_static_field<"FX_KEY_CLICK", jint>(); }
	static jint GET_DEVICES_ALL() { return get_static_field<"GET_DEVICES_ALL", jint>(); }
	static jint GET_DEVICES_INPUTS() { return get_static_field<"GET_DEVICES_INPUTS", jint>(); }
	static jint GET_DEVICES_OUTPUTS() { return get_static_field<"GET_DEVICES_OUTPUTS", jint>(); }
	static jint MODE_CALL_REDIRECT() { return get_static_field<"MODE_CALL_REDIRECT", jint>(); }
	static jint MODE_CALL_SCREENING() { return get_static_field<"MODE_CALL_SCREENING", jint>(); }
	static jint MODE_COMMUNICATION_REDIRECT() { return get_static_field<"MODE_COMMUNICATION_REDIRECT", jint>(); }
	static jint MODE_CURRENT() { return get_static_field<"MODE_CURRENT", jint>(); }
	static jint MODE_INVALID() { return get_static_field<"MODE_INVALID", jint>(); }
	static jint MODE_IN_CALL() { return get_static_field<"MODE_IN_CALL", jint>(); }
	static jint MODE_IN_COMMUNICATION() { return get_static_field<"MODE_IN_COMMUNICATION", jint>(); }
	static jint MODE_NORMAL() { return get_static_field<"MODE_NORMAL", jint>(); }
	static jint MODE_RINGTONE() { return get_static_field<"MODE_RINGTONE", jint>(); }
	static jint NUM_STREAMS() { return get_static_field<"NUM_STREAMS", jint>(); }
	static jint PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED() { return get_static_field<"PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED", jint>(); }
	static jint PLAYBACK_OFFLOAD_NOT_SUPPORTED() { return get_static_field<"PLAYBACK_OFFLOAD_NOT_SUPPORTED", jint>(); }
	static jint PLAYBACK_OFFLOAD_SUPPORTED() { return get_static_field<"PLAYBACK_OFFLOAD_SUPPORTED", jint>(); }
	static jni::ref<java::lang::String> PROPERTY_OUTPUT_FRAMES_PER_BUFFER() { return get_static_field<"PROPERTY_OUTPUT_FRAMES_PER_BUFFER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_OUTPUT_SAMPLE_RATE() { return get_static_field<"PROPERTY_OUTPUT_SAMPLE_RATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED() { return get_static_field<"PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND() { return get_static_field<"PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND() { return get_static_field<"PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RINGER_MODE_CHANGED_ACTION() { return get_static_field<"RINGER_MODE_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jint RINGER_MODE_NORMAL() { return get_static_field<"RINGER_MODE_NORMAL", jint>(); }
	static jint RINGER_MODE_SILENT() { return get_static_field<"RINGER_MODE_SILENT", jint>(); }
	static jint RINGER_MODE_VIBRATE() { return get_static_field<"RINGER_MODE_VIBRATE", jint>(); }
	static jint ROUTE_ALL() { return get_static_field<"ROUTE_ALL", jint>(); }
	static jint ROUTE_BLUETOOTH() { return get_static_field<"ROUTE_BLUETOOTH", jint>(); }
	static jint ROUTE_BLUETOOTH_A2DP() { return get_static_field<"ROUTE_BLUETOOTH_A2DP", jint>(); }
	static jint ROUTE_BLUETOOTH_SCO() { return get_static_field<"ROUTE_BLUETOOTH_SCO", jint>(); }
	static jint ROUTE_EARPIECE() { return get_static_field<"ROUTE_EARPIECE", jint>(); }
	static jint ROUTE_HEADSET() { return get_static_field<"ROUTE_HEADSET", jint>(); }
	static jint ROUTE_SPEAKER() { return get_static_field<"ROUTE_SPEAKER", jint>(); }
	static jint SCO_AUDIO_STATE_CONNECTED() { return get_static_field<"SCO_AUDIO_STATE_CONNECTED", jint>(); }
	static jint SCO_AUDIO_STATE_CONNECTING() { return get_static_field<"SCO_AUDIO_STATE_CONNECTING", jint>(); }
	static jint SCO_AUDIO_STATE_DISCONNECTED() { return get_static_field<"SCO_AUDIO_STATE_DISCONNECTED", jint>(); }
	static jint SCO_AUDIO_STATE_ERROR() { return get_static_field<"SCO_AUDIO_STATE_ERROR", jint>(); }
	static jint STREAM_ACCESSIBILITY() { return get_static_field<"STREAM_ACCESSIBILITY", jint>(); }
	static jint STREAM_ALARM() { return get_static_field<"STREAM_ALARM", jint>(); }
	static jint STREAM_DTMF() { return get_static_field<"STREAM_DTMF", jint>(); }
	static jint STREAM_MUSIC() { return get_static_field<"STREAM_MUSIC", jint>(); }
	static jint STREAM_NOTIFICATION() { return get_static_field<"STREAM_NOTIFICATION", jint>(); }
	static jint STREAM_RING() { return get_static_field<"STREAM_RING", jint>(); }
	static jint STREAM_SYSTEM() { return get_static_field<"STREAM_SYSTEM", jint>(); }
	static jint STREAM_VOICE_CALL() { return get_static_field<"STREAM_VOICE_CALL", jint>(); }
	static jint USE_DEFAULT_STREAM_TYPE() { return get_static_field<"USE_DEFAULT_STREAM_TYPE", jint>(); }
	static jni::ref<java::lang::String> VIBRATE_SETTING_CHANGED_ACTION() { return get_static_field<"VIBRATE_SETTING_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jint VIBRATE_SETTING_OFF() { return get_static_field<"VIBRATE_SETTING_OFF", jint>(); }
	static jint VIBRATE_SETTING_ON() { return get_static_field<"VIBRATE_SETTING_ON", jint>(); }
	static jint VIBRATE_SETTING_ONLY_SILENT() { return get_static_field<"VIBRATE_SETTING_ONLY_SILENT", jint>(); }
	static jint VIBRATE_TYPE_NOTIFICATION() { return get_static_field<"VIBRATE_TYPE_NOTIFICATION", jint>(); }
	static jint VIBRATE_TYPE_RINGER() { return get_static_field<"VIBRATE_TYPE_RINGER", jint>(); }

	void dispatchMediaKeyEvent(jni::ref<android::view::KeyEvent> keyEvent) { return call_method<"dispatchMediaKeyEvent", void>(keyEvent); }
	jboolean isVolumeFixed() { return call_method<"isVolumeFixed", jboolean>(); }
	void adjustStreamVolume(jint streamType, jint direction, jint flags) { return call_method<"adjustStreamVolume", void>(streamType, direction, flags); }
	void adjustVolume(jint direction, jint flags) { return call_method<"adjustVolume", void>(direction, flags); }
	void adjustSuggestedStreamVolume(jint direction, jint suggestedStreamType, jint flags) { return call_method<"adjustSuggestedStreamVolume", void>(direction, suggestedStreamType, flags); }
	jint getRingerMode() { return call_method<"getRingerMode", jint>(); }
	jboolean isRampingRingerEnabled() { return call_method<"isRampingRingerEnabled", jboolean>(); }
	jint getStreamMaxVolume(jint streamType) { return call_method<"getStreamMaxVolume", jint>(streamType); }
	jint getStreamMinVolume(jint streamType) { return call_method<"getStreamMinVolume", jint>(streamType); }
	jint getStreamVolume(jint streamType) { return call_method<"getStreamVolume", jint>(streamType); }
	jfloat getStreamVolumeDb(jint streamType, jint index, jint deviceType) { return call_method<"getStreamVolumeDb", jfloat>(streamType, index, deviceType); }
	void setRingerMode(jint ringerMode) { return call_method<"setRingerMode", void>(ringerMode); }
	void setStreamVolume(jint streamType, jint index, jint flags) { return call_method<"setStreamVolume", void>(streamType, index, flags); }
	jint getVolumeGroupIdForAttributes(jni::ref<android::media::AudioAttributes> attributes) { return call_method<"getVolumeGroupIdForAttributes", jint>(attributes); }
	void adjustVolumeGroupVolume(jint groupId, jint direction, jint flags) { return call_method<"adjustVolumeGroupVolume", void>(groupId, direction, flags); }
	jboolean isVolumeGroupMuted(jint groupId) { return call_method<"isVolumeGroupMuted", jboolean>(groupId); }
	void setStreamSolo(jint streamType, jboolean state) { return call_method<"setStreamSolo", void>(streamType, state); }
	void setStreamMute(jint streamType, jboolean state) { return call_method<"setStreamMute", void>(streamType, state); }
	jboolean isStreamMute(jint streamType) { return call_method<"isStreamMute", jboolean>(streamType); }
	jboolean shouldVibrate(jint vibrateType) { return call_method<"shouldVibrate", jboolean>(vibrateType); }
	jint getVibrateSetting(jint vibrateType) { return call_method<"getVibrateSetting", jint>(vibrateType); }
	void setVibrateSetting(jint vibrateType, jint vibrateSetting) { return call_method<"setVibrateSetting", void>(vibrateType, vibrateSetting); }
	void setSpeakerphoneOn(jboolean on) { return call_method<"setSpeakerphoneOn", void>(on); }
	jboolean isSpeakerphoneOn() { return call_method<"isSpeakerphoneOn", jboolean>(); }
	void setAllowedCapturePolicy(jint capturePolicy) { return call_method<"setAllowedCapturePolicy", void>(capturePolicy); }
	jint getAllowedCapturePolicy() { return call_method<"getAllowedCapturePolicy", jint>(); }
	static jint getDirectPlaybackSupport(jni::ref<android::media::AudioFormat> format, jni::ref<android::media::AudioAttributes> attributes) { return call_static_method<"getDirectPlaybackSupport", jint>(format, attributes); }
	static jboolean isOffloadedPlaybackSupported(jni::ref<android::media::AudioFormat> format, jni::ref<android::media::AudioAttributes> attributes) { return call_static_method<"isOffloadedPlaybackSupported", jboolean>(format, attributes); }
	static jint getPlaybackOffloadSupport(jni::ref<android::media::AudioFormat> format, jni::ref<android::media::AudioAttributes> attributes) { return call_static_method<"getPlaybackOffloadSupport", jint>(format, attributes); }
	jni::ref<android::media::Spatializer> getSpatializer() { return call_method<"getSpatializer", jni::ref<android::media::Spatializer>>(); }
	jboolean isBluetoothScoAvailableOffCall() { return call_method<"isBluetoothScoAvailableOffCall", jboolean>(); }
	void startBluetoothSco() { return call_method<"startBluetoothSco", void>(); }
	void stopBluetoothSco() { return call_method<"stopBluetoothSco", void>(); }
	void setBluetoothScoOn(jboolean on) { return call_method<"setBluetoothScoOn", void>(on); }
	jboolean isBluetoothScoOn() { return call_method<"isBluetoothScoOn", jboolean>(); }
	void setBluetoothA2dpOn(jboolean on) { return call_method<"setBluetoothA2dpOn", void>(on); }
	jboolean isBluetoothA2dpOn() { return call_method<"isBluetoothA2dpOn", jboolean>(); }
	void setWiredHeadsetOn(jboolean on) { return call_method<"setWiredHeadsetOn", void>(on); }
	jboolean isWiredHeadsetOn() { return call_method<"isWiredHeadsetOn", jboolean>(); }
	void setMicrophoneMute(jboolean on) { return call_method<"setMicrophoneMute", void>(on); }
	jboolean isMicrophoneMute() { return call_method<"isMicrophoneMute", jboolean>(); }
	void setMode(jint mode) { return call_method<"setMode", void>(mode); }
	jint getMode() { return call_method<"getMode", jint>(); }
	void addOnModeChangedListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::media::AudioManager_OnModeChangedListener> listener) { return call_method<"addOnModeChangedListener", void>(executor, listener); }
	void removeOnModeChangedListener(jni::ref<android::media::AudioManager_OnModeChangedListener> listener) { return call_method<"removeOnModeChangedListener", void>(listener); }
	jboolean isCallScreeningModeSupported() { return call_method<"isCallScreeningModeSupported", jboolean>(); }
	void setRouting(jint mode, jint routes, jint mask) { return call_method<"setRouting", void>(mode, routes, mask); }
	jint getRouting(jint mode) { return call_method<"getRouting", jint>(mode); }
	jboolean isMusicActive() { return call_method<"isMusicActive", jboolean>(); }
	jint generateAudioSessionId() { return call_method<"generateAudioSessionId", jint>(); }
	void setParameters(jni::ref<java::lang::String> keyValuePairs) { return call_method<"setParameters", void>(keyValuePairs); }
	jni::ref<java::lang::String> getParameters(jni::ref<java::lang::String> keys) { return call_method<"getParameters", jni::ref<java::lang::String>>(keys); }
	void playSoundEffect(jint effectType) { return call_method<"playSoundEffect", void>(effectType); }
	void playSoundEffect(jint effectType, jfloat volume) { return call_method<"playSoundEffect", void>(effectType, volume); }
	void loadSoundEffects() { return call_method<"loadSoundEffects", void>(); }
	void unloadSoundEffects() { return call_method<"unloadSoundEffects", void>(); }
	jint requestAudioFocus(jni::ref<android::media::AudioManager_OnAudioFocusChangeListener> l, jint streamType, jint durationHint) { return call_method<"requestAudioFocus", jint>(l, streamType, durationHint); }
	jint requestAudioFocus(jni::ref<android::media::AudioFocusRequest> focusRequest) { return call_method<"requestAudioFocus", jint>(focusRequest); }
	jint abandonAudioFocusRequest(jni::ref<android::media::AudioFocusRequest> focusRequest) { return call_method<"abandonAudioFocusRequest", jint>(focusRequest); }
	jint abandonAudioFocus(jni::ref<android::media::AudioManager_OnAudioFocusChangeListener> l) { return call_method<"abandonAudioFocus", jint>(l); }
	void registerMediaButtonEventReceiver(jni::ref<android::content::ComponentName> eventReceiver) { return call_method<"registerMediaButtonEventReceiver", void>(eventReceiver); }
	void registerMediaButtonEventReceiver(jni::ref<android::app::PendingIntent> eventReceiver) { return call_method<"registerMediaButtonEventReceiver", void>(eventReceiver); }
	void unregisterMediaButtonEventReceiver(jni::ref<android::content::ComponentName> eventReceiver) { return call_method<"unregisterMediaButtonEventReceiver", void>(eventReceiver); }
	void unregisterMediaButtonEventReceiver(jni::ref<android::app::PendingIntent> eventReceiver) { return call_method<"unregisterMediaButtonEventReceiver", void>(eventReceiver); }
	void registerRemoteControlClient(jni::ref<android::media::RemoteControlClient> rcClient) { return call_method<"registerRemoteControlClient", void>(rcClient); }
	void unregisterRemoteControlClient(jni::ref<android::media::RemoteControlClient> rcClient) { return call_method<"unregisterRemoteControlClient", void>(rcClient); }
	jboolean registerRemoteController(jni::ref<android::media::RemoteController> rctlr) { return call_method<"registerRemoteController", jboolean>(rctlr); }
	void unregisterRemoteController(jni::ref<android::media::RemoteController> rctlr) { return call_method<"unregisterRemoteController", void>(rctlr); }
	void registerAudioPlaybackCallback(jni::ref<android::media::AudioManager_AudioPlaybackCallback> cb, jni::ref<android::os::Handler> handler) { return call_method<"registerAudioPlaybackCallback", void>(cb, handler); }
	void unregisterAudioPlaybackCallback(jni::ref<android::media::AudioManager_AudioPlaybackCallback> cb) { return call_method<"unregisterAudioPlaybackCallback", void>(cb); }
	jni::ref<java::util::List> getActivePlaybackConfigurations() { return call_method<"getActivePlaybackConfigurations", jni::ref<java::util::List>>(); }
	void registerAudioRecordingCallback(jni::ref<android::media::AudioManager_AudioRecordingCallback> cb, jni::ref<android::os::Handler> handler) { return call_method<"registerAudioRecordingCallback", void>(cb, handler); }
	void unregisterAudioRecordingCallback(jni::ref<android::media::AudioManager_AudioRecordingCallback> cb) { return call_method<"unregisterAudioRecordingCallback", void>(cb); }
	jni::ref<java::util::List> getActiveRecordingConfigurations() { return call_method<"getActiveRecordingConfigurations", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getAudioDevicesForAttributes(jni::ref<android::media::AudioAttributes> attributes) { return call_method<"getAudioDevicesForAttributes", jni::ref<java::util::List>>(attributes); }
	jni::ref<java::lang::String> getProperty(jni::ref<java::lang::String> key) { return call_method<"getProperty", jni::ref<java::lang::String>>(key); }
	jni::ref<jni::array<android::media::AudioDeviceInfo>> getDevices(jint flags) { return call_method<"getDevices", jni::ref<jni::array<android::media::AudioDeviceInfo>>>(flags); }
	void registerAudioDeviceCallback(jni::ref<android::media::AudioDeviceCallback> callback, jni::ref<android::os::Handler> handler) { return call_method<"registerAudioDeviceCallback", void>(callback, handler); }
	void unregisterAudioDeviceCallback(jni::ref<android::media::AudioDeviceCallback> callback) { return call_method<"unregisterAudioDeviceCallback", void>(callback); }
	jni::ref<java::util::List> getMicrophones() { return call_method<"getMicrophones", jni::ref<java::util::List>>(); }
	jboolean setEncodedSurroundMode(jint mode) { return call_method<"setEncodedSurroundMode", jboolean>(mode); }
	jint getEncodedSurroundMode() { return call_method<"getEncodedSurroundMode", jint>(); }
	jboolean setSurroundFormatEnabled(jint audioFormat, jboolean enabled) { return call_method<"setSurroundFormatEnabled", jboolean>(audioFormat, enabled); }
	jboolean isSurroundFormatEnabled(jint audioFormat) { return call_method<"isSurroundFormatEnabled", jboolean>(audioFormat); }
	static jboolean isHapticPlaybackSupported() { return call_static_method<"isHapticPlaybackSupported", jboolean>(); }
	jint getAudioHwSyncForSession(jint sessionId) { return call_method<"getAudioHwSyncForSession", jint>(sessionId); }
	jboolean setCommunicationDevice(jni::ref<android::media::AudioDeviceInfo> device) { return call_method<"setCommunicationDevice", jboolean>(device); }
	void clearCommunicationDevice() { return call_method<"clearCommunicationDevice", void>(); }
	jni::ref<android::media::AudioDeviceInfo> getCommunicationDevice() { return call_method<"getCommunicationDevice", jni::ref<android::media::AudioDeviceInfo>>(); }
	jni::ref<java::util::List> getAvailableCommunicationDevices() { return call_method<"getAvailableCommunicationDevices", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getDirectProfilesForAttributes(jni::ref<android::media::AudioAttributes> attributes) { return call_method<"getDirectProfilesForAttributes", jni::ref<java::util::List>>(attributes); }
	void addOnCommunicationDeviceChangedListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::media::AudioManager_OnCommunicationDeviceChangedListener> listener) { return call_method<"addOnCommunicationDeviceChangedListener", void>(executor, listener); }
	void removeOnCommunicationDeviceChangedListener(jni::ref<android::media::AudioManager_OnCommunicationDeviceChangedListener> listener) { return call_method<"removeOnCommunicationDeviceChangedListener", void>(listener); }
	jni::ref<java::util::List> getSupportedMixerAttributes(jni::ref<android::media::AudioDeviceInfo> device) { return call_method<"getSupportedMixerAttributes", jni::ref<java::util::List>>(device); }
	jboolean setPreferredMixerAttributes(jni::ref<android::media::AudioAttributes> attributes, jni::ref<android::media::AudioDeviceInfo> device, jni::ref<android::media::AudioMixerAttributes> mixerAttributes) { return call_method<"setPreferredMixerAttributes", jboolean>(attributes, device, mixerAttributes); }
	jni::ref<android::media::AudioMixerAttributes> getPreferredMixerAttributes(jni::ref<android::media::AudioAttributes> attributes, jni::ref<android::media::AudioDeviceInfo> device) { return call_method<"getPreferredMixerAttributes", jni::ref<android::media::AudioMixerAttributes>>(attributes, device); }
	jboolean clearPreferredMixerAttributes(jni::ref<android::media::AudioAttributes> attributes, jni::ref<android::media::AudioDeviceInfo> device) { return call_method<"clearPreferredMixerAttributes", jboolean>(attributes, device); }
	void addOnPreferredMixerAttributesChangedListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::media::AudioManager_OnPreferredMixerAttributesChangedListener> listener) { return call_method<"addOnPreferredMixerAttributesChangedListener", void>(executor, listener); }
	void removeOnPreferredMixerAttributesChangedListener(jni::ref<android::media::AudioManager_OnPreferredMixerAttributesChangedListener> listener) { return call_method<"removeOnPreferredMixerAttributesChangedListener", void>(listener); }

protected:

	AudioManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOMANAGER
