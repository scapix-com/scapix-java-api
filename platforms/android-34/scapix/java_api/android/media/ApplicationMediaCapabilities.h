// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_APPLICATIONMEDIACAPABILITIES_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_APPLICATIONMEDIACAPABILITIES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class ApplicationMediaCapabilities; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::ApplicationMediaCapabilities>
{
	static constexpr fixed_string class_name = "android/media/ApplicationMediaCapabilities";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_APPLICATIONMEDIACAPABILITIES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_APPLICATIONMEDIACAPABILITIES)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_APPLICATIONMEDIACAPABILITIES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#include <scapix/java_api/android/media/ApplicationMediaCapabilities_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::ApplicationMediaCapabilities : public jni::object_base<"android/media/ApplicationMediaCapabilities",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = ApplicationMediaCapabilities_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	jboolean isVideoMimeTypeSupported(jni::ref<java::lang::String> videoMime) { return call_method<"isVideoMimeTypeSupported", jboolean>(videoMime); }
	jboolean isHdrTypeSupported(jni::ref<java::lang::String> hdrType) { return call_method<"isHdrTypeSupported", jboolean>(hdrType); }
	jboolean isFormatSpecified(jni::ref<java::lang::String> format) { return call_method<"isFormatSpecified", jboolean>(format); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::List> getSupportedVideoMimeTypes() { return call_method<"getSupportedVideoMimeTypes", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getUnsupportedVideoMimeTypes() { return call_method<"getUnsupportedVideoMimeTypes", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getSupportedHdrTypes() { return call_method<"getSupportedHdrTypes", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getUnsupportedHdrTypes() { return call_method<"getUnsupportedHdrTypes", jni::ref<java::util::List>>(); }
	static jni::ref<android::media::ApplicationMediaCapabilities> createFromXml(jni::ref<org::xmlpull::v1::XmlPullParser> xmlParser) { return call_static_method<"createFromXml", jni::ref<android::media::ApplicationMediaCapabilities>>(xmlParser); }

protected:

	ApplicationMediaCapabilities(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_APPLICATIONMEDIACAPABILITIES
