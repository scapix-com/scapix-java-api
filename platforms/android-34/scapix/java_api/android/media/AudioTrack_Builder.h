// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOTRACK_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOTRACK_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class AudioTrack_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::AudioTrack_Builder>
{
	static constexpr fixed_string class_name = "android/media/AudioTrack$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOTRACK_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOTRACK_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOTRACK_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/media/AudioAttributes.h>
#include <scapix/java_api/android/media/AudioFormat.h>
#include <scapix/java_api/android/media/AudioTrack.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::AudioTrack_Builder : public jni::object_base<"android/media/AudioTrack$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::media::AudioTrack_Builder> new_object() { return base_::new_object(); }
	jni::ref<android::media::AudioTrack_Builder> setContext(jni::ref<android::content::Context> context) { return call_method<"setContext", jni::ref<android::media::AudioTrack_Builder>>(context); }
	jni::ref<android::media::AudioTrack_Builder> setAudioAttributes(jni::ref<android::media::AudioAttributes> attributes) { return call_method<"setAudioAttributes", jni::ref<android::media::AudioTrack_Builder>>(attributes); }
	jni::ref<android::media::AudioTrack_Builder> setAudioFormat(jni::ref<android::media::AudioFormat> format) { return call_method<"setAudioFormat", jni::ref<android::media::AudioTrack_Builder>>(format); }
	jni::ref<android::media::AudioTrack_Builder> setBufferSizeInBytes(jint bufferSizeInBytes) { return call_method<"setBufferSizeInBytes", jni::ref<android::media::AudioTrack_Builder>>(bufferSizeInBytes); }
	jni::ref<android::media::AudioTrack_Builder> setEncapsulationMode(jint encapsulationMode) { return call_method<"setEncapsulationMode", jni::ref<android::media::AudioTrack_Builder>>(encapsulationMode); }
	jni::ref<android::media::AudioTrack_Builder> setTransferMode(jint mode) { return call_method<"setTransferMode", jni::ref<android::media::AudioTrack_Builder>>(mode); }
	jni::ref<android::media::AudioTrack_Builder> setSessionId(jint sessionId) { return call_method<"setSessionId", jni::ref<android::media::AudioTrack_Builder>>(sessionId); }
	jni::ref<android::media::AudioTrack_Builder> setPerformanceMode(jint performanceMode) { return call_method<"setPerformanceMode", jni::ref<android::media::AudioTrack_Builder>>(performanceMode); }
	jni::ref<android::media::AudioTrack_Builder> setOffloadedPlayback(jboolean offload) { return call_method<"setOffloadedPlayback", jni::ref<android::media::AudioTrack_Builder>>(offload); }
	jni::ref<android::media::AudioTrack> build() { return call_method<"build", jni::ref<android::media::AudioTrack>>(); }

protected:

	AudioTrack_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIOTRACK_BUILDER
