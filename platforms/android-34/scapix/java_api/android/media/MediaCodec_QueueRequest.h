// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_QUEUEREQUEST_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_QUEUEREQUEST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaCodec_QueueRequest; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaCodec_QueueRequest>
{
	static constexpr fixed_string class_name = "android/media/MediaCodec$QueueRequest";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_QUEUEREQUEST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_QUEUEREQUEST)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_QUEUEREQUEST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/HardwareBuffer.h>
#include <scapix/java_api/android/media/MediaCodec_CryptoInfo.h>
#include <scapix/java_api/android/media/MediaCodec_LinearBlock.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaCodec_QueueRequest : public jni::object_base<"android/media/MediaCodec$QueueRequest",
	java::lang::Object>
{
public:

	jni::ref<android::media::MediaCodec_QueueRequest> setLinearBlock(jni::ref<android::media::MediaCodec_LinearBlock> block, jint offset, jint size) { return call_method<"setLinearBlock", jni::ref<android::media::MediaCodec_QueueRequest>>(block, offset, size); }
	jni::ref<android::media::MediaCodec_QueueRequest> setEncryptedLinearBlock(jni::ref<android::media::MediaCodec_LinearBlock> block, jint offset, jint size, jni::ref<android::media::MediaCodec_CryptoInfo> cryptoInfo) { return call_method<"setEncryptedLinearBlock", jni::ref<android::media::MediaCodec_QueueRequest>>(block, offset, size, cryptoInfo); }
	jni::ref<android::media::MediaCodec_QueueRequest> setHardwareBuffer(jni::ref<android::hardware::HardwareBuffer> buffer) { return call_method<"setHardwareBuffer", jni::ref<android::media::MediaCodec_QueueRequest>>(buffer); }
	jni::ref<android::media::MediaCodec_QueueRequest> setPresentationTimeUs(jlong presentationTimeUs) { return call_method<"setPresentationTimeUs", jni::ref<android::media::MediaCodec_QueueRequest>>(presentationTimeUs); }
	jni::ref<android::media::MediaCodec_QueueRequest> setFlags(jint flags) { return call_method<"setFlags", jni::ref<android::media::MediaCodec_QueueRequest>>(flags); }
	jni::ref<android::media::MediaCodec_QueueRequest> setIntegerParameter(jni::ref<java::lang::String> key, jint value) { return call_method<"setIntegerParameter", jni::ref<android::media::MediaCodec_QueueRequest>>(key, value); }
	jni::ref<android::media::MediaCodec_QueueRequest> setLongParameter(jni::ref<java::lang::String> key, jlong value) { return call_method<"setLongParameter", jni::ref<android::media::MediaCodec_QueueRequest>>(key, value); }
	jni::ref<android::media::MediaCodec_QueueRequest> setFloatParameter(jni::ref<java::lang::String> key, jfloat value) { return call_method<"setFloatParameter", jni::ref<android::media::MediaCodec_QueueRequest>>(key, value); }
	jni::ref<android::media::MediaCodec_QueueRequest> setByteBufferParameter(jni::ref<java::lang::String> key, jni::ref<java::nio::ByteBuffer> value) { return call_method<"setByteBufferParameter", jni::ref<android::media::MediaCodec_QueueRequest>>(key, value); }
	jni::ref<android::media::MediaCodec_QueueRequest> setStringParameter(jni::ref<java::lang::String> key, jni::ref<java::lang::String> value) { return call_method<"setStringParameter", jni::ref<android::media::MediaCodec_QueueRequest>>(key, value); }
	void queue() { return call_method<"queue", void>(); }

protected:

	MediaCodec_QueueRequest(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACODEC_QUEUEREQUEST
