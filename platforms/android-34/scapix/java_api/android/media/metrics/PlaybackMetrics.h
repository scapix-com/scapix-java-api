// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKMETRICS_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKMETRICS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media::metrics { class PlaybackMetrics; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::metrics::PlaybackMetrics>
{
	static constexpr fixed_string class_name = "android/media/metrics/PlaybackMetrics";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKMETRICS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKMETRICS)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKMETRICS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/media/metrics/PlaybackMetrics_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::metrics::PlaybackMetrics : public jni::object_base<"android/media/metrics/PlaybackMetrics",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = PlaybackMetrics_Builder;

	static jint CONTENT_TYPE_AD() { return get_static_field<"CONTENT_TYPE_AD", jint>(); }
	static jint CONTENT_TYPE_MAIN() { return get_static_field<"CONTENT_TYPE_MAIN", jint>(); }
	static jint CONTENT_TYPE_OTHER() { return get_static_field<"CONTENT_TYPE_OTHER", jint>(); }
	static jint CONTENT_TYPE_UNKNOWN() { return get_static_field<"CONTENT_TYPE_UNKNOWN", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DRM_TYPE_CLEARKEY() { return get_static_field<"DRM_TYPE_CLEARKEY", jint>(); }
	static jint DRM_TYPE_NONE() { return get_static_field<"DRM_TYPE_NONE", jint>(); }
	static jint DRM_TYPE_OTHER() { return get_static_field<"DRM_TYPE_OTHER", jint>(); }
	static jint DRM_TYPE_PLAY_READY() { return get_static_field<"DRM_TYPE_PLAY_READY", jint>(); }
	static jint DRM_TYPE_WIDEVINE_L1() { return get_static_field<"DRM_TYPE_WIDEVINE_L1", jint>(); }
	static jint DRM_TYPE_WIDEVINE_L3() { return get_static_field<"DRM_TYPE_WIDEVINE_L3", jint>(); }
	static jint DRM_TYPE_WV_L3_FALLBACK() { return get_static_field<"DRM_TYPE_WV_L3_FALLBACK", jint>(); }
	static jint PLAYBACK_TYPE_LIVE() { return get_static_field<"PLAYBACK_TYPE_LIVE", jint>(); }
	static jint PLAYBACK_TYPE_OTHER() { return get_static_field<"PLAYBACK_TYPE_OTHER", jint>(); }
	static jint PLAYBACK_TYPE_UNKNOWN() { return get_static_field<"PLAYBACK_TYPE_UNKNOWN", jint>(); }
	static jint PLAYBACK_TYPE_VOD() { return get_static_field<"PLAYBACK_TYPE_VOD", jint>(); }
	static jint STREAM_SOURCE_DEVICE() { return get_static_field<"STREAM_SOURCE_DEVICE", jint>(); }
	static jint STREAM_SOURCE_MIXED() { return get_static_field<"STREAM_SOURCE_MIXED", jint>(); }
	static jint STREAM_SOURCE_NETWORK() { return get_static_field<"STREAM_SOURCE_NETWORK", jint>(); }
	static jint STREAM_SOURCE_UNKNOWN() { return get_static_field<"STREAM_SOURCE_UNKNOWN", jint>(); }
	static jint STREAM_TYPE_DASH() { return get_static_field<"STREAM_TYPE_DASH", jint>(); }
	static jint STREAM_TYPE_HLS() { return get_static_field<"STREAM_TYPE_HLS", jint>(); }
	static jint STREAM_TYPE_OTHER() { return get_static_field<"STREAM_TYPE_OTHER", jint>(); }
	static jint STREAM_TYPE_PROGRESSIVE() { return get_static_field<"STREAM_TYPE_PROGRESSIVE", jint>(); }
	static jint STREAM_TYPE_SS() { return get_static_field<"STREAM_TYPE_SS", jint>(); }
	static jint STREAM_TYPE_UNKNOWN() { return get_static_field<"STREAM_TYPE_UNKNOWN", jint>(); }

	jlong getMediaDurationMillis() { return call_method<"getMediaDurationMillis", jlong>(); }
	jint getStreamSource() { return call_method<"getStreamSource", jint>(); }
	jint getStreamType() { return call_method<"getStreamType", jint>(); }
	jint getPlaybackType() { return call_method<"getPlaybackType", jint>(); }
	jint getDrmType() { return call_method<"getDrmType", jint>(); }
	jint getContentType() { return call_method<"getContentType", jint>(); }
	jni::ref<java::lang::String> getPlayerName() { return call_method<"getPlayerName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPlayerVersion() { return call_method<"getPlayerVersion", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jlong>> getExperimentIds() { return call_method<"getExperimentIds", jni::ref<jni::array<jlong>>>(); }
	jint getVideoFramesPlayed() { return call_method<"getVideoFramesPlayed", jint>(); }
	jint getVideoFramesDropped() { return call_method<"getVideoFramesDropped", jint>(); }
	jint getAudioUnderrunCount() { return call_method<"getAudioUnderrunCount", jint>(); }
	jlong getNetworkBytesRead() { return call_method<"getNetworkBytesRead", jlong>(); }
	jlong getLocalBytesRead() { return call_method<"getLocalBytesRead", jlong>(); }
	jlong getNetworkTransferDurationMillis() { return call_method<"getNetworkTransferDurationMillis", jlong>(); }
	jni::ref<jni::array<jbyte>> getDrmSessionId() { return call_method<"getDrmSessionId", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<android::os::Bundle> getMetricsBundle() { return call_method<"getMetricsBundle", jni::ref<android::os::Bundle>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }

protected:

	PlaybackMetrics(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_METRICS_PLAYBACKMETRICS
