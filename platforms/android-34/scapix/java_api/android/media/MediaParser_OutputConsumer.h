// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_OUTPUTCONSUMER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_OUTPUTCONSUMER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaParser_OutputConsumer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaParser_OutputConsumer>
{
	static constexpr fixed_string class_name = "android/media/MediaParser$OutputConsumer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_OUTPUTCONSUMER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_OUTPUTCONSUMER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_OUTPUTCONSUMER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/MediaCodec_CryptoInfo.h>
#include <scapix/java_api/android/media/MediaParser_InputReader.h>
#include <scapix/java_api/android/media/MediaParser_SeekMap.h>
#include <scapix/java_api/android/media/MediaParser_TrackData.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaParser_OutputConsumer : public jni::object_base<"android/media/MediaParser$OutputConsumer",
	java::lang::Object>
{
public:

	void onSeekMapFound(jni::ref<android::media::MediaParser_SeekMap> p1) { return call_method<"onSeekMapFound", void>(p1); }
	void onTrackCountFound(jint p1) { return call_method<"onTrackCountFound", void>(p1); }
	void onTrackDataFound(jint p1, jni::ref<android::media::MediaParser_TrackData> p2) { return call_method<"onTrackDataFound", void>(p1, p2); }
	void onSampleDataFound(jint p1, jni::ref<android::media::MediaParser_InputReader> p2) { return call_method<"onSampleDataFound", void>(p1, p2); }
	void onSampleCompleted(jint p1, jlong p2, jint p3, jint p4, jint p5, jni::ref<android::media::MediaCodec_CryptoInfo> p6) { return call_method<"onSampleCompleted", void>(p1, p2, p3, p4, p5, p6); }

protected:

	MediaParser_OutputConsumer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAPARSER_OUTPUTCONSUMER
