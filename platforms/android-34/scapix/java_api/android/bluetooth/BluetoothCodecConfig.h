// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth { class BluetoothCodecConfig; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::BluetoothCodecConfig>
{
	static constexpr fixed_string class_name = "android/bluetooth/BluetoothCodecConfig";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/bluetooth/BluetoothCodecConfig_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::BluetoothCodecConfig : public jni::object_base<"android/bluetooth/BluetoothCodecConfig",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = BluetoothCodecConfig_Builder;

	static jint BITS_PER_SAMPLE_16() { return get_static_field<"BITS_PER_SAMPLE_16", jint>(); }
	static jint BITS_PER_SAMPLE_24() { return get_static_field<"BITS_PER_SAMPLE_24", jint>(); }
	static jint BITS_PER_SAMPLE_32() { return get_static_field<"BITS_PER_SAMPLE_32", jint>(); }
	static jint BITS_PER_SAMPLE_NONE() { return get_static_field<"BITS_PER_SAMPLE_NONE", jint>(); }
	static jint CHANNEL_MODE_MONO() { return get_static_field<"CHANNEL_MODE_MONO", jint>(); }
	static jint CHANNEL_MODE_NONE() { return get_static_field<"CHANNEL_MODE_NONE", jint>(); }
	static jint CHANNEL_MODE_STEREO() { return get_static_field<"CHANNEL_MODE_STEREO", jint>(); }
	static jint CODEC_PRIORITY_DEFAULT() { return get_static_field<"CODEC_PRIORITY_DEFAULT", jint>(); }
	static jint CODEC_PRIORITY_DISABLED() { return get_static_field<"CODEC_PRIORITY_DISABLED", jint>(); }
	static jint CODEC_PRIORITY_HIGHEST() { return get_static_field<"CODEC_PRIORITY_HIGHEST", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint SAMPLE_RATE_176400() { return get_static_field<"SAMPLE_RATE_176400", jint>(); }
	static jint SAMPLE_RATE_192000() { return get_static_field<"SAMPLE_RATE_192000", jint>(); }
	static jint SAMPLE_RATE_44100() { return get_static_field<"SAMPLE_RATE_44100", jint>(); }
	static jint SAMPLE_RATE_48000() { return get_static_field<"SAMPLE_RATE_48000", jint>(); }
	static jint SAMPLE_RATE_88200() { return get_static_field<"SAMPLE_RATE_88200", jint>(); }
	static jint SAMPLE_RATE_96000() { return get_static_field<"SAMPLE_RATE_96000", jint>(); }
	static jint SAMPLE_RATE_NONE() { return get_static_field<"SAMPLE_RATE_NONE", jint>(); }
	static jint SOURCE_CODEC_TYPE_AAC() { return get_static_field<"SOURCE_CODEC_TYPE_AAC", jint>(); }
	static jint SOURCE_CODEC_TYPE_APTX() { return get_static_field<"SOURCE_CODEC_TYPE_APTX", jint>(); }
	static jint SOURCE_CODEC_TYPE_APTX_HD() { return get_static_field<"SOURCE_CODEC_TYPE_APTX_HD", jint>(); }
	static jint SOURCE_CODEC_TYPE_INVALID() { return get_static_field<"SOURCE_CODEC_TYPE_INVALID", jint>(); }
	static jint SOURCE_CODEC_TYPE_LC3() { return get_static_field<"SOURCE_CODEC_TYPE_LC3", jint>(); }
	static jint SOURCE_CODEC_TYPE_LDAC() { return get_static_field<"SOURCE_CODEC_TYPE_LDAC", jint>(); }
	static jint SOURCE_CODEC_TYPE_OPUS() { return get_static_field<"SOURCE_CODEC_TYPE_OPUS", jint>(); }
	static jint SOURCE_CODEC_TYPE_SBC() { return get_static_field<"SOURCE_CODEC_TYPE_SBC", jint>(); }

	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	jint getCodecType() { return call_method<"getCodecType", jint>(); }
	jboolean isMandatoryCodec() { return call_method<"isMandatoryCodec", jboolean>(); }
	jint getCodecPriority() { return call_method<"getCodecPriority", jint>(); }
	jint getSampleRate() { return call_method<"getSampleRate", jint>(); }
	jint getBitsPerSample() { return call_method<"getBitsPerSample", jint>(); }
	jint getChannelMode() { return call_method<"getChannelMode", jint>(); }
	jlong getCodecSpecific1() { return call_method<"getCodecSpecific1", jlong>(); }
	jlong getCodecSpecific2() { return call_method<"getCodecSpecific2", jlong>(); }
	jlong getCodecSpecific3() { return call_method<"getCodecSpecific3", jlong>(); }
	jlong getCodecSpecific4() { return call_method<"getCodecSpecific4", jlong>(); }

protected:

	BluetoothCodecConfig(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHCODECCONFIG
