// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHSOCKET_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHSOCKET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth { class BluetoothSocket; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::BluetoothSocket>
{
	static constexpr fixed_string class_name = "android/bluetooth/BluetoothSocket";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHSOCKET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHSOCKET)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHSOCKET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::BluetoothSocket : public jni::object_base<"android/bluetooth/BluetoothSocket",
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jint TYPE_L2CAP() { return get_static_field<"TYPE_L2CAP", jint>(); }
	static jint TYPE_RFCOMM() { return get_static_field<"TYPE_RFCOMM", jint>(); }
	static jint TYPE_SCO() { return get_static_field<"TYPE_SCO", jint>(); }

	jni::ref<android::bluetooth::BluetoothDevice> getRemoteDevice() { return call_method<"getRemoteDevice", jni::ref<android::bluetooth::BluetoothDevice>>(); }
	jni::ref<java::io::InputStream> getInputStream() { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	jboolean isConnected() { return call_method<"isConnected", jboolean>(); }
	void connect() { return call_method<"connect", void>(); }
	void close() { return call_method<"close", void>(); }
	jint getMaxTransmitPacketSize() { return call_method<"getMaxTransmitPacketSize", jint>(); }
	jint getMaxReceivePacketSize() { return call_method<"getMaxReceivePacketSize", jint>(); }
	jint getConnectionType() { return call_method<"getConnectionType", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	BluetoothSocket(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHSOCKET
