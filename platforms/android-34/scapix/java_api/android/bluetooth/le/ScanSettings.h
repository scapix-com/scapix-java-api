// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANSETTINGS_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANSETTINGS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth::le { class ScanSettings; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::le::ScanSettings>
{
	static constexpr fixed_string class_name = "android/bluetooth/le/ScanSettings";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANSETTINGS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANSETTINGS)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANSETTINGS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/bluetooth/le/ScanSettings_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::le::ScanSettings : public jni::object_base<"android/bluetooth/le/ScanSettings",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = ScanSettings_Builder;

	static jlong AUTO_BATCH_MIN_REPORT_DELAY_MILLIS() { return get_static_field<"AUTO_BATCH_MIN_REPORT_DELAY_MILLIS", jlong>(); }
	static jint CALLBACK_TYPE_ALL_MATCHES() { return get_static_field<"CALLBACK_TYPE_ALL_MATCHES", jint>(); }
	static jint CALLBACK_TYPE_ALL_MATCHES_AUTO_BATCH() { return get_static_field<"CALLBACK_TYPE_ALL_MATCHES_AUTO_BATCH", jint>(); }
	static jint CALLBACK_TYPE_FIRST_MATCH() { return get_static_field<"CALLBACK_TYPE_FIRST_MATCH", jint>(); }
	static jint CALLBACK_TYPE_MATCH_LOST() { return get_static_field<"CALLBACK_TYPE_MATCH_LOST", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint MATCH_MODE_AGGRESSIVE() { return get_static_field<"MATCH_MODE_AGGRESSIVE", jint>(); }
	static jint MATCH_MODE_STICKY() { return get_static_field<"MATCH_MODE_STICKY", jint>(); }
	static jint MATCH_NUM_FEW_ADVERTISEMENT() { return get_static_field<"MATCH_NUM_FEW_ADVERTISEMENT", jint>(); }
	static jint MATCH_NUM_MAX_ADVERTISEMENT() { return get_static_field<"MATCH_NUM_MAX_ADVERTISEMENT", jint>(); }
	static jint MATCH_NUM_ONE_ADVERTISEMENT() { return get_static_field<"MATCH_NUM_ONE_ADVERTISEMENT", jint>(); }
	static jint PHY_LE_ALL_SUPPORTED() { return get_static_field<"PHY_LE_ALL_SUPPORTED", jint>(); }
	static jint SCAN_MODE_BALANCED() { return get_static_field<"SCAN_MODE_BALANCED", jint>(); }
	static jint SCAN_MODE_LOW_LATENCY() { return get_static_field<"SCAN_MODE_LOW_LATENCY", jint>(); }
	static jint SCAN_MODE_LOW_POWER() { return get_static_field<"SCAN_MODE_LOW_POWER", jint>(); }
	static jint SCAN_MODE_OPPORTUNISTIC() { return get_static_field<"SCAN_MODE_OPPORTUNISTIC", jint>(); }

	jint getScanMode() { return call_method<"getScanMode", jint>(); }
	jint getCallbackType() { return call_method<"getCallbackType", jint>(); }
	jint getScanResultType() { return call_method<"getScanResultType", jint>(); }
	jboolean getLegacy() { return call_method<"getLegacy", jboolean>(); }
	jint getPhy() { return call_method<"getPhy", jint>(); }
	jlong getReportDelayMillis() { return call_method<"getReportDelayMillis", jlong>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }

protected:

	ScanSettings(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_LE_SCANSETTINGS
