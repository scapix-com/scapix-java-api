// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHLEAUDIOCODECSTATUS_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHLEAUDIOCODECSTATUS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth { class BluetoothLeAudioCodecStatus; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::BluetoothLeAudioCodecStatus>
{
	static constexpr fixed_string class_name = "android/bluetooth/BluetoothLeAudioCodecStatus";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHLEAUDIOCODECSTATUS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHLEAUDIOCODECSTATUS)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHLEAUDIOCODECSTATUS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/BluetoothLeAudioCodecConfig.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::BluetoothLeAudioCodecStatus : public jni::object_base<"android/bluetooth/BluetoothLeAudioCodecStatus",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<java::lang::String> EXTRA_LE_AUDIO_CODEC_STATUS() { return get_static_field<"EXTRA_LE_AUDIO_CODEC_STATUS", jni::ref<java::lang::String>>(); }

	static jni::ref<android::bluetooth::BluetoothLeAudioCodecStatus> new_object(jni::ref<android::bluetooth::BluetoothLeAudioCodecConfig> inputCodecConfig, jni::ref<android::bluetooth::BluetoothLeAudioCodecConfig> outputCodecConfig, jni::ref<java::util::List> inputCodecsLocalCapabilities, jni::ref<java::util::List> outputCodecsLocalCapabilities, jni::ref<java::util::List> inputCodecsSelectableCapabilities, jni::ref<java::util::List> outputCodecsSelectableCapabilities) { return base_::new_object(inputCodecConfig, outputCodecConfig, inputCodecsLocalCapabilities, outputCodecsLocalCapabilities, inputCodecsSelectableCapabilities, outputCodecsSelectableCapabilities); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jboolean isInputCodecConfigSelectable(jni::ref<android::bluetooth::BluetoothLeAudioCodecConfig> codecConfig) { return call_method<"isInputCodecConfigSelectable", jboolean>(codecConfig); }
	jboolean isOutputCodecConfigSelectable(jni::ref<android::bluetooth::BluetoothLeAudioCodecConfig> codecConfig) { return call_method<"isOutputCodecConfigSelectable", jboolean>(codecConfig); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	jni::ref<android::bluetooth::BluetoothLeAudioCodecConfig> getInputCodecConfig() { return call_method<"getInputCodecConfig", jni::ref<android::bluetooth::BluetoothLeAudioCodecConfig>>(); }
	jni::ref<android::bluetooth::BluetoothLeAudioCodecConfig> getOutputCodecConfig() { return call_method<"getOutputCodecConfig", jni::ref<android::bluetooth::BluetoothLeAudioCodecConfig>>(); }
	jni::ref<java::util::List> getInputCodecLocalCapabilities() { return call_method<"getInputCodecLocalCapabilities", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getOutputCodecLocalCapabilities() { return call_method<"getOutputCodecLocalCapabilities", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getInputCodecSelectableCapabilities() { return call_method<"getInputCodecSelectableCapabilities", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getOutputCodecSelectableCapabilities() { return call_method<"getOutputCodecSelectableCapabilities", jni::ref<java::util::List>>(); }

protected:

	BluetoothLeAudioCodecStatus(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHLEAUDIOCODECSTATUS
