// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_HTTP_BIDIRECTIONALSTREAM_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_HTTP_BIDIRECTIONALSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::http { class BidirectionalStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::http::BidirectionalStream>
{
	static constexpr fixed_string class_name = "android/net/http/BidirectionalStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_HTTP_BIDIRECTIONALSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_HTTP_BIDIRECTIONALSTREAM)
#define SCAPIX_JAVA_API_ANDROID_NET_HTTP_BIDIRECTIONALSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/http/HeaderBlock.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/android/net/http/BidirectionalStream_Callback.h>
#include <scapix/java_api/android/net/http/BidirectionalStream_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::http::BidirectionalStream : public jni::object_base<"android/net/http/BidirectionalStream",
	java::lang::Object>
{
public:

	using Callback = BidirectionalStream_Callback;
	using Builder = BidirectionalStream_Builder;

	static jint STREAM_PRIORITY_HIGHEST() { return get_static_field<"STREAM_PRIORITY_HIGHEST", jint>(); }
	static jint STREAM_PRIORITY_IDLE() { return get_static_field<"STREAM_PRIORITY_IDLE", jint>(); }
	static jint STREAM_PRIORITY_LOW() { return get_static_field<"STREAM_PRIORITY_LOW", jint>(); }
	static jint STREAM_PRIORITY_LOWEST() { return get_static_field<"STREAM_PRIORITY_LOWEST", jint>(); }
	static jint STREAM_PRIORITY_MEDIUM() { return get_static_field<"STREAM_PRIORITY_MEDIUM", jint>(); }

	static jni::ref<android::net::http::BidirectionalStream> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> getHttpMethod() { return call_method<"getHttpMethod", jni::ref<java::lang::String>>(); }
	jboolean hasTrafficStatsTag() { return call_method<"hasTrafficStatsTag", jboolean>(); }
	jint getTrafficStatsTag() { return call_method<"getTrafficStatsTag", jint>(); }
	jboolean hasTrafficStatsUid() { return call_method<"hasTrafficStatsUid", jboolean>(); }
	jint getTrafficStatsUid() { return call_method<"getTrafficStatsUid", jint>(); }
	jni::ref<android::net::http::HeaderBlock> getHeaders() { return call_method<"getHeaders", jni::ref<android::net::http::HeaderBlock>>(); }
	jint getPriority() { return call_method<"getPriority", jint>(); }
	jboolean isDelayRequestHeadersUntilFirstFlushEnabled() { return call_method<"isDelayRequestHeadersUntilFirstFlushEnabled", jboolean>(); }
	void start() { return call_method<"start", void>(); }
	void read(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"read", void>(p1); }
	void write(jni::ref<java::nio::ByteBuffer> p1, jboolean p2) { return call_method<"write", void>(p1, p2); }
	void flush() { return call_method<"flush", void>(); }
	void cancel() { return call_method<"cancel", void>(); }
	jboolean isDone() { return call_method<"isDone", jboolean>(); }

protected:

	BidirectionalStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_HTTP_BIDIRECTIONALSTREAM
