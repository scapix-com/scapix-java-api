// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_HTTP_HTTPENGINE_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_HTTP_HTTPENGINE_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::http { class HttpEngine_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::http::HttpEngine_Builder>
{
	static constexpr fixed_string class_name = "android/net/http/HttpEngine$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_HTTP_HTTPENGINE_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_HTTP_HTTPENGINE_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_NET_HTTP_HTTPENGINE_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/net/http/ConnectionMigrationOptions.h>
#include <scapix/java_api/android/net/http/DnsOptions.h>
#include <scapix/java_api/android/net/http/HttpEngine.h>
#include <scapix/java_api/android/net/http/QuicOptions.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::http::HttpEngine_Builder : public jni::object_base<"android/net/http/HttpEngine$Builder",
	java::lang::Object>
{
public:

	static jint HTTP_CACHE_DISABLED() { return get_static_field<"HTTP_CACHE_DISABLED", jint>(); }
	static jint HTTP_CACHE_DISK() { return get_static_field<"HTTP_CACHE_DISK", jint>(); }
	static jint HTTP_CACHE_DISK_NO_HTTP() { return get_static_field<"HTTP_CACHE_DISK_NO_HTTP", jint>(); }
	static jint HTTP_CACHE_IN_MEMORY() { return get_static_field<"HTTP_CACHE_IN_MEMORY", jint>(); }

	static jni::ref<android::net::http::HttpEngine_Builder> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	jni::ref<java::lang::String> getDefaultUserAgent() { return call_method<"getDefaultUserAgent", jni::ref<java::lang::String>>(); }
	jni::ref<android::net::http::HttpEngine_Builder> setUserAgent(jni::ref<java::lang::String> userAgent) { return call_method<"setUserAgent", jni::ref<android::net::http::HttpEngine_Builder>>(userAgent); }
	jni::ref<android::net::http::HttpEngine_Builder> setStoragePath(jni::ref<java::lang::String> value) { return call_method<"setStoragePath", jni::ref<android::net::http::HttpEngine_Builder>>(value); }
	jni::ref<android::net::http::HttpEngine_Builder> setEnableQuic(jboolean value) { return call_method<"setEnableQuic", jni::ref<android::net::http::HttpEngine_Builder>>(value); }
	jni::ref<android::net::http::HttpEngine_Builder> setEnableHttp2(jboolean value) { return call_method<"setEnableHttp2", jni::ref<android::net::http::HttpEngine_Builder>>(value); }
	jni::ref<android::net::http::HttpEngine_Builder> setEnableBrotli(jboolean value) { return call_method<"setEnableBrotli", jni::ref<android::net::http::HttpEngine_Builder>>(value); }
	jni::ref<android::net::http::HttpEngine_Builder> setEnableHttpCache(jint cacheMode, jlong maxSize) { return call_method<"setEnableHttpCache", jni::ref<android::net::http::HttpEngine_Builder>>(cacheMode, maxSize); }
	jni::ref<android::net::http::HttpEngine_Builder> addQuicHint(jni::ref<java::lang::String> host, jint port, jint alternatePort) { return call_method<"addQuicHint", jni::ref<android::net::http::HttpEngine_Builder>>(host, port, alternatePort); }
	jni::ref<android::net::http::HttpEngine_Builder> addPublicKeyPins(jni::ref<java::lang::String> hostName, jni::ref<java::util::Set> pinsSha256, jboolean includeSubdomains, jni::ref<java::time::Instant> expirationInstant) { return call_method<"addPublicKeyPins", jni::ref<android::net::http::HttpEngine_Builder>>(hostName, pinsSha256, includeSubdomains, expirationInstant); }
	jni::ref<android::net::http::HttpEngine_Builder> setEnablePublicKeyPinningBypassForLocalTrustAnchors(jboolean value) { return call_method<"setEnablePublicKeyPinningBypassForLocalTrustAnchors", jni::ref<android::net::http::HttpEngine_Builder>>(value); }
	jni::ref<android::net::http::HttpEngine_Builder> setQuicOptions(jni::ref<android::net::http::QuicOptions> quicOptions) { return call_method<"setQuicOptions", jni::ref<android::net::http::HttpEngine_Builder>>(quicOptions); }
	jni::ref<android::net::http::HttpEngine_Builder> setDnsOptions(jni::ref<android::net::http::DnsOptions> dnsOptions) { return call_method<"setDnsOptions", jni::ref<android::net::http::HttpEngine_Builder>>(dnsOptions); }
	jni::ref<android::net::http::HttpEngine_Builder> setConnectionMigrationOptions(jni::ref<android::net::http::ConnectionMigrationOptions> connectionMigrationOptions) { return call_method<"setConnectionMigrationOptions", jni::ref<android::net::http::HttpEngine_Builder>>(connectionMigrationOptions); }
	jni::ref<android::net::http::HttpEngine> build() { return call_method<"build", jni::ref<android::net::http::HttpEngine>>(); }

protected:

	HttpEngine_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_HTTP_HTTPENGINE_BUILDER
