// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::sip { class SipManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::sip::SipManager>
{
	static constexpr fixed_string class_name = "android/net/sip/SipManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPMANAGER)
#define SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/net/sip/SipAudioCall.h>
#include <scapix/java_api/android/net/sip/SipAudioCall_Listener.h>
#include <scapix/java_api/android/net/sip/SipProfile.h>
#include <scapix/java_api/android/net/sip/SipRegistrationListener.h>
#include <scapix/java_api/android/net/sip/SipSession.h>
#include <scapix/java_api/android/net/sip/SipSession_Listener.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::sip::SipManager : public jni::object_base<"android/net/sip/SipManager",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> EXTRA_CALL_ID() { return get_static_field<"EXTRA_CALL_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_OFFER_SD() { return get_static_field<"EXTRA_OFFER_SD", jni::ref<java::lang::String>>(); }
	static jint INCOMING_CALL_RESULT_CODE() { return get_static_field<"INCOMING_CALL_RESULT_CODE", jint>(); }

	static jni::ref<android::net::sip::SipManager> newInstance(jni::ref<android::content::Context> context) { return call_static_method<"newInstance", jni::ref<android::net::sip::SipManager>>(context); }
	static jboolean isApiSupported(jni::ref<android::content::Context> context) { return call_static_method<"isApiSupported", jboolean>(context); }
	static jboolean isVoipSupported(jni::ref<android::content::Context> context) { return call_static_method<"isVoipSupported", jboolean>(context); }
	static jboolean isSipWifiOnly(jni::ref<android::content::Context> context) { return call_static_method<"isSipWifiOnly", jboolean>(context); }
	void open(jni::ref<android::net::sip::SipProfile> localProfile) { return call_method<"open", void>(localProfile); }
	void open(jni::ref<android::net::sip::SipProfile> localProfile, jni::ref<android::app::PendingIntent> incomingCallPendingIntent, jni::ref<android::net::sip::SipRegistrationListener> listener) { return call_method<"open", void>(localProfile, incomingCallPendingIntent, listener); }
	void setRegistrationListener(jni::ref<java::lang::String> localProfileUri, jni::ref<android::net::sip::SipRegistrationListener> listener) { return call_method<"setRegistrationListener", void>(localProfileUri, listener); }
	void close(jni::ref<java::lang::String> localProfileUri) { return call_method<"close", void>(localProfileUri); }
	jboolean isOpened(jni::ref<java::lang::String> localProfileUri) { return call_method<"isOpened", jboolean>(localProfileUri); }
	jboolean isRegistered(jni::ref<java::lang::String> localProfileUri) { return call_method<"isRegistered", jboolean>(localProfileUri); }
	jni::ref<android::net::sip::SipAudioCall> makeAudioCall(jni::ref<android::net::sip::SipProfile> localProfile, jni::ref<android::net::sip::SipProfile> peerProfile, jni::ref<android::net::sip::SipAudioCall_Listener> listener, jint timeout) { return call_method<"makeAudioCall", jni::ref<android::net::sip::SipAudioCall>>(localProfile, peerProfile, listener, timeout); }
	jni::ref<android::net::sip::SipAudioCall> makeAudioCall(jni::ref<java::lang::String> localProfileUri, jni::ref<java::lang::String> peerProfileUri, jni::ref<android::net::sip::SipAudioCall_Listener> listener, jint timeout) { return call_method<"makeAudioCall", jni::ref<android::net::sip::SipAudioCall>>(localProfileUri, peerProfileUri, listener, timeout); }
	jni::ref<android::net::sip::SipAudioCall> takeAudioCall(jni::ref<android::content::Intent> incomingCallIntent, jni::ref<android::net::sip::SipAudioCall_Listener> listener) { return call_method<"takeAudioCall", jni::ref<android::net::sip::SipAudioCall>>(incomingCallIntent, listener); }
	static jboolean isIncomingCallIntent(jni::ref<android::content::Intent> intent) { return call_static_method<"isIncomingCallIntent", jboolean>(intent); }
	static jni::ref<java::lang::String> getCallId(jni::ref<android::content::Intent> incomingCallIntent) { return call_static_method<"getCallId", jni::ref<java::lang::String>>(incomingCallIntent); }
	static jni::ref<java::lang::String> getOfferSessionDescription(jni::ref<android::content::Intent> incomingCallIntent) { return call_static_method<"getOfferSessionDescription", jni::ref<java::lang::String>>(incomingCallIntent); }
	void register_(jni::ref<android::net::sip::SipProfile> localProfile, jint expiryTime, jni::ref<android::net::sip::SipRegistrationListener> listener) { return call_method<"register", void>(localProfile, expiryTime, listener); }
	void unregister(jni::ref<android::net::sip::SipProfile> localProfile, jni::ref<android::net::sip::SipRegistrationListener> listener) { return call_method<"unregister", void>(localProfile, listener); }
	jni::ref<android::net::sip::SipSession> getSessionFor(jni::ref<android::content::Intent> incomingCallIntent) { return call_method<"getSessionFor", jni::ref<android::net::sip::SipSession>>(incomingCallIntent); }
	jni::ref<android::net::sip::SipSession> createSipSession(jni::ref<android::net::sip::SipProfile> localProfile, jni::ref<android::net::sip::SipSession_Listener> listener) { return call_method<"createSipSession", jni::ref<android::net::sip::SipSession>>(localProfile, listener); }

protected:

	SipManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SIP_SIPMANAGER
