// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_RTT_RESPONDERCONFIG_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_RTT_RESPONDERCONFIG_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi::rtt { class ResponderConfig_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::rtt::ResponderConfig_Builder>
{
	static constexpr fixed_string class_name = "android/net/wifi/rtt/ResponderConfig$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_RTT_RESPONDERCONFIG_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_RTT_RESPONDERCONFIG_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_RTT_RESPONDERCONFIG_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/MacAddress.h>
#include <scapix/java_api/android/net/wifi/rtt/ResponderConfig.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::rtt::ResponderConfig_Builder : public jni::object_base<"android/net/wifi/rtt/ResponderConfig$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> new_object() { return base_::new_object(); }
	jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> setMacAddress(jni::ref<android::net::MacAddress> macAddress) { return call_method<"setMacAddress", jni::ref<android::net::wifi::rtt::ResponderConfig_Builder>>(macAddress); }
	jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> set80211mcSupported(jboolean supports80211mc) { return call_method<"set80211mcSupported", jni::ref<android::net::wifi::rtt::ResponderConfig_Builder>>(supports80211mc); }
	jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> setChannelWidth(jint channelWidth) { return call_method<"setChannelWidth", jni::ref<android::net::wifi::rtt::ResponderConfig_Builder>>(channelWidth); }
	jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> setFrequencyMhz(jint frequency) { return call_method<"setFrequencyMhz", jni::ref<android::net::wifi::rtt::ResponderConfig_Builder>>(frequency); }
	jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> setCenterFreq0Mhz(jint centerFreq0) { return call_method<"setCenterFreq0Mhz", jni::ref<android::net::wifi::rtt::ResponderConfig_Builder>>(centerFreq0); }
	jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> setCenterFreq1Mhz(jint centerFreq1) { return call_method<"setCenterFreq1Mhz", jni::ref<android::net::wifi::rtt::ResponderConfig_Builder>>(centerFreq1); }
	jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> setPreamble(jint preamble) { return call_method<"setPreamble", jni::ref<android::net::wifi::rtt::ResponderConfig_Builder>>(preamble); }
	jni::ref<android::net::wifi::rtt::ResponderConfig_Builder> setResponderType(jint responderType) { return call_method<"setResponderType", jni::ref<android::net::wifi::rtt::ResponderConfig_Builder>>(responderType); }
	jni::ref<android::net::wifi::rtt::ResponderConfig> build() { return call_method<"build", jni::ref<android::net::wifi::rtt::ResponderConfig>>(); }

protected:

	ResponderConfig_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_RTT_RESPONDERCONFIG_BUILDER
