// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_ADDNETWORKRESULT_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_ADDNETWORKRESULT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi { class WifiManager_AddNetworkResult; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::WifiManager_AddNetworkResult>
{
	static constexpr fixed_string class_name = "android/net/wifi/WifiManager$AddNetworkResult";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_ADDNETWORKRESULT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_ADDNETWORKRESULT)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_ADDNETWORKRESULT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::WifiManager_AddNetworkResult : public jni::object_base<"android/net/wifi/WifiManager$AddNetworkResult",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint STATUS_ADD_PASSPOINT_FAILURE() { return get_static_field<"STATUS_ADD_PASSPOINT_FAILURE", jint>(); }
	static jint STATUS_ADD_WIFI_CONFIG_FAILURE() { return get_static_field<"STATUS_ADD_WIFI_CONFIG_FAILURE", jint>(); }
	static jint STATUS_FAILURE_UNKNOWN() { return get_static_field<"STATUS_FAILURE_UNKNOWN", jint>(); }
	static jint STATUS_FAILURE_UPDATE_NETWORK_KEYS() { return get_static_field<"STATUS_FAILURE_UPDATE_NETWORK_KEYS", jint>(); }
	static jint STATUS_INVALID_CONFIGURATION() { return get_static_field<"STATUS_INVALID_CONFIGURATION", jint>(); }
	static jint STATUS_INVALID_CONFIGURATION_ENTERPRISE() { return get_static_field<"STATUS_INVALID_CONFIGURATION_ENTERPRISE", jint>(); }
	static jint STATUS_NO_PERMISSION() { return get_static_field<"STATUS_NO_PERMISSION", jint>(); }
	static jint STATUS_NO_PERMISSION_MODIFY_CONFIG() { return get_static_field<"STATUS_NO_PERMISSION_MODIFY_CONFIG", jint>(); }
	static jint STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATION() { return get_static_field<"STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATION", jint>(); }
	static jint STATUS_NO_PERMISSION_MODIFY_PROXY_SETTING() { return get_static_field<"STATUS_NO_PERMISSION_MODIFY_PROXY_SETTING", jint>(); }
	static jint STATUS_SUCCESS() { return get_static_field<"STATUS_SUCCESS", jint>(); }
	jint networkId() { return get_field<"networkId", jint>(); }
	jint statusCode() { return get_field<"statusCode", jint>(); }

	static jni::ref<android::net::wifi::WifiManager_AddNetworkResult> new_object(jint statusCode, jint networkId) { return base_::new_object(statusCode, networkId); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	WifiManager_AddNetworkResult(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_ADDNETWORKRESULT
