// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIAVAILABLECHANNEL_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIAVAILABLECHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi { class WifiAvailableChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::WifiAvailableChannel>
{
	static constexpr fixed_string class_name = "android/net/wifi/WifiAvailableChannel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIAVAILABLECHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIAVAILABLECHANNEL)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIAVAILABLECHANNEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::WifiAvailableChannel : public jni::object_base<"android/net/wifi/WifiAvailableChannel",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint OP_MODE_SAP() { return get_static_field<"OP_MODE_SAP", jint>(); }
	static jint OP_MODE_STA() { return get_static_field<"OP_MODE_STA", jint>(); }
	static jint OP_MODE_TDLS() { return get_static_field<"OP_MODE_TDLS", jint>(); }
	static jint OP_MODE_WIFI_AWARE() { return get_static_field<"OP_MODE_WIFI_AWARE", jint>(); }
	static jint OP_MODE_WIFI_DIRECT_CLI() { return get_static_field<"OP_MODE_WIFI_DIRECT_CLI", jint>(); }
	static jint OP_MODE_WIFI_DIRECT_GO() { return get_static_field<"OP_MODE_WIFI_DIRECT_GO", jint>(); }

	static jni::ref<android::net::wifi::WifiAvailableChannel> new_object(jint freq, jint opModes) { return base_::new_object(freq, opModes); }
	jint getFrequencyMhz() { return call_method<"getFrequencyMhz", jint>(); }
	jint getOperationalModes() { return call_method<"getOperationalModes", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	WifiAvailableChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIAVAILABLECHANNEL
