// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_AWARE_AWAREPAIRINGCONFIG_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_AWARE_AWAREPAIRINGCONFIG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi::aware { class AwarePairingConfig; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::aware::AwarePairingConfig>
{
	static constexpr fixed_string class_name = "android/net/wifi/aware/AwarePairingConfig";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_AWARE_AWAREPAIRINGCONFIG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_AWARE_AWAREPAIRINGCONFIG)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_AWARE_AWAREPAIRINGCONFIG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/net/wifi/aware/AwarePairingConfig_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::aware::AwarePairingConfig : public jni::object_base<"android/net/wifi/aware/AwarePairingConfig",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Builder = AwarePairingConfig_Builder;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint PAIRING_BOOTSTRAPPING_NFC_READER() { return get_static_field<"PAIRING_BOOTSTRAPPING_NFC_READER", jint>(); }
	static jint PAIRING_BOOTSTRAPPING_NFC_TAG() { return get_static_field<"PAIRING_BOOTSTRAPPING_NFC_TAG", jint>(); }
	static jint PAIRING_BOOTSTRAPPING_OPPORTUNISTIC() { return get_static_field<"PAIRING_BOOTSTRAPPING_OPPORTUNISTIC", jint>(); }
	static jint PAIRING_BOOTSTRAPPING_PASSPHRASE_DISPLAY() { return get_static_field<"PAIRING_BOOTSTRAPPING_PASSPHRASE_DISPLAY", jint>(); }
	static jint PAIRING_BOOTSTRAPPING_PASSPHRASE_KEYPAD() { return get_static_field<"PAIRING_BOOTSTRAPPING_PASSPHRASE_KEYPAD", jint>(); }
	static jint PAIRING_BOOTSTRAPPING_PIN_CODE_DISPLAY() { return get_static_field<"PAIRING_BOOTSTRAPPING_PIN_CODE_DISPLAY", jint>(); }
	static jint PAIRING_BOOTSTRAPPING_PIN_CODE_KEYPAD() { return get_static_field<"PAIRING_BOOTSTRAPPING_PIN_CODE_KEYPAD", jint>(); }
	static jint PAIRING_BOOTSTRAPPING_QR_DISPLAY() { return get_static_field<"PAIRING_BOOTSTRAPPING_QR_DISPLAY", jint>(); }
	static jint PAIRING_BOOTSTRAPPING_QR_SCAN() { return get_static_field<"PAIRING_BOOTSTRAPPING_QR_SCAN", jint>(); }

	jboolean isPairingCacheEnabled() { return call_method<"isPairingCacheEnabled", jboolean>(); }
	jboolean isPairingSetupEnabled() { return call_method<"isPairingSetupEnabled", jboolean>(); }
	jboolean isPairingVerificationEnabled() { return call_method<"isPairingVerificationEnabled", jboolean>(); }
	jint getBootstrappingMethods() { return call_method<"getBootstrappingMethods", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }

protected:

	AwarePairingConfig(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_AWARE_AWAREPAIRINGCONFIG
