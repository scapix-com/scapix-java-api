// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi { class WifiManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::WifiManager>
{
	static constexpr fixed_string class_name = "android/net/wifi/WifiManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/DhcpInfo.h>
#include <scapix/java_api/android/net/wifi/SoftApConfiguration.h>
#include <scapix/java_api/android/net/wifi/WifiConfiguration.h>
#include <scapix/java_api/android/net/wifi/WifiInfo.h>
#include <scapix/java_api/android/net/wifi/WifiManager_AddNetworkResult.h>
#include <scapix/java_api/android/net/wifi/WifiManager_LocalOnlyConnectionFailureListener.h>
#include <scapix/java_api/android/net/wifi/WifiManager_LocalOnlyHotspotCallback.h>
#include <scapix/java_api/android/net/wifi/WifiManager_MulticastLock.h>
#include <scapix/java_api/android/net/wifi/WifiManager_ScanResultsCallback.h>
#include <scapix/java_api/android/net/wifi/WifiManager_SubsystemRestartTrackingCallback.h>
#include <scapix/java_api/android/net/wifi/WifiManager_SuggestionConnectionStatusListener.h>
#include <scapix/java_api/android/net/wifi/WifiManager_SuggestionUserApprovalStatusListener.h>
#include <scapix/java_api/android/net/wifi/WifiManager_WifiLock.h>
#include <scapix/java_api/android/net/wifi/WifiManager_WpsCallback.h>
#include <scapix/java_api/android/net/wifi/WpsInfo.h>
#include <scapix/java_api/android/net/wifi/hotspot2/PasspointConfiguration.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/android/net/wifi/WifiManager_LocalOnlyHotspotReservation.h>
#include <scapix/java_api/android/net/wifi/WifiManager_InterfaceCreationImpact.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::WifiManager : public jni::object_base<"android/net/wifi/WifiManager",
	java::lang::Object>
{
public:

	using WpsCallback = WifiManager_WpsCallback;
	using WifiLock = WifiManager_WifiLock;
	using SuggestionUserApprovalStatusListener = WifiManager_SuggestionUserApprovalStatusListener;
	using SuggestionConnectionStatusListener = WifiManager_SuggestionConnectionStatusListener;
	using SubsystemRestartTrackingCallback = WifiManager_SubsystemRestartTrackingCallback;
	using ScanResultsCallback = WifiManager_ScanResultsCallback;
	using MulticastLock = WifiManager_MulticastLock;
	using LocalOnlyHotspotReservation = WifiManager_LocalOnlyHotspotReservation;
	using LocalOnlyHotspotCallback = WifiManager_LocalOnlyHotspotCallback;
	using LocalOnlyConnectionFailureListener = WifiManager_LocalOnlyConnectionFailureListener;
	using InterfaceCreationImpact = WifiManager_InterfaceCreationImpact;
	using AddNetworkResult = WifiManager_AddNetworkResult;

	static jni::ref<java::lang::String> ACTION_PICK_WIFI_NETWORK() { return get_static_field<"ACTION_PICK_WIFI_NETWORK", jni::ref<java::lang::String>>(); }
	static jint ACTION_REMOVE_SUGGESTION_DISCONNECT() { return get_static_field<"ACTION_REMOVE_SUGGESTION_DISCONNECT", jint>(); }
	static jint ACTION_REMOVE_SUGGESTION_LINGER() { return get_static_field<"ACTION_REMOVE_SUGGESTION_LINGER", jint>(); }
	static jni::ref<java::lang::String> ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE() { return get_static_field<"ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION() { return get_static_field<"ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_WIFI_SCAN_AVAILABILITY_CHANGED() { return get_static_field<"ACTION_WIFI_SCAN_AVAILABILITY_CHANGED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CHANNEL_DATA_KEY_FREQUENCY_MHZ() { return get_static_field<"CHANNEL_DATA_KEY_FREQUENCY_MHZ", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CHANNEL_DATA_KEY_NUM_AP() { return get_static_field<"CHANNEL_DATA_KEY_NUM_AP", jni::ref<java::lang::String>>(); }
	static jint ERROR_AUTHENTICATING() { return get_static_field<"ERROR_AUTHENTICATING", jint>(); }
	static jni::ref<java::lang::String> EXTRA_BSSID() { return get_static_field<"EXTRA_BSSID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_NETWORK_INFO() { return get_static_field<"EXTRA_NETWORK_INFO", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_NETWORK_SUGGESTION() { return get_static_field<"EXTRA_NETWORK_SUGGESTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_NEW_RSSI() { return get_static_field<"EXTRA_NEW_RSSI", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_NEW_STATE() { return get_static_field<"EXTRA_NEW_STATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_PREVIOUS_WIFI_STATE() { return get_static_field<"EXTRA_PREVIOUS_WIFI_STATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_RESULTS_UPDATED() { return get_static_field<"EXTRA_RESULTS_UPDATED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SCAN_AVAILABLE() { return get_static_field<"EXTRA_SCAN_AVAILABLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SUPPLICANT_CONNECTED() { return get_static_field<"EXTRA_SUPPLICANT_CONNECTED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_SUPPLICANT_ERROR() { return get_static_field<"EXTRA_SUPPLICANT_ERROR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_WIFI_INFO() { return get_static_field<"EXTRA_WIFI_INFO", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_WIFI_STATE() { return get_static_field<"EXTRA_WIFI_STATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NETWORK_IDS_CHANGED_ACTION() { return get_static_field<"NETWORK_IDS_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NETWORK_STATE_CHANGED_ACTION() { return get_static_field<"NETWORK_STATE_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RSSI_CHANGED_ACTION() { return get_static_field<"RSSI_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SCAN_RESULTS_AVAILABLE_ACTION() { return get_static_field<"SCAN_RESULTS_AVAILABLE_ACTION", jni::ref<java::lang::String>>(); }
	static jint STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATION() { return get_static_field<"STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATION", jint>(); }
	static jint STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATION() { return get_static_field<"STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATION", jint>(); }
	static jint STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONING() { return get_static_field<"STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONING", jint>(); }
	static jint STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUND() { return get_static_field<"STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUND", jint>(); }
	static jint STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSE() { return get_static_field<"STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSE", jint>(); }
	static jint STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWN() { return get_static_field<"STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWN", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMIN() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMIN", jint>(); }
	static jint STATUS_NETWORK_SUGGESTIONS_SUCCESS() { return get_static_field<"STATUS_NETWORK_SUGGESTIONS_SUCCESS", jint>(); }
	static jint STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGE() { return get_static_field<"STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGE", jint>(); }
	static jint STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USER() { return get_static_field<"STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USER", jint>(); }
	static jint STATUS_SUGGESTION_APPROVAL_PENDING() { return get_static_field<"STATUS_SUGGESTION_APPROVAL_PENDING", jint>(); }
	static jint STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USER() { return get_static_field<"STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USER", jint>(); }
	static jint STATUS_SUGGESTION_APPROVAL_UNKNOWN() { return get_static_field<"STATUS_SUGGESTION_APPROVAL_UNKNOWN", jint>(); }
	static jint STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATION() { return get_static_field<"STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATION", jint>(); }
	static jint STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATION() { return get_static_field<"STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATION", jint>(); }
	static jint STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONING() { return get_static_field<"STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONING", jint>(); }
	static jint STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWN() { return get_static_field<"STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWN", jint>(); }
	static jni::ref<java::lang::String> SUPPLICANT_CONNECTION_CHANGE_ACTION() { return get_static_field<"SUPPLICANT_CONNECTION_CHANGE_ACTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SUPPLICANT_STATE_CHANGED_ACTION() { return get_static_field<"SUPPLICANT_STATE_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNKNOWN_SSID() { return get_static_field<"UNKNOWN_SSID", jni::ref<java::lang::String>>(); }
	static jint WIFI_INTERFACE_TYPE_AP() { return get_static_field<"WIFI_INTERFACE_TYPE_AP", jint>(); }
	static jint WIFI_INTERFACE_TYPE_AWARE() { return get_static_field<"WIFI_INTERFACE_TYPE_AWARE", jint>(); }
	static jint WIFI_INTERFACE_TYPE_DIRECT() { return get_static_field<"WIFI_INTERFACE_TYPE_DIRECT", jint>(); }
	static jint WIFI_INTERFACE_TYPE_STA() { return get_static_field<"WIFI_INTERFACE_TYPE_STA", jint>(); }
	static jint WIFI_MODE_FULL() { return get_static_field<"WIFI_MODE_FULL", jint>(); }
	static jint WIFI_MODE_FULL_HIGH_PERF() { return get_static_field<"WIFI_MODE_FULL_HIGH_PERF", jint>(); }
	static jint WIFI_MODE_FULL_LOW_LATENCY() { return get_static_field<"WIFI_MODE_FULL_LOW_LATENCY", jint>(); }
	static jint WIFI_MODE_SCAN_ONLY() { return get_static_field<"WIFI_MODE_SCAN_ONLY", jint>(); }
	static jint WIFI_MULTI_INTERNET_MODE_DBS_AP() { return get_static_field<"WIFI_MULTI_INTERNET_MODE_DBS_AP", jint>(); }
	static jint WIFI_MULTI_INTERNET_MODE_DISABLED() { return get_static_field<"WIFI_MULTI_INTERNET_MODE_DISABLED", jint>(); }
	static jint WIFI_MULTI_INTERNET_MODE_MULTI_AP() { return get_static_field<"WIFI_MULTI_INTERNET_MODE_MULTI_AP", jint>(); }
	static jni::ref<java::lang::String> WIFI_STATE_CHANGED_ACTION() { return get_static_field<"WIFI_STATE_CHANGED_ACTION", jni::ref<java::lang::String>>(); }
	static jint WIFI_STATE_DISABLED() { return get_static_field<"WIFI_STATE_DISABLED", jint>(); }
	static jint WIFI_STATE_DISABLING() { return get_static_field<"WIFI_STATE_DISABLING", jint>(); }
	static jint WIFI_STATE_ENABLED() { return get_static_field<"WIFI_STATE_ENABLED", jint>(); }
	static jint WIFI_STATE_ENABLING() { return get_static_field<"WIFI_STATE_ENABLING", jint>(); }
	static jint WIFI_STATE_UNKNOWN() { return get_static_field<"WIFI_STATE_UNKNOWN", jint>(); }
	static jint WPS_AUTH_FAILURE() { return get_static_field<"WPS_AUTH_FAILURE", jint>(); }
	static jint WPS_OVERLAP_ERROR() { return get_static_field<"WPS_OVERLAP_ERROR", jint>(); }
	static jint WPS_TIMED_OUT() { return get_static_field<"WPS_TIMED_OUT", jint>(); }
	static jint WPS_TKIP_ONLY_PROHIBITED() { return get_static_field<"WPS_TKIP_ONLY_PROHIBITED", jint>(); }
	static jint WPS_WEP_PROHIBITED() { return get_static_field<"WPS_WEP_PROHIBITED", jint>(); }

	jni::ref<java::util::List> getConfiguredNetworks() { return call_method<"getConfiguredNetworks", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getCallerConfiguredNetworks() { return call_method<"getCallerConfiguredNetworks", jni::ref<java::util::List>>(); }
	jint addNetwork(jni::ref<android::net::wifi::WifiConfiguration> config) { return call_method<"addNetwork", jint>(config); }
	jni::ref<android::net::wifi::WifiManager_AddNetworkResult> addNetworkPrivileged(jni::ref<android::net::wifi::WifiConfiguration> config) { return call_method<"addNetworkPrivileged", jni::ref<android::net::wifi::WifiManager_AddNetworkResult>>(config); }
	jint updateNetwork(jni::ref<android::net::wifi::WifiConfiguration> config) { return call_method<"updateNetwork", jint>(config); }
	jint addNetworkSuggestions(jni::ref<java::util::List> networkSuggestions) { return call_method<"addNetworkSuggestions", jint>(networkSuggestions); }
	jint removeNetworkSuggestions(jni::ref<java::util::List> networkSuggestions) { return call_method<"removeNetworkSuggestions", jint>(networkSuggestions); }
	jint removeNetworkSuggestions(jni::ref<java::util::List> networkSuggestions, jint action) { return call_method<"removeNetworkSuggestions", jint>(networkSuggestions, action); }
	jni::ref<java::util::List> getNetworkSuggestions() { return call_method<"getNetworkSuggestions", jni::ref<java::util::List>>(); }
	jint getMaxNumberOfNetworkSuggestionsPerApp() { return call_method<"getMaxNumberOfNetworkSuggestionsPerApp", jint>(); }
	void addOrUpdatePasspointConfiguration(jni::ref<android::net::wifi::hotspot2::PasspointConfiguration> config) { return call_method<"addOrUpdatePasspointConfiguration", void>(config); }
	void removePasspointConfiguration(jni::ref<java::lang::String> fqdn) { return call_method<"removePasspointConfiguration", void>(fqdn); }
	jni::ref<java::util::List> getPasspointConfigurations() { return call_method<"getPasspointConfigurations", jni::ref<java::util::List>>(); }
	jboolean removeNetwork(jint netId) { return call_method<"removeNetwork", jboolean>(netId); }
	jboolean removeNonCallerConfiguredNetworks() { return call_method<"removeNonCallerConfiguredNetworks", jboolean>(); }
	jboolean enableNetwork(jint netId, jboolean attemptConnect) { return call_method<"enableNetwork", jboolean>(netId, attemptConnect); }
	jboolean disableNetwork(jint netId) { return call_method<"disableNetwork", jboolean>(netId); }
	jboolean disconnect() { return call_method<"disconnect", jboolean>(); }
	jboolean reconnect() { return call_method<"reconnect", jboolean>(); }
	jboolean reassociate() { return call_method<"reassociate", jboolean>(); }
	jboolean pingSupplicant() { return call_method<"pingSupplicant", jboolean>(); }
	jboolean isP2pSupported() { return call_method<"isP2pSupported", jboolean>(); }
	jboolean isStaApConcurrencySupported() { return call_method<"isStaApConcurrencySupported", jboolean>(); }
	jboolean isStaConcurrencyForLocalOnlyConnectionsSupported() { return call_method<"isStaConcurrencyForLocalOnlyConnectionsSupported", jboolean>(); }
	jboolean isMakeBeforeBreakWifiSwitchingSupported() { return call_method<"isMakeBeforeBreakWifiSwitchingSupported", jboolean>(); }
	jboolean isStaConcurrencyForMultiInternetSupported() { return call_method<"isStaConcurrencyForMultiInternetSupported", jboolean>(); }
	jboolean isDeviceToApRttSupported() { return call_method<"isDeviceToApRttSupported", jboolean>(); }
	jboolean isPreferredNetworkOffloadSupported() { return call_method<"isPreferredNetworkOffloadSupported", jboolean>(); }
	jboolean isTdlsSupported() { return call_method<"isTdlsSupported", jboolean>(); }
	jboolean isEnhancedPowerReportingSupported() { return call_method<"isEnhancedPowerReportingSupported", jboolean>(); }
	jboolean is24GHzBandSupported() { return call_method<"is24GHzBandSupported", jboolean>(); }
	jboolean is5GHzBandSupported() { return call_method<"is5GHzBandSupported", jboolean>(); }
	jboolean is60GHzBandSupported() { return call_method<"is60GHzBandSupported", jboolean>(); }
	jboolean is6GHzBandSupported() { return call_method<"is6GHzBandSupported", jboolean>(); }
	jboolean isWifiStandardSupported(jint standard) { return call_method<"isWifiStandardSupported", jboolean>(standard); }
	jboolean isStaBridgedApConcurrencySupported() { return call_method<"isStaBridgedApConcurrencySupported", jboolean>(); }
	jboolean isBridgedApConcurrencySupported() { return call_method<"isBridgedApConcurrencySupported", jboolean>(); }
	jboolean startScan() { return call_method<"startScan", jboolean>(); }
	jni::ref<android::net::wifi::WifiInfo> getConnectionInfo() { return call_method<"getConnectionInfo", jni::ref<android::net::wifi::WifiInfo>>(); }
	jni::ref<java::util::List> getScanResults() { return call_method<"getScanResults", jni::ref<java::util::List>>(); }
	jboolean isScanAlwaysAvailable() { return call_method<"isScanAlwaysAvailable", jboolean>(); }
	void getChannelData(jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> resultsCallback) { return call_method<"getChannelData", void>(executor, resultsCallback); }
	jboolean saveConfiguration() { return call_method<"saveConfiguration", jboolean>(); }
	jni::ref<android::net::DhcpInfo> getDhcpInfo() { return call_method<"getDhcpInfo", jni::ref<android::net::DhcpInfo>>(); }
	jboolean setWifiEnabled(jboolean enabled) { return call_method<"setWifiEnabled", jboolean>(enabled); }
	void registerSubsystemRestartTrackingCallback(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::net::wifi::WifiManager_SubsystemRestartTrackingCallback> callback) { return call_method<"registerSubsystemRestartTrackingCallback", void>(executor, callback); }
	void unregisterSubsystemRestartTrackingCallback(jni::ref<android::net::wifi::WifiManager_SubsystemRestartTrackingCallback> callback) { return call_method<"unregisterSubsystemRestartTrackingCallback", void>(callback); }
	jint getWifiState() { return call_method<"getWifiState", jint>(); }
	jboolean isWifiEnabled() { return call_method<"isWifiEnabled", jboolean>(); }
	static jint calculateSignalLevel(jint rssi, jint numLevels) { return call_static_method<"calculateSignalLevel", jint>(rssi, numLevels); }
	jint calculateSignalLevel(jint rssi) { return call_method<"calculateSignalLevel", jint>(rssi); }
	jint getMaxSignalLevel() { return call_method<"getMaxSignalLevel", jint>(); }
	static jint compareSignalLevel(jint rssiA, jint rssiB) { return call_static_method<"compareSignalLevel", jint>(rssiA, rssiB); }
	jboolean validateSoftApConfiguration(jni::ref<android::net::wifi::SoftApConfiguration> config) { return call_method<"validateSoftApConfiguration", jboolean>(config); }
	void startLocalOnlyHotspot(jni::ref<android::net::wifi::WifiManager_LocalOnlyHotspotCallback> callback, jni::ref<android::os::Handler> handler) { return call_method<"startLocalOnlyHotspot", void>(callback, handler); }
	void setTdlsEnabled(jni::ref<java::net::InetAddress> remoteIPAddress, jboolean enable) { return call_method<"setTdlsEnabled", void>(remoteIPAddress, enable); }
	void setTdlsEnabled(jni::ref<java::net::InetAddress> remoteIPAddress, jboolean enable, jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> resultsCallback) { return call_method<"setTdlsEnabled", void>(remoteIPAddress, enable, executor, resultsCallback); }
	void setTdlsEnabledWithMacAddress(jni::ref<java::lang::String> remoteMacAddress, jboolean enable) { return call_method<"setTdlsEnabledWithMacAddress", void>(remoteMacAddress, enable); }
	void setTdlsEnabledWithMacAddress(jni::ref<java::lang::String> remoteMacAddress, jboolean enable, jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> resultsCallback) { return call_method<"setTdlsEnabledWithMacAddress", void>(remoteMacAddress, enable, executor, resultsCallback); }
	void isTdlsOperationCurrentlyAvailable(jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> resultsCallback) { return call_method<"isTdlsOperationCurrentlyAvailable", void>(executor, resultsCallback); }
	void getMaxSupportedConcurrentTdlsSessions(jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> resultsCallback) { return call_method<"getMaxSupportedConcurrentTdlsSessions", void>(executor, resultsCallback); }
	void getNumberOfEnabledTdlsSessions(jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> resultsCallback) { return call_method<"getNumberOfEnabledTdlsSessions", void>(executor, resultsCallback); }
	void allowAutojoinGlobal(jboolean allowAutojoin) { return call_method<"allowAutojoinGlobal", void>(allowAutojoin); }
	void queryAutojoinGlobal(jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> resultsCallback) { return call_method<"queryAutojoinGlobal", void>(executor, resultsCallback); }
	void startWps(jni::ref<android::net::wifi::WpsInfo> config, jni::ref<android::net::wifi::WifiManager_WpsCallback> listener) { return call_method<"startWps", void>(config, listener); }
	void cancelWps(jni::ref<android::net::wifi::WifiManager_WpsCallback> listener) { return call_method<"cancelWps", void>(listener); }
	jni::ref<android::net::wifi::WifiManager_WifiLock> createWifiLock(jint lockType, jni::ref<java::lang::String> tag) { return call_method<"createWifiLock", jni::ref<android::net::wifi::WifiManager_WifiLock>>(lockType, tag); }
	jni::ref<android::net::wifi::WifiManager_WifiLock> createWifiLock(jni::ref<java::lang::String> tag) { return call_method<"createWifiLock", jni::ref<android::net::wifi::WifiManager_WifiLock>>(tag); }
	jni::ref<android::net::wifi::WifiManager_MulticastLock> createMulticastLock(jni::ref<java::lang::String> tag) { return call_method<"createMulticastLock", jni::ref<android::net::wifi::WifiManager_MulticastLock>>(tag); }
	jboolean isWpa3SaeSupported() { return call_method<"isWpa3SaeSupported", jboolean>(); }
	jboolean isWpa3SuiteBSupported() { return call_method<"isWpa3SuiteBSupported", jboolean>(); }
	jboolean isEnhancedOpenSupported() { return call_method<"isEnhancedOpenSupported", jboolean>(); }
	jboolean isEasyConnectSupported() { return call_method<"isEasyConnectSupported", jboolean>(); }
	jboolean isEasyConnectEnrolleeResponderModeSupported() { return call_method<"isEasyConnectEnrolleeResponderModeSupported", jboolean>(); }
	jboolean isWapiSupported() { return call_method<"isWapiSupported", jboolean>(); }
	jboolean isWpa3SaePublicKeySupported() { return call_method<"isWpa3SaePublicKeySupported", jboolean>(); }
	jboolean isPasspointTermsAndConditionsSupported() { return call_method<"isPasspointTermsAndConditionsSupported", jboolean>(); }
	jboolean isWpa3SaeH2eSupported() { return call_method<"isWpa3SaeH2eSupported", jboolean>(); }
	jboolean isWifiDisplayR2Supported() { return call_method<"isWifiDisplayR2Supported", jboolean>(); }
	jboolean isDecoratedIdentitySupported() { return call_method<"isDecoratedIdentitySupported", jboolean>(); }
	jboolean isTrustOnFirstUseSupported() { return call_method<"isTrustOnFirstUseSupported", jboolean>(); }
	jboolean isEasyConnectDppAkmSupported() { return call_method<"isEasyConnectDppAkmSupported", jboolean>(); }
	jboolean isTlsMinimumVersionSupported() { return call_method<"isTlsMinimumVersionSupported", jboolean>(); }
	jboolean isTlsV13Supported() { return call_method<"isTlsV13Supported", jboolean>(); }
	jboolean isDualBandSimultaneousSupported() { return call_method<"isDualBandSimultaneousSupported", jboolean>(); }
	jboolean isTidToLinkMappingNegotiationSupported() { return call_method<"isTidToLinkMappingNegotiationSupported", jboolean>(); }
	void registerScanResultsCallback(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::net::wifi::WifiManager_ScanResultsCallback> callback) { return call_method<"registerScanResultsCallback", void>(executor, callback); }
	void unregisterScanResultsCallback(jni::ref<android::net::wifi::WifiManager_ScanResultsCallback> callback) { return call_method<"unregisterScanResultsCallback", void>(callback); }
	void addSuggestionConnectionStatusListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::net::wifi::WifiManager_SuggestionConnectionStatusListener> listener) { return call_method<"addSuggestionConnectionStatusListener", void>(executor, listener); }
	void removeSuggestionConnectionStatusListener(jni::ref<android::net::wifi::WifiManager_SuggestionConnectionStatusListener> listener) { return call_method<"removeSuggestionConnectionStatusListener", void>(listener); }
	void addLocalOnlyConnectionFailureListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::net::wifi::WifiManager_LocalOnlyConnectionFailureListener> listener) { return call_method<"addLocalOnlyConnectionFailureListener", void>(executor, listener); }
	void removeLocalOnlyConnectionFailureListener(jni::ref<android::net::wifi::WifiManager_LocalOnlyConnectionFailureListener> listener) { return call_method<"removeLocalOnlyConnectionFailureListener", void>(listener); }
	jboolean isScanThrottleEnabled() { return call_method<"isScanThrottleEnabled", jboolean>(); }
	jboolean isAutoWakeupEnabled() { return call_method<"isAutoWakeupEnabled", jboolean>(); }
	jboolean isCarrierNetworkOffloadEnabled(jint subscriptionId, jboolean merged) { return call_method<"isCarrierNetworkOffloadEnabled", jboolean>(subscriptionId, merged); }
	void addSuggestionUserApprovalStatusListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::net::wifi::WifiManager_SuggestionUserApprovalStatusListener> listener) { return call_method<"addSuggestionUserApprovalStatusListener", void>(executor, listener); }
	void removeSuggestionUserApprovalStatusListener(jni::ref<android::net::wifi::WifiManager_SuggestionUserApprovalStatusListener> listener) { return call_method<"removeSuggestionUserApprovalStatusListener", void>(listener); }
	void flushPasspointAnqpCache() { return call_method<"flushPasspointAnqpCache", void>(); }
	jni::ref<java::util::List> getAllowedChannels(jint band, jint mode) { return call_method<"getAllowedChannels", jni::ref<java::util::List>>(band, mode); }
	jni::ref<java::util::List> getUsableChannels(jint band, jint mode) { return call_method<"getUsableChannels", jni::ref<java::util::List>>(band, mode); }
	jboolean isWifiPasspointEnabled() { return call_method<"isWifiPasspointEnabled", jboolean>(); }
	jint getStaConcurrencyForMultiInternetMode() { return call_method<"getStaConcurrencyForMultiInternetMode", jint>(); }
	void reportCreateInterfaceImpact(jint interfaceType, jboolean requireNewInterface, jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::BiConsumer> resultCallback) { return call_method<"reportCreateInterfaceImpact", void>(interfaceType, requireNewInterface, executor, resultCallback); }
	jint getMaxNumberOfChannelsPerNetworkSpecifierRequest() { return call_method<"getMaxNumberOfChannelsPerNetworkSpecifierRequest", jint>(); }

protected:

	WifiManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_WIFIMANAGER
