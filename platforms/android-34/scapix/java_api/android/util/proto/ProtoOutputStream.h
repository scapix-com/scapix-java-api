// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_PROTO_PROTOOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_PROTO_PROTOOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util::proto { class ProtoOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::proto::ProtoOutputStream>
{
	static constexpr fixed_string class_name = "android/util/proto/ProtoOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_PROTO_PROTOOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_PROTO_PROTOOUTPUTSTREAM)
#define SCAPIX_JAVA_API_ANDROID_UTIL_PROTO_PROTOOUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::proto::ProtoOutputStream : public jni::object_base<"android/util/proto/ProtoOutputStream",
	java::lang::Object>
{
public:

	static jlong FIELD_COUNT_MASK() { return get_static_field<"FIELD_COUNT_MASK", jlong>(); }
	static jlong FIELD_COUNT_PACKED() { return get_static_field<"FIELD_COUNT_PACKED", jlong>(); }
	static jlong FIELD_COUNT_REPEATED() { return get_static_field<"FIELD_COUNT_REPEATED", jlong>(); }
	static jint FIELD_COUNT_SHIFT() { return get_static_field<"FIELD_COUNT_SHIFT", jint>(); }
	static jlong FIELD_COUNT_SINGLE() { return get_static_field<"FIELD_COUNT_SINGLE", jlong>(); }
	static jlong FIELD_COUNT_UNKNOWN() { return get_static_field<"FIELD_COUNT_UNKNOWN", jlong>(); }
	static jint FIELD_ID_SHIFT() { return get_static_field<"FIELD_ID_SHIFT", jint>(); }
	static jlong FIELD_TYPE_BOOL() { return get_static_field<"FIELD_TYPE_BOOL", jlong>(); }
	static jlong FIELD_TYPE_BYTES() { return get_static_field<"FIELD_TYPE_BYTES", jlong>(); }
	static jlong FIELD_TYPE_DOUBLE() { return get_static_field<"FIELD_TYPE_DOUBLE", jlong>(); }
	static jlong FIELD_TYPE_ENUM() { return get_static_field<"FIELD_TYPE_ENUM", jlong>(); }
	static jlong FIELD_TYPE_FIXED32() { return get_static_field<"FIELD_TYPE_FIXED32", jlong>(); }
	static jlong FIELD_TYPE_FIXED64() { return get_static_field<"FIELD_TYPE_FIXED64", jlong>(); }
	static jlong FIELD_TYPE_FLOAT() { return get_static_field<"FIELD_TYPE_FLOAT", jlong>(); }
	static jlong FIELD_TYPE_INT32() { return get_static_field<"FIELD_TYPE_INT32", jlong>(); }
	static jlong FIELD_TYPE_INT64() { return get_static_field<"FIELD_TYPE_INT64", jlong>(); }
	static jlong FIELD_TYPE_MASK() { return get_static_field<"FIELD_TYPE_MASK", jlong>(); }
	static jlong FIELD_TYPE_MESSAGE() { return get_static_field<"FIELD_TYPE_MESSAGE", jlong>(); }
	static jlong FIELD_TYPE_SFIXED32() { return get_static_field<"FIELD_TYPE_SFIXED32", jlong>(); }
	static jlong FIELD_TYPE_SFIXED64() { return get_static_field<"FIELD_TYPE_SFIXED64", jlong>(); }
	static jint FIELD_TYPE_SHIFT() { return get_static_field<"FIELD_TYPE_SHIFT", jint>(); }
	static jlong FIELD_TYPE_SINT32() { return get_static_field<"FIELD_TYPE_SINT32", jlong>(); }
	static jlong FIELD_TYPE_SINT64() { return get_static_field<"FIELD_TYPE_SINT64", jlong>(); }
	static jlong FIELD_TYPE_STRING() { return get_static_field<"FIELD_TYPE_STRING", jlong>(); }
	static jlong FIELD_TYPE_UINT32() { return get_static_field<"FIELD_TYPE_UINT32", jlong>(); }
	static jlong FIELD_TYPE_UINT64() { return get_static_field<"FIELD_TYPE_UINT64", jlong>(); }
	static jint WIRE_TYPE_END_GROUP() { return get_static_field<"WIRE_TYPE_END_GROUP", jint>(); }
	static jint WIRE_TYPE_FIXED32() { return get_static_field<"WIRE_TYPE_FIXED32", jint>(); }
	static jint WIRE_TYPE_FIXED64() { return get_static_field<"WIRE_TYPE_FIXED64", jint>(); }
	static jint WIRE_TYPE_LENGTH_DELIMITED() { return get_static_field<"WIRE_TYPE_LENGTH_DELIMITED", jint>(); }
	static jint WIRE_TYPE_MASK() { return get_static_field<"WIRE_TYPE_MASK", jint>(); }
	static jint WIRE_TYPE_START_GROUP() { return get_static_field<"WIRE_TYPE_START_GROUP", jint>(); }
	static jint WIRE_TYPE_VARINT() { return get_static_field<"WIRE_TYPE_VARINT", jint>(); }

	static jni::ref<android::util::proto::ProtoOutputStream> new_object() { return base_::new_object(); }
	static jni::ref<android::util::proto::ProtoOutputStream> new_object(jint chunkSize) { return base_::new_object(chunkSize); }
	static jni::ref<android::util::proto::ProtoOutputStream> new_object(jni::ref<java::io::OutputStream> stream) { return base_::new_object(stream); }
	jint getRawSize() { return call_method<"getRawSize", jint>(); }
	void write(jlong fieldId, jdouble p2) { return call_method<"write", void>(fieldId, p2); }
	void write(jlong fieldId, jfloat p2) { return call_method<"write", void>(fieldId, p2); }
	void write(jlong fieldId, jint p2) { return call_method<"write", void>(fieldId, p2); }
	void write(jlong fieldId, jlong p2) { return call_method<"write", void>(fieldId, p2); }
	void write(jlong fieldId, jboolean p2) { return call_method<"write", void>(fieldId, p2); }
	void write(jlong fieldId, jni::ref<java::lang::String> p2) { return call_method<"write", void>(fieldId, p2); }
	void write(jlong fieldId, jni::ref<jni::array<jbyte>> p2) { return call_method<"write", void>(fieldId, p2); }
	jlong start(jlong fieldId) { return call_method<"start", jlong>(fieldId); }
	void end(jlong token) { return call_method<"end", void>(token); }
	static jlong makeFieldId(jint id, jlong fieldFlags) { return call_static_method<"makeFieldId", jlong>(id, fieldFlags); }
	static jint checkFieldId(jlong fieldId, jlong p2) { return call_static_method<"checkFieldId", jint>(fieldId, p2); }
	void writeTag(jint id, jint wireType) { return call_method<"writeTag", void>(id, wireType); }
	jni::ref<jni::array<jbyte>> getBytes() { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(); }
	void flush() { return call_method<"flush", void>(); }
	void dump(jni::ref<java::lang::String> tag) { return call_method<"dump", void>(tag); }
	static jni::ref<java::lang::String> token2String(jlong token) { return call_static_method<"token2String", jni::ref<java::lang::String>>(token); }
	static jni::ref<java::lang::String> getFieldTypeString(jlong fieldType) { return call_static_method<"getFieldTypeString", jni::ref<java::lang::String>>(fieldType); }
	static jni::ref<java::lang::String> getWireTypeString(jint wireType) { return call_static_method<"getWireTypeString", jni::ref<java::lang::String>>(wireType); }
	static jni::ref<java::lang::String> getFieldIdString(jlong fieldId) { return call_static_method<"getFieldIdString", jni::ref<java::lang::String>>(fieldId); }
	static jni::ref<java::lang::String> getFieldCountString(jlong fieldCount) { return call_static_method<"getFieldCountString", jni::ref<java::lang::String>>(fieldCount); }
	static jlong makeToken(jint tagSize, jboolean repeated, jint depth, jint objectId, jint offset) { return call_static_method<"makeToken", jlong>(tagSize, repeated, depth, objectId, offset); }

protected:

	ProtoOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_PROTO_PROTOOUTPUTSTREAM
