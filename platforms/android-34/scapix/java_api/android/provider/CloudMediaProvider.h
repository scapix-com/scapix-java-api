// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/content/ContentProvider.h>

#ifndef SCAPIX_JAVA_API_ANDROID_PROVIDER_CLOUDMEDIAPROVIDER_FWD
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_CLOUDMEDIAPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::provider { class CloudMediaProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::provider::CloudMediaProvider>
{
	static constexpr fixed_string class_name = "android/provider/CloudMediaProvider";
	using base_classes = std::tuple<scapix::java_api::android::content::ContentProvider>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_CLOUDMEDIAPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_PROVIDER_CLOUDMEDIAPROVIDER)
#define SCAPIX_JAVA_API_ANDROID_PROVIDER_CLOUDMEDIAPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/pm/ProviderInfo.h>
#include <scapix/java_api/android/content/res/AssetFileDescriptor.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/android/provider/CloudMediaProvider_CloudMediaSurfaceController.h>
#include <scapix/java_api/android/provider/CloudMediaProvider_CloudMediaSurfaceStateChangedCallback.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::provider::CloudMediaProvider : public jni::object_base<"android/provider/CloudMediaProvider",
	android::content::ContentProvider>
{
public:

	using CloudMediaSurfaceStateChangedCallback = CloudMediaProvider_CloudMediaSurfaceStateChangedCallback;
	using CloudMediaSurfaceController = CloudMediaProvider_CloudMediaSurfaceController;

	static jni::ref<android::provider::CloudMediaProvider> new_object() { return base_::new_object(); }
	void attachInfo(jni::ref<android::content::Context> context, jni::ref<android::content::pm::ProviderInfo> info) { return call_method<"attachInfo", void>(context, info); }
	jni::ref<android::os::Bundle> onGetMediaCollectionInfo(jni::ref<android::os::Bundle> p1) { return call_method<"onGetMediaCollectionInfo", jni::ref<android::os::Bundle>>(p1); }
	jni::ref<android::database::Cursor> onQueryMedia(jni::ref<android::os::Bundle> p1) { return call_method<"onQueryMedia", jni::ref<android::database::Cursor>>(p1); }
	jni::ref<android::database::Cursor> onQueryDeletedMedia(jni::ref<android::os::Bundle> p1) { return call_method<"onQueryDeletedMedia", jni::ref<android::database::Cursor>>(p1); }
	jni::ref<android::database::Cursor> onQueryAlbums(jni::ref<android::os::Bundle> extras) { return call_method<"onQueryAlbums", jni::ref<android::database::Cursor>>(extras); }
	jni::ref<android::content::res::AssetFileDescriptor> onOpenPreview(jni::ref<java::lang::String> p1, jni::ref<android::graphics::Point> p2, jni::ref<android::os::Bundle> p3, jni::ref<android::os::CancellationSignal> p4) { return call_method<"onOpenPreview", jni::ref<android::content::res::AssetFileDescriptor>>(p1, p2, p3, p4); }
	jni::ref<android::os::ParcelFileDescriptor> onOpenMedia(jni::ref<java::lang::String> p1, jni::ref<android::os::Bundle> p2, jni::ref<android::os::CancellationSignal> p3) { return call_method<"onOpenMedia", jni::ref<android::os::ParcelFileDescriptor>>(p1, p2, p3); }
	jni::ref<android::provider::CloudMediaProvider_CloudMediaSurfaceController> onCreateCloudMediaSurfaceController(jni::ref<android::os::Bundle> config, jni::ref<android::provider::CloudMediaProvider_CloudMediaSurfaceStateChangedCallback> callback) { return call_method<"onCreateCloudMediaSurfaceController", jni::ref<android::provider::CloudMediaProvider_CloudMediaSurfaceController>>(config, callback); }
	jni::ref<android::os::Bundle> call(jni::ref<java::lang::String> method, jni::ref<java::lang::String> arg, jni::ref<android::os::Bundle> extras) { return call_method<"call", jni::ref<android::os::Bundle>>(method, arg, extras); }
	jni::ref<android::os::ParcelFileDescriptor> openFile(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mode) { return call_method<"openFile", jni::ref<android::os::ParcelFileDescriptor>>(uri, mode); }
	jni::ref<android::os::ParcelFileDescriptor> openFile(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mode, jni::ref<android::os::CancellationSignal> signal) { return call_method<"openFile", jni::ref<android::os::ParcelFileDescriptor>>(uri, mode, signal); }
	jni::ref<android::content::res::AssetFileDescriptor> openTypedAssetFile(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeTypeFilter, jni::ref<android::os::Bundle> opts) { return call_method<"openTypedAssetFile", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mimeTypeFilter, opts); }
	jni::ref<android::content::res::AssetFileDescriptor> openTypedAssetFile(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> mimeTypeFilter, jni::ref<android::os::Bundle> opts, jni::ref<android::os::CancellationSignal> signal) { return call_method<"openTypedAssetFile", jni::ref<android::content::res::AssetFileDescriptor>>(uri, mimeTypeFilter, opts, signal); }
	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> uri, jni::ref<jni::array<java::lang::String>> projection, jni::ref<android::os::Bundle> queryArgs, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"query", jni::ref<android::database::Cursor>>(uri, projection, queryArgs, cancellationSignal); }
	jni::ref<java::lang::String> getType(jni::ref<android::net::Uri> uri) { return call_method<"getType", jni::ref<java::lang::String>>(uri); }
	jni::ref<android::net::Uri> canonicalize(jni::ref<android::net::Uri> uri) { return call_method<"canonicalize", jni::ref<android::net::Uri>>(uri); }
	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> uri, jni::ref<jni::array<java::lang::String>> projection, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> sortOrder) { return call_method<"query", jni::ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder); }
	jni::ref<android::database::Cursor> query(jni::ref<android::net::Uri> uri, jni::ref<jni::array<java::lang::String>> projection, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs, jni::ref<java::lang::String> sortOrder, jni::ref<android::os::CancellationSignal> cancellationSignal) { return call_method<"query", jni::ref<android::database::Cursor>>(uri, projection, selection, selectionArgs, sortOrder, cancellationSignal); }
	jni::ref<android::net::Uri> insert(jni::ref<android::net::Uri> uri, jni::ref<android::content::ContentValues> values) { return call_method<"insert", jni::ref<android::net::Uri>>(uri, values); }
	jint delete_(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_method<"delete", jint>(uri, selection, selectionArgs); }
	jint update(jni::ref<android::net::Uri> uri, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_method<"update", jint>(uri, values, selection, selectionArgs); }

protected:

	CloudMediaProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_PROVIDER_CLOUDMEDIAPROVIDER
