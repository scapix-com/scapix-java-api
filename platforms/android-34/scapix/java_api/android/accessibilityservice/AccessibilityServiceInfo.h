// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::accessibilityservice { class AccessibilityServiceInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::accessibilityservice::AccessibilityServiceInfo>
{
	static constexpr fixed_string class_name = "android/accessibilityservice/AccessibilityServiceInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO)
#define SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/content/pm/ResolveInfo.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::accessibilityservice::AccessibilityServiceInfo : public jni::object_base<"android/accessibilityservice/AccessibilityServiceInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jint CAPABILITY_CAN_CONTROL_MAGNIFICATION() { return get_static_field<"CAPABILITY_CAN_CONTROL_MAGNIFICATION", jint>(); }
	static jint CAPABILITY_CAN_PERFORM_GESTURES() { return get_static_field<"CAPABILITY_CAN_PERFORM_GESTURES", jint>(); }
	static jint CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY() { return get_static_field<"CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY", jint>(); }
	static jint CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS() { return get_static_field<"CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS", jint>(); }
	static jint CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES() { return get_static_field<"CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES", jint>(); }
	static jint CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION() { return get_static_field<"CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION", jint>(); }
	static jint CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT() { return get_static_field<"CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT", jint>(); }
	static jint CAPABILITY_CAN_TAKE_SCREENSHOT() { return get_static_field<"CAPABILITY_CAN_TAKE_SCREENSHOT", jint>(); }
	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DEFAULT() { return get_static_field<"DEFAULT", jint>(); }
	static jint FEEDBACK_ALL_MASK() { return get_static_field<"FEEDBACK_ALL_MASK", jint>(); }
	static jint FEEDBACK_AUDIBLE() { return get_static_field<"FEEDBACK_AUDIBLE", jint>(); }
	static jint FEEDBACK_BRAILLE() { return get_static_field<"FEEDBACK_BRAILLE", jint>(); }
	static jint FEEDBACK_GENERIC() { return get_static_field<"FEEDBACK_GENERIC", jint>(); }
	static jint FEEDBACK_HAPTIC() { return get_static_field<"FEEDBACK_HAPTIC", jint>(); }
	static jint FEEDBACK_SPOKEN() { return get_static_field<"FEEDBACK_SPOKEN", jint>(); }
	static jint FEEDBACK_VISUAL() { return get_static_field<"FEEDBACK_VISUAL", jint>(); }
	static jint FLAG_ENABLE_ACCESSIBILITY_VOLUME() { return get_static_field<"FLAG_ENABLE_ACCESSIBILITY_VOLUME", jint>(); }
	static jint FLAG_INCLUDE_NOT_IMPORTANT_VIEWS() { return get_static_field<"FLAG_INCLUDE_NOT_IMPORTANT_VIEWS", jint>(); }
	static jint FLAG_INPUT_METHOD_EDITOR() { return get_static_field<"FLAG_INPUT_METHOD_EDITOR", jint>(); }
	static jint FLAG_REPORT_VIEW_IDS() { return get_static_field<"FLAG_REPORT_VIEW_IDS", jint>(); }
	static jint FLAG_REQUEST_2_FINGER_PASSTHROUGH() { return get_static_field<"FLAG_REQUEST_2_FINGER_PASSTHROUGH", jint>(); }
	static jint FLAG_REQUEST_ACCESSIBILITY_BUTTON() { return get_static_field<"FLAG_REQUEST_ACCESSIBILITY_BUTTON", jint>(); }
	static jint FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY() { return get_static_field<"FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY", jint>(); }
	static jint FLAG_REQUEST_FILTER_KEY_EVENTS() { return get_static_field<"FLAG_REQUEST_FILTER_KEY_EVENTS", jint>(); }
	static jint FLAG_REQUEST_FINGERPRINT_GESTURES() { return get_static_field<"FLAG_REQUEST_FINGERPRINT_GESTURES", jint>(); }
	static jint FLAG_REQUEST_MULTI_FINGER_GESTURES() { return get_static_field<"FLAG_REQUEST_MULTI_FINGER_GESTURES", jint>(); }
	static jint FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK() { return get_static_field<"FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK", jint>(); }
	static jint FLAG_REQUEST_TOUCH_EXPLORATION_MODE() { return get_static_field<"FLAG_REQUEST_TOUCH_EXPLORATION_MODE", jint>(); }
	static jint FLAG_RETRIEVE_INTERACTIVE_WINDOWS() { return get_static_field<"FLAG_RETRIEVE_INTERACTIVE_WINDOWS", jint>(); }
	static jint FLAG_SEND_MOTION_EVENTS() { return get_static_field<"FLAG_SEND_MOTION_EVENTS", jint>(); }
	static jint FLAG_SERVICE_HANDLES_DOUBLE_TAP() { return get_static_field<"FLAG_SERVICE_HANDLES_DOUBLE_TAP", jint>(); }
	jint eventTypes() { return get_field<"eventTypes", jint>(); }
	void eventTypes(jint v) { set_field<"eventTypes", jint>(v); }
	jint feedbackType() { return get_field<"feedbackType", jint>(); }
	void feedbackType(jint v) { set_field<"feedbackType", jint>(v); }
	jint flags() { return get_field<"flags", jint>(); }
	void flags(jint v) { set_field<"flags", jint>(v); }
	jlong notificationTimeout() { return get_field<"notificationTimeout", jlong>(); }
	void notificationTimeout(jlong v) { set_field<"notificationTimeout", jlong>(v); }
	jni::ref<jni::array<java::lang::String>> packageNames() { return get_field<"packageNames", jni::ref<jni::array<java::lang::String>>>(); }
	void packageNames(jni::ref<jni::array<java::lang::String>> v) { set_field<"packageNames", jni::ref<jni::array<java::lang::String>>>(v); }

	static jni::ref<android::accessibilityservice::AccessibilityServiceInfo> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> getId() { return call_method<"getId", jni::ref<java::lang::String>>(); }
	jni::ref<android::content::pm::ResolveInfo> getResolveInfo() { return call_method<"getResolveInfo", jni::ref<android::content::pm::ResolveInfo>>(); }
	jni::ref<java::lang::String> getSettingsActivityName() { return call_method<"getSettingsActivityName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getTileServiceName() { return call_method<"getTileServiceName", jni::ref<java::lang::String>>(); }
	jboolean getCanRetrieveWindowContent() { return call_method<"getCanRetrieveWindowContent", jboolean>(); }
	jint getCapabilities() { return call_method<"getCapabilities", jint>(); }
	jint getMotionEventSources() { return call_method<"getMotionEventSources", jint>(); }
	void setMotionEventSources(jint motionEventSources) { return call_method<"setMotionEventSources", void>(motionEventSources); }
	jni::ref<java::lang::CharSequence> loadSummary(jni::ref<android::content::pm::PackageManager> packageManager) { return call_method<"loadSummary", jni::ref<java::lang::CharSequence>>(packageManager); }
	jni::ref<java::lang::CharSequence> loadIntro(jni::ref<android::content::pm::PackageManager> packageManager) { return call_method<"loadIntro", jni::ref<java::lang::CharSequence>>(packageManager); }
	jni::ref<java::lang::String> getDescription() { return call_method<"getDescription", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> loadDescription(jni::ref<android::content::pm::PackageManager> packageManager) { return call_method<"loadDescription", jni::ref<java::lang::String>>(packageManager); }
	void setNonInteractiveUiTimeoutMillis(jint timeout) { return call_method<"setNonInteractiveUiTimeoutMillis", void>(timeout); }
	jint getNonInteractiveUiTimeoutMillis() { return call_method<"getNonInteractiveUiTimeoutMillis", jint>(); }
	void setInteractiveUiTimeoutMillis(jint timeout) { return call_method<"setInteractiveUiTimeoutMillis", void>(timeout); }
	jint getInteractiveUiTimeoutMillis() { return call_method<"getInteractiveUiTimeoutMillis", jint>(); }
	jboolean isAccessibilityTool() { return call_method<"isAccessibilityTool", jboolean>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> parcel, jint flagz) { return call_method<"writeToParcel", void>(parcel, flagz); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> feedbackTypeToString(jint feedbackType) { return call_static_method<"feedbackTypeToString", jni::ref<java::lang::String>>(feedbackType); }
	static jni::ref<java::lang::String> flagToString(jint flag) { return call_static_method<"flagToString", jni::ref<java::lang::String>>(flag); }
	static jni::ref<java::lang::String> capabilityToString(jint capability) { return call_static_method<"capabilityToString", jni::ref<java::lang::String>>(capability); }

protected:

	AccessibilityServiceInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICEINFO
