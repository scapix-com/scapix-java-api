// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_HTML_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_HTML_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class Html; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::Html>
{
	static constexpr fixed_string class_name = "android/text/Html";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_HTML_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_HTML)
#define SCAPIX_JAVA_API_ANDROID_TEXT_HTML

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/text/Html_ImageGetter.h>
#include <scapix/java_api/android/text/Html_TagHandler.h>
#include <scapix/java_api/android/text/Spanned.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::Html : public jni::object_base<"android/text/Html",
	java::lang::Object>
{
public:

	using TagHandler = Html_TagHandler;
	using ImageGetter = Html_ImageGetter;

	static jint FROM_HTML_MODE_COMPACT() { return get_static_field<"FROM_HTML_MODE_COMPACT", jint>(); }
	static jint FROM_HTML_MODE_LEGACY() { return get_static_field<"FROM_HTML_MODE_LEGACY", jint>(); }
	static jint FROM_HTML_OPTION_USE_CSS_COLORS() { return get_static_field<"FROM_HTML_OPTION_USE_CSS_COLORS", jint>(); }
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE() { return get_static_field<"FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE", jint>(); }
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_DIV() { return get_static_field<"FROM_HTML_SEPARATOR_LINE_BREAK_DIV", jint>(); }
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_HEADING() { return get_static_field<"FROM_HTML_SEPARATOR_LINE_BREAK_HEADING", jint>(); }
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_LIST() { return get_static_field<"FROM_HTML_SEPARATOR_LINE_BREAK_LIST", jint>(); }
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM() { return get_static_field<"FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM", jint>(); }
	static jint FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH() { return get_static_field<"FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH", jint>(); }
	static jint TO_HTML_PARAGRAPH_LINES_CONSECUTIVE() { return get_static_field<"TO_HTML_PARAGRAPH_LINES_CONSECUTIVE", jint>(); }
	static jint TO_HTML_PARAGRAPH_LINES_INDIVIDUAL() { return get_static_field<"TO_HTML_PARAGRAPH_LINES_INDIVIDUAL", jint>(); }

	static jni::ref<android::text::Spanned> fromHtml(jni::ref<java::lang::String> source) { return call_static_method<"fromHtml", jni::ref<android::text::Spanned>>(source); }
	static jni::ref<android::text::Spanned> fromHtml(jni::ref<java::lang::String> source, jint flags) { return call_static_method<"fromHtml", jni::ref<android::text::Spanned>>(source, flags); }
	static jni::ref<android::text::Spanned> fromHtml(jni::ref<java::lang::String> source, jni::ref<android::text::Html_ImageGetter> imageGetter, jni::ref<android::text::Html_TagHandler> tagHandler) { return call_static_method<"fromHtml", jni::ref<android::text::Spanned>>(source, imageGetter, tagHandler); }
	static jni::ref<android::text::Spanned> fromHtml(jni::ref<java::lang::String> source, jint flags, jni::ref<android::text::Html_ImageGetter> imageGetter, jni::ref<android::text::Html_TagHandler> tagHandler) { return call_static_method<"fromHtml", jni::ref<android::text::Spanned>>(source, flags, imageGetter, tagHandler); }
	static jni::ref<java::lang::String> toHtml(jni::ref<android::text::Spanned> text) { return call_static_method<"toHtml", jni::ref<java::lang::String>>(text); }
	static jni::ref<java::lang::String> toHtml(jni::ref<android::text::Spanned> text, jint option) { return call_static_method<"toHtml", jni::ref<java::lang::String>>(text, option); }
	static jni::ref<java::lang::String> escapeHtml(jni::ref<java::lang::CharSequence> text) { return call_static_method<"escapeHtml", jni::ref<java::lang::String>>(text); }

protected:

	Html(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_HTML
