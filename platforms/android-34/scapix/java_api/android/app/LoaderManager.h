// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_LOADERMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_LOADERMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class LoaderManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::LoaderManager>
{
	static constexpr fixed_string class_name = "android/app/LoaderManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_LOADERMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_LOADERMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_LOADERMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/LoaderManager_LoaderCallbacks.h>
#include <scapix/java_api/android/content/Loader.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::LoaderManager : public jni::object_base<"android/app/LoaderManager",
	java::lang::Object>
{
public:

	using LoaderCallbacks = LoaderManager_LoaderCallbacks;

	static jni::ref<android::app::LoaderManager> new_object() { return base_::new_object(); }
	jni::ref<android::content::Loader> initLoader(jint p1, jni::ref<android::os::Bundle> p2, jni::ref<android::app::LoaderManager_LoaderCallbacks> p3) { return call_method<"initLoader", jni::ref<android::content::Loader>>(p1, p2, p3); }
	jni::ref<android::content::Loader> restartLoader(jint p1, jni::ref<android::os::Bundle> p2, jni::ref<android::app::LoaderManager_LoaderCallbacks> p3) { return call_method<"restartLoader", jni::ref<android::content::Loader>>(p1, p2, p3); }
	void destroyLoader(jint p1) { return call_method<"destroyLoader", void>(p1); }
	jni::ref<android::content::Loader> getLoader(jint p1) { return call_method<"getLoader", jni::ref<android::content::Loader>>(p1); }
	void dump(jni::ref<java::lang::String> p1, jni::ref<java::io::FileDescriptor> p2, jni::ref<java::io::PrintWriter> p3, jni::ref<jni::array<java::lang::String>> p4) { return call_method<"dump", void>(p1, p2, p3, p4); }
	static void enableDebugLogging(jboolean enabled) { return call_static_method<"enableDebugLogging", void>(enabled); }

protected:

	LoaderManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_LOADERMANAGER
