// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_UIMODEMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_UIMODEMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class UiModeManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::UiModeManager>
{
	static constexpr fixed_string class_name = "android/app/UiModeManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_UIMODEMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_UIMODEMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_UIMODEMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/UiModeManager_ContrastChangeListener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::UiModeManager : public jni::object_base<"android/app/UiModeManager",
	java::lang::Object>
{
public:

	using ContrastChangeListener = UiModeManager_ContrastChangeListener;

	static jni::ref<java::lang::String> ACTION_ENTER_CAR_MODE() { return get_static_field<"ACTION_ENTER_CAR_MODE", jni::ref<java::lang::String>>(); }
	static void ACTION_ENTER_CAR_MODE(jni::ref<java::lang::String> v) { set_static_field<"ACTION_ENTER_CAR_MODE", jni::ref<java::lang::String>>(v); }
	static jni::ref<java::lang::String> ACTION_ENTER_DESK_MODE() { return get_static_field<"ACTION_ENTER_DESK_MODE", jni::ref<java::lang::String>>(); }
	static void ACTION_ENTER_DESK_MODE(jni::ref<java::lang::String> v) { set_static_field<"ACTION_ENTER_DESK_MODE", jni::ref<java::lang::String>>(v); }
	static jni::ref<java::lang::String> ACTION_EXIT_CAR_MODE() { return get_static_field<"ACTION_EXIT_CAR_MODE", jni::ref<java::lang::String>>(); }
	static void ACTION_EXIT_CAR_MODE(jni::ref<java::lang::String> v) { set_static_field<"ACTION_EXIT_CAR_MODE", jni::ref<java::lang::String>>(v); }
	static jni::ref<java::lang::String> ACTION_EXIT_DESK_MODE() { return get_static_field<"ACTION_EXIT_DESK_MODE", jni::ref<java::lang::String>>(); }
	static void ACTION_EXIT_DESK_MODE(jni::ref<java::lang::String> v) { set_static_field<"ACTION_EXIT_DESK_MODE", jni::ref<java::lang::String>>(v); }
	static jint DISABLE_CAR_MODE_GO_HOME() { return get_static_field<"DISABLE_CAR_MODE_GO_HOME", jint>(); }
	static jint ENABLE_CAR_MODE_ALLOW_SLEEP() { return get_static_field<"ENABLE_CAR_MODE_ALLOW_SLEEP", jint>(); }
	static jint ENABLE_CAR_MODE_GO_CAR_HOME() { return get_static_field<"ENABLE_CAR_MODE_GO_CAR_HOME", jint>(); }
	static jint MODE_NIGHT_AUTO() { return get_static_field<"MODE_NIGHT_AUTO", jint>(); }
	static jint MODE_NIGHT_CUSTOM() { return get_static_field<"MODE_NIGHT_CUSTOM", jint>(); }
	static jint MODE_NIGHT_NO() { return get_static_field<"MODE_NIGHT_NO", jint>(); }
	static jint MODE_NIGHT_YES() { return get_static_field<"MODE_NIGHT_YES", jint>(); }

	void enableCarMode(jint flags) { return call_method<"enableCarMode", void>(flags); }
	void disableCarMode(jint flags) { return call_method<"disableCarMode", void>(flags); }
	jint getCurrentModeType() { return call_method<"getCurrentModeType", jint>(); }
	void setNightMode(jint mode) { return call_method<"setNightMode", void>(mode); }
	void setApplicationNightMode(jint mode) { return call_method<"setApplicationNightMode", void>(mode); }
	jint getNightMode() { return call_method<"getNightMode", jint>(); }
	jni::ref<java::time::LocalTime> getCustomNightModeStart() { return call_method<"getCustomNightModeStart", jni::ref<java::time::LocalTime>>(); }
	void setCustomNightModeStart(jni::ref<java::time::LocalTime> time) { return call_method<"setCustomNightModeStart", void>(time); }
	jni::ref<java::time::LocalTime> getCustomNightModeEnd() { return call_method<"getCustomNightModeEnd", jni::ref<java::time::LocalTime>>(); }
	void setCustomNightModeEnd(jni::ref<java::time::LocalTime> time) { return call_method<"setCustomNightModeEnd", void>(time); }
	jfloat getContrast() { return call_method<"getContrast", jfloat>(); }
	void addContrastChangeListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::app::UiModeManager_ContrastChangeListener> listener) { return call_method<"addContrastChangeListener", void>(executor, listener); }
	void removeContrastChangeListener(jni::ref<android::app::UiModeManager_ContrastChangeListener> listener) { return call_method<"removeContrastChangeListener", void>(listener); }

protected:

	UiModeManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_UIMODEMANAGER
