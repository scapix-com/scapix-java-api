// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYRESOURCESMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYRESOURCESMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::admin { class DevicePolicyResourcesManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::admin::DevicePolicyResourcesManager>
{
	static constexpr fixed_string class_name = "android/app/admin/DevicePolicyResourcesManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYRESOURCESMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYRESOURCESMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYRESOURCESMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Icon.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::admin::DevicePolicyResourcesManager : public jni::object_base<"android/app/admin/DevicePolicyResourcesManager",
	java::lang::Object>
{
public:

	jni::ref<android::graphics::drawable::Drawable> getDrawable(jni::ref<java::lang::String> drawableId, jni::ref<java::lang::String> drawableStyle, jni::ref<java::util::function::Supplier> defaultDrawableLoader) { return call_method<"getDrawable", jni::ref<android::graphics::drawable::Drawable>>(drawableId, drawableStyle, defaultDrawableLoader); }
	jni::ref<android::graphics::drawable::Drawable> getDrawable(jni::ref<java::lang::String> drawableId, jni::ref<java::lang::String> drawableStyle, jni::ref<java::lang::String> drawableSource, jni::ref<java::util::function::Supplier> defaultDrawableLoader) { return call_method<"getDrawable", jni::ref<android::graphics::drawable::Drawable>>(drawableId, drawableStyle, drawableSource, defaultDrawableLoader); }
	jni::ref<android::graphics::drawable::Drawable> getDrawableForDensity(jni::ref<java::lang::String> drawableId, jni::ref<java::lang::String> drawableStyle, jint density, jni::ref<java::util::function::Supplier> defaultDrawableLoader) { return call_method<"getDrawableForDensity", jni::ref<android::graphics::drawable::Drawable>>(drawableId, drawableStyle, density, defaultDrawableLoader); }
	jni::ref<android::graphics::drawable::Drawable> getDrawableForDensity(jni::ref<java::lang::String> drawableId, jni::ref<java::lang::String> drawableStyle, jni::ref<java::lang::String> drawableSource, jint density, jni::ref<java::util::function::Supplier> defaultDrawableLoader) { return call_method<"getDrawableForDensity", jni::ref<android::graphics::drawable::Drawable>>(drawableId, drawableStyle, drawableSource, density, defaultDrawableLoader); }
	jni::ref<android::graphics::drawable::Icon> getDrawableAsIcon(jni::ref<java::lang::String> drawableId, jni::ref<java::lang::String> drawableStyle, jni::ref<java::lang::String> drawableSource, jni::ref<android::graphics::drawable::Icon> defaultIcon) { return call_method<"getDrawableAsIcon", jni::ref<android::graphics::drawable::Icon>>(drawableId, drawableStyle, drawableSource, defaultIcon); }
	jni::ref<android::graphics::drawable::Icon> getDrawableAsIcon(jni::ref<java::lang::String> drawableId, jni::ref<java::lang::String> drawableStyle, jni::ref<android::graphics::drawable::Icon> defaultIcon) { return call_method<"getDrawableAsIcon", jni::ref<android::graphics::drawable::Icon>>(drawableId, drawableStyle, defaultIcon); }
	jni::ref<java::lang::String> getString(jni::ref<java::lang::String> stringId, jni::ref<java::util::function::Supplier> defaultStringLoader) { return call_method<"getString", jni::ref<java::lang::String>>(stringId, defaultStringLoader); }
	jni::ref<java::lang::String> getString(jni::ref<java::lang::String> stringId, jni::ref<java::util::function::Supplier> defaultStringLoader, jni::ref<jni::array<java::lang::Object>> formatArgs) { return call_method<"getString", jni::ref<java::lang::String>>(stringId, defaultStringLoader, formatArgs); }

protected:

	DevicePolicyResourcesManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ADMIN_DEVICEPOLICYRESOURCESMANAGER
