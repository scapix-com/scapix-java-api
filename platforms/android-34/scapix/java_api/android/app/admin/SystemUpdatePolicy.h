// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::admin { class SystemUpdatePolicy; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::admin::SystemUpdatePolicy>
{
	static constexpr fixed_string class_name = "android/app/admin/SystemUpdatePolicy";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY)
#define SCAPIX_JAVA_API_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/android/app/admin/SystemUpdatePolicy_ValidationFailedException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::admin::SystemUpdatePolicy : public jni::object_base<"android/app/admin/SystemUpdatePolicy",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using ValidationFailedException = SystemUpdatePolicy_ValidationFailedException;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint TYPE_INSTALL_AUTOMATIC() { return get_static_field<"TYPE_INSTALL_AUTOMATIC", jint>(); }
	static jint TYPE_INSTALL_WINDOWED() { return get_static_field<"TYPE_INSTALL_WINDOWED", jint>(); }
	static jint TYPE_POSTPONE() { return get_static_field<"TYPE_POSTPONE", jint>(); }

	static jni::ref<android::app::admin::SystemUpdatePolicy> createAutomaticInstallPolicy() { return call_static_method<"createAutomaticInstallPolicy", jni::ref<android::app::admin::SystemUpdatePolicy>>(); }
	static jni::ref<android::app::admin::SystemUpdatePolicy> createWindowedInstallPolicy(jint startTime, jint endTime) { return call_static_method<"createWindowedInstallPolicy", jni::ref<android::app::admin::SystemUpdatePolicy>>(startTime, endTime); }
	static jni::ref<android::app::admin::SystemUpdatePolicy> createPostponeInstallPolicy() { return call_static_method<"createPostponeInstallPolicy", jni::ref<android::app::admin::SystemUpdatePolicy>>(); }
	jint getPolicyType() { return call_method<"getPolicyType", jint>(); }
	jint getInstallWindowStart() { return call_method<"getInstallWindowStart", jint>(); }
	jint getInstallWindowEnd() { return call_method<"getInstallWindowEnd", jint>(); }
	jni::ref<android::app::admin::SystemUpdatePolicy> setFreezePeriods(jni::ref<java::util::List> freezePeriods) { return call_method<"setFreezePeriods", jni::ref<android::app::admin::SystemUpdatePolicy>>(freezePeriods); }
	jni::ref<java::util::List> getFreezePeriods() { return call_method<"getFreezePeriods", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	SystemUpdatePolicy(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ADMIN_SYSTEMUPDATEPOLICY
