// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBSCHEDULER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBSCHEDULER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::job { class JobScheduler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::job::JobScheduler>
{
	static constexpr fixed_string class_name = "android/app/job/JobScheduler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBSCHEDULER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBSCHEDULER)
#define SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBSCHEDULER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/job/JobInfo.h>
#include <scapix/java_api/android/app/job/JobWorkItem.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::job::JobScheduler : public jni::object_base<"android/app/job/JobScheduler",
	java::lang::Object>
{
public:

	static jint PENDING_JOB_REASON_APP() { return get_static_field<"PENDING_JOB_REASON_APP", jint>(); }
	static jint PENDING_JOB_REASON_APP_STANDBY() { return get_static_field<"PENDING_JOB_REASON_APP_STANDBY", jint>(); }
	static jint PENDING_JOB_REASON_BACKGROUND_RESTRICTION() { return get_static_field<"PENDING_JOB_REASON_BACKGROUND_RESTRICTION", jint>(); }
	static jint PENDING_JOB_REASON_CONSTRAINT_BATTERY_NOT_LOW() { return get_static_field<"PENDING_JOB_REASON_CONSTRAINT_BATTERY_NOT_LOW", jint>(); }
	static jint PENDING_JOB_REASON_CONSTRAINT_CHARGING() { return get_static_field<"PENDING_JOB_REASON_CONSTRAINT_CHARGING", jint>(); }
	static jint PENDING_JOB_REASON_CONSTRAINT_CONNECTIVITY() { return get_static_field<"PENDING_JOB_REASON_CONSTRAINT_CONNECTIVITY", jint>(); }
	static jint PENDING_JOB_REASON_CONSTRAINT_CONTENT_TRIGGER() { return get_static_field<"PENDING_JOB_REASON_CONSTRAINT_CONTENT_TRIGGER", jint>(); }
	static jint PENDING_JOB_REASON_CONSTRAINT_DEVICE_IDLE() { return get_static_field<"PENDING_JOB_REASON_CONSTRAINT_DEVICE_IDLE", jint>(); }
	static jint PENDING_JOB_REASON_CONSTRAINT_MINIMUM_LATENCY() { return get_static_field<"PENDING_JOB_REASON_CONSTRAINT_MINIMUM_LATENCY", jint>(); }
	static jint PENDING_JOB_REASON_CONSTRAINT_PREFETCH() { return get_static_field<"PENDING_JOB_REASON_CONSTRAINT_PREFETCH", jint>(); }
	static jint PENDING_JOB_REASON_CONSTRAINT_STORAGE_NOT_LOW() { return get_static_field<"PENDING_JOB_REASON_CONSTRAINT_STORAGE_NOT_LOW", jint>(); }
	static jint PENDING_JOB_REASON_DEVICE_STATE() { return get_static_field<"PENDING_JOB_REASON_DEVICE_STATE", jint>(); }
	static jint PENDING_JOB_REASON_EXECUTING() { return get_static_field<"PENDING_JOB_REASON_EXECUTING", jint>(); }
	static jint PENDING_JOB_REASON_INVALID_JOB_ID() { return get_static_field<"PENDING_JOB_REASON_INVALID_JOB_ID", jint>(); }
	static jint PENDING_JOB_REASON_JOB_SCHEDULER_OPTIMIZATION() { return get_static_field<"PENDING_JOB_REASON_JOB_SCHEDULER_OPTIMIZATION", jint>(); }
	static jint PENDING_JOB_REASON_QUOTA() { return get_static_field<"PENDING_JOB_REASON_QUOTA", jint>(); }
	static jint PENDING_JOB_REASON_UNDEFINED() { return get_static_field<"PENDING_JOB_REASON_UNDEFINED", jint>(); }
	static jint PENDING_JOB_REASON_USER() { return get_static_field<"PENDING_JOB_REASON_USER", jint>(); }
	static jint RESULT_FAILURE() { return get_static_field<"RESULT_FAILURE", jint>(); }
	static jint RESULT_SUCCESS() { return get_static_field<"RESULT_SUCCESS", jint>(); }

	static jni::ref<android::app::job::JobScheduler> new_object() { return base_::new_object(); }
	jni::ref<android::app::job::JobScheduler> forNamespace(jni::ref<java::lang::String> namespace_) { return call_method<"forNamespace", jni::ref<android::app::job::JobScheduler>>(namespace_); }
	jni::ref<java::lang::String> getNamespace() { return call_method<"getNamespace", jni::ref<java::lang::String>>(); }
	jint schedule(jni::ref<android::app::job::JobInfo> p1) { return call_method<"schedule", jint>(p1); }
	jint enqueue(jni::ref<android::app::job::JobInfo> p1, jni::ref<android::app::job::JobWorkItem> p2) { return call_method<"enqueue", jint>(p1, p2); }
	void cancel(jint p1) { return call_method<"cancel", void>(p1); }
	void cancelAll() { return call_method<"cancelAll", void>(); }
	void cancelInAllNamespaces() { return call_method<"cancelInAllNamespaces", void>(); }
	jni::ref<java::util::List> getAllPendingJobs() { return call_method<"getAllPendingJobs", jni::ref<java::util::List>>(); }
	jni::ref<java::util::Map> getPendingJobsInAllNamespaces() { return call_method<"getPendingJobsInAllNamespaces", jni::ref<java::util::Map>>(); }
	jni::ref<android::app::job::JobInfo> getPendingJob(jint p1) { return call_method<"getPendingJob", jni::ref<android::app::job::JobInfo>>(p1); }
	jint getPendingJobReason(jint jobId) { return call_method<"getPendingJobReason", jint>(jobId); }
	jboolean canRunUserInitiatedJobs() { return call_method<"canRunUserInitiatedJobs", jboolean>(); }

protected:

	JobScheduler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_JOB_JOBSCHEDULER
