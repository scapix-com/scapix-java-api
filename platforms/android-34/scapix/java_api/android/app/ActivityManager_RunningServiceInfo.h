// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGSERVICEINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGSERVICEINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class ActivityManager_RunningServiceInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::ActivityManager_RunningServiceInfo>
{
	static constexpr fixed_string class_name = "android/app/ActivityManager$RunningServiceInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGSERVICEINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGSERVICEINFO)
#define SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGSERVICEINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::ActivityManager_RunningServiceInfo : public jni::object_base<"android/app/ActivityManager$RunningServiceInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint FLAG_FOREGROUND() { return get_static_field<"FLAG_FOREGROUND", jint>(); }
	static jint FLAG_PERSISTENT_PROCESS() { return get_static_field<"FLAG_PERSISTENT_PROCESS", jint>(); }
	static jint FLAG_STARTED() { return get_static_field<"FLAG_STARTED", jint>(); }
	static jint FLAG_SYSTEM_PROCESS() { return get_static_field<"FLAG_SYSTEM_PROCESS", jint>(); }
	jlong activeSince() { return get_field<"activeSince", jlong>(); }
	void activeSince(jlong v) { set_field<"activeSince", jlong>(v); }
	jint clientCount() { return get_field<"clientCount", jint>(); }
	void clientCount(jint v) { set_field<"clientCount", jint>(v); }
	jint clientLabel() { return get_field<"clientLabel", jint>(); }
	void clientLabel(jint v) { set_field<"clientLabel", jint>(v); }
	jni::ref<java::lang::String> clientPackage() { return get_field<"clientPackage", jni::ref<java::lang::String>>(); }
	void clientPackage(jni::ref<java::lang::String> v) { set_field<"clientPackage", jni::ref<java::lang::String>>(v); }
	jint crashCount() { return get_field<"crashCount", jint>(); }
	void crashCount(jint v) { set_field<"crashCount", jint>(v); }
	jint flags() { return get_field<"flags", jint>(); }
	void flags(jint v) { set_field<"flags", jint>(v); }
	jboolean foreground() { return get_field<"foreground", jboolean>(); }
	void foreground(jboolean v) { set_field<"foreground", jboolean>(v); }
	jlong lastActivityTime() { return get_field<"lastActivityTime", jlong>(); }
	void lastActivityTime(jlong v) { set_field<"lastActivityTime", jlong>(v); }
	jint pid() { return get_field<"pid", jint>(); }
	void pid(jint v) { set_field<"pid", jint>(v); }
	jni::ref<java::lang::String> process() { return get_field<"process", jni::ref<java::lang::String>>(); }
	void process(jni::ref<java::lang::String> v) { set_field<"process", jni::ref<java::lang::String>>(v); }
	jlong restarting() { return get_field<"restarting", jlong>(); }
	void restarting(jlong v) { set_field<"restarting", jlong>(v); }
	jni::ref<android::content::ComponentName> service() { return get_field<"service", jni::ref<android::content::ComponentName>>(); }
	void service(jni::ref<android::content::ComponentName> v) { set_field<"service", jni::ref<android::content::ComponentName>>(v); }
	jboolean started() { return get_field<"started", jboolean>(); }
	void started(jboolean v) { set_field<"started", jboolean>(v); }
	jint uid() { return get_field<"uid", jint>(); }
	void uid(jint v) { set_field<"uid", jint>(v); }

	static jni::ref<android::app::ActivityManager_RunningServiceInfo> new_object() { return base_::new_object(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	void readFromParcel(jni::ref<android::os::Parcel> source) { return call_method<"readFromParcel", void>(source); }

protected:

	ActivityManager_RunningServiceInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_ACTIVITYMANAGER_RUNNINGSERVICEINFO
