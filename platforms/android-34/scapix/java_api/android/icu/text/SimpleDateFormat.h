// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/icu/text/DateFormat.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SIMPLEDATEFORMAT_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SIMPLEDATEFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::text { class SimpleDateFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::text::SimpleDateFormat>
{
	static constexpr fixed_string class_name = "android/icu/text/SimpleDateFormat";
	using base_classes = std::tuple<scapix::java_api::android::icu::text::DateFormat>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SIMPLEDATEFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SIMPLEDATEFORMAT)
#define SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SIMPLEDATEFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/text/DateFormatSymbols.h>
#include <scapix/java_api/android/icu/text/DisplayContext.h>
#include <scapix/java_api/android/icu/text/NumberFormat.h>
#include <scapix/java_api/android/icu/text/TimeZoneFormat.h>
#include <scapix/java_api/android/icu/util/Calendar.h>
#include <scapix/java_api/android/icu/util/ULocale.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::text::SimpleDateFormat : public jni::object_base<"android/icu/text/SimpleDateFormat",
	android::icu::text::DateFormat>
{
public:

	static jni::ref<android::icu::text::SimpleDateFormat> new_object() { return base_::new_object(); }
	static jni::ref<android::icu::text::SimpleDateFormat> new_object(jni::ref<java::lang::String> pattern) { return base_::new_object(pattern); }
	static jni::ref<android::icu::text::SimpleDateFormat> new_object(jni::ref<java::lang::String> pattern, jni::ref<java::util::Locale> loc) { return base_::new_object(pattern, loc); }
	static jni::ref<android::icu::text::SimpleDateFormat> new_object(jni::ref<java::lang::String> pattern, jni::ref<android::icu::util::ULocale> loc) { return base_::new_object(pattern, loc); }
	static jni::ref<android::icu::text::SimpleDateFormat> new_object(jni::ref<java::lang::String> pattern, jni::ref<java::lang::String> override, jni::ref<android::icu::util::ULocale> loc) { return base_::new_object(pattern, override, loc); }
	static jni::ref<android::icu::text::SimpleDateFormat> new_object(jni::ref<java::lang::String> pattern, jni::ref<android::icu::text::DateFormatSymbols> formatData) { return base_::new_object(pattern, formatData); }
	void set2DigitYearStart(jni::ref<java::util::Date> startDate) { return call_method<"set2DigitYearStart", void>(startDate); }
	jni::ref<java::util::Date> get2DigitYearStart() { return call_method<"get2DigitYearStart", jni::ref<java::util::Date>>(); }
	void setContext(jni::ref<android::icu::text::DisplayContext> context) { return call_method<"setContext", void>(context); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<android::icu::util::Calendar> cal, jni::ref<java::lang::StringBuffer> toAppendTo, jni::ref<java::text::FieldPosition> pos) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(cal, toAppendTo, pos); }
	void setNumberFormat(jni::ref<android::icu::text::NumberFormat> newNumberFormat) { return call_method<"setNumberFormat", void>(newNumberFormat); }
	void parse(jni::ref<java::lang::String> text, jni::ref<android::icu::util::Calendar> cal, jni::ref<java::text::ParsePosition> parsePos) { return call_method<"parse", void>(text, cal, parsePos); }
	jni::ref<java::lang::String> toPattern() { return call_method<"toPattern", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toLocalizedPattern() { return call_method<"toLocalizedPattern", jni::ref<java::lang::String>>(); }
	void applyPattern(jni::ref<java::lang::String> pat) { return call_method<"applyPattern", void>(pat); }
	void applyLocalizedPattern(jni::ref<java::lang::String> pat) { return call_method<"applyLocalizedPattern", void>(pat); }
	jni::ref<android::icu::text::DateFormatSymbols> getDateFormatSymbols() { return call_method<"getDateFormatSymbols", jni::ref<android::icu::text::DateFormatSymbols>>(); }
	void setDateFormatSymbols(jni::ref<android::icu::text::DateFormatSymbols> newFormatSymbols) { return call_method<"setDateFormatSymbols", void>(newFormatSymbols); }
	jni::ref<android::icu::text::TimeZoneFormat> getTimeZoneFormat() { return call_method<"getTimeZoneFormat", jni::ref<android::icu::text::TimeZoneFormat>>(); }
	void setTimeZoneFormat(jni::ref<android::icu::text::TimeZoneFormat> tzfmt) { return call_method<"setTimeZoneFormat", void>(tzfmt); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jni::ref<java::text::AttributedCharacterIterator> formatToCharacterIterator(jni::ref<java::lang::Object> obj) { return call_method<"formatToCharacterIterator", jni::ref<java::text::AttributedCharacterIterator>>(obj); }
	void setNumberFormat(jni::ref<java::lang::String> fields, jni::ref<android::icu::text::NumberFormat> overrideNF) { return call_method<"setNumberFormat", void>(fields, overrideNF); }
	jni::ref<android::icu::text::NumberFormat> getNumberFormat(jchar field) { return call_method<"getNumberFormat", jni::ref<android::icu::text::NumberFormat>>(field); }

protected:

	SimpleDateFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_TEXT_SIMPLEDATEFORMAT
