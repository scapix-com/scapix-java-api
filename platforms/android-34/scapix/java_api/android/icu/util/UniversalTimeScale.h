// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE_FWD
#define SCAPIX_JAVA_API_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::icu::util { class UniversalTimeScale; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::icu::util::UniversalTimeScale>
{
	static constexpr fixed_string class_name = "android/icu/util/UniversalTimeScale";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE)
#define SCAPIX_JAVA_API_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/icu/math/BigDecimal.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::icu::util::UniversalTimeScale : public jni::object_base<"android/icu/util/UniversalTimeScale",
	java::lang::Object>
{
public:

	static jint DB2_TIME() { return get_static_field<"DB2_TIME", jint>(); }
	static jint DOTNET_DATE_TIME() { return get_static_field<"DOTNET_DATE_TIME", jint>(); }
	static jint EPOCH_OFFSET_PLUS_1_VALUE() { return get_static_field<"EPOCH_OFFSET_PLUS_1_VALUE", jint>(); }
	static jint EPOCH_OFFSET_VALUE() { return get_static_field<"EPOCH_OFFSET_VALUE", jint>(); }
	static jint EXCEL_TIME() { return get_static_field<"EXCEL_TIME", jint>(); }
	static jint FROM_MAX_VALUE() { return get_static_field<"FROM_MAX_VALUE", jint>(); }
	static jint FROM_MIN_VALUE() { return get_static_field<"FROM_MIN_VALUE", jint>(); }
	static jint ICU4C_TIME() { return get_static_field<"ICU4C_TIME", jint>(); }
	static jint JAVA_TIME() { return get_static_field<"JAVA_TIME", jint>(); }
	static jint MAC_OLD_TIME() { return get_static_field<"MAC_OLD_TIME", jint>(); }
	static jint MAC_TIME() { return get_static_field<"MAC_TIME", jint>(); }
	static jint MAX_SCALE() { return get_static_field<"MAX_SCALE", jint>(); }
	static jint TO_MAX_VALUE() { return get_static_field<"TO_MAX_VALUE", jint>(); }
	static jint TO_MIN_VALUE() { return get_static_field<"TO_MIN_VALUE", jint>(); }
	static jint UNITS_VALUE() { return get_static_field<"UNITS_VALUE", jint>(); }
	static jint UNIX_MICROSECONDS_TIME() { return get_static_field<"UNIX_MICROSECONDS_TIME", jint>(); }
	static jint UNIX_TIME() { return get_static_field<"UNIX_TIME", jint>(); }
	static jint WINDOWS_FILE_TIME() { return get_static_field<"WINDOWS_FILE_TIME", jint>(); }

	static jlong from(jlong otherTime, jint p2) { return call_static_method<"from", jlong>(otherTime, p2); }
	static jni::ref<android::icu::math::BigDecimal> bigDecimalFrom(jdouble otherTime, jint p2) { return call_static_method<"bigDecimalFrom", jni::ref<android::icu::math::BigDecimal>>(otherTime, p2); }
	static jni::ref<android::icu::math::BigDecimal> bigDecimalFrom(jlong otherTime, jint p2) { return call_static_method<"bigDecimalFrom", jni::ref<android::icu::math::BigDecimal>>(otherTime, p2); }
	static jni::ref<android::icu::math::BigDecimal> bigDecimalFrom(jni::ref<android::icu::math::BigDecimal> otherTime, jint timeScale) { return call_static_method<"bigDecimalFrom", jni::ref<android::icu::math::BigDecimal>>(otherTime, timeScale); }
	static jlong toLong(jlong universalTime, jint p2) { return call_static_method<"toLong", jlong>(universalTime, p2); }
	static jni::ref<android::icu::math::BigDecimal> toBigDecimal(jlong universalTime, jint p2) { return call_static_method<"toBigDecimal", jni::ref<android::icu::math::BigDecimal>>(universalTime, p2); }
	static jni::ref<android::icu::math::BigDecimal> toBigDecimal(jni::ref<android::icu::math::BigDecimal> universalTime, jint timeScale) { return call_static_method<"toBigDecimal", jni::ref<android::icu::math::BigDecimal>>(universalTime, timeScale); }
	static jlong getTimeScaleValue(jint scale, jint value) { return call_static_method<"getTimeScaleValue", jlong>(scale, value); }

protected:

	UniversalTimeScale(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ICU_UTIL_UNIVERSALTIMESCALE
