// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class StrictMode_ThreadPolicy_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::StrictMode_ThreadPolicy_Builder>
{
	static constexpr fixed_string class_name = "android/os/StrictMode$ThreadPolicy$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/StrictMode_OnThreadViolationListener.h>
#include <scapix/java_api/android/os/StrictMode_ThreadPolicy.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::StrictMode_ThreadPolicy_Builder : public jni::object_base<"android/os/StrictMode$ThreadPolicy$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::os::StrictMode_ThreadPolicy_Builder> new_object() { return base_::new_object(); }
	static jni::ref<android::os::StrictMode_ThreadPolicy_Builder> new_object(jni::ref<android::os::StrictMode_ThreadPolicy> policy) { return base_::new_object(policy); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> detectAll() { return call_method<"detectAll", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> permitAll() { return call_method<"permitAll", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> detectNetwork() { return call_method<"detectNetwork", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> permitNetwork() { return call_method<"permitNetwork", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> detectDiskReads() { return call_method<"detectDiskReads", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> permitDiskReads() { return call_method<"permitDiskReads", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> detectCustomSlowCalls() { return call_method<"detectCustomSlowCalls", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> permitCustomSlowCalls() { return call_method<"permitCustomSlowCalls", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> permitResourceMismatches() { return call_method<"permitResourceMismatches", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> detectUnbufferedIo() { return call_method<"detectUnbufferedIo", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> permitUnbufferedIo() { return call_method<"permitUnbufferedIo", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> detectResourceMismatches() { return call_method<"detectResourceMismatches", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> detectDiskWrites() { return call_method<"detectDiskWrites", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> permitDiskWrites() { return call_method<"permitDiskWrites", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> detectExplicitGc() { return call_method<"detectExplicitGc", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> permitExplicitGc() { return call_method<"permitExplicitGc", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyDialog() { return call_method<"penaltyDialog", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyDeath() { return call_method<"penaltyDeath", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyDeathOnNetwork() { return call_method<"penaltyDeathOnNetwork", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyFlashScreen() { return call_method<"penaltyFlashScreen", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyLog() { return call_method<"penaltyLog", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyDropBox() { return call_method<"penaltyDropBox", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(); }
	jni::ref<android::os::StrictMode_ThreadPolicy_Builder> penaltyListener(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::StrictMode_OnThreadViolationListener> listener) { return call_method<"penaltyListener", jni::ref<android::os::StrictMode_ThreadPolicy_Builder>>(executor, listener); }
	jni::ref<android::os::StrictMode_ThreadPolicy> build() { return call_method<"build", jni::ref<android::os::StrictMode_ThreadPolicy>>(); }

protected:

	StrictMode_ThreadPolicy_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_STRICTMODE_THREADPOLICY_BUILDER
