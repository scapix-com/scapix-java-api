// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_ASYNCTASK_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_ASYNCTASK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class AsyncTask; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::AsyncTask>
{
	static constexpr fixed_string class_name = "android/os/AsyncTask";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_ASYNCTASK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_ASYNCTASK)
#define SCAPIX_JAVA_API_ANDROID_OS_ASYNCTASK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/AsyncTask_Status.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::AsyncTask : public jni::object_base<"android/os/AsyncTask",
	java::lang::Object>
{
public:

	using Status = AsyncTask_Status;

	static jni::ref<java::util::concurrent::Executor> SERIAL_EXECUTOR() { return get_static_field<"SERIAL_EXECUTOR", jni::ref<java::util::concurrent::Executor>>(); }
	static jni::ref<java::util::concurrent::Executor> THREAD_POOL_EXECUTOR() { return get_static_field<"THREAD_POOL_EXECUTOR", jni::ref<java::util::concurrent::Executor>>(); }

	static jni::ref<android::os::AsyncTask> new_object() { return base_::new_object(); }
	jni::ref<android::os::AsyncTask_Status> getStatus() { return call_method<"getStatus", jni::ref<android::os::AsyncTask_Status>>(); }
	jboolean isCancelled() { return call_method<"isCancelled", jboolean>(); }
	jboolean cancel(jboolean mayInterruptIfRunning) { return call_method<"cancel", jboolean>(mayInterruptIfRunning); }
	jni::ref<java::lang::Object> get() { return call_method<"get", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> get(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"get", jni::ref<java::lang::Object>>(timeout, p2); }
	jni::ref<android::os::AsyncTask> execute(jni::ref<jni::array<java::lang::Object>> params) { return call_method<"execute", jni::ref<android::os::AsyncTask>>(params); }
	jni::ref<android::os::AsyncTask> executeOnExecutor(jni::ref<java::util::concurrent::Executor> exec, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"executeOnExecutor", jni::ref<android::os::AsyncTask>>(exec, params); }
	static void execute(jni::ref<java::lang::Runnable> runnable) { return call_static_method<"execute", void>(runnable); }

protected:

	AsyncTask(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_ASYNCTASK
