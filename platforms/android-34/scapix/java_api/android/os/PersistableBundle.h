// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/os/BaseBundle.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_PERSISTABLEBUNDLE_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_PERSISTABLEBUNDLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class PersistableBundle; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::PersistableBundle>
{
	static constexpr fixed_string class_name = "android/os/PersistableBundle";
	using base_classes = std::tuple<scapix::java_api::android::os::BaseBundle, scapix::java_api::java::lang::Cloneable, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_PERSISTABLEBUNDLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_PERSISTABLEBUNDLE)
#define SCAPIX_JAVA_API_ANDROID_OS_PERSISTABLEBUNDLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::PersistableBundle : public jni::object_base<"android/os/PersistableBundle",
	android::os::BaseBundle,
	java::lang::Cloneable,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<android::os::PersistableBundle> EMPTY() { return get_static_field<"EMPTY", jni::ref<android::os::PersistableBundle>>(); }

	static jni::ref<android::os::PersistableBundle> new_object() { return base_::new_object(); }
	static jni::ref<android::os::PersistableBundle> new_object(jint capacity) { return base_::new_object(capacity); }
	static jni::ref<android::os::PersistableBundle> new_object(jni::ref<android::os::PersistableBundle> b) { return base_::new_object(b); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<android::os::PersistableBundle> deepCopy() { return call_method<"deepCopy", jni::ref<android::os::PersistableBundle>>(); }
	void putPersistableBundle(jni::ref<java::lang::String> key, jni::ref<android::os::PersistableBundle> value) { return call_method<"putPersistableBundle", void>(key, value); }
	jni::ref<android::os::PersistableBundle> getPersistableBundle(jni::ref<java::lang::String> key) { return call_method<"getPersistableBundle", jni::ref<android::os::PersistableBundle>>(key); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> parcel, jint flags) { return call_method<"writeToParcel", void>(parcel, flags); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void writeToStream(jni::ref<java::io::OutputStream> outputStream) { return call_method<"writeToStream", void>(outputStream); }
	static jni::ref<android::os::PersistableBundle> readFromStream(jni::ref<java::io::InputStream> inputStream) { return call_static_method<"readFromStream", jni::ref<android::os::PersistableBundle>>(inputStream); }

protected:

	PersistableBundle(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_PERSISTABLEBUNDLE
