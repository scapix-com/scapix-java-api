// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_PARCEL_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_PARCEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class Parcel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::Parcel>
{
	static constexpr fixed_string class_name = "android/os/Parcel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_PARCEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_PARCEL)
#define SCAPIX_JAVA_API_ANDROID_OS_PARCEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/os/IInterface.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/android/util/ArrayMap.h>
#include <scapix/java_api/android/util/Size.h>
#include <scapix/java_api/android/util/SizeF.h>
#include <scapix/java_api/android/util/SparseArray.h>
#include <scapix/java_api/android/util/SparseBooleanArray.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Exception.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/HashMap.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::Parcel : public jni::object_base<"android/os/Parcel",
	java::lang::Object>
{
public:

	static jni::ref<android::os::Parcelable_Creator> STRING_CREATOR() { return get_static_field<"STRING_CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::os::Parcel> obtain() { return call_static_method<"obtain", jni::ref<android::os::Parcel>>(); }
	static jni::ref<android::os::Parcel> obtain(jni::ref<android::os::IBinder> binder) { return call_static_method<"obtain", jni::ref<android::os::Parcel>>(binder); }
	void recycle() { return call_method<"recycle", void>(); }
	void setPropagateAllowBlocking() { return call_method<"setPropagateAllowBlocking", void>(); }
	jint dataSize() { return call_method<"dataSize", jint>(); }
	jint dataAvail() { return call_method<"dataAvail", jint>(); }
	jint dataPosition() { return call_method<"dataPosition", jint>(); }
	jint dataCapacity() { return call_method<"dataCapacity", jint>(); }
	void setDataSize(jint size) { return call_method<"setDataSize", void>(size); }
	void setDataPosition(jint pos) { return call_method<"setDataPosition", void>(pos); }
	void setDataCapacity(jint size) { return call_method<"setDataCapacity", void>(size); }
	jni::ref<jni::array<jbyte>> marshall() { return call_method<"marshall", jni::ref<jni::array<jbyte>>>(); }
	void unmarshall(jni::ref<jni::array<jbyte>> data, jint offset, jint length) { return call_method<"unmarshall", void>(data, offset, length); }
	void appendFrom(jni::ref<android::os::Parcel> parcel, jint offset, jint length) { return call_method<"appendFrom", void>(parcel, offset, length); }
	jboolean hasFileDescriptors() { return call_method<"hasFileDescriptors", jboolean>(); }
	jboolean hasFileDescriptors(jint offset, jint length) { return call_method<"hasFileDescriptors", jboolean>(offset, length); }
	void writeInterfaceToken(jni::ref<java::lang::String> interfaceName) { return call_method<"writeInterfaceToken", void>(interfaceName); }
	void enforceInterface(jni::ref<java::lang::String> interfaceName) { return call_method<"enforceInterface", void>(interfaceName); }
	void enforceNoDataAvail() { return call_method<"enforceNoDataAvail", void>(); }
	void writeByteArray(jni::ref<jni::array<jbyte>> b) { return call_method<"writeByteArray", void>(b); }
	void writeByteArray(jni::ref<jni::array<jbyte>> b, jint offset, jint len) { return call_method<"writeByteArray", void>(b, offset, len); }
	void writeBlob(jni::ref<jni::array<jbyte>> b) { return call_method<"writeBlob", void>(b); }
	void writeBlob(jni::ref<jni::array<jbyte>> b, jint offset, jint len) { return call_method<"writeBlob", void>(b, offset, len); }
	void writeInt(jint val) { return call_method<"writeInt", void>(val); }
	void writeLong(jlong val) { return call_method<"writeLong", void>(val); }
	void writeFloat(jfloat val) { return call_method<"writeFloat", void>(val); }
	void writeDouble(jdouble val) { return call_method<"writeDouble", void>(val); }
	void writeString(jni::ref<java::lang::String> val) { return call_method<"writeString", void>(val); }
	void writeBoolean(jboolean val) { return call_method<"writeBoolean", void>(val); }
	void writeStrongBinder(jni::ref<android::os::IBinder> val) { return call_method<"writeStrongBinder", void>(val); }
	void writeStrongInterface(jni::ref<android::os::IInterface> val) { return call_method<"writeStrongInterface", void>(val); }
	void writeFileDescriptor(jni::ref<java::io::FileDescriptor> val) { return call_method<"writeFileDescriptor", void>(val); }
	void writeByte(jbyte val) { return call_method<"writeByte", void>(val); }
	void writeMap(jni::ref<java::util::Map> val) { return call_method<"writeMap", void>(val); }
	void writeTypedArrayMap(jni::ref<android::util::ArrayMap> val, jint parcelableFlags) { return call_method<"writeTypedArrayMap", void>(val, parcelableFlags); }
	void writeBundle(jni::ref<android::os::Bundle> val) { return call_method<"writeBundle", void>(val); }
	void writePersistableBundle(jni::ref<android::os::PersistableBundle> val) { return call_method<"writePersistableBundle", void>(val); }
	void writeSize(jni::ref<android::util::Size> val) { return call_method<"writeSize", void>(val); }
	void writeSizeF(jni::ref<android::util::SizeF> val) { return call_method<"writeSizeF", void>(val); }
	void writeList(jni::ref<java::util::List> val) { return call_method<"writeList", void>(val); }
	void writeArray(jni::ref<jni::array<java::lang::Object>> val) { return call_method<"writeArray", void>(val); }
	void writeSparseArray(jni::ref<android::util::SparseArray> val) { return call_method<"writeSparseArray", void>(val); }
	void writeSparseBooleanArray(jni::ref<android::util::SparseBooleanArray> val) { return call_method<"writeSparseBooleanArray", void>(val); }
	void writeBooleanArray(jni::ref<jni::array<jboolean>> val) { return call_method<"writeBooleanArray", void>(val); }
	jni::ref<jni::array<jboolean>> createBooleanArray() { return call_method<"createBooleanArray", jni::ref<jni::array<jboolean>>>(); }
	void readBooleanArray(jni::ref<jni::array<jboolean>> val) { return call_method<"readBooleanArray", void>(val); }
	void writeCharArray(jni::ref<jni::array<jchar>> val) { return call_method<"writeCharArray", void>(val); }
	jni::ref<jni::array<jchar>> createCharArray() { return call_method<"createCharArray", jni::ref<jni::array<jchar>>>(); }
	void readCharArray(jni::ref<jni::array<jchar>> val) { return call_method<"readCharArray", void>(val); }
	void writeIntArray(jni::ref<jni::array<jint>> val) { return call_method<"writeIntArray", void>(val); }
	jni::ref<jni::array<jint>> createIntArray() { return call_method<"createIntArray", jni::ref<jni::array<jint>>>(); }
	void readIntArray(jni::ref<jni::array<jint>> val) { return call_method<"readIntArray", void>(val); }
	void writeLongArray(jni::ref<jni::array<jlong>> val) { return call_method<"writeLongArray", void>(val); }
	jni::ref<jni::array<jlong>> createLongArray() { return call_method<"createLongArray", jni::ref<jni::array<jlong>>>(); }
	void readLongArray(jni::ref<jni::array<jlong>> val) { return call_method<"readLongArray", void>(val); }
	void writeFloatArray(jni::ref<jni::array<jfloat>> val) { return call_method<"writeFloatArray", void>(val); }
	jni::ref<jni::array<jfloat>> createFloatArray() { return call_method<"createFloatArray", jni::ref<jni::array<jfloat>>>(); }
	void readFloatArray(jni::ref<jni::array<jfloat>> val) { return call_method<"readFloatArray", void>(val); }
	void writeDoubleArray(jni::ref<jni::array<jdouble>> val) { return call_method<"writeDoubleArray", void>(val); }
	jni::ref<jni::array<jdouble>> createDoubleArray() { return call_method<"createDoubleArray", jni::ref<jni::array<jdouble>>>(); }
	void readDoubleArray(jni::ref<jni::array<jdouble>> val) { return call_method<"readDoubleArray", void>(val); }
	void writeStringArray(jni::ref<jni::array<java::lang::String>> val) { return call_method<"writeStringArray", void>(val); }
	jni::ref<jni::array<java::lang::String>> createStringArray() { return call_method<"createStringArray", jni::ref<jni::array<java::lang::String>>>(); }
	void readStringArray(jni::ref<jni::array<java::lang::String>> val) { return call_method<"readStringArray", void>(val); }
	void writeBinderArray(jni::ref<jni::array<android::os::IBinder>> val) { return call_method<"writeBinderArray", void>(val); }
	void writeInterfaceArray(jni::ref<jni::array<android::os::IInterface>> val) { return call_method<"writeInterfaceArray", void>(val); }
	jni::ref<jni::array<android::os::IBinder>> createBinderArray() { return call_method<"createBinderArray", jni::ref<jni::array<android::os::IBinder>>>(); }
	void readBinderArray(jni::ref<jni::array<android::os::IBinder>> val) { return call_method<"readBinderArray", void>(val); }
	jni::ref<jni::array<android::os::IInterface>> createInterfaceArray(jni::ref<java::util::function::IntFunction> newArray, jni::ref<java::util::function::Function> asInterface) { return call_method<"createInterfaceArray", jni::ref<jni::array<android::os::IInterface>>>(newArray, asInterface); }
	void readInterfaceArray(jni::ref<jni::array<android::os::IInterface>> val, jni::ref<java::util::function::Function> asInterface) { return call_method<"readInterfaceArray", void>(val, asInterface); }
	void writeTypedList(jni::ref<java::util::List> val) { return call_method<"writeTypedList", void>(val); }
	void writeTypedSparseArray(jni::ref<android::util::SparseArray> val, jint parcelableFlags) { return call_method<"writeTypedSparseArray", void>(val, parcelableFlags); }
	void writeTypedList(jni::ref<java::util::List> val, jint parcelableFlags) { return call_method<"writeTypedList", void>(val, parcelableFlags); }
	void writeStringList(jni::ref<java::util::List> val) { return call_method<"writeStringList", void>(val); }
	void writeBinderList(jni::ref<java::util::List> val) { return call_method<"writeBinderList", void>(val); }
	void writeInterfaceList(jni::ref<java::util::List> val) { return call_method<"writeInterfaceList", void>(val); }
	void writeParcelableList(jni::ref<java::util::List> val, jint flags) { return call_method<"writeParcelableList", void>(val, flags); }
	void writeTypedArray(jni::ref<jni::array<android::os::Parcelable>> val, jint parcelableFlags) { return call_method<"writeTypedArray", void>(val, parcelableFlags); }
	void writeTypedObject(jni::ref<android::os::Parcelable> val, jint parcelableFlags) { return call_method<"writeTypedObject", void>(val, parcelableFlags); }
	void writeFixedArray(jni::ref<java::lang::Object> val, jint parcelableFlags, jni::ref<jni::array<jint>> dimensions) { return call_method<"writeFixedArray", void>(val, parcelableFlags, dimensions); }
	void writeValue(jni::ref<java::lang::Object> v) { return call_method<"writeValue", void>(v); }
	void writeParcelable(jni::ref<android::os::Parcelable> p, jint parcelableFlags) { return call_method<"writeParcelable", void>(p, parcelableFlags); }
	void writeParcelableCreator(jni::ref<android::os::Parcelable> p) { return call_method<"writeParcelableCreator", void>(p); }
	void writeSerializable(jni::ref<java::io::Serializable> s) { return call_method<"writeSerializable", void>(s); }
	void writeException(jni::ref<java::lang::Exception> e) { return call_method<"writeException", void>(e); }
	void writeNoException() { return call_method<"writeNoException", void>(); }
	void readException() { return call_method<"readException", void>(); }
	void readException(jint code, jni::ref<java::lang::String> msg) { return call_method<"readException", void>(code, msg); }
	jint readInt() { return call_method<"readInt", jint>(); }
	jlong readLong() { return call_method<"readLong", jlong>(); }
	jfloat readFloat() { return call_method<"readFloat", jfloat>(); }
	jdouble readDouble() { return call_method<"readDouble", jdouble>(); }
	jni::ref<java::lang::String> readString() { return call_method<"readString", jni::ref<java::lang::String>>(); }
	jboolean readBoolean() { return call_method<"readBoolean", jboolean>(); }
	jni::ref<android::os::IBinder> readStrongBinder() { return call_method<"readStrongBinder", jni::ref<android::os::IBinder>>(); }
	jni::ref<android::os::ParcelFileDescriptor> readFileDescriptor() { return call_method<"readFileDescriptor", jni::ref<android::os::ParcelFileDescriptor>>(); }
	jbyte readByte() { return call_method<"readByte", jbyte>(); }
	void readMap(jni::ref<java::util::Map> outVal, jni::ref<java::lang::ClassLoader> loader) { return call_method<"readMap", void>(outVal, loader); }
	void readMap(jni::ref<java::util::Map> outVal, jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazzKey, jni::ref<java::lang::Class> clazzValue) { return call_method<"readMap", void>(outVal, loader, clazzKey, clazzValue); }
	void readList(jni::ref<java::util::List> outVal, jni::ref<java::lang::ClassLoader> loader) { return call_method<"readList", void>(outVal, loader); }
	void readList(jni::ref<java::util::List> outVal, jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazz) { return call_method<"readList", void>(outVal, loader, clazz); }
	jni::ref<java::util::HashMap> readHashMap(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readHashMap", jni::ref<java::util::HashMap>>(loader); }
	jni::ref<java::util::HashMap> readHashMap(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazzKey, jni::ref<java::lang::Class> clazzValue) { return call_method<"readHashMap", jni::ref<java::util::HashMap>>(loader, clazzKey, clazzValue); }
	jni::ref<android::os::Bundle> readBundle() { return call_method<"readBundle", jni::ref<android::os::Bundle>>(); }
	jni::ref<android::os::Bundle> readBundle(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readBundle", jni::ref<android::os::Bundle>>(loader); }
	jni::ref<android::os::PersistableBundle> readPersistableBundle() { return call_method<"readPersistableBundle", jni::ref<android::os::PersistableBundle>>(); }
	jni::ref<android::os::PersistableBundle> readPersistableBundle(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readPersistableBundle", jni::ref<android::os::PersistableBundle>>(loader); }
	jni::ref<android::util::Size> readSize() { return call_method<"readSize", jni::ref<android::util::Size>>(); }
	jni::ref<android::util::SizeF> readSizeF() { return call_method<"readSizeF", jni::ref<android::util::SizeF>>(); }
	jni::ref<jni::array<jbyte>> createByteArray() { return call_method<"createByteArray", jni::ref<jni::array<jbyte>>>(); }
	void readByteArray(jni::ref<jni::array<jbyte>> val) { return call_method<"readByteArray", void>(val); }
	jni::ref<jni::array<jbyte>> readBlob() { return call_method<"readBlob", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::util::ArrayList> readArrayList(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readArrayList", jni::ref<java::util::ArrayList>>(loader); }
	jni::ref<java::util::ArrayList> readArrayList(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazz) { return call_method<"readArrayList", jni::ref<java::util::ArrayList>>(loader, clazz); }
	jni::ref<jni::array<java::lang::Object>> readArray(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readArray", jni::ref<jni::array<java::lang::Object>>>(loader); }
	jni::ref<jni::array<java::lang::Object>> readArray(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazz) { return call_method<"readArray", jni::ref<jni::array<java::lang::Object>>>(loader, clazz); }
	jni::ref<android::util::SparseArray> readSparseArray(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readSparseArray", jni::ref<android::util::SparseArray>>(loader); }
	jni::ref<android::util::SparseArray> readSparseArray(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazz) { return call_method<"readSparseArray", jni::ref<android::util::SparseArray>>(loader, clazz); }
	jni::ref<android::util::SparseBooleanArray> readSparseBooleanArray() { return call_method<"readSparseBooleanArray", jni::ref<android::util::SparseBooleanArray>>(); }
	jni::ref<java::util::ArrayList> createTypedArrayList(jni::ref<android::os::Parcelable_Creator> c) { return call_method<"createTypedArrayList", jni::ref<java::util::ArrayList>>(c); }
	void readTypedList(jni::ref<java::util::List> list, jni::ref<android::os::Parcelable_Creator> c) { return call_method<"readTypedList", void>(list, c); }
	jni::ref<android::util::SparseArray> createTypedSparseArray(jni::ref<android::os::Parcelable_Creator> creator) { return call_method<"createTypedSparseArray", jni::ref<android::util::SparseArray>>(creator); }
	jni::ref<android::util::ArrayMap> createTypedArrayMap(jni::ref<android::os::Parcelable_Creator> creator) { return call_method<"createTypedArrayMap", jni::ref<android::util::ArrayMap>>(creator); }
	jni::ref<java::util::ArrayList> createStringArrayList() { return call_method<"createStringArrayList", jni::ref<java::util::ArrayList>>(); }
	jni::ref<java::util::ArrayList> createBinderArrayList() { return call_method<"createBinderArrayList", jni::ref<java::util::ArrayList>>(); }
	jni::ref<java::util::ArrayList> createInterfaceArrayList(jni::ref<java::util::function::Function> asInterface) { return call_method<"createInterfaceArrayList", jni::ref<java::util::ArrayList>>(asInterface); }
	void readStringList(jni::ref<java::util::List> list) { return call_method<"readStringList", void>(list); }
	void readBinderList(jni::ref<java::util::List> list) { return call_method<"readBinderList", void>(list); }
	void readInterfaceList(jni::ref<java::util::List> list, jni::ref<java::util::function::Function> asInterface) { return call_method<"readInterfaceList", void>(list, asInterface); }
	jni::ref<java::util::List> readParcelableList(jni::ref<java::util::List> list, jni::ref<java::lang::ClassLoader> cl) { return call_method<"readParcelableList", jni::ref<java::util::List>>(list, cl); }
	jni::ref<java::util::List> readParcelableList(jni::ref<java::util::List> list, jni::ref<java::lang::ClassLoader> cl, jni::ref<java::lang::Class> clazz) { return call_method<"readParcelableList", jni::ref<java::util::List>>(list, cl, clazz); }
	jni::ref<jni::array<java::lang::Object>> createTypedArray(jni::ref<android::os::Parcelable_Creator> c) { return call_method<"createTypedArray", jni::ref<jni::array<java::lang::Object>>>(c); }
	void readTypedArray(jni::ref<jni::array<java::lang::Object>> val, jni::ref<android::os::Parcelable_Creator> c) { return call_method<"readTypedArray", void>(val, c); }
	jni::ref<java::lang::Object> readTypedObject(jni::ref<android::os::Parcelable_Creator> c) { return call_method<"readTypedObject", jni::ref<java::lang::Object>>(c); }
	void readFixedArray(jni::ref<java::lang::Object> val) { return call_method<"readFixedArray", void>(val); }
	void readFixedArray(jni::ref<java::lang::Object> val, jni::ref<java::util::function::Function> asInterface) { return call_method<"readFixedArray", void>(val, asInterface); }
	void readFixedArray(jni::ref<java::lang::Object> val, jni::ref<android::os::Parcelable_Creator> c) { return call_method<"readFixedArray", void>(val, c); }
	jni::ref<java::lang::Object> createFixedArray(jni::ref<java::lang::Class> cls, jni::ref<jni::array<jint>> dimensions) { return call_method<"createFixedArray", jni::ref<java::lang::Object>>(cls, dimensions); }
	jni::ref<java::lang::Object> createFixedArray(jni::ref<java::lang::Class> cls, jni::ref<java::util::function::Function> asInterface, jni::ref<jni::array<jint>> dimensions) { return call_method<"createFixedArray", jni::ref<java::lang::Object>>(cls, asInterface, dimensions); }
	jni::ref<java::lang::Object> createFixedArray(jni::ref<java::lang::Class> cls, jni::ref<android::os::Parcelable_Creator> c, jni::ref<jni::array<jint>> dimensions) { return call_method<"createFixedArray", jni::ref<java::lang::Object>>(cls, c, dimensions); }
	void writeParcelableArray(jni::ref<jni::array<android::os::Parcelable>> value, jint parcelableFlags) { return call_method<"writeParcelableArray", void>(value, parcelableFlags); }
	jni::ref<java::lang::Object> readValue(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readValue", jni::ref<java::lang::Object>>(loader); }
	jni::ref<android::os::Parcelable> readParcelable(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readParcelable", jni::ref<android::os::Parcelable>>(loader); }
	jni::ref<java::lang::Object> readParcelable(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazz) { return call_method<"readParcelable", jni::ref<java::lang::Object>>(loader, clazz); }
	jni::ref<android::os::Parcelable_Creator> readParcelableCreator(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readParcelableCreator", jni::ref<android::os::Parcelable_Creator>>(loader); }
	jni::ref<android::os::Parcelable_Creator> readParcelableCreator(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazz) { return call_method<"readParcelableCreator", jni::ref<android::os::Parcelable_Creator>>(loader, clazz); }
	jni::ref<jni::array<android::os::Parcelable>> readParcelableArray(jni::ref<java::lang::ClassLoader> loader) { return call_method<"readParcelableArray", jni::ref<jni::array<android::os::Parcelable>>>(loader); }
	jni::ref<jni::array<java::lang::Object>> readParcelableArray(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazz) { return call_method<"readParcelableArray", jni::ref<jni::array<java::lang::Object>>>(loader, clazz); }
	jni::ref<java::io::Serializable> readSerializable() { return call_method<"readSerializable", jni::ref<java::io::Serializable>>(); }
	jni::ref<java::lang::Object> readSerializable(jni::ref<java::lang::ClassLoader> loader, jni::ref<java::lang::Class> clazz) { return call_method<"readSerializable", jni::ref<java::lang::Object>>(loader, clazz); }

protected:

	Parcel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_PARCEL
