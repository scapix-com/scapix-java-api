// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSCAPABILITIES_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSCAPABILITIES_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::location { class GnssCapabilities_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::location::GnssCapabilities_Builder>
{
	static constexpr fixed_string class_name = "android/location/GnssCapabilities$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSCAPABILITIES_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSCAPABILITIES_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSCAPABILITIES_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/location/GnssCapabilities.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::location::GnssCapabilities_Builder : public jni::object_base<"android/location/GnssCapabilities$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::location::GnssCapabilities_Builder> new_object() { return base_::new_object(); }
	static jni::ref<android::location::GnssCapabilities_Builder> new_object(jni::ref<android::location::GnssCapabilities> capabilities) { return base_::new_object(capabilities); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasScheduling(jboolean capable) { return call_method<"setHasScheduling", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMsb(jboolean capable) { return call_method<"setHasMsb", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMsa(jboolean capable) { return call_method<"setHasMsa", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasSingleShotFix(jboolean capable) { return call_method<"setHasSingleShotFix", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasOnDemandTime(jboolean capable) { return call_method<"setHasOnDemandTime", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasGeofencing(jboolean capable) { return call_method<"setHasGeofencing", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMeasurements(jboolean capable) { return call_method<"setHasMeasurements", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasNavigationMessages(jboolean capable) { return call_method<"setHasNavigationMessages", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasLowPowerMode(jboolean capable) { return call_method<"setHasLowPowerMode", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasSatelliteBlocklist(jboolean capable) { return call_method<"setHasSatelliteBlocklist", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasSatellitePvt(jboolean capable) { return call_method<"setHasSatellitePvt", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMeasurementCorrections(jboolean capable) { return call_method<"setHasMeasurementCorrections", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasAntennaInfo(jboolean capable) { return call_method<"setHasAntennaInfo", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMeasurementCorrelationVectors(jboolean capable) { return call_method<"setHasMeasurementCorrelationVectors", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMeasurementCorrectionsForDriving(jboolean capable) { return call_method<"setHasMeasurementCorrectionsForDriving", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasAccumulatedDeltaRange(jint capable) { return call_method<"setHasAccumulatedDeltaRange", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMeasurementCorrectionsLosSats(jboolean capable) { return call_method<"setHasMeasurementCorrectionsLosSats", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMeasurementCorrectionsExcessPathLength(jboolean capable) { return call_method<"setHasMeasurementCorrectionsExcessPathLength", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasMeasurementCorrectionsReflectingPlane(jboolean capable) { return call_method<"setHasMeasurementCorrectionsReflectingPlane", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasPowerTotal(jboolean capable) { return call_method<"setHasPowerTotal", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasPowerSinglebandTracking(jboolean capable) { return call_method<"setHasPowerSinglebandTracking", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasPowerMultibandTracking(jboolean capable) { return call_method<"setHasPowerMultibandTracking", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasPowerSinglebandAcquisition(jboolean capable) { return call_method<"setHasPowerSinglebandAcquisition", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasPowerMultibandAcquisition(jboolean capable) { return call_method<"setHasPowerMultibandAcquisition", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setHasPowerOtherModes(jboolean capable) { return call_method<"setHasPowerOtherModes", jni::ref<android::location::GnssCapabilities_Builder>>(capable); }
	jni::ref<android::location::GnssCapabilities_Builder> setGnssSignalTypes(jni::ref<java::util::List> gnssSignalTypes) { return call_method<"setGnssSignalTypes", jni::ref<android::location::GnssCapabilities_Builder>>(gnssSignalTypes); }
	jni::ref<android::location::GnssCapabilities> build() { return call_method<"build", jni::ref<android::location::GnssCapabilities>>(); }

protected:

	GnssCapabilities_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_LOCATION_GNSSCAPABILITIES_BUILDER
