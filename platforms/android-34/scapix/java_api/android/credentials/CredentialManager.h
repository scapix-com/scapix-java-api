// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CREDENTIALS_CREDENTIALMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_CREDENTIALS_CREDENTIALMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::credentials { class CredentialManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::credentials::CredentialManager>
{
	static constexpr fixed_string class_name = "android/credentials/CredentialManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CREDENTIALS_CREDENTIALMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CREDENTIALS_CREDENTIALMANAGER)
#define SCAPIX_JAVA_API_ANDROID_CREDENTIALS_CREDENTIALMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/credentials/ClearCredentialStateRequest.h>
#include <scapix/java_api/android/credentials/CreateCredentialRequest.h>
#include <scapix/java_api/android/credentials/GetCredentialRequest.h>
#include <scapix/java_api/android/credentials/PrepareGetCredentialResponse_PendingGetCredentialHandle.h>
#include <scapix/java_api/android/credentials/RegisterCredentialDescriptionRequest.h>
#include <scapix/java_api/android/credentials/UnregisterCredentialDescriptionRequest.h>
#include <scapix/java_api/android/os/CancellationSignal.h>
#include <scapix/java_api/android/os/OutcomeReceiver.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::credentials::CredentialManager : public jni::object_base<"android/credentials/CredentialManager",
	java::lang::Object>
{
public:

	void getCredential(jni::ref<android::content::Context> context, jni::ref<android::credentials::GetCredentialRequest> request, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"getCredential", void>(context, request, cancellationSignal, executor, callback); }
	void getCredential(jni::ref<android::content::Context> context, jni::ref<android::credentials::PrepareGetCredentialResponse_PendingGetCredentialHandle> pendingGetCredentialHandle, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"getCredential", void>(context, pendingGetCredentialHandle, cancellationSignal, executor, callback); }
	void prepareGetCredential(jni::ref<android::credentials::GetCredentialRequest> request, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"prepareGetCredential", void>(request, cancellationSignal, executor, callback); }
	void createCredential(jni::ref<android::content::Context> context, jni::ref<android::credentials::CreateCredentialRequest> request, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"createCredential", void>(context, request, cancellationSignal, executor, callback); }
	void clearCredentialState(jni::ref<android::credentials::ClearCredentialStateRequest> request, jni::ref<android::os::CancellationSignal> cancellationSignal, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"clearCredentialState", void>(request, cancellationSignal, executor, callback); }
	jboolean isEnabledCredentialProviderService(jni::ref<android::content::ComponentName> componentName) { return call_method<"isEnabledCredentialProviderService", jboolean>(componentName); }
	void registerCredentialDescription(jni::ref<android::credentials::RegisterCredentialDescriptionRequest> request) { return call_method<"registerCredentialDescription", void>(request); }
	void unregisterCredentialDescription(jni::ref<android::credentials::UnregisterCredentialDescriptionRequest> request) { return call_method<"unregisterCredentialDescription", void>(request); }

protected:

	CredentialManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CREDENTIALS_CREDENTIALMANAGER
