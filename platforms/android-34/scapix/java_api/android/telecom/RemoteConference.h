// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONFERENCE_FWD
#define SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONFERENCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telecom { class RemoteConference; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telecom::RemoteConference>
{
	static constexpr fixed_string class_name = "android/telecom/RemoteConference";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONFERENCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONFERENCE)
#define SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONFERENCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/telecom/CallAudioState.h>
#include <scapix/java_api/android/telecom/DisconnectCause.h>
#include <scapix/java_api/android/telecom/RemoteConference_Callback.h>
#include <scapix/java_api/android/telecom/RemoteConnection.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telecom::RemoteConference : public jni::object_base<"android/telecom/RemoteConference",
	java::lang::Object>
{
public:

	using Callback = RemoteConference_Callback;

	jni::ref<java::util::List> getConnections() { return call_method<"getConnections", jni::ref<java::util::List>>(); }
	jint getState() { return call_method<"getState", jint>(); }
	jint getConnectionCapabilities() { return call_method<"getConnectionCapabilities", jint>(); }
	jint getConnectionProperties() { return call_method<"getConnectionProperties", jint>(); }
	jni::ref<android::os::Bundle> getExtras() { return call_method<"getExtras", jni::ref<android::os::Bundle>>(); }
	void disconnect() { return call_method<"disconnect", void>(); }
	void separate(jni::ref<android::telecom::RemoteConnection> connection) { return call_method<"separate", void>(connection); }
	void merge() { return call_method<"merge", void>(); }
	void swap() { return call_method<"swap", void>(); }
	void hold() { return call_method<"hold", void>(); }
	void unhold() { return call_method<"unhold", void>(); }
	jni::ref<android::telecom::DisconnectCause> getDisconnectCause() { return call_method<"getDisconnectCause", jni::ref<android::telecom::DisconnectCause>>(); }
	void playDtmfTone(jchar digit) { return call_method<"playDtmfTone", void>(digit); }
	void stopDtmfTone() { return call_method<"stopDtmfTone", void>(); }
	void setCallAudioState(jni::ref<android::telecom::CallAudioState> state) { return call_method<"setCallAudioState", void>(state); }
	jni::ref<java::util::List> getConferenceableConnections() { return call_method<"getConferenceableConnections", jni::ref<java::util::List>>(); }
	void registerCallback(jni::ref<android::telecom::RemoteConference_Callback> callback) { return call_method<"registerCallback", void>(callback); }
	void registerCallback(jni::ref<android::telecom::RemoteConference_Callback> callback, jni::ref<android::os::Handler> handler) { return call_method<"registerCallback", void>(callback, handler); }
	void unregisterCallback(jni::ref<android::telecom::RemoteConference_Callback> callback) { return call_method<"unregisterCallback", void>(callback); }

protected:

	RemoteConference(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_REMOTECONFERENCE
