// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELECOM_CALLCONTROL_FWD
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CALLCONTROL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telecom { class CallControl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telecom::CallControl>
{
	static constexpr fixed_string class_name = "android/telecom/CallControl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CALLCONTROL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELECOM_CALLCONTROL)
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CALLCONTROL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/OutcomeReceiver.h>
#include <scapix/java_api/android/os/ParcelUuid.h>
#include <scapix/java_api/android/telecom/CallEndpoint.h>
#include <scapix/java_api/android/telecom/DisconnectCause.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telecom::CallControl : public jni::object_base<"android/telecom/CallControl",
	java::lang::Object>
{
public:

	jni::ref<android::os::ParcelUuid> getCallId() { return call_method<"getCallId", jni::ref<android::os::ParcelUuid>>(); }
	void setActive(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"setActive", void>(executor, callback); }
	void answer(jint videoState, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"answer", void>(videoState, executor, callback); }
	void setInactive(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"setInactive", void>(executor, callback); }
	void disconnect(jni::ref<android::telecom::DisconnectCause> disconnectCause, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"disconnect", void>(disconnectCause, executor, callback); }
	void startCallStreaming(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"startCallStreaming", void>(executor, callback); }
	void requestCallEndpointChange(jni::ref<android::telecom::CallEndpoint> callEndpoint, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> callback) { return call_method<"requestCallEndpointChange", void>(callEndpoint, executor, callback); }
	void sendEvent(jni::ref<java::lang::String> event, jni::ref<android::os::Bundle> extras) { return call_method<"sendEvent", void>(event, extras); }

protected:

	CallControl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CALLCONTROL
