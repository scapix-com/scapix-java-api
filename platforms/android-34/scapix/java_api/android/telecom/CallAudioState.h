// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELECOM_CALLAUDIOSTATE_FWD
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CALLAUDIOSTATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telecom { class CallAudioState; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telecom::CallAudioState>
{
	static constexpr fixed_string class_name = "android/telecom/CallAudioState";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CALLAUDIOSTATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELECOM_CALLAUDIOSTATE)
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CALLAUDIOSTATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telecom::CallAudioState : public jni::object_base<"android/telecom/CallAudioState",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint ROUTE_BLUETOOTH() { return get_static_field<"ROUTE_BLUETOOTH", jint>(); }
	static jint ROUTE_EARPIECE() { return get_static_field<"ROUTE_EARPIECE", jint>(); }
	static jint ROUTE_SPEAKER() { return get_static_field<"ROUTE_SPEAKER", jint>(); }
	static jint ROUTE_STREAMING() { return get_static_field<"ROUTE_STREAMING", jint>(); }
	static jint ROUTE_WIRED_HEADSET() { return get_static_field<"ROUTE_WIRED_HEADSET", jint>(); }
	static jint ROUTE_WIRED_OR_EARPIECE() { return get_static_field<"ROUTE_WIRED_OR_EARPIECE", jint>(); }

	static jni::ref<android::telecom::CallAudioState> new_object(jboolean muted, jint route, jint supportedRouteMask) { return base_::new_object(muted, route, supportedRouteMask); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean isMuted() { return call_method<"isMuted", jboolean>(); }
	jint getRoute() { return call_method<"getRoute", jint>(); }
	jint getSupportedRouteMask() { return call_method<"getSupportedRouteMask", jint>(); }
	jni::ref<android::bluetooth::BluetoothDevice> getActiveBluetoothDevice() { return call_method<"getActiveBluetoothDevice", jni::ref<android::bluetooth::BluetoothDevice>>(); }
	jni::ref<java::util::Collection> getSupportedBluetoothDevices() { return call_method<"getSupportedBluetoothDevices", jni::ref<java::util::Collection>>(); }
	static jni::ref<java::lang::String> audioRouteToString(jint route) { return call_static_method<"audioRouteToString", jni::ref<java::lang::String>>(route); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> destination, jint flags) { return call_method<"writeToParcel", void>(destination, flags); }

protected:

	CallAudioState(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CALLAUDIOSTATE
