// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_LIGHTS_LIGHT_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_LIGHTS_LIGHT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::lights { class Light; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::lights::Light>
{
	static constexpr fixed_string class_name = "android/hardware/lights/Light";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_LIGHTS_LIGHT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_LIGHTS_LIGHT)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_LIGHTS_LIGHT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::lights::Light : public jni::object_base<"android/hardware/lights/Light",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint LIGHT_CAPABILITY_BRIGHTNESS() { return get_static_field<"LIGHT_CAPABILITY_BRIGHTNESS", jint>(); }
	static jint LIGHT_CAPABILITY_COLOR_RGB() { return get_static_field<"LIGHT_CAPABILITY_COLOR_RGB", jint>(); }
	static jint LIGHT_CAPABILITY_RGB() { return get_static_field<"LIGHT_CAPABILITY_RGB", jint>(); }
	static jint LIGHT_TYPE_INPUT() { return get_static_field<"LIGHT_TYPE_INPUT", jint>(); }
	static jint LIGHT_TYPE_KEYBOARD_BACKLIGHT() { return get_static_field<"LIGHT_TYPE_KEYBOARD_BACKLIGHT", jint>(); }
	static jint LIGHT_TYPE_MICROPHONE() { return get_static_field<"LIGHT_TYPE_MICROPHONE", jint>(); }
	static jint LIGHT_TYPE_PLAYER_ID() { return get_static_field<"LIGHT_TYPE_PLAYER_ID", jint>(); }

	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint getId() { return call_method<"getId", jint>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getOrdinal() { return call_method<"getOrdinal", jint>(); }
	jint getType() { return call_method<"getType", jint>(); }
	jboolean hasBrightnessControl() { return call_method<"hasBrightnessControl", jboolean>(); }
	jboolean hasRgbControl() { return call_method<"hasRgbControl", jboolean>(); }

protected:

	Light(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_LIGHTS_LIGHT
