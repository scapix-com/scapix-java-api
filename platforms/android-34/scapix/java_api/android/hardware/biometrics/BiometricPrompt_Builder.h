// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_BIOMETRICS_BIOMETRICPROMPT_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_BIOMETRICS_BIOMETRICPROMPT_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::biometrics { class BiometricPrompt_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::biometrics::BiometricPrompt_Builder>
{
	static constexpr fixed_string class_name = "android/hardware/biometrics/BiometricPrompt$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_BIOMETRICS_BIOMETRICPROMPT_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_BIOMETRICS_BIOMETRICPROMPT_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_BIOMETRICS_BIOMETRICPROMPT_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/DialogInterface_OnClickListener.h>
#include <scapix/java_api/android/hardware/biometrics/BiometricPrompt.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::biometrics::BiometricPrompt_Builder : public jni::object_base<"android/hardware/biometrics/BiometricPrompt$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::hardware::biometrics::BiometricPrompt_Builder> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	jni::ref<android::hardware::biometrics::BiometricPrompt_Builder> setTitle(jni::ref<java::lang::CharSequence> title) { return call_method<"setTitle", jni::ref<android::hardware::biometrics::BiometricPrompt_Builder>>(title); }
	jni::ref<android::hardware::biometrics::BiometricPrompt_Builder> setSubtitle(jni::ref<java::lang::CharSequence> subtitle) { return call_method<"setSubtitle", jni::ref<android::hardware::biometrics::BiometricPrompt_Builder>>(subtitle); }
	jni::ref<android::hardware::biometrics::BiometricPrompt_Builder> setDescription(jni::ref<java::lang::CharSequence> description) { return call_method<"setDescription", jni::ref<android::hardware::biometrics::BiometricPrompt_Builder>>(description); }
	jni::ref<android::hardware::biometrics::BiometricPrompt_Builder> setNegativeButton(jni::ref<java::lang::CharSequence> text, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::content::DialogInterface_OnClickListener> listener) { return call_method<"setNegativeButton", jni::ref<android::hardware::biometrics::BiometricPrompt_Builder>>(text, executor, listener); }
	jni::ref<android::hardware::biometrics::BiometricPrompt_Builder> setConfirmationRequired(jboolean requireConfirmation) { return call_method<"setConfirmationRequired", jni::ref<android::hardware::biometrics::BiometricPrompt_Builder>>(requireConfirmation); }
	jni::ref<android::hardware::biometrics::BiometricPrompt_Builder> setDeviceCredentialAllowed(jboolean allowed) { return call_method<"setDeviceCredentialAllowed", jni::ref<android::hardware::biometrics::BiometricPrompt_Builder>>(allowed); }
	jni::ref<android::hardware::biometrics::BiometricPrompt_Builder> setAllowedAuthenticators(jint authenticators) { return call_method<"setAllowedAuthenticators", jni::ref<android::hardware::biometrics::BiometricPrompt_Builder>>(authenticators); }
	jni::ref<android::hardware::biometrics::BiometricPrompt> build() { return call_method<"build", jni::ref<android::hardware::biometrics::BiometricPrompt>>(); }

protected:

	BiometricPrompt_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_BIOMETRICS_BIOMETRICPROMPT_BUILDER
