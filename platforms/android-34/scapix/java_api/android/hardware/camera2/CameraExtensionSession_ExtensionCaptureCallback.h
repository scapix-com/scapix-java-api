// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_EXTENSIONCAPTURECALLBACK_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_EXTENSIONCAPTURECALLBACK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::camera2 { class CameraExtensionSession_ExtensionCaptureCallback; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::camera2::CameraExtensionSession_ExtensionCaptureCallback>
{
	static constexpr fixed_string class_name = "android/hardware/camera2/CameraExtensionSession$ExtensionCaptureCallback";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_EXTENSIONCAPTURECALLBACK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_EXTENSIONCAPTURECALLBACK)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_EXTENSIONCAPTURECALLBACK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/camera2/CameraExtensionSession.h>
#include <scapix/java_api/android/hardware/camera2/CaptureRequest.h>
#include <scapix/java_api/android/hardware/camera2/TotalCaptureResult.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::camera2::CameraExtensionSession_ExtensionCaptureCallback : public jni::object_base<"android/hardware/camera2/CameraExtensionSession$ExtensionCaptureCallback",
	java::lang::Object>
{
public:

	static jni::ref<android::hardware::camera2::CameraExtensionSession_ExtensionCaptureCallback> new_object() { return base_::new_object(); }
	void onCaptureStarted(jni::ref<android::hardware::camera2::CameraExtensionSession> session, jni::ref<android::hardware::camera2::CaptureRequest> request, jlong timestamp) { return call_method<"onCaptureStarted", void>(session, request, timestamp); }
	void onCaptureProcessStarted(jni::ref<android::hardware::camera2::CameraExtensionSession> session, jni::ref<android::hardware::camera2::CaptureRequest> request) { return call_method<"onCaptureProcessStarted", void>(session, request); }
	void onCaptureFailed(jni::ref<android::hardware::camera2::CameraExtensionSession> session, jni::ref<android::hardware::camera2::CaptureRequest> request) { return call_method<"onCaptureFailed", void>(session, request); }
	void onCaptureSequenceCompleted(jni::ref<android::hardware::camera2::CameraExtensionSession> session, jint sequenceId) { return call_method<"onCaptureSequenceCompleted", void>(session, sequenceId); }
	void onCaptureSequenceAborted(jni::ref<android::hardware::camera2::CameraExtensionSession> session, jint sequenceId) { return call_method<"onCaptureSequenceAborted", void>(session, sequenceId); }
	void onCaptureResultAvailable(jni::ref<android::hardware::camera2::CameraExtensionSession> session, jni::ref<android::hardware::camera2::CaptureRequest> request, jni::ref<android::hardware::camera2::TotalCaptureResult> result) { return call_method<"onCaptureResultAvailable", void>(session, request, result); }
	void onCaptureProcessProgressed(jni::ref<android::hardware::camera2::CameraExtensionSession> session, jni::ref<android::hardware::camera2::CaptureRequest> request, jint progress) { return call_method<"onCaptureProcessProgressed", void>(session, request, progress); }

protected:

	CameraExtensionSession_ExtensionCaptureCallback(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_EXTENSIONCAPTURECALLBACK
