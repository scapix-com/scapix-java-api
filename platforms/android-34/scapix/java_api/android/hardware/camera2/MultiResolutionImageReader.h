// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_MULTIRESOLUTIONIMAGEREADER_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_MULTIRESOLUTIONIMAGEREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::camera2 { class MultiResolutionImageReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::camera2::MultiResolutionImageReader>
{
	static constexpr fixed_string class_name = "android/hardware/camera2/MultiResolutionImageReader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_MULTIRESOLUTIONIMAGEREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_MULTIRESOLUTIONIMAGEREADER)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_MULTIRESOLUTIONIMAGEREADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/camera2/params/MultiResolutionStreamInfo.h>
#include <scapix/java_api/android/media/ImageReader.h>
#include <scapix/java_api/android/media/ImageReader_OnImageAvailableListener.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::camera2::MultiResolutionImageReader : public jni::object_base<"android/hardware/camera2/MultiResolutionImageReader",
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	static jni::ref<android::hardware::camera2::MultiResolutionImageReader> new_object(jni::ref<java::util::Collection> streams, jint format, jint maxImages) { return base_::new_object(streams, format, maxImages); }
	void setOnImageAvailableListener(jni::ref<android::media::ImageReader_OnImageAvailableListener> listener, jni::ref<java::util::concurrent::Executor> executor) { return call_method<"setOnImageAvailableListener", void>(listener, executor); }
	void close() { return call_method<"close", void>(); }
	void flush() { return call_method<"flush", void>(); }
	jni::ref<android::view::Surface> getSurface() { return call_method<"getSurface", jni::ref<android::view::Surface>>(); }
	jni::ref<android::hardware::camera2::params::MultiResolutionStreamInfo> getStreamInfoForImageReader(jni::ref<android::media::ImageReader> reader) { return call_method<"getStreamInfoForImageReader", jni::ref<android::hardware::camera2::params::MultiResolutionStreamInfo>>(reader); }

protected:

	MultiResolutionImageReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_MULTIRESOLUTIONIMAGEREADER
