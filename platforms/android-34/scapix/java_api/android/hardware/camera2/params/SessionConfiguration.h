// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_SESSIONCONFIGURATION_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_SESSIONCONFIGURATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::camera2::params { class SessionConfiguration; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::camera2::params::SessionConfiguration>
{
	static constexpr fixed_string class_name = "android/hardware/camera2/params/SessionConfiguration";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_SESSIONCONFIGURATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_SESSIONCONFIGURATION)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_SESSIONCONFIGURATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/ColorSpace.h>
#include <scapix/java_api/android/graphics/ColorSpace_Named.h>
#include <scapix/java_api/android/hardware/camera2/CameraCaptureSession_StateCallback.h>
#include <scapix/java_api/android/hardware/camera2/CaptureRequest.h>
#include <scapix/java_api/android/hardware/camera2/params/InputConfiguration.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::camera2::params::SessionConfiguration : public jni::object_base<"android/hardware/camera2/params/SessionConfiguration",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint SESSION_HIGH_SPEED() { return get_static_field<"SESSION_HIGH_SPEED", jint>(); }
	static jint SESSION_REGULAR() { return get_static_field<"SESSION_REGULAR", jint>(); }

	static jni::ref<android::hardware::camera2::params::SessionConfiguration> new_object(jint sessionType, jni::ref<java::util::List> outputs, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::hardware::camera2::CameraCaptureSession_StateCallback> cb) { return base_::new_object(sessionType, outputs, executor, cb); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint getSessionType() { return call_method<"getSessionType", jint>(); }
	jni::ref<java::util::List> getOutputConfigurations() { return call_method<"getOutputConfigurations", jni::ref<java::util::List>>(); }
	jni::ref<android::hardware::camera2::CameraCaptureSession_StateCallback> getStateCallback() { return call_method<"getStateCallback", jni::ref<android::hardware::camera2::CameraCaptureSession_StateCallback>>(); }
	jni::ref<java::util::concurrent::Executor> getExecutor() { return call_method<"getExecutor", jni::ref<java::util::concurrent::Executor>>(); }
	void setInputConfiguration(jni::ref<android::hardware::camera2::params::InputConfiguration> input) { return call_method<"setInputConfiguration", void>(input); }
	jni::ref<android::hardware::camera2::params::InputConfiguration> getInputConfiguration() { return call_method<"getInputConfiguration", jni::ref<android::hardware::camera2::params::InputConfiguration>>(); }
	void setSessionParameters(jni::ref<android::hardware::camera2::CaptureRequest> params) { return call_method<"setSessionParameters", void>(params); }
	jni::ref<android::hardware::camera2::CaptureRequest> getSessionParameters() { return call_method<"getSessionParameters", jni::ref<android::hardware::camera2::CaptureRequest>>(); }
	void setColorSpace(jni::ref<android::graphics::ColorSpace_Named> colorSpace) { return call_method<"setColorSpace", void>(colorSpace); }
	void clearColorSpace() { return call_method<"clearColorSpace", void>(); }
	jni::ref<android::graphics::ColorSpace> getColorSpace() { return call_method<"getColorSpace", jni::ref<android::graphics::ColorSpace>>(); }

protected:

	SessionConfiguration(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_PARAMS_SESSIONCONFIGURATION
