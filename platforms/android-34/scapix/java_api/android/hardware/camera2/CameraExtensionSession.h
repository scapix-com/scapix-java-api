// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::camera2 { class CameraExtensionSession; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::camera2::CameraExtensionSession>
{
	static constexpr fixed_string class_name = "android/hardware/camera2/CameraExtensionSession";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/camera2/CameraDevice.h>
#include <scapix/java_api/android/hardware/camera2/CameraExtensionSession_ExtensionCaptureCallback.h>
#include <scapix/java_api/android/hardware/camera2/CameraExtensionSession_StillCaptureLatency.h>
#include <scapix/java_api/android/hardware/camera2/CaptureRequest.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/android/hardware/camera2/CameraExtensionSession_StateCallback.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::camera2::CameraExtensionSession : public jni::object_base<"android/hardware/camera2/CameraExtensionSession",
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	using StillCaptureLatency = CameraExtensionSession_StillCaptureLatency;
	using StateCallback = CameraExtensionSession_StateCallback;
	using ExtensionCaptureCallback = CameraExtensionSession_ExtensionCaptureCallback;

	jni::ref<android::hardware::camera2::CameraDevice> getDevice() { return call_method<"getDevice", jni::ref<android::hardware::camera2::CameraDevice>>(); }
	jint capture(jni::ref<android::hardware::camera2::CaptureRequest> request, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::hardware::camera2::CameraExtensionSession_ExtensionCaptureCallback> listener) { return call_method<"capture", jint>(request, executor, listener); }
	jint setRepeatingRequest(jni::ref<android::hardware::camera2::CaptureRequest> request, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::hardware::camera2::CameraExtensionSession_ExtensionCaptureCallback> listener) { return call_method<"setRepeatingRequest", jint>(request, executor, listener); }
	void stopRepeating() { return call_method<"stopRepeating", void>(); }
	jni::ref<android::hardware::camera2::CameraExtensionSession_StillCaptureLatency> getRealtimeStillCaptureLatency() { return call_method<"getRealtimeStillCaptureLatency", jni::ref<android::hardware::camera2::CameraExtensionSession_StillCaptureLatency>>(); }
	void close() { return call_method<"close", void>(); }

protected:

	CameraExtensionSession(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAEXTENSIONSESSION
