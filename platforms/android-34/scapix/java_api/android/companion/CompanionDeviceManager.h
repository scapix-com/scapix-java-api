// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_COMPANION_COMPANIONDEVICEMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_COMPANION_COMPANIONDEVICEMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::companion { class CompanionDeviceManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::companion::CompanionDeviceManager>
{
	static constexpr fixed_string class_name = "android/companion/CompanionDeviceManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_COMPANION_COMPANIONDEVICEMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_COMPANION_COMPANIONDEVICEMANAGER)
#define SCAPIX_JAVA_API_ANDROID_COMPANION_COMPANIONDEVICEMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/companion/AssociationRequest.h>
#include <scapix/java_api/android/companion/CompanionDeviceManager_Callback.h>
#include <scapix/java_api/android/content/ComponentName.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/OutcomeReceiver.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::companion::CompanionDeviceManager : public jni::object_base<"android/companion/CompanionDeviceManager",
	java::lang::Object>
{
public:

	using Callback = CompanionDeviceManager_Callback;

	static jni::ref<java::lang::String> EXTRA_ASSOCIATION() { return get_static_field<"EXTRA_ASSOCIATION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_DEVICE() { return get_static_field<"EXTRA_DEVICE", jni::ref<java::lang::String>>(); }
	static jint FLAG_CALL_METADATA() { return get_static_field<"FLAG_CALL_METADATA", jint>(); }
	static jint RESULT_CANCELED() { return get_static_field<"RESULT_CANCELED", jint>(); }
	static jint RESULT_DISCOVERY_TIMEOUT() { return get_static_field<"RESULT_DISCOVERY_TIMEOUT", jint>(); }
	static jint RESULT_INTERNAL_ERROR() { return get_static_field<"RESULT_INTERNAL_ERROR", jint>(); }
	static jint RESULT_OK() { return get_static_field<"RESULT_OK", jint>(); }
	static jint RESULT_USER_REJECTED() { return get_static_field<"RESULT_USER_REJECTED", jint>(); }

	void associate(jni::ref<android::companion::AssociationRequest> request, jni::ref<android::companion::CompanionDeviceManager_Callback> callback, jni::ref<android::os::Handler> handler) { return call_method<"associate", void>(request, callback, handler); }
	void associate(jni::ref<android::companion::AssociationRequest> request, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::companion::CompanionDeviceManager_Callback> callback) { return call_method<"associate", void>(request, executor, callback); }
	jni::ref<android::content::IntentSender> buildAssociationCancellationIntent() { return call_method<"buildAssociationCancellationIntent", jni::ref<android::content::IntentSender>>(); }
	void enableSystemDataSyncForTypes(jint associationId, jint flags) { return call_method<"enableSystemDataSyncForTypes", void>(associationId, flags); }
	void disableSystemDataSyncForTypes(jint associationId, jint flags) { return call_method<"disableSystemDataSyncForTypes", void>(associationId, flags); }
	jni::ref<java::util::List> getAssociations() { return call_method<"getAssociations", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getMyAssociations() { return call_method<"getMyAssociations", jni::ref<java::util::List>>(); }
	void disassociate(jni::ref<java::lang::String> deviceMacAddress) { return call_method<"disassociate", void>(deviceMacAddress); }
	void disassociate(jint associationId) { return call_method<"disassociate", void>(associationId); }
	void requestNotificationAccess(jni::ref<android::content::ComponentName> component) { return call_method<"requestNotificationAccess", void>(component); }
	jboolean hasNotificationAccess(jni::ref<android::content::ComponentName> component) { return call_method<"hasNotificationAccess", jboolean>(component); }
	void startObservingDevicePresence(jni::ref<java::lang::String> deviceAddress) { return call_method<"startObservingDevicePresence", void>(deviceAddress); }
	void stopObservingDevicePresence(jni::ref<java::lang::String> deviceAddress) { return call_method<"stopObservingDevicePresence", void>(deviceAddress); }
	void attachSystemDataTransport(jint associationId, jni::ref<java::io::InputStream> in, jni::ref<java::io::OutputStream> out) { return call_method<"attachSystemDataTransport", void>(associationId, in, out); }
	void detachSystemDataTransport(jint associationId) { return call_method<"detachSystemDataTransport", void>(associationId); }
	jni::ref<android::content::IntentSender> buildPermissionTransferUserConsentIntent(jint associationId) { return call_method<"buildPermissionTransferUserConsentIntent", jni::ref<android::content::IntentSender>>(associationId); }
	void startSystemDataTransfer(jint associationId, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::os::OutcomeReceiver> result) { return call_method<"startSystemDataTransfer", void>(associationId, executor, result); }

protected:

	CompanionDeviceManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_COMPANION_COMPANIONDEVICEMANAGER
