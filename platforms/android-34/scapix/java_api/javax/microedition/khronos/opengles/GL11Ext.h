// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/microedition/khronos/opengles/GL.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXT_FWD
#define SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::microedition::khronos::opengles { class GL11Ext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::microedition::khronos::opengles::GL11Ext>
{
	static constexpr fixed_string class_name = "javax/microedition/khronos/opengles/GL11Ext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::microedition::khronos::opengles::GL>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXT)
#define SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#include <scapix/java_api/java/nio/ShortBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::microedition::khronos::opengles::GL11Ext : public jni::object_base<"javax/microedition/khronos/opengles/GL11Ext",
	java::lang::Object,
	javax::microedition::khronos::opengles::GL>
{
public:

	static jint GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_POINTER_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_POINTER_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_SIZE_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_SIZE_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_STRIDE_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_STRIDE_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_TYPE_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_TYPE_OES", jint>(); }
	static jint GL_MATRIX_PALETTE_OES() { return get_static_field<"GL_MATRIX_PALETTE_OES", jint>(); }
	static jint GL_MAX_PALETTE_MATRICES_OES() { return get_static_field<"GL_MAX_PALETTE_MATRICES_OES", jint>(); }
	static jint GL_MAX_VERTEX_UNITS_OES() { return get_static_field<"GL_MAX_VERTEX_UNITS_OES", jint>(); }
	static jint GL_TEXTURE_CROP_RECT_OES() { return get_static_field<"GL_TEXTURE_CROP_RECT_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_BUFFER_BINDING_OES() { return get_static_field<"GL_WEIGHT_ARRAY_BUFFER_BINDING_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_OES() { return get_static_field<"GL_WEIGHT_ARRAY_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_POINTER_OES() { return get_static_field<"GL_WEIGHT_ARRAY_POINTER_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_SIZE_OES() { return get_static_field<"GL_WEIGHT_ARRAY_SIZE_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_STRIDE_OES() { return get_static_field<"GL_WEIGHT_ARRAY_STRIDE_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_TYPE_OES() { return get_static_field<"GL_WEIGHT_ARRAY_TYPE_OES", jint>(); }

	void glTexParameterfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_method<"glTexParameterfv", void>(p1, p2, p3, p4); }
	void glCurrentPaletteMatrixOES(jint p1) { return call_method<"glCurrentPaletteMatrixOES", void>(p1); }
	void glDrawTexfOES(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) { return call_method<"glDrawTexfOES", void>(p1, p2, p3, p4, p5); }
	void glDrawTexfvOES(jni::ref<jni::array<jfloat>> p1, jint p2) { return call_method<"glDrawTexfvOES", void>(p1, p2); }
	void glDrawTexfvOES(jni::ref<java::nio::FloatBuffer> p1) { return call_method<"glDrawTexfvOES", void>(p1); }
	void glDrawTexiOES(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"glDrawTexiOES", void>(p1, p2, p3, p4, p5); }
	void glDrawTexivOES(jni::ref<jni::array<jint>> p1, jint p2) { return call_method<"glDrawTexivOES", void>(p1, p2); }
	void glDrawTexivOES(jni::ref<java::nio::IntBuffer> p1) { return call_method<"glDrawTexivOES", void>(p1); }
	void glDrawTexsOES(jshort p1, jshort p2, jshort p3, jshort p4, jshort p5) { return call_method<"glDrawTexsOES", void>(p1, p2, p3, p4, p5); }
	void glDrawTexsvOES(jni::ref<jni::array<jshort>> p1, jint p2) { return call_method<"glDrawTexsvOES", void>(p1, p2); }
	void glDrawTexsvOES(jni::ref<java::nio::ShortBuffer> p1) { return call_method<"glDrawTexsvOES", void>(p1); }
	void glDrawTexxOES(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"glDrawTexxOES", void>(p1, p2, p3, p4, p5); }
	void glDrawTexxvOES(jni::ref<jni::array<jint>> p1, jint p2) { return call_method<"glDrawTexxvOES", void>(p1, p2); }
	void glDrawTexxvOES(jni::ref<java::nio::IntBuffer> p1) { return call_method<"glDrawTexxvOES", void>(p1); }
	void glEnable(jint p1) { return call_method<"glEnable", void>(p1); }
	void glEnableClientState(jint p1) { return call_method<"glEnableClientState", void>(p1); }
	void glLoadPaletteFromModelViewMatrixOES() { return call_method<"glLoadPaletteFromModelViewMatrixOES", void>(); }
	void glMatrixIndexPointerOES(jint p1, jint p2, jint p3, jni::ref<java::nio::Buffer> p4) { return call_method<"glMatrixIndexPointerOES", void>(p1, p2, p3, p4); }
	void glMatrixIndexPointerOES(jint p1, jint p2, jint p3, jint p4) { return call_method<"glMatrixIndexPointerOES", void>(p1, p2, p3, p4); }
	void glWeightPointerOES(jint p1, jint p2, jint p3, jni::ref<java::nio::Buffer> p4) { return call_method<"glWeightPointerOES", void>(p1, p2, p3, p4); }
	void glWeightPointerOES(jint p1, jint p2, jint p3, jint p4) { return call_method<"glWeightPointerOES", void>(p1, p2, p3, p4); }

protected:

	GL11Ext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL11EXT
