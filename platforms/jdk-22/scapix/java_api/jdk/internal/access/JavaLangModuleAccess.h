// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGMODULEACCESS_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGMODULEACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::access { class JavaLangModuleAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::access::JavaLangModuleAccess>
{
	static constexpr fixed_string class_name = "jdk/internal/access/JavaLangModuleAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGMODULEACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGMODULEACCESS)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGMODULEACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/Configuration.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Builder.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Exports.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Opens.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Provides.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Requires.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Version.h>
#include <scapix/java_api/java/lang/module/ModuleFinder.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::access::JavaLangModuleAccess : public jni::object_base<"jdk/internal/access/JavaLangModuleAccess",
	java::lang::Object>
{
public:

	jni::ref<java::lang::module::ModuleDescriptor_Builder> newModuleBuilder(jni::ref<java::lang::String> p1, jboolean p2, jni::ref<java::util::Set> p3) { return call_method<"newModuleBuilder", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(p1, p2, p3); }
	jni::ref<java::util::Set> packages(jni::ref<java::lang::module::ModuleDescriptor_Builder> p1) { return call_method<"packages", jni::ref<java::util::Set>>(p1); }
	void requires_(jni::ref<java::lang::module::ModuleDescriptor_Builder> p1, jni::ref<java::util::Set> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"requires", void>(p1, p2, p3, p4); }
	jni::ref<java::lang::module::ModuleDescriptor_Requires> newRequires(jni::ref<java::util::Set> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::module::ModuleDescriptor_Version> p3) { return call_method<"newRequires", jni::ref<java::lang::module::ModuleDescriptor_Requires>>(p1, p2, p3); }
	jni::ref<java::lang::module::ModuleDescriptor_Exports> newExports(jni::ref<java::util::Set> p1, jni::ref<java::lang::String> p2) { return call_method<"newExports", jni::ref<java::lang::module::ModuleDescriptor_Exports>>(p1, p2); }
	jni::ref<java::lang::module::ModuleDescriptor_Exports> newExports(jni::ref<java::util::Set> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Set> p3) { return call_method<"newExports", jni::ref<java::lang::module::ModuleDescriptor_Exports>>(p1, p2, p3); }
	jni::ref<java::lang::module::ModuleDescriptor_Opens> newOpens(jni::ref<java::util::Set> p1, jni::ref<java::lang::String> p2) { return call_method<"newOpens", jni::ref<java::lang::module::ModuleDescriptor_Opens>>(p1, p2); }
	jni::ref<java::lang::module::ModuleDescriptor_Opens> newOpens(jni::ref<java::util::Set> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Set> p3) { return call_method<"newOpens", jni::ref<java::lang::module::ModuleDescriptor_Opens>>(p1, p2, p3); }
	jni::ref<java::lang::module::ModuleDescriptor_Provides> newProvides(jni::ref<java::lang::String> p1, jni::ref<java::util::List> p2) { return call_method<"newProvides", jni::ref<java::lang::module::ModuleDescriptor_Provides>>(p1, p2); }
	jni::ref<java::lang::module::ModuleDescriptor> newModuleDescriptor(jni::ref<java::lang::String> p1, jni::ref<java::lang::module::ModuleDescriptor_Version> p2, jni::ref<java::util::Set> p3, jni::ref<java::util::Set> p4, jni::ref<java::util::Set> p5, jni::ref<java::util::Set> p6, jni::ref<java::util::Set> p7, jni::ref<java::util::Set> p8, jni::ref<java::util::Set> p9, jni::ref<java::lang::String> p10, jint p11) { return call_method<"newModuleDescriptor", jni::ref<java::lang::module::ModuleDescriptor>>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	jni::ref<java::lang::module::Configuration> resolveAndBind(jni::ref<java::lang::module::ModuleFinder> p1, jni::ref<java::util::Collection> p2, jni::ref<java::io::PrintStream> p3) { return call_method<"resolveAndBind", jni::ref<java::lang::module::Configuration>>(p1, p2, p3); }
	jni::ref<java::lang::module::Configuration> newConfiguration(jni::ref<java::lang::module::ModuleFinder> p1, jni::ref<java::util::Map> p2) { return call_method<"newConfiguration", jni::ref<java::lang::module::Configuration>>(p1, p2); }

protected:

	JavaLangModuleAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_JAVALANGMODULEACCESS
