// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/ForkJoinWorkerThread.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MISC_CARRIERTHREAD_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_CARRIERTHREAD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::misc { class CarrierThread; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::misc::CarrierThread>
{
	static constexpr fixed_string class_name = "jdk/internal/misc/CarrierThread";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::ForkJoinWorkerThread>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_CARRIERTHREAD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MISC_CARRIERTHREAD)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_CARRIERTHREAD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Thread_UncaughtExceptionHandler.h>
#include <scapix/java_api/java/util/concurrent/ForkJoinPool.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::misc::CarrierThread : public jni::object_base<"jdk/internal/misc/CarrierThread",
	java::util::concurrent::ForkJoinWorkerThread>
{
public:

	static jni::ref<jdk::internal::misc::CarrierThread> new_object(jni::ref<java::util::concurrent::ForkJoinPool> pool) { return base_::new_object(pool); }
	void setUncaughtExceptionHandler(jni::ref<java::lang::Thread_UncaughtExceptionHandler> ueh) { return call_method<"setUncaughtExceptionHandler", void>(ueh); }
	void setContextClassLoader(jni::ref<java::lang::ClassLoader> cl) { return call_method<"setContextClassLoader", void>(cl); }

protected:

	CarrierThread(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_CARRIERTHREAD
