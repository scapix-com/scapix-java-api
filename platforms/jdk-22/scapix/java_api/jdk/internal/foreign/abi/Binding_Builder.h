// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_BUILDER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::foreign::abi { class Binding_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::foreign::abi::Binding_Builder>
{
	static constexpr fixed_string class_name = "jdk/internal/foreign/abi/Binding$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_BUILDER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/foreign/MemoryLayout.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/foreign/abi/VMStorage.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::foreign::abi::Binding_Builder : public jni::object_base<"jdk/internal/foreign/abi/Binding$Builder",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::foreign::abi::Binding_Builder> new_object() { return base_::new_object(); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> vmStore(jni::ref<jdk::internal::foreign::abi::VMStorage> storage, jni::ref<java::lang::Class> type) { return call_method<"vmStore", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(storage, type); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> vmLoad(jni::ref<jdk::internal::foreign::abi::VMStorage> storage, jni::ref<java::lang::Class> type) { return call_method<"vmLoad", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(storage, type); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> bufferStore(jlong offset, jni::ref<java::lang::Class> p2) { return call_method<"bufferStore", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(offset, p2); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> bufferStore(jlong offset, jni::ref<java::lang::Class> p2, jint type) { return call_method<"bufferStore", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(offset, p2, type); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> bufferLoad(jlong offset, jni::ref<java::lang::Class> p2) { return call_method<"bufferLoad", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(offset, p2); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> bufferLoad(jlong offset, jni::ref<java::lang::Class> p2, jint type) { return call_method<"bufferLoad", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(offset, p2, type); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> copy(jni::ref<java::lang::foreign::MemoryLayout> layout) { return call_method<"copy", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(layout); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> allocate(jni::ref<java::lang::foreign::MemoryLayout> layout) { return call_method<"allocate", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(layout); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> boxAddressRaw(jlong size, jlong p2) { return call_method<"boxAddressRaw", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(size, p2); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> boxAddress(jni::ref<java::lang::foreign::MemoryLayout> layout) { return call_method<"boxAddress", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(layout); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> unboxAddress() { return call_method<"unboxAddress", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> segmentBase() { return call_method<"segmentBase", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> segmentOffsetAllowHeap() { return call_method<"segmentOffsetAllowHeap", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> segmentOffsetNoAllowHeap() { return call_method<"segmentOffsetNoAllowHeap", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> dup() { return call_method<"dup", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> shiftLeft(jint shiftAmount, jni::ref<java::lang::Class> type) { return call_method<"shiftLeft", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(shiftAmount, type); }
	jni::ref<jdk::internal::foreign::abi::Binding_Builder> shiftRight(jint shiftAmount, jni::ref<java::lang::Class> type) { return call_method<"shiftRight", jni::ref<jdk::internal::foreign::abi::Binding_Builder>>(shiftAmount, type); }
	jni::ref<java::util::List> build() { return call_method<"build", jni::ref<java::util::List>>(); }

protected:

	Binding_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_BINDING_BUILDER
