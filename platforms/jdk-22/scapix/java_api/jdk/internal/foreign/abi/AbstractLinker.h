// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/foreign/Linker.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_ABSTRACTLINKER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_ABSTRACTLINKER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::foreign::abi { class AbstractLinker; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::foreign::abi::AbstractLinker>
{
	static constexpr fixed_string class_name = "jdk/internal/foreign/abi/AbstractLinker";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::foreign::Linker>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_ABSTRACTLINKER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_ABSTRACTLINKER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_ABSTRACTLINKER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/foreign/Arena.h>
#include <scapix/java_api/java/lang/foreign/FunctionDescriptor.h>
#include <scapix/java_api/java/lang/foreign/Linker_Option.h>
#include <scapix/java_api/java/lang/foreign/MemorySegment.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/jdk/internal/foreign/SystemLookup.h>
#include <scapix/java_api/jdk/internal/foreign/abi/AbstractLinker_UpcallStubFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::foreign::abi::AbstractLinker : public jni::object_base<"jdk/internal/foreign/abi/AbstractLinker",
	java::lang::Object,
	java::lang::foreign::Linker>
{
public:

	using UpcallStubFactory = AbstractLinker_UpcallStubFactory;

	static jni::ref<jdk::internal::foreign::abi::AbstractLinker> new_object() { return base_::new_object(); }
	jni::ref<java::lang::invoke::MethodHandle> downcallHandle(jni::ref<java::lang::foreign::MemorySegment> symbol, jni::ref<java::lang::foreign::FunctionDescriptor> function, jni::ref<jni::array<java::lang::foreign::Linker_Option>> options) { return call_method<"downcallHandle", jni::ref<java::lang::invoke::MethodHandle>>(symbol, function, options); }
	jni::ref<java::lang::invoke::MethodHandle> downcallHandle(jni::ref<java::lang::foreign::FunctionDescriptor> function, jni::ref<jni::array<java::lang::foreign::Linker_Option>> options) { return call_method<"downcallHandle", jni::ref<java::lang::invoke::MethodHandle>>(function, options); }
	jni::ref<java::lang::foreign::MemorySegment> upcallStub(jni::ref<java::lang::invoke::MethodHandle> target, jni::ref<java::lang::foreign::FunctionDescriptor> function, jni::ref<java::lang::foreign::Arena> arena, jni::ref<jni::array<java::lang::foreign::Linker_Option>> options) { return call_method<"upcallStub", jni::ref<java::lang::foreign::MemorySegment>>(target, function, arena, options); }
	jni::ref<jdk::internal::foreign::SystemLookup> defaultLookup() { return call_method<"defaultLookup", jni::ref<jdk::internal::foreign::SystemLookup>>(); }

protected:

	AbstractLinker(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_ABSTRACTLINKER
