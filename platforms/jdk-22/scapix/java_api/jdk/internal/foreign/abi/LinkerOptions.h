// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_LINKEROPTIONS_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_LINKEROPTIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::foreign::abi { class LinkerOptions; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::foreign::abi::LinkerOptions>
{
	static constexpr fixed_string class_name = "jdk/internal/foreign/abi/LinkerOptions";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_LINKEROPTIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_LINKEROPTIONS)
#define SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_LINKEROPTIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/foreign/FunctionDescriptor.h>
#include <scapix/java_api/java/lang/foreign/Linker_Option.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#include <scapix/java_api/jdk/internal/foreign/abi/LinkerOptions_LinkerOptionImpl.h>
#include <scapix/java_api/jdk/internal/foreign/abi/LinkerOptions_FirstVariadicArg.h>
#include <scapix/java_api/jdk/internal/foreign/abi/LinkerOptions_CaptureCallState.h>
#include <scapix/java_api/jdk/internal/foreign/abi/LinkerOptions_Critical.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::foreign::abi::LinkerOptions : public jni::object_base<"jdk/internal/foreign/abi/LinkerOptions",
	java::lang::Object>
{
public:

	using LinkerOptionImpl = LinkerOptions_LinkerOptionImpl;
	using FirstVariadicArg = LinkerOptions_FirstVariadicArg;
	using CaptureCallState = LinkerOptions_CaptureCallState;
	using Critical = LinkerOptions_Critical;

	static jni::ref<jdk::internal::foreign::abi::LinkerOptions> forDowncall(jni::ref<java::lang::foreign::FunctionDescriptor> desc, jni::ref<jni::array<java::lang::foreign::Linker_Option>> options) { return call_static_method<"forDowncall", jni::ref<jdk::internal::foreign::abi::LinkerOptions>>(desc, options); }
	static jni::ref<jdk::internal::foreign::abi::LinkerOptions> forUpcall(jni::ref<java::lang::foreign::FunctionDescriptor> desc, jni::ref<jni::array<java::lang::foreign::Linker_Option>> options) { return call_static_method<"forUpcall", jni::ref<jdk::internal::foreign::abi::LinkerOptions>>(desc, options); }
	static jni::ref<jdk::internal::foreign::abi::LinkerOptions> empty() { return call_static_method<"empty", jni::ref<jdk::internal::foreign::abi::LinkerOptions>>(); }
	jboolean isVarargsIndex(jint argIndex) { return call_method<"isVarargsIndex", jboolean>(argIndex); }
	jboolean hasCapturedCallState() { return call_method<"hasCapturedCallState", jboolean>(); }
	jni::ref<java::util::stream::Stream> capturedCallState() { return call_method<"capturedCallState", jni::ref<java::util::stream::Stream>>(); }
	jboolean isVariadicFunction() { return call_method<"isVariadicFunction", jboolean>(); }
	jint firstVariadicArgIndex() { return call_method<"firstVariadicArgIndex", jint>(); }
	jboolean isCritical() { return call_method<"isCritical", jboolean>(); }
	jboolean allowsHeapAccess() { return call_method<"allowsHeapAccess", jboolean>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	LinkerOptions(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_FOREIGN_ABI_LINKEROPTIONS
