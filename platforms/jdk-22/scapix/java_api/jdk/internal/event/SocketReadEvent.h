// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/event/Event.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_EVENT_SOCKETREADEVENT_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_EVENT_SOCKETREADEVENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::event { class SocketReadEvent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::event::SocketReadEvent>
{
	static constexpr fixed_string class_name = "jdk/internal/event/SocketReadEvent";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::event::Event>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_EVENT_SOCKETREADEVENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_EVENT_SOCKETREADEVENT)
#define SCAPIX_JAVA_API_JDK_INTERNAL_EVENT_SOCKETREADEVENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::event::SocketReadEvent : public jni::object_base<"jdk/internal/event/SocketReadEvent",
	jdk::internal::event::Event>
{
public:

	jni::ref<java::lang::String> host() { return get_field<"host", jni::ref<java::lang::String>>(); }
	void host(jni::ref<java::lang::String> v) { set_field<"host", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> address() { return get_field<"address", jni::ref<java::lang::String>>(); }
	void address(jni::ref<java::lang::String> v) { set_field<"address", jni::ref<java::lang::String>>(v); }
	jint port() { return get_field<"port", jint>(); }
	void port(jint v) { set_field<"port", jint>(v); }
	jlong timeout() { return get_field<"timeout", jlong>(); }
	void timeout(jlong v) { set_field<"timeout", jlong>(v); }
	jlong bytesRead() { return get_field<"bytesRead", jlong>(); }
	void bytesRead(jlong v) { set_field<"bytesRead", jlong>(v); }
	jboolean endOfStream() { return get_field<"endOfStream", jboolean>(); }
	void endOfStream(jboolean v) { set_field<"endOfStream", jboolean>(v); }

	static jni::ref<jdk::internal::event::SocketReadEvent> new_object() { return base_::new_object(); }
	static void commit(jlong start, jlong p2, jni::ref<java::lang::String> duration, jni::ref<java::lang::String> p4, jint host, jlong address, jlong port, jboolean timeout) { return call_static_method<"commit", void>(start, p2, duration, p4, host, address, port, timeout); }
	static jboolean shouldCommit(jlong duration) { return call_static_method<"shouldCommit", jboolean>(duration); }
	static jboolean enabled() { return call_static_method<"enabled", jboolean>(); }
	static jlong timestamp() { return call_static_method<"timestamp", jlong>(); }
	static void offer(jlong start, jlong p2, jni::ref<java::net::SocketAddress> nbytes, jlong p4) { return call_static_method<"offer", void>(start, p2, nbytes, p4); }
	static void emit(jlong start, jlong p2, jlong duration, jni::ref<java::net::SocketAddress> p4, jlong nbytes) { return call_static_method<"emit", void>(start, p2, duration, p4, nbytes); }

protected:

	SocketReadEvent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_EVENT_SOCKETREADEVENT
