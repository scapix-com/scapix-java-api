// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_URLCLASSPATH_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_URLCLASSPATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::loader { class URLClassPath; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::loader::URLClassPath>
{
	static constexpr fixed_string class_name = "jdk/internal/loader/URLClassPath";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_URLCLASSPATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_URLCLASSPATH)
#define SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_URLCLASSPATH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/net/URLStreamHandlerFactory.h>
#include <scapix/java_api/java/security/AccessControlContext.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/loader/Resource.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::loader::URLClassPath : public jni::object_base<"jdk/internal/loader/URLClassPath",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::loader::URLClassPath> new_object(jni::ref<jni::array<java::net::URL>> urls, jni::ref<java::net::URLStreamHandlerFactory> factory, jni::ref<java::security::AccessControlContext> acc) { return base_::new_object(urls, factory, acc); }
	static jni::ref<jdk::internal::loader::URLClassPath> new_object(jni::ref<jni::array<java::net::URL>> urls, jni::ref<java::security::AccessControlContext> acc) { return base_::new_object(urls, acc); }
	jni::ref<java::util::List> closeLoaders() { return call_method<"closeLoaders", jni::ref<java::util::List>>(); }
	void addURL(jni::ref<java::net::URL> url) { return call_method<"addURL", void>(url); }
	void addFile(jni::ref<java::lang::String> s) { return call_method<"addFile", void>(s); }
	jni::ref<jni::array<java::net::URL>> getURLs() { return call_method<"getURLs", jni::ref<jni::array<java::net::URL>>>(); }
	jni::ref<java::net::URL> findResource(jni::ref<java::lang::String> name, jboolean check) { return call_method<"findResource", jni::ref<java::net::URL>>(name, check); }
	jni::ref<jdk::internal::loader::Resource> getResource(jni::ref<java::lang::String> name, jboolean check) { return call_method<"getResource", jni::ref<jdk::internal::loader::Resource>>(name, check); }
	jni::ref<java::util::Enumeration> findResources(jni::ref<java::lang::String> name, jboolean check) { return call_method<"findResources", jni::ref<java::util::Enumeration>>(name, check); }
	jni::ref<jdk::internal::loader::Resource> getResource(jni::ref<java::lang::String> name) { return call_method<"getResource", jni::ref<jdk::internal::loader::Resource>>(name); }
	jni::ref<java::util::Enumeration> getResources(jni::ref<java::lang::String> name, jboolean check) { return call_method<"getResources", jni::ref<java::util::Enumeration>>(name, check); }
	jni::ref<java::util::Enumeration> getResources(jni::ref<java::lang::String> name) { return call_method<"getResources", jni::ref<java::util::Enumeration>>(name); }
	static jni::ref<java::net::URL> checkURL(jni::ref<java::net::URL> url) { return call_static_method<"checkURL", jni::ref<java::net::URL>>(url); }
	static void check(jni::ref<java::net::URL> url) { return call_static_method<"check", void>(url); }

protected:

	URLClassPath(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_LOADER_URLCLASSPATH
