// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_VM_CONTINUATION_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_VM_CONTINUATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::vm { class Continuation; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::vm::Continuation>
{
	static constexpr fixed_string class_name = "jdk/internal/vm/Continuation";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_VM_CONTINUATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_VM_CONTINUATION)
#define SCAPIX_JAVA_API_JDK_INTERNAL_VM_CONTINUATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/StackTraceElement.h>
#include <scapix/java_api/java/lang/StackWalker.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/jdk/internal/vm/Continuation_PreemptStatus.h>
#include <scapix/java_api/jdk/internal/vm/ContinuationScope.h>
#include <scapix/java_api/jdk/internal/vm/Continuation_Pinned.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::vm::Continuation : public jni::object_base<"jdk/internal/vm/Continuation",
	java::lang::Object>
{
public:

	using Pinned = Continuation_Pinned;
	using PreemptStatus = Continuation_PreemptStatus;

	static jni::ref<jdk::internal::vm::Continuation> new_object(jni::ref<jdk::internal::vm::ContinuationScope> scope, jni::ref<java::lang::Runnable> target) { return base_::new_object(scope, target); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<jdk::internal::vm::ContinuationScope> getScope() { return call_method<"getScope", jni::ref<jdk::internal::vm::ContinuationScope>>(); }
	jni::ref<jdk::internal::vm::Continuation> getParent() { return call_method<"getParent", jni::ref<jdk::internal::vm::Continuation>>(); }
	static jni::ref<jdk::internal::vm::Continuation> getCurrentContinuation(jni::ref<jdk::internal::vm::ContinuationScope> scope) { return call_static_method<"getCurrentContinuation", jni::ref<jdk::internal::vm::Continuation>>(scope); }
	jni::ref<java::lang::StackWalker> stackWalker() { return call_method<"stackWalker", jni::ref<java::lang::StackWalker>>(); }
	jni::ref<java::lang::StackWalker> stackWalker(jni::ref<java::util::Set> options) { return call_method<"stackWalker", jni::ref<java::lang::StackWalker>>(options); }
	jni::ref<java::lang::StackWalker> stackWalker(jni::ref<java::util::Set> options, jni::ref<jdk::internal::vm::ContinuationScope> scope) { return call_method<"stackWalker", jni::ref<java::lang::StackWalker>>(options, scope); }
	jni::ref<jni::array<java::lang::StackTraceElement>> getStackTrace() { return call_method<"getStackTrace", jni::ref<jni::array<java::lang::StackTraceElement>>>(); }
	static jni::ref<java::lang::Object> wrapWalk(jni::ref<jdk::internal::vm::Continuation> inner, jni::ref<jdk::internal::vm::ContinuationScope> scope, jni::ref<java::util::function::Supplier> walk) { return call_static_method<"wrapWalk", jni::ref<java::lang::Object>>(inner, scope, walk); }
	void run() { return call_method<"run", void>(); }
	static jboolean yield(jni::ref<jdk::internal::vm::ContinuationScope> scope) { return call_static_method<"yield", jboolean>(scope); }
	jboolean isDone() { return call_method<"isDone", jboolean>(); }
	jboolean isPreempted() { return call_method<"isPreempted", jboolean>(); }
	static void pin() { return call_static_method<"pin", void>(); }
	static void unpin() { return call_static_method<"unpin", void>(); }
	static jboolean isPinned(jni::ref<jdk::internal::vm::ContinuationScope> scope) { return call_static_method<"isPinned", jboolean>(scope); }
	jni::ref<jdk::internal::vm::Continuation_PreemptStatus> tryPreempt(jni::ref<java::lang::Thread> thread) { return call_method<"tryPreempt", jni::ref<jdk::internal::vm::Continuation_PreemptStatus>>(thread); }

protected:

	Continuation(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_VM_CONTINUATION
