// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_PAIR_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_PAIR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util::xml::impl { class Pair; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::xml::impl::Pair>
{
	static constexpr fixed_string class_name = "jdk/internal/util/xml/impl/Pair";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_PAIR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_PAIR)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_PAIR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::xml::impl::Pair : public jni::object_base<"jdk/internal/util/xml/impl/Pair",
	java::lang::Object>
{
public:

	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> value() { return get_field<"value", jni::ref<java::lang::String>>(); }
	void value(jni::ref<java::lang::String> v) { set_field<"value", jni::ref<java::lang::String>>(v); }
	jint num() { return get_field<"num", jint>(); }
	void num(jint v) { set_field<"num", jint>(v); }
	jni::ref<jni::array<jchar>> chars() { return get_field<"chars", jni::ref<jni::array<jchar>>>(); }
	void chars(jni::ref<jni::array<jchar>> v) { set_field<"chars", jni::ref<jni::array<jchar>>>(v); }
	jint id() { return get_field<"id", jint>(); }
	void id(jint v) { set_field<"id", jint>(v); }
	jni::ref<jdk::internal::util::xml::impl::Pair> list() { return get_field<"list", jni::ref<jdk::internal::util::xml::impl::Pair>>(); }
	void list(jni::ref<jdk::internal::util::xml::impl::Pair> v) { set_field<"list", jni::ref<jdk::internal::util::xml::impl::Pair>>(v); }
	jni::ref<jdk::internal::util::xml::impl::Pair> next() { return get_field<"next", jni::ref<jdk::internal::util::xml::impl::Pair>>(); }
	void next(jni::ref<jdk::internal::util::xml::impl::Pair> v) { set_field<"next", jni::ref<jdk::internal::util::xml::impl::Pair>>(v); }

	static jni::ref<jdk::internal::util::xml::impl::Pair> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> qname() { return call_method<"qname", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> local() { return call_method<"local", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> pref() { return call_method<"pref", jni::ref<java::lang::String>>(); }
	jboolean eqpref(jni::ref<jni::array<jchar>> qname) { return call_method<"eqpref", jboolean>(qname); }
	jboolean eqname(jni::ref<jni::array<jchar>> qname) { return call_method<"eqname", jboolean>(qname); }

protected:

	Pair(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_PAIR
