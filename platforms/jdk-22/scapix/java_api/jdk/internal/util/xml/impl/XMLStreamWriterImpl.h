// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/util/xml/XMLStreamWriter.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_XMLSTREAMWRITERIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_XMLSTREAMWRITERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util::xml::impl { class XMLStreamWriterImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::xml::impl::XMLStreamWriterImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/util/xml/impl/XMLStreamWriterImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::util::xml::XMLStreamWriter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_XMLSTREAMWRITERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_XMLSTREAMWRITERIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_XMLSTREAMWRITERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::xml::impl::XMLStreamWriterImpl : public jni::object_base<"jdk/internal/util/xml/impl/XMLStreamWriterImpl",
	java::lang::Object,
	jdk::internal::util::xml::XMLStreamWriter>
{
public:

	static jchar CLOSE_START_TAG() { return get_static_field<"CLOSE_START_TAG", jchar>(); }
	static jchar OPEN_START_TAG() { return get_static_field<"OPEN_START_TAG", jchar>(); }
	static jni::ref<java::lang::String> OPEN_END_TAG() { return get_static_field<"OPEN_END_TAG", jni::ref<java::lang::String>>(); }
	static jchar CLOSE_END_TAG() { return get_static_field<"CLOSE_END_TAG", jchar>(); }
	static jni::ref<java::lang::String> START_CDATA() { return get_static_field<"START_CDATA", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> END_CDATA() { return get_static_field<"END_CDATA", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CLOSE_EMPTY_ELEMENT() { return get_static_field<"CLOSE_EMPTY_ELEMENT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ENCODING_PREFIX() { return get_static_field<"ENCODING_PREFIX", jni::ref<java::lang::String>>(); }
	static jchar SPACE() { return get_static_field<"SPACE", jchar>(); }
	static jchar AMPERSAND() { return get_static_field<"AMPERSAND", jchar>(); }
	static jchar DOUBLEQUOT() { return get_static_field<"DOUBLEQUOT", jchar>(); }
	static jchar SEMICOLON() { return get_static_field<"SEMICOLON", jchar>(); }

	static jni::ref<jdk::internal::util::xml::impl::XMLStreamWriterImpl> new_object(jni::ref<java::io::OutputStream> os) { return base_::new_object(os); }
	static jni::ref<jdk::internal::util::xml::impl::XMLStreamWriterImpl> new_object(jni::ref<java::io::OutputStream> os, jni::ref<java::nio::charset::Charset> cs) { return base_::new_object(os, cs); }
	void writeStartDocument() { return call_method<"writeStartDocument", void>(); }
	void writeStartDocument(jni::ref<java::lang::String> version) { return call_method<"writeStartDocument", void>(version); }
	void writeStartDocument(jni::ref<java::lang::String> encoding, jni::ref<java::lang::String> version) { return call_method<"writeStartDocument", void>(encoding, version); }
	void writeStartDocument(jni::ref<java::lang::String> encoding, jni::ref<java::lang::String> version, jni::ref<java::lang::String> standalone) { return call_method<"writeStartDocument", void>(encoding, version, standalone); }
	void writeDTD(jni::ref<java::lang::String> dtd) { return call_method<"writeDTD", void>(dtd); }
	void writeStartElement(jni::ref<java::lang::String> localName) { return call_method<"writeStartElement", void>(localName); }
	void writeEmptyElement(jni::ref<java::lang::String> localName) { return call_method<"writeEmptyElement", void>(localName); }
	void writeAttribute(jni::ref<java::lang::String> localName, jni::ref<java::lang::String> value) { return call_method<"writeAttribute", void>(localName, value); }
	void writeEndDocument() { return call_method<"writeEndDocument", void>(); }
	void writeEndElement() { return call_method<"writeEndElement", void>(); }
	void writeCData(jni::ref<java::lang::String> cdata) { return call_method<"writeCData", void>(cdata); }
	void writeCharacters(jni::ref<java::lang::String> data) { return call_method<"writeCharacters", void>(data); }
	void writeCharacters(jni::ref<jni::array<jchar>> data, jint start, jint len) { return call_method<"writeCharacters", void>(data, start, len); }
	void close() { return call_method<"close", void>(); }
	void flush() { return call_method<"flush", void>(); }
	void setDoIndent(jboolean doIndent) { return call_method<"setDoIndent", void>(doIndent); }

protected:

	XMLStreamWriterImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_XMLSTREAMWRITERIMPL
