// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/org/xml/sax/Attributes.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_ATTRS_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_ATTRS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util::xml::impl { class Attrs; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::xml::impl::Attrs>
{
	static constexpr fixed_string class_name = "jdk/internal/util/xml/impl/Attrs";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::org::xml::sax::Attributes>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_ATTRS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_ATTRS)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_ATTRS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::xml::impl::Attrs : public jni::object_base<"jdk/internal/util/xml/impl/Attrs",
	java::lang::Object,
	jdk::internal::org::xml::sax::Attributes>
{
public:

	static jni::ref<jdk::internal::util::xml::impl::Attrs> new_object() { return base_::new_object(); }
	void setLength(jchar length) { return call_method<"setLength", void>(length); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<java::lang::String> getURI(jint index) { return call_method<"getURI", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getLocalName(jint index) { return call_method<"getLocalName", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getQName(jint index) { return call_method<"getQName", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getType(jint index) { return call_method<"getType", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> getValue(jint index) { return call_method<"getValue", jni::ref<java::lang::String>>(index); }
	jint getIndex(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName) { return call_method<"getIndex", jint>(uri, localName); }
	jint getIndex(jni::ref<java::lang::String> qName) { return call_method<"getIndex", jint>(qName); }
	jni::ref<java::lang::String> getType(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName) { return call_method<"getType", jni::ref<java::lang::String>>(uri, localName); }
	jni::ref<java::lang::String> getType(jni::ref<java::lang::String> qName) { return call_method<"getType", jni::ref<java::lang::String>>(qName); }
	jni::ref<java::lang::String> getValue(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName) { return call_method<"getValue", jni::ref<java::lang::String>>(uri, localName); }
	jni::ref<java::lang::String> getValue(jni::ref<java::lang::String> qName) { return call_method<"getValue", jni::ref<java::lang::String>>(qName); }
	jboolean isDeclared(jint index) { return call_method<"isDeclared", jboolean>(index); }
	jboolean isDeclared(jni::ref<java::lang::String> qName) { return call_method<"isDeclared", jboolean>(qName); }
	jboolean isDeclared(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName) { return call_method<"isDeclared", jboolean>(uri, localName); }
	jboolean isSpecified(jint index) { return call_method<"isSpecified", jboolean>(index); }
	jboolean isSpecified(jni::ref<java::lang::String> uri, jni::ref<java::lang::String> localName) { return call_method<"isSpecified", jboolean>(uri, localName); }
	jboolean isSpecified(jni::ref<java::lang::String> qName) { return call_method<"isSpecified", jboolean>(qName); }

protected:

	Attrs(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_XML_IMPL_ATTRS
