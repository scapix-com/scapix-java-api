// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Record.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_OSVERSION_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_OSVERSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::util { class OSVersion; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::util::OSVersion>
{
	static constexpr fixed_string class_name = "jdk/internal/util/OSVersion";
	using base_classes = std::tuple<scapix::java_api::java::lang::Record, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_OSVERSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_OSVERSION)
#define SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_OSVERSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::util::OSVersion : public jni::object_base<"jdk/internal/util/OSVersion",
	java::lang::Record,
	java::lang::Comparable>
{
public:

	static jni::ref<jdk::internal::util::OSVersion> new_object(jint major, jint minor) { return base_::new_object(major, minor); }
	static jni::ref<jdk::internal::util::OSVersion> new_object(jint major, jint minor, jint micro) { return base_::new_object(major, minor, micro); }
	static jni::ref<jdk::internal::util::OSVersion> current() { return call_static_method<"current", jni::ref<jdk::internal::util::OSVersion>>(); }
	jint compareTo(jni::ref<jdk::internal::util::OSVersion> other) { return call_method<"compareTo", jint>(other); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<jdk::internal::util::OSVersion> parse(jni::ref<java::lang::String> str) { return call_static_method<"parse", jni::ref<jdk::internal::util::OSVersion>>(str); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint major() { return call_method<"major", jint>(); }
	jint minor() { return call_method<"minor", jint>(); }
	jint micro() { return call_method<"micro", jint>(); }

protected:

	OSVersion(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_UTIL_OSVERSION
