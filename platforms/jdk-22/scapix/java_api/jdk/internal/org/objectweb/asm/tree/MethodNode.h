// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/org/objectweb/asm/MethodVisitor.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_METHODNODE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_METHODNODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::tree { class MethodNode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::tree::MethodNode>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/tree/MethodNode";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::org::objectweb::asm_::MethodVisitor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_METHODNODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_METHODNODE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_METHODNODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/AnnotationVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Attribute.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/ClassVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Handle.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Label.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/TypePath.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/tree/InsnList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::tree::MethodNode : public jni::object_base<"jdk/internal/org/objectweb/asm/tree/MethodNode",
	jdk::internal::org::objectweb::asm_::MethodVisitor>
{
public:

	jint access() { return get_field<"access", jint>(); }
	void access(jint v) { set_field<"access", jint>(v); }
	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> desc() { return get_field<"desc", jni::ref<java::lang::String>>(); }
	void desc(jni::ref<java::lang::String> v) { set_field<"desc", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> signature() { return get_field<"signature", jni::ref<java::lang::String>>(); }
	void signature(jni::ref<java::lang::String> v) { set_field<"signature", jni::ref<java::lang::String>>(v); }
	jni::ref<java::util::List> exceptions() { return get_field<"exceptions", jni::ref<java::util::List>>(); }
	void exceptions(jni::ref<java::util::List> v) { set_field<"exceptions", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> parameters() { return get_field<"parameters", jni::ref<java::util::List>>(); }
	void parameters(jni::ref<java::util::List> v) { set_field<"parameters", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> visibleAnnotations() { return get_field<"visibleAnnotations", jni::ref<java::util::List>>(); }
	void visibleAnnotations(jni::ref<java::util::List> v) { set_field<"visibleAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> invisibleAnnotations() { return get_field<"invisibleAnnotations", jni::ref<java::util::List>>(); }
	void invisibleAnnotations(jni::ref<java::util::List> v) { set_field<"invisibleAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> visibleTypeAnnotations() { return get_field<"visibleTypeAnnotations", jni::ref<java::util::List>>(); }
	void visibleTypeAnnotations(jni::ref<java::util::List> v) { set_field<"visibleTypeAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> invisibleTypeAnnotations() { return get_field<"invisibleTypeAnnotations", jni::ref<java::util::List>>(); }
	void invisibleTypeAnnotations(jni::ref<java::util::List> v) { set_field<"invisibleTypeAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> attrs() { return get_field<"attrs", jni::ref<java::util::List>>(); }
	void attrs(jni::ref<java::util::List> v) { set_field<"attrs", jni::ref<java::util::List>>(v); }
	jni::ref<java::lang::Object> annotationDefault() { return get_field<"annotationDefault", jni::ref<java::lang::Object>>(); }
	void annotationDefault(jni::ref<java::lang::Object> v) { set_field<"annotationDefault", jni::ref<java::lang::Object>>(v); }
	jint visibleAnnotableParameterCount() { return get_field<"visibleAnnotableParameterCount", jint>(); }
	void visibleAnnotableParameterCount(jint v) { set_field<"visibleAnnotableParameterCount", jint>(v); }
	jni::ref<jni::array<java::util::List>> visibleParameterAnnotations() { return get_field<"visibleParameterAnnotations", jni::ref<jni::array<java::util::List>>>(); }
	void visibleParameterAnnotations(jni::ref<jni::array<java::util::List>> v) { set_field<"visibleParameterAnnotations", jni::ref<jni::array<java::util::List>>>(v); }
	jint invisibleAnnotableParameterCount() { return get_field<"invisibleAnnotableParameterCount", jint>(); }
	void invisibleAnnotableParameterCount(jint v) { set_field<"invisibleAnnotableParameterCount", jint>(v); }
	jni::ref<jni::array<java::util::List>> invisibleParameterAnnotations() { return get_field<"invisibleParameterAnnotations", jni::ref<jni::array<java::util::List>>>(); }
	void invisibleParameterAnnotations(jni::ref<jni::array<java::util::List>> v) { set_field<"invisibleParameterAnnotations", jni::ref<jni::array<java::util::List>>>(v); }
	jni::ref<jdk::internal::org::objectweb::asm_::tree::InsnList> instructions() { return get_field<"instructions", jni::ref<jdk::internal::org::objectweb::asm_::tree::InsnList>>(); }
	void instructions(jni::ref<jdk::internal::org::objectweb::asm_::tree::InsnList> v) { set_field<"instructions", jni::ref<jdk::internal::org::objectweb::asm_::tree::InsnList>>(v); }
	jni::ref<java::util::List> tryCatchBlocks() { return get_field<"tryCatchBlocks", jni::ref<java::util::List>>(); }
	void tryCatchBlocks(jni::ref<java::util::List> v) { set_field<"tryCatchBlocks", jni::ref<java::util::List>>(v); }
	jint maxStack() { return get_field<"maxStack", jint>(); }
	void maxStack(jint v) { set_field<"maxStack", jint>(v); }
	jint maxLocals() { return get_field<"maxLocals", jint>(); }
	void maxLocals(jint v) { set_field<"maxLocals", jint>(v); }
	jni::ref<java::util::List> localVariables() { return get_field<"localVariables", jni::ref<java::util::List>>(); }
	void localVariables(jni::ref<java::util::List> v) { set_field<"localVariables", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> visibleLocalVariableAnnotations() { return get_field<"visibleLocalVariableAnnotations", jni::ref<java::util::List>>(); }
	void visibleLocalVariableAnnotations(jni::ref<java::util::List> v) { set_field<"visibleLocalVariableAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> invisibleLocalVariableAnnotations() { return get_field<"invisibleLocalVariableAnnotations", jni::ref<java::util::List>>(); }
	void invisibleLocalVariableAnnotations(jni::ref<java::util::List> v) { set_field<"invisibleLocalVariableAnnotations", jni::ref<java::util::List>>(v); }

	static jni::ref<jdk::internal::org::objectweb::asm_::tree::MethodNode> new_object() { return base_::new_object(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::tree::MethodNode> new_object(jint api) { return base_::new_object(api); }
	static jni::ref<jdk::internal::org::objectweb::asm_::tree::MethodNode> new_object(jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature, jni::ref<jni::array<java::lang::String>> exceptions) { return base_::new_object(access, name, descriptor, signature, exceptions); }
	static jni::ref<jdk::internal::org::objectweb::asm_::tree::MethodNode> new_object(jint api, jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature, jni::ref<jni::array<java::lang::String>> exceptions) { return base_::new_object(api, access, name, descriptor, signature, exceptions); }
	void visitParameter(jni::ref<java::lang::String> name, jint access) { return call_method<"visitParameter", void>(name, access); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitAnnotationDefault() { return call_method<"visitAnnotationDefault", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitAnnotation(jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(descriptor, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitTypeAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitTypeAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, descriptor, visible); }
	void visitAnnotableParameterCount(jint parameterCount, jboolean visible) { return call_method<"visitAnnotableParameterCount", void>(parameterCount, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitParameterAnnotation(jint parameter, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitParameterAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(parameter, descriptor, visible); }
	void visitAttribute(jni::ref<jdk::internal::org::objectweb::asm_::Attribute> attribute) { return call_method<"visitAttribute", void>(attribute); }
	void visitCode() { return call_method<"visitCode", void>(); }
	void visitFrame(jint type, jint numLocal, jni::ref<jni::array<java::lang::Object>> local, jint numStack, jni::ref<jni::array<java::lang::Object>> stack) { return call_method<"visitFrame", void>(type, numLocal, local, numStack, stack); }
	void visitInsn(jint opcode) { return call_method<"visitInsn", void>(opcode); }
	void visitIntInsn(jint opcode, jint operand) { return call_method<"visitIntInsn", void>(opcode, operand); }
	void visitVarInsn(jint opcode, jint varIndex) { return call_method<"visitVarInsn", void>(opcode, varIndex); }
	void visitTypeInsn(jint opcode, jni::ref<java::lang::String> type) { return call_method<"visitTypeInsn", void>(opcode, type); }
	void visitFieldInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor) { return call_method<"visitFieldInsn", void>(opcode, owner, name, descriptor); }
	void visitMethodInsn(jint opcodeAndSource, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jboolean isInterface) { return call_method<"visitMethodInsn", void>(opcodeAndSource, owner, name, descriptor, isInterface); }
	void visitInvokeDynamicInsn(jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<jdk::internal::org::objectweb::asm_::Handle> bootstrapMethodHandle, jni::ref<jni::array<java::lang::Object>> bootstrapMethodArguments) { return call_method<"visitInvokeDynamicInsn", void>(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments); }
	void visitJumpInsn(jint opcode, jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"visitJumpInsn", void>(opcode, label); }
	void visitLabel(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"visitLabel", void>(label); }
	void visitLdcInsn(jni::ref<java::lang::Object> value) { return call_method<"visitLdcInsn", void>(value); }
	void visitIincInsn(jint varIndex, jint increment) { return call_method<"visitIincInsn", void>(varIndex, increment); }
	void visitTableSwitchInsn(jint min, jint max, jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"visitTableSwitchInsn", void>(min, max, dflt, labels); }
	void visitLookupSwitchInsn(jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jint>> keys, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"visitLookupSwitchInsn", void>(dflt, keys, labels); }
	void visitMultiANewArrayInsn(jni::ref<java::lang::String> descriptor, jint numDimensions) { return call_method<"visitMultiANewArrayInsn", void>(descriptor, numDimensions); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitInsnAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitInsnAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, descriptor, visible); }
	void visitTryCatchBlock(jni::ref<jdk::internal::org::objectweb::asm_::Label> start, jni::ref<jdk::internal::org::objectweb::asm_::Label> end, jni::ref<jdk::internal::org::objectweb::asm_::Label> handler, jni::ref<java::lang::String> type) { return call_method<"visitTryCatchBlock", void>(start, end, handler, type); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitTryCatchAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitTryCatchAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, descriptor, visible); }
	void visitLocalVariable(jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature, jni::ref<jdk::internal::org::objectweb::asm_::Label> start, jni::ref<jdk::internal::org::objectweb::asm_::Label> end, jint index) { return call_method<"visitLocalVariable", void>(name, descriptor, signature, start, end, index); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitLocalVariableAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> start, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> end, jni::ref<jni::array<jint>> index, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitLocalVariableAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, start, end, index, descriptor, visible); }
	void visitLineNumber(jint line, jni::ref<jdk::internal::org::objectweb::asm_::Label> start) { return call_method<"visitLineNumber", void>(line, start); }
	void visitMaxs(jint maxStack, jint maxLocals) { return call_method<"visitMaxs", void>(maxStack, maxLocals); }
	void visitEnd() { return call_method<"visitEnd", void>(); }
	void check(jint api) { return call_method<"check", void>(api); }
	void accept(jni::ref<jdk::internal::org::objectweb::asm_::ClassVisitor> classVisitor) { return call_method<"accept", void>(classVisitor); }
	void accept(jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> methodVisitor) { return call_method<"accept", void>(methodVisitor); }

protected:

	MethodNode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_METHODNODE
