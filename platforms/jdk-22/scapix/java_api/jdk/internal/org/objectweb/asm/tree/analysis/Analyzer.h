// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Opcodes.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_ANALYSIS_ANALYZER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_ANALYSIS_ANALYZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::tree::analysis { class Analyzer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::tree::analysis::Analyzer>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/tree/analysis/Analyzer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::jdk::internal::org::objectweb::asm_::Opcodes>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_ANALYSIS_ANALYZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_ANALYSIS_ANALYZER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_ANALYSIS_ANALYZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/tree/MethodNode.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/tree/analysis/Frame.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/tree/analysis/Interpreter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::tree::analysis::Analyzer : public jni::object_base<"jdk/internal/org/objectweb/asm/tree/analysis/Analyzer",
	java::lang::Object,
	jdk::internal::org::objectweb::asm_::Opcodes>
{
public:

	static jni::ref<jdk::internal::org::objectweb::asm_::tree::analysis::Analyzer> new_object(jni::ref<jdk::internal::org::objectweb::asm_::tree::analysis::Interpreter> interpreter) { return base_::new_object(interpreter); }
	jni::ref<jni::array<jdk::internal::org::objectweb::asm_::tree::analysis::Frame>> analyze(jni::ref<java::lang::String> owner, jni::ref<jdk::internal::org::objectweb::asm_::tree::MethodNode> method) { return call_method<"analyze", jni::ref<jni::array<jdk::internal::org::objectweb::asm_::tree::analysis::Frame>>>(owner, method); }
	jni::ref<jni::array<jdk::internal::org::objectweb::asm_::tree::analysis::Frame>> analyzeAndComputeMaxs(jni::ref<java::lang::String> owner, jni::ref<jdk::internal::org::objectweb::asm_::tree::MethodNode> method) { return call_method<"analyzeAndComputeMaxs", jni::ref<jni::array<jdk::internal::org::objectweb::asm_::tree::analysis::Frame>>>(owner, method); }
	jni::ref<jni::array<jdk::internal::org::objectweb::asm_::tree::analysis::Frame>> getFrames() { return call_method<"getFrames", jni::ref<jni::array<jdk::internal::org::objectweb::asm_::tree::analysis::Frame>>>(); }
	jni::ref<java::util::List> getHandlers(jint insnIndex) { return call_method<"getHandlers", jni::ref<java::util::List>>(insnIndex); }

protected:

	Analyzer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_ANALYSIS_ANALYZER
