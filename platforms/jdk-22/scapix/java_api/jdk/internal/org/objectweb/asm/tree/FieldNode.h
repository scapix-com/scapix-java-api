// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/org/objectweb/asm/FieldVisitor.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_FIELDNODE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_FIELDNODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::tree { class FieldNode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::tree::FieldNode>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/tree/FieldNode";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::org::objectweb::asm_::FieldVisitor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_FIELDNODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_FIELDNODE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_FIELDNODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/AnnotationVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Attribute.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/ClassVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/TypePath.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::tree::FieldNode : public jni::object_base<"jdk/internal/org/objectweb/asm/tree/FieldNode",
	jdk::internal::org::objectweb::asm_::FieldVisitor>
{
public:

	jint access() { return get_field<"access", jint>(); }
	void access(jint v) { set_field<"access", jint>(v); }
	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> desc() { return get_field<"desc", jni::ref<java::lang::String>>(); }
	void desc(jni::ref<java::lang::String> v) { set_field<"desc", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> signature() { return get_field<"signature", jni::ref<java::lang::String>>(); }
	void signature(jni::ref<java::lang::String> v) { set_field<"signature", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::Object> value() { return get_field<"value", jni::ref<java::lang::Object>>(); }
	void value(jni::ref<java::lang::Object> v) { set_field<"value", jni::ref<java::lang::Object>>(v); }
	jni::ref<java::util::List> visibleAnnotations() { return get_field<"visibleAnnotations", jni::ref<java::util::List>>(); }
	void visibleAnnotations(jni::ref<java::util::List> v) { set_field<"visibleAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> invisibleAnnotations() { return get_field<"invisibleAnnotations", jni::ref<java::util::List>>(); }
	void invisibleAnnotations(jni::ref<java::util::List> v) { set_field<"invisibleAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> visibleTypeAnnotations() { return get_field<"visibleTypeAnnotations", jni::ref<java::util::List>>(); }
	void visibleTypeAnnotations(jni::ref<java::util::List> v) { set_field<"visibleTypeAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> invisibleTypeAnnotations() { return get_field<"invisibleTypeAnnotations", jni::ref<java::util::List>>(); }
	void invisibleTypeAnnotations(jni::ref<java::util::List> v) { set_field<"invisibleTypeAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> attrs() { return get_field<"attrs", jni::ref<java::util::List>>(); }
	void attrs(jni::ref<java::util::List> v) { set_field<"attrs", jni::ref<java::util::List>>(v); }

	static jni::ref<jdk::internal::org::objectweb::asm_::tree::FieldNode> new_object(jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature, jni::ref<java::lang::Object> value) { return base_::new_object(access, name, descriptor, signature, value); }
	static jni::ref<jdk::internal::org::objectweb::asm_::tree::FieldNode> new_object(jint api, jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature, jni::ref<java::lang::Object> value) { return base_::new_object(api, access, name, descriptor, signature, value); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitAnnotation(jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(descriptor, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitTypeAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitTypeAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, descriptor, visible); }
	void visitAttribute(jni::ref<jdk::internal::org::objectweb::asm_::Attribute> attribute) { return call_method<"visitAttribute", void>(attribute); }
	void visitEnd() { return call_method<"visitEnd", void>(); }
	void check(jint api) { return call_method<"check", void>(api); }
	void accept(jni::ref<jdk::internal::org::objectweb::asm_::ClassVisitor> classVisitor) { return call_method<"accept", void>(classVisitor); }

protected:

	FieldNode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_FIELDNODE
