// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/module/ModuleReader.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATCHER_PATCHEDMODULEREADER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATCHER_PATCHEDMODULEREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::module { class ModulePatcher_PatchedModuleReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::module::ModulePatcher_PatchedModuleReader>
{
	static constexpr fixed_string class_name = "jdk/internal/module/ModulePatcher$PatchedModuleReader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::module::ModuleReader>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATCHER_PATCHEDMODULEREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATCHER_PATCHEDMODULEREADER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATCHER_PATCHEDMODULEREADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#include <scapix/java_api/jdk/internal/loader/Resource.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::module::ModulePatcher_PatchedModuleReader : public jni::object_base<"jdk/internal/module/ModulePatcher$PatchedModuleReader",
	java::lang::Object,
	java::lang::module::ModuleReader>
{
public:

	jni::ref<jdk::internal::loader::Resource> findResource(jni::ref<java::lang::String> name) { return call_method<"findResource", jni::ref<jdk::internal::loader::Resource>>(name); }
	jni::ref<java::util::Optional> find(jni::ref<java::lang::String> name) { return call_method<"find", jni::ref<java::util::Optional>>(name); }
	jni::ref<java::util::Optional> open(jni::ref<java::lang::String> name) { return call_method<"open", jni::ref<java::util::Optional>>(name); }
	jni::ref<java::util::Optional> read(jni::ref<java::lang::String> name) { return call_method<"read", jni::ref<java::util::Optional>>(name); }
	void release(jni::ref<java::nio::ByteBuffer> bb) { return call_method<"release", void>(bb); }
	jni::ref<java::util::stream::Stream> list() { return call_method<"list", jni::ref<java::util::stream::Stream>>(); }
	void close() { return call_method<"close", void>(); }

protected:

	ModulePatcher_PatchedModuleReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATCHER_PATCHEDMODULEREADER
