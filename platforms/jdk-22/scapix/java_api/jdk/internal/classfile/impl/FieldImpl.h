// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractElement.h>
#include <scapix/java_api/java/lang/classfile/FieldModel.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_FIELDIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_FIELDIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class FieldImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::FieldImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/FieldImpl";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractElement, scapix::java_api::java::lang::classfile::FieldModel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_FIELDIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_FIELDIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_FIELDIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/AccessFlags.h>
#include <scapix/java_api/java/lang/classfile/BufWriter.h>
#include <scapix/java_api/java/lang/classfile/ClassReader.h>
#include <scapix/java_api/java/lang/classfile/constantpool/Utf8Entry.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/jdk/internal/classfile/impl/DirectClassBuilder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::FieldImpl : public jni::object_base<"jdk/internal/classfile/impl/FieldImpl",
	jdk::internal::classfile::impl::AbstractElement,
	java::lang::classfile::FieldModel>
{
public:

	static jni::ref<jdk::internal::classfile::impl::FieldImpl> new_object(jni::ref<java::lang::classfile::ClassReader> reader, jint startPos, jint endPos, jint attributesPos) { return base_::new_object(reader, startPos, endPos, attributesPos); }
	jni::ref<java::lang::classfile::AccessFlags> flags() { return call_method<"flags", jni::ref<java::lang::classfile::AccessFlags>>(); }
	jni::ref<java::util::Optional> parent() { return call_method<"parent", jni::ref<java::util::Optional>>(); }
	jni::ref<java::lang::classfile::constantpool::Utf8Entry> fieldName() { return call_method<"fieldName", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<java::lang::classfile::constantpool::Utf8Entry> fieldType() { return call_method<"fieldType", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<java::util::List> attributes() { return call_method<"attributes", jni::ref<java::util::List>>(); }
	void writeTo(jni::ref<java::lang::classfile::BufWriter> buf) { return call_method<"writeTo", void>(buf); }
	void writeTo(jni::ref<jdk::internal::classfile::impl::DirectClassBuilder> builder) { return call_method<"writeTo", void>(builder); }
	void forEachElement(jni::ref<java::util::function::Consumer> consumer) { return call_method<"forEachElement", void>(consumer); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	FieldImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_FIELDIMPL
