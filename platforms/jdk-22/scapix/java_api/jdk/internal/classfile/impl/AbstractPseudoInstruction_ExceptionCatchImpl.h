// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractPseudoInstruction.h>
#include <scapix/java_api/java/lang/classfile/instruction/ExceptionCatch.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_EXCEPTIONCATCHIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_EXCEPTIONCATCHIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class AbstractPseudoInstruction_ExceptionCatchImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::AbstractPseudoInstruction_ExceptionCatchImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/AbstractPseudoInstruction$ExceptionCatchImpl";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractPseudoInstruction, scapix::java_api::java::lang::classfile::instruction::ExceptionCatch>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_EXCEPTIONCATCHIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_EXCEPTIONCATCHIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_EXCEPTIONCATCHIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/Label.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ClassEntry.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/jdk/internal/classfile/impl/DirectCodeBuilder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::AbstractPseudoInstruction_ExceptionCatchImpl : public jni::object_base<"jdk/internal/classfile/impl/AbstractPseudoInstruction$ExceptionCatchImpl",
	jdk::internal::classfile::impl::AbstractPseudoInstruction,
	java::lang::classfile::instruction::ExceptionCatch>
{
public:

	jni::ref<java::lang::classfile::constantpool::ClassEntry> catchTypeEntry() { return get_field<"catchTypeEntry", jni::ref<java::lang::classfile::constantpool::ClassEntry>>(); }
	jni::ref<java::lang::classfile::Label> handler_() { return get_field<"handler", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::lang::classfile::Label> tryStart_() { return get_field<"tryStart", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::lang::classfile::Label> tryEnd_() { return get_field<"tryEnd", jni::ref<java::lang::classfile::Label>>(); }

	static jni::ref<jdk::internal::classfile::impl::AbstractPseudoInstruction_ExceptionCatchImpl> new_object(jni::ref<java::lang::classfile::Label> handler, jni::ref<java::lang::classfile::Label> tryStart, jni::ref<java::lang::classfile::Label> tryEnd, jni::ref<java::lang::classfile::constantpool::ClassEntry> catchTypeEntry) { return base_::new_object(handler, tryStart, tryEnd, catchTypeEntry); }
	static jni::ref<jdk::internal::classfile::impl::AbstractPseudoInstruction_ExceptionCatchImpl> new_object(jni::ref<java::lang::classfile::Label> handler, jni::ref<java::lang::classfile::Label> tryStart, jni::ref<java::lang::classfile::Label> tryEnd, jni::ref<java::util::Optional> catchTypeEntry) { return base_::new_object(handler, tryStart, tryEnd, catchTypeEntry); }
	jni::ref<java::lang::classfile::Label> tryStart() { return call_method<"tryStart", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::lang::classfile::Label> handler() { return call_method<"handler", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::lang::classfile::Label> tryEnd() { return call_method<"tryEnd", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::util::Optional> catchType() { return call_method<"catchType", jni::ref<java::util::Optional>>(); }
	void writeTo(jni::ref<jdk::internal::classfile::impl::DirectCodeBuilder> writer) { return call_method<"writeTo", void>(writer); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AbstractPseudoInstruction_ExceptionCatchImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_EXCEPTIONCATCHIMPL
