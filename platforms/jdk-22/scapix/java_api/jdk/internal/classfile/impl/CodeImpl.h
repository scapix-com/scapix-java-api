// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/BoundAttribute_BoundCodeAttribute.h>
#include <scapix/java_api/java/lang/classfile/CodeModel.h>
#include <scapix/java_api/jdk/internal/classfile/impl/LabelContext.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODEIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class CodeImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::CodeImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/CodeImpl";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::BoundAttribute_BoundCodeAttribute, scapix::java_api::java::lang::classfile::CodeModel, scapix::java_api::jdk::internal::classfile::impl::LabelContext>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODEIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/AttributeMapper.h>
#include <scapix/java_api/java/lang/classfile/AttributedElement.h>
#include <scapix/java_api/java/lang/classfile/BufWriter.h>
#include <scapix/java_api/java/lang/classfile/ClassReader.h>
#include <scapix/java_api/java/lang/classfile/Label.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/jdk/internal/classfile/impl/CodeImpl_ExceptionHandlerAction.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::CodeImpl : public jni::object_base<"jdk/internal/classfile/impl/CodeImpl",
	jdk::internal::classfile::impl::BoundAttribute_BoundCodeAttribute,
	java::lang::classfile::CodeModel,
	jdk::internal::classfile::impl::LabelContext>
{
public:

	using ExceptionHandlerAction = CodeImpl_ExceptionHandlerAction;

	static jni::ref<jdk::internal::classfile::impl::CodeImpl> new_object(jni::ref<java::lang::classfile::AttributedElement> enclosing, jni::ref<java::lang::classfile::ClassReader> reader, jni::ref<java::lang::classfile::AttributeMapper> mapper, jint payloadStart) { return base_::new_object(enclosing, reader, mapper, payloadStart); }
	jni::ref<java::lang::classfile::Label> newLabel() { return call_method<"newLabel", jni::ref<java::lang::classfile::Label>>(); }
	void setLabelTarget(jni::ref<java::lang::classfile::Label> label, jint bci) { return call_method<"setLabelTarget", void>(label, bci); }
	jni::ref<java::lang::classfile::Label> getLabel(jint bci) { return call_method<"getLabel", jni::ref<java::lang::classfile::Label>>(bci); }
	jint labelToBci(jni::ref<java::lang::classfile::Label> label) { return call_method<"labelToBci", jint>(label); }
	jni::ref<java::util::List> attributes() { return call_method<"attributes", jni::ref<java::util::List>>(); }
	void writeTo(jni::ref<java::lang::classfile::BufWriter> buf) { return call_method<"writeTo", void>(buf); }
	jni::ref<java::util::Optional> parent() { return call_method<"parent", jni::ref<java::util::Optional>>(); }
	void forEachElement(jni::ref<java::util::function::Consumer> consumer) { return call_method<"forEachElement", void>(consumer); }
	jni::ref<java::util::List> exceptionHandlers() { return call_method<"exceptionHandlers", jni::ref<java::util::List>>(); }
	jboolean compareCodeBytes(jni::ref<java::lang::classfile::BufWriter> buf, jint offset, jint len) { return call_method<"compareCodeBytes", jboolean>(buf, offset, len); }
	void iterateExceptionHandlers(jni::ref<jdk::internal::classfile::impl::CodeImpl_ExceptionHandlerAction> a) { return call_method<"iterateExceptionHandlers", void>(a); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	CodeImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CODEIMPL
