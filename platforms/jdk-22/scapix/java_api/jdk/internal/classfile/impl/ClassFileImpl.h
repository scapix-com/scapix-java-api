// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Record.h>
#include <scapix/java_api/java/lang/classfile/ClassFile.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSFILEIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSFILEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class ClassFileImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::ClassFileImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/ClassFileImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Record, scapix::java_api::java::lang::classfile::ClassFile>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSFILEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSFILEIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSFILEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_AttributeMapperOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_AttributesProcessingOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_ClassHierarchyResolverOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_ConstantPoolSharingOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_DeadCodeOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_DeadLabelsOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_DebugElementsOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_LineNumbersOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_Option.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_ShortJumpsOption.h>
#include <scapix/java_api/java/lang/classfile/ClassFile_StackMapsOption.h>
#include <scapix/java_api/java/lang/classfile/ClassModel.h>
#include <scapix/java_api/java/lang/classfile/ClassTransform.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ClassEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ConstantPoolBuilder.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/jdk/internal/classfile/impl/ClassFileImpl_ClassHierarchyResolverOptionImpl.h>
#include <scapix/java_api/jdk/internal/classfile/impl/ClassFileImpl_AttributeMapperOptionImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::ClassFileImpl : public jni::object_base<"jdk/internal/classfile/impl/ClassFileImpl",
	java::lang::Record,
	java::lang::classfile::ClassFile>
{
public:

	using ClassHierarchyResolverOptionImpl = ClassFileImpl_ClassHierarchyResolverOptionImpl;
	using AttributeMapperOptionImpl = ClassFileImpl_AttributeMapperOptionImpl;

	static jni::ref<jdk::internal::classfile::impl::ClassFileImpl> DEFAULT_CONTEXT() { return get_static_field<"DEFAULT_CONTEXT", jni::ref<jdk::internal::classfile::impl::ClassFileImpl>>(); }

	static jni::ref<jdk::internal::classfile::impl::ClassFileImpl> new_object(jni::ref<java::lang::classfile::ClassFile_StackMapsOption> stackMapsOption, jni::ref<java::lang::classfile::ClassFile_DebugElementsOption> debugElementsOption, jni::ref<java::lang::classfile::ClassFile_LineNumbersOption> lineNumbersOption, jni::ref<java::lang::classfile::ClassFile_AttributesProcessingOption> attributesProcessingOption, jni::ref<java::lang::classfile::ClassFile_ConstantPoolSharingOption> constantPoolSharingOption, jni::ref<java::lang::classfile::ClassFile_ShortJumpsOption> shortJumpsOption, jni::ref<java::lang::classfile::ClassFile_DeadCodeOption> deadCodeOption, jni::ref<java::lang::classfile::ClassFile_DeadLabelsOption> deadLabelsOption, jni::ref<java::lang::classfile::ClassFile_ClassHierarchyResolverOption> classHierarchyResolverOption, jni::ref<java::lang::classfile::ClassFile_AttributeMapperOption> attributeMapperOption) { return base_::new_object(stackMapsOption, debugElementsOption, lineNumbersOption, attributesProcessingOption, constantPoolSharingOption, shortJumpsOption, deadCodeOption, deadLabelsOption, classHierarchyResolverOption, attributeMapperOption); }
	jni::ref<jdk::internal::classfile::impl::ClassFileImpl> withOptions(jni::ref<jni::array<java::lang::classfile::ClassFile_Option>> options) { return call_method<"withOptions", jni::ref<jdk::internal::classfile::impl::ClassFileImpl>>(options); }
	jni::ref<java::lang::classfile::ClassModel> parse(jni::ref<jni::array<jbyte>> bytes) { return call_method<"parse", jni::ref<java::lang::classfile::ClassModel>>(bytes); }
	jni::ref<jni::array<jbyte>> build(jni::ref<java::lang::classfile::constantpool::ClassEntry> thisClassEntry, jni::ref<java::lang::classfile::constantpool::ConstantPoolBuilder> constantPool, jni::ref<java::util::function::Consumer> handler) { return call_method<"build", jni::ref<jni::array<jbyte>>>(thisClassEntry, constantPool, handler); }
	jni::ref<jni::array<jbyte>> transform(jni::ref<java::lang::classfile::ClassModel> model, jni::ref<java::lang::classfile::constantpool::ClassEntry> newClassName, jni::ref<java::lang::classfile::ClassTransform> transform) { return call_method<"transform", jni::ref<jni::array<jbyte>>>(model, newClassName, transform); }
	jni::ref<java::util::List> verify(jni::ref<java::lang::classfile::ClassModel> model) { return call_method<"verify", jni::ref<java::util::List>>(model); }
	jni::ref<java::util::List> verify(jni::ref<jni::array<jbyte>> bytes) { return call_method<"verify", jni::ref<java::util::List>>(bytes); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jni::ref<java::lang::classfile::ClassFile_StackMapsOption> stackMapsOption() { return call_method<"stackMapsOption", jni::ref<java::lang::classfile::ClassFile_StackMapsOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_DebugElementsOption> debugElementsOption() { return call_method<"debugElementsOption", jni::ref<java::lang::classfile::ClassFile_DebugElementsOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_LineNumbersOption> lineNumbersOption() { return call_method<"lineNumbersOption", jni::ref<java::lang::classfile::ClassFile_LineNumbersOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_AttributesProcessingOption> attributesProcessingOption() { return call_method<"attributesProcessingOption", jni::ref<java::lang::classfile::ClassFile_AttributesProcessingOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_ConstantPoolSharingOption> constantPoolSharingOption() { return call_method<"constantPoolSharingOption", jni::ref<java::lang::classfile::ClassFile_ConstantPoolSharingOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_ShortJumpsOption> shortJumpsOption() { return call_method<"shortJumpsOption", jni::ref<java::lang::classfile::ClassFile_ShortJumpsOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_DeadCodeOption> deadCodeOption() { return call_method<"deadCodeOption", jni::ref<java::lang::classfile::ClassFile_DeadCodeOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_DeadLabelsOption> deadLabelsOption() { return call_method<"deadLabelsOption", jni::ref<java::lang::classfile::ClassFile_DeadLabelsOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_ClassHierarchyResolverOption> classHierarchyResolverOption() { return call_method<"classHierarchyResolverOption", jni::ref<java::lang::classfile::ClassFile_ClassHierarchyResolverOption>>(); }
	jni::ref<java::lang::classfile::ClassFile_AttributeMapperOption> attributeMapperOption() { return call_method<"attributeMapperOption", jni::ref<java::lang::classfile::ClassFile_AttributeMapperOption>>(); }

protected:

	ClassFileImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSFILEIMPL
