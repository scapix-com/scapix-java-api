// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractElement.h>
#include <scapix/java_api/java/lang/classfile/ClassModel.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class ClassImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::ClassImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/ClassImpl";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractElement, scapix::java_api::java::lang::classfile::ClassModel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/AccessFlags.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ClassEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ConstantPool.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/jdk/internal/classfile/impl/ClassFileImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::ClassImpl : public jni::object_base<"jdk/internal/classfile/impl/ClassImpl",
	jdk::internal::classfile::impl::AbstractElement,
	java::lang::classfile::ClassModel>
{
public:

	static jni::ref<jdk::internal::classfile::impl::ClassImpl> new_object(jni::ref<jni::array<jbyte>> cfbytes, jni::ref<jdk::internal::classfile::impl::ClassFileImpl> context) { return base_::new_object(cfbytes, context); }
	jint classfileLength() { return call_method<"classfileLength", jint>(); }
	jni::ref<java::lang::classfile::AccessFlags> flags() { return call_method<"flags", jni::ref<java::lang::classfile::AccessFlags>>(); }
	jint majorVersion() { return call_method<"majorVersion", jint>(); }
	jint minorVersion() { return call_method<"minorVersion", jint>(); }
	jni::ref<java::lang::classfile::constantpool::ConstantPool> constantPool() { return call_method<"constantPool", jni::ref<java::lang::classfile::constantpool::ConstantPool>>(); }
	jni::ref<java::lang::classfile::constantpool::ClassEntry> thisClass() { return call_method<"thisClass", jni::ref<java::lang::classfile::constantpool::ClassEntry>>(); }
	jni::ref<java::util::Optional> superclass() { return call_method<"superclass", jni::ref<java::util::Optional>>(); }
	jni::ref<java::util::List> interfaces() { return call_method<"interfaces", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> attributes() { return call_method<"attributes", jni::ref<java::util::List>>(); }
	void forEachElement(jni::ref<java::util::function::Consumer> consumer) { return call_method<"forEachElement", void>(consumer); }
	jni::ref<java::util::List> fields() { return call_method<"fields", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> methods() { return call_method<"methods", jni::ref<java::util::List>>(); }
	jboolean isModuleInfo() { return call_method<"isModuleInfo", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ClassImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_CLASSIMPL
