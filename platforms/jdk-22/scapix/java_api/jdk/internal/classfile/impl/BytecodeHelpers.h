// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BYTECODEHELPERS_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BYTECODEHELPERS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class BytecodeHelpers; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::BytecodeHelpers>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/BytecodeHelpers";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BYTECODEHELPERS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BYTECODEHELPERS)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BYTECODEHELPERS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/classfile/Opcode.h>
#include <scapix/java_api/java/lang/classfile/TypeKind.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ConstantPoolBuilder.h>
#include <scapix/java_api/java/lang/classfile/constantpool/LoadableConstantEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/MethodHandleEntry.h>
#include <scapix/java_api/java/lang/constant/ConstantDesc.h>
#include <scapix/java_api/java/lang/constant/DirectMethodHandleDesc.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::BytecodeHelpers : public jni::object_base<"jdk/internal/classfile/impl/BytecodeHelpers",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::classfile::Opcode> loadOpcode(jni::ref<java::lang::classfile::TypeKind> tk, jint slot) { return call_static_method<"loadOpcode", jni::ref<java::lang::classfile::Opcode>>(tk, slot); }
	static jni::ref<java::lang::classfile::Opcode> storeOpcode(jni::ref<java::lang::classfile::TypeKind> tk, jint slot) { return call_static_method<"storeOpcode", jni::ref<java::lang::classfile::Opcode>>(tk, slot); }
	static jni::ref<java::lang::classfile::Opcode> returnOpcode(jni::ref<java::lang::classfile::TypeKind> tk) { return call_static_method<"returnOpcode", jni::ref<java::lang::classfile::Opcode>>(tk); }
	static jni::ref<java::lang::classfile::Opcode> arrayLoadOpcode(jni::ref<java::lang::classfile::TypeKind> tk) { return call_static_method<"arrayLoadOpcode", jni::ref<java::lang::classfile::Opcode>>(tk); }
	static jni::ref<java::lang::classfile::Opcode> arrayStoreOpcode(jni::ref<java::lang::classfile::TypeKind> tk) { return call_static_method<"arrayStoreOpcode", jni::ref<java::lang::classfile::Opcode>>(tk); }
	static jni::ref<java::lang::classfile::Opcode> reverseBranchOpcode(jni::ref<java::lang::classfile::Opcode> op) { return call_static_method<"reverseBranchOpcode", jni::ref<java::lang::classfile::Opcode>>(op); }
	static jni::ref<java::lang::classfile::Opcode> convertOpcode(jni::ref<java::lang::classfile::TypeKind> from, jni::ref<java::lang::classfile::TypeKind> to) { return call_static_method<"convertOpcode", jni::ref<java::lang::classfile::Opcode>>(from, to); }
	static jni::ref<java::lang::classfile::constantpool::MethodHandleEntry> handleDescToHandleInfo(jni::ref<java::lang::classfile::constantpool::ConstantPoolBuilder> constantPool, jni::ref<java::lang::constant::DirectMethodHandleDesc> bootstrapMethod) { return call_static_method<"handleDescToHandleInfo", jni::ref<java::lang::classfile::constantpool::MethodHandleEntry>>(constantPool, bootstrapMethod); }
	static void validateValue(jni::ref<java::lang::classfile::Opcode> opcode, jni::ref<java::lang::constant::ConstantDesc> v) { return call_static_method<"validateValue", void>(opcode, v); }
	static jni::ref<java::lang::classfile::constantpool::LoadableConstantEntry> constantEntry(jni::ref<java::lang::classfile::constantpool::ConstantPoolBuilder> constantPool, jni::ref<java::lang::constant::ConstantDesc> constantValue) { return call_static_method<"constantEntry", jni::ref<java::lang::classfile::constantpool::LoadableConstantEntry>>(constantPool, constantValue); }

protected:

	BytecodeHelpers(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_BYTECODEHELPERS
