// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Record.h>
#include <scapix/java_api/java/lang/classfile/attribute/StackMapFrameInfo.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_STACKMAPDECODER_STACKMAPFRAMEIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_STACKMAPDECODER_STACKMAPFRAMEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class StackMapDecoder_StackMapFrameImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::StackMapDecoder_StackMapFrameImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/StackMapDecoder$StackMapFrameImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Record, scapix::java_api::java::lang::classfile::attribute::StackMapFrameInfo>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_STACKMAPDECODER_STACKMAPFRAMEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_STACKMAPDECODER_STACKMAPFRAMEIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_STACKMAPDECODER_STACKMAPFRAMEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/Label.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::StackMapDecoder_StackMapFrameImpl : public jni::object_base<"jdk/internal/classfile/impl/StackMapDecoder$StackMapFrameImpl",
	java::lang::Record,
	java::lang::classfile::attribute::StackMapFrameInfo>
{
public:

	static jni::ref<jdk::internal::classfile::impl::StackMapDecoder_StackMapFrameImpl> new_object(jint frameType, jni::ref<java::lang::classfile::Label> target, jni::ref<java::util::List> locals, jni::ref<java::util::List> stack) { return base_::new_object(frameType, target, locals, stack); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint frameType() { return call_method<"frameType", jint>(); }
	jni::ref<java::lang::classfile::Label> target() { return call_method<"target", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::util::List> locals() { return call_method<"locals", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> stack() { return call_method<"stack", jni::ref<java::util::List>>(); }

protected:

	StackMapDecoder_StackMapFrameImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_STACKMAPDECODER_STACKMAPFRAMEIMPL
