// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/classfile/MethodTransform.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_TRANSFORMIMPL_UNRESOLVEDMETHODTRANSFORM_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_TRANSFORMIMPL_UNRESOLVEDMETHODTRANSFORM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class TransformImpl_UnresolvedMethodTransform; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::TransformImpl_UnresolvedMethodTransform>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/TransformImpl$UnresolvedMethodTransform";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::classfile::MethodTransform>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_TRANSFORMIMPL_UNRESOLVEDMETHODTRANSFORM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_TRANSFORMIMPL_UNRESOLVEDMETHODTRANSFORM)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_TRANSFORMIMPL_UNRESOLVEDMETHODTRANSFORM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/classfile/MethodBuilder.h>
#include <scapix/java_api/java/lang/classfile/MethodElement.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class jdk::internal::classfile::impl::TransformImpl_UnresolvedMethodTransform : public jni::object_base<"jdk/internal/classfile/impl/TransformImpl$UnresolvedMethodTransform",
	java::lang::Object,
	java::lang::classfile::MethodTransform>
{
public:

	void accept(jni::ref<java::lang::classfile::MethodBuilder> builder, jni::ref<java::lang::classfile::MethodElement> element) { return call_method<"accept", void>(builder, element); }
	void atEnd(jni::ref<java::lang::classfile::MethodBuilder> builder) { return call_method<"atEnd", void>(builder); }
	void atStart(jni::ref<java::lang::classfile::MethodBuilder> builder) { return call_method<"atStart", void>(builder); }

protected:

	TransformImpl_UnresolvedMethodTransform(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_TRANSFORMIMPL_UNRESOLVEDMETHODTRANSFORM
