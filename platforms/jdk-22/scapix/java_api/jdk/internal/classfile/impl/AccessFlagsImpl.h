// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractElement.h>
#include <scapix/java_api/java/lang/classfile/AccessFlags.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ACCESSFLAGSIMPL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ACCESSFLAGSIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class AccessFlagsImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::AccessFlagsImpl>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/AccessFlagsImpl";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractElement, scapix::java_api::java::lang::classfile::AccessFlags>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ACCESSFLAGSIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ACCESSFLAGSIMPL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ACCESSFLAGSIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/AccessFlag.h>
#include <scapix/java_api/java/lang/reflect/AccessFlag_Location.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/jdk/internal/classfile/impl/DirectClassBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/impl/DirectFieldBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/impl/DirectMethodBuilder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::AccessFlagsImpl : public jni::object_base<"jdk/internal/classfile/impl/AccessFlagsImpl",
	jdk::internal::classfile::impl::AbstractElement,
	java::lang::classfile::AccessFlags>
{
public:

	static jni::ref<jdk::internal::classfile::impl::AccessFlagsImpl> new_object(jni::ref<java::lang::reflect::AccessFlag_Location> location, jni::ref<jni::array<java::lang::reflect::AccessFlag>> flags) { return base_::new_object(location, flags); }
	static jni::ref<jdk::internal::classfile::impl::AccessFlagsImpl> new_object(jni::ref<java::lang::reflect::AccessFlag_Location> location, jint mask) { return base_::new_object(location, mask); }
	jint flagsMask() { return call_method<"flagsMask", jint>(); }
	jni::ref<java::util::Set> flags() { return call_method<"flags", jni::ref<java::util::Set>>(); }
	void writeTo(jni::ref<jdk::internal::classfile::impl::DirectClassBuilder> builder) { return call_method<"writeTo", void>(builder); }
	void writeTo(jni::ref<jdk::internal::classfile::impl::DirectMethodBuilder> builder) { return call_method<"writeTo", void>(builder); }
	void writeTo(jni::ref<jdk::internal::classfile::impl::DirectFieldBuilder> builder) { return call_method<"writeTo", void>(builder); }
	jni::ref<java::lang::reflect::AccessFlag_Location> location() { return call_method<"location", jni::ref<java::lang::reflect::AccessFlag_Location>>(); }
	jboolean has(jni::ref<java::lang::reflect::AccessFlag> flag) { return call_method<"has", jboolean>(flag); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AccessFlagsImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ACCESSFLAGSIMPL
