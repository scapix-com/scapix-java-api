// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractDirectBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/impl/TerminalCodeBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/impl/LabelContext.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_DIRECTCODEBUILDER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_DIRECTCODEBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class DirectCodeBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::DirectCodeBuilder>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/DirectCodeBuilder";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractDirectBuilder, scapix::java_api::jdk::internal::classfile::impl::TerminalCodeBuilder, scapix::java_api::jdk::internal::classfile::impl::LabelContext>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_DIRECTCODEBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_DIRECTCODEBUILDER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_DIRECTCODEBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/Attribute.h>
#include <scapix/java_api/java/lang/classfile/CodeBuilder.h>
#include <scapix/java_api/java/lang/classfile/CodeElement.h>
#include <scapix/java_api/java/lang/classfile/CodeModel.h>
#include <scapix/java_api/java/lang/classfile/Label.h>
#include <scapix/java_api/java/lang/classfile/Opcode.h>
#include <scapix/java_api/java/lang/classfile/TypeKind.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ClassEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/FieldRefEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/InterfaceMethodRefEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/InvokeDynamicEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/LoadableConstantEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/MemberRefEntry.h>
#include <scapix/java_api/java/lang/classfile/instruction/CharacterRange.h>
#include <scapix/java_api/java/lang/classfile/instruction/ExceptionCatch.h>
#include <scapix/java_api/java/lang/classfile/instruction/LocalVariable.h>
#include <scapix/java_api/java/lang/classfile/instruction/LocalVariableType.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/jdk/internal/classfile/impl/ClassFileImpl.h>
#include <scapix/java_api/jdk/internal/classfile/impl/MethodInfo.h>
#include <scapix/java_api/jdk/internal/classfile/impl/SplitConstantPool.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::DirectCodeBuilder : public jni::object_base<"jdk/internal/classfile/impl/DirectCodeBuilder",
	jdk::internal::classfile::impl::AbstractDirectBuilder,
	jdk::internal::classfile::impl::TerminalCodeBuilder,
	jdk::internal::classfile::impl::LabelContext>
{
public:

	static jni::ref<java::lang::classfile::Attribute> build(jni::ref<jdk::internal::classfile::impl::MethodInfo> methodInfo, jni::ref<java::util::function::Consumer> handler, jni::ref<jdk::internal::classfile::impl::SplitConstantPool> constantPool, jni::ref<jdk::internal::classfile::impl::ClassFileImpl> context, jni::ref<java::lang::classfile::CodeModel> original) { return call_static_method<"build", jni::ref<java::lang::classfile::Attribute>>(methodInfo, handler, constantPool, context, original); }
	jni::ref<java::lang::classfile::CodeBuilder> with(jni::ref<java::lang::classfile::CodeElement> element) { return call_method<"with", jni::ref<java::lang::classfile::CodeBuilder>>(element); }
	jni::ref<java::lang::classfile::Label> newLabel() { return call_method<"newLabel", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::lang::classfile::Label> startLabel() { return call_method<"startLabel", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::lang::classfile::Label> endLabel() { return call_method<"endLabel", jni::ref<java::lang::classfile::Label>>(); }
	jint receiverSlot() { return call_method<"receiverSlot", jint>(); }
	jint parameterSlot(jint paramNo) { return call_method<"parameterSlot", jint>(paramNo); }
	jint curTopLocal() { return call_method<"curTopLocal", jint>(); }
	jint allocateLocal(jni::ref<java::lang::classfile::TypeKind> typeKind) { return call_method<"allocateLocal", jint>(typeKind); }
	jint curPc() { return call_method<"curPc", jint>(); }
	jni::ref<jdk::internal::classfile::impl::MethodInfo> methodInfo() { return call_method<"methodInfo", jni::ref<jdk::internal::classfile::impl::MethodInfo>>(); }
	void writeBytecode(jni::ref<java::lang::classfile::Opcode> opcode) { return call_method<"writeBytecode", void>(opcode); }
	void writeLocalVar(jni::ref<java::lang::classfile::Opcode> opcode, jint localVar) { return call_method<"writeLocalVar", void>(opcode, localVar); }
	void writeIncrement(jint slot, jint val) { return call_method<"writeIncrement", void>(slot, val); }
	void writeBranch(jni::ref<java::lang::classfile::Opcode> op, jni::ref<java::lang::classfile::Label> target) { return call_method<"writeBranch", void>(op, target); }
	void writeLookupSwitch(jni::ref<java::lang::classfile::Label> defaultTarget, jni::ref<java::util::List> cases) { return call_method<"writeLookupSwitch", void>(defaultTarget, cases); }
	void writeTableSwitch(jint low, jint high, jni::ref<java::lang::classfile::Label> defaultTarget, jni::ref<java::util::List> cases) { return call_method<"writeTableSwitch", void>(low, high, defaultTarget, cases); }
	void writeFieldAccess(jni::ref<java::lang::classfile::Opcode> opcode, jni::ref<java::lang::classfile::constantpool::FieldRefEntry> ref) { return call_method<"writeFieldAccess", void>(opcode, ref); }
	void writeInvokeNormal(jni::ref<java::lang::classfile::Opcode> opcode, jni::ref<java::lang::classfile::constantpool::MemberRefEntry> ref) { return call_method<"writeInvokeNormal", void>(opcode, ref); }
	void writeInvokeInterface(jni::ref<java::lang::classfile::Opcode> opcode, jni::ref<java::lang::classfile::constantpool::InterfaceMethodRefEntry> ref, jint count) { return call_method<"writeInvokeInterface", void>(opcode, ref, count); }
	void writeInvokeDynamic(jni::ref<java::lang::classfile::constantpool::InvokeDynamicEntry> ref) { return call_method<"writeInvokeDynamic", void>(ref); }
	void writeNewObject(jni::ref<java::lang::classfile::constantpool::ClassEntry> type) { return call_method<"writeNewObject", void>(type); }
	void writeNewPrimitiveArray(jint newArrayCode) { return call_method<"writeNewPrimitiveArray", void>(newArrayCode); }
	void writeNewReferenceArray(jni::ref<java::lang::classfile::constantpool::ClassEntry> type) { return call_method<"writeNewReferenceArray", void>(type); }
	void writeNewMultidimensionalArray(jint dimensions, jni::ref<java::lang::classfile::constantpool::ClassEntry> type) { return call_method<"writeNewMultidimensionalArray", void>(dimensions, type); }
	void writeTypeCheck(jni::ref<java::lang::classfile::Opcode> opcode, jni::ref<java::lang::classfile::constantpool::ClassEntry> type) { return call_method<"writeTypeCheck", void>(opcode, type); }
	void writeArgumentConstant(jni::ref<java::lang::classfile::Opcode> opcode, jint value) { return call_method<"writeArgumentConstant", void>(opcode, value); }
	void writeLoadConstant(jni::ref<java::lang::classfile::Opcode> opcode, jni::ref<java::lang::classfile::constantpool::LoadableConstantEntry> value) { return call_method<"writeLoadConstant", void>(opcode, value); }
	jni::ref<java::lang::classfile::Label> getLabel(jint bci) { return call_method<"getLabel", jni::ref<java::lang::classfile::Label>>(bci); }
	jint labelToBci(jni::ref<java::lang::classfile::Label> label) { return call_method<"labelToBci", jint>(label); }
	void setLineNumber(jint lineNo) { return call_method<"setLineNumber", void>(lineNo); }
	void setLabelTarget(jni::ref<java::lang::classfile::Label> label) { return call_method<"setLabelTarget", void>(label); }
	void setLabelTarget(jni::ref<java::lang::classfile::Label> label, jint bci) { return call_method<"setLabelTarget", void>(label, bci); }
	void addCharacterRange(jni::ref<java::lang::classfile::instruction::CharacterRange> element) { return call_method<"addCharacterRange", void>(element); }
	void addHandler(jni::ref<java::lang::classfile::instruction::ExceptionCatch> element) { return call_method<"addHandler", void>(element); }
	void addLocalVariable(jni::ref<java::lang::classfile::instruction::LocalVariable> element) { return call_method<"addLocalVariable", void>(element); }
	void addLocalVariableType(jni::ref<java::lang::classfile::instruction::LocalVariableType> element) { return call_method<"addLocalVariableType", void>(element); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	DirectCodeBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_DIRECTCODEBUILDER
