// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Record.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_UNBOUNDATTRIBUTE_UNBOUNDTYPEANNOTATION_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_UNBOUNDATTRIBUTE_UNBOUNDTYPEANNOTATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class UnboundAttribute_UnboundTypeAnnotation; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::UnboundAttribute_UnboundTypeAnnotation>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/UnboundAttribute$UnboundTypeAnnotation";
	using base_classes = std::tuple<scapix::java_api::java::lang::Record, scapix::java_api::java::lang::classfile::TypeAnnotation>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_UNBOUNDATTRIBUTE_UNBOUNDTYPEANNOTATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_UNBOUNDATTRIBUTE_UNBOUNDTYPEANNOTATION)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_UNBOUNDATTRIBUTE_UNBOUNDTYPEANNOTATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/BufWriter.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_TargetInfo.h>
#include <scapix/java_api/java/lang/classfile/constantpool/Utf8Entry.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::UnboundAttribute_UnboundTypeAnnotation : public jni::object_base<"jdk/internal/classfile/impl/UnboundAttribute$UnboundTypeAnnotation",
	java::lang::Record,
	java::lang::classfile::TypeAnnotation>
{
public:

	static jni::ref<jdk::internal::classfile::impl::UnboundAttribute_UnboundTypeAnnotation> new_object(jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo> targetInfo, jni::ref<java::util::List> targetPath, jni::ref<java::lang::classfile::constantpool::Utf8Entry> className, jni::ref<java::util::List> elements) { return base_::new_object(targetInfo, targetPath, className, elements); }
	void writeTo(jni::ref<java::lang::classfile::BufWriter> buf) { return call_method<"writeTo", void>(buf); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo> targetInfo() { return call_method<"targetInfo", jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo>>(); }
	jni::ref<java::util::List> targetPath() { return call_method<"targetPath", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::classfile::constantpool::Utf8Entry> className() { return call_method<"className", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<java::util::List> elements() { return call_method<"elements", jni::ref<java::util::List>>(); }

protected:

	UnboundAttribute_UnboundTypeAnnotation(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_UNBOUNDATTRIBUTE_UNBOUNDTYPEANNOTATION
