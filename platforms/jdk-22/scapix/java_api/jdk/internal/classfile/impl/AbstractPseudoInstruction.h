// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/classfile/impl/AbstractElement.h>
#include <scapix/java_api/java/lang/classfile/PseudoInstruction.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::classfile::impl { class AbstractPseudoInstruction; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::classfile::impl::AbstractPseudoInstruction>
{
	static constexpr fixed_string class_name = "jdk/internal/classfile/impl/AbstractPseudoInstruction";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::classfile::impl::AbstractElement, scapix::java_api::java::lang::classfile::PseudoInstruction>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION)
#define SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/jdk/internal/classfile/impl/DirectCodeBuilder.h>
#include <scapix/java_api/jdk/internal/classfile/impl/AbstractPseudoInstruction_UnboundLocalVariableType.h>
#include <scapix/java_api/jdk/internal/classfile/impl/AbstractPseudoInstruction_UnboundLocalVariable.h>
#include <scapix/java_api/jdk/internal/classfile/impl/AbstractPseudoInstruction_UnboundCharacterRange.h>
#include <scapix/java_api/jdk/internal/classfile/impl/AbstractPseudoInstruction_ExceptionCatchImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::classfile::impl::AbstractPseudoInstruction : public jni::object_base<"jdk/internal/classfile/impl/AbstractPseudoInstruction",
	jdk::internal::classfile::impl::AbstractElement,
	java::lang::classfile::PseudoInstruction>
{
public:

	using UnboundLocalVariableType = AbstractPseudoInstruction_UnboundLocalVariableType;
	using UnboundLocalVariable = AbstractPseudoInstruction_UnboundLocalVariable;
	using UnboundCharacterRange = AbstractPseudoInstruction_UnboundCharacterRange;
	using ExceptionCatchImpl = AbstractPseudoInstruction_ExceptionCatchImpl;

	static jni::ref<jdk::internal::classfile::impl::AbstractPseudoInstruction> new_object() { return base_::new_object(); }
	void writeTo(jni::ref<jdk::internal::classfile::impl::DirectCodeBuilder> p1) { return call_method<"writeTo", void>(p1); }

protected:

	AbstractPseudoInstruction(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_CLASSFILE_IMPL_ABSTRACTPSEUDOINSTRUCTION
