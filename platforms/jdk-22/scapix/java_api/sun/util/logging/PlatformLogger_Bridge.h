// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_BRIDGE_FWD
#define SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_BRIDGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::util::logging { class PlatformLogger_Bridge; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::util::logging::PlatformLogger_Bridge>
{
	static constexpr fixed_string class_name = "sun/util/logging/PlatformLogger$Bridge";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_BRIDGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_BRIDGE)
#define SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_BRIDGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/System_Logger.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/ResourceBundle.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/sun/util/logging/PlatformLogger_Level.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::util::logging::PlatformLogger_Bridge : public jni::object_base<"sun/util/logging/PlatformLogger$Bridge",
	java::lang::Object>
{
public:

	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jboolean isLoggable(jni::ref<sun::util::logging::PlatformLogger_Level> p1) { return call_method<"isLoggable", jboolean>(p1); }
	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	void log(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2) { return call_method<"log", void>(p1, p2); }
	void log(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"log", void>(p1, p2, p3); }
	void log(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_method<"log", void>(p1, p2, p3); }
	void log(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::util::function::Supplier> p2) { return call_method<"log", void>(p1, p2); }
	void log(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::Throwable> p2, jni::ref<java::util::function::Supplier> p3) { return call_method<"log", void>(p1, p2, p3); }
	void logp(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"logp", void>(p1, p2, p3, p4); }
	void logp(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::function::Supplier> p4) { return call_method<"logp", void>(p1, p2, p3, p4); }
	void logp(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<jni::array<java::lang::Object>> p5) { return call_method<"logp", void>(p1, p2, p3, p4, p5); }
	void logp(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::Throwable> p5) { return call_method<"logp", void>(p1, p2, p3, p4, p5); }
	void logp(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::Throwable> p4, jni::ref<java::util::function::Supplier> p5) { return call_method<"logp", void>(p1, p2, p3, p4, p5); }
	void logrb(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::ResourceBundle> p4, jni::ref<java::lang::String> p5, jni::ref<jni::array<java::lang::Object>> p6) { return call_method<"logrb", void>(p1, p2, p3, p4, p5, p6); }
	void logrb(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::ResourceBundle> p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::Throwable> p6) { return call_method<"logrb", void>(p1, p2, p3, p4, p5, p6); }
	void logrb(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::util::ResourceBundle> p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<java::lang::Object>> p4) { return call_method<"logrb", void>(p1, p2, p3, p4); }
	void logrb(jni::ref<sun::util::logging::PlatformLogger_Level> p1, jni::ref<java::util::ResourceBundle> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::Throwable> p4) { return call_method<"logrb", void>(p1, p2, p3, p4); }
	static jni::ref<sun::util::logging::PlatformLogger_Bridge> convert(jni::ref<java::lang::System_Logger> logger) { return call_static_method<"convert", jni::ref<sun::util::logging::PlatformLogger_Bridge>>(logger); }

protected:

	PlatformLogger_Bridge(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOGGING_PLATFORMLOGGER_BRIDGE
