// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_UTIL_LOCALE_BASELOCALE_FWD
#define SCAPIX_JAVA_API_SUN_UTIL_LOCALE_BASELOCALE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::util::locale { class BaseLocale; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::util::locale::BaseLocale>
{
	static constexpr fixed_string class_name = "sun/util/locale/BaseLocale";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOCALE_BASELOCALE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_UTIL_LOCALE_BASELOCALE)
#define SCAPIX_JAVA_API_SUN_UTIL_LOCALE_BASELOCALE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::util::locale::BaseLocale : public jni::object_base<"sun/util/locale/BaseLocale",
	java::lang::Object>
{
public:

	static jni::ref<jni::array<sun::util::locale::BaseLocale>> constantBaseLocales() { return get_static_field<"constantBaseLocales", jni::ref<jni::array<sun::util::locale::BaseLocale>>>(); }
	static void constantBaseLocales(jni::ref<jni::array<sun::util::locale::BaseLocale>> v) { set_static_field<"constantBaseLocales", jni::ref<jni::array<sun::util::locale::BaseLocale>>>(v); }
	static jbyte ENGLISH() { return get_static_field<"ENGLISH", jbyte>(); }
	static jbyte FRENCH() { return get_static_field<"FRENCH", jbyte>(); }
	static jbyte GERMAN() { return get_static_field<"GERMAN", jbyte>(); }
	static jbyte ITALIAN() { return get_static_field<"ITALIAN", jbyte>(); }
	static jbyte JAPANESE() { return get_static_field<"JAPANESE", jbyte>(); }
	static jbyte KOREAN() { return get_static_field<"KOREAN", jbyte>(); }
	static jbyte CHINESE() { return get_static_field<"CHINESE", jbyte>(); }
	static jbyte SIMPLIFIED_CHINESE() { return get_static_field<"SIMPLIFIED_CHINESE", jbyte>(); }
	static jbyte TRADITIONAL_CHINESE() { return get_static_field<"TRADITIONAL_CHINESE", jbyte>(); }
	static jbyte FRANCE() { return get_static_field<"FRANCE", jbyte>(); }
	static jbyte GERMANY() { return get_static_field<"GERMANY", jbyte>(); }
	static jbyte ITALY() { return get_static_field<"ITALY", jbyte>(); }
	static jbyte JAPAN() { return get_static_field<"JAPAN", jbyte>(); }
	static jbyte KOREA() { return get_static_field<"KOREA", jbyte>(); }
	static jbyte UK() { return get_static_field<"UK", jbyte>(); }
	static jbyte US() { return get_static_field<"US", jbyte>(); }
	static jbyte CANADA() { return get_static_field<"CANADA", jbyte>(); }
	static jbyte CANADA_FRENCH() { return get_static_field<"CANADA_FRENCH", jbyte>(); }
	static jbyte ROOT() { return get_static_field<"ROOT", jbyte>(); }
	static jbyte NUM_CONSTANTS() { return get_static_field<"NUM_CONSTANTS", jbyte>(); }
	static jni::ref<java::lang::String> SEP() { return get_static_field<"SEP", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::util::locale::BaseLocale> getInstance(jni::ref<java::lang::String> language, jni::ref<java::lang::String> script, jni::ref<java::lang::String> region, jni::ref<java::lang::String> variant) { return call_static_method<"getInstance", jni::ref<sun::util::locale::BaseLocale>>(language, script, region, variant); }
	static jni::ref<java::lang::String> convertOldISOCodes(jni::ref<java::lang::String> language) { return call_static_method<"convertOldISOCodes", jni::ref<java::lang::String>>(language); }
	jni::ref<java::lang::String> getLanguage() { return call_method<"getLanguage", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getScript() { return call_method<"getScript", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getRegion() { return call_method<"getRegion", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVariant() { return call_method<"getVariant", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	BaseLocale(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOCALE_BASELOCALE
