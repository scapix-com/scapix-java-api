// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODEDESCRIPTOR_FWD
#define SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODEDESCRIPTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::invoke::util { class BytecodeDescriptor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::invoke::util::BytecodeDescriptor>
{
	static constexpr fixed_string class_name = "sun/invoke/util/BytecodeDescriptor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODEDESCRIPTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODEDESCRIPTOR)
#define SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODEDESCRIPTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::invoke::util::BytecodeDescriptor : public jni::object_base<"sun/invoke/util/BytecodeDescriptor",
	java::lang::Object>
{
public:

	static jni::ref<java::util::List> parseMethod(jni::ref<java::lang::String> bytecodeSignature, jni::ref<java::lang::ClassLoader> loader) { return call_static_method<"parseMethod", jni::ref<java::util::List>>(bytecodeSignature, loader); }
	static jni::ref<java::lang::String> unparse(jni::ref<java::lang::Class> type) { return call_static_method<"unparse", jni::ref<java::lang::String>>(type); }
	static jni::ref<java::lang::String> unparse(jni::ref<java::lang::Object> type) { return call_static_method<"unparse", jni::ref<java::lang::String>>(type); }
	static jni::ref<java::lang::String> unparseMethod(jni::ref<java::lang::Class> rtype, jni::ref<java::util::List> ptypes) { return call_static_method<"unparseMethod", jni::ref<java::lang::String>>(rtype, ptypes); }
	static jni::ref<java::lang::String> unparseMethod(jni::ref<java::lang::Class> rtype, jni::ref<jni::array<java::lang::Class>> ptypes) { return call_static_method<"unparseMethod", jni::ref<java::lang::String>>(rtype, ptypes); }

protected:

	BytecodeDescriptor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODEDESCRIPTOR
