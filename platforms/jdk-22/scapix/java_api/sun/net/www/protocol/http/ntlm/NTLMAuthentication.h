// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/net/www/protocol/http/AuthenticationInfo.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_NTLM_NTLMAUTHENTICATION_FWD
#define SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_NTLM_NTLMAUTHENTICATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net::www::protocol::http::ntlm { class NTLMAuthentication; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::www::protocol::http::ntlm::NTLMAuthentication>
{
	static constexpr fixed_string class_name = "sun/net/www/protocol/http/ntlm/NTLMAuthentication";
	using base_classes = std::tuple<scapix::java_api::sun::net::www::protocol::http::AuthenticationInfo>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_NTLM_NTLMAUTHENTICATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_NTLM_NTLMAUTHENTICATION)
#define SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_NTLM_NTLMAUTHENTICATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/PasswordAuthentication.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/sun/net/www/HeaderParser.h>
#include <scapix/java_api/sun/net/www/protocol/http/HttpURLConnection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::www::protocol::http::ntlm::NTLMAuthentication : public jni::object_base<"sun/net/www/protocol/http/ntlm/NTLMAuthentication",
	sun::net::www::protocol::http::AuthenticationInfo>
{
public:

	static jni::ref<sun::net::www::protocol::http::ntlm::NTLMAuthentication> new_object(jboolean isProxy, jni::ref<java::net::URL> url, jni::ref<java::net::PasswordAuthentication> pw) { return base_::new_object(isProxy, url, pw); }
	static jni::ref<sun::net::www::protocol::http::ntlm::NTLMAuthentication> new_object(jboolean isProxy, jni::ref<java::lang::String> host, jint port, jni::ref<java::net::PasswordAuthentication> pw) { return base_::new_object(isProxy, host, port, pw); }
	jboolean supportsPreemptiveAuthorization() { return call_method<"supportsPreemptiveAuthorization", jboolean>(); }
	static jboolean supportsTransparentAuth() { return call_static_method<"supportsTransparentAuth", jboolean>(); }
	static jboolean isTrustedSite(jni::ref<java::net::URL> url) { return call_static_method<"isTrustedSite", jboolean>(url); }
	jni::ref<java::lang::String> getHeaderValue(jni::ref<java::net::URL> url, jni::ref<java::lang::String> method) { return call_method<"getHeaderValue", jni::ref<java::lang::String>>(url, method); }
	jboolean isAuthorizationStale(jni::ref<java::lang::String> header) { return call_method<"isAuthorizationStale", jboolean>(header); }
	jboolean setHeaders(jni::ref<sun::net::www::protocol::http::HttpURLConnection> conn, jni::ref<sun::net::www::HeaderParser> p, jni::ref<java::lang::String> raw) { return call_method<"setHeaders", jboolean>(conn, p, raw); }

protected:

	NTLMAuthentication(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_NTLM_NTLMAUTHENTICATION
