// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_WWW_MESSAGEHEADER_FWD
#define SCAPIX_JAVA_API_SUN_NET_WWW_MESSAGEHEADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net::www { class MessageHeader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::www::MessageHeader>
{
	static constexpr fixed_string class_name = "sun/net/www/MessageHeader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_MESSAGEHEADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_WWW_MESSAGEHEADER)
#define SCAPIX_JAVA_API_SUN_NET_WWW_MESSAGEHEADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::www::MessageHeader : public jni::object_base<"sun/net/www/MessageHeader",
	java::lang::Object>
{
public:

	static jni::ref<sun::net::www::MessageHeader> new_object() { return base_::new_object(); }
	static jni::ref<sun::net::www::MessageHeader> new_object(jni::ref<java::io::InputStream> is) { return base_::new_object(is); }
	jni::ref<java::lang::String> getHeaderNamesInList() { return call_method<"getHeaderNamesInList", jni::ref<java::lang::String>>(); }
	void reset() { return call_method<"reset", void>(); }
	jni::ref<java::lang::String> findValue(jni::ref<java::lang::String> k) { return call_method<"findValue", jni::ref<java::lang::String>>(k); }
	jint getKey(jni::ref<java::lang::String> k) { return call_method<"getKey", jint>(k); }
	jni::ref<java::lang::String> getKey(jint n) { return call_method<"getKey", jni::ref<java::lang::String>>(n); }
	jni::ref<java::lang::String> getValue(jint n) { return call_method<"getValue", jni::ref<java::lang::String>>(n); }
	jni::ref<java::lang::String> findNextValue(jni::ref<java::lang::String> k, jni::ref<java::lang::String> v) { return call_method<"findNextValue", jni::ref<java::lang::String>>(k, v); }
	jboolean filterNTLMResponses(jni::ref<java::lang::String> k) { return call_method<"filterNTLMResponses", jboolean>(k); }
	jni::ref<java::util::Iterator> multiValueIterator(jni::ref<java::lang::String> k) { return call_method<"multiValueIterator", jni::ref<java::util::Iterator>>(k); }
	jni::ref<java::util::Map> getHeaders() { return call_method<"getHeaders", jni::ref<java::util::Map>>(); }
	jni::ref<java::util::Map> getHeaders(jni::ref<jni::array<java::lang::String>> excludeList) { return call_method<"getHeaders", jni::ref<java::util::Map>>(excludeList); }
	jni::ref<java::util::Map> filterAndAddHeaders(jni::ref<jni::array<java::lang::String>> excludeList, jni::ref<java::util::Map> include) { return call_method<"filterAndAddHeaders", jni::ref<java::util::Map>>(excludeList, include); }
	void print(jni::ref<java::io::PrintStream> p) { return call_method<"print", void>(p); }
	void add(jni::ref<java::lang::String> k, jni::ref<java::lang::String> v) { return call_method<"add", void>(k, v); }
	void prepend(jni::ref<java::lang::String> k, jni::ref<java::lang::String> v) { return call_method<"prepend", void>(k, v); }
	void set(jint i, jni::ref<java::lang::String> k, jni::ref<java::lang::String> v) { return call_method<"set", void>(i, k, v); }
	void remove(jni::ref<java::lang::String> k) { return call_method<"remove", void>(k); }
	void set(jni::ref<java::lang::String> k, jni::ref<java::lang::String> v) { return call_method<"set", void>(k, v); }
	void setIfNotSet(jni::ref<java::lang::String> k, jni::ref<java::lang::String> v) { return call_method<"setIfNotSet", void>(k, v); }
	static jni::ref<java::lang::String> canonicalID(jni::ref<java::lang::String> id) { return call_static_method<"canonicalID", jni::ref<java::lang::String>>(id); }
	void parseHeader(jni::ref<java::io::InputStream> is) { return call_method<"parseHeader", void>(is); }
	void mergeHeader(jni::ref<java::io::InputStream> is) { return call_method<"mergeHeader", void>(is); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	MessageHeader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_MESSAGEHEADER
