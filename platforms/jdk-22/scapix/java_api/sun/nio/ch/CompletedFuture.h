// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/Future.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CH_COMPLETEDFUTURE_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CH_COMPLETEDFUTURE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::ch { class CompletedFuture; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::ch::CompletedFuture>
{
	static constexpr fixed_string class_name = "sun/nio/ch/CompletedFuture";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::Future>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_COMPLETEDFUTURE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CH_COMPLETEDFUTURE)
#define SCAPIX_JAVA_API_SUN_NIO_CH_COMPLETEDFUTURE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::nio::ch::CompletedFuture : public jni::object_base<"sun/nio/ch/CompletedFuture",
	java::lang::Object,
	java::util::concurrent::Future>
{
public:

	jni::ref<java::lang::Object> get() { return call_method<"get", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> get(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"get", jni::ref<java::lang::Object>>(timeout, p2); }
	jboolean isCancelled() { return call_method<"isCancelled", jboolean>(); }
	jboolean isDone() { return call_method<"isDone", jboolean>(); }
	jboolean cancel(jboolean mayInterruptIfRunning) { return call_method<"cancel", jboolean>(mayInterruptIfRunning); }

protected:

	CompletedFuture(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_COMPLETEDFUTURE
