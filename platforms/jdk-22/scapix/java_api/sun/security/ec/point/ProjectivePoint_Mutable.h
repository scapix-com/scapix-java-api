// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/security/ec/point/ProjectivePoint.h>
#include <scapix/java_api/sun/security/ec/point/MutablePoint.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_EC_POINT_PROJECTIVEPOINT_MUTABLE_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_EC_POINT_PROJECTIVEPOINT_MUTABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ec::point { class ProjectivePoint_Mutable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ec::point::ProjectivePoint_Mutable>
{
	static constexpr fixed_string class_name = "sun/security/ec/point/ProjectivePoint$Mutable";
	using base_classes = std::tuple<scapix::java_api::sun::security::ec::point::ProjectivePoint, scapix::java_api::sun::security::ec::point::MutablePoint>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_EC_POINT_PROJECTIVEPOINT_MUTABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_EC_POINT_PROJECTIVEPOINT_MUTABLE)
#define SCAPIX_JAVA_API_SUN_SECURITY_EC_POINT_PROJECTIVEPOINT_MUTABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/security/ec/point/AffinePoint.h>
#include <scapix/java_api/sun/security/ec/point/Point.h>
#include <scapix/java_api/sun/security/util/math/IntegerFieldModuloP.h>
#include <scapix/java_api/sun/security/util/math/MutableIntegerModuloP.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::ec::point::ProjectivePoint_Mutable : public jni::object_base<"sun/security/ec/point/ProjectivePoint$Mutable",
	sun::security::ec::point::ProjectivePoint,
	sun::security::ec::point::MutablePoint>
{
public:

	static jni::ref<sun::security::ec::point::ProjectivePoint_Mutable> new_object(jni::ref<sun::security::util::math::MutableIntegerModuloP> x, jni::ref<sun::security::util::math::MutableIntegerModuloP> y, jni::ref<sun::security::util::math::MutableIntegerModuloP> z) { return base_::new_object(x, y, z); }
	static jni::ref<sun::security::ec::point::ProjectivePoint_Mutable> new_object(jni::ref<sun::security::util::math::IntegerFieldModuloP> field) { return base_::new_object(field); }
	jni::ref<sun::security::ec::point::ProjectivePoint_Mutable> conditionalSet(jni::ref<sun::security::ec::point::Point> p, jint set) { return call_method<"conditionalSet", jni::ref<sun::security::ec::point::ProjectivePoint_Mutable>>(p, set); }
	jni::ref<sun::security::ec::point::ProjectivePoint_Mutable> setValue(jni::ref<sun::security::ec::point::AffinePoint> p) { return call_method<"setValue", jni::ref<sun::security::ec::point::ProjectivePoint_Mutable>>(p); }
	jni::ref<sun::security::ec::point::ProjectivePoint_Mutable> setValue(jni::ref<sun::security::ec::point::Point> p) { return call_method<"setValue", jni::ref<sun::security::ec::point::ProjectivePoint_Mutable>>(p); }

protected:

	ProjectivePoint_Mutable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_EC_POINT_PROJECTIVEPOINT_MUTABLE
