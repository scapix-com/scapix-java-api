// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_EC_ECOPERATIONS_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_EC_ECOPERATIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ec { class ECOperations; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ec::ECOperations>
{
	static constexpr fixed_string class_name = "sun/security/ec/ECOperations";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_EC_ECOPERATIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_EC_ECOPERATIONS)
#define SCAPIX_JAVA_API_SUN_SECURITY_EC_ECOPERATIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/security/spec/ECParameterSpec.h>
#include <scapix/java_api/java/security/spec/ECPoint.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/sun/security/ec/point/AffinePoint.h>
#include <scapix/java_api/sun/security/ec/point/MutablePoint.h>
#include <scapix/java_api/sun/security/ec/point/Point.h>
#include <scapix/java_api/sun/security/util/math/IntegerFieldModuloP.h>
#include <scapix/java_api/sun/security/util/math/IntegerModuloP.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::ec::ECOperations : public jni::object_base<"sun/security/ec/ECOperations",
	java::lang::Object>
{
public:

	static jni::ref<java::util::Optional> forParameters(jni::ref<java::security::spec::ECParameterSpec> params) { return call_static_method<"forParameters", jni::ref<java::util::Optional>>(params); }
	static jni::ref<sun::security::ec::ECOperations> new_object(jni::ref<sun::security::util::math::IntegerModuloP> b, jni::ref<sun::security::util::math::IntegerFieldModuloP> orderField) { return base_::new_object(b, orderField); }
	jni::ref<sun::security::util::math::IntegerFieldModuloP> getField() { return call_method<"getField", jni::ref<sun::security::util::math::IntegerFieldModuloP>>(); }
	jni::ref<sun::security::util::math::IntegerFieldModuloP> getOrderField() { return call_method<"getOrderField", jni::ref<sun::security::util::math::IntegerFieldModuloP>>(); }
	jboolean isNeutral(jni::ref<sun::security::ec::point::Point> p) { return call_method<"isNeutral", jboolean>(p); }
	static jboolean allZero(jni::ref<jni::array<jbyte>> arr) { return call_static_method<"allZero", jboolean>(arr); }
	jni::ref<sun::security::ec::point::MutablePoint> multiply(jni::ref<sun::security::ec::point::AffinePoint> affineP, jni::ref<jni::array<jbyte>> s) { return call_method<"multiply", jni::ref<sun::security::ec::point::MutablePoint>>(affineP, s); }
	jni::ref<sun::security::ec::point::MutablePoint> multiply(jni::ref<java::security::spec::ECPoint> ecPoint, jni::ref<jni::array<jbyte>> s) { return call_method<"multiply", jni::ref<sun::security::ec::point::MutablePoint>>(ecPoint, s); }
	void setSum(jni::ref<sun::security::ec::point::MutablePoint> p, jni::ref<sun::security::ec::point::AffinePoint> p2) { return call_method<"setSum", void>(p, p2); }
	jboolean checkOrder(jni::ref<java::security::spec::ECPoint> point) { return call_method<"checkOrder", jboolean>(point); }

protected:

	ECOperations(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_EC_ECOPERATIONS
