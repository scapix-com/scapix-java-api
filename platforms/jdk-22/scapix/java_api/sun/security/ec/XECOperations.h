// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_EC_XECOPERATIONS_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_EC_XECOPERATIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ec { class XECOperations; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ec::XECOperations>
{
	static constexpr fixed_string class_name = "sun/security/ec/XECOperations";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_EC_XECOPERATIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_EC_XECOPERATIONS)
#define SCAPIX_JAVA_API_SUN_SECURITY_EC_XECOPERATIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/sun/security/ec/XECParameters.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::ec::XECOperations : public jni::object_base<"sun/security/ec/XECOperations",
	java::lang::Object>
{
public:

	static jni::ref<sun::security::ec::XECOperations> new_object(jni::ref<sun::security::ec::XECParameters> c) { return base_::new_object(c); }
	jni::ref<sun::security::ec::XECParameters> getParameters() { return call_method<"getParameters", jni::ref<sun::security::ec::XECParameters>>(); }
	jni::ref<jni::array<jbyte>> generatePrivate(jni::ref<java::security::SecureRandom> random) { return call_method<"generatePrivate", jni::ref<jni::array<jbyte>>>(random); }
	jni::ref<java::math::BigInteger> computePublic(jni::ref<jni::array<jbyte>> k) { return call_method<"computePublic", jni::ref<java::math::BigInteger>>(k); }
	jni::ref<jni::array<jbyte>> encodedPointMultiply(jni::ref<jni::array<jbyte>> k, jni::ref<java::math::BigInteger> u) { return call_method<"encodedPointMultiply", jni::ref<jni::array<jbyte>>>(k, u); }
	jni::ref<jni::array<jbyte>> encodedPointMultiply(jni::ref<jni::array<jbyte>> k, jni::ref<jni::array<jbyte>> u) { return call_method<"encodedPointMultiply", jni::ref<jni::array<jbyte>>>(k, u); }

protected:

	XECOperations(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_EC_XECOPERATIONS
