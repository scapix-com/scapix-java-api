// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/security/util/DerEncoder.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTIFICATEEXTENSIONS_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTIFICATEEXTENSIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::x509 { class CertificateExtensions; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::x509::CertificateExtensions>
{
	static constexpr fixed_string class_name = "sun/security/x509/CertificateExtensions";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::security::util::DerEncoder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTIFICATEEXTENSIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTIFICATEEXTENSIONS)
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTIFICATEEXTENSIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/sun/security/util/DerInputStream.h>
#include <scapix/java_api/sun/security/util/DerOutputStream.h>
#include <scapix/java_api/sun/security/util/ObjectIdentifier.h>
#include <scapix/java_api/sun/security/x509/Extension.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::x509::CertificateExtensions : public jni::object_base<"sun/security/x509/CertificateExtensions",
	java::lang::Object,
	sun::security::util::DerEncoder>
{
public:

	static jni::ref<java::lang::String> NAME() { return get_static_field<"NAME", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::security::x509::CertificateExtensions> new_object() { return base_::new_object(); }
	static jni::ref<sun::security::x509::CertificateExtensions> new_object(jni::ref<sun::security::util::DerInputStream> in) { return base_::new_object(in); }
	void encode(jni::ref<sun::security::util::DerOutputStream> out) { return call_method<"encode", void>(out); }
	void encode(jni::ref<sun::security::util::DerOutputStream> out, jboolean isCertReq) { return call_method<"encode", void>(out, isCertReq); }
	void setExtension(jni::ref<java::lang::String> name, jni::ref<sun::security::x509::Extension> ext) { return call_method<"setExtension", void>(name, ext); }
	jni::ref<sun::security::x509::Extension> getExtension(jni::ref<java::lang::String> alias) { return call_method<"getExtension", jni::ref<sun::security::x509::Extension>>(alias); }
	void delete_(jni::ref<java::lang::String> name) { return call_method<"delete", void>(name); }
	jni::ref<java::lang::String> getNameByOid(jni::ref<sun::security::util::ObjectIdentifier> oid) { return call_method<"getNameByOid", jni::ref<java::lang::String>>(oid); }
	jni::ref<java::util::Collection> getAllExtensions() { return call_method<"getAllExtensions", jni::ref<java::util::Collection>>(); }
	jni::ref<java::util::Map> getUnparseableExtensions() { return call_method<"getUnparseableExtensions", jni::ref<java::util::Map>>(); }
	jboolean hasUnsupportedCriticalExtension() { return call_method<"hasUnsupportedCriticalExtension", jboolean>(); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	CertificateExtensions(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTIFICATEEXTENSIONS
