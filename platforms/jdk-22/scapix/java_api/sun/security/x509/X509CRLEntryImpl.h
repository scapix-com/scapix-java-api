// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/security/cert/X509CRLEntry.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_X509_X509CRLENTRYIMPL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_X509CRLENTRYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::x509 { class X509CRLEntryImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::x509::X509CRLEntryImpl>
{
	static constexpr fixed_string class_name = "sun/security/x509/X509CRLEntryImpl";
	using base_classes = std::tuple<scapix::java_api::java::security::cert::X509CRLEntry, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_X509CRLENTRYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_X509_X509CRLENTRYIMPL)
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_X509CRLENTRYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/security/cert/CRLReason.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/security/auth/x500/X500Principal.h>
#include <scapix/java_api/sun/security/util/DerOutputStream.h>
#include <scapix/java_api/sun/security/util/DerValue.h>
#include <scapix/java_api/sun/security/util/ObjectIdentifier.h>
#include <scapix/java_api/sun/security/x509/CRLExtensions.h>
#include <scapix/java_api/sun/security/x509/Extension.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::x509::X509CRLEntryImpl : public jni::object_base<"sun/security/x509/X509CRLEntryImpl",
	java::security::cert::X509CRLEntry,
	java::lang::Comparable>
{
public:

	static jni::ref<sun::security::x509::X509CRLEntryImpl> new_object(jni::ref<java::math::BigInteger> num, jni::ref<java::util::Date> date) { return base_::new_object(num, date); }
	static jni::ref<sun::security::x509::X509CRLEntryImpl> new_object(jni::ref<java::math::BigInteger> num, jni::ref<java::util::Date> date, jni::ref<sun::security::x509::CRLExtensions> crlEntryExts) { return base_::new_object(num, date, crlEntryExts); }
	static jni::ref<sun::security::x509::X509CRLEntryImpl> new_object(jni::ref<jni::array<jbyte>> revokedCert) { return base_::new_object(revokedCert); }
	static jni::ref<sun::security::x509::X509CRLEntryImpl> new_object(jni::ref<sun::security::util::DerValue> derValue) { return base_::new_object(derValue); }
	jboolean hasExtensions() { return call_method<"hasExtensions", jboolean>(); }
	void encode(jni::ref<sun::security::util::DerOutputStream> outStrm) { return call_method<"encode", void>(outStrm); }
	jni::ref<jni::array<jbyte>> getEncoded() { return call_method<"getEncoded", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<javax::security::auth::x500::X500Principal> getCertificateIssuer() { return call_method<"getCertificateIssuer", jni::ref<javax::security::auth::x500::X500Principal>>(); }
	jni::ref<java::math::BigInteger> getSerialNumber() { return call_method<"getSerialNumber", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::util::Date> getRevocationDate() { return call_method<"getRevocationDate", jni::ref<java::util::Date>>(); }
	jni::ref<java::security::cert::CRLReason> getRevocationReason() { return call_method<"getRevocationReason", jni::ref<java::security::cert::CRLReason>>(); }
	static jni::ref<java::security::cert::CRLReason> getRevocationReason(jni::ref<java::security::cert::X509CRLEntry> crlEntry) { return call_static_method<"getRevocationReason", jni::ref<java::security::cert::CRLReason>>(crlEntry); }
	jni::ref<java::lang::Integer> getReasonCode() { return call_method<"getReasonCode", jni::ref<java::lang::Integer>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean hasUnsupportedCriticalExtension() { return call_method<"hasUnsupportedCriticalExtension", jboolean>(); }
	jni::ref<java::util::Set> getCriticalExtensionOIDs() { return call_method<"getCriticalExtensionOIDs", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> getNonCriticalExtensionOIDs() { return call_method<"getNonCriticalExtensionOIDs", jni::ref<java::util::Set>>(); }
	jni::ref<jni::array<jbyte>> getExtensionValue(jni::ref<java::lang::String> oid) { return call_method<"getExtensionValue", jni::ref<jni::array<jbyte>>>(oid); }
	jni::ref<sun::security::x509::Extension> getExtension(jni::ref<sun::security::util::ObjectIdentifier> oid) { return call_method<"getExtension", jni::ref<sun::security::x509::Extension>>(oid); }
	static jni::ref<sun::security::x509::X509CRLEntryImpl> toImpl(jni::ref<java::security::cert::X509CRLEntry> entry) { return call_static_method<"toImpl", jni::ref<sun::security::x509::X509CRLEntryImpl>>(entry); }
	jni::ref<java::util::Map> getExtensions() { return call_method<"getExtensions", jni::ref<java::util::Map>>(); }
	jint compareTo(jni::ref<sun::security::x509::X509CRLEntryImpl> that) { return call_method<"compareTo", jint>(that); }

protected:

	X509CRLEntryImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_X509CRLENTRYIMPL
