// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/security/util/DerEncoder.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_CERTPATH_CERTID_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_CERTPATH_CERTID_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::provider::certpath { class CertId; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::provider::certpath::CertId>
{
	static constexpr fixed_string class_name = "sun/security/provider/certpath/CertId";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::security::util::DerEncoder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_CERTPATH_CERTID_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_CERTPATH_CERTID)
#define SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_CERTPATH_CERTID

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#include <scapix/java_api/javax/security/auth/x500/X500Principal.h>
#include <scapix/java_api/sun/security/util/DerInputStream.h>
#include <scapix/java_api/sun/security/util/DerOutputStream.h>
#include <scapix/java_api/sun/security/x509/AlgorithmId.h>
#include <scapix/java_api/sun/security/x509/SerialNumber.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::provider::certpath::CertId : public jni::object_base<"sun/security/provider/certpath/CertId",
	java::lang::Object,
	sun::security::util::DerEncoder>
{
public:

	static jni::ref<sun::security::provider::certpath::CertId> new_object(jni::ref<java::security::cert::X509Certificate> issuerCert, jni::ref<sun::security::x509::SerialNumber> serialNumber) { return base_::new_object(issuerCert, serialNumber); }
	static jni::ref<sun::security::provider::certpath::CertId> new_object(jni::ref<javax::security::auth::x500::X500Principal> issuerName, jni::ref<java::security::PublicKey> issuerKey, jni::ref<sun::security::x509::SerialNumber> serialNumber) { return base_::new_object(issuerName, issuerKey, serialNumber); }
	static jni::ref<sun::security::provider::certpath::CertId> new_object(jni::ref<sun::security::util::DerInputStream> derIn) { return base_::new_object(derIn); }
	jni::ref<sun::security::x509::AlgorithmId> getHashAlgorithm() { return call_method<"getHashAlgorithm", jni::ref<sun::security::x509::AlgorithmId>>(); }
	jni::ref<jni::array<jbyte>> getIssuerNameHash() { return call_method<"getIssuerNameHash", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> getIssuerKeyHash() { return call_method<"getIssuerKeyHash", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::math::BigInteger> getSerialNumber() { return call_method<"getSerialNumber", jni::ref<java::math::BigInteger>>(); }
	void encode(jni::ref<sun::security::util::DerOutputStream> out) { return call_method<"encode", void>(out); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	CertId(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_CERTPATH_CERTID
