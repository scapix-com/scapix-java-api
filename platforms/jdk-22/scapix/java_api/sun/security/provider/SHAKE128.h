// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/security/provider/SHA3.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_SHAKE128_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_SHAKE128_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::provider { class SHAKE128; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::provider::SHAKE128>
{
	static constexpr fixed_string class_name = "sun/security/provider/SHAKE128";
	using base_classes = std::tuple<scapix::java_api::sun::security::provider::SHA3>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_SHAKE128_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_SHAKE128)
#define SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_SHAKE128

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::provider::SHAKE128 : public jni::object_base<"sun/security/provider/SHAKE128",
	sun::security::provider::SHA3>
{
public:

	static jni::ref<sun::security::provider::SHAKE128> new_object(jint d) { return base_::new_object(d); }
	void update(jbyte in) { return call_method<"update", void>(in); }
	void update(jni::ref<jni::array<jbyte>> in, jint off, jint len) { return call_method<"update", void>(in, off, len); }
	jni::ref<jni::array<jbyte>> digest() { return call_method<"digest", jni::ref<jni::array<jbyte>>>(); }
	void reset() { return call_method<"reset", void>(); }

protected:

	SHAKE128(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_PROVIDER_SHAKE128
