// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/sun/security/ssl/SSLStringizer.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLEXTENSION_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLEXTENSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ssl { class SSLExtension; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ssl::SSLExtension>
{
	static constexpr fixed_string class_name = "sun/security/ssl/SSLExtension";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum, scapix::java_api::sun::security::ssl::SSLStringizer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLEXTENSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLEXTENSION)
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLEXTENSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/sun/security/ssl/ConnectionContext.h>
#include <scapix/java_api/sun/security/ssl/HandshakeContext.h>
#include <scapix/java_api/sun/security/ssl/ProtocolVersion.h>
#include <scapix/java_api/sun/security/ssl/SSLHandshake_HandshakeMessage.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::security::ssl::SSLExtension : public jni::object_base<"sun/security/ssl/SSLExtension",
	java::lang::Enum,
	sun::security::ssl::SSLStringizer>
{
public:

	static jni::ref<sun::security::ssl::SSLExtension> CH_SERVER_NAME() { return get_static_field<"CH_SERVER_NAME", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_SERVER_NAME() { return get_static_field<"SH_SERVER_NAME", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> EE_SERVER_NAME() { return get_static_field<"EE_SERVER_NAME", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_MAX_FRAGMENT_LENGTH() { return get_static_field<"CH_MAX_FRAGMENT_LENGTH", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_MAX_FRAGMENT_LENGTH() { return get_static_field<"SH_MAX_FRAGMENT_LENGTH", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> EE_MAX_FRAGMENT_LENGTH() { return get_static_field<"EE_MAX_FRAGMENT_LENGTH", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CLIENT_CERTIFICATE_URL() { return get_static_field<"CLIENT_CERTIFICATE_URL", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> TRUSTED_CA_KEYS() { return get_static_field<"TRUSTED_CA_KEYS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> TRUNCATED_HMAC() { return get_static_field<"TRUNCATED_HMAC", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_STATUS_REQUEST() { return get_static_field<"CH_STATUS_REQUEST", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_STATUS_REQUEST() { return get_static_field<"SH_STATUS_REQUEST", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CR_STATUS_REQUEST() { return get_static_field<"CR_STATUS_REQUEST", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CT_STATUS_REQUEST() { return get_static_field<"CT_STATUS_REQUEST", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> USER_MAPPING() { return get_static_field<"USER_MAPPING", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CLIENT_AUTHZ() { return get_static_field<"CLIENT_AUTHZ", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SERVER_AUTHZ() { return get_static_field<"SERVER_AUTHZ", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CERT_TYPE() { return get_static_field<"CERT_TYPE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_SUPPORTED_GROUPS() { return get_static_field<"CH_SUPPORTED_GROUPS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> EE_SUPPORTED_GROUPS() { return get_static_field<"EE_SUPPORTED_GROUPS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_EC_POINT_FORMATS() { return get_static_field<"CH_EC_POINT_FORMATS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_EC_POINT_FORMATS() { return get_static_field<"SH_EC_POINT_FORMATS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SRP() { return get_static_field<"SRP", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> USE_SRTP() { return get_static_field<"USE_SRTP", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> HEARTBEAT() { return get_static_field<"HEARTBEAT", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_ALPN() { return get_static_field<"CH_ALPN", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_ALPN() { return get_static_field<"SH_ALPN", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> EE_ALPN() { return get_static_field<"EE_ALPN", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_STATUS_REQUEST_V2() { return get_static_field<"CH_STATUS_REQUEST_V2", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_STATUS_REQUEST_V2() { return get_static_field<"SH_STATUS_REQUEST_V2", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SIGNED_CERT_TIMESTAMP() { return get_static_field<"SIGNED_CERT_TIMESTAMP", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CLIENT_CERT_TYPE() { return get_static_field<"CLIENT_CERT_TYPE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SERVER_CERT_TYPE() { return get_static_field<"SERVER_CERT_TYPE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> PADDING() { return get_static_field<"PADDING", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> ENCRYPT_THEN_MAC() { return get_static_field<"ENCRYPT_THEN_MAC", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_EXTENDED_MASTER_SECRET() { return get_static_field<"CH_EXTENDED_MASTER_SECRET", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_EXTENDED_MASTER_SECRET() { return get_static_field<"SH_EXTENDED_MASTER_SECRET", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> TOKEN_BINDING() { return get_static_field<"TOKEN_BINDING", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CACHED_INFO() { return get_static_field<"CACHED_INFO", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_SESSION_TICKET() { return get_static_field<"CH_SESSION_TICKET", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_SESSION_TICKET() { return get_static_field<"SH_SESSION_TICKET", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_SIGNATURE_ALGORITHMS() { return get_static_field<"CH_SIGNATURE_ALGORITHMS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CR_SIGNATURE_ALGORITHMS() { return get_static_field<"CR_SIGNATURE_ALGORITHMS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_EARLY_DATA() { return get_static_field<"CH_EARLY_DATA", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> EE_EARLY_DATA() { return get_static_field<"EE_EARLY_DATA", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> NST_EARLY_DATA() { return get_static_field<"NST_EARLY_DATA", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_SUPPORTED_VERSIONS() { return get_static_field<"CH_SUPPORTED_VERSIONS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_SUPPORTED_VERSIONS() { return get_static_field<"SH_SUPPORTED_VERSIONS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> HRR_SUPPORTED_VERSIONS() { return get_static_field<"HRR_SUPPORTED_VERSIONS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> MH_SUPPORTED_VERSIONS() { return get_static_field<"MH_SUPPORTED_VERSIONS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_COOKIE() { return get_static_field<"CH_COOKIE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> HRR_COOKIE() { return get_static_field<"HRR_COOKIE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> MH_COOKIE() { return get_static_field<"MH_COOKIE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> PSK_KEY_EXCHANGE_MODES() { return get_static_field<"PSK_KEY_EXCHANGE_MODES", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_CERTIFICATE_AUTHORITIES() { return get_static_field<"CH_CERTIFICATE_AUTHORITIES", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CR_CERTIFICATE_AUTHORITIES() { return get_static_field<"CR_CERTIFICATE_AUTHORITIES", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> OID_FILTERS() { return get_static_field<"OID_FILTERS", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> POST_HANDSHAKE_AUTH() { return get_static_field<"POST_HANDSHAKE_AUTH", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_SIGNATURE_ALGORITHMS_CERT() { return get_static_field<"CH_SIGNATURE_ALGORITHMS_CERT", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CR_SIGNATURE_ALGORITHMS_CERT() { return get_static_field<"CR_SIGNATURE_ALGORITHMS_CERT", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_KEY_SHARE() { return get_static_field<"CH_KEY_SHARE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_KEY_SHARE() { return get_static_field<"SH_KEY_SHARE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> HRR_KEY_SHARE() { return get_static_field<"HRR_KEY_SHARE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> MH_KEY_SHARE() { return get_static_field<"MH_KEY_SHARE", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_RENEGOTIATION_INFO() { return get_static_field<"CH_RENEGOTIATION_INFO", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_RENEGOTIATION_INFO() { return get_static_field<"SH_RENEGOTIATION_INFO", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> CH_PRE_SHARED_KEY() { return get_static_field<"CH_PRE_SHARED_KEY", jni::ref<sun::security::ssl::SSLExtension>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> SH_PRE_SHARED_KEY() { return get_static_field<"SH_PRE_SHARED_KEY", jni::ref<sun::security::ssl::SSLExtension>>(); }

	static jni::ref<jni::array<sun::security::ssl::SSLExtension>> values() { return call_static_method<"values", jni::ref<jni::array<sun::security::ssl::SSLExtension>>>(); }
	static jni::ref<sun::security::ssl::SSLExtension> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<sun::security::ssl::SSLExtension>>(name); }
	jni::ref<jni::array<jbyte>> produce(jni::ref<sun::security::ssl::ConnectionContext> context, jni::ref<sun::security::ssl::SSLHandshake_HandshakeMessage> message) { return call_method<"produce", jni::ref<jni::array<jbyte>>>(context, message); }
	void consumeOnLoad(jni::ref<sun::security::ssl::ConnectionContext> context, jni::ref<sun::security::ssl::SSLHandshake_HandshakeMessage> message, jni::ref<java::nio::ByteBuffer> buffer) { return call_method<"consumeOnLoad", void>(context, message, buffer); }
	void consumeOnTrade(jni::ref<sun::security::ssl::ConnectionContext> context, jni::ref<sun::security::ssl::SSLHandshake_HandshakeMessage> message) { return call_method<"consumeOnTrade", void>(context, message); }
	jboolean isAvailable(jni::ref<sun::security::ssl::ProtocolVersion> protocolVersion) { return call_method<"isAvailable", jboolean>(protocolVersion); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString(jni::ref<sun::security::ssl::HandshakeContext> handshakeContext, jni::ref<java::nio::ByteBuffer> byteBuffer) { return call_method<"toString", jni::ref<java::lang::String>>(handshakeContext, byteBuffer); }

protected:

	SSLExtension(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLEXTENSION
