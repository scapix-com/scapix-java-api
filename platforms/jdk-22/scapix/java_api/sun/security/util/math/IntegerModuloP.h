// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTEGERMODULOP_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTEGERMODULOP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::util::math { class IntegerModuloP; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::util::math::IntegerModuloP>
{
	static constexpr fixed_string class_name = "sun/security/util/math/IntegerModuloP";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTEGERMODULOP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTEGERMODULOP)
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTEGERMODULOP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/sun/security/util/math/ImmutableIntegerModuloP.h>
#include <scapix/java_api/sun/security/util/math/IntegerFieldModuloP.h>
#include <scapix/java_api/sun/security/util/math/MutableIntegerModuloP.h>
#include <scapix/java_api/sun/security/util/math/IntegerModuloP_MultiplicativeInverser.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::util::math::IntegerModuloP : public jni::object_base<"sun/security/util/math/IntegerModuloP",
	java::lang::Object>
{
public:

	using MultiplicativeInverser = IntegerModuloP_MultiplicativeInverser;

	jni::ref<sun::security::util::math::IntegerFieldModuloP> getField() { return call_method<"getField", jni::ref<sun::security::util::math::IntegerFieldModuloP>>(); }
	jni::ref<java::math::BigInteger> asBigInteger() { return call_method<"asBigInteger", jni::ref<java::math::BigInteger>>(); }
	jni::ref<sun::security::util::math::ImmutableIntegerModuloP> fixed() { return call_method<"fixed", jni::ref<sun::security::util::math::ImmutableIntegerModuloP>>(); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> mutable_() { return call_method<"mutable", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(); }
	jni::ref<sun::security::util::math::ImmutableIntegerModuloP> add(jni::ref<sun::security::util::math::IntegerModuloP> p1) { return call_method<"add", jni::ref<sun::security::util::math::ImmutableIntegerModuloP>>(p1); }
	jni::ref<sun::security::util::math::ImmutableIntegerModuloP> additiveInverse() { return call_method<"additiveInverse", jni::ref<sun::security::util::math::ImmutableIntegerModuloP>>(); }
	jni::ref<sun::security::util::math::ImmutableIntegerModuloP> multiply(jni::ref<sun::security::util::math::IntegerModuloP> p1) { return call_method<"multiply", jni::ref<sun::security::util::math::ImmutableIntegerModuloP>>(p1); }
	jni::ref<jni::array<jbyte>> addModPowerTwo(jni::ref<sun::security::util::math::IntegerModuloP> b, jint len) { return call_method<"addModPowerTwo", jni::ref<jni::array<jbyte>>>(b, len); }
	void addModPowerTwo(jni::ref<sun::security::util::math::IntegerModuloP> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"addModPowerTwo", void>(p1, p2); }
	jni::ref<jni::array<jbyte>> asByteArray(jint len) { return call_method<"asByteArray", jni::ref<jni::array<jbyte>>>(len); }
	void asByteArray(jni::ref<jni::array<jbyte>> p1) { return call_method<"asByteArray", void>(p1); }
	jni::ref<jni::array<jlong>> getLimbs() { return call_method<"getLimbs", jni::ref<jni::array<jlong>>>(); }
	jni::ref<sun::security::util::math::ImmutableIntegerModuloP> multiplicativeInverse() { return call_method<"multiplicativeInverse", jni::ref<sun::security::util::math::ImmutableIntegerModuloP>>(); }
	jni::ref<sun::security::util::math::ImmutableIntegerModuloP> subtract(jni::ref<sun::security::util::math::IntegerModuloP> b) { return call_method<"subtract", jni::ref<sun::security::util::math::ImmutableIntegerModuloP>>(b); }
	jni::ref<sun::security::util::math::ImmutableIntegerModuloP> square() { return call_method<"square", jni::ref<sun::security::util::math::ImmutableIntegerModuloP>>(); }
	jni::ref<sun::security::util::math::ImmutableIntegerModuloP> pow(jni::ref<java::math::BigInteger> b) { return call_method<"pow", jni::ref<sun::security::util::math::ImmutableIntegerModuloP>>(b); }

protected:

	IntegerModuloP(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTEGERMODULOP
