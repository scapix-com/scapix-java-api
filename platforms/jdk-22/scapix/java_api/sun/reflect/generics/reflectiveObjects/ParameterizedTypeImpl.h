// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/reflect/ParameterizedType.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_PARAMETERIZEDTYPEIMPL_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_PARAMETERIZEDTYPEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect::generics::reflectiveObjects { class ParameterizedTypeImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::generics::reflectiveObjects::ParameterizedTypeImpl>
{
	static constexpr fixed_string class_name = "sun/reflect/generics/reflectiveObjects/ParameterizedTypeImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::reflect::ParameterizedType>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_PARAMETERIZEDTYPEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_PARAMETERIZEDTYPEIMPL)
#define SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_PARAMETERIZEDTYPEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Type.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::reflect::generics::reflectiveObjects::ParameterizedTypeImpl : public jni::object_base<"sun/reflect/generics/reflectiveObjects/ParameterizedTypeImpl",
	java::lang::Object,
	java::lang::reflect::ParameterizedType>
{
public:

	static jni::ref<sun::reflect::generics::reflectiveObjects::ParameterizedTypeImpl> make(jni::ref<java::lang::Class> rawType, jni::ref<jni::array<java::lang::reflect::Type>> actualTypeArguments, jni::ref<java::lang::reflect::Type> ownerType) { return call_static_method<"make", jni::ref<sun::reflect::generics::reflectiveObjects::ParameterizedTypeImpl>>(rawType, actualTypeArguments, ownerType); }
	jni::ref<jni::array<java::lang::reflect::Type>> getActualTypeArguments() { return call_method<"getActualTypeArguments", jni::ref<jni::array<java::lang::reflect::Type>>>(); }
	jni::ref<java::lang::Class> getRawType() { return call_method<"getRawType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::reflect::Type> getOwnerType() { return call_method<"getOwnerType", jni::ref<java::lang::reflect::Type>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ParameterizedTypeImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_PARAMETERIZEDTYPEIMPL
