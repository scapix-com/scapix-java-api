// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/text/BreakIterator.h>

#ifndef SCAPIX_JAVA_API_SUN_TEXT_RULEBASEDBREAKITERATOR_FWD
#define SCAPIX_JAVA_API_SUN_TEXT_RULEBASEDBREAKITERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::text { class RuleBasedBreakIterator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::text::RuleBasedBreakIterator>
{
	static constexpr fixed_string class_name = "sun/text/RuleBasedBreakIterator";
	using base_classes = std::tuple<scapix::java_api::java::text::BreakIterator>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_RULEBASEDBREAKITERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_TEXT_RULEBASEDBREAKITERATOR)
#define SCAPIX_JAVA_API_SUN_TEXT_RULEBASEDBREAKITERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/CharacterIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::text::RuleBasedBreakIterator : public jni::object_base<"sun/text/RuleBasedBreakIterator",
	java::text::BreakIterator>
{
public:

	static jni::ref<sun::text::RuleBasedBreakIterator> new_object(jni::ref<java::lang::String> ruleFile, jni::ref<jni::array<jbyte>> ruleData) { return base_::new_object(ruleFile, ruleData); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean equals(jni::ref<java::lang::Object> that) { return call_method<"equals", jboolean>(that); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint first() { return call_method<"first", jint>(); }
	jint last() { return call_method<"last", jint>(); }
	jint next(jint n) { return call_method<"next", jint>(n); }
	jint next() { return call_method<"next", jint>(); }
	jint previous() { return call_method<"previous", jint>(); }
	jint following(jint offset) { return call_method<"following", jint>(offset); }
	jint preceding(jint offset) { return call_method<"preceding", jint>(offset); }
	jboolean isBoundary(jint offset) { return call_method<"isBoundary", jboolean>(offset); }
	jint current() { return call_method<"current", jint>(); }
	jni::ref<java::text::CharacterIterator> getText() { return call_method<"getText", jni::ref<java::text::CharacterIterator>>(); }
	void setText(jni::ref<java::text::CharacterIterator> newText) { return call_method<"setText", void>(newText); }

protected:

	RuleBasedBreakIterator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TEXT_RULEBASEDBREAKITERATOR
