// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TEXT_DECIMALFORMATSYMBOLS_FWD
#define SCAPIX_JAVA_API_JAVA_TEXT_DECIMALFORMATSYMBOLS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::text { class DecimalFormatSymbols; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::text::DecimalFormatSymbols>
{
	static constexpr fixed_string class_name = "java/text/DecimalFormatSymbols";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_DECIMALFORMATSYMBOLS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TEXT_DECIMALFORMATSYMBOLS)
#define SCAPIX_JAVA_API_JAVA_TEXT_DECIMALFORMATSYMBOLS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Currency.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::text::DecimalFormatSymbols : public jni::object_base<"java/text/DecimalFormatSymbols",
	java::lang::Object,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static jni::ref<java::text::DecimalFormatSymbols> new_object() { return base_::new_object(); }
	static jni::ref<java::text::DecimalFormatSymbols> new_object(jni::ref<java::util::Locale> locale) { return base_::new_object(locale); }
	static jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_static_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }
	static jni::ref<java::text::DecimalFormatSymbols> getInstance() { return call_static_method<"getInstance", jni::ref<java::text::DecimalFormatSymbols>>(); }
	static jni::ref<java::text::DecimalFormatSymbols> getInstance(jni::ref<java::util::Locale> locale) { return call_static_method<"getInstance", jni::ref<java::text::DecimalFormatSymbols>>(locale); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	jchar getZeroDigit() { return call_method<"getZeroDigit", jchar>(); }
	void setZeroDigit(jchar zeroDigit) { return call_method<"setZeroDigit", void>(zeroDigit); }
	jchar getGroupingSeparator() { return call_method<"getGroupingSeparator", jchar>(); }
	void setGroupingSeparator(jchar groupingSeparator) { return call_method<"setGroupingSeparator", void>(groupingSeparator); }
	jchar getDecimalSeparator() { return call_method<"getDecimalSeparator", jchar>(); }
	void setDecimalSeparator(jchar decimalSeparator) { return call_method<"setDecimalSeparator", void>(decimalSeparator); }
	jchar getPerMill() { return call_method<"getPerMill", jchar>(); }
	void setPerMill(jchar perMill) { return call_method<"setPerMill", void>(perMill); }
	jchar getPercent() { return call_method<"getPercent", jchar>(); }
	void setPercent(jchar percent) { return call_method<"setPercent", void>(percent); }
	jchar getDigit() { return call_method<"getDigit", jchar>(); }
	void setDigit(jchar digit) { return call_method<"setDigit", void>(digit); }
	jchar getPatternSeparator() { return call_method<"getPatternSeparator", jchar>(); }
	void setPatternSeparator(jchar patternSeparator) { return call_method<"setPatternSeparator", void>(patternSeparator); }
	jni::ref<java::lang::String> getInfinity() { return call_method<"getInfinity", jni::ref<java::lang::String>>(); }
	void setInfinity(jni::ref<java::lang::String> infinity) { return call_method<"setInfinity", void>(infinity); }
	jni::ref<java::lang::String> getNaN() { return call_method<"getNaN", jni::ref<java::lang::String>>(); }
	void setNaN(jni::ref<java::lang::String> NaN) { return call_method<"setNaN", void>(NaN); }
	jchar getMinusSign() { return call_method<"getMinusSign", jchar>(); }
	void setMinusSign(jchar minusSign) { return call_method<"setMinusSign", void>(minusSign); }
	jni::ref<java::lang::String> getCurrencySymbol() { return call_method<"getCurrencySymbol", jni::ref<java::lang::String>>(); }
	void setCurrencySymbol(jni::ref<java::lang::String> currency) { return call_method<"setCurrencySymbol", void>(currency); }
	jni::ref<java::lang::String> getInternationalCurrencySymbol() { return call_method<"getInternationalCurrencySymbol", jni::ref<java::lang::String>>(); }
	void setInternationalCurrencySymbol(jni::ref<java::lang::String> currencyCode) { return call_method<"setInternationalCurrencySymbol", void>(currencyCode); }
	jni::ref<java::util::Currency> getCurrency() { return call_method<"getCurrency", jni::ref<java::util::Currency>>(); }
	void setCurrency(jni::ref<java::util::Currency> currency) { return call_method<"setCurrency", void>(currency); }
	jchar getMonetaryDecimalSeparator() { return call_method<"getMonetaryDecimalSeparator", jchar>(); }
	void setMonetaryDecimalSeparator(jchar sep) { return call_method<"setMonetaryDecimalSeparator", void>(sep); }
	jni::ref<java::lang::String> getExponentSeparator() { return call_method<"getExponentSeparator", jni::ref<java::lang::String>>(); }
	void setExponentSeparator(jni::ref<java::lang::String> exp) { return call_method<"setExponentSeparator", void>(exp); }
	jchar getMonetaryGroupingSeparator() { return call_method<"getMonetaryGroupingSeparator", jchar>(); }
	void setMonetaryGroupingSeparator(jchar monetaryGroupingSeparator) { return call_method<"setMonetaryGroupingSeparator", void>(monetaryGroupingSeparator); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	DecimalFormatSymbols(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_DECIMALFORMATSYMBOLS
