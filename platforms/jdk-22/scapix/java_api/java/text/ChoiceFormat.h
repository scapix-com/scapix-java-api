// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/text/NumberFormat.h>

#ifndef SCAPIX_JAVA_API_JAVA_TEXT_CHOICEFORMAT_FWD
#define SCAPIX_JAVA_API_JAVA_TEXT_CHOICEFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::text { class ChoiceFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::text::ChoiceFormat>
{
	static constexpr fixed_string class_name = "java/text/ChoiceFormat";
	using base_classes = std::tuple<scapix::java_api::java::text::NumberFormat>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_CHOICEFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TEXT_CHOICEFORMAT)
#define SCAPIX_JAVA_API_JAVA_TEXT_CHOICEFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::text::ChoiceFormat : public jni::object_base<"java/text/ChoiceFormat",
	java::text::NumberFormat>
{
public:

	void applyPattern(jni::ref<java::lang::String> newPattern) { return call_method<"applyPattern", void>(newPattern); }
	jni::ref<java::lang::String> toPattern() { return call_method<"toPattern", jni::ref<java::lang::String>>(); }
	static jni::ref<java::text::ChoiceFormat> new_object(jni::ref<java::lang::String> newPattern) { return base_::new_object(newPattern); }
	static jni::ref<java::text::ChoiceFormat> new_object(jni::ref<jni::array<jdouble>> limits, jni::ref<jni::array<java::lang::String>> formats) { return base_::new_object(limits, formats); }
	void setChoices(jni::ref<jni::array<jdouble>> limits, jni::ref<jni::array<java::lang::String>> formats) { return call_method<"setChoices", void>(limits, formats); }
	jni::ref<jni::array<jdouble>> getLimits() { return call_method<"getLimits", jni::ref<jni::array<jdouble>>>(); }
	jni::ref<jni::array<java::lang::Object>> getFormats() { return call_method<"getFormats", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<java::lang::StringBuffer> format(jlong number, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> toAppendTo) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(number, p2, toAppendTo); }
	jni::ref<java::lang::StringBuffer> format(jdouble number, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> toAppendTo) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(number, p2, toAppendTo); }
	jni::ref<java::lang::Number> parse(jni::ref<java::lang::String> text, jni::ref<java::text::ParsePosition> status) { return call_method<"parse", jni::ref<java::lang::Number>>(text, status); }
	static jdouble nextDouble(jdouble d) { return call_static_method<"nextDouble", jdouble>(d); }
	static jdouble previousDouble(jdouble d) { return call_static_method<"previousDouble", jdouble>(d); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	static jdouble nextDouble(jdouble d, jboolean p2) { return call_static_method<"nextDouble", jdouble>(d, p2); }

protected:

	ChoiceFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_CHOICEFORMAT
