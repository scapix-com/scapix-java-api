// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/nio/file/Watchable.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_FILE_PATH_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_FILE_PATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::file { class Path; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::file::Path>
{
	static constexpr fixed_string class_name = "java/nio/file/Path";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable, scapix::java_api::java::lang::Iterable, scapix::java_api::java::nio::file::Watchable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FILE_PATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_FILE_PATH)
#define SCAPIX_JAVA_API_JAVA_NIO_FILE_PATH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/nio/file/FileSystem.h>
#include <scapix/java_api/java/nio/file/LinkOption.h>
#include <scapix/java_api/java/nio/file/WatchEvent_Kind.h>
#include <scapix/java_api/java/nio/file/WatchEvent_Modifier.h>
#include <scapix/java_api/java/nio/file/WatchKey.h>
#include <scapix/java_api/java/nio/file/WatchService.h>
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::file::Path : public jni::object_base<"java/nio/file/Path",
	java::lang::Object,
	java::lang::Comparable,
	java::lang::Iterable,
	java::nio::file::Watchable>
{
public:

	static jni::ref<java::nio::file::Path> of(jni::ref<java::lang::String> first, jni::ref<jni::array<java::lang::String>> more) { return call_static_method<"of", jni::ref<java::nio::file::Path>>(first, more); }
	static jni::ref<java::nio::file::Path> of(jni::ref<java::net::URI> uri) { return call_static_method<"of", jni::ref<java::nio::file::Path>>(uri); }
	jni::ref<java::nio::file::FileSystem> getFileSystem() { return call_method<"getFileSystem", jni::ref<java::nio::file::FileSystem>>(); }
	jboolean isAbsolute() { return call_method<"isAbsolute", jboolean>(); }
	jni::ref<java::nio::file::Path> getRoot() { return call_method<"getRoot", jni::ref<java::nio::file::Path>>(); }
	jni::ref<java::nio::file::Path> getFileName() { return call_method<"getFileName", jni::ref<java::nio::file::Path>>(); }
	jni::ref<java::nio::file::Path> getParent() { return call_method<"getParent", jni::ref<java::nio::file::Path>>(); }
	jint getNameCount() { return call_method<"getNameCount", jint>(); }
	jni::ref<java::nio::file::Path> getName(jint p1) { return call_method<"getName", jni::ref<java::nio::file::Path>>(p1); }
	jni::ref<java::nio::file::Path> subpath(jint p1, jint p2) { return call_method<"subpath", jni::ref<java::nio::file::Path>>(p1, p2); }
	jboolean startsWith(jni::ref<java::nio::file::Path> p1) { return call_method<"startsWith", jboolean>(p1); }
	jboolean startsWith(jni::ref<java::lang::String> other) { return call_method<"startsWith", jboolean>(other); }
	jboolean endsWith(jni::ref<java::nio::file::Path> p1) { return call_method<"endsWith", jboolean>(p1); }
	jboolean endsWith(jni::ref<java::lang::String> other) { return call_method<"endsWith", jboolean>(other); }
	jni::ref<java::nio::file::Path> normalize() { return call_method<"normalize", jni::ref<java::nio::file::Path>>(); }
	jni::ref<java::nio::file::Path> resolve(jni::ref<java::nio::file::Path> p1) { return call_method<"resolve", jni::ref<java::nio::file::Path>>(p1); }
	jni::ref<java::nio::file::Path> resolve(jni::ref<java::lang::String> other) { return call_method<"resolve", jni::ref<java::nio::file::Path>>(other); }
	jni::ref<java::nio::file::Path> resolve(jni::ref<java::nio::file::Path> first, jni::ref<jni::array<java::nio::file::Path>> more) { return call_method<"resolve", jni::ref<java::nio::file::Path>>(first, more); }
	jni::ref<java::nio::file::Path> resolve(jni::ref<java::lang::String> first, jni::ref<jni::array<java::lang::String>> more) { return call_method<"resolve", jni::ref<java::nio::file::Path>>(first, more); }
	jni::ref<java::nio::file::Path> resolveSibling(jni::ref<java::nio::file::Path> other) { return call_method<"resolveSibling", jni::ref<java::nio::file::Path>>(other); }
	jni::ref<java::nio::file::Path> resolveSibling(jni::ref<java::lang::String> other) { return call_method<"resolveSibling", jni::ref<java::nio::file::Path>>(other); }
	jni::ref<java::nio::file::Path> relativize(jni::ref<java::nio::file::Path> p1) { return call_method<"relativize", jni::ref<java::nio::file::Path>>(p1); }
	jni::ref<java::net::URI> toUri() { return call_method<"toUri", jni::ref<java::net::URI>>(); }
	jni::ref<java::nio::file::Path> toAbsolutePath() { return call_method<"toAbsolutePath", jni::ref<java::nio::file::Path>>(); }
	jni::ref<java::nio::file::Path> toRealPath(jni::ref<jni::array<java::nio::file::LinkOption>> p1) { return call_method<"toRealPath", jni::ref<java::nio::file::Path>>(p1); }
	jni::ref<java::io::File> toFile() { return call_method<"toFile", jni::ref<java::io::File>>(); }
	jni::ref<java::nio::file::WatchKey> register_(jni::ref<java::nio::file::WatchService> p1, jni::ref<jni::array<java::nio::file::WatchEvent_Kind>> p2, jni::ref<jni::array<java::nio::file::WatchEvent_Modifier>> p3) { return call_method<"register", jni::ref<java::nio::file::WatchKey>>(p1, p2, p3); }
	jni::ref<java::nio::file::WatchKey> register_(jni::ref<java::nio::file::WatchService> watcher, jni::ref<jni::array<java::nio::file::WatchEvent_Kind>> events) { return call_method<"register", jni::ref<java::nio::file::WatchKey>>(watcher, events); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jint compareTo(jni::ref<java::nio::file::Path> p1) { return call_method<"compareTo", jint>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Path(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FILE_PATH
