// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_MATH_BIGINTEGER_FWD
#define SCAPIX_JAVA_API_JAVA_MATH_BIGINTEGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::math { class BigInteger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::math::BigInteger>
{
	static constexpr fixed_string class_name = "java/math/BigInteger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Number, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_MATH_BIGINTEGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_MATH_BIGINTEGER)
#define SCAPIX_JAVA_API_JAVA_MATH_BIGINTEGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Random.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::math::BigInteger : public jni::object_base<"java/math/BigInteger",
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jni::ref<java::math::BigInteger> ZERO() { return get_static_field<"ZERO", jni::ref<java::math::BigInteger>>(); }
	static jni::ref<java::math::BigInteger> ONE() { return get_static_field<"ONE", jni::ref<java::math::BigInteger>>(); }
	static jni::ref<java::math::BigInteger> TWO() { return get_static_field<"TWO", jni::ref<java::math::BigInteger>>(); }
	static jni::ref<java::math::BigInteger> TEN() { return get_static_field<"TEN", jni::ref<java::math::BigInteger>>(); }

	static jni::ref<java::math::BigInteger> new_object(jni::ref<jni::array<jbyte>> val, jint off, jint len) { return base_::new_object(val, off, len); }
	static jni::ref<java::math::BigInteger> new_object(jni::ref<jni::array<jbyte>> val) { return base_::new_object(val); }
	static jni::ref<java::math::BigInteger> new_object(jint signum, jni::ref<jni::array<jbyte>> magnitude, jint off, jint len) { return base_::new_object(signum, magnitude, off, len); }
	static jni::ref<java::math::BigInteger> new_object(jint signum, jni::ref<jni::array<jbyte>> magnitude) { return base_::new_object(signum, magnitude); }
	static jni::ref<java::math::BigInteger> new_object(jni::ref<java::lang::String> val, jint radix) { return base_::new_object(val, radix); }
	static jni::ref<java::math::BigInteger> new_object(jni::ref<java::lang::String> val) { return base_::new_object(val); }
	static jni::ref<java::math::BigInteger> new_object(jint numBits, jni::ref<java::util::Random> rnd) { return base_::new_object(numBits, rnd); }
	static jni::ref<java::math::BigInteger> new_object(jint bitLength, jint certainty, jni::ref<java::util::Random> rnd) { return base_::new_object(bitLength, certainty, rnd); }
	static jni::ref<java::math::BigInteger> probablePrime(jint bitLength, jni::ref<java::util::Random> rnd) { return call_static_method<"probablePrime", jni::ref<java::math::BigInteger>>(bitLength, rnd); }
	jni::ref<java::math::BigInteger> nextProbablePrime() { return call_method<"nextProbablePrime", jni::ref<java::math::BigInteger>>(); }
	static jni::ref<java::math::BigInteger> valueOf(jlong val) { return call_static_method<"valueOf", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> add(jni::ref<java::math::BigInteger> val) { return call_method<"add", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> subtract(jni::ref<java::math::BigInteger> val) { return call_method<"subtract", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> multiply(jni::ref<java::math::BigInteger> val) { return call_method<"multiply", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> parallelMultiply(jni::ref<java::math::BigInteger> val) { return call_method<"parallelMultiply", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> divide(jni::ref<java::math::BigInteger> val) { return call_method<"divide", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<jni::array<java::math::BigInteger>> divideAndRemainder(jni::ref<java::math::BigInteger> val) { return call_method<"divideAndRemainder", jni::ref<jni::array<java::math::BigInteger>>>(val); }
	jni::ref<java::math::BigInteger> remainder(jni::ref<java::math::BigInteger> val) { return call_method<"remainder", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> pow(jint exponent) { return call_method<"pow", jni::ref<java::math::BigInteger>>(exponent); }
	jni::ref<java::math::BigInteger> sqrt() { return call_method<"sqrt", jni::ref<java::math::BigInteger>>(); }
	jni::ref<jni::array<java::math::BigInteger>> sqrtAndRemainder() { return call_method<"sqrtAndRemainder", jni::ref<jni::array<java::math::BigInteger>>>(); }
	jni::ref<java::math::BigInteger> gcd(jni::ref<java::math::BigInteger> val) { return call_method<"gcd", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> abs() { return call_method<"abs", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> negate() { return call_method<"negate", jni::ref<java::math::BigInteger>>(); }
	jint signum() { return call_method<"signum", jint>(); }
	jni::ref<java::math::BigInteger> mod(jni::ref<java::math::BigInteger> m) { return call_method<"mod", jni::ref<java::math::BigInteger>>(m); }
	jni::ref<java::math::BigInteger> modPow(jni::ref<java::math::BigInteger> exponent, jni::ref<java::math::BigInteger> m) { return call_method<"modPow", jni::ref<java::math::BigInteger>>(exponent, m); }
	jni::ref<java::math::BigInteger> modInverse(jni::ref<java::math::BigInteger> m) { return call_method<"modInverse", jni::ref<java::math::BigInteger>>(m); }
	jni::ref<java::math::BigInteger> shiftLeft(jint n) { return call_method<"shiftLeft", jni::ref<java::math::BigInteger>>(n); }
	jni::ref<java::math::BigInteger> shiftRight(jint n) { return call_method<"shiftRight", jni::ref<java::math::BigInteger>>(n); }
	jni::ref<java::math::BigInteger> and_(jni::ref<java::math::BigInteger> val) { return call_method<"and", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> or_(jni::ref<java::math::BigInteger> val) { return call_method<"or", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> xor_(jni::ref<java::math::BigInteger> val) { return call_method<"xor", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> not_() { return call_method<"not", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> andNot(jni::ref<java::math::BigInteger> val) { return call_method<"andNot", jni::ref<java::math::BigInteger>>(val); }
	jboolean testBit(jint n) { return call_method<"testBit", jboolean>(n); }
	jni::ref<java::math::BigInteger> setBit(jint n) { return call_method<"setBit", jni::ref<java::math::BigInteger>>(n); }
	jni::ref<java::math::BigInteger> clearBit(jint n) { return call_method<"clearBit", jni::ref<java::math::BigInteger>>(n); }
	jni::ref<java::math::BigInteger> flipBit(jint n) { return call_method<"flipBit", jni::ref<java::math::BigInteger>>(n); }
	jint getLowestSetBit() { return call_method<"getLowestSetBit", jint>(); }
	jint bitLength() { return call_method<"bitLength", jint>(); }
	jint bitCount() { return call_method<"bitCount", jint>(); }
	jboolean isProbablePrime(jint certainty) { return call_method<"isProbablePrime", jboolean>(certainty); }
	jint compareTo(jni::ref<java::math::BigInteger> val) { return call_method<"compareTo", jint>(val); }
	jboolean equals(jni::ref<java::lang::Object> x) { return call_method<"equals", jboolean>(x); }
	jni::ref<java::math::BigInteger> min(jni::ref<java::math::BigInteger> val) { return call_method<"min", jni::ref<java::math::BigInteger>>(val); }
	jni::ref<java::math::BigInteger> max(jni::ref<java::math::BigInteger> val) { return call_method<"max", jni::ref<java::math::BigInteger>>(val); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString(jint radix) { return call_method<"toString", jni::ref<java::lang::String>>(radix); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> toByteArray() { return call_method<"toByteArray", jni::ref<jni::array<jbyte>>>(); }
	jint intValue() { return call_method<"intValue", jint>(); }
	jlong longValue() { return call_method<"longValue", jlong>(); }
	jfloat floatValue() { return call_method<"floatValue", jfloat>(); }
	jdouble doubleValue() { return call_method<"doubleValue", jdouble>(); }
	jlong longValueExact() { return call_method<"longValueExact", jlong>(); }
	jint intValueExact() { return call_method<"intValueExact", jint>(); }
	jshort shortValueExact() { return call_method<"shortValueExact", jshort>(); }
	jbyte byteValueExact() { return call_method<"byteValueExact", jbyte>(); }

protected:

	BigInteger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_MATH_BIGINTEGER
