// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class Socket_SocketInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::Socket_SocketInputStream>
{
	static constexpr fixed_string class_name = "java/net/Socket$SocketInputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::InputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETINPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETINPUTSTREAM

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::net::Socket_SocketInputStream : public jni::object_base<"java/net/Socket$SocketInputStream",
	java::io::InputStream>
{
public:

	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"read", jint>(b, off, len); }
	jint available() { return call_method<"available", jint>(); }
	void close() { return call_method<"close", void>(); }

protected:

	Socket_SocketInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETINPUTSTREAM
