// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_HOSTPORTRANGE_FWD
#define SCAPIX_JAVA_API_JAVA_NET_HOSTPORTRANGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class HostPortrange; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::HostPortrange>
{
	static constexpr fixed_string class_name = "java/net/HostPortrange";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_HOSTPORTRANGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_HOSTPORTRANGE)
#define SCAPIX_JAVA_API_JAVA_NET_HOSTPORTRANGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::net::HostPortrange : public jni::object_base<"java/net/HostPortrange",
	java::lang::Object>
{
public:

	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean literal() { return call_method<"literal", jboolean>(); }
	jboolean ipv4Literal() { return call_method<"ipv4Literal", jboolean>(); }
	jboolean ipv6Literal() { return call_method<"ipv6Literal", jboolean>(); }
	jni::ref<java::lang::String> hostname() { return call_method<"hostname", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jint>> portrange() { return call_method<"portrange", jni::ref<jni::array<jint>>>(); }
	jboolean wildcard() { return call_method<"wildcard", jboolean>(); }

protected:

	HostPortrange(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_HOSTPORTRANGE
