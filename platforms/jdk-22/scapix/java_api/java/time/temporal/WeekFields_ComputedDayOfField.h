// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_WEEKFIELDS_COMPUTEDDAYOFFIELD_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_WEEKFIELDS_COMPUTEDDAYOFFIELD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::temporal { class WeekFields_ComputedDayOfField; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::temporal::WeekFields_ComputedDayOfField>
{
	static constexpr fixed_string class_name = "java/time/temporal/WeekFields$ComputedDayOfField";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::temporal::TemporalField>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_WEEKFIELDS_COMPUTEDDAYOFFIELD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_WEEKFIELDS_COMPUTEDDAYOFFIELD)
#define SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_WEEKFIELDS_COMPUTEDDAYOFFIELD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/format/ResolverStyle.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::time::temporal::WeekFields_ComputedDayOfField : public jni::object_base<"java/time/temporal/WeekFields$ComputedDayOfField",
	java::lang::Object,
	java::time::temporal::TemporalField>
{
public:

	jlong getFrom(jni::ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<"getFrom", jlong>(temporal); }
	jni::ref<java::time::temporal::Temporal> adjustInto(jni::ref<java::time::temporal::Temporal> temporal, jlong newValue) { return call_method<"adjustInto", jni::ref<java::time::temporal::Temporal>>(temporal, newValue); }
	jni::ref<java::time::chrono::ChronoLocalDate> resolve(jni::ref<java::util::Map> fieldValues, jni::ref<java::time::temporal::TemporalAccessor> partialTemporal, jni::ref<java::time::format::ResolverStyle> resolverStyle) { return call_method<"resolve", jni::ref<java::time::chrono::ChronoLocalDate>>(fieldValues, partialTemporal, resolverStyle); }
	jni::ref<java::lang::String> getDisplayName(jni::ref<java::util::Locale> locale) { return call_method<"getDisplayName", jni::ref<java::lang::String>>(locale); }
	jni::ref<java::time::temporal::TemporalUnit> getBaseUnit() { return call_method<"getBaseUnit", jni::ref<java::time::temporal::TemporalUnit>>(); }
	jni::ref<java::time::temporal::TemporalUnit> getRangeUnit() { return call_method<"getRangeUnit", jni::ref<java::time::temporal::TemporalUnit>>(); }
	jboolean isDateBased() { return call_method<"isDateBased", jboolean>(); }
	jboolean isTimeBased() { return call_method<"isTimeBased", jboolean>(); }
	jni::ref<java::time::temporal::ValueRange> range() { return call_method<"range", jni::ref<java::time::temporal::ValueRange>>(); }
	jboolean isSupportedBy(jni::ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<"isSupportedBy", jboolean>(temporal); }
	jni::ref<java::time::temporal::ValueRange> rangeRefinedBy(jni::ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<"rangeRefinedBy", jni::ref<java::time::temporal::ValueRange>>(temporal); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	WeekFields_ComputedDayOfField(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_TEMPORAL_WEEKFIELDS_COMPUTEDDAYOFFIELD
