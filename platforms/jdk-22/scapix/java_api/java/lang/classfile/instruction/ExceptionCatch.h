// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/classfile/PseudoInstruction.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_EXCEPTIONCATCH_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_EXCEPTIONCATCH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile::instruction { class ExceptionCatch; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::instruction::ExceptionCatch>
{
	static constexpr fixed_string class_name = "java/lang/classfile/instruction/ExceptionCatch";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::classfile::PseudoInstruction>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_EXCEPTIONCATCH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_EXCEPTIONCATCH)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_EXCEPTIONCATCH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/classfile/Label.h>
#include <scapix/java_api/java/util/Optional.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::instruction::ExceptionCatch : public jni::object_base<"java/lang/classfile/instruction/ExceptionCatch",
	java::lang::Object,
	java::lang::classfile::PseudoInstruction>
{
public:

	jni::ref<java::lang::classfile::Label> handler() { return call_method<"handler", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::lang::classfile::Label> tryStart() { return call_method<"tryStart", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::lang::classfile::Label> tryEnd() { return call_method<"tryEnd", jni::ref<java::lang::classfile::Label>>(); }
	jni::ref<java::util::Optional> catchType() { return call_method<"catchType", jni::ref<java::util::Optional>>(); }
	static jni::ref<java::lang::classfile::instruction::ExceptionCatch> of(jni::ref<java::lang::classfile::Label> handler, jni::ref<java::lang::classfile::Label> tryStart, jni::ref<java::lang::classfile::Label> tryEnd, jni::ref<java::util::Optional> catchTypeEntry) { return call_static_method<"of", jni::ref<java::lang::classfile::instruction::ExceptionCatch>>(handler, tryStart, tryEnd, catchTypeEntry); }
	static jni::ref<java::lang::classfile::instruction::ExceptionCatch> of(jni::ref<java::lang::classfile::Label> handler, jni::ref<java::lang::classfile::Label> tryStart, jni::ref<java::lang::classfile::Label> tryEnd) { return call_static_method<"of", jni::ref<java::lang::classfile::instruction::ExceptionCatch>>(handler, tryStart, tryEnd); }

protected:

	ExceptionCatch(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_EXCEPTIONCATCH
