// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/classfile/Instruction.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_FIELDINSTRUCTION_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_FIELDINSTRUCTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile::instruction { class FieldInstruction; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::instruction::FieldInstruction>
{
	static constexpr fixed_string class_name = "java/lang/classfile/instruction/FieldInstruction";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::classfile::Instruction>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_FIELDINSTRUCTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_FIELDINSTRUCTION)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_FIELDINSTRUCTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/classfile/Opcode.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ClassEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/FieldRefEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/NameAndTypeEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/Utf8Entry.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::instruction::FieldInstruction : public jni::object_base<"java/lang/classfile/instruction/FieldInstruction",
	java::lang::Object,
	java::lang::classfile::Instruction>
{
public:

	jni::ref<java::lang::classfile::constantpool::FieldRefEntry> field() { return call_method<"field", jni::ref<java::lang::classfile::constantpool::FieldRefEntry>>(); }
	jni::ref<java::lang::classfile::constantpool::ClassEntry> owner() { return call_method<"owner", jni::ref<java::lang::classfile::constantpool::ClassEntry>>(); }
	jni::ref<java::lang::classfile::constantpool::Utf8Entry> name() { return call_method<"name", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<java::lang::classfile::constantpool::Utf8Entry> type() { return call_method<"type", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<java::lang::constant::ClassDesc> typeSymbol() { return call_method<"typeSymbol", jni::ref<java::lang::constant::ClassDesc>>(); }
	static jni::ref<java::lang::classfile::instruction::FieldInstruction> of(jni::ref<java::lang::classfile::Opcode> op, jni::ref<java::lang::classfile::constantpool::FieldRefEntry> field) { return call_static_method<"of", jni::ref<java::lang::classfile::instruction::FieldInstruction>>(op, field); }
	static jni::ref<java::lang::classfile::instruction::FieldInstruction> of(jni::ref<java::lang::classfile::Opcode> op, jni::ref<java::lang::classfile::constantpool::ClassEntry> owner, jni::ref<java::lang::classfile::constantpool::Utf8Entry> name, jni::ref<java::lang::classfile::constantpool::Utf8Entry> type) { return call_static_method<"of", jni::ref<java::lang::classfile::instruction::FieldInstruction>>(op, owner, name, type); }
	static jni::ref<java::lang::classfile::instruction::FieldInstruction> of(jni::ref<java::lang::classfile::Opcode> op, jni::ref<java::lang::classfile::constantpool::ClassEntry> owner, jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> nameAndType) { return call_static_method<"of", jni::ref<java::lang::classfile::instruction::FieldInstruction>>(op, owner, nameAndType); }

protected:

	FieldInstruction(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_INSTRUCTION_FIELDINSTRUCTION
