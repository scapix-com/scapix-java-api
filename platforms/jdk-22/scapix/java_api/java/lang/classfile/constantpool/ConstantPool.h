// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Iterable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOL_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile::constantpool { class ConstantPool; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::constantpool::ConstantPool>
{
	static constexpr fixed_string class_name = "java/lang/classfile/constantpool/ConstantPool";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Iterable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOL)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/classfile/BootstrapMethodEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/PoolEntry.h>
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::constantpool::ConstantPool : public jni::object_base<"java/lang/classfile/constantpool/ConstantPool",
	java::lang::Object,
	java::lang::Iterable>
{
public:

	jni::ref<java::lang::classfile::constantpool::PoolEntry> entryByIndex(jint p1) { return call_method<"entryByIndex", jni::ref<java::lang::classfile::constantpool::PoolEntry>>(p1); }
	jint size() { return call_method<"size", jint>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::lang::classfile::BootstrapMethodEntry> bootstrapMethodEntry(jint p1) { return call_method<"bootstrapMethodEntry", jni::ref<java::lang::classfile::BootstrapMethodEntry>>(p1); }
	jint bootstrapMethodCount() { return call_method<"bootstrapMethodCount", jint>(); }

protected:

	ConstantPool(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOL
