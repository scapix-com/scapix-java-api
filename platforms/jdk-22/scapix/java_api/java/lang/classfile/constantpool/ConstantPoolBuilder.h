// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ConstantPool.h>
#include <scapix/java_api/java/lang/classfile/WritableElement.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOLBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOLBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile::constantpool { class ConstantPoolBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::constantpool::ConstantPoolBuilder>
{
	static constexpr fixed_string class_name = "java/lang/classfile/constantpool/ConstantPoolBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::classfile::constantpool::ConstantPool, scapix::java_api::java::lang::classfile::WritableElement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOLBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOLBUILDER)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOLBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/BootstrapMethodEntry.h>
#include <scapix/java_api/java/lang/classfile/BufWriter.h>
#include <scapix/java_api/java/lang/classfile/ClassModel.h>
#include <scapix/java_api/java/lang/classfile/constantpool/AnnotationConstantValueEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ClassEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ConstantDynamicEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ConstantValueEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/DoubleEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/FieldRefEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/FloatEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/IntegerEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/InterfaceMethodRefEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/InvokeDynamicEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/LoadableConstantEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/LongEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/MemberRefEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/MethodHandleEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/MethodRefEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/MethodTypeEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ModuleEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/NameAndTypeEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/PackageEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/StringEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/Utf8Entry.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/lang/constant/ConstantDesc.h>
#include <scapix/java_api/java/lang/constant/DirectMethodHandleDesc.h>
#include <scapix/java_api/java/lang/constant/DynamicCallSiteDesc.h>
#include <scapix/java_api/java/lang/constant/DynamicConstantDesc.h>
#include <scapix/java_api/java/lang/constant/MethodTypeDesc.h>
#include <scapix/java_api/java/lang/constant/ModuleDesc.h>
#include <scapix/java_api/java/lang/constant/PackageDesc.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::constantpool::ConstantPoolBuilder : public jni::object_base<"java/lang/classfile/constantpool/ConstantPoolBuilder",
	java::lang::Object,
	java::lang::classfile::constantpool::ConstantPool,
	java::lang::classfile::WritableElement>
{
public:

	static jni::ref<java::lang::classfile::constantpool::ConstantPoolBuilder> of(jni::ref<java::lang::classfile::ClassModel> classModel) { return call_static_method<"of", jni::ref<java::lang::classfile::constantpool::ConstantPoolBuilder>>(classModel); }
	static jni::ref<java::lang::classfile::constantpool::ConstantPoolBuilder> of() { return call_static_method<"of", jni::ref<java::lang::classfile::constantpool::ConstantPoolBuilder>>(); }
	jboolean canWriteDirect(jni::ref<java::lang::classfile::constantpool::ConstantPool> p1) { return call_method<"canWriteDirect", jboolean>(p1); }
	jboolean writeBootstrapMethods(jni::ref<java::lang::classfile::BufWriter> p1) { return call_method<"writeBootstrapMethods", jboolean>(p1); }
	jni::ref<java::lang::classfile::constantpool::Utf8Entry> utf8Entry(jni::ref<java::lang::String> p1) { return call_method<"utf8Entry", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::Utf8Entry> utf8Entry(jni::ref<java::lang::constant::ClassDesc> desc) { return call_method<"utf8Entry", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(desc); }
	jni::ref<java::lang::classfile::constantpool::Utf8Entry> utf8Entry(jni::ref<java::lang::constant::MethodTypeDesc> desc) { return call_method<"utf8Entry", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(desc); }
	jni::ref<java::lang::classfile::constantpool::ClassEntry> classEntry(jni::ref<java::lang::classfile::constantpool::Utf8Entry> p1) { return call_method<"classEntry", jni::ref<java::lang::classfile::constantpool::ClassEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::ClassEntry> classEntry(jni::ref<java::lang::constant::ClassDesc> classDesc) { return call_method<"classEntry", jni::ref<java::lang::classfile::constantpool::ClassEntry>>(classDesc); }
	jni::ref<java::lang::classfile::constantpool::PackageEntry> packageEntry(jni::ref<java::lang::classfile::constantpool::Utf8Entry> p1) { return call_method<"packageEntry", jni::ref<java::lang::classfile::constantpool::PackageEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::PackageEntry> packageEntry(jni::ref<java::lang::constant::PackageDesc> packageDesc) { return call_method<"packageEntry", jni::ref<java::lang::classfile::constantpool::PackageEntry>>(packageDesc); }
	jni::ref<java::lang::classfile::constantpool::ModuleEntry> moduleEntry(jni::ref<java::lang::classfile::constantpool::Utf8Entry> p1) { return call_method<"moduleEntry", jni::ref<java::lang::classfile::constantpool::ModuleEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::ModuleEntry> moduleEntry(jni::ref<java::lang::constant::ModuleDesc> moduleDesc) { return call_method<"moduleEntry", jni::ref<java::lang::classfile::constantpool::ModuleEntry>>(moduleDesc); }
	jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> nameAndTypeEntry(jni::ref<java::lang::classfile::constantpool::Utf8Entry> p1, jni::ref<java::lang::classfile::constantpool::Utf8Entry> p2) { return call_method<"nameAndTypeEntry", jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry>>(p1, p2); }
	jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> nameAndTypeEntry(jni::ref<java::lang::String> name, jni::ref<java::lang::constant::ClassDesc> type) { return call_method<"nameAndTypeEntry", jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry>>(name, type); }
	jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> nameAndTypeEntry(jni::ref<java::lang::String> name, jni::ref<java::lang::constant::MethodTypeDesc> type) { return call_method<"nameAndTypeEntry", jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry>>(name, type); }
	jni::ref<java::lang::classfile::constantpool::FieldRefEntry> fieldRefEntry(jni::ref<java::lang::classfile::constantpool::ClassEntry> p1, jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> p2) { return call_method<"fieldRefEntry", jni::ref<java::lang::classfile::constantpool::FieldRefEntry>>(p1, p2); }
	jni::ref<java::lang::classfile::constantpool::FieldRefEntry> fieldRefEntry(jni::ref<java::lang::constant::ClassDesc> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::constant::ClassDesc> type) { return call_method<"fieldRefEntry", jni::ref<java::lang::classfile::constantpool::FieldRefEntry>>(owner, name, type); }
	jni::ref<java::lang::classfile::constantpool::MethodRefEntry> methodRefEntry(jni::ref<java::lang::classfile::constantpool::ClassEntry> p1, jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> p2) { return call_method<"methodRefEntry", jni::ref<java::lang::classfile::constantpool::MethodRefEntry>>(p1, p2); }
	jni::ref<java::lang::classfile::constantpool::MethodRefEntry> methodRefEntry(jni::ref<java::lang::constant::ClassDesc> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::constant::MethodTypeDesc> type) { return call_method<"methodRefEntry", jni::ref<java::lang::classfile::constantpool::MethodRefEntry>>(owner, name, type); }
	jni::ref<java::lang::classfile::constantpool::InterfaceMethodRefEntry> interfaceMethodRefEntry(jni::ref<java::lang::classfile::constantpool::ClassEntry> p1, jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> p2) { return call_method<"interfaceMethodRefEntry", jni::ref<java::lang::classfile::constantpool::InterfaceMethodRefEntry>>(p1, p2); }
	jni::ref<java::lang::classfile::constantpool::InterfaceMethodRefEntry> interfaceMethodRefEntry(jni::ref<java::lang::constant::ClassDesc> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::constant::MethodTypeDesc> type) { return call_method<"interfaceMethodRefEntry", jni::ref<java::lang::classfile::constantpool::InterfaceMethodRefEntry>>(owner, name, type); }
	jni::ref<java::lang::classfile::constantpool::MethodTypeEntry> methodTypeEntry(jni::ref<java::lang::constant::MethodTypeDesc> p1) { return call_method<"methodTypeEntry", jni::ref<java::lang::classfile::constantpool::MethodTypeEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::MethodTypeEntry> methodTypeEntry(jni::ref<java::lang::classfile::constantpool::Utf8Entry> p1) { return call_method<"methodTypeEntry", jni::ref<java::lang::classfile::constantpool::MethodTypeEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::MethodHandleEntry> methodHandleEntry(jni::ref<java::lang::constant::DirectMethodHandleDesc> descriptor) { return call_method<"methodHandleEntry", jni::ref<java::lang::classfile::constantpool::MethodHandleEntry>>(descriptor); }
	jni::ref<java::lang::classfile::constantpool::MethodHandleEntry> methodHandleEntry(jint p1, jni::ref<java::lang::classfile::constantpool::MemberRefEntry> p2) { return call_method<"methodHandleEntry", jni::ref<java::lang::classfile::constantpool::MethodHandleEntry>>(p1, p2); }
	jni::ref<java::lang::classfile::constantpool::InvokeDynamicEntry> invokeDynamicEntry(jni::ref<java::lang::constant::DynamicCallSiteDesc> dcsd) { return call_method<"invokeDynamicEntry", jni::ref<java::lang::classfile::constantpool::InvokeDynamicEntry>>(dcsd); }
	jni::ref<java::lang::classfile::constantpool::InvokeDynamicEntry> invokeDynamicEntry(jni::ref<java::lang::classfile::BootstrapMethodEntry> p1, jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> p2) { return call_method<"invokeDynamicEntry", jni::ref<java::lang::classfile::constantpool::InvokeDynamicEntry>>(p1, p2); }
	jni::ref<java::lang::classfile::constantpool::ConstantDynamicEntry> constantDynamicEntry(jni::ref<java::lang::constant::DynamicConstantDesc> dcd) { return call_method<"constantDynamicEntry", jni::ref<java::lang::classfile::constantpool::ConstantDynamicEntry>>(dcd); }
	jni::ref<java::lang::classfile::constantpool::ConstantDynamicEntry> constantDynamicEntry(jni::ref<java::lang::classfile::BootstrapMethodEntry> p1, jni::ref<java::lang::classfile::constantpool::NameAndTypeEntry> p2) { return call_method<"constantDynamicEntry", jni::ref<java::lang::classfile::constantpool::ConstantDynamicEntry>>(p1, p2); }
	jni::ref<java::lang::classfile::constantpool::IntegerEntry> intEntry(jint p1) { return call_method<"intEntry", jni::ref<java::lang::classfile::constantpool::IntegerEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::FloatEntry> floatEntry(jfloat p1) { return call_method<"floatEntry", jni::ref<java::lang::classfile::constantpool::FloatEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::LongEntry> longEntry(jlong p1) { return call_method<"longEntry", jni::ref<java::lang::classfile::constantpool::LongEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::DoubleEntry> doubleEntry(jdouble p1) { return call_method<"doubleEntry", jni::ref<java::lang::classfile::constantpool::DoubleEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::StringEntry> stringEntry(jni::ref<java::lang::classfile::constantpool::Utf8Entry> p1) { return call_method<"stringEntry", jni::ref<java::lang::classfile::constantpool::StringEntry>>(p1); }
	jni::ref<java::lang::classfile::constantpool::StringEntry> stringEntry(jni::ref<java::lang::String> value) { return call_method<"stringEntry", jni::ref<java::lang::classfile::constantpool::StringEntry>>(value); }
	jni::ref<java::lang::classfile::constantpool::ConstantValueEntry> constantValueEntry(jni::ref<java::lang::constant::ConstantDesc> c) { return call_method<"constantValueEntry", jni::ref<java::lang::classfile::constantpool::ConstantValueEntry>>(c); }
	jni::ref<java::lang::classfile::constantpool::LoadableConstantEntry> loadableConstantEntry(jni::ref<java::lang::constant::ConstantDesc> c) { return call_method<"loadableConstantEntry", jni::ref<java::lang::classfile::constantpool::LoadableConstantEntry>>(c); }
	jni::ref<java::lang::classfile::constantpool::AnnotationConstantValueEntry> annotationConstantValueEntry(jni::ref<java::lang::constant::ConstantDesc> c) { return call_method<"annotationConstantValueEntry", jni::ref<java::lang::classfile::constantpool::AnnotationConstantValueEntry>>(c); }
	jni::ref<java::lang::classfile::BootstrapMethodEntry> bsmEntry(jni::ref<java::lang::constant::DirectMethodHandleDesc> methodReference, jni::ref<java::util::List> arguments) { return call_method<"bsmEntry", jni::ref<java::lang::classfile::BootstrapMethodEntry>>(methodReference, arguments); }
	jni::ref<java::lang::classfile::BootstrapMethodEntry> bsmEntry(jni::ref<java::lang::classfile::constantpool::MethodHandleEntry> p1, jni::ref<java::util::List> p2) { return call_method<"bsmEntry", jni::ref<java::lang::classfile::BootstrapMethodEntry>>(p1, p2); }

protected:

	ConstantPoolBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CONSTANTPOOL_CONSTANTPOOLBUILDER
