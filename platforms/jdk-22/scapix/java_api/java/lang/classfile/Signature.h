// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_SIGNATURE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_SIGNATURE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile { class Signature; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::Signature>
{
	static constexpr fixed_string class_name = "java/lang/classfile/Signature";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_SIGNATURE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_SIGNATURE)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_SIGNATURE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/lang/classfile/Signature_ArrayTypeSig.h>
#include <scapix/java_api/java/lang/classfile/Signature_BaseTypeSig.h>
#include <scapix/java_api/java/lang/classfile/Signature_TypeArg.h>
#include <scapix/java_api/java/lang/classfile/Signature_ClassTypeSig.h>
#include <scapix/java_api/java/lang/classfile/Signature_ThrowableSig.h>
#include <scapix/java_api/java/lang/classfile/Signature_TypeParam.h>
#include <scapix/java_api/java/lang/classfile/Signature_TypeVarSig.h>
#include <scapix/java_api/java/lang/classfile/Signature_RefTypeSig.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::Signature : public jni::object_base<"java/lang/classfile/Signature",
	java::lang::Object>
{
public:

	using ArrayTypeSig = Signature_ArrayTypeSig;
	using BaseTypeSig = Signature_BaseTypeSig;
	using TypeArg = Signature_TypeArg;
	using ClassTypeSig = Signature_ClassTypeSig;
	using ThrowableSig = Signature_ThrowableSig;
	using TypeParam = Signature_TypeParam;
	using TypeVarSig = Signature_TypeVarSig;
	using RefTypeSig = Signature_RefTypeSig;

	jni::ref<java::lang::String> signatureString() { return call_method<"signatureString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::classfile::Signature> parseFrom(jni::ref<java::lang::String> javaTypeSignature) { return call_static_method<"parseFrom", jni::ref<java::lang::classfile::Signature>>(javaTypeSignature); }
	static jni::ref<java::lang::classfile::Signature> of(jni::ref<java::lang::constant::ClassDesc> classDesc) { return call_static_method<"of", jni::ref<java::lang::classfile::Signature>>(classDesc); }

protected:

	Signature(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_SIGNATURE
