// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSHIERARCHYRESOLVER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSHIERARCHYRESOLVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile { class ClassHierarchyResolver; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::ClassHierarchyResolver>
{
	static constexpr fixed_string class_name = "java/lang/classfile/ClassHierarchyResolver";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSHIERARCHYRESOLVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSHIERARCHYRESOLVER)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSHIERARCHYRESOLVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/classfile/ClassHierarchyResolver_ClassHierarchyInfo.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/function/Function.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::ClassHierarchyResolver : public jni::object_base<"java/lang/classfile/ClassHierarchyResolver",
	java::lang::Object>
{
public:

	using ClassHierarchyInfo = ClassHierarchyResolver_ClassHierarchyInfo;

	static jni::ref<java::lang::classfile::ClassHierarchyResolver> defaultResolver() { return call_static_method<"defaultResolver", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(); }
	jni::ref<java::lang::classfile::ClassHierarchyResolver_ClassHierarchyInfo> getClassInfo(jni::ref<java::lang::constant::ClassDesc> p1) { return call_method<"getClassInfo", jni::ref<java::lang::classfile::ClassHierarchyResolver_ClassHierarchyInfo>>(p1); }
	jni::ref<java::lang::classfile::ClassHierarchyResolver> orElse(jni::ref<java::lang::classfile::ClassHierarchyResolver> other) { return call_method<"orElse", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(other); }
	jni::ref<java::lang::classfile::ClassHierarchyResolver> cached(jni::ref<java::util::function::Supplier> cacheFactory) { return call_method<"cached", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(cacheFactory); }
	jni::ref<java::lang::classfile::ClassHierarchyResolver> cached() { return call_method<"cached", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(); }
	static jni::ref<java::lang::classfile::ClassHierarchyResolver> ofResourceParsing(jni::ref<java::util::function::Function> classStreamResolver) { return call_static_method<"ofResourceParsing", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(classStreamResolver); }
	static jni::ref<java::lang::classfile::ClassHierarchyResolver> ofResourceParsing(jni::ref<java::lang::ClassLoader> loader) { return call_static_method<"ofResourceParsing", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(loader); }
	static jni::ref<java::lang::classfile::ClassHierarchyResolver> of(jni::ref<java::util::Collection> interfaces, jni::ref<java::util::Map> classToSuperClass) { return call_static_method<"of", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(interfaces, classToSuperClass); }
	static jni::ref<java::lang::classfile::ClassHierarchyResolver> ofClassLoading(jni::ref<java::lang::ClassLoader> loader) { return call_static_method<"ofClassLoading", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(loader); }
	static jni::ref<java::lang::classfile::ClassHierarchyResolver> ofClassLoading(jni::ref<java::lang::invoke::MethodHandles_Lookup> lookup) { return call_static_method<"ofClassLoading", jni::ref<java::lang::classfile::ClassHierarchyResolver>>(lookup); }

protected:

	ClassHierarchyResolver(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSHIERARCHYRESOLVER
