// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSFILETRANSFORM_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSFILETRANSFORM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile { class ClassFileTransform; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::ClassFileTransform>
{
	static constexpr fixed_string class_name = "java/lang/classfile/ClassFileTransform";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSFILETRANSFORM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSFILETRANSFORM)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSFILETRANSFORM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/classfile/ClassFileBuilder.h>
#include <scapix/java_api/java/lang/classfile/ClassFileElement.h>
#include <scapix/java_api/java/lang/classfile/ClassFileTransform_ResolvedTransform.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::ClassFileTransform : public jni::object_base<"java/lang/classfile/ClassFileTransform",
	java::lang::Object>
{
public:

	using ResolvedTransform = ClassFileTransform_ResolvedTransform;

	void accept(jni::ref<java::lang::classfile::ClassFileBuilder> p1, jni::ref<java::lang::classfile::ClassFileElement> p2) { return call_method<"accept", void>(p1, p2); }
	void atEnd(jni::ref<java::lang::classfile::ClassFileBuilder> builder) { return call_method<"atEnd", void>(builder); }
	void atStart(jni::ref<java::lang::classfile::ClassFileBuilder> builder) { return call_method<"atStart", void>(builder); }
	jni::ref<java::lang::classfile::ClassFileTransform> andThen(jni::ref<java::lang::classfile::ClassFileTransform> p1) { return call_method<"andThen", jni::ref<java::lang::classfile::ClassFileTransform>>(p1); }
	jni::ref<java::lang::classfile::ClassFileTransform_ResolvedTransform> resolve(jni::ref<java::lang::classfile::ClassFileBuilder> p1) { return call_method<"resolve", jni::ref<java::lang::classfile::ClassFileTransform_ResolvedTransform>>(p1); }

protected:

	ClassFileTransform(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSFILETRANSFORM
