// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_METHODSIGNATURE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_METHODSIGNATURE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile { class MethodSignature; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::MethodSignature>
{
	static constexpr fixed_string class_name = "java/lang/classfile/MethodSignature";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_METHODSIGNATURE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_METHODSIGNATURE)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_METHODSIGNATURE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/Signature.h>
#include <scapix/java_api/java/lang/constant/MethodTypeDesc.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::MethodSignature : public jni::object_base<"java/lang/classfile/MethodSignature",
	java::lang::Object>
{
public:

	jni::ref<java::util::List> typeParameters() { return call_method<"typeParameters", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> arguments() { return call_method<"arguments", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::classfile::Signature> result() { return call_method<"result", jni::ref<java::lang::classfile::Signature>>(); }
	jni::ref<java::util::List> throwableSignatures() { return call_method<"throwableSignatures", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> signatureString() { return call_method<"signatureString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::classfile::MethodSignature> of(jni::ref<java::lang::constant::MethodTypeDesc> methodDescriptor) { return call_static_method<"of", jni::ref<java::lang::classfile::MethodSignature>>(methodDescriptor); }
	static jni::ref<java::lang::classfile::MethodSignature> of(jni::ref<java::lang::classfile::Signature> result, jni::ref<jni::array<java::lang::classfile::Signature>> arguments) { return call_static_method<"of", jni::ref<java::lang::classfile::MethodSignature>>(result, arguments); }
	static jni::ref<java::lang::classfile::MethodSignature> of(jni::ref<java::util::List> typeParameters, jni::ref<java::util::List> exceptions, jni::ref<java::lang::classfile::Signature> result, jni::ref<jni::array<java::lang::classfile::Signature>> arguments) { return call_static_method<"of", jni::ref<java::lang::classfile::MethodSignature>>(typeParameters, exceptions, result, arguments); }
	static jni::ref<java::lang::classfile::MethodSignature> parseFrom(jni::ref<java::lang::String> methodSignature) { return call_static_method<"parseFrom", jni::ref<java::lang::classfile::MethodSignature>>(methodSignature); }

protected:

	MethodSignature(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_METHODSIGNATURE
