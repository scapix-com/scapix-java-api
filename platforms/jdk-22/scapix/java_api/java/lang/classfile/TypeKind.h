// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEKIND_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEKIND_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile { class TypeKind; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::TypeKind>
{
	static constexpr fixed_string class_name = "java/lang/classfile/TypeKind";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEKIND_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEKIND)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEKIND

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/TypeDescriptor_OfField.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::TypeKind : public jni::object_base<"java/lang/classfile/TypeKind",
	java::lang::Enum>
{
public:

	static jni::ref<java::lang::classfile::TypeKind> ByteType() { return get_static_field<"ByteType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> ShortType() { return get_static_field<"ShortType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> IntType() { return get_static_field<"IntType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> FloatType() { return get_static_field<"FloatType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> LongType() { return get_static_field<"LongType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> DoubleType() { return get_static_field<"DoubleType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> ReferenceType() { return get_static_field<"ReferenceType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> CharType() { return get_static_field<"CharType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> BooleanType() { return get_static_field<"BooleanType", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> VoidType() { return get_static_field<"VoidType", jni::ref<java::lang::classfile::TypeKind>>(); }

	static jni::ref<jni::array<java::lang::classfile::TypeKind>> values() { return call_static_method<"values", jni::ref<jni::array<java::lang::classfile::TypeKind>>>(); }
	static jni::ref<java::lang::classfile::TypeKind> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<java::lang::classfile::TypeKind>>(name); }
	jni::ref<java::lang::String> typeName() { return call_method<"typeName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> descriptor() { return call_method<"descriptor", jni::ref<java::lang::String>>(); }
	jint newarraycode() { return call_method<"newarraycode", jint>(); }
	jint slotSize() { return call_method<"slotSize", jint>(); }
	jni::ref<java::lang::classfile::TypeKind> asLoadable() { return call_method<"asLoadable", jni::ref<java::lang::classfile::TypeKind>>(); }
	static jni::ref<java::lang::classfile::TypeKind> fromNewArrayCode(jint newarraycode) { return call_static_method<"fromNewArrayCode", jni::ref<java::lang::classfile::TypeKind>>(newarraycode); }
	static jni::ref<java::lang::classfile::TypeKind> fromDescriptor(jni::ref<java::lang::CharSequence> s) { return call_static_method<"fromDescriptor", jni::ref<java::lang::classfile::TypeKind>>(s); }
	static jni::ref<java::lang::classfile::TypeKind> from(jni::ref<java::lang::invoke::TypeDescriptor_OfField> descriptor) { return call_static_method<"from", jni::ref<java::lang::classfile::TypeKind>>(descriptor); }

protected:

	TypeKind(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEKIND
