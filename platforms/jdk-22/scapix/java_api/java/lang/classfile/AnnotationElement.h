// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/classfile/WritableElement.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_ANNOTATIONELEMENT_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_ANNOTATIONELEMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile { class AnnotationElement; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::AnnotationElement>
{
	static constexpr fixed_string class_name = "java/lang/classfile/AnnotationElement";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::classfile::WritableElement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_ANNOTATIONELEMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_ANNOTATIONELEMENT)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_ANNOTATIONELEMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/Annotation.h>
#include <scapix/java_api/java/lang/classfile/AnnotationValue.h>
#include <scapix/java_api/java/lang/classfile/constantpool/Utf8Entry.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::AnnotationElement : public jni::object_base<"java/lang/classfile/AnnotationElement",
	java::lang::Object,
	java::lang::classfile::WritableElement>
{
public:

	jni::ref<java::lang::classfile::constantpool::Utf8Entry> name() { return call_method<"name", jni::ref<java::lang::classfile::constantpool::Utf8Entry>>(); }
	jni::ref<java::lang::classfile::AnnotationValue> value() { return call_method<"value", jni::ref<java::lang::classfile::AnnotationValue>>(); }
	static jni::ref<java::lang::classfile::AnnotationElement> of(jni::ref<java::lang::classfile::constantpool::Utf8Entry> name, jni::ref<java::lang::classfile::AnnotationValue> value) { return call_static_method<"of", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> of(jni::ref<java::lang::String> name, jni::ref<java::lang::classfile::AnnotationValue> value) { return call_static_method<"of", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofClass(jni::ref<java::lang::String> name, jni::ref<java::lang::constant::ClassDesc> value) { return call_static_method<"ofClass", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofString(jni::ref<java::lang::String> name, jni::ref<java::lang::String> value) { return call_static_method<"ofString", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofLong(jni::ref<java::lang::String> name, jlong value) { return call_static_method<"ofLong", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofInt(jni::ref<java::lang::String> name, jint value) { return call_static_method<"ofInt", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofChar(jni::ref<java::lang::String> name, jchar value) { return call_static_method<"ofChar", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofShort(jni::ref<java::lang::String> name, jshort value) { return call_static_method<"ofShort", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofByte(jni::ref<java::lang::String> name, jbyte value) { return call_static_method<"ofByte", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofBoolean(jni::ref<java::lang::String> name, jboolean value) { return call_static_method<"ofBoolean", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofDouble(jni::ref<java::lang::String> name, jdouble value) { return call_static_method<"ofDouble", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofFloat(jni::ref<java::lang::String> name, jfloat value) { return call_static_method<"ofFloat", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofAnnotation(jni::ref<java::lang::String> name, jni::ref<java::lang::classfile::Annotation> value) { return call_static_method<"ofAnnotation", jni::ref<java::lang::classfile::AnnotationElement>>(name, value); }
	static jni::ref<java::lang::classfile::AnnotationElement> ofArray(jni::ref<java::lang::String> name, jni::ref<jni::array<java::lang::classfile::AnnotationValue>> values) { return call_static_method<"ofArray", jni::ref<java::lang::classfile::AnnotationElement>>(name, values); }

protected:

	AnnotationElement(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_ANNOTATIONELEMENT
