// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/classfile/Annotation.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEANNOTATION_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEANNOTATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile { class TypeAnnotation; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::TypeAnnotation>
{
	static constexpr fixed_string class_name = "java/lang/classfile/TypeAnnotation";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::classfile::Annotation>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEANNOTATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEANNOTATION)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEANNOTATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/classfile/AnnotationElement.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_TargetInfo.h>
#include <scapix/java_api/java/lang/classfile/constantpool/Utf8Entry.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_TypePathComponent.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_TypeArgumentTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_OffsetTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_CatchTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_LocalVarTargetInfo.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_LocalVarTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_ThrowsTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_FormalParameterTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_EmptyTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_TypeParameterBoundTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_SupertypeTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_TypeParameterTarget.h>
#include <scapix/java_api/java/lang/classfile/TypeAnnotation_TargetType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::TypeAnnotation : public jni::object_base<"java/lang/classfile/TypeAnnotation",
	java::lang::Object,
	java::lang::classfile::Annotation>
{
public:

	using TargetInfo = TypeAnnotation_TargetInfo;
	using TypePathComponent = TypeAnnotation_TypePathComponent;
	using TypeArgumentTarget = TypeAnnotation_TypeArgumentTarget;
	using OffsetTarget = TypeAnnotation_OffsetTarget;
	using CatchTarget = TypeAnnotation_CatchTarget;
	using LocalVarTargetInfo = TypeAnnotation_LocalVarTargetInfo;
	using LocalVarTarget = TypeAnnotation_LocalVarTarget;
	using ThrowsTarget = TypeAnnotation_ThrowsTarget;
	using FormalParameterTarget = TypeAnnotation_FormalParameterTarget;
	using EmptyTarget = TypeAnnotation_EmptyTarget;
	using TypeParameterBoundTarget = TypeAnnotation_TypeParameterBoundTarget;
	using SupertypeTarget = TypeAnnotation_SupertypeTarget;
	using TypeParameterTarget = TypeAnnotation_TypeParameterTarget;
	using TargetType = TypeAnnotation_TargetType;

	jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo> targetInfo() { return call_method<"targetInfo", jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo>>(); }
	jni::ref<java::util::List> targetPath() { return call_method<"targetPath", jni::ref<java::util::List>>(); }
	static jni::ref<java::lang::classfile::TypeAnnotation> of(jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo> targetInfo, jni::ref<java::util::List> targetPath, jni::ref<java::lang::classfile::constantpool::Utf8Entry> annotationClassUtf8Entry, jni::ref<java::util::List> annotationElements) { return call_static_method<"of", jni::ref<java::lang::classfile::TypeAnnotation>>(targetInfo, targetPath, annotationClassUtf8Entry, annotationElements); }
	static jni::ref<java::lang::classfile::TypeAnnotation> of(jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo> targetInfo, jni::ref<java::util::List> targetPath, jni::ref<java::lang::constant::ClassDesc> annotationClass, jni::ref<jni::array<java::lang::classfile::AnnotationElement>> annotationElements) { return call_static_method<"of", jni::ref<java::lang::classfile::TypeAnnotation>>(targetInfo, targetPath, annotationClass, annotationElements); }
	static jni::ref<java::lang::classfile::TypeAnnotation> of(jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo> targetInfo, jni::ref<java::util::List> targetPath, jni::ref<java::lang::constant::ClassDesc> annotationClass, jni::ref<java::util::List> annotationElements) { return call_static_method<"of", jni::ref<java::lang::classfile::TypeAnnotation>>(targetInfo, targetPath, annotationClass, annotationElements); }
	static jni::ref<java::lang::classfile::TypeAnnotation> of(jni::ref<java::lang::classfile::TypeAnnotation_TargetInfo> targetInfo, jni::ref<java::util::List> targetPath, jni::ref<java::lang::classfile::constantpool::Utf8Entry> annotationClassUtf8Entry, jni::ref<jni::array<java::lang::classfile::AnnotationElement>> annotationElements) { return call_static_method<"of", jni::ref<java::lang::classfile::TypeAnnotation>>(targetInfo, targetPath, annotationClassUtf8Entry, annotationElements); }

protected:

	TypeAnnotation(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_TYPEANNOTATION
