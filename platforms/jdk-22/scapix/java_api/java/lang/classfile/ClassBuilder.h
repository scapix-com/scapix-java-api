// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/classfile/ClassFileBuilder.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::classfile { class ClassBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::classfile::ClassBuilder>
{
	static constexpr fixed_string class_name = "java/lang/classfile/ClassBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::classfile::ClassFileBuilder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSBUILDER)
#define SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/classfile/FieldModel.h>
#include <scapix/java_api/java/lang/classfile/FieldTransform.h>
#include <scapix/java_api/java/lang/classfile/MethodModel.h>
#include <scapix/java_api/java/lang/classfile/MethodTransform.h>
#include <scapix/java_api/java/lang/classfile/constantpool/ClassEntry.h>
#include <scapix/java_api/java/lang/classfile/constantpool/Utf8Entry.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/lang/constant/MethodTypeDesc.h>
#include <scapix/java_api/java/lang/reflect/AccessFlag.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::classfile::ClassBuilder : public jni::object_base<"java/lang/classfile/ClassBuilder",
	java::lang::Object,
	java::lang::classfile::ClassFileBuilder>
{
public:

	jni::ref<java::util::Optional> original() { return call_method<"original", jni::ref<java::util::Optional>>(); }
	jni::ref<java::lang::classfile::ClassBuilder> withVersion(jint major, jint minor) { return call_method<"withVersion", jni::ref<java::lang::classfile::ClassBuilder>>(major, minor); }
	jni::ref<java::lang::classfile::ClassBuilder> withFlags(jint flags) { return call_method<"withFlags", jni::ref<java::lang::classfile::ClassBuilder>>(flags); }
	jni::ref<java::lang::classfile::ClassBuilder> withFlags(jni::ref<jni::array<java::lang::reflect::AccessFlag>> flags) { return call_method<"withFlags", jni::ref<java::lang::classfile::ClassBuilder>>(flags); }
	jni::ref<java::lang::classfile::ClassBuilder> withSuperclass(jni::ref<java::lang::classfile::constantpool::ClassEntry> superclassEntry) { return call_method<"withSuperclass", jni::ref<java::lang::classfile::ClassBuilder>>(superclassEntry); }
	jni::ref<java::lang::classfile::ClassBuilder> withSuperclass(jni::ref<java::lang::constant::ClassDesc> desc) { return call_method<"withSuperclass", jni::ref<java::lang::classfile::ClassBuilder>>(desc); }
	jni::ref<java::lang::classfile::ClassBuilder> withInterfaces(jni::ref<java::util::List> interfaces) { return call_method<"withInterfaces", jni::ref<java::lang::classfile::ClassBuilder>>(interfaces); }
	jni::ref<java::lang::classfile::ClassBuilder> withInterfaces(jni::ref<jni::array<java::lang::classfile::constantpool::ClassEntry>> interfaces) { return call_method<"withInterfaces", jni::ref<java::lang::classfile::ClassBuilder>>(interfaces); }
	jni::ref<java::lang::classfile::ClassBuilder> withInterfaceSymbols(jni::ref<java::util::List> interfaces) { return call_method<"withInterfaceSymbols", jni::ref<java::lang::classfile::ClassBuilder>>(interfaces); }
	jni::ref<java::lang::classfile::ClassBuilder> withInterfaceSymbols(jni::ref<jni::array<java::lang::constant::ClassDesc>> interfaces) { return call_method<"withInterfaceSymbols", jni::ref<java::lang::classfile::ClassBuilder>>(interfaces); }
	jni::ref<java::lang::classfile::ClassBuilder> withField(jni::ref<java::lang::classfile::constantpool::Utf8Entry> p1, jni::ref<java::lang::classfile::constantpool::Utf8Entry> p2, jni::ref<java::util::function::Consumer> p3) { return call_method<"withField", jni::ref<java::lang::classfile::ClassBuilder>>(p1, p2, p3); }
	jni::ref<java::lang::classfile::ClassBuilder> withField(jni::ref<java::lang::classfile::constantpool::Utf8Entry> name, jni::ref<java::lang::classfile::constantpool::Utf8Entry> descriptor, jint flags) { return call_method<"withField", jni::ref<java::lang::classfile::ClassBuilder>>(name, descriptor, flags); }
	jni::ref<java::lang::classfile::ClassBuilder> withField(jni::ref<java::lang::String> name, jni::ref<java::lang::constant::ClassDesc> descriptor, jni::ref<java::util::function::Consumer> handler) { return call_method<"withField", jni::ref<java::lang::classfile::ClassBuilder>>(name, descriptor, handler); }
	jni::ref<java::lang::classfile::ClassBuilder> withField(jni::ref<java::lang::String> name, jni::ref<java::lang::constant::ClassDesc> descriptor, jint flags) { return call_method<"withField", jni::ref<java::lang::classfile::ClassBuilder>>(name, descriptor, flags); }
	jni::ref<java::lang::classfile::ClassBuilder> transformField(jni::ref<java::lang::classfile::FieldModel> p1, jni::ref<java::lang::classfile::FieldTransform> p2) { return call_method<"transformField", jni::ref<java::lang::classfile::ClassBuilder>>(p1, p2); }
	jni::ref<java::lang::classfile::ClassBuilder> withMethod(jni::ref<java::lang::classfile::constantpool::Utf8Entry> p1, jni::ref<java::lang::classfile::constantpool::Utf8Entry> p2, jint p3, jni::ref<java::util::function::Consumer> p4) { return call_method<"withMethod", jni::ref<java::lang::classfile::ClassBuilder>>(p1, p2, p3, p4); }
	jni::ref<java::lang::classfile::ClassBuilder> withMethodBody(jni::ref<java::lang::classfile::constantpool::Utf8Entry> name, jni::ref<java::lang::classfile::constantpool::Utf8Entry> descriptor, jint methodFlags, jni::ref<java::util::function::Consumer> handler) { return call_method<"withMethodBody", jni::ref<java::lang::classfile::ClassBuilder>>(name, descriptor, methodFlags, handler); }
	jni::ref<java::lang::classfile::ClassBuilder> withMethod(jni::ref<java::lang::String> name, jni::ref<java::lang::constant::MethodTypeDesc> descriptor, jint methodFlags, jni::ref<java::util::function::Consumer> handler) { return call_method<"withMethod", jni::ref<java::lang::classfile::ClassBuilder>>(name, descriptor, methodFlags, handler); }
	jni::ref<java::lang::classfile::ClassBuilder> withMethodBody(jni::ref<java::lang::String> name, jni::ref<java::lang::constant::MethodTypeDesc> descriptor, jint methodFlags, jni::ref<java::util::function::Consumer> handler) { return call_method<"withMethodBody", jni::ref<java::lang::classfile::ClassBuilder>>(name, descriptor, methodFlags, handler); }
	jni::ref<java::lang::classfile::ClassBuilder> transformMethod(jni::ref<java::lang::classfile::MethodModel> p1, jni::ref<java::lang::classfile::MethodTransform> p2) { return call_method<"transformMethod", jni::ref<java::lang::classfile::ClassBuilder>>(p1, p2); }

protected:

	ClassBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CLASSFILE_CLASSBUILDER
