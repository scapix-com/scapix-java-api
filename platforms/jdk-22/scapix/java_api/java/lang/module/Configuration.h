// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_MODULE_CONFIGURATION_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_MODULE_CONFIGURATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::module { class Configuration; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::module::Configuration>
{
	static constexpr fixed_string class_name = "java/lang/module/Configuration";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MODULE_CONFIGURATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_MODULE_CONFIGURATION)
#define SCAPIX_JAVA_API_JAVA_LANG_MODULE_CONFIGURATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/ModuleFinder.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::module::Configuration : public jni::object_base<"java/lang/module/Configuration",
	java::lang::Object>
{
public:

	jni::ref<java::lang::module::Configuration> resolve(jni::ref<java::lang::module::ModuleFinder> before, jni::ref<java::lang::module::ModuleFinder> after, jni::ref<java::util::Collection> roots) { return call_method<"resolve", jni::ref<java::lang::module::Configuration>>(before, after, roots); }
	jni::ref<java::lang::module::Configuration> resolveAndBind(jni::ref<java::lang::module::ModuleFinder> before, jni::ref<java::lang::module::ModuleFinder> after, jni::ref<java::util::Collection> roots) { return call_method<"resolveAndBind", jni::ref<java::lang::module::Configuration>>(before, after, roots); }
	static jni::ref<java::lang::module::Configuration> resolve(jni::ref<java::lang::module::ModuleFinder> before, jni::ref<java::util::List> parents, jni::ref<java::lang::module::ModuleFinder> after, jni::ref<java::util::Collection> roots) { return call_static_method<"resolve", jni::ref<java::lang::module::Configuration>>(before, parents, after, roots); }
	static jni::ref<java::lang::module::Configuration> resolveAndBind(jni::ref<java::lang::module::ModuleFinder> before, jni::ref<java::util::List> parents, jni::ref<java::lang::module::ModuleFinder> after, jni::ref<java::util::Collection> roots) { return call_static_method<"resolveAndBind", jni::ref<java::lang::module::Configuration>>(before, parents, after, roots); }
	static jni::ref<java::lang::module::Configuration> empty() { return call_static_method<"empty", jni::ref<java::lang::module::Configuration>>(); }
	jni::ref<java::util::List> parents() { return call_method<"parents", jni::ref<java::util::List>>(); }
	jni::ref<java::util::Set> modules() { return call_method<"modules", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Optional> findModule(jni::ref<java::lang::String> name) { return call_method<"findModule", jni::ref<java::util::Optional>>(name); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Configuration(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MODULE_CONFIGURATION
