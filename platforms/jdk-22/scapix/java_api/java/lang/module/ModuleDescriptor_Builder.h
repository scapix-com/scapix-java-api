// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::module { class ModuleDescriptor_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::module::ModuleDescriptor_Builder>
{
	static constexpr fixed_string class_name = "java/lang/module/ModuleDescriptor$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER)
#define SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Exports.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Opens.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Provides.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Requires.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Version.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::module::ModuleDescriptor_Builder : public jni::object_base<"java/lang/module/ModuleDescriptor$Builder",
	java::lang::Object>
{
public:

	jni::ref<java::lang::module::ModuleDescriptor_Builder> requires_(jni::ref<java::lang::module::ModuleDescriptor_Requires> req) { return call_method<"requires", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(req); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> requires_(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> mn, jni::ref<java::lang::module::ModuleDescriptor_Version> compiledVersion) { return call_method<"requires", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(ms, mn, compiledVersion); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> requires_(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> mn) { return call_method<"requires", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(ms, mn); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> requires_(jni::ref<java::lang::String> mn) { return call_method<"requires", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(mn); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> exports(jni::ref<java::lang::module::ModuleDescriptor_Exports> e) { return call_method<"exports", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(e); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> exports(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> pn, jni::ref<java::util::Set> targets) { return call_method<"exports", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(ms, pn, targets); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> exports(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> pn) { return call_method<"exports", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(ms, pn); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> exports(jni::ref<java::lang::String> pn, jni::ref<java::util::Set> targets) { return call_method<"exports", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(pn, targets); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> exports(jni::ref<java::lang::String> pn) { return call_method<"exports", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(pn); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> opens(jni::ref<java::lang::module::ModuleDescriptor_Opens> obj) { return call_method<"opens", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(obj); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> opens(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> pn, jni::ref<java::util::Set> targets) { return call_method<"opens", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(ms, pn, targets); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> opens(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> pn) { return call_method<"opens", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(ms, pn); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> opens(jni::ref<java::lang::String> pn, jni::ref<java::util::Set> targets) { return call_method<"opens", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(pn, targets); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> opens(jni::ref<java::lang::String> pn) { return call_method<"opens", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(pn); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> uses(jni::ref<java::lang::String> service) { return call_method<"uses", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(service); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> provides(jni::ref<java::lang::module::ModuleDescriptor_Provides> p) { return call_method<"provides", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(p); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> provides(jni::ref<java::lang::String> service, jni::ref<java::util::List> providers) { return call_method<"provides", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(service, providers); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> packages(jni::ref<java::util::Set> pns) { return call_method<"packages", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(pns); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> version(jni::ref<java::lang::module::ModuleDescriptor_Version> v) { return call_method<"version", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(v); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> version(jni::ref<java::lang::String> vs) { return call_method<"version", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(vs); }
	jni::ref<java::lang::module::ModuleDescriptor_Builder> mainClass(jni::ref<java::lang::String> mc) { return call_method<"mainClass", jni::ref<java::lang::module::ModuleDescriptor_Builder>>(mc); }
	jni::ref<java::lang::module::ModuleDescriptor> build() { return call_method<"build", jni::ref<java::lang::module::ModuleDescriptor>>(); }

protected:

	ModuleDescriptor_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MODULE_MODULEDESCRIPTOR_BUILDER
