// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_DYNAMICCALLSITEDESC_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_DYNAMICCALLSITEDESC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::constant { class DynamicCallSiteDesc; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::constant::DynamicCallSiteDesc>
{
	static constexpr fixed_string class_name = "java/lang/constant/DynamicCallSiteDesc";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_DYNAMICCALLSITEDESC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_DYNAMICCALLSITEDESC)
#define SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_DYNAMICCALLSITEDESC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/constant/ConstantDesc.h>
#include <scapix/java_api/java/lang/constant/DirectMethodHandleDesc.h>
#include <scapix/java_api/java/lang/constant/MethodHandleDesc.h>
#include <scapix/java_api/java/lang/constant/MethodTypeDesc.h>
#include <scapix/java_api/java/lang/invoke/CallSite.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::constant::DynamicCallSiteDesc : public jni::object_base<"java/lang/constant/DynamicCallSiteDesc",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::constant::DynamicCallSiteDesc> of(jni::ref<java::lang::constant::DirectMethodHandleDesc> bootstrapMethod, jni::ref<java::lang::String> invocationName, jni::ref<java::lang::constant::MethodTypeDesc> invocationType, jni::ref<jni::array<java::lang::constant::ConstantDesc>> bootstrapArgs) { return call_static_method<"of", jni::ref<java::lang::constant::DynamicCallSiteDesc>>(bootstrapMethod, invocationName, invocationType, bootstrapArgs); }
	static jni::ref<java::lang::constant::DynamicCallSiteDesc> of(jni::ref<java::lang::constant::DirectMethodHandleDesc> bootstrapMethod, jni::ref<java::lang::String> invocationName, jni::ref<java::lang::constant::MethodTypeDesc> invocationType) { return call_static_method<"of", jni::ref<java::lang::constant::DynamicCallSiteDesc>>(bootstrapMethod, invocationName, invocationType); }
	static jni::ref<java::lang::constant::DynamicCallSiteDesc> of(jni::ref<java::lang::constant::DirectMethodHandleDesc> bootstrapMethod, jni::ref<java::lang::constant::MethodTypeDesc> invocationType) { return call_static_method<"of", jni::ref<java::lang::constant::DynamicCallSiteDesc>>(bootstrapMethod, invocationType); }
	jni::ref<java::lang::constant::DynamicCallSiteDesc> withArgs(jni::ref<jni::array<java::lang::constant::ConstantDesc>> bootstrapArgs) { return call_method<"withArgs", jni::ref<java::lang::constant::DynamicCallSiteDesc>>(bootstrapArgs); }
	jni::ref<java::lang::constant::DynamicCallSiteDesc> withNameAndType(jni::ref<java::lang::String> invocationName, jni::ref<java::lang::constant::MethodTypeDesc> invocationType) { return call_method<"withNameAndType", jni::ref<java::lang::constant::DynamicCallSiteDesc>>(invocationName, invocationType); }
	jni::ref<java::lang::String> invocationName() { return call_method<"invocationName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::constant::MethodTypeDesc> invocationType() { return call_method<"invocationType", jni::ref<java::lang::constant::MethodTypeDesc>>(); }
	jni::ref<java::lang::constant::MethodHandleDesc> bootstrapMethod() { return call_method<"bootstrapMethod", jni::ref<java::lang::constant::MethodHandleDesc>>(); }
	jni::ref<jni::array<java::lang::constant::ConstantDesc>> bootstrapArgs() { return call_method<"bootstrapArgs", jni::ref<jni::array<java::lang::constant::ConstantDesc>>>(); }
	jni::ref<java::lang::invoke::CallSite> resolveCallSiteDesc(jni::ref<java::lang::invoke::MethodHandles_Lookup> lookup) { return call_method<"resolveCallSiteDesc", jni::ref<java::lang::invoke::CallSite>>(lookup); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	DynamicCallSiteDesc(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_DYNAMICCALLSITEDESC
