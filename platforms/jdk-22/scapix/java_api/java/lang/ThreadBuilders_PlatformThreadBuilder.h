// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/ThreadBuilders_BaseThreadBuilder.h>
#include <scapix/java_api/java/lang/Thread_Builder_OfPlatform.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_THREADBUILDERS_PLATFORMTHREADBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_THREADBUILDERS_PLATFORMTHREADBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class ThreadBuilders_PlatformThreadBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::ThreadBuilders_PlatformThreadBuilder>
{
	static constexpr fixed_string class_name = "java/lang/ThreadBuilders$PlatformThreadBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::ThreadBuilders_BaseThreadBuilder, scapix::java_api::java::lang::Thread_Builder_OfPlatform>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_THREADBUILDERS_PLATFORMTHREADBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_THREADBUILDERS_PLATFORMTHREADBUILDER)
#define SCAPIX_JAVA_API_JAVA_LANG_THREADBUILDERS_PLATFORMTHREADBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/lang/Thread_UncaughtExceptionHandler.h>
#include <scapix/java_api/java/lang/ThreadGroup.h>
#include <scapix/java_api/java/util/concurrent/ThreadFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::ThreadBuilders_PlatformThreadBuilder : public jni::object_base<"java/lang/ThreadBuilders$PlatformThreadBuilder",
	java::lang::ThreadBuilders_BaseThreadBuilder,
	java::lang::Thread_Builder_OfPlatform>
{
public:

	jni::ref<java::lang::Thread_Builder_OfPlatform> name(jni::ref<java::lang::String> name) { return call_method<"name", jni::ref<java::lang::Thread_Builder_OfPlatform>>(name); }
	jni::ref<java::lang::Thread_Builder_OfPlatform> name(jni::ref<java::lang::String> prefix, jlong start) { return call_method<"name", jni::ref<java::lang::Thread_Builder_OfPlatform>>(prefix, start); }
	jni::ref<java::lang::Thread_Builder_OfPlatform> inheritInheritableThreadLocals(jboolean inherit) { return call_method<"inheritInheritableThreadLocals", jni::ref<java::lang::Thread_Builder_OfPlatform>>(inherit); }
	jni::ref<java::lang::Thread_Builder_OfPlatform> uncaughtExceptionHandler(jni::ref<java::lang::Thread_UncaughtExceptionHandler> ueh) { return call_method<"uncaughtExceptionHandler", jni::ref<java::lang::Thread_Builder_OfPlatform>>(ueh); }
	jni::ref<java::lang::Thread_Builder_OfPlatform> group(jni::ref<java::lang::ThreadGroup> group) { return call_method<"group", jni::ref<java::lang::Thread_Builder_OfPlatform>>(group); }
	jni::ref<java::lang::Thread_Builder_OfPlatform> daemon(jboolean on) { return call_method<"daemon", jni::ref<java::lang::Thread_Builder_OfPlatform>>(on); }
	jni::ref<java::lang::Thread_Builder_OfPlatform> priority(jint priority) { return call_method<"priority", jni::ref<java::lang::Thread_Builder_OfPlatform>>(priority); }
	jni::ref<java::lang::Thread_Builder_OfPlatform> stackSize(jlong stackSize) { return call_method<"stackSize", jni::ref<java::lang::Thread_Builder_OfPlatform>>(stackSize); }
	jni::ref<java::lang::Thread> unstarted(jni::ref<java::lang::Runnable> task) { return call_method<"unstarted", jni::ref<java::lang::Thread>>(task); }
	jni::ref<java::lang::Thread> start(jni::ref<java::lang::Runnable> task) { return call_method<"start", jni::ref<java::lang::Thread>>(task); }
	jni::ref<java::util::concurrent::ThreadFactory> factory() { return call_method<"factory", jni::ref<java::util::concurrent::ThreadFactory>>(); }

protected:

	ThreadBuilders_PlatformThreadBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_THREADBUILDERS_PLATFORMTHREADBUILDER
