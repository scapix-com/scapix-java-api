// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class StringTemplate; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::StringTemplate>
{
	static constexpr fixed_string class_name = "java/lang/StringTemplate";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE)
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringTemplate_Processor.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::StringTemplate : public jni::object_base<"java/lang/StringTemplate",
	java::lang::Object>
{
public:

	using Processor = StringTemplate_Processor;

	static jni::ref<java::lang::StringTemplate_Processor> STR() { return get_static_field<"STR", jni::ref<java::lang::StringTemplate_Processor>>(); }
	static jni::ref<java::lang::StringTemplate_Processor> RAW() { return get_static_field<"RAW", jni::ref<java::lang::StringTemplate_Processor>>(); }

	jni::ref<java::util::List> fragments() { return call_method<"fragments", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> values() { return call_method<"values", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> interpolate() { return call_method<"interpolate", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Object> process(jni::ref<java::lang::StringTemplate_Processor> processor) { return call_method<"process", jni::ref<java::lang::Object>>(processor); }
	static jni::ref<java::lang::String> toString(jni::ref<java::lang::StringTemplate> stringTemplate) { return call_static_method<"toString", jni::ref<java::lang::String>>(stringTemplate); }
	static jni::ref<java::lang::StringTemplate> of(jni::ref<java::lang::String> string) { return call_static_method<"of", jni::ref<java::lang::StringTemplate>>(string); }
	static jni::ref<java::lang::StringTemplate> of(jni::ref<java::util::List> fragments, jni::ref<java::util::List> values) { return call_static_method<"of", jni::ref<java::lang::StringTemplate>>(fragments, values); }
	static jni::ref<java::lang::String> interpolate(jni::ref<java::util::List> fragments, jni::ref<java::util::List> values) { return call_static_method<"interpolate", jni::ref<java::lang::String>>(fragments, values); }
	static jni::ref<java::lang::StringTemplate> combine(jni::ref<jni::array<java::lang::StringTemplate>> stringTemplates) { return call_static_method<"combine", jni::ref<java::lang::StringTemplate>>(stringTemplates); }
	static jni::ref<java::lang::StringTemplate> combine(jni::ref<java::util::List> stringTemplates) { return call_static_method<"combine", jni::ref<java::lang::StringTemplate>>(stringTemplates); }

protected:

	StringTemplate(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGTEMPLATE
