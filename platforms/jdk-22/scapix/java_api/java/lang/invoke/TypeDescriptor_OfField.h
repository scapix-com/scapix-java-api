// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/invoke/TypeDescriptor.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_INVOKE_TYPEDESCRIPTOR_OFFIELD_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_TYPEDESCRIPTOR_OFFIELD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::invoke { class TypeDescriptor_OfField; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::invoke::TypeDescriptor_OfField>
{
	static constexpr fixed_string class_name = "java/lang/invoke/TypeDescriptor$OfField";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::invoke::TypeDescriptor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_TYPEDESCRIPTOR_OFFIELD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_INVOKE_TYPEDESCRIPTOR_OFFIELD)
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_TYPEDESCRIPTOR_OFFIELD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::invoke::TypeDescriptor_OfField : public jni::object_base<"java/lang/invoke/TypeDescriptor$OfField",
	java::lang::Object,
	java::lang::invoke::TypeDescriptor>
{
public:

	jboolean isArray() { return call_method<"isArray", jboolean>(); }
	jboolean isPrimitive() { return call_method<"isPrimitive", jboolean>(); }
	jni::ref<java::lang::invoke::TypeDescriptor_OfField> componentType() { return call_method<"componentType", jni::ref<java::lang::invoke::TypeDescriptor_OfField>>(); }
	jni::ref<java::lang::invoke::TypeDescriptor_OfField> arrayType() { return call_method<"arrayType", jni::ref<java::lang::invoke::TypeDescriptor_OfField>>(); }

protected:

	TypeDescriptor_OfField(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_TYPEDESCRIPTOR_OFFIELD
