// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_FUNCTIONDESCRIPTOR_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_FUNCTIONDESCRIPTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::foreign { class FunctionDescriptor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::foreign::FunctionDescriptor>
{
	static constexpr fixed_string class_name = "java/lang/foreign/FunctionDescriptor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_FUNCTIONDESCRIPTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_FUNCTIONDESCRIPTOR)
#define SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_FUNCTIONDESCRIPTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/foreign/MemoryLayout.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Optional.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::foreign::FunctionDescriptor : public jni::object_base<"java/lang/foreign/FunctionDescriptor",
	java::lang::Object>
{
public:

	jni::ref<java::util::Optional> returnLayout() { return call_method<"returnLayout", jni::ref<java::util::Optional>>(); }
	jni::ref<java::util::List> argumentLayouts() { return call_method<"argumentLayouts", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::foreign::FunctionDescriptor> appendArgumentLayouts(jni::ref<jni::array<java::lang::foreign::MemoryLayout>> p1) { return call_method<"appendArgumentLayouts", jni::ref<java::lang::foreign::FunctionDescriptor>>(p1); }
	jni::ref<java::lang::foreign::FunctionDescriptor> insertArgumentLayouts(jint p1, jni::ref<jni::array<java::lang::foreign::MemoryLayout>> p2) { return call_method<"insertArgumentLayouts", jni::ref<java::lang::foreign::FunctionDescriptor>>(p1, p2); }
	jni::ref<java::lang::foreign::FunctionDescriptor> changeReturnLayout(jni::ref<java::lang::foreign::MemoryLayout> p1) { return call_method<"changeReturnLayout", jni::ref<java::lang::foreign::FunctionDescriptor>>(p1); }
	jni::ref<java::lang::foreign::FunctionDescriptor> dropReturnLayout() { return call_method<"dropReturnLayout", jni::ref<java::lang::foreign::FunctionDescriptor>>(); }
	jni::ref<java::lang::invoke::MethodType> toMethodType() { return call_method<"toMethodType", jni::ref<java::lang::invoke::MethodType>>(); }
	static jni::ref<java::lang::foreign::FunctionDescriptor> of(jni::ref<java::lang::foreign::MemoryLayout> resLayout, jni::ref<jni::array<java::lang::foreign::MemoryLayout>> argLayouts) { return call_static_method<"of", jni::ref<java::lang::foreign::FunctionDescriptor>>(resLayout, argLayouts); }
	static jni::ref<java::lang::foreign::FunctionDescriptor> ofVoid(jni::ref<jni::array<java::lang::foreign::MemoryLayout>> argLayouts) { return call_static_method<"ofVoid", jni::ref<java::lang::foreign::FunctionDescriptor>>(argLayouts); }

protected:

	FunctionDescriptor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_FOREIGN_FUNCTIONDESCRIPTOR
