// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATOR_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::random { class RandomGenerator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::random::RandomGenerator>
{
	static constexpr fixed_string class_name = "java/util/random/RandomGenerator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATOR)
#define SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#include <scapix/java_api/java/util/random/RandomGenerator_ArbitrarilyJumpableGenerator.h>
#include <scapix/java_api/java/util/random/RandomGenerator_LeapableGenerator.h>
#include <scapix/java_api/java/util/random/RandomGenerator_JumpableGenerator.h>
#include <scapix/java_api/java/util/random/RandomGenerator_SplittableGenerator.h>
#include <scapix/java_api/java/util/random/RandomGenerator_StreamableGenerator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::random::RandomGenerator : public jni::object_base<"java/util/random/RandomGenerator",
	java::lang::Object>
{
public:

	using ArbitrarilyJumpableGenerator = RandomGenerator_ArbitrarilyJumpableGenerator;
	using LeapableGenerator = RandomGenerator_LeapableGenerator;
	using JumpableGenerator = RandomGenerator_JumpableGenerator;
	using SplittableGenerator = RandomGenerator_SplittableGenerator;
	using StreamableGenerator = RandomGenerator_StreamableGenerator;

	static jni::ref<java::util::random::RandomGenerator> of(jni::ref<java::lang::String> name) { return call_static_method<"of", jni::ref<java::util::random::RandomGenerator>>(name); }
	static jni::ref<java::util::random::RandomGenerator> getDefault() { return call_static_method<"getDefault", jni::ref<java::util::random::RandomGenerator>>(); }
	jboolean isDeprecated() { return call_method<"isDeprecated", jboolean>(); }
	jni::ref<java::util::stream::DoubleStream> doubles() { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(); }
	jni::ref<java::util::stream::DoubleStream> doubles(jdouble randomNumberOrigin, jdouble p2) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(randomNumberOrigin, p2); }
	jni::ref<java::util::stream::DoubleStream> doubles(jlong streamSize) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(streamSize); }
	jni::ref<java::util::stream::DoubleStream> doubles(jlong streamSize, jdouble p2, jdouble randomNumberOrigin) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(streamSize, p2, randomNumberOrigin); }
	jni::ref<java::util::stream::DoubleStream> equiDoubles(jdouble left, jdouble p2, jboolean right, jboolean p4) { return call_method<"equiDoubles", jni::ref<java::util::stream::DoubleStream>>(left, p2, right, p4); }
	jni::ref<java::util::stream::IntStream> ints() { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(); }
	jni::ref<java::util::stream::IntStream> ints(jint randomNumberOrigin, jint randomNumberBound) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(randomNumberOrigin, randomNumberBound); }
	jni::ref<java::util::stream::IntStream> ints(jlong streamSize) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(streamSize); }
	jni::ref<java::util::stream::IntStream> ints(jlong streamSize, jint p2, jint randomNumberOrigin) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(streamSize, p2, randomNumberOrigin); }
	jni::ref<java::util::stream::LongStream> longs() { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(); }
	jni::ref<java::util::stream::LongStream> longs(jlong randomNumberOrigin, jlong p2) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(randomNumberOrigin, p2); }
	jni::ref<java::util::stream::LongStream> longs(jlong streamSize) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(streamSize); }
	jni::ref<java::util::stream::LongStream> longs(jlong streamSize, jlong p2, jlong randomNumberOrigin) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(streamSize, p2, randomNumberOrigin); }
	jboolean nextBoolean() { return call_method<"nextBoolean", jboolean>(); }
	void nextBytes(jni::ref<jni::array<jbyte>> bytes) { return call_method<"nextBytes", void>(bytes); }
	jfloat nextFloat() { return call_method<"nextFloat", jfloat>(); }
	jfloat nextFloat(jfloat bound) { return call_method<"nextFloat", jfloat>(bound); }
	jfloat nextFloat(jfloat origin, jfloat bound) { return call_method<"nextFloat", jfloat>(origin, bound); }
	jdouble nextDouble() { return call_method<"nextDouble", jdouble>(); }
	jdouble nextDouble(jdouble bound) { return call_method<"nextDouble", jdouble>(bound); }
	jdouble nextDouble(jdouble origin, jdouble p2) { return call_method<"nextDouble", jdouble>(origin, p2); }
	jint nextInt() { return call_method<"nextInt", jint>(); }
	jint nextInt(jint bound) { return call_method<"nextInt", jint>(bound); }
	jint nextInt(jint origin, jint bound) { return call_method<"nextInt", jint>(origin, bound); }
	jlong nextLong() { return call_method<"nextLong", jlong>(); }
	jlong nextLong(jlong bound) { return call_method<"nextLong", jlong>(bound); }
	jlong nextLong(jlong origin, jlong p2) { return call_method<"nextLong", jlong>(origin, p2); }
	jdouble nextGaussian() { return call_method<"nextGaussian", jdouble>(); }
	jdouble nextGaussian(jdouble mean, jdouble p2) { return call_method<"nextGaussian", jdouble>(mean, p2); }
	jdouble nextExponential() { return call_method<"nextExponential", jdouble>(); }

protected:

	RandomGenerator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATOR
