// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ForkJoinTask; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ForkJoinTask>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ForkJoinTask";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::Future, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/ForkJoinPool.h>
#include <scapix/java_api/java/util/concurrent/Future_State.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::ForkJoinTask : public jni::object_base<"java/util/concurrent/ForkJoinTask",
	java::lang::Object,
	java::util::concurrent::Future,
	java::io::Serializable>
{
public:

	static jni::ref<java::util::concurrent::ForkJoinTask> new_object() { return base_::new_object(); }
	jni::ref<java::util::concurrent::ForkJoinTask> fork() { return call_method<"fork", jni::ref<java::util::concurrent::ForkJoinTask>>(); }
	jni::ref<java::lang::Object> join() { return call_method<"join", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> invoke() { return call_method<"invoke", jni::ref<java::lang::Object>>(); }
	static void invokeAll(jni::ref<java::util::concurrent::ForkJoinTask> t1, jni::ref<java::util::concurrent::ForkJoinTask> t2) { return call_static_method<"invokeAll", void>(t1, t2); }
	static void invokeAll(jni::ref<jni::array<java::util::concurrent::ForkJoinTask>> tasks) { return call_static_method<"invokeAll", void>(tasks); }
	static jni::ref<java::util::Collection> invokeAll(jni::ref<java::util::Collection> tasks) { return call_static_method<"invokeAll", jni::ref<java::util::Collection>>(tasks); }
	jboolean cancel(jboolean mayInterruptIfRunning) { return call_method<"cancel", jboolean>(mayInterruptIfRunning); }
	jboolean isDone() { return call_method<"isDone", jboolean>(); }
	jboolean isCancelled() { return call_method<"isCancelled", jboolean>(); }
	jboolean isCompletedAbnormally() { return call_method<"isCompletedAbnormally", jboolean>(); }
	jboolean isCompletedNormally() { return call_method<"isCompletedNormally", jboolean>(); }
	jni::ref<java::util::concurrent::Future_State> state() { return call_method<"state", jni::ref<java::util::concurrent::Future_State>>(); }
	jni::ref<java::lang::Object> resultNow() { return call_method<"resultNow", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Throwable> exceptionNow() { return call_method<"exceptionNow", jni::ref<java::lang::Throwable>>(); }
	jni::ref<java::lang::Throwable> getException() { return call_method<"getException", jni::ref<java::lang::Throwable>>(); }
	void completeExceptionally(jni::ref<java::lang::Throwable> ex) { return call_method<"completeExceptionally", void>(ex); }
	void complete(jni::ref<java::lang::Object> value) { return call_method<"complete", void>(value); }
	void quietlyComplete() { return call_method<"quietlyComplete", void>(); }
	jni::ref<java::lang::Object> get() { return call_method<"get", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> get(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"get", jni::ref<java::lang::Object>>(timeout, p2); }
	void quietlyJoin() { return call_method<"quietlyJoin", void>(); }
	void quietlyInvoke() { return call_method<"quietlyInvoke", void>(); }
	jboolean quietlyJoin(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"quietlyJoin", jboolean>(timeout, p2); }
	jboolean quietlyJoinUninterruptibly(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"quietlyJoinUninterruptibly", jboolean>(timeout, p2); }
	static void helpQuiesce() { return call_static_method<"helpQuiesce", void>(); }
	void reinitialize() { return call_method<"reinitialize", void>(); }
	static jni::ref<java::util::concurrent::ForkJoinPool> getPool() { return call_static_method<"getPool", jni::ref<java::util::concurrent::ForkJoinPool>>(); }
	static jboolean inForkJoinPool() { return call_static_method<"inForkJoinPool", jboolean>(); }
	jboolean tryUnfork() { return call_method<"tryUnfork", jboolean>(); }
	static jint getQueuedTaskCount() { return call_static_method<"getQueuedTaskCount", jint>(); }
	static jint getSurplusQueuedTaskCount() { return call_static_method<"getSurplusQueuedTaskCount", jint>(); }
	jni::ref<java::lang::Object> getRawResult() { return call_method<"getRawResult", jni::ref<java::lang::Object>>(); }
	jshort getForkJoinTaskTag() { return call_method<"getForkJoinTaskTag", jshort>(); }
	jshort setForkJoinTaskTag(jshort newValue) { return call_method<"setForkJoinTaskTag", jshort>(newValue); }
	jboolean compareAndSetForkJoinTaskTag(jshort expect, jshort update) { return call_method<"compareAndSetForkJoinTaskTag", jboolean>(expect, update); }
	static jni::ref<java::util::concurrent::ForkJoinTask> adapt(jni::ref<java::lang::Runnable> runnable) { return call_static_method<"adapt", jni::ref<java::util::concurrent::ForkJoinTask>>(runnable); }
	static jni::ref<java::util::concurrent::ForkJoinTask> adapt(jni::ref<java::lang::Runnable> runnable, jni::ref<java::lang::Object> result) { return call_static_method<"adapt", jni::ref<java::util::concurrent::ForkJoinTask>>(runnable, result); }
	static jni::ref<java::util::concurrent::ForkJoinTask> adapt(jni::ref<java::util::concurrent::Callable> callable) { return call_static_method<"adapt", jni::ref<java::util::concurrent::ForkJoinTask>>(callable); }
	static jni::ref<java::util::concurrent::ForkJoinTask> adaptInterruptible(jni::ref<java::util::concurrent::Callable> callable) { return call_static_method<"adaptInterruptible", jni::ref<java::util::concurrent::ForkJoinTask>>(callable); }
	static jni::ref<java::util::concurrent::ForkJoinTask> adaptInterruptible(jni::ref<java::lang::Runnable> runnable, jni::ref<java::lang::Object> result) { return call_static_method<"adaptInterruptible", jni::ref<java::util::concurrent::ForkJoinTask>>(runnable, result); }
	static jni::ref<java::util::concurrent::ForkJoinTask> adaptInterruptible(jni::ref<java::lang::Runnable> runnable) { return call_static_method<"adaptInterruptible", jni::ref<java::util::concurrent::ForkJoinTask>>(runnable); }

protected:

	ForkJoinTask(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FORKJOINTASK
