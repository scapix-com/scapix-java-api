// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractSet.h>
#include <scapix/java_api/java/util/NavigableSet.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_KEYSET_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_KEYSET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ConcurrentSkipListMap_KeySet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ConcurrentSkipListMap_KeySet>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ConcurrentSkipListMap$KeySet";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractSet, scapix::java_api::java::util::NavigableSet>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_KEYSET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_KEYSET)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_KEYSET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::concurrent::ConcurrentSkipListMap_KeySet : public jni::object_base<"java/util/concurrent/ConcurrentSkipListMap$KeySet",
	java::util::AbstractSet,
	java::util::NavigableSet>
{
public:

	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean contains(jni::ref<java::lang::Object> o) { return call_method<"contains", jboolean>(o); }
	jboolean remove(jni::ref<java::lang::Object> o) { return call_method<"remove", jboolean>(o); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<java::lang::Object> lower(jni::ref<java::lang::Object> e) { return call_method<"lower", jni::ref<java::lang::Object>>(e); }
	jni::ref<java::lang::Object> floor(jni::ref<java::lang::Object> e) { return call_method<"floor", jni::ref<java::lang::Object>>(e); }
	jni::ref<java::lang::Object> ceiling(jni::ref<java::lang::Object> e) { return call_method<"ceiling", jni::ref<java::lang::Object>>(e); }
	jni::ref<java::lang::Object> higher(jni::ref<java::lang::Object> e) { return call_method<"higher", jni::ref<java::lang::Object>>(e); }
	jni::ref<java::util::Comparator> comparator() { return call_method<"comparator", jni::ref<java::util::Comparator>>(); }
	jni::ref<java::lang::Object> first() { return call_method<"first", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> last() { return call_method<"last", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> pollFirst() { return call_method<"pollFirst", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> pollLast() { return call_method<"pollLast", jni::ref<java::lang::Object>>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jni::ref<jni::array<java::lang::Object>> toArray() { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<jni::array<java::lang::Object>> toArray(jni::ref<jni::array<java::lang::Object>> a) { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(a); }
	jni::ref<java::util::Iterator> descendingIterator() { return call_method<"descendingIterator", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::util::NavigableSet> subSet(jni::ref<java::lang::Object> fromElement, jboolean fromInclusive, jni::ref<java::lang::Object> toElement, jboolean toInclusive) { return call_method<"subSet", jni::ref<java::util::NavigableSet>>(fromElement, fromInclusive, toElement, toInclusive); }
	jni::ref<java::util::NavigableSet> headSet(jni::ref<java::lang::Object> toElement, jboolean inclusive) { return call_method<"headSet", jni::ref<java::util::NavigableSet>>(toElement, inclusive); }
	jni::ref<java::util::NavigableSet> tailSet(jni::ref<java::lang::Object> fromElement, jboolean inclusive) { return call_method<"tailSet", jni::ref<java::util::NavigableSet>>(fromElement, inclusive); }
	jni::ref<java::util::NavigableSet> subSet(jni::ref<java::lang::Object> fromElement, jni::ref<java::lang::Object> toElement) { return call_method<"subSet", jni::ref<java::util::NavigableSet>>(fromElement, toElement); }
	jni::ref<java::util::NavigableSet> headSet(jni::ref<java::lang::Object> toElement) { return call_method<"headSet", jni::ref<java::util::NavigableSet>>(toElement); }
	jni::ref<java::util::NavigableSet> tailSet(jni::ref<java::lang::Object> fromElement) { return call_method<"tailSet", jni::ref<java::util::NavigableSet>>(fromElement); }
	jni::ref<java::util::NavigableSet> descendingSet() { return call_method<"descendingSet", jni::ref<java::util::NavigableSet>>(); }
	jni::ref<java::util::Spliterator> spliterator() { return call_method<"spliterator", jni::ref<java::util::Spliterator>>(); }

protected:

	ConcurrentSkipListMap_KeySet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTSKIPLISTMAP_KEYSET
