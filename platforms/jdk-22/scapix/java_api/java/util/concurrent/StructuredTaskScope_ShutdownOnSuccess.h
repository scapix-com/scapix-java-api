// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/StructuredTaskScope.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_STRUCTUREDTASKSCOPE_SHUTDOWNONSUCCESS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_STRUCTUREDTASKSCOPE_SHUTDOWNONSUCCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class StructuredTaskScope_ShutdownOnSuccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::StructuredTaskScope_ShutdownOnSuccess>
{
	static constexpr fixed_string class_name = "java/util/concurrent/StructuredTaskScope$ShutdownOnSuccess";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::StructuredTaskScope>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_STRUCTUREDTASKSCOPE_SHUTDOWNONSUCCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_STRUCTUREDTASKSCOPE_SHUTDOWNONSUCCESS)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_STRUCTUREDTASKSCOPE_SHUTDOWNONSUCCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/util/concurrent/ThreadFactory.h>
#include <scapix/java_api/java/util/function/Function.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::StructuredTaskScope_ShutdownOnSuccess : public jni::object_base<"java/util/concurrent/StructuredTaskScope$ShutdownOnSuccess",
	java::util::concurrent::StructuredTaskScope>
{
public:

	static jni::ref<java::util::concurrent::StructuredTaskScope_ShutdownOnSuccess> new_object(jni::ref<java::lang::String> name, jni::ref<java::util::concurrent::ThreadFactory> factory) { return base_::new_object(name, factory); }
	static jni::ref<java::util::concurrent::StructuredTaskScope_ShutdownOnSuccess> new_object() { return base_::new_object(); }
	jni::ref<java::util::concurrent::StructuredTaskScope_ShutdownOnSuccess> join() { return call_method<"join", jni::ref<java::util::concurrent::StructuredTaskScope_ShutdownOnSuccess>>(); }
	jni::ref<java::util::concurrent::StructuredTaskScope_ShutdownOnSuccess> joinUntil(jni::ref<java::time::Instant> deadline) { return call_method<"joinUntil", jni::ref<java::util::concurrent::StructuredTaskScope_ShutdownOnSuccess>>(deadline); }
	jni::ref<java::lang::Object> result() { return call_method<"result", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> result(jni::ref<java::util::function::Function> esf) { return call_method<"result", jni::ref<java::lang::Object>>(esf); }

protected:

	StructuredTaskScope_ShutdownOnSuccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_STRUCTUREDTASKSCOPE_SHUTDOWNONSUCCESS
