// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::atomic { class AtomicLongArray; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::atomic::AtomicLongArray>
{
	static constexpr fixed_string class_name = "java/util/concurrent/atomic/AtomicLongArray";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/function/LongUnaryOperator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::atomic::AtomicLongArray : public jni::object_base<"java/util/concurrent/atomic/AtomicLongArray",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::util::concurrent::atomic::AtomicLongArray> new_object(jint length) { return base_::new_object(length); }
	static jni::ref<java::util::concurrent::atomic::AtomicLongArray> new_object(jni::ref<jni::array<jlong>> array) { return base_::new_object(array); }
	jint length() { return call_method<"length", jint>(); }
	jlong get(jint i) { return call_method<"get", jlong>(i); }
	void set(jint i, jlong newValue) { return call_method<"set", void>(i, newValue); }
	void lazySet(jint i, jlong newValue) { return call_method<"lazySet", void>(i, newValue); }
	jlong getAndSet(jint i, jlong newValue) { return call_method<"getAndSet", jlong>(i, newValue); }
	jboolean compareAndSet(jint i, jlong expectedValue, jlong p3) { return call_method<"compareAndSet", jboolean>(i, expectedValue, p3); }
	jboolean weakCompareAndSet(jint i, jlong expectedValue, jlong p3) { return call_method<"weakCompareAndSet", jboolean>(i, expectedValue, p3); }
	jboolean weakCompareAndSetPlain(jint i, jlong expectedValue, jlong p3) { return call_method<"weakCompareAndSetPlain", jboolean>(i, expectedValue, p3); }
	jlong getAndIncrement(jint i) { return call_method<"getAndIncrement", jlong>(i); }
	jlong getAndDecrement(jint i) { return call_method<"getAndDecrement", jlong>(i); }
	jlong getAndAdd(jint i, jlong delta) { return call_method<"getAndAdd", jlong>(i, delta); }
	jlong incrementAndGet(jint i) { return call_method<"incrementAndGet", jlong>(i); }
	jlong decrementAndGet(jint i) { return call_method<"decrementAndGet", jlong>(i); }
	jlong addAndGet(jint i, jlong delta) { return call_method<"addAndGet", jlong>(i, delta); }
	jlong getAndUpdate(jint i, jni::ref<java::util::function::LongUnaryOperator> updateFunction) { return call_method<"getAndUpdate", jlong>(i, updateFunction); }
	jlong updateAndGet(jint i, jni::ref<java::util::function::LongUnaryOperator> updateFunction) { return call_method<"updateAndGet", jlong>(i, updateFunction); }
	jlong getAndAccumulate(jint i, jlong x, jni::ref<java::util::function::LongBinaryOperator> p3) { return call_method<"getAndAccumulate", jlong>(i, x, p3); }
	jlong accumulateAndGet(jint i, jlong x, jni::ref<java::util::function::LongBinaryOperator> p3) { return call_method<"accumulateAndGet", jlong>(i, x, p3); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jlong getPlain(jint i) { return call_method<"getPlain", jlong>(i); }
	void setPlain(jint i, jlong newValue) { return call_method<"setPlain", void>(i, newValue); }
	jlong getOpaque(jint i) { return call_method<"getOpaque", jlong>(i); }
	void setOpaque(jint i, jlong newValue) { return call_method<"setOpaque", void>(i, newValue); }
	jlong getAcquire(jint i) { return call_method<"getAcquire", jlong>(i); }
	void setRelease(jint i, jlong newValue) { return call_method<"setRelease", void>(i, newValue); }
	jlong compareAndExchange(jint i, jlong expectedValue, jlong p3) { return call_method<"compareAndExchange", jlong>(i, expectedValue, p3); }
	jlong compareAndExchangeAcquire(jint i, jlong expectedValue, jlong p3) { return call_method<"compareAndExchangeAcquire", jlong>(i, expectedValue, p3); }
	jlong compareAndExchangeRelease(jint i, jlong expectedValue, jlong p3) { return call_method<"compareAndExchangeRelease", jlong>(i, expectedValue, p3); }
	jboolean weakCompareAndSetVolatile(jint i, jlong expectedValue, jlong p3) { return call_method<"weakCompareAndSetVolatile", jboolean>(i, expectedValue, p3); }
	jboolean weakCompareAndSetAcquire(jint i, jlong expectedValue, jlong p3) { return call_method<"weakCompareAndSetAcquire", jboolean>(i, expectedValue, p3); }
	jboolean weakCompareAndSetRelease(jint i, jlong expectedValue, jlong p3) { return call_method<"weakCompareAndSetRelease", jboolean>(i, expectedValue, p3); }

protected:

	AtomicLongArray(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGARRAY
