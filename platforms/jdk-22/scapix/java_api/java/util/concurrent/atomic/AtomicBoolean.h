// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::atomic { class AtomicBoolean; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::atomic::AtomicBoolean>
{
	static constexpr fixed_string class_name = "java/util/concurrent/atomic/AtomicBoolean";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::atomic::AtomicBoolean : public jni::object_base<"java/util/concurrent/atomic/AtomicBoolean",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::util::concurrent::atomic::AtomicBoolean> new_object(jboolean initialValue) { return base_::new_object(initialValue); }
	static jni::ref<java::util::concurrent::atomic::AtomicBoolean> new_object() { return base_::new_object(); }
	jboolean get() { return call_method<"get", jboolean>(); }
	jboolean compareAndSet(jboolean expectedValue, jboolean newValue) { return call_method<"compareAndSet", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSet(jboolean expectedValue, jboolean newValue) { return call_method<"weakCompareAndSet", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSetPlain(jboolean expectedValue, jboolean newValue) { return call_method<"weakCompareAndSetPlain", jboolean>(expectedValue, newValue); }
	void set(jboolean newValue) { return call_method<"set", void>(newValue); }
	void lazySet(jboolean newValue) { return call_method<"lazySet", void>(newValue); }
	jboolean getAndSet(jboolean newValue) { return call_method<"getAndSet", jboolean>(newValue); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean getPlain() { return call_method<"getPlain", jboolean>(); }
	void setPlain(jboolean newValue) { return call_method<"setPlain", void>(newValue); }
	jboolean getOpaque() { return call_method<"getOpaque", jboolean>(); }
	void setOpaque(jboolean newValue) { return call_method<"setOpaque", void>(newValue); }
	jboolean getAcquire() { return call_method<"getAcquire", jboolean>(); }
	void setRelease(jboolean newValue) { return call_method<"setRelease", void>(newValue); }
	jboolean compareAndExchange(jboolean expectedValue, jboolean newValue) { return call_method<"compareAndExchange", jboolean>(expectedValue, newValue); }
	jboolean compareAndExchangeAcquire(jboolean expectedValue, jboolean newValue) { return call_method<"compareAndExchangeAcquire", jboolean>(expectedValue, newValue); }
	jboolean compareAndExchangeRelease(jboolean expectedValue, jboolean newValue) { return call_method<"compareAndExchangeRelease", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSetVolatile(jboolean expectedValue, jboolean newValue) { return call_method<"weakCompareAndSetVolatile", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSetAcquire(jboolean expectedValue, jboolean newValue) { return call_method<"weakCompareAndSetAcquire", jboolean>(expectedValue, newValue); }
	jboolean weakCompareAndSetRelease(jboolean expectedValue, jboolean newValue) { return call_method<"weakCompareAndSetRelease", jboolean>(expectedValue, newValue); }

protected:

	AtomicBoolean(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICBOOLEAN
