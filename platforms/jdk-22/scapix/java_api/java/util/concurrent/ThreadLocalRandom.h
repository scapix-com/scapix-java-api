// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Random.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ThreadLocalRandom; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ThreadLocalRandom>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ThreadLocalRandom";
	using base_classes = std::tuple<scapix::java_api::java::util::Random>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::ThreadLocalRandom : public jni::object_base<"java/util/concurrent/ThreadLocalRandom",
	java::util::Random>
{
public:

	static jni::ref<java::util::concurrent::ThreadLocalRandom> current() { return call_static_method<"current", jni::ref<java::util::concurrent::ThreadLocalRandom>>(); }
	void setSeed(jlong seed) { return call_method<"setSeed", void>(seed); }
	jboolean nextBoolean() { return call_method<"nextBoolean", jboolean>(); }
	jint nextInt() { return call_method<"nextInt", jint>(); }
	jint nextInt(jint bound) { return call_method<"nextInt", jint>(bound); }
	jint nextInt(jint origin, jint bound) { return call_method<"nextInt", jint>(origin, bound); }
	jlong nextLong() { return call_method<"nextLong", jlong>(); }
	jlong nextLong(jlong bound) { return call_method<"nextLong", jlong>(bound); }
	jlong nextLong(jlong origin, jlong p2) { return call_method<"nextLong", jlong>(origin, p2); }
	jfloat nextFloat() { return call_method<"nextFloat", jfloat>(); }
	jfloat nextFloat(jfloat bound) { return call_method<"nextFloat", jfloat>(bound); }
	jfloat nextFloat(jfloat origin, jfloat bound) { return call_method<"nextFloat", jfloat>(origin, bound); }
	jdouble nextDouble() { return call_method<"nextDouble", jdouble>(); }
	jdouble nextDouble(jdouble bound) { return call_method<"nextDouble", jdouble>(bound); }
	jdouble nextDouble(jdouble origin, jdouble p2) { return call_method<"nextDouble", jdouble>(origin, p2); }
	jni::ref<java::util::stream::IntStream> ints(jlong streamSize) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(streamSize); }
	jni::ref<java::util::stream::IntStream> ints() { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(); }
	jni::ref<java::util::stream::IntStream> ints(jlong streamSize, jint p2, jint randomNumberOrigin) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(streamSize, p2, randomNumberOrigin); }
	jni::ref<java::util::stream::IntStream> ints(jint randomNumberOrigin, jint randomNumberBound) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(randomNumberOrigin, randomNumberBound); }
	jni::ref<java::util::stream::LongStream> longs(jlong streamSize) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(streamSize); }
	jni::ref<java::util::stream::LongStream> longs() { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(); }
	jni::ref<java::util::stream::LongStream> longs(jlong streamSize, jlong p2, jlong randomNumberOrigin) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(streamSize, p2, randomNumberOrigin); }
	jni::ref<java::util::stream::LongStream> longs(jlong randomNumberOrigin, jlong p2) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(randomNumberOrigin, p2); }
	jni::ref<java::util::stream::DoubleStream> doubles(jlong streamSize) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(streamSize); }
	jni::ref<java::util::stream::DoubleStream> doubles() { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(); }
	jni::ref<java::util::stream::DoubleStream> doubles(jlong streamSize, jdouble p2, jdouble randomNumberOrigin) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(streamSize, p2, randomNumberOrigin); }
	jni::ref<java::util::stream::DoubleStream> doubles(jdouble randomNumberOrigin, jdouble p2) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(randomNumberOrigin, p2); }

protected:

	ThreadLocalRandom(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADLOCALRANDOM
