// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/concurrent/locks/ReadWriteLock.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::locks { class ReentrantReadWriteLock; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::locks::ReentrantReadWriteLock>
{
	static constexpr fixed_string class_name = "java/util/concurrent/locks/ReentrantReadWriteLock";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::concurrent::locks::ReadWriteLock, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/util/concurrent/locks/Condition.h>
#include <scapix/java_api/java/util/concurrent/locks/ReentrantReadWriteLock_ReadLock.h>
#include <scapix/java_api/java/util/concurrent/locks/ReentrantReadWriteLock_WriteLock.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::locks::ReentrantReadWriteLock : public jni::object_base<"java/util/concurrent/locks/ReentrantReadWriteLock",
	java::lang::Object,
	java::util::concurrent::locks::ReadWriteLock,
	java::io::Serializable>
{
public:

	using ReadLock = ReentrantReadWriteLock_ReadLock;
	using WriteLock = ReentrantReadWriteLock_WriteLock;

	static jni::ref<java::util::concurrent::locks::ReentrantReadWriteLock> new_object() { return base_::new_object(); }
	static jni::ref<java::util::concurrent::locks::ReentrantReadWriteLock> new_object(jboolean fair) { return base_::new_object(fair); }
	jni::ref<java::util::concurrent::locks::ReentrantReadWriteLock_WriteLock> writeLock() { return call_method<"writeLock", jni::ref<java::util::concurrent::locks::ReentrantReadWriteLock_WriteLock>>(); }
	jni::ref<java::util::concurrent::locks::ReentrantReadWriteLock_ReadLock> readLock() { return call_method<"readLock", jni::ref<java::util::concurrent::locks::ReentrantReadWriteLock_ReadLock>>(); }
	jboolean isFair() { return call_method<"isFair", jboolean>(); }
	jint getReadLockCount() { return call_method<"getReadLockCount", jint>(); }
	jboolean isWriteLocked() { return call_method<"isWriteLocked", jboolean>(); }
	jboolean isWriteLockedByCurrentThread() { return call_method<"isWriteLockedByCurrentThread", jboolean>(); }
	jint getWriteHoldCount() { return call_method<"getWriteHoldCount", jint>(); }
	jint getReadHoldCount() { return call_method<"getReadHoldCount", jint>(); }
	jboolean hasQueuedThreads() { return call_method<"hasQueuedThreads", jboolean>(); }
	jboolean hasQueuedThread(jni::ref<java::lang::Thread> thread) { return call_method<"hasQueuedThread", jboolean>(thread); }
	jint getQueueLength() { return call_method<"getQueueLength", jint>(); }
	jboolean hasWaiters(jni::ref<java::util::concurrent::locks::Condition> condition) { return call_method<"hasWaiters", jboolean>(condition); }
	jint getWaitQueueLength(jni::ref<java::util::concurrent::locks::Condition> condition) { return call_method<"getWaitQueueLength", jint>(condition); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ReentrantReadWriteLock(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_LOCKS_REENTRANTREADWRITELOCK
