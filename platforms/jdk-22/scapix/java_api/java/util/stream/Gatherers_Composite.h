// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/stream/Gatherer.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERERS_COMPOSITE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERERS_COMPOSITE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class Gatherers_Composite; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::Gatherers_Composite>
{
	static constexpr fixed_string class_name = "java/util/stream/Gatherers$Composite";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::stream::Gatherer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERERS_COMPOSITE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERERS_COMPOSITE)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERERS_COMPOSITE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/Gatherer_Integrator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::Gatherers_Composite : public jni::object_base<"java/util/stream/Gatherers$Composite",
	java::lang::Object,
	java::util::stream::Gatherer>
{
public:

	jni::ref<java::util::function::Supplier> initializer() { return call_method<"initializer", jni::ref<java::util::function::Supplier>>(); }
	jni::ref<java::util::stream::Gatherer_Integrator> integrator() { return call_method<"integrator", jni::ref<java::util::stream::Gatherer_Integrator>>(); }
	jni::ref<java::util::function::BinaryOperator> combiner() { return call_method<"combiner", jni::ref<java::util::function::BinaryOperator>>(); }
	jni::ref<java::util::function::BiConsumer> finisher() { return call_method<"finisher", jni::ref<java::util::function::BiConsumer>>(); }
	jni::ref<java::util::stream::Gatherer> andThen(jni::ref<java::util::stream::Gatherer> that) { return call_method<"andThen", jni::ref<java::util::stream::Gatherer>>(that); }

protected:

	Gatherers_Composite(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERERS_COMPOSITE
