// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class Gatherer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::Gatherer>
{
	static constexpr fixed_string class_name = "java/util/stream/Gatherer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERER)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/Gatherer_Integrator.h>
#include <scapix/java_api/java/util/stream/Gatherer_Downstream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::stream::Gatherer : public jni::object_base<"java/util/stream/Gatherer",
	java::lang::Object>
{
public:

	using Integrator = Gatherer_Integrator;
	using Downstream = Gatherer_Downstream;

	jni::ref<java::util::function::Supplier> initializer() { return call_method<"initializer", jni::ref<java::util::function::Supplier>>(); }
	jni::ref<java::util::stream::Gatherer_Integrator> integrator() { return call_method<"integrator", jni::ref<java::util::stream::Gatherer_Integrator>>(); }
	jni::ref<java::util::function::BinaryOperator> combiner() { return call_method<"combiner", jni::ref<java::util::function::BinaryOperator>>(); }
	jni::ref<java::util::function::BiConsumer> finisher() { return call_method<"finisher", jni::ref<java::util::function::BiConsumer>>(); }
	jni::ref<java::util::stream::Gatherer> andThen(jni::ref<java::util::stream::Gatherer> that) { return call_method<"andThen", jni::ref<java::util::stream::Gatherer>>(that); }
	static jni::ref<java::util::function::Supplier> defaultInitializer() { return call_static_method<"defaultInitializer", jni::ref<java::util::function::Supplier>>(); }
	static jni::ref<java::util::function::BinaryOperator> defaultCombiner() { return call_static_method<"defaultCombiner", jni::ref<java::util::function::BinaryOperator>>(); }
	static jni::ref<java::util::function::BiConsumer> defaultFinisher() { return call_static_method<"defaultFinisher", jni::ref<java::util::function::BiConsumer>>(); }
	static jni::ref<java::util::stream::Gatherer> ofSequential(jni::ref<java::util::stream::Gatherer_Integrator> integrator) { return call_static_method<"ofSequential", jni::ref<java::util::stream::Gatherer>>(integrator); }
	static jni::ref<java::util::stream::Gatherer> ofSequential(jni::ref<java::util::stream::Gatherer_Integrator> integrator, jni::ref<java::util::function::BiConsumer> finisher) { return call_static_method<"ofSequential", jni::ref<java::util::stream::Gatherer>>(integrator, finisher); }
	static jni::ref<java::util::stream::Gatherer> ofSequential(jni::ref<java::util::function::Supplier> initializer, jni::ref<java::util::stream::Gatherer_Integrator> integrator) { return call_static_method<"ofSequential", jni::ref<java::util::stream::Gatherer>>(initializer, integrator); }
	static jni::ref<java::util::stream::Gatherer> ofSequential(jni::ref<java::util::function::Supplier> initializer, jni::ref<java::util::stream::Gatherer_Integrator> integrator, jni::ref<java::util::function::BiConsumer> finisher) { return call_static_method<"ofSequential", jni::ref<java::util::stream::Gatherer>>(initializer, integrator, finisher); }
	static jni::ref<java::util::stream::Gatherer> of(jni::ref<java::util::stream::Gatherer_Integrator> integrator) { return call_static_method<"of", jni::ref<java::util::stream::Gatherer>>(integrator); }
	static jni::ref<java::util::stream::Gatherer> of(jni::ref<java::util::stream::Gatherer_Integrator> integrator, jni::ref<java::util::function::BiConsumer> finisher) { return call_static_method<"of", jni::ref<java::util::stream::Gatherer>>(integrator, finisher); }
	static jni::ref<java::util::stream::Gatherer> of(jni::ref<java::util::function::Supplier> initializer, jni::ref<java::util::stream::Gatherer_Integrator> integrator, jni::ref<java::util::function::BinaryOperator> combiner, jni::ref<java::util::function::BiConsumer> finisher) { return call_static_method<"of", jni::ref<java::util::stream::Gatherer>>(initializer, integrator, combiner, finisher); }

protected:

	Gatherer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_GATHERER
