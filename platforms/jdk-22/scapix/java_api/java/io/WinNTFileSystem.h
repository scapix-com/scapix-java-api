// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/FileSystem.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_WINNTFILESYSTEM_FWD
#define SCAPIX_JAVA_API_JAVA_IO_WINNTFILESYSTEM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class WinNTFileSystem; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::WinNTFileSystem>
{
	static constexpr fixed_string class_name = "java/io/WinNTFileSystem";
	using base_classes = std::tuple<scapix::java_api::java::io::FileSystem>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_WINNTFILESYSTEM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_WINNTFILESYSTEM)
#define SCAPIX_JAVA_API_JAVA_IO_WINNTFILESYSTEM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::io::WinNTFileSystem : public jni::object_base<"java/io/WinNTFileSystem",
	java::io::FileSystem>
{
public:

	jchar getSeparator() { return call_method<"getSeparator", jchar>(); }
	jchar getPathSeparator() { return call_method<"getPathSeparator", jchar>(); }
	jni::ref<java::lang::String> normalize(jni::ref<java::lang::String> path) { return call_method<"normalize", jni::ref<java::lang::String>>(path); }
	jint prefixLength(jni::ref<java::lang::String> path) { return call_method<"prefixLength", jint>(path); }
	jni::ref<java::lang::String> resolve(jni::ref<java::lang::String> parent, jni::ref<java::lang::String> child) { return call_method<"resolve", jni::ref<java::lang::String>>(parent, child); }
	jni::ref<java::lang::String> getDefaultParent() { return call_method<"getDefaultParent", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> fromURIPath(jni::ref<java::lang::String> path) { return call_method<"fromURIPath", jni::ref<java::lang::String>>(path); }
	jboolean isAbsolute(jni::ref<java::io::File> f) { return call_method<"isAbsolute", jboolean>(f); }
	jboolean isInvalid(jni::ref<java::io::File> f) { return call_method<"isInvalid", jboolean>(f); }
	jni::ref<java::lang::String> resolve(jni::ref<java::io::File> f) { return call_method<"resolve", jni::ref<java::lang::String>>(f); }
	jni::ref<java::lang::String> canonicalize(jni::ref<java::lang::String> path) { return call_method<"canonicalize", jni::ref<java::lang::String>>(path); }
	jint getBooleanAttributes(jni::ref<java::io::File> f) { return call_method<"getBooleanAttributes", jint>(f); }
	jboolean checkAccess(jni::ref<java::io::File> f, jint access) { return call_method<"checkAccess", jboolean>(f, access); }
	jlong getLastModifiedTime(jni::ref<java::io::File> f) { return call_method<"getLastModifiedTime", jlong>(f); }
	jlong getLength(jni::ref<java::io::File> f) { return call_method<"getLength", jlong>(f); }
	jboolean setPermission(jni::ref<java::io::File> f, jint access, jboolean enable, jboolean owneronly) { return call_method<"setPermission", jboolean>(f, access, enable, owneronly); }
	jboolean createFileExclusively(jni::ref<java::lang::String> path) { return call_method<"createFileExclusively", jboolean>(path); }
	jni::ref<jni::array<java::lang::String>> list(jni::ref<java::io::File> f) { return call_method<"list", jni::ref<jni::array<java::lang::String>>>(f); }
	jboolean createDirectory(jni::ref<java::io::File> f) { return call_method<"createDirectory", jboolean>(f); }
	jboolean setLastModifiedTime(jni::ref<java::io::File> f, jlong time) { return call_method<"setLastModifiedTime", jboolean>(f, time); }
	jboolean setReadOnly(jni::ref<java::io::File> f) { return call_method<"setReadOnly", jboolean>(f); }
	jboolean delete_(jni::ref<java::io::File> f) { return call_method<"delete", jboolean>(f); }
	jboolean rename(jni::ref<java::io::File> f1, jni::ref<java::io::File> f2) { return call_method<"rename", jboolean>(f1, f2); }
	jni::ref<jni::array<java::io::File>> listRoots() { return call_method<"listRoots", jni::ref<jni::array<java::io::File>>>(); }
	jlong getSpace(jni::ref<java::io::File> f, jint t) { return call_method<"getSpace", jlong>(f, t); }
	jint getNameMax(jni::ref<java::lang::String> path) { return call_method<"getNameMax", jint>(path); }
	jint compare(jni::ref<java::io::File> f1, jni::ref<java::io::File> f2) { return call_method<"compare", jint>(f1, f2); }
	jint hashCode(jni::ref<java::io::File> f) { return call_method<"hashCode", jint>(f); }

protected:

	WinNTFileSystem(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_WINNTFILESYSTEM
