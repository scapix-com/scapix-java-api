// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterInputStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_BUFFEREDINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_IO_BUFFEREDINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class BufferedInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::BufferedInputStream>
{
	static constexpr fixed_string class_name = "java/io/BufferedInputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::FilterInputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_BUFFEREDINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_BUFFEREDINPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_IO_BUFFEREDINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::BufferedInputStream : public jni::object_base<"java/io/BufferedInputStream",
	java::io::FilterInputStream>
{
public:

	static jni::ref<java::io::BufferedInputStream> new_object(jni::ref<java::io::InputStream> in) { return base_::new_object(in); }
	static jni::ref<java::io::BufferedInputStream> new_object(jni::ref<java::io::InputStream> in, jint size) { return base_::new_object(in, size); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"read", jint>(b, off, len); }
	jlong skip(jlong n) { return call_method<"skip", jlong>(n); }
	jint available() { return call_method<"available", jint>(); }
	void mark(jint readlimit) { return call_method<"mark", void>(readlimit); }
	void reset() { return call_method<"reset", void>(); }
	jboolean markSupported() { return call_method<"markSupported", jboolean>(); }
	void close() { return call_method<"close", void>(); }
	jlong transferTo(jni::ref<java::io::OutputStream> out) { return call_method<"transferTo", jlong>(out); }

protected:

	BufferedInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_BUFFEREDINPUTSTREAM
