// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterOutputStream.h>

#ifndef SCAPIX_JAVA_API_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::crypto { class CipherOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::crypto::CipherOutputStream>
{
	static constexpr fixed_string class_name = "javax/crypto/CipherOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::FilterOutputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM)
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/javax/crypto/Cipher.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::crypto::CipherOutputStream : public jni::object_base<"javax/crypto/CipherOutputStream",
	java::io::FilterOutputStream>
{
public:

	static jni::ref<javax::crypto::CipherOutputStream> new_object(jni::ref<java::io::OutputStream> os, jni::ref<javax::crypto::Cipher> c) { return base_::new_object(os, c); }
	void write(jint b) { return call_method<"write", void>(b); }
	void write(jni::ref<jni::array<jbyte>> b) { return call_method<"write", void>(b); }
	void write(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"write", void>(b, off, len); }
	void flush() { return call_method<"flush", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	CipherOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_CIPHEROUTPUTSTREAM
