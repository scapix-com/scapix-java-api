// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/app/Service.h>

#ifndef SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::accessibilityservice { class AccessibilityService; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::accessibilityservice::AccessibilityService>
{
	static constexpr fixed_string class_name = "android/accessibilityservice/AccessibilityService";
	using base_classes = std::tuple<scapix::java_api::android::app::Service>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICE)
#define SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/accessibilityservice/AccessibilityButtonController.h>
#include <scapix/java_api/android/accessibilityservice/AccessibilityGestureEvent.h>
#include <scapix/java_api/android/accessibilityservice/AccessibilityService_GestureResultCallback.h>
#include <scapix/java_api/android/accessibilityservice/AccessibilityService_MagnificationController.h>
#include <scapix/java_api/android/accessibilityservice/AccessibilityService_SoftKeyboardController.h>
#include <scapix/java_api/android/accessibilityservice/AccessibilityService_TakeScreenshotCallback.h>
#include <scapix/java_api/android/accessibilityservice/AccessibilityServiceInfo.h>
#include <scapix/java_api/android/accessibilityservice/FingerprintGestureController.h>
#include <scapix/java_api/android/accessibilityservice/GestureDescription.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/graphics/Region.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/util/SparseArray.h>
#include <scapix/java_api/android/view/Display.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/android/accessibilityservice/AccessibilityService_ScreenshotResult.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::accessibilityservice::AccessibilityService : public jni::object_base<"android/accessibilityservice/AccessibilityService",
	android::app::Service>
{
public:

	using TakeScreenshotCallback = AccessibilityService_TakeScreenshotCallback;
	using SoftKeyboardController = AccessibilityService_SoftKeyboardController;
	using ScreenshotResult = AccessibilityService_ScreenshotResult;
	using MagnificationController = AccessibilityService_MagnificationController;
	using GestureResultCallback = AccessibilityService_GestureResultCallback;

	static jint ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR() { return get_static_field<"ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR", jint>(); }
	static jint ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT() { return get_static_field<"ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT", jint>(); }
	static jint ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY() { return get_static_field<"ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY", jint>(); }
	static jint ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS() { return get_static_field<"ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS", jint>(); }
	static jint GESTURE_2_FINGER_DOUBLE_TAP() { return get_static_field<"GESTURE_2_FINGER_DOUBLE_TAP", jint>(); }
	static jint GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD() { return get_static_field<"GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD", jint>(); }
	static jint GESTURE_2_FINGER_SINGLE_TAP() { return get_static_field<"GESTURE_2_FINGER_SINGLE_TAP", jint>(); }
	static jint GESTURE_2_FINGER_SWIPE_DOWN() { return get_static_field<"GESTURE_2_FINGER_SWIPE_DOWN", jint>(); }
	static jint GESTURE_2_FINGER_SWIPE_LEFT() { return get_static_field<"GESTURE_2_FINGER_SWIPE_LEFT", jint>(); }
	static jint GESTURE_2_FINGER_SWIPE_RIGHT() { return get_static_field<"GESTURE_2_FINGER_SWIPE_RIGHT", jint>(); }
	static jint GESTURE_2_FINGER_SWIPE_UP() { return get_static_field<"GESTURE_2_FINGER_SWIPE_UP", jint>(); }
	static jint GESTURE_2_FINGER_TRIPLE_TAP() { return get_static_field<"GESTURE_2_FINGER_TRIPLE_TAP", jint>(); }
	static jint GESTURE_3_FINGER_DOUBLE_TAP() { return get_static_field<"GESTURE_3_FINGER_DOUBLE_TAP", jint>(); }
	static jint GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLD() { return get_static_field<"GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLD", jint>(); }
	static jint GESTURE_3_FINGER_SINGLE_TAP() { return get_static_field<"GESTURE_3_FINGER_SINGLE_TAP", jint>(); }
	static jint GESTURE_3_FINGER_SWIPE_DOWN() { return get_static_field<"GESTURE_3_FINGER_SWIPE_DOWN", jint>(); }
	static jint GESTURE_3_FINGER_SWIPE_LEFT() { return get_static_field<"GESTURE_3_FINGER_SWIPE_LEFT", jint>(); }
	static jint GESTURE_3_FINGER_SWIPE_RIGHT() { return get_static_field<"GESTURE_3_FINGER_SWIPE_RIGHT", jint>(); }
	static jint GESTURE_3_FINGER_SWIPE_UP() { return get_static_field<"GESTURE_3_FINGER_SWIPE_UP", jint>(); }
	static jint GESTURE_3_FINGER_TRIPLE_TAP() { return get_static_field<"GESTURE_3_FINGER_TRIPLE_TAP", jint>(); }
	static jint GESTURE_4_FINGER_DOUBLE_TAP() { return get_static_field<"GESTURE_4_FINGER_DOUBLE_TAP", jint>(); }
	static jint GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLD() { return get_static_field<"GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLD", jint>(); }
	static jint GESTURE_4_FINGER_SINGLE_TAP() { return get_static_field<"GESTURE_4_FINGER_SINGLE_TAP", jint>(); }
	static jint GESTURE_4_FINGER_SWIPE_DOWN() { return get_static_field<"GESTURE_4_FINGER_SWIPE_DOWN", jint>(); }
	static jint GESTURE_4_FINGER_SWIPE_LEFT() { return get_static_field<"GESTURE_4_FINGER_SWIPE_LEFT", jint>(); }
	static jint GESTURE_4_FINGER_SWIPE_RIGHT() { return get_static_field<"GESTURE_4_FINGER_SWIPE_RIGHT", jint>(); }
	static jint GESTURE_4_FINGER_SWIPE_UP() { return get_static_field<"GESTURE_4_FINGER_SWIPE_UP", jint>(); }
	static jint GESTURE_4_FINGER_TRIPLE_TAP() { return get_static_field<"GESTURE_4_FINGER_TRIPLE_TAP", jint>(); }
	static jint GESTURE_DOUBLE_TAP() { return get_static_field<"GESTURE_DOUBLE_TAP", jint>(); }
	static jint GESTURE_DOUBLE_TAP_AND_HOLD() { return get_static_field<"GESTURE_DOUBLE_TAP_AND_HOLD", jint>(); }
	static jint GESTURE_SWIPE_DOWN() { return get_static_field<"GESTURE_SWIPE_DOWN", jint>(); }
	static jint GESTURE_SWIPE_DOWN_AND_LEFT() { return get_static_field<"GESTURE_SWIPE_DOWN_AND_LEFT", jint>(); }
	static jint GESTURE_SWIPE_DOWN_AND_RIGHT() { return get_static_field<"GESTURE_SWIPE_DOWN_AND_RIGHT", jint>(); }
	static jint GESTURE_SWIPE_DOWN_AND_UP() { return get_static_field<"GESTURE_SWIPE_DOWN_AND_UP", jint>(); }
	static jint GESTURE_SWIPE_LEFT() { return get_static_field<"GESTURE_SWIPE_LEFT", jint>(); }
	static jint GESTURE_SWIPE_LEFT_AND_DOWN() { return get_static_field<"GESTURE_SWIPE_LEFT_AND_DOWN", jint>(); }
	static jint GESTURE_SWIPE_LEFT_AND_RIGHT() { return get_static_field<"GESTURE_SWIPE_LEFT_AND_RIGHT", jint>(); }
	static jint GESTURE_SWIPE_LEFT_AND_UP() { return get_static_field<"GESTURE_SWIPE_LEFT_AND_UP", jint>(); }
	static jint GESTURE_SWIPE_RIGHT() { return get_static_field<"GESTURE_SWIPE_RIGHT", jint>(); }
	static jint GESTURE_SWIPE_RIGHT_AND_DOWN() { return get_static_field<"GESTURE_SWIPE_RIGHT_AND_DOWN", jint>(); }
	static jint GESTURE_SWIPE_RIGHT_AND_LEFT() { return get_static_field<"GESTURE_SWIPE_RIGHT_AND_LEFT", jint>(); }
	static jint GESTURE_SWIPE_RIGHT_AND_UP() { return get_static_field<"GESTURE_SWIPE_RIGHT_AND_UP", jint>(); }
	static jint GESTURE_SWIPE_UP() { return get_static_field<"GESTURE_SWIPE_UP", jint>(); }
	static jint GESTURE_SWIPE_UP_AND_DOWN() { return get_static_field<"GESTURE_SWIPE_UP_AND_DOWN", jint>(); }
	static jint GESTURE_SWIPE_UP_AND_LEFT() { return get_static_field<"GESTURE_SWIPE_UP_AND_LEFT", jint>(); }
	static jint GESTURE_SWIPE_UP_AND_RIGHT() { return get_static_field<"GESTURE_SWIPE_UP_AND_RIGHT", jint>(); }
	static jint GLOBAL_ACTION_BACK() { return get_static_field<"GLOBAL_ACTION_BACK", jint>(); }
	static jint GLOBAL_ACTION_HOME() { return get_static_field<"GLOBAL_ACTION_HOME", jint>(); }
	static jint GLOBAL_ACTION_LOCK_SCREEN() { return get_static_field<"GLOBAL_ACTION_LOCK_SCREEN", jint>(); }
	static jint GLOBAL_ACTION_NOTIFICATIONS() { return get_static_field<"GLOBAL_ACTION_NOTIFICATIONS", jint>(); }
	static jint GLOBAL_ACTION_POWER_DIALOG() { return get_static_field<"GLOBAL_ACTION_POWER_DIALOG", jint>(); }
	static jint GLOBAL_ACTION_QUICK_SETTINGS() { return get_static_field<"GLOBAL_ACTION_QUICK_SETTINGS", jint>(); }
	static jint GLOBAL_ACTION_RECENTS() { return get_static_field<"GLOBAL_ACTION_RECENTS", jint>(); }
	static jint GLOBAL_ACTION_TAKE_SCREENSHOT() { return get_static_field<"GLOBAL_ACTION_TAKE_SCREENSHOT", jint>(); }
	static jint GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN() { return get_static_field<"GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN", jint>(); }
	static jni::ref<java::lang::String> SERVICE_INTERFACE() { return get_static_field<"SERVICE_INTERFACE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVICE_META_DATA() { return get_static_field<"SERVICE_META_DATA", jni::ref<java::lang::String>>(); }
	static jint SHOW_MODE_AUTO() { return get_static_field<"SHOW_MODE_AUTO", jint>(); }
	static jint SHOW_MODE_HIDDEN() { return get_static_field<"SHOW_MODE_HIDDEN", jint>(); }
	static jint SHOW_MODE_IGNORE_HARD_KEYBOARD() { return get_static_field<"SHOW_MODE_IGNORE_HARD_KEYBOARD", jint>(); }

	static jni::ref<android::accessibilityservice::AccessibilityService> new_object() { return base_::new_object(); }
	void onAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> p1) { return call_method<"onAccessibilityEvent", void>(p1); }
	void onInterrupt() { return call_method<"onInterrupt", void>(); }
	jboolean onGesture(jni::ref<android::accessibilityservice::AccessibilityGestureEvent> gestureEvent) { return call_method<"onGesture", jboolean>(gestureEvent); }
	jni::ref<java::util::List> getWindows() { return call_method<"getWindows", jni::ref<java::util::List>>(); }
	jni::ref<android::util::SparseArray> getWindowsOnAllDisplays() { return call_method<"getWindowsOnAllDisplays", jni::ref<android::util::SparseArray>>(); }
	jni::ref<android::view::accessibility::AccessibilityNodeInfo> getRootInActiveWindow() { return call_method<"getRootInActiveWindow", jni::ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
	void disableSelf() { return call_method<"disableSelf", void>(); }
	jni::ref<android::content::Context> createDisplayContext(jni::ref<android::view::Display> display) { return call_method<"createDisplayContext", jni::ref<android::content::Context>>(display); }
	jni::ref<android::accessibilityservice::AccessibilityService_MagnificationController> getMagnificationController() { return call_method<"getMagnificationController", jni::ref<android::accessibilityservice::AccessibilityService_MagnificationController>>(); }
	jni::ref<android::accessibilityservice::FingerprintGestureController> getFingerprintGestureController() { return call_method<"getFingerprintGestureController", jni::ref<android::accessibilityservice::FingerprintGestureController>>(); }
	jboolean dispatchGesture(jni::ref<android::accessibilityservice::GestureDescription> gesture, jni::ref<android::accessibilityservice::AccessibilityService_GestureResultCallback> callback, jni::ref<android::os::Handler> handler) { return call_method<"dispatchGesture", jboolean>(gesture, callback, handler); }
	jni::ref<android::accessibilityservice::AccessibilityService_SoftKeyboardController> getSoftKeyboardController() { return call_method<"getSoftKeyboardController", jni::ref<android::accessibilityservice::AccessibilityService_SoftKeyboardController>>(); }
	jni::ref<android::accessibilityservice::AccessibilityButtonController> getAccessibilityButtonController() { return call_method<"getAccessibilityButtonController", jni::ref<android::accessibilityservice::AccessibilityButtonController>>(); }
	jni::ref<android::accessibilityservice::AccessibilityButtonController> getAccessibilityButtonController(jint displayId) { return call_method<"getAccessibilityButtonController", jni::ref<android::accessibilityservice::AccessibilityButtonController>>(displayId); }
	void onSystemActionsChanged() { return call_method<"onSystemActionsChanged", void>(); }
	jni::ref<java::util::List> getSystemActions() { return call_method<"getSystemActions", jni::ref<java::util::List>>(); }
	jboolean performGlobalAction(jint action) { return call_method<"performGlobalAction", jboolean>(action); }
	jni::ref<android::view::accessibility::AccessibilityNodeInfo> findFocus(jint focus) { return call_method<"findFocus", jni::ref<android::view::accessibility::AccessibilityNodeInfo>>(focus); }
	jni::ref<android::accessibilityservice::AccessibilityServiceInfo> getServiceInfo() { return call_method<"getServiceInfo", jni::ref<android::accessibilityservice::AccessibilityServiceInfo>>(); }
	void setServiceInfo(jni::ref<android::accessibilityservice::AccessibilityServiceInfo> info) { return call_method<"setServiceInfo", void>(info); }
	jni::ref<java::lang::Object> getSystemService(jni::ref<java::lang::String> name) { return call_method<"getSystemService", jni::ref<java::lang::Object>>(name); }
	void takeScreenshot(jint displayId, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::accessibilityservice::AccessibilityService_TakeScreenshotCallback> callback) { return call_method<"takeScreenshot", void>(displayId, executor, callback); }
	jni::ref<android::os::IBinder> onBind(jni::ref<android::content::Intent> intent) { return call_method<"onBind", jni::ref<android::os::IBinder>>(intent); }
	void setGestureDetectionPassthroughRegion(jint displayId, jni::ref<android::graphics::Region> region) { return call_method<"setGestureDetectionPassthroughRegion", void>(displayId, region); }
	void setTouchExplorationPassthroughRegion(jint displayId, jni::ref<android::graphics::Region> region) { return call_method<"setTouchExplorationPassthroughRegion", void>(displayId, region); }

protected:

	AccessibilityService(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_ACCESSIBILITYSERVICE_ACCESSIBILITYSERVICE
