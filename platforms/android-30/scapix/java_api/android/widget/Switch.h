// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/CompoundButton.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_SWITCH_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_SWITCH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class Switch; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::Switch>
{
	static constexpr fixed_string class_name = "android/widget/Switch";
	using base_classes = std::tuple<scapix::java_api::android::widget::CompoundButton>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_SWITCH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_SWITCH)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_SWITCH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/graphics/BlendMode.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Typeface.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::Switch : public jni::object_base<"android/widget/Switch",
	android::widget::CompoundButton>
{
public:

	static jni::ref<android::widget::Switch> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::Switch> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::Switch> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::widget::Switch> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	void setSwitchTextAppearance(jni::ref<android::content::Context> context, jint resid) { return call_method<"setSwitchTextAppearance", void>(context, resid); }
	void setSwitchTypeface(jni::ref<android::graphics::Typeface> tf, jint style) { return call_method<"setSwitchTypeface", void>(tf, style); }
	void setSwitchTypeface(jni::ref<android::graphics::Typeface> tf) { return call_method<"setSwitchTypeface", void>(tf); }
	void setSwitchPadding(jint pixels) { return call_method<"setSwitchPadding", void>(pixels); }
	jint getSwitchPadding() { return call_method<"getSwitchPadding", jint>(); }
	void setSwitchMinWidth(jint pixels) { return call_method<"setSwitchMinWidth", void>(pixels); }
	jint getSwitchMinWidth() { return call_method<"getSwitchMinWidth", jint>(); }
	void setThumbTextPadding(jint pixels) { return call_method<"setThumbTextPadding", void>(pixels); }
	jint getThumbTextPadding() { return call_method<"getThumbTextPadding", jint>(); }
	void setTrackDrawable(jni::ref<android::graphics::drawable::Drawable> track) { return call_method<"setTrackDrawable", void>(track); }
	void setTrackResource(jint resId) { return call_method<"setTrackResource", void>(resId); }
	jni::ref<android::graphics::drawable::Drawable> getTrackDrawable() { return call_method<"getTrackDrawable", jni::ref<android::graphics::drawable::Drawable>>(); }
	void setTrackTintList(jni::ref<android::content::res::ColorStateList> tint) { return call_method<"setTrackTintList", void>(tint); }
	jni::ref<android::content::res::ColorStateList> getTrackTintList() { return call_method<"getTrackTintList", jni::ref<android::content::res::ColorStateList>>(); }
	void setTrackTintMode(jni::ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<"setTrackTintMode", void>(tintMode); }
	void setTrackTintBlendMode(jni::ref<android::graphics::BlendMode> blendMode) { return call_method<"setTrackTintBlendMode", void>(blendMode); }
	jni::ref<android::graphics::PorterDuff_Mode> getTrackTintMode() { return call_method<"getTrackTintMode", jni::ref<android::graphics::PorterDuff_Mode>>(); }
	jni::ref<android::graphics::BlendMode> getTrackTintBlendMode() { return call_method<"getTrackTintBlendMode", jni::ref<android::graphics::BlendMode>>(); }
	void setThumbDrawable(jni::ref<android::graphics::drawable::Drawable> thumb) { return call_method<"setThumbDrawable", void>(thumb); }
	void setThumbResource(jint resId) { return call_method<"setThumbResource", void>(resId); }
	jni::ref<android::graphics::drawable::Drawable> getThumbDrawable() { return call_method<"getThumbDrawable", jni::ref<android::graphics::drawable::Drawable>>(); }
	void setThumbTintList(jni::ref<android::content::res::ColorStateList> tint) { return call_method<"setThumbTintList", void>(tint); }
	jni::ref<android::content::res::ColorStateList> getThumbTintList() { return call_method<"getThumbTintList", jni::ref<android::content::res::ColorStateList>>(); }
	void setThumbTintMode(jni::ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<"setThumbTintMode", void>(tintMode); }
	void setThumbTintBlendMode(jni::ref<android::graphics::BlendMode> blendMode) { return call_method<"setThumbTintBlendMode", void>(blendMode); }
	jni::ref<android::graphics::PorterDuff_Mode> getThumbTintMode() { return call_method<"getThumbTintMode", jni::ref<android::graphics::PorterDuff_Mode>>(); }
	jni::ref<android::graphics::BlendMode> getThumbTintBlendMode() { return call_method<"getThumbTintBlendMode", jni::ref<android::graphics::BlendMode>>(); }
	void setSplitTrack(jboolean splitTrack) { return call_method<"setSplitTrack", void>(splitTrack); }
	jboolean getSplitTrack() { return call_method<"getSplitTrack", jboolean>(); }
	jni::ref<java::lang::CharSequence> getTextOn() { return call_method<"getTextOn", jni::ref<java::lang::CharSequence>>(); }
	void setTextOn(jni::ref<java::lang::CharSequence> textOn) { return call_method<"setTextOn", void>(textOn); }
	jni::ref<java::lang::CharSequence> getTextOff() { return call_method<"getTextOff", jni::ref<java::lang::CharSequence>>(); }
	void setTextOff(jni::ref<java::lang::CharSequence> textOff) { return call_method<"setTextOff", void>(textOff); }
	void setShowText(jboolean showText) { return call_method<"setShowText", void>(showText); }
	jboolean getShowText() { return call_method<"getShowText", jboolean>(); }
	void onMeasure(jint widthMeasureSpec, jint heightMeasureSpec) { return call_method<"onMeasure", void>(widthMeasureSpec, heightMeasureSpec); }
	jboolean onTouchEvent(jni::ref<android::view::MotionEvent> ev) { return call_method<"onTouchEvent", jboolean>(ev); }
	void toggle() { return call_method<"toggle", void>(); }
	void setChecked(jboolean checked) { return call_method<"setChecked", void>(checked); }
	void draw(jni::ref<android::graphics::Canvas> c) { return call_method<"draw", void>(c); }
	jint getCompoundPaddingLeft() { return call_method<"getCompoundPaddingLeft", jint>(); }
	jint getCompoundPaddingRight() { return call_method<"getCompoundPaddingRight", jint>(); }
	void drawableHotspotChanged(jfloat x, jfloat y) { return call_method<"drawableHotspotChanged", void>(x, y); }
	void jumpDrawablesToCurrentState() { return call_method<"jumpDrawablesToCurrentState", void>(); }
	jni::ref<java::lang::CharSequence> getAccessibilityClassName() { return call_method<"getAccessibilityClassName", jni::ref<java::lang::CharSequence>>(); }

protected:

	Switch(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_SWITCH
