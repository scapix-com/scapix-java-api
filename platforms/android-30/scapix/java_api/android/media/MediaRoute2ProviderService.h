// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/app/Service.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTE2PROVIDERSERVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTE2PROVIDERSERVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaRoute2ProviderService; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaRoute2ProviderService>
{
	static constexpr fixed_string class_name = "android/media/MediaRoute2ProviderService";
	using base_classes = std::tuple<scapix::java_api::android::app::Service>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTE2PROVIDERSERVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTE2PROVIDERSERVICE)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTE2PROVIDERSERVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/media/RouteDiscoveryPreference.h>
#include <scapix/java_api/android/media/RoutingSessionInfo.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaRoute2ProviderService : public jni::object_base<"android/media/MediaRoute2ProviderService",
	android::app::Service>
{
public:

	static jint REASON_INVALID_COMMAND() { return get_static_field<"REASON_INVALID_COMMAND", jint>(); }
	static jint REASON_NETWORK_ERROR() { return get_static_field<"REASON_NETWORK_ERROR", jint>(); }
	static jint REASON_REJECTED() { return get_static_field<"REASON_REJECTED", jint>(); }
	static jint REASON_ROUTE_NOT_AVAILABLE() { return get_static_field<"REASON_ROUTE_NOT_AVAILABLE", jint>(); }
	static jint REASON_UNKNOWN_ERROR() { return get_static_field<"REASON_UNKNOWN_ERROR", jint>(); }
	static jlong REQUEST_ID_NONE() { return get_static_field<"REQUEST_ID_NONE", jlong>(); }
	static jni::ref<java::lang::String> SERVICE_INTERFACE() { return get_static_field<"SERVICE_INTERFACE", jni::ref<java::lang::String>>(); }

	static jni::ref<android::media::MediaRoute2ProviderService> new_object() { return base_::new_object(); }
	jni::ref<android::os::IBinder> onBind(jni::ref<android::content::Intent> intent) { return call_method<"onBind", jni::ref<android::os::IBinder>>(intent); }
	void onSetRouteVolume(jlong p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"onSetRouteVolume", void>(p1, p2, p3); }
	void onSetSessionVolume(jlong p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"onSetSessionVolume", void>(p1, p2, p3); }
	jni::ref<android::media::RoutingSessionInfo> getSessionInfo(jni::ref<java::lang::String> sessionId) { return call_method<"getSessionInfo", jni::ref<android::media::RoutingSessionInfo>>(sessionId); }
	jni::ref<java::util::List> getAllSessionInfo() { return call_method<"getAllSessionInfo", jni::ref<java::util::List>>(); }
	void notifySessionCreated(jlong requestId, jni::ref<android::media::RoutingSessionInfo> p2) { return call_method<"notifySessionCreated", void>(requestId, p2); }
	void notifySessionUpdated(jni::ref<android::media::RoutingSessionInfo> sessionInfo) { return call_method<"notifySessionUpdated", void>(sessionInfo); }
	void notifySessionReleased(jni::ref<java::lang::String> sessionId) { return call_method<"notifySessionReleased", void>(sessionId); }
	void notifyRequestFailed(jlong requestId, jint p2) { return call_method<"notifyRequestFailed", void>(requestId, p2); }
	void onCreateSession(jlong p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<android::os::Bundle> p4) { return call_method<"onCreateSession", void>(p1, p2, p3, p4); }
	void onReleaseSession(jlong p1, jni::ref<java::lang::String> p2) { return call_method<"onReleaseSession", void>(p1, p2); }
	void onSelectRoute(jlong p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"onSelectRoute", void>(p1, p2, p3); }
	void onDeselectRoute(jlong p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"onDeselectRoute", void>(p1, p2, p3); }
	void onTransferToRoute(jlong p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"onTransferToRoute", void>(p1, p2, p3); }
	void onDiscoveryPreferenceChanged(jni::ref<android::media::RouteDiscoveryPreference> preference) { return call_method<"onDiscoveryPreferenceChanged", void>(preference); }
	void notifyRoutes(jni::ref<java::util::Collection> routes) { return call_method<"notifyRoutes", void>(routes); }

protected:

	MediaRoute2ProviderService(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAROUTE2PROVIDERSERVICE
