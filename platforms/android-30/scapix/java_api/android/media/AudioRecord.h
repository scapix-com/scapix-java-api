// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/media/AudioRouting.h>
#include <scapix/java_api/android/media/MicrophoneDirection.h>
#include <scapix/java_api/android/media/AudioRecordingMonitor.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class AudioRecord; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::AudioRecord>
{
	static constexpr fixed_string class_name = "android/media/AudioRecord";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::media::AudioRouting, scapix::java_api::android::media::MicrophoneDirection, scapix::java_api::android::media::AudioRecordingMonitor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/AudioDeviceInfo.h>
#include <scapix/java_api/android/media/AudioFormat.h>
#include <scapix/java_api/android/media/AudioManager_AudioRecordingCallback.h>
#include <scapix/java_api/android/media/AudioRecord_OnRecordPositionUpdateListener.h>
#include <scapix/java_api/android/media/AudioRecord_OnRoutingChangedListener.h>
#include <scapix/java_api/android/media/AudioRecordingConfiguration.h>
#include <scapix/java_api/android/media/AudioRouting_OnRoutingChangedListener.h>
#include <scapix/java_api/android/media/AudioTimestamp.h>
#include <scapix/java_api/android/media/MediaSyncEvent.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/PersistableBundle.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/android/media/AudioRecord_MetricsConstants.h>
#include <scapix/java_api/android/media/AudioRecord_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::AudioRecord : public jni::object_base<"android/media/AudioRecord",
	java::lang::Object,
	android::media::AudioRouting,
	android::media::MicrophoneDirection,
	android::media::AudioRecordingMonitor>
{
public:

	using OnRoutingChangedListener = AudioRecord_OnRoutingChangedListener;
	using OnRecordPositionUpdateListener = AudioRecord_OnRecordPositionUpdateListener;
	using MetricsConstants = AudioRecord_MetricsConstants;
	using Builder = AudioRecord_Builder;

	static jint ERROR() { return get_static_field<"ERROR", jint>(); }
	static jint ERROR_BAD_VALUE() { return get_static_field<"ERROR_BAD_VALUE", jint>(); }
	static jint ERROR_DEAD_OBJECT() { return get_static_field<"ERROR_DEAD_OBJECT", jint>(); }
	static jint ERROR_INVALID_OPERATION() { return get_static_field<"ERROR_INVALID_OPERATION", jint>(); }
	static jint READ_BLOCKING() { return get_static_field<"READ_BLOCKING", jint>(); }
	static jint READ_NON_BLOCKING() { return get_static_field<"READ_NON_BLOCKING", jint>(); }
	static jint RECORDSTATE_RECORDING() { return get_static_field<"RECORDSTATE_RECORDING", jint>(); }
	static jint RECORDSTATE_STOPPED() { return get_static_field<"RECORDSTATE_STOPPED", jint>(); }
	static jint STATE_INITIALIZED() { return get_static_field<"STATE_INITIALIZED", jint>(); }
	static jint STATE_UNINITIALIZED() { return get_static_field<"STATE_UNINITIALIZED", jint>(); }
	static jint SUCCESS() { return get_static_field<"SUCCESS", jint>(); }

	static jni::ref<android::media::AudioRecord> new_object(jint audioSource, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes) { return base_::new_object(audioSource, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes); }
	void release() { return call_method<"release", void>(); }
	jint getSampleRate() { return call_method<"getSampleRate", jint>(); }
	jint getAudioSource() { return call_method<"getAudioSource", jint>(); }
	jint getAudioFormat() { return call_method<"getAudioFormat", jint>(); }
	jint getChannelConfiguration() { return call_method<"getChannelConfiguration", jint>(); }
	jni::ref<android::media::AudioFormat> getFormat() { return call_method<"getFormat", jni::ref<android::media::AudioFormat>>(); }
	jint getChannelCount() { return call_method<"getChannelCount", jint>(); }
	jint getState() { return call_method<"getState", jint>(); }
	jint getRecordingState() { return call_method<"getRecordingState", jint>(); }
	jint getBufferSizeInFrames() { return call_method<"getBufferSizeInFrames", jint>(); }
	jint getNotificationMarkerPosition() { return call_method<"getNotificationMarkerPosition", jint>(); }
	jint getPositionNotificationPeriod() { return call_method<"getPositionNotificationPeriod", jint>(); }
	jint getTimestamp(jni::ref<android::media::AudioTimestamp> outTimestamp, jint timebase) { return call_method<"getTimestamp", jint>(outTimestamp, timebase); }
	static jint getMinBufferSize(jint sampleRateInHz, jint channelConfig, jint audioFormat) { return call_static_method<"getMinBufferSize", jint>(sampleRateInHz, channelConfig, audioFormat); }
	jint getAudioSessionId() { return call_method<"getAudioSessionId", jint>(); }
	jboolean isPrivacySensitive() { return call_method<"isPrivacySensitive", jboolean>(); }
	void startRecording() { return call_method<"startRecording", void>(); }
	void startRecording(jni::ref<android::media::MediaSyncEvent> syncEvent) { return call_method<"startRecording", void>(syncEvent); }
	void stop() { return call_method<"stop", void>(); }
	jint read(jni::ref<jni::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes) { return call_method<"read", jint>(audioData, offsetInBytes, sizeInBytes); }
	jint read(jni::ref<jni::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes, jint readMode) { return call_method<"read", jint>(audioData, offsetInBytes, sizeInBytes, readMode); }
	jint read(jni::ref<jni::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts) { return call_method<"read", jint>(audioData, offsetInShorts, sizeInShorts); }
	jint read(jni::ref<jni::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts, jint readMode) { return call_method<"read", jint>(audioData, offsetInShorts, sizeInShorts, readMode); }
	jint read(jni::ref<jni::array<jfloat>> audioData, jint offsetInFloats, jint sizeInFloats, jint readMode) { return call_method<"read", jint>(audioData, offsetInFloats, sizeInFloats, readMode); }
	jint read(jni::ref<java::nio::ByteBuffer> audioBuffer, jint sizeInBytes) { return call_method<"read", jint>(audioBuffer, sizeInBytes); }
	jint read(jni::ref<java::nio::ByteBuffer> audioBuffer, jint sizeInBytes, jint readMode) { return call_method<"read", jint>(audioBuffer, sizeInBytes, readMode); }
	jni::ref<android::os::PersistableBundle> getMetrics() { return call_method<"getMetrics", jni::ref<android::os::PersistableBundle>>(); }
	void setRecordPositionUpdateListener(jni::ref<android::media::AudioRecord_OnRecordPositionUpdateListener> listener) { return call_method<"setRecordPositionUpdateListener", void>(listener); }
	void setRecordPositionUpdateListener(jni::ref<android::media::AudioRecord_OnRecordPositionUpdateListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"setRecordPositionUpdateListener", void>(listener, handler); }
	jint setNotificationMarkerPosition(jint markerInFrames) { return call_method<"setNotificationMarkerPosition", jint>(markerInFrames); }
	jni::ref<android::media::AudioDeviceInfo> getRoutedDevice() { return call_method<"getRoutedDevice", jni::ref<android::media::AudioDeviceInfo>>(); }
	void addOnRoutingChangedListener(jni::ref<android::media::AudioRouting_OnRoutingChangedListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"addOnRoutingChangedListener", void>(listener, handler); }
	void removeOnRoutingChangedListener(jni::ref<android::media::AudioRouting_OnRoutingChangedListener> listener) { return call_method<"removeOnRoutingChangedListener", void>(listener); }
	void addOnRoutingChangedListener(jni::ref<android::media::AudioRecord_OnRoutingChangedListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"addOnRoutingChangedListener", void>(listener, handler); }
	void removeOnRoutingChangedListener(jni::ref<android::media::AudioRecord_OnRoutingChangedListener> listener) { return call_method<"removeOnRoutingChangedListener", void>(listener); }
	jint setPositionNotificationPeriod(jint periodInFrames) { return call_method<"setPositionNotificationPeriod", jint>(periodInFrames); }
	jboolean setPreferredDevice(jni::ref<android::media::AudioDeviceInfo> deviceInfo) { return call_method<"setPreferredDevice", jboolean>(deviceInfo); }
	jni::ref<android::media::AudioDeviceInfo> getPreferredDevice() { return call_method<"getPreferredDevice", jni::ref<android::media::AudioDeviceInfo>>(); }
	jni::ref<java::util::List> getActiveMicrophones() { return call_method<"getActiveMicrophones", jni::ref<java::util::List>>(); }
	void registerAudioRecordingCallback(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::media::AudioManager_AudioRecordingCallback> cb) { return call_method<"registerAudioRecordingCallback", void>(executor, cb); }
	void unregisterAudioRecordingCallback(jni::ref<android::media::AudioManager_AudioRecordingCallback> cb) { return call_method<"unregisterAudioRecordingCallback", void>(cb); }
	jni::ref<android::media::AudioRecordingConfiguration> getActiveRecordingConfiguration() { return call_method<"getActiveRecordingConfiguration", jni::ref<android::media::AudioRecordingConfiguration>>(); }
	jboolean setPreferredMicrophoneDirection(jint direction) { return call_method<"setPreferredMicrophoneDirection", jboolean>(direction); }
	jboolean setPreferredMicrophoneFieldDimension(jfloat zoom) { return call_method<"setPreferredMicrophoneFieldDimension", jboolean>(zoom); }

protected:

	AudioRecord(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD
