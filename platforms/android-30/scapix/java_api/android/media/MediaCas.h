// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACAS_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACAS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaCas; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaCas>
{
	static constexpr fixed_string class_name = "android/media/MediaCas";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACAS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACAS)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACAS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/media/MediaCas_EventListener.h>
#include <scapix/java_api/android/media/MediaCas_PluginDescriptor.h>
#include <scapix/java_api/android/media/MediaCas_Session.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaCas : public jni::object_base<"android/media/MediaCas",
	java::lang::Object,
	java::lang::AutoCloseable>
{
public:

	using Session = MediaCas_Session;
	using PluginDescriptor = MediaCas_PluginDescriptor;
	using EventListener = MediaCas_EventListener;

	static jint PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED() { return get_static_field<"PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED", jint>(); }
	static jint PLUGIN_STATUS_SESSION_NUMBER_CHANGED() { return get_static_field<"PLUGIN_STATUS_SESSION_NUMBER_CHANGED", jint>(); }
	static jint SCRAMBLING_MODE_AES128() { return get_static_field<"SCRAMBLING_MODE_AES128", jint>(); }
	static jint SCRAMBLING_MODE_AES_ECB() { return get_static_field<"SCRAMBLING_MODE_AES_ECB", jint>(); }
	static jint SCRAMBLING_MODE_AES_SCTE52() { return get_static_field<"SCRAMBLING_MODE_AES_SCTE52", jint>(); }
	static jint SCRAMBLING_MODE_DVB_CISSA_V1() { return get_static_field<"SCRAMBLING_MODE_DVB_CISSA_V1", jint>(); }
	static jint SCRAMBLING_MODE_DVB_CSA1() { return get_static_field<"SCRAMBLING_MODE_DVB_CSA1", jint>(); }
	static jint SCRAMBLING_MODE_DVB_CSA2() { return get_static_field<"SCRAMBLING_MODE_DVB_CSA2", jint>(); }
	static jint SCRAMBLING_MODE_DVB_CSA3_ENHANCE() { return get_static_field<"SCRAMBLING_MODE_DVB_CSA3_ENHANCE", jint>(); }
	static jint SCRAMBLING_MODE_DVB_CSA3_MINIMAL() { return get_static_field<"SCRAMBLING_MODE_DVB_CSA3_MINIMAL", jint>(); }
	static jint SCRAMBLING_MODE_DVB_CSA3_STANDARD() { return get_static_field<"SCRAMBLING_MODE_DVB_CSA3_STANDARD", jint>(); }
	static jint SCRAMBLING_MODE_DVB_IDSA() { return get_static_field<"SCRAMBLING_MODE_DVB_IDSA", jint>(); }
	static jint SCRAMBLING_MODE_MULTI2() { return get_static_field<"SCRAMBLING_MODE_MULTI2", jint>(); }
	static jint SCRAMBLING_MODE_RESERVED() { return get_static_field<"SCRAMBLING_MODE_RESERVED", jint>(); }
	static jint SCRAMBLING_MODE_TDES_ECB() { return get_static_field<"SCRAMBLING_MODE_TDES_ECB", jint>(); }
	static jint SCRAMBLING_MODE_TDES_SCTE52() { return get_static_field<"SCRAMBLING_MODE_TDES_SCTE52", jint>(); }
	static jint SESSION_USAGE_LIVE() { return get_static_field<"SESSION_USAGE_LIVE", jint>(); }
	static jint SESSION_USAGE_PLAYBACK() { return get_static_field<"SESSION_USAGE_PLAYBACK", jint>(); }
	static jint SESSION_USAGE_RECORD() { return get_static_field<"SESSION_USAGE_RECORD", jint>(); }
	static jint SESSION_USAGE_TIMESHIFT() { return get_static_field<"SESSION_USAGE_TIMESHIFT", jint>(); }

	static jni::ref<android::media::MediaCas> new_object(jint CA_system_id) { return base_::new_object(CA_system_id); }
	static jni::ref<android::media::MediaCas> new_object(jni::ref<android::content::Context> context, jint casSystemId, jni::ref<java::lang::String> tvInputServiceSessionId, jint priorityHint) { return base_::new_object(context, casSystemId, tvInputServiceSessionId, priorityHint); }
	static jboolean isSystemIdSupported(jint CA_system_id) { return call_static_method<"isSystemIdSupported", jboolean>(CA_system_id); }
	static jni::ref<jni::array<android::media::MediaCas_PluginDescriptor>> enumeratePlugins() { return call_static_method<"enumeratePlugins", jni::ref<jni::array<android::media::MediaCas_PluginDescriptor>>>(); }
	void setEventListener(jni::ref<android::media::MediaCas_EventListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"setEventListener", void>(listener, handler); }
	void setPrivateData(jni::ref<jni::array<jbyte>> data) { return call_method<"setPrivateData", void>(data); }
	jni::ref<android::media::MediaCas_Session> openSession() { return call_method<"openSession", jni::ref<android::media::MediaCas_Session>>(); }
	jni::ref<android::media::MediaCas_Session> openSession(jint sessionUsage, jint scramblingMode) { return call_method<"openSession", jni::ref<android::media::MediaCas_Session>>(sessionUsage, scramblingMode); }
	void processEmm(jni::ref<jni::array<jbyte>> data, jint offset, jint length) { return call_method<"processEmm", void>(data, offset, length); }
	void processEmm(jni::ref<jni::array<jbyte>> data) { return call_method<"processEmm", void>(data); }
	void sendEvent(jint event, jint arg, jni::ref<jni::array<jbyte>> data) { return call_method<"sendEvent", void>(event, arg, data); }
	void provision(jni::ref<java::lang::String> provisionString) { return call_method<"provision", void>(provisionString); }
	void refreshEntitlements(jint refreshType, jni::ref<jni::array<jbyte>> refreshData) { return call_method<"refreshEntitlements", void>(refreshType, refreshData); }
	void close() { return call_method<"close", void>(); }

protected:

	MediaCas(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIACAS
