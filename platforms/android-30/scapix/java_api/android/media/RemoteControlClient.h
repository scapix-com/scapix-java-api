// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_REMOTECONTROLCLIENT_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_REMOTECONTROLCLIENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class RemoteControlClient; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::RemoteControlClient>
{
	static constexpr fixed_string class_name = "android/media/RemoteControlClient";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_REMOTECONTROLCLIENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_REMOTECONTROLCLIENT)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_REMOTECONTROLCLIENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/PendingIntent.h>
#include <scapix/java_api/android/media/RemoteControlClient_MetadataEditor.h>
#include <scapix/java_api/android/media/RemoteControlClient_OnGetPlaybackPositionListener.h>
#include <scapix/java_api/android/media/RemoteControlClient_OnMetadataUpdateListener.h>
#include <scapix/java_api/android/media/RemoteControlClient_OnPlaybackPositionUpdateListener.h>
#include <scapix/java_api/android/media/session/MediaSession.h>
#include <scapix/java_api/android/os/Looper.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::RemoteControlClient : public jni::object_base<"android/media/RemoteControlClient",
	java::lang::Object>
{
public:

	using OnPlaybackPositionUpdateListener = RemoteControlClient_OnPlaybackPositionUpdateListener;
	using OnMetadataUpdateListener = RemoteControlClient_OnMetadataUpdateListener;
	using OnGetPlaybackPositionListener = RemoteControlClient_OnGetPlaybackPositionListener;
	using MetadataEditor = RemoteControlClient_MetadataEditor;

	static jint FLAG_KEY_MEDIA_FAST_FORWARD() { return get_static_field<"FLAG_KEY_MEDIA_FAST_FORWARD", jint>(); }
	static jint FLAG_KEY_MEDIA_NEXT() { return get_static_field<"FLAG_KEY_MEDIA_NEXT", jint>(); }
	static jint FLAG_KEY_MEDIA_PAUSE() { return get_static_field<"FLAG_KEY_MEDIA_PAUSE", jint>(); }
	static jint FLAG_KEY_MEDIA_PLAY() { return get_static_field<"FLAG_KEY_MEDIA_PLAY", jint>(); }
	static jint FLAG_KEY_MEDIA_PLAY_PAUSE() { return get_static_field<"FLAG_KEY_MEDIA_PLAY_PAUSE", jint>(); }
	static jint FLAG_KEY_MEDIA_POSITION_UPDATE() { return get_static_field<"FLAG_KEY_MEDIA_POSITION_UPDATE", jint>(); }
	static jint FLAG_KEY_MEDIA_PREVIOUS() { return get_static_field<"FLAG_KEY_MEDIA_PREVIOUS", jint>(); }
	static jint FLAG_KEY_MEDIA_RATING() { return get_static_field<"FLAG_KEY_MEDIA_RATING", jint>(); }
	static jint FLAG_KEY_MEDIA_REWIND() { return get_static_field<"FLAG_KEY_MEDIA_REWIND", jint>(); }
	static jint FLAG_KEY_MEDIA_STOP() { return get_static_field<"FLAG_KEY_MEDIA_STOP", jint>(); }
	static jint PLAYSTATE_BUFFERING() { return get_static_field<"PLAYSTATE_BUFFERING", jint>(); }
	static jint PLAYSTATE_ERROR() { return get_static_field<"PLAYSTATE_ERROR", jint>(); }
	static jint PLAYSTATE_FAST_FORWARDING() { return get_static_field<"PLAYSTATE_FAST_FORWARDING", jint>(); }
	static jint PLAYSTATE_PAUSED() { return get_static_field<"PLAYSTATE_PAUSED", jint>(); }
	static jint PLAYSTATE_PLAYING() { return get_static_field<"PLAYSTATE_PLAYING", jint>(); }
	static jint PLAYSTATE_REWINDING() { return get_static_field<"PLAYSTATE_REWINDING", jint>(); }
	static jint PLAYSTATE_SKIPPING_BACKWARDS() { return get_static_field<"PLAYSTATE_SKIPPING_BACKWARDS", jint>(); }
	static jint PLAYSTATE_SKIPPING_FORWARDS() { return get_static_field<"PLAYSTATE_SKIPPING_FORWARDS", jint>(); }
	static jint PLAYSTATE_STOPPED() { return get_static_field<"PLAYSTATE_STOPPED", jint>(); }

	static jni::ref<android::media::RemoteControlClient> new_object(jni::ref<android::app::PendingIntent> mediaButtonIntent) { return base_::new_object(mediaButtonIntent); }
	static jni::ref<android::media::RemoteControlClient> new_object(jni::ref<android::app::PendingIntent> mediaButtonIntent, jni::ref<android::os::Looper> looper) { return base_::new_object(mediaButtonIntent, looper); }
	jni::ref<android::media::session::MediaSession> getMediaSession() { return call_method<"getMediaSession", jni::ref<android::media::session::MediaSession>>(); }
	jni::ref<android::media::RemoteControlClient_MetadataEditor> editMetadata(jboolean startEmpty) { return call_method<"editMetadata", jni::ref<android::media::RemoteControlClient_MetadataEditor>>(startEmpty); }
	void setPlaybackState(jint state) { return call_method<"setPlaybackState", void>(state); }
	void setPlaybackState(jint state, jlong timeInMs, jfloat p3) { return call_method<"setPlaybackState", void>(state, timeInMs, p3); }
	void setTransportControlFlags(jint transportControlFlags) { return call_method<"setTransportControlFlags", void>(transportControlFlags); }
	void setMetadataUpdateListener(jni::ref<android::media::RemoteControlClient_OnMetadataUpdateListener> l) { return call_method<"setMetadataUpdateListener", void>(l); }
	void setPlaybackPositionUpdateListener(jni::ref<android::media::RemoteControlClient_OnPlaybackPositionUpdateListener> l) { return call_method<"setPlaybackPositionUpdateListener", void>(l); }
	void setOnGetPlaybackPositionListener(jni::ref<android::media::RemoteControlClient_OnGetPlaybackPositionListener> l) { return call_method<"setOnGetPlaybackPositionListener", void>(l); }

protected:

	RemoteControlClient(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_REMOTECONTROLCLIENT
