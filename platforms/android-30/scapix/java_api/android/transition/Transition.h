// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TRANSITION_TRANSITION_FWD
#define SCAPIX_JAVA_API_ANDROID_TRANSITION_TRANSITION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::transition { class Transition; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::transition::Transition>
{
	static constexpr fixed_string class_name = "android/transition/Transition";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TRANSITION_TRANSITION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TRANSITION_TRANSITION)
#define SCAPIX_JAVA_API_ANDROID_TRANSITION_TRANSITION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/animation/Animator.h>
#include <scapix/java_api/android/animation/TimeInterpolator.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/transition/PathMotion.h>
#include <scapix/java_api/android/transition/Transition_EpicenterCallback.h>
#include <scapix/java_api/android/transition/Transition_TransitionListener.h>
#include <scapix/java_api/android/transition/TransitionPropagation.h>
#include <scapix/java_api/android/transition/TransitionValues.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::transition::Transition : public jni::object_base<"android/transition/Transition",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using TransitionListener = Transition_TransitionListener;
	using EpicenterCallback = Transition_EpicenterCallback;

	static jint MATCH_ID() { return get_static_field<"MATCH_ID", jint>(); }
	static jint MATCH_INSTANCE() { return get_static_field<"MATCH_INSTANCE", jint>(); }
	static jint MATCH_ITEM_ID() { return get_static_field<"MATCH_ITEM_ID", jint>(); }
	static jint MATCH_NAME() { return get_static_field<"MATCH_NAME", jint>(); }

	static jni::ref<android::transition::Transition> new_object() { return base_::new_object(); }
	static jni::ref<android::transition::Transition> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	jni::ref<android::transition::Transition> setDuration(jlong duration) { return call_method<"setDuration", jni::ref<android::transition::Transition>>(duration); }
	jlong getDuration() { return call_method<"getDuration", jlong>(); }
	jni::ref<android::transition::Transition> setStartDelay(jlong startDelay) { return call_method<"setStartDelay", jni::ref<android::transition::Transition>>(startDelay); }
	jlong getStartDelay() { return call_method<"getStartDelay", jlong>(); }
	jni::ref<android::transition::Transition> setInterpolator(jni::ref<android::animation::TimeInterpolator> interpolator) { return call_method<"setInterpolator", jni::ref<android::transition::Transition>>(interpolator); }
	jni::ref<android::animation::TimeInterpolator> getInterpolator() { return call_method<"getInterpolator", jni::ref<android::animation::TimeInterpolator>>(); }
	jni::ref<jni::array<java::lang::String>> getTransitionProperties() { return call_method<"getTransitionProperties", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<android::animation::Animator> createAnimator(jni::ref<android::view::ViewGroup> sceneRoot, jni::ref<android::transition::TransitionValues> startValues, jni::ref<android::transition::TransitionValues> endValues) { return call_method<"createAnimator", jni::ref<android::animation::Animator>>(sceneRoot, startValues, endValues); }
	void setMatchOrder(jni::ref<jni::array<jint>> matches) { return call_method<"setMatchOrder", void>(matches); }
	void captureStartValues(jni::ref<android::transition::TransitionValues> p1) { return call_method<"captureStartValues", void>(p1); }
	void captureEndValues(jni::ref<android::transition::TransitionValues> p1) { return call_method<"captureEndValues", void>(p1); }
	jni::ref<android::transition::Transition> addTarget(jint targetId) { return call_method<"addTarget", jni::ref<android::transition::Transition>>(targetId); }
	jni::ref<android::transition::Transition> addTarget(jni::ref<java::lang::String> targetName) { return call_method<"addTarget", jni::ref<android::transition::Transition>>(targetName); }
	jni::ref<android::transition::Transition> addTarget(jni::ref<java::lang::Class> targetType) { return call_method<"addTarget", jni::ref<android::transition::Transition>>(targetType); }
	jni::ref<android::transition::Transition> removeTarget(jint targetId) { return call_method<"removeTarget", jni::ref<android::transition::Transition>>(targetId); }
	jni::ref<android::transition::Transition> removeTarget(jni::ref<java::lang::String> targetName) { return call_method<"removeTarget", jni::ref<android::transition::Transition>>(targetName); }
	jni::ref<android::transition::Transition> excludeTarget(jint targetId, jboolean exclude) { return call_method<"excludeTarget", jni::ref<android::transition::Transition>>(targetId, exclude); }
	jni::ref<android::transition::Transition> excludeTarget(jni::ref<java::lang::String> targetName, jboolean exclude) { return call_method<"excludeTarget", jni::ref<android::transition::Transition>>(targetName, exclude); }
	jni::ref<android::transition::Transition> excludeChildren(jint targetId, jboolean exclude) { return call_method<"excludeChildren", jni::ref<android::transition::Transition>>(targetId, exclude); }
	jni::ref<android::transition::Transition> excludeTarget(jni::ref<android::view::View> target, jboolean exclude) { return call_method<"excludeTarget", jni::ref<android::transition::Transition>>(target, exclude); }
	jni::ref<android::transition::Transition> excludeChildren(jni::ref<android::view::View> target, jboolean exclude) { return call_method<"excludeChildren", jni::ref<android::transition::Transition>>(target, exclude); }
	jni::ref<android::transition::Transition> excludeTarget(jni::ref<java::lang::Class> type, jboolean exclude) { return call_method<"excludeTarget", jni::ref<android::transition::Transition>>(type, exclude); }
	jni::ref<android::transition::Transition> excludeChildren(jni::ref<java::lang::Class> type, jboolean exclude) { return call_method<"excludeChildren", jni::ref<android::transition::Transition>>(type, exclude); }
	jni::ref<android::transition::Transition> addTarget(jni::ref<android::view::View> target) { return call_method<"addTarget", jni::ref<android::transition::Transition>>(target); }
	jni::ref<android::transition::Transition> removeTarget(jni::ref<android::view::View> target) { return call_method<"removeTarget", jni::ref<android::transition::Transition>>(target); }
	jni::ref<android::transition::Transition> removeTarget(jni::ref<java::lang::Class> target) { return call_method<"removeTarget", jni::ref<android::transition::Transition>>(target); }
	jni::ref<java::util::List> getTargetIds() { return call_method<"getTargetIds", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getTargets() { return call_method<"getTargets", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getTargetNames() { return call_method<"getTargetNames", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getTargetTypes() { return call_method<"getTargetTypes", jni::ref<java::util::List>>(); }
	jni::ref<android::transition::TransitionValues> getTransitionValues(jni::ref<android::view::View> view, jboolean start) { return call_method<"getTransitionValues", jni::ref<android::transition::TransitionValues>>(view, start); }
	jboolean isTransitionRequired(jni::ref<android::transition::TransitionValues> startValues, jni::ref<android::transition::TransitionValues> endValues) { return call_method<"isTransitionRequired", jboolean>(startValues, endValues); }
	jni::ref<android::transition::Transition> addListener(jni::ref<android::transition::Transition_TransitionListener> listener) { return call_method<"addListener", jni::ref<android::transition::Transition>>(listener); }
	jni::ref<android::transition::Transition> removeListener(jni::ref<android::transition::Transition_TransitionListener> listener) { return call_method<"removeListener", jni::ref<android::transition::Transition>>(listener); }
	void setEpicenterCallback(jni::ref<android::transition::Transition_EpicenterCallback> epicenterCallback) { return call_method<"setEpicenterCallback", void>(epicenterCallback); }
	jni::ref<android::transition::Transition_EpicenterCallback> getEpicenterCallback() { return call_method<"getEpicenterCallback", jni::ref<android::transition::Transition_EpicenterCallback>>(); }
	jni::ref<android::graphics::Rect> getEpicenter() { return call_method<"getEpicenter", jni::ref<android::graphics::Rect>>(); }
	void setPathMotion(jni::ref<android::transition::PathMotion> pathMotion) { return call_method<"setPathMotion", void>(pathMotion); }
	jni::ref<android::transition::PathMotion> getPathMotion() { return call_method<"getPathMotion", jni::ref<android::transition::PathMotion>>(); }
	void setPropagation(jni::ref<android::transition::TransitionPropagation> transitionPropagation) { return call_method<"setPropagation", void>(transitionPropagation); }
	jni::ref<android::transition::TransitionPropagation> getPropagation() { return call_method<"getPropagation", jni::ref<android::transition::TransitionPropagation>>(); }
	jboolean canRemoveViews() { return call_method<"canRemoveViews", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<android::transition::Transition> clone() { return call_method<"clone", jni::ref<android::transition::Transition>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }

protected:

	Transition(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TRANSITION_TRANSITION
