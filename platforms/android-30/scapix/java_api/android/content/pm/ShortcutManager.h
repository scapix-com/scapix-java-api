// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_PM_SHORTCUTMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_SHORTCUTMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content::pm { class ShortcutManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::pm::ShortcutManager>
{
	static constexpr fixed_string class_name = "android/content/pm/ShortcutManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_SHORTCUTMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_PM_SHORTCUTMANAGER)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_SHORTCUTMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentSender.h>
#include <scapix/java_api/android/content/pm/ShortcutInfo.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::pm::ShortcutManager : public jni::object_base<"android/content/pm/ShortcutManager",
	java::lang::Object>
{
public:

	static jint FLAG_MATCH_CACHED() { return get_static_field<"FLAG_MATCH_CACHED", jint>(); }
	static jint FLAG_MATCH_DYNAMIC() { return get_static_field<"FLAG_MATCH_DYNAMIC", jint>(); }
	static jint FLAG_MATCH_MANIFEST() { return get_static_field<"FLAG_MATCH_MANIFEST", jint>(); }
	static jint FLAG_MATCH_PINNED() { return get_static_field<"FLAG_MATCH_PINNED", jint>(); }

	jboolean setDynamicShortcuts(jni::ref<java::util::List> shortcutInfoList) { return call_method<"setDynamicShortcuts", jboolean>(shortcutInfoList); }
	jni::ref<java::util::List> getDynamicShortcuts() { return call_method<"getDynamicShortcuts", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getManifestShortcuts() { return call_method<"getManifestShortcuts", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getShortcuts(jint matchFlags) { return call_method<"getShortcuts", jni::ref<java::util::List>>(matchFlags); }
	jboolean addDynamicShortcuts(jni::ref<java::util::List> shortcutInfoList) { return call_method<"addDynamicShortcuts", jboolean>(shortcutInfoList); }
	void removeDynamicShortcuts(jni::ref<java::util::List> shortcutIds) { return call_method<"removeDynamicShortcuts", void>(shortcutIds); }
	void removeAllDynamicShortcuts() { return call_method<"removeAllDynamicShortcuts", void>(); }
	void removeLongLivedShortcuts(jni::ref<java::util::List> shortcutIds) { return call_method<"removeLongLivedShortcuts", void>(shortcutIds); }
	jni::ref<java::util::List> getPinnedShortcuts() { return call_method<"getPinnedShortcuts", jni::ref<java::util::List>>(); }
	jboolean updateShortcuts(jni::ref<java::util::List> shortcutInfoList) { return call_method<"updateShortcuts", jboolean>(shortcutInfoList); }
	void disableShortcuts(jni::ref<java::util::List> shortcutIds) { return call_method<"disableShortcuts", void>(shortcutIds); }
	void disableShortcuts(jni::ref<java::util::List> shortcutIds, jni::ref<java::lang::CharSequence> disabledMessage) { return call_method<"disableShortcuts", void>(shortcutIds, disabledMessage); }
	void enableShortcuts(jni::ref<java::util::List> shortcutIds) { return call_method<"enableShortcuts", void>(shortcutIds); }
	jint getMaxShortcutCountPerActivity() { return call_method<"getMaxShortcutCountPerActivity", jint>(); }
	jboolean isRateLimitingActive() { return call_method<"isRateLimitingActive", jboolean>(); }
	jint getIconMaxWidth() { return call_method<"getIconMaxWidth", jint>(); }
	jint getIconMaxHeight() { return call_method<"getIconMaxHeight", jint>(); }
	void reportShortcutUsed(jni::ref<java::lang::String> shortcutId) { return call_method<"reportShortcutUsed", void>(shortcutId); }
	jboolean isRequestPinShortcutSupported() { return call_method<"isRequestPinShortcutSupported", jboolean>(); }
	jboolean requestPinShortcut(jni::ref<android::content::pm::ShortcutInfo> shortcut, jni::ref<android::content::IntentSender> resultIntent) { return call_method<"requestPinShortcut", jboolean>(shortcut, resultIntent); }
	jni::ref<android::content::Intent> createShortcutResultIntent(jni::ref<android::content::pm::ShortcutInfo> shortcut) { return call_method<"createShortcutResultIntent", jni::ref<android::content::Intent>>(shortcut); }
	void pushDynamicShortcut(jni::ref<android::content::pm::ShortcutInfo> shortcut) { return call_method<"pushDynamicShortcut", void>(shortcut); }

protected:

	ShortcutManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_SHORTCUTMANAGER
