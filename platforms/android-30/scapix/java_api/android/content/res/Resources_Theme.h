// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_RES_RESOURCES_THEME_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_RES_RESOURCES_THEME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content::res { class Resources_Theme; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::res::Resources_Theme>
{
	static constexpr fixed_string class_name = "android/content/res/Resources$Theme";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_RES_RESOURCES_THEME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_RES_RESOURCES_THEME)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_RES_RESOURCES_THEME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/TypedArray.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/util/TypedValue.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::res::Resources_Theme : public jni::object_base<"android/content/res/Resources$Theme",
	java::lang::Object>
{
public:

	void applyStyle(jint resId, jboolean force) { return call_method<"applyStyle", void>(resId, force); }
	void setTo(jni::ref<android::content::res::Resources_Theme> other) { return call_method<"setTo", void>(other); }
	jni::ref<android::content::res::TypedArray> obtainStyledAttributes(jni::ref<jni::array<jint>> attrs) { return call_method<"obtainStyledAttributes", jni::ref<android::content::res::TypedArray>>(attrs); }
	jni::ref<android::content::res::TypedArray> obtainStyledAttributes(jint resId, jni::ref<jni::array<jint>> attrs) { return call_method<"obtainStyledAttributes", jni::ref<android::content::res::TypedArray>>(resId, attrs); }
	jni::ref<android::content::res::TypedArray> obtainStyledAttributes(jni::ref<android::util::AttributeSet> set, jni::ref<jni::array<jint>> attrs, jint defStyleAttr, jint defStyleRes) { return call_method<"obtainStyledAttributes", jni::ref<android::content::res::TypedArray>>(set, attrs, defStyleAttr, defStyleRes); }
	jboolean resolveAttribute(jint resid, jni::ref<android::util::TypedValue> outValue, jboolean resolveRefs) { return call_method<"resolveAttribute", jboolean>(resid, outValue, resolveRefs); }
	jni::ref<android::content::res::Resources> getResources() { return call_method<"getResources", jni::ref<android::content::res::Resources>>(); }
	jni::ref<android::graphics::drawable::Drawable> getDrawable(jint id) { return call_method<"getDrawable", jni::ref<android::graphics::drawable::Drawable>>(id); }
	jint getChangingConfigurations() { return call_method<"getChangingConfigurations", jint>(); }
	void dump(jint priority, jni::ref<java::lang::String> tag, jni::ref<java::lang::String> prefix) { return call_method<"dump", void>(priority, tag, prefix); }
	void rebase() { return call_method<"rebase", void>(); }
	jint getExplicitStyle(jni::ref<android::util::AttributeSet> set) { return call_method<"getExplicitStyle", jint>(set); }
	jni::ref<jni::array<jint>> getAttributeResolutionStack(jint defStyleAttr, jint defStyleRes, jint explicitStyleRes) { return call_method<"getAttributeResolutionStack", jni::ref<jni::array<jint>>>(defStyleAttr, defStyleRes, explicitStyleRes); }

protected:

	Resources_Theme(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_RES_RESOURCES_THEME
