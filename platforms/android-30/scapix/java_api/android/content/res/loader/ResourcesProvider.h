// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_RES_LOADER_RESOURCESPROVIDER_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_RES_LOADER_RESOURCESPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content::res::loader { class ResourcesProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::res::loader::ResourcesProvider>
{
	static constexpr fixed_string class_name = "android/content/res/loader/ResourcesProvider";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::AutoCloseable, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_RES_LOADER_RESOURCESPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_RES_LOADER_RESOURCESPROVIDER)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_RES_LOADER_RESOURCESPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/loader/AssetsProvider.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::res::loader::ResourcesProvider : public jni::object_base<"android/content/res/loader/ResourcesProvider",
	java::lang::Object,
	java::lang::AutoCloseable,
	java::io::Closeable>
{
public:

	static jni::ref<android::content::res::loader::ResourcesProvider> empty(jni::ref<android::content::res::loader::AssetsProvider> assetsProvider) { return call_static_method<"empty", jni::ref<android::content::res::loader::ResourcesProvider>>(assetsProvider); }
	static jni::ref<android::content::res::loader::ResourcesProvider> loadFromApk(jni::ref<android::os::ParcelFileDescriptor> fileDescriptor) { return call_static_method<"loadFromApk", jni::ref<android::content::res::loader::ResourcesProvider>>(fileDescriptor); }
	static jni::ref<android::content::res::loader::ResourcesProvider> loadFromApk(jni::ref<android::os::ParcelFileDescriptor> fileDescriptor, jni::ref<android::content::res::loader::AssetsProvider> assetsProvider) { return call_static_method<"loadFromApk", jni::ref<android::content::res::loader::ResourcesProvider>>(fileDescriptor, assetsProvider); }
	static jni::ref<android::content::res::loader::ResourcesProvider> loadFromTable(jni::ref<android::os::ParcelFileDescriptor> fileDescriptor, jni::ref<android::content::res::loader::AssetsProvider> assetsProvider) { return call_static_method<"loadFromTable", jni::ref<android::content::res::loader::ResourcesProvider>>(fileDescriptor, assetsProvider); }
	static jni::ref<android::content::res::loader::ResourcesProvider> loadFromSplit(jni::ref<android::content::Context> context, jni::ref<java::lang::String> splitName) { return call_static_method<"loadFromSplit", jni::ref<android::content::res::loader::ResourcesProvider>>(context, splitName); }
	static jni::ref<android::content::res::loader::ResourcesProvider> loadFromDirectory(jni::ref<java::lang::String> path, jni::ref<android::content::res::loader::AssetsProvider> assetsProvider) { return call_static_method<"loadFromDirectory", jni::ref<android::content::res::loader::ResourcesProvider>>(path, assetsProvider); }
	void close() { return call_method<"close", void>(); }

protected:

	ResourcesProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_RES_LOADER_RESOURCESPROVIDER
