// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORMATRIX_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORMATRIX_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class ColorMatrix; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::ColorMatrix>
{
	static constexpr fixed_string class_name = "android/graphics/ColorMatrix";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORMATRIX_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORMATRIX)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORMATRIX

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::ColorMatrix : public jni::object_base<"android/graphics/ColorMatrix",
	java::lang::Object>
{
public:

	static jni::ref<android::graphics::ColorMatrix> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::ColorMatrix> new_object(jni::ref<jni::array<jfloat>> src) { return base_::new_object(src); }
	static jni::ref<android::graphics::ColorMatrix> new_object(jni::ref<android::graphics::ColorMatrix> src) { return base_::new_object(src); }
	jni::ref<jni::array<jfloat>> getArray() { return call_method<"getArray", jni::ref<jni::array<jfloat>>>(); }
	void reset() { return call_method<"reset", void>(); }
	void set(jni::ref<android::graphics::ColorMatrix> src) { return call_method<"set", void>(src); }
	void set(jni::ref<jni::array<jfloat>> src) { return call_method<"set", void>(src); }
	void setScale(jfloat rScale, jfloat gScale, jfloat bScale, jfloat aScale) { return call_method<"setScale", void>(rScale, gScale, bScale, aScale); }
	void setRotate(jint axis, jfloat degrees) { return call_method<"setRotate", void>(axis, degrees); }
	void setConcat(jni::ref<android::graphics::ColorMatrix> matA, jni::ref<android::graphics::ColorMatrix> matB) { return call_method<"setConcat", void>(matA, matB); }
	void preConcat(jni::ref<android::graphics::ColorMatrix> prematrix) { return call_method<"preConcat", void>(prematrix); }
	void postConcat(jni::ref<android::graphics::ColorMatrix> postmatrix) { return call_method<"postConcat", void>(postmatrix); }
	void setSaturation(jfloat sat) { return call_method<"setSaturation", void>(sat); }
	void setRGB2YUV() { return call_method<"setRGB2YUV", void>(); }
	void setYUV2RGB() { return call_method<"setYUV2RGB", void>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }

protected:

	ColorMatrix(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORMATRIX
