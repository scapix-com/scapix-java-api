// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_HARDWARERENDERER_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_HARDWARERENDERER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class HardwareRenderer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::HardwareRenderer>
{
	static constexpr fixed_string class_name = "android/graphics/HardwareRenderer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_HARDWARERENDERER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_HARDWARERENDERER)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_HARDWARERENDERER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/HardwareRenderer_FrameRenderRequest.h>
#include <scapix/java_api/android/graphics/RenderNode.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::HardwareRenderer : public jni::object_base<"android/graphics/HardwareRenderer",
	java::lang::Object>
{
public:

	using FrameRenderRequest = HardwareRenderer_FrameRenderRequest;

	static jint SYNC_CONTEXT_IS_STOPPED() { return get_static_field<"SYNC_CONTEXT_IS_STOPPED", jint>(); }
	static jint SYNC_FRAME_DROPPED() { return get_static_field<"SYNC_FRAME_DROPPED", jint>(); }
	static jint SYNC_LOST_SURFACE_REWARD_IF_FOUND() { return get_static_field<"SYNC_LOST_SURFACE_REWARD_IF_FOUND", jint>(); }
	static jint SYNC_OK() { return get_static_field<"SYNC_OK", jint>(); }
	static jint SYNC_REDRAW_REQUESTED() { return get_static_field<"SYNC_REDRAW_REQUESTED", jint>(); }

	static jni::ref<android::graphics::HardwareRenderer> new_object() { return base_::new_object(); }
	void destroy() { return call_method<"destroy", void>(); }
	void setName(jni::ref<java::lang::String> name) { return call_method<"setName", void>(name); }
	void setLightSourceGeometry(jfloat lightX, jfloat lightY, jfloat lightZ, jfloat lightRadius) { return call_method<"setLightSourceGeometry", void>(lightX, lightY, lightZ, lightRadius); }
	void setLightSourceAlpha(jfloat ambientShadowAlpha, jfloat spotShadowAlpha) { return call_method<"setLightSourceAlpha", void>(ambientShadowAlpha, spotShadowAlpha); }
	void setContentRoot(jni::ref<android::graphics::RenderNode> content) { return call_method<"setContentRoot", void>(content); }
	void setSurface(jni::ref<android::view::Surface> surface) { return call_method<"setSurface", void>(surface); }
	jni::ref<android::graphics::HardwareRenderer_FrameRenderRequest> createRenderRequest() { return call_method<"createRenderRequest", jni::ref<android::graphics::HardwareRenderer_FrameRenderRequest>>(); }
	void stop() { return call_method<"stop", void>(); }
	void start() { return call_method<"start", void>(); }
	void clearContent() { return call_method<"clearContent", void>(); }
	void notifyFramePending() { return call_method<"notifyFramePending", void>(); }
	void setOpaque(jboolean opaque) { return call_method<"setOpaque", void>(opaque); }
	jboolean isOpaque() { return call_method<"isOpaque", jboolean>(); }

protected:

	HardwareRenderer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_HARDWARERENDERER
