// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/graphics/ColorSpace.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORSPACE_RGB_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORSPACE_RGB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class ColorSpace_Rgb; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::ColorSpace_Rgb>
{
	static constexpr fixed_string class_name = "android/graphics/ColorSpace$Rgb";
	using base_classes = std::tuple<scapix::java_api::android::graphics::ColorSpace>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORSPACE_RGB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORSPACE_RGB)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORSPACE_RGB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/ColorSpace_Rgb_TransferParameters.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/DoubleUnaryOperator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::ColorSpace_Rgb : public jni::object_base<"android/graphics/ColorSpace$Rgb",
	android::graphics::ColorSpace>
{
public:

	using TransferParameters = ColorSpace_Rgb_TransferParameters;

	static jni::ref<android::graphics::ColorSpace_Rgb> new_object(jni::ref<java::lang::String> name, jni::ref<jni::array<jfloat>> toXYZ, jni::ref<java::util::function::DoubleUnaryOperator> oetf, jni::ref<java::util::function::DoubleUnaryOperator> eotf) { return base_::new_object(name, toXYZ, oetf, eotf); }
	static jni::ref<android::graphics::ColorSpace_Rgb> new_object(jni::ref<java::lang::String> name, jni::ref<jni::array<jfloat>> primaries, jni::ref<jni::array<jfloat>> whitePoint, jni::ref<java::util::function::DoubleUnaryOperator> oetf, jni::ref<java::util::function::DoubleUnaryOperator> eotf, jfloat min, jfloat max) { return base_::new_object(name, primaries, whitePoint, oetf, eotf, min, max); }
	static jni::ref<android::graphics::ColorSpace_Rgb> new_object(jni::ref<java::lang::String> name, jni::ref<jni::array<jfloat>> toXYZ, jni::ref<android::graphics::ColorSpace_Rgb_TransferParameters> function) { return base_::new_object(name, toXYZ, function); }
	static jni::ref<android::graphics::ColorSpace_Rgb> new_object(jni::ref<java::lang::String> name, jni::ref<jni::array<jfloat>> primaries, jni::ref<jni::array<jfloat>> whitePoint, jni::ref<android::graphics::ColorSpace_Rgb_TransferParameters> function) { return base_::new_object(name, primaries, whitePoint, function); }
	static jni::ref<android::graphics::ColorSpace_Rgb> new_object(jni::ref<java::lang::String> name, jni::ref<jni::array<jfloat>> toXYZ, jdouble gamma) { return base_::new_object(name, toXYZ, gamma); }
	static jni::ref<android::graphics::ColorSpace_Rgb> new_object(jni::ref<java::lang::String> name, jni::ref<jni::array<jfloat>> primaries, jni::ref<jni::array<jfloat>> whitePoint, jdouble gamma) { return base_::new_object(name, primaries, whitePoint, gamma); }
	jni::ref<jni::array<jfloat>> getWhitePoint(jni::ref<jni::array<jfloat>> whitePoint) { return call_method<"getWhitePoint", jni::ref<jni::array<jfloat>>>(whitePoint); }
	jni::ref<jni::array<jfloat>> getWhitePoint() { return call_method<"getWhitePoint", jni::ref<jni::array<jfloat>>>(); }
	jni::ref<jni::array<jfloat>> getPrimaries(jni::ref<jni::array<jfloat>> primaries) { return call_method<"getPrimaries", jni::ref<jni::array<jfloat>>>(primaries); }
	jni::ref<jni::array<jfloat>> getPrimaries() { return call_method<"getPrimaries", jni::ref<jni::array<jfloat>>>(); }
	jni::ref<jni::array<jfloat>> getTransform(jni::ref<jni::array<jfloat>> transform) { return call_method<"getTransform", jni::ref<jni::array<jfloat>>>(transform); }
	jni::ref<jni::array<jfloat>> getTransform() { return call_method<"getTransform", jni::ref<jni::array<jfloat>>>(); }
	jni::ref<jni::array<jfloat>> getInverseTransform(jni::ref<jni::array<jfloat>> inverseTransform) { return call_method<"getInverseTransform", jni::ref<jni::array<jfloat>>>(inverseTransform); }
	jni::ref<jni::array<jfloat>> getInverseTransform() { return call_method<"getInverseTransform", jni::ref<jni::array<jfloat>>>(); }
	jni::ref<java::util::function::DoubleUnaryOperator> getOetf() { return call_method<"getOetf", jni::ref<java::util::function::DoubleUnaryOperator>>(); }
	jni::ref<java::util::function::DoubleUnaryOperator> getEotf() { return call_method<"getEotf", jni::ref<java::util::function::DoubleUnaryOperator>>(); }
	jni::ref<android::graphics::ColorSpace_Rgb_TransferParameters> getTransferParameters() { return call_method<"getTransferParameters", jni::ref<android::graphics::ColorSpace_Rgb_TransferParameters>>(); }
	jboolean isSrgb() { return call_method<"isSrgb", jboolean>(); }
	jboolean isWideGamut() { return call_method<"isWideGamut", jboolean>(); }
	jfloat getMinValue(jint component) { return call_method<"getMinValue", jfloat>(component); }
	jfloat getMaxValue(jint component) { return call_method<"getMaxValue", jfloat>(component); }
	jni::ref<jni::array<jfloat>> toLinear(jfloat r, jfloat g, jfloat b) { return call_method<"toLinear", jni::ref<jni::array<jfloat>>>(r, g, b); }
	jni::ref<jni::array<jfloat>> toLinear(jni::ref<jni::array<jfloat>> v) { return call_method<"toLinear", jni::ref<jni::array<jfloat>>>(v); }
	jni::ref<jni::array<jfloat>> fromLinear(jfloat r, jfloat g, jfloat b) { return call_method<"fromLinear", jni::ref<jni::array<jfloat>>>(r, g, b); }
	jni::ref<jni::array<jfloat>> fromLinear(jni::ref<jni::array<jfloat>> v) { return call_method<"fromLinear", jni::ref<jni::array<jfloat>>>(v); }
	jni::ref<jni::array<jfloat>> toXyz(jni::ref<jni::array<jfloat>> v) { return call_method<"toXyz", jni::ref<jni::array<jfloat>>>(v); }
	jni::ref<jni::array<jfloat>> fromXyz(jni::ref<jni::array<jfloat>> v) { return call_method<"fromXyz", jni::ref<jni::array<jfloat>>>(v); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	ColorSpace_Rgb(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLORSPACE_RGB
