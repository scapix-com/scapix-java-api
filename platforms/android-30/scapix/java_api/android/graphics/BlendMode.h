// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_BLENDMODE_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_BLENDMODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class BlendMode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::BlendMode>
{
	static constexpr fixed_string class_name = "android/graphics/BlendMode";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_BLENDMODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_BLENDMODE)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_BLENDMODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::BlendMode : public jni::object_base<"android/graphics/BlendMode",
	java::lang::Enum>
{
public:

	static jni::ref<android::graphics::BlendMode> CLEAR() { return get_static_field<"CLEAR", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> SRC() { return get_static_field<"SRC", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> DST() { return get_static_field<"DST", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> SRC_OVER() { return get_static_field<"SRC_OVER", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> DST_OVER() { return get_static_field<"DST_OVER", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> SRC_IN() { return get_static_field<"SRC_IN", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> DST_IN() { return get_static_field<"DST_IN", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> SRC_OUT() { return get_static_field<"SRC_OUT", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> DST_OUT() { return get_static_field<"DST_OUT", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> SRC_ATOP() { return get_static_field<"SRC_ATOP", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> DST_ATOP() { return get_static_field<"DST_ATOP", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> XOR() { return get_static_field<"XOR", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> PLUS() { return get_static_field<"PLUS", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> MODULATE() { return get_static_field<"MODULATE", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> SCREEN() { return get_static_field<"SCREEN", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> OVERLAY() { return get_static_field<"OVERLAY", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> DARKEN() { return get_static_field<"DARKEN", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> LIGHTEN() { return get_static_field<"LIGHTEN", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> COLOR_DODGE() { return get_static_field<"COLOR_DODGE", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> COLOR_BURN() { return get_static_field<"COLOR_BURN", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> HARD_LIGHT() { return get_static_field<"HARD_LIGHT", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> SOFT_LIGHT() { return get_static_field<"SOFT_LIGHT", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> DIFFERENCE() { return get_static_field<"DIFFERENCE", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> EXCLUSION() { return get_static_field<"EXCLUSION", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> MULTIPLY() { return get_static_field<"MULTIPLY", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> HUE() { return get_static_field<"HUE", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> SATURATION() { return get_static_field<"SATURATION", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> COLOR() { return get_static_field<"COLOR", jni::ref<android::graphics::BlendMode>>(); }
	static jni::ref<android::graphics::BlendMode> LUMINOSITY() { return get_static_field<"LUMINOSITY", jni::ref<android::graphics::BlendMode>>(); }

	static jni::ref<jni::array<android::graphics::BlendMode>> values() { return call_static_method<"values", jni::ref<jni::array<android::graphics::BlendMode>>>(); }
	static jni::ref<android::graphics::BlendMode> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<android::graphics::BlendMode>>(name); }

protected:

	BlendMode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_BLENDMODE
