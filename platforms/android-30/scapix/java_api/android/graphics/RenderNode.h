// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_RENDERNODE_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_RENDERNODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class RenderNode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::RenderNode>
{
	static constexpr fixed_string class_name = "android/graphics/RenderNode";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_RENDERNODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_RENDERNODE)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_RENDERNODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/RecordingCanvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::RenderNode : public jni::object_base<"android/graphics/RenderNode",
	java::lang::Object>
{
public:

	static jni::ref<android::graphics::RenderNode> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	jni::ref<android::graphics::RecordingCanvas> beginRecording(jint width, jint height) { return call_method<"beginRecording", jni::ref<android::graphics::RecordingCanvas>>(width, height); }
	jni::ref<android::graphics::RecordingCanvas> beginRecording() { return call_method<"beginRecording", jni::ref<android::graphics::RecordingCanvas>>(); }
	void endRecording() { return call_method<"endRecording", void>(); }
	void discardDisplayList() { return call_method<"discardDisplayList", void>(); }
	jboolean hasDisplayList() { return call_method<"hasDisplayList", jboolean>(); }
	jboolean hasIdentityMatrix() { return call_method<"hasIdentityMatrix", jboolean>(); }
	void getMatrix(jni::ref<android::graphics::Matrix> outMatrix) { return call_method<"getMatrix", void>(outMatrix); }
	void getInverseMatrix(jni::ref<android::graphics::Matrix> outMatrix) { return call_method<"getInverseMatrix", void>(outMatrix); }
	jboolean setUseCompositingLayer(jboolean forceToLayer, jni::ref<android::graphics::Paint> paint) { return call_method<"setUseCompositingLayer", jboolean>(forceToLayer, paint); }
	jboolean getUseCompositingLayer() { return call_method<"getUseCompositingLayer", jboolean>(); }
	jboolean setClipRect(jni::ref<android::graphics::Rect> rect) { return call_method<"setClipRect", jboolean>(rect); }
	jboolean setClipToBounds(jboolean clipToBounds) { return call_method<"setClipToBounds", jboolean>(clipToBounds); }
	jboolean getClipToBounds() { return call_method<"getClipToBounds", jboolean>(); }
	jboolean setProjectBackwards(jboolean shouldProject) { return call_method<"setProjectBackwards", jboolean>(shouldProject); }
	jboolean setProjectionReceiver(jboolean shouldRecieve) { return call_method<"setProjectionReceiver", jboolean>(shouldRecieve); }
	jboolean setOutline(jni::ref<android::graphics::Outline> outline) { return call_method<"setOutline", jboolean>(outline); }
	jboolean hasShadow() { return call_method<"hasShadow", jboolean>(); }
	jboolean setSpotShadowColor(jint color) { return call_method<"setSpotShadowColor", jboolean>(color); }
	jint getSpotShadowColor() { return call_method<"getSpotShadowColor", jint>(); }
	jboolean setAmbientShadowColor(jint color) { return call_method<"setAmbientShadowColor", jboolean>(color); }
	jint getAmbientShadowColor() { return call_method<"getAmbientShadowColor", jint>(); }
	jboolean setClipToOutline(jboolean clipToOutline) { return call_method<"setClipToOutline", jboolean>(clipToOutline); }
	jboolean getClipToOutline() { return call_method<"getClipToOutline", jboolean>(); }
	jboolean setAlpha(jfloat alpha) { return call_method<"setAlpha", jboolean>(alpha); }
	jfloat getAlpha() { return call_method<"getAlpha", jfloat>(); }
	jboolean setHasOverlappingRendering(jboolean hasOverlappingRendering) { return call_method<"setHasOverlappingRendering", jboolean>(hasOverlappingRendering); }
	jboolean hasOverlappingRendering() { return call_method<"hasOverlappingRendering", jboolean>(); }
	jboolean setElevation(jfloat lift) { return call_method<"setElevation", jboolean>(lift); }
	jfloat getElevation() { return call_method<"getElevation", jfloat>(); }
	jboolean setTranslationX(jfloat translationX) { return call_method<"setTranslationX", jboolean>(translationX); }
	jfloat getTranslationX() { return call_method<"getTranslationX", jfloat>(); }
	jboolean setTranslationY(jfloat translationY) { return call_method<"setTranslationY", jboolean>(translationY); }
	jfloat getTranslationY() { return call_method<"getTranslationY", jfloat>(); }
	jboolean setTranslationZ(jfloat translationZ) { return call_method<"setTranslationZ", jboolean>(translationZ); }
	jfloat getTranslationZ() { return call_method<"getTranslationZ", jfloat>(); }
	jboolean setRotationZ(jfloat rotation) { return call_method<"setRotationZ", jboolean>(rotation); }
	jfloat getRotationZ() { return call_method<"getRotationZ", jfloat>(); }
	jboolean setRotationX(jfloat rotationX) { return call_method<"setRotationX", jboolean>(rotationX); }
	jfloat getRotationX() { return call_method<"getRotationX", jfloat>(); }
	jboolean setRotationY(jfloat rotationY) { return call_method<"setRotationY", jboolean>(rotationY); }
	jfloat getRotationY() { return call_method<"getRotationY", jfloat>(); }
	jboolean setScaleX(jfloat scaleX) { return call_method<"setScaleX", jboolean>(scaleX); }
	jfloat getScaleX() { return call_method<"getScaleX", jfloat>(); }
	jboolean setScaleY(jfloat scaleY) { return call_method<"setScaleY", jboolean>(scaleY); }
	jfloat getScaleY() { return call_method<"getScaleY", jfloat>(); }
	jboolean setPivotX(jfloat pivotX) { return call_method<"setPivotX", jboolean>(pivotX); }
	jfloat getPivotX() { return call_method<"getPivotX", jfloat>(); }
	jboolean setPivotY(jfloat pivotY) { return call_method<"setPivotY", jboolean>(pivotY); }
	jfloat getPivotY() { return call_method<"getPivotY", jfloat>(); }
	jboolean isPivotExplicitlySet() { return call_method<"isPivotExplicitlySet", jboolean>(); }
	jboolean resetPivot() { return call_method<"resetPivot", jboolean>(); }
	jboolean setCameraDistance(jfloat distance) { return call_method<"setCameraDistance", jboolean>(distance); }
	jfloat getCameraDistance() { return call_method<"getCameraDistance", jfloat>(); }
	jint getLeft() { return call_method<"getLeft", jint>(); }
	jint getTop() { return call_method<"getTop", jint>(); }
	jint getRight() { return call_method<"getRight", jint>(); }
	jint getBottom() { return call_method<"getBottom", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jboolean setPosition(jint left, jint top, jint right, jint bottom) { return call_method<"setPosition", jboolean>(left, top, right, bottom); }
	jboolean setPosition(jni::ref<android::graphics::Rect> position) { return call_method<"setPosition", jboolean>(position); }
	jboolean offsetLeftAndRight(jint offset) { return call_method<"offsetLeftAndRight", jboolean>(offset); }
	jboolean offsetTopAndBottom(jint offset) { return call_method<"offsetTopAndBottom", jboolean>(offset); }
	jlong computeApproximateMemoryUsage() { return call_method<"computeApproximateMemoryUsage", jlong>(); }
	jboolean setForceDarkAllowed(jboolean allow) { return call_method<"setForceDarkAllowed", jboolean>(allow); }
	jboolean isForceDarkAllowed() { return call_method<"isForceDarkAllowed", jboolean>(); }
	jlong getUniqueId() { return call_method<"getUniqueId", jlong>(); }

protected:

	RenderNode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_RENDERNODE
