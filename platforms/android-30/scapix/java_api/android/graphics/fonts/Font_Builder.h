// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONT_BUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONT_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics::fonts { class Font_Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::fonts::Font_Builder>
{
	static constexpr fixed_string class_name = "android/graphics/fonts/Font$Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONT_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONT_BUILDER)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONT_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/res/AssetManager.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/fonts/Font.h>
#include <scapix/java_api/android/graphics/fonts/FontVariationAxis.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::fonts::Font_Builder : public jni::object_base<"android/graphics/fonts/Font$Builder",
	java::lang::Object>
{
public:

	static jni::ref<android::graphics::fonts::Font_Builder> new_object(jni::ref<java::nio::ByteBuffer> buffer) { return base_::new_object(buffer); }
	static jni::ref<android::graphics::fonts::Font_Builder> new_object(jni::ref<java::io::File> path) { return base_::new_object(path); }
	static jni::ref<android::graphics::fonts::Font_Builder> new_object(jni::ref<android::os::ParcelFileDescriptor> fd) { return base_::new_object(fd); }
	static jni::ref<android::graphics::fonts::Font_Builder> new_object(jni::ref<android::os::ParcelFileDescriptor> fd, jlong offset, jlong p3) { return base_::new_object(fd, offset, p3); }
	static jni::ref<android::graphics::fonts::Font_Builder> new_object(jni::ref<android::content::res::AssetManager> am, jni::ref<java::lang::String> path) { return base_::new_object(am, path); }
	static jni::ref<android::graphics::fonts::Font_Builder> new_object(jni::ref<android::content::res::Resources> res, jint resId) { return base_::new_object(res, resId); }
	jni::ref<android::graphics::fonts::Font_Builder> setWeight(jint weight) { return call_method<"setWeight", jni::ref<android::graphics::fonts::Font_Builder>>(weight); }
	jni::ref<android::graphics::fonts::Font_Builder> setSlant(jint slant) { return call_method<"setSlant", jni::ref<android::graphics::fonts::Font_Builder>>(slant); }
	jni::ref<android::graphics::fonts::Font_Builder> setTtcIndex(jint ttcIndex) { return call_method<"setTtcIndex", jni::ref<android::graphics::fonts::Font_Builder>>(ttcIndex); }
	jni::ref<android::graphics::fonts::Font_Builder> setFontVariationSettings(jni::ref<java::lang::String> variationSettings) { return call_method<"setFontVariationSettings", jni::ref<android::graphics::fonts::Font_Builder>>(variationSettings); }
	jni::ref<android::graphics::fonts::Font_Builder> setFontVariationSettings(jni::ref<jni::array<android::graphics::fonts::FontVariationAxis>> axes) { return call_method<"setFontVariationSettings", jni::ref<android::graphics::fonts::Font_Builder>>(axes); }
	jni::ref<android::graphics::fonts::Font> build() { return call_method<"build", jni::ref<android::graphics::fonts::Font>>(); }

protected:

	Font_Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_FONTS_FONT_BUILDER
