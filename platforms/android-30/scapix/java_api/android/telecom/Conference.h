// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/telecom/Conferenceable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELECOM_CONFERENCE_FWD
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CONFERENCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telecom { class Conference; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telecom::Conference>
{
	static constexpr fixed_string class_name = "android/telecom/Conference";
	using base_classes = std::tuple<scapix::java_api::android::telecom::Conferenceable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CONFERENCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELECOM_CONFERENCE)
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CONFERENCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/telecom/CallAudioState.h>
#include <scapix/java_api/android/telecom/Connection.h>
#include <scapix/java_api/android/telecom/Connection_VideoProvider.h>
#include <scapix/java_api/android/telecom/DisconnectCause.h>
#include <scapix/java_api/android/telecom/PhoneAccountHandle.h>
#include <scapix/java_api/android/telecom/StatusHints.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telecom::Conference : public jni::object_base<"android/telecom/Conference",
	android::telecom::Conferenceable>
{
public:

	static jlong CONNECT_TIME_NOT_SPECIFIED() { return get_static_field<"CONNECT_TIME_NOT_SPECIFIED", jlong>(); }

	static jni::ref<android::telecom::Conference> new_object(jni::ref<android::telecom::PhoneAccountHandle> phoneAccount) { return base_::new_object(phoneAccount); }
	jni::ref<android::telecom::PhoneAccountHandle> getPhoneAccountHandle() { return call_method<"getPhoneAccountHandle", jni::ref<android::telecom::PhoneAccountHandle>>(); }
	jni::ref<java::util::List> getConnections() { return call_method<"getConnections", jni::ref<java::util::List>>(); }
	jint getState() { return call_method<"getState", jint>(); }
	jint getConnectionCapabilities() { return call_method<"getConnectionCapabilities", jint>(); }
	jint getConnectionProperties() { return call_method<"getConnectionProperties", jint>(); }
	jni::ref<android::telecom::CallAudioState> getCallAudioState() { return call_method<"getCallAudioState", jni::ref<android::telecom::CallAudioState>>(); }
	jni::ref<android::telecom::Connection_VideoProvider> getVideoProvider() { return call_method<"getVideoProvider", jni::ref<android::telecom::Connection_VideoProvider>>(); }
	jint getVideoState() { return call_method<"getVideoState", jint>(); }
	void onDisconnect() { return call_method<"onDisconnect", void>(); }
	void onSeparate(jni::ref<android::telecom::Connection> connection) { return call_method<"onSeparate", void>(connection); }
	void onMerge(jni::ref<android::telecom::Connection> connection) { return call_method<"onMerge", void>(connection); }
	void onHold() { return call_method<"onHold", void>(); }
	void onUnhold() { return call_method<"onUnhold", void>(); }
	void onMerge() { return call_method<"onMerge", void>(); }
	void onSwap() { return call_method<"onSwap", void>(); }
	void onPlayDtmfTone(jchar c) { return call_method<"onPlayDtmfTone", void>(c); }
	void onStopDtmfTone() { return call_method<"onStopDtmfTone", void>(); }
	void onCallAudioStateChanged(jni::ref<android::telecom::CallAudioState> state) { return call_method<"onCallAudioStateChanged", void>(state); }
	void onConnectionAdded(jni::ref<android::telecom::Connection> connection) { return call_method<"onConnectionAdded", void>(connection); }
	void setOnHold() { return call_method<"setOnHold", void>(); }
	void setDialing() { return call_method<"setDialing", void>(); }
	void setActive() { return call_method<"setActive", void>(); }
	void setDisconnected(jni::ref<android::telecom::DisconnectCause> disconnectCause) { return call_method<"setDisconnected", void>(disconnectCause); }
	jni::ref<android::telecom::DisconnectCause> getDisconnectCause() { return call_method<"getDisconnectCause", jni::ref<android::telecom::DisconnectCause>>(); }
	void setConnectionCapabilities(jint connectionCapabilities) { return call_method<"setConnectionCapabilities", void>(connectionCapabilities); }
	void setConnectionProperties(jint connectionProperties) { return call_method<"setConnectionProperties", void>(connectionProperties); }
	jboolean addConnection(jni::ref<android::telecom::Connection> connection) { return call_method<"addConnection", jboolean>(connection); }
	void removeConnection(jni::ref<android::telecom::Connection> connection) { return call_method<"removeConnection", void>(connection); }
	void setConferenceableConnections(jni::ref<java::util::List> conferenceableConnections) { return call_method<"setConferenceableConnections", void>(conferenceableConnections); }
	void setVideoState(jni::ref<android::telecom::Connection> c, jint videoState) { return call_method<"setVideoState", void>(c, videoState); }
	void setVideoProvider(jni::ref<android::telecom::Connection> c, jni::ref<android::telecom::Connection_VideoProvider> videoProvider) { return call_method<"setVideoProvider", void>(c, videoProvider); }
	jni::ref<java::util::List> getConferenceableConnections() { return call_method<"getConferenceableConnections", jni::ref<java::util::List>>(); }
	void destroy() { return call_method<"destroy", void>(); }
	void setConnectionTime(jlong connectionTimeMillis) { return call_method<"setConnectionTime", void>(connectionTimeMillis); }
	void setConnectionStartElapsedRealTime(jlong connectionStartElapsedRealTime) { return call_method<"setConnectionStartElapsedRealTime", void>(connectionStartElapsedRealTime); }
	void setConnectionStartElapsedRealtimeMillis(jlong connectionStartElapsedRealTime) { return call_method<"setConnectionStartElapsedRealtimeMillis", void>(connectionStartElapsedRealTime); }
	jlong getConnectionTime() { return call_method<"getConnectionTime", jlong>(); }
	jlong getConnectionStartElapsedRealtimeMillis() { return call_method<"getConnectionStartElapsedRealtimeMillis", jlong>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void setStatusHints(jni::ref<android::telecom::StatusHints> statusHints) { return call_method<"setStatusHints", void>(statusHints); }
	jni::ref<android::telecom::StatusHints> getStatusHints() { return call_method<"getStatusHints", jni::ref<android::telecom::StatusHints>>(); }
	void setExtras(jni::ref<android::os::Bundle> extras) { return call_method<"setExtras", void>(extras); }
	void putExtras(jni::ref<android::os::Bundle> extras) { return call_method<"putExtras", void>(extras); }
	void removeExtras(jni::ref<java::util::List> keys) { return call_method<"removeExtras", void>(keys); }
	void removeExtras(jni::ref<jni::array<java::lang::String>> keys) { return call_method<"removeExtras", void>(keys); }
	jni::ref<android::os::Bundle> getExtras() { return call_method<"getExtras", jni::ref<android::os::Bundle>>(); }
	void onExtrasChanged(jni::ref<android::os::Bundle> extras) { return call_method<"onExtrasChanged", void>(extras); }
	void sendConferenceEvent(jni::ref<java::lang::String> event, jni::ref<android::os::Bundle> extras) { return call_method<"sendConferenceEvent", void>(event, extras); }

protected:

	Conference(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CONFERENCE
