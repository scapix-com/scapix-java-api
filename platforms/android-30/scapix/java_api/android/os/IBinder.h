// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_IBINDER_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_IBINDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class IBinder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::IBinder>
{
	static constexpr fixed_string class_name = "android/os/IBinder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_IBINDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_IBINDER)
#define SCAPIX_JAVA_API_ANDROID_OS_IBINDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/IBinder_DeathRecipient.h>
#include <scapix/java_api/android/os/IInterface.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::IBinder : public jni::object_base<"android/os/IBinder",
	java::lang::Object>
{
public:

	using DeathRecipient = IBinder_DeathRecipient;

	static jint DUMP_TRANSACTION() { return get_static_field<"DUMP_TRANSACTION", jint>(); }
	static jint FIRST_CALL_TRANSACTION() { return get_static_field<"FIRST_CALL_TRANSACTION", jint>(); }
	static jint FLAG_ONEWAY() { return get_static_field<"FLAG_ONEWAY", jint>(); }
	static jint INTERFACE_TRANSACTION() { return get_static_field<"INTERFACE_TRANSACTION", jint>(); }
	static jint LAST_CALL_TRANSACTION() { return get_static_field<"LAST_CALL_TRANSACTION", jint>(); }
	static jint LIKE_TRANSACTION() { return get_static_field<"LIKE_TRANSACTION", jint>(); }
	static jint PING_TRANSACTION() { return get_static_field<"PING_TRANSACTION", jint>(); }
	static jint TWEET_TRANSACTION() { return get_static_field<"TWEET_TRANSACTION", jint>(); }

	static jint getSuggestedMaxIpcSizeBytes() { return call_static_method<"getSuggestedMaxIpcSizeBytes", jint>(); }
	jni::ref<java::lang::String> getInterfaceDescriptor() { return call_method<"getInterfaceDescriptor", jni::ref<java::lang::String>>(); }
	jboolean pingBinder() { return call_method<"pingBinder", jboolean>(); }
	jboolean isBinderAlive() { return call_method<"isBinderAlive", jboolean>(); }
	jni::ref<android::os::IInterface> queryLocalInterface(jni::ref<java::lang::String> p1) { return call_method<"queryLocalInterface", jni::ref<android::os::IInterface>>(p1); }
	void dump(jni::ref<java::io::FileDescriptor> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_method<"dump", void>(p1, p2); }
	void dumpAsync(jni::ref<java::io::FileDescriptor> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_method<"dumpAsync", void>(p1, p2); }
	jboolean transact(jint p1, jni::ref<android::os::Parcel> p2, jni::ref<android::os::Parcel> p3, jint p4) { return call_method<"transact", jboolean>(p1, p2, p3, p4); }
	void linkToDeath(jni::ref<android::os::IBinder_DeathRecipient> p1, jint p2) { return call_method<"linkToDeath", void>(p1, p2); }
	jboolean unlinkToDeath(jni::ref<android::os::IBinder_DeathRecipient> p1, jint p2) { return call_method<"unlinkToDeath", jboolean>(p1, p2); }

protected:

	IBinder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_IBINDER
