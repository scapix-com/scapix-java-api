// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/content/ContextWrapper.h>
#include <scapix/java_api/android/content/ComponentCallbacks2.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_SERVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_SERVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class Service; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::Service>
{
	static constexpr fixed_string class_name = "android/app/Service";
	using base_classes = std::tuple<scapix::java_api::android::content::ContextWrapper, scapix::java_api::android::content::ComponentCallbacks2>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_SERVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_SERVICE)
#define SCAPIX_JAVA_API_ANDROID_APP_SERVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/Application.h>
#include <scapix/java_api/android/app/Notification.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/os/IBinder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::Service : public jni::object_base<"android/app/Service",
	android::content::ContextWrapper,
	android::content::ComponentCallbacks2>
{
public:

	static jint START_CONTINUATION_MASK() { return get_static_field<"START_CONTINUATION_MASK", jint>(); }
	static jint START_FLAG_REDELIVERY() { return get_static_field<"START_FLAG_REDELIVERY", jint>(); }
	static jint START_FLAG_RETRY() { return get_static_field<"START_FLAG_RETRY", jint>(); }
	static jint START_NOT_STICKY() { return get_static_field<"START_NOT_STICKY", jint>(); }
	static jint START_REDELIVER_INTENT() { return get_static_field<"START_REDELIVER_INTENT", jint>(); }
	static jint START_STICKY() { return get_static_field<"START_STICKY", jint>(); }
	static jint START_STICKY_COMPATIBILITY() { return get_static_field<"START_STICKY_COMPATIBILITY", jint>(); }
	static jint STOP_FOREGROUND_DETACH() { return get_static_field<"STOP_FOREGROUND_DETACH", jint>(); }
	static jint STOP_FOREGROUND_REMOVE() { return get_static_field<"STOP_FOREGROUND_REMOVE", jint>(); }

	static jni::ref<android::app::Service> new_object() { return base_::new_object(); }
	jni::ref<android::app::Application> getApplication() { return call_method<"getApplication", jni::ref<android::app::Application>>(); }
	void onCreate() { return call_method<"onCreate", void>(); }
	void onStart(jni::ref<android::content::Intent> intent, jint startId) { return call_method<"onStart", void>(intent, startId); }
	jint onStartCommand(jni::ref<android::content::Intent> intent, jint flags, jint startId) { return call_method<"onStartCommand", jint>(intent, flags, startId); }
	void onDestroy() { return call_method<"onDestroy", void>(); }
	void onConfigurationChanged(jni::ref<android::content::res::Configuration> newConfig) { return call_method<"onConfigurationChanged", void>(newConfig); }
	void onLowMemory() { return call_method<"onLowMemory", void>(); }
	void onTrimMemory(jint level) { return call_method<"onTrimMemory", void>(level); }
	jni::ref<android::os::IBinder> onBind(jni::ref<android::content::Intent> p1) { return call_method<"onBind", jni::ref<android::os::IBinder>>(p1); }
	jboolean onUnbind(jni::ref<android::content::Intent> intent) { return call_method<"onUnbind", jboolean>(intent); }
	void onRebind(jni::ref<android::content::Intent> intent) { return call_method<"onRebind", void>(intent); }
	void onTaskRemoved(jni::ref<android::content::Intent> rootIntent) { return call_method<"onTaskRemoved", void>(rootIntent); }
	void stopSelf() { return call_method<"stopSelf", void>(); }
	void stopSelf(jint startId) { return call_method<"stopSelf", void>(startId); }
	jboolean stopSelfResult(jint startId) { return call_method<"stopSelfResult", jboolean>(startId); }
	void startForeground(jint id, jni::ref<android::app::Notification> notification) { return call_method<"startForeground", void>(id, notification); }
	void startForeground(jint id, jni::ref<android::app::Notification> notification, jint foregroundServiceType) { return call_method<"startForeground", void>(id, notification, foregroundServiceType); }
	void stopForeground(jboolean removeNotification) { return call_method<"stopForeground", void>(removeNotification); }
	void stopForeground(jint flags) { return call_method<"stopForeground", void>(flags); }
	jint getForegroundServiceType() { return call_method<"getForegroundServiceType", jint>(); }

protected:

	Service(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_SERVICE
