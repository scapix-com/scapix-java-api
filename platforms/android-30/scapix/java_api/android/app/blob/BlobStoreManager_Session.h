// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_SESSION_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_SESSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app::blob { class BlobStoreManager_Session; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::blob::BlobStoreManager_Session>
{
	static constexpr fixed_string class_name = "android/app/blob/BlobStoreManager$Session";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_SESSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_SESSION)
#define SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_SESSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::blob::BlobStoreManager_Session : public jni::object_base<"android/app/blob/BlobStoreManager$Session",
	java::lang::Object,
	java::io::Closeable>
{
public:

	jni::ref<android::os::ParcelFileDescriptor> openWrite(jlong offsetBytes, jlong p2) { return call_method<"openWrite", jni::ref<android::os::ParcelFileDescriptor>>(offsetBytes, p2); }
	jni::ref<android::os::ParcelFileDescriptor> openRead() { return call_method<"openRead", jni::ref<android::os::ParcelFileDescriptor>>(); }
	jlong getSize() { return call_method<"getSize", jlong>(); }
	void close() { return call_method<"close", void>(); }
	void abandon() { return call_method<"abandon", void>(); }
	void allowPackageAccess(jni::ref<java::lang::String> packageName, jni::ref<jni::array<jbyte>> certificate) { return call_method<"allowPackageAccess", void>(packageName, certificate); }
	jboolean isPackageAccessAllowed(jni::ref<java::lang::String> packageName, jni::ref<jni::array<jbyte>> certificate) { return call_method<"isPackageAccessAllowed", jboolean>(packageName, certificate); }
	void allowSameSignatureAccess() { return call_method<"allowSameSignatureAccess", void>(); }
	jboolean isSameSignatureAccessAllowed() { return call_method<"isSameSignatureAccessAllowed", jboolean>(); }
	void allowPublicAccess() { return call_method<"allowPublicAccess", void>(); }
	jboolean isPublicAccessAllowed() { return call_method<"isPublicAccessAllowed", jboolean>(); }
	void commit(jni::ref<java::util::concurrent::Executor> executor, jni::ref<java::util::function::Consumer> resultCallback) { return call_method<"commit", void>(executor, resultCallback); }

protected:

	BlobStoreManager_Session(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_BLOB_BLOBSTOREMANAGER_SESSION
