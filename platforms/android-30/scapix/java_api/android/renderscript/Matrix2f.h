// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_MATRIX2F_FWD
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_MATRIX2F_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::renderscript { class Matrix2f; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::renderscript::Matrix2f>
{
	static constexpr fixed_string class_name = "android/renderscript/Matrix2f";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_MATRIX2F_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_MATRIX2F)
#define SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_MATRIX2F

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::renderscript::Matrix2f : public jni::object_base<"android/renderscript/Matrix2f",
	java::lang::Object>
{
public:

	static jni::ref<android::renderscript::Matrix2f> new_object() { return base_::new_object(); }
	static jni::ref<android::renderscript::Matrix2f> new_object(jni::ref<jni::array<jfloat>> dataArray) { return base_::new_object(dataArray); }
	jni::ref<jni::array<jfloat>> getArray() { return call_method<"getArray", jni::ref<jni::array<jfloat>>>(); }
	jfloat get(jint x, jint y) { return call_method<"get", jfloat>(x, y); }
	void set(jint x, jint y, jfloat v) { return call_method<"set", void>(x, y, v); }
	void loadIdentity() { return call_method<"loadIdentity", void>(); }
	void load(jni::ref<android::renderscript::Matrix2f> src) { return call_method<"load", void>(src); }
	void loadRotate(jfloat rot) { return call_method<"loadRotate", void>(rot); }
	void loadScale(jfloat x, jfloat y) { return call_method<"loadScale", void>(x, y); }
	void loadMultiply(jni::ref<android::renderscript::Matrix2f> lhs, jni::ref<android::renderscript::Matrix2f> rhs) { return call_method<"loadMultiply", void>(lhs, rhs); }
	void multiply(jni::ref<android::renderscript::Matrix2f> rhs) { return call_method<"multiply", void>(rhs); }
	void rotate(jfloat rot) { return call_method<"rotate", void>(rot); }
	void scale(jfloat x, jfloat y) { return call_method<"scale", void>(x, y); }
	void transpose() { return call_method<"transpose", void>(); }

protected:

	Matrix2f(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_RENDERSCRIPT_MATRIX2F
