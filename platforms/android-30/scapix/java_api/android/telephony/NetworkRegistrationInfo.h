// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKREGISTRATIONINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKREGISTRATIONINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telephony { class NetworkRegistrationInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telephony::NetworkRegistrationInfo>
{
	static constexpr fixed_string class_name = "android/telephony/NetworkRegistrationInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKREGISTRATIONINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKREGISTRATIONINFO)
#define SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKREGISTRATIONINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/telephony/CellIdentity.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telephony::NetworkRegistrationInfo : public jni::object_base<"android/telephony/NetworkRegistrationInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DOMAIN_CS() { return get_static_field<"DOMAIN_CS", jint>(); }
	static jint DOMAIN_CS_PS() { return get_static_field<"DOMAIN_CS_PS", jint>(); }
	static jint DOMAIN_PS() { return get_static_field<"DOMAIN_PS", jint>(); }
	static jint DOMAIN_UNKNOWN() { return get_static_field<"DOMAIN_UNKNOWN", jint>(); }
	static jint NR_STATE_CONNECTED() { return get_static_field<"NR_STATE_CONNECTED", jint>(); }
	static jint NR_STATE_NONE() { return get_static_field<"NR_STATE_NONE", jint>(); }
	static jint NR_STATE_NOT_RESTRICTED() { return get_static_field<"NR_STATE_NOT_RESTRICTED", jint>(); }
	static jint NR_STATE_RESTRICTED() { return get_static_field<"NR_STATE_RESTRICTED", jint>(); }
	static jint SERVICE_TYPE_DATA() { return get_static_field<"SERVICE_TYPE_DATA", jint>(); }
	static jint SERVICE_TYPE_EMERGENCY() { return get_static_field<"SERVICE_TYPE_EMERGENCY", jint>(); }
	static jint SERVICE_TYPE_SMS() { return get_static_field<"SERVICE_TYPE_SMS", jint>(); }
	static jint SERVICE_TYPE_UNKNOWN() { return get_static_field<"SERVICE_TYPE_UNKNOWN", jint>(); }
	static jint SERVICE_TYPE_VIDEO() { return get_static_field<"SERVICE_TYPE_VIDEO", jint>(); }
	static jint SERVICE_TYPE_VOICE() { return get_static_field<"SERVICE_TYPE_VOICE", jint>(); }

	jint getTransportType() { return call_method<"getTransportType", jint>(); }
	jint getDomain() { return call_method<"getDomain", jint>(); }
	jboolean isRegistered() { return call_method<"isRegistered", jboolean>(); }
	jboolean isSearching() { return call_method<"isSearching", jboolean>(); }
	jni::ref<java::lang::String> getRegisteredPlmn() { return call_method<"getRegisteredPlmn", jni::ref<java::lang::String>>(); }
	jboolean isRoaming() { return call_method<"isRoaming", jboolean>(); }
	jni::ref<java::util::List> getAvailableServices() { return call_method<"getAvailableServices", jni::ref<java::util::List>>(); }
	jint getAccessNetworkTechnology() { return call_method<"getAccessNetworkTechnology", jint>(); }
	jni::ref<android::telephony::CellIdentity> getCellIdentity() { return call_method<"getCellIdentity", jni::ref<android::telephony::CellIdentity>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	NetworkRegistrationInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELEPHONY_NETWORKREGISTRATIONINFO
