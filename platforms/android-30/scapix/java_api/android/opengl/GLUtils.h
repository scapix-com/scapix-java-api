// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OPENGL_GLUTILS_FWD
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLUTILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::opengl { class GLUtils; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::opengl::GLUtils>
{
	static constexpr fixed_string class_name = "android/opengl/GLUtils";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLUTILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OPENGL_GLUTILS)
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLUTILS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::opengl::GLUtils : public jni::object_base<"android/opengl/GLUtils",
	java::lang::Object>
{
public:

	static jint getInternalFormat(jni::ref<android::graphics::Bitmap> bitmap) { return call_static_method<"getInternalFormat", jint>(bitmap); }
	static jint getType(jni::ref<android::graphics::Bitmap> bitmap) { return call_static_method<"getType", jint>(bitmap); }
	static void texImage2D(jint target, jint level, jint internalformat, jni::ref<android::graphics::Bitmap> bitmap, jint border) { return call_static_method<"texImage2D", void>(target, level, internalformat, bitmap, border); }
	static void texImage2D(jint target, jint level, jint internalformat, jni::ref<android::graphics::Bitmap> bitmap, jint type, jint border) { return call_static_method<"texImage2D", void>(target, level, internalformat, bitmap, type, border); }
	static void texImage2D(jint target, jint level, jni::ref<android::graphics::Bitmap> bitmap, jint border) { return call_static_method<"texImage2D", void>(target, level, bitmap, border); }
	static void texSubImage2D(jint target, jint level, jint xoffset, jint yoffset, jni::ref<android::graphics::Bitmap> bitmap) { return call_static_method<"texSubImage2D", void>(target, level, xoffset, yoffset, bitmap); }
	static void texSubImage2D(jint target, jint level, jint xoffset, jint yoffset, jni::ref<android::graphics::Bitmap> bitmap, jint format, jint type) { return call_static_method<"texSubImage2D", void>(target, level, xoffset, yoffset, bitmap, format, type); }
	static jni::ref<java::lang::String> getEGLErrorString(jint error) { return call_static_method<"getEGLErrorString", jni::ref<java::lang::String>>(error); }

protected:

	GLUtils(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLUTILS
