// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_SERVICE_QUICKSETTINGS_TILE_FWD
#define SCAPIX_JAVA_API_ANDROID_SERVICE_QUICKSETTINGS_TILE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::service::quicksettings { class Tile; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::service::quicksettings::Tile>
{
	static constexpr fixed_string class_name = "android/service/quicksettings/Tile";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SERVICE_QUICKSETTINGS_TILE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_SERVICE_QUICKSETTINGS_TILE)
#define SCAPIX_JAVA_API_ANDROID_SERVICE_QUICKSETTINGS_TILE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/drawable/Icon.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::service::quicksettings::Tile : public jni::object_base<"android/service/quicksettings/Tile",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint STATE_ACTIVE() { return get_static_field<"STATE_ACTIVE", jint>(); }
	static jint STATE_INACTIVE() { return get_static_field<"STATE_INACTIVE", jint>(); }
	static jint STATE_UNAVAILABLE() { return get_static_field<"STATE_UNAVAILABLE", jint>(); }

	jint getState() { return call_method<"getState", jint>(); }
	void setState(jint state) { return call_method<"setState", void>(state); }
	jni::ref<android::graphics::drawable::Icon> getIcon() { return call_method<"getIcon", jni::ref<android::graphics::drawable::Icon>>(); }
	void setIcon(jni::ref<android::graphics::drawable::Icon> icon) { return call_method<"setIcon", void>(icon); }
	jni::ref<java::lang::CharSequence> getLabel() { return call_method<"getLabel", jni::ref<java::lang::CharSequence>>(); }
	void setLabel(jni::ref<java::lang::CharSequence> label) { return call_method<"setLabel", void>(label); }
	jni::ref<java::lang::CharSequence> getSubtitle() { return call_method<"getSubtitle", jni::ref<java::lang::CharSequence>>(); }
	void setSubtitle(jni::ref<java::lang::CharSequence> subtitle) { return call_method<"setSubtitle", void>(subtitle); }
	jni::ref<java::lang::CharSequence> getContentDescription() { return call_method<"getContentDescription", jni::ref<java::lang::CharSequence>>(); }
	jni::ref<java::lang::CharSequence> getStateDescription() { return call_method<"getStateDescription", jni::ref<java::lang::CharSequence>>(); }
	void setContentDescription(jni::ref<java::lang::CharSequence> contentDescription) { return call_method<"setContentDescription", void>(contentDescription); }
	void setStateDescription(jni::ref<java::lang::CharSequence> stateDescription) { return call_method<"setStateDescription", void>(stateDescription); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void updateTile() { return call_method<"updateTile", void>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	Tile(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SERVICE_QUICKSETTINGS_TILE
