// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_SE_OMAPI_SESERVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_SE_OMAPI_SESERVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::se::omapi { class SEService; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::se::omapi::SEService>
{
	static constexpr fixed_string class_name = "android/se/omapi/SEService";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SE_OMAPI_SESERVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_SE_OMAPI_SESERVICE)
#define SCAPIX_JAVA_API_ANDROID_SE_OMAPI_SESERVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/se/omapi/Reader.h>
#include <scapix/java_api/android/se/omapi/SEService_OnConnectedListener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::se::omapi::SEService : public jni::object_base<"android/se/omapi/SEService",
	java::lang::Object>
{
public:

	using OnConnectedListener = SEService_OnConnectedListener;

	static jni::ref<android::se::omapi::SEService> new_object(jni::ref<android::content::Context> context, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::se::omapi::SEService_OnConnectedListener> listener) { return base_::new_object(context, executor, listener); }
	jboolean isConnected() { return call_method<"isConnected", jboolean>(); }
	jni::ref<jni::array<android::se::omapi::Reader>> getReaders() { return call_method<"getReaders", jni::ref<jni::array<android::se::omapi::Reader>>>(); }
	jni::ref<android::se::omapi::Reader> getUiccReader(jint slotNumber) { return call_method<"getUiccReader", jni::ref<android::se::omapi::Reader>>(slotNumber); }
	void shutdown() { return call_method<"shutdown", void>(); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }

protected:

	SEService(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_SE_OMAPI_SESERVICE
