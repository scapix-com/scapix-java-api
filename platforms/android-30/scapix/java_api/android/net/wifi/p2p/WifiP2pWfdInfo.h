// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PWFDINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PWFDINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::wifi::p2p { class WifiP2pWfdInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::wifi::p2p::WifiP2pWfdInfo>
{
	static constexpr fixed_string class_name = "android/net/wifi/p2p/WifiP2pWfdInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PWFDINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PWFDINFO)
#define SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PWFDINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::wifi::p2p::WifiP2pWfdInfo : public jni::object_base<"android/net/wifi/p2p/WifiP2pWfdInfo",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint DEVICE_TYPE_PRIMARY_SINK() { return get_static_field<"DEVICE_TYPE_PRIMARY_SINK", jint>(); }
	static jint DEVICE_TYPE_SECONDARY_SINK() { return get_static_field<"DEVICE_TYPE_SECONDARY_SINK", jint>(); }
	static jint DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK() { return get_static_field<"DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK", jint>(); }
	static jint DEVICE_TYPE_WFD_SOURCE() { return get_static_field<"DEVICE_TYPE_WFD_SOURCE", jint>(); }

	static jni::ref<android::net::wifi::p2p::WifiP2pWfdInfo> new_object() { return base_::new_object(); }
	static jni::ref<android::net::wifi::p2p::WifiP2pWfdInfo> new_object(jni::ref<android::net::wifi::p2p::WifiP2pWfdInfo> source) { return base_::new_object(source); }
	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	void setEnabled(jboolean enabled) { return call_method<"setEnabled", void>(enabled); }
	jint getDeviceType() { return call_method<"getDeviceType", jint>(); }
	jboolean setDeviceType(jint deviceType) { return call_method<"setDeviceType", jboolean>(deviceType); }
	jboolean isSessionAvailable() { return call_method<"isSessionAvailable", jboolean>(); }
	void setSessionAvailable(jboolean enabled) { return call_method<"setSessionAvailable", void>(enabled); }
	jboolean isContentProtectionSupported() { return call_method<"isContentProtectionSupported", jboolean>(); }
	void setContentProtectionSupported(jboolean enabled) { return call_method<"setContentProtectionSupported", void>(enabled); }
	jint getControlPort() { return call_method<"getControlPort", jint>(); }
	void setControlPort(jint port) { return call_method<"setControlPort", void>(port); }
	void setMaxThroughput(jint maxThroughput) { return call_method<"setMaxThroughput", void>(maxThroughput); }
	jint getMaxThroughput() { return call_method<"getMaxThroughput", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	WifiP2pWfdInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_WIFI_P2P_WIFIP2PWFDINFO
