// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_RTP_RTPSTREAM_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_RTP_RTPSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net::rtp { class RtpStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::rtp::RtpStream>
{
	static constexpr fixed_string class_name = "android/net/rtp/RtpStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_RTP_RTPSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_RTP_RTPSTREAM)
#define SCAPIX_JAVA_API_ANDROID_NET_RTP_RTPSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/net/InetAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::rtp::RtpStream : public jni::object_base<"android/net/rtp/RtpStream",
	java::lang::Object>
{
public:

	static jint MODE_NORMAL() { return get_static_field<"MODE_NORMAL", jint>(); }
	static jint MODE_RECEIVE_ONLY() { return get_static_field<"MODE_RECEIVE_ONLY", jint>(); }
	static jint MODE_SEND_ONLY() { return get_static_field<"MODE_SEND_ONLY", jint>(); }

	jni::ref<java::net::InetAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::InetAddress>>(); }
	jint getLocalPort() { return call_method<"getLocalPort", jint>(); }
	jni::ref<java::net::InetAddress> getRemoteAddress() { return call_method<"getRemoteAddress", jni::ref<java::net::InetAddress>>(); }
	jint getRemotePort() { return call_method<"getRemotePort", jint>(); }
	jboolean isBusy() { return call_method<"isBusy", jboolean>(); }
	jint getMode() { return call_method<"getMode", jint>(); }
	void setMode(jint mode) { return call_method<"setMode", void>(mode); }
	void associate(jni::ref<java::net::InetAddress> address, jint port) { return call_method<"associate", void>(address, port); }
	void release() { return call_method<"release", void>(); }

protected:

	RtpStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_RTP_RTPSTREAM
