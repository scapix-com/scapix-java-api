// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::hardware::camera2 { class CameraManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::hardware::camera2::CameraManager>
{
	static constexpr fixed_string class_name = "android/hardware/camera2/CameraManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER)
#define SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/camera2/CameraCharacteristics.h>
#include <scapix/java_api/android/hardware/camera2/CameraDevice_StateCallback.h>
#include <scapix/java_api/android/hardware/camera2/CameraManager_AvailabilityCallback.h>
#include <scapix/java_api/android/hardware/camera2/CameraManager_TorchCallback.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::hardware::camera2::CameraManager : public jni::object_base<"android/hardware/camera2/CameraManager",
	java::lang::Object>
{
public:

	using TorchCallback = CameraManager_TorchCallback;
	using AvailabilityCallback = CameraManager_AvailabilityCallback;

	jni::ref<jni::array<java::lang::String>> getCameraIdList() { return call_method<"getCameraIdList", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::util::Set> getConcurrentCameraIds() { return call_method<"getConcurrentCameraIds", jni::ref<java::util::Set>>(); }
	jboolean isConcurrentSessionConfigurationSupported(jni::ref<java::util::Map> cameraIdAndSessionConfig) { return call_method<"isConcurrentSessionConfigurationSupported", jboolean>(cameraIdAndSessionConfig); }
	void registerAvailabilityCallback(jni::ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback, jni::ref<android::os::Handler> handler) { return call_method<"registerAvailabilityCallback", void>(callback, handler); }
	void registerAvailabilityCallback(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback) { return call_method<"registerAvailabilityCallback", void>(executor, callback); }
	void unregisterAvailabilityCallback(jni::ref<android::hardware::camera2::CameraManager_AvailabilityCallback> callback) { return call_method<"unregisterAvailabilityCallback", void>(callback); }
	void registerTorchCallback(jni::ref<android::hardware::camera2::CameraManager_TorchCallback> callback, jni::ref<android::os::Handler> handler) { return call_method<"registerTorchCallback", void>(callback, handler); }
	void registerTorchCallback(jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::hardware::camera2::CameraManager_TorchCallback> callback) { return call_method<"registerTorchCallback", void>(executor, callback); }
	void unregisterTorchCallback(jni::ref<android::hardware::camera2::CameraManager_TorchCallback> callback) { return call_method<"unregisterTorchCallback", void>(callback); }
	jni::ref<android::hardware::camera2::CameraCharacteristics> getCameraCharacteristics(jni::ref<java::lang::String> cameraId) { return call_method<"getCameraCharacteristics", jni::ref<android::hardware::camera2::CameraCharacteristics>>(cameraId); }
	void openCamera(jni::ref<java::lang::String> cameraId, jni::ref<android::hardware::camera2::CameraDevice_StateCallback> callback, jni::ref<android::os::Handler> handler) { return call_method<"openCamera", void>(cameraId, callback, handler); }
	void openCamera(jni::ref<java::lang::String> cameraId, jni::ref<java::util::concurrent::Executor> executor, jni::ref<android::hardware::camera2::CameraDevice_StateCallback> callback) { return call_method<"openCamera", void>(cameraId, executor, callback); }
	void setTorchMode(jni::ref<java::lang::String> cameraId, jboolean enabled) { return call_method<"setTorchMode", void>(cameraId, enabled); }

protected:

	CameraManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_HARDWARE_CAMERA2_CAMERAMANAGER
