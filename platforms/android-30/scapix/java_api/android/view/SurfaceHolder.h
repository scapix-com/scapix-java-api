// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_SURFACEHOLDER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_SURFACEHOLDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class SurfaceHolder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::SurfaceHolder>
{
	static constexpr fixed_string class_name = "android/view/SurfaceHolder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_SURFACEHOLDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_SURFACEHOLDER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_SURFACEHOLDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/view/Surface.h>
#include <scapix/java_api/android/view/SurfaceHolder_Callback.h>
#include <scapix/java_api/android/view/SurfaceHolder_Callback2.h>
#include <scapix/java_api/android/view/SurfaceHolder_BadSurfaceTypeException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::SurfaceHolder : public jni::object_base<"android/view/SurfaceHolder",
	java::lang::Object>
{
public:

	using Callback2 = SurfaceHolder_Callback2;
	using Callback = SurfaceHolder_Callback;
	using BadSurfaceTypeException = SurfaceHolder_BadSurfaceTypeException;

	static jint SURFACE_TYPE_GPU() { return get_static_field<"SURFACE_TYPE_GPU", jint>(); }
	static jint SURFACE_TYPE_HARDWARE() { return get_static_field<"SURFACE_TYPE_HARDWARE", jint>(); }
	static jint SURFACE_TYPE_NORMAL() { return get_static_field<"SURFACE_TYPE_NORMAL", jint>(); }
	static jint SURFACE_TYPE_PUSH_BUFFERS() { return get_static_field<"SURFACE_TYPE_PUSH_BUFFERS", jint>(); }

	void addCallback(jni::ref<android::view::SurfaceHolder_Callback> p1) { return call_method<"addCallback", void>(p1); }
	void removeCallback(jni::ref<android::view::SurfaceHolder_Callback> p1) { return call_method<"removeCallback", void>(p1); }
	jboolean isCreating() { return call_method<"isCreating", jboolean>(); }
	void setType(jint p1) { return call_method<"setType", void>(p1); }
	void setFixedSize(jint p1, jint p2) { return call_method<"setFixedSize", void>(p1, p2); }
	void setSizeFromLayout() { return call_method<"setSizeFromLayout", void>(); }
	void setFormat(jint p1) { return call_method<"setFormat", void>(p1); }
	void setKeepScreenOn(jboolean p1) { return call_method<"setKeepScreenOn", void>(p1); }
	jni::ref<android::graphics::Canvas> lockCanvas() { return call_method<"lockCanvas", jni::ref<android::graphics::Canvas>>(); }
	jni::ref<android::graphics::Canvas> lockCanvas(jni::ref<android::graphics::Rect> p1) { return call_method<"lockCanvas", jni::ref<android::graphics::Canvas>>(p1); }
	jni::ref<android::graphics::Canvas> lockHardwareCanvas() { return call_method<"lockHardwareCanvas", jni::ref<android::graphics::Canvas>>(); }
	void unlockCanvasAndPost(jni::ref<android::graphics::Canvas> p1) { return call_method<"unlockCanvasAndPost", void>(p1); }
	jni::ref<android::graphics::Rect> getSurfaceFrame() { return call_method<"getSurfaceFrame", jni::ref<android::graphics::Rect>>(); }
	jni::ref<android::view::Surface> getSurface() { return call_method<"getSurface", jni::ref<android::view::Surface>>(); }

protected:

	SurfaceHolder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_SURFACEHOLDER
