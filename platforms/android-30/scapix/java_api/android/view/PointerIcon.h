// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_POINTERICON_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_POINTERICON_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class PointerIcon; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::PointerIcon>
{
	static constexpr fixed_string class_name = "android/view/PointerIcon";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_POINTERICON_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_POINTERICON)
#define SCAPIX_JAVA_API_ANDROID_VIEW_POINTERICON

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::PointerIcon : public jni::object_base<"android/view/PointerIcon",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint TYPE_ALIAS() { return get_static_field<"TYPE_ALIAS", jint>(); }
	static jint TYPE_ALL_SCROLL() { return get_static_field<"TYPE_ALL_SCROLL", jint>(); }
	static jint TYPE_ARROW() { return get_static_field<"TYPE_ARROW", jint>(); }
	static jint TYPE_CELL() { return get_static_field<"TYPE_CELL", jint>(); }
	static jint TYPE_CONTEXT_MENU() { return get_static_field<"TYPE_CONTEXT_MENU", jint>(); }
	static jint TYPE_COPY() { return get_static_field<"TYPE_COPY", jint>(); }
	static jint TYPE_CROSSHAIR() { return get_static_field<"TYPE_CROSSHAIR", jint>(); }
	static jint TYPE_DEFAULT() { return get_static_field<"TYPE_DEFAULT", jint>(); }
	static jint TYPE_GRAB() { return get_static_field<"TYPE_GRAB", jint>(); }
	static jint TYPE_GRABBING() { return get_static_field<"TYPE_GRABBING", jint>(); }
	static jint TYPE_HAND() { return get_static_field<"TYPE_HAND", jint>(); }
	static jint TYPE_HELP() { return get_static_field<"TYPE_HELP", jint>(); }
	static jint TYPE_HORIZONTAL_DOUBLE_ARROW() { return get_static_field<"TYPE_HORIZONTAL_DOUBLE_ARROW", jint>(); }
	static jint TYPE_NO_DROP() { return get_static_field<"TYPE_NO_DROP", jint>(); }
	static jint TYPE_NULL() { return get_static_field<"TYPE_NULL", jint>(); }
	static jint TYPE_TEXT() { return get_static_field<"TYPE_TEXT", jint>(); }
	static jint TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW() { return get_static_field<"TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW", jint>(); }
	static jint TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW() { return get_static_field<"TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW", jint>(); }
	static jint TYPE_VERTICAL_DOUBLE_ARROW() { return get_static_field<"TYPE_VERTICAL_DOUBLE_ARROW", jint>(); }
	static jint TYPE_VERTICAL_TEXT() { return get_static_field<"TYPE_VERTICAL_TEXT", jint>(); }
	static jint TYPE_WAIT() { return get_static_field<"TYPE_WAIT", jint>(); }
	static jint TYPE_ZOOM_IN() { return get_static_field<"TYPE_ZOOM_IN", jint>(); }
	static jint TYPE_ZOOM_OUT() { return get_static_field<"TYPE_ZOOM_OUT", jint>(); }

	static jni::ref<android::view::PointerIcon> getSystemIcon(jni::ref<android::content::Context> context, jint type) { return call_static_method<"getSystemIcon", jni::ref<android::view::PointerIcon>>(context, type); }
	static jni::ref<android::view::PointerIcon> create(jni::ref<android::graphics::Bitmap> bitmap, jfloat hotSpotX, jfloat hotSpotY) { return call_static_method<"create", jni::ref<android::view::PointerIcon>>(bitmap, hotSpotX, hotSpotY); }
	static jni::ref<android::view::PointerIcon> load(jni::ref<android::content::res::Resources> resources, jint resourceId) { return call_static_method<"load", jni::ref<android::view::PointerIcon>>(resources, resourceId); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> out, jint flags) { return call_method<"writeToParcel", void>(out, flags); }
	jboolean equals(jni::ref<java::lang::Object> other) { return call_method<"equals", jboolean>(other); }

protected:

	PointerIcon(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_POINTERICON
