// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTRUCTURE_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTRUCTURE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class ViewStructure; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::ViewStructure>
{
	static constexpr fixed_string class_name = "android/view/ViewStructure";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTRUCTURE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTRUCTURE)
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTRUCTURE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/LocaleList.h>
#include <scapix/java_api/android/view/ViewStructure_HtmlInfo.h>
#include <scapix/java_api/android/view/ViewStructure_HtmlInfo_Builder.h>
#include <scapix/java_api/android/view/autofill/AutofillId.h>
#include <scapix/java_api/android/view/autofill/AutofillValue.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::ViewStructure : public jni::object_base<"android/view/ViewStructure",
	java::lang::Object>
{
public:

	using HtmlInfo = ViewStructure_HtmlInfo;

	static jni::ref<android::view::ViewStructure> new_object() { return base_::new_object(); }
	void setId(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"setId", void>(p1, p2, p3, p4); }
	void setDimens(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"setDimens", void>(p1, p2, p3, p4, p5, p6); }
	void setTransformation(jni::ref<android::graphics::Matrix> p1) { return call_method<"setTransformation", void>(p1); }
	void setElevation(jfloat p1) { return call_method<"setElevation", void>(p1); }
	void setAlpha(jfloat p1) { return call_method<"setAlpha", void>(p1); }
	void setVisibility(jint p1) { return call_method<"setVisibility", void>(p1); }
	void setEnabled(jboolean p1) { return call_method<"setEnabled", void>(p1); }
	void setClickable(jboolean p1) { return call_method<"setClickable", void>(p1); }
	void setLongClickable(jboolean p1) { return call_method<"setLongClickable", void>(p1); }
	void setContextClickable(jboolean p1) { return call_method<"setContextClickable", void>(p1); }
	void setFocusable(jboolean p1) { return call_method<"setFocusable", void>(p1); }
	void setFocused(jboolean p1) { return call_method<"setFocused", void>(p1); }
	void setAccessibilityFocused(jboolean p1) { return call_method<"setAccessibilityFocused", void>(p1); }
	void setCheckable(jboolean p1) { return call_method<"setCheckable", void>(p1); }
	void setChecked(jboolean p1) { return call_method<"setChecked", void>(p1); }
	void setSelected(jboolean p1) { return call_method<"setSelected", void>(p1); }
	void setActivated(jboolean p1) { return call_method<"setActivated", void>(p1); }
	void setOpaque(jboolean p1) { return call_method<"setOpaque", void>(p1); }
	void setClassName(jni::ref<java::lang::String> p1) { return call_method<"setClassName", void>(p1); }
	void setContentDescription(jni::ref<java::lang::CharSequence> p1) { return call_method<"setContentDescription", void>(p1); }
	void setText(jni::ref<java::lang::CharSequence> p1) { return call_method<"setText", void>(p1); }
	void setText(jni::ref<java::lang::CharSequence> p1, jint p2, jint p3) { return call_method<"setText", void>(p1, p2, p3); }
	void setTextStyle(jfloat p1, jint p2, jint p3, jint p4) { return call_method<"setTextStyle", void>(p1, p2, p3, p4); }
	void setTextLines(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2) { return call_method<"setTextLines", void>(p1, p2); }
	void setTextIdEntry(jni::ref<java::lang::String> entryName) { return call_method<"setTextIdEntry", void>(entryName); }
	void setHint(jni::ref<java::lang::CharSequence> p1) { return call_method<"setHint", void>(p1); }
	void setHintIdEntry(jni::ref<java::lang::String> entryName) { return call_method<"setHintIdEntry", void>(entryName); }
	jni::ref<java::lang::CharSequence> getText() { return call_method<"getText", jni::ref<java::lang::CharSequence>>(); }
	jint getTextSelectionStart() { return call_method<"getTextSelectionStart", jint>(); }
	jint getTextSelectionEnd() { return call_method<"getTextSelectionEnd", jint>(); }
	jni::ref<java::lang::CharSequence> getHint() { return call_method<"getHint", jni::ref<java::lang::CharSequence>>(); }
	jni::ref<android::os::Bundle> getExtras() { return call_method<"getExtras", jni::ref<android::os::Bundle>>(); }
	jboolean hasExtras() { return call_method<"hasExtras", jboolean>(); }
	void setChildCount(jint p1) { return call_method<"setChildCount", void>(p1); }
	jint addChildCount(jint p1) { return call_method<"addChildCount", jint>(p1); }
	jint getChildCount() { return call_method<"getChildCount", jint>(); }
	jni::ref<android::view::ViewStructure> newChild(jint p1) { return call_method<"newChild", jni::ref<android::view::ViewStructure>>(p1); }
	jni::ref<android::view::ViewStructure> asyncNewChild(jint p1) { return call_method<"asyncNewChild", jni::ref<android::view::ViewStructure>>(p1); }
	jni::ref<android::view::autofill::AutofillId> getAutofillId() { return call_method<"getAutofillId", jni::ref<android::view::autofill::AutofillId>>(); }
	void setAutofillId(jni::ref<android::view::autofill::AutofillId> p1) { return call_method<"setAutofillId", void>(p1); }
	void setAutofillId(jni::ref<android::view::autofill::AutofillId> p1, jint p2) { return call_method<"setAutofillId", void>(p1, p2); }
	void setAutofillType(jint p1) { return call_method<"setAutofillType", void>(p1); }
	void setAutofillHints(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"setAutofillHints", void>(p1); }
	void setAutofillValue(jni::ref<android::view::autofill::AutofillValue> p1) { return call_method<"setAutofillValue", void>(p1); }
	void setAutofillOptions(jni::ref<jni::array<java::lang::CharSequence>> p1) { return call_method<"setAutofillOptions", void>(p1); }
	void setImportantForAutofill(jint mode) { return call_method<"setImportantForAutofill", void>(mode); }
	void setInputType(jint p1) { return call_method<"setInputType", void>(p1); }
	void setDataIsSensitive(jboolean p1) { return call_method<"setDataIsSensitive", void>(p1); }
	void setMinTextEms(jint minEms) { return call_method<"setMinTextEms", void>(minEms); }
	void setMaxTextEms(jint maxEms) { return call_method<"setMaxTextEms", void>(maxEms); }
	void setMaxTextLength(jint maxLength) { return call_method<"setMaxTextLength", void>(maxLength); }
	void asyncCommit() { return call_method<"asyncCommit", void>(); }
	void setWebDomain(jni::ref<java::lang::String> p1) { return call_method<"setWebDomain", void>(p1); }
	void setLocaleList(jni::ref<android::os::LocaleList> p1) { return call_method<"setLocaleList", void>(p1); }
	jni::ref<android::view::ViewStructure_HtmlInfo_Builder> newHtmlInfoBuilder(jni::ref<java::lang::String> p1) { return call_method<"newHtmlInfoBuilder", jni::ref<android::view::ViewStructure_HtmlInfo_Builder>>(p1); }
	void setHtmlInfo(jni::ref<android::view::ViewStructure_HtmlInfo> p1) { return call_method<"setHtmlInfo", void>(p1); }

protected:

	ViewStructure(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEWSTRUCTURE
