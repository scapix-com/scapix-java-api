// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_LAYOUTINFLATER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_LAYOUTINFLATER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class LayoutInflater; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::LayoutInflater>
{
	static constexpr fixed_string class_name = "android/view/LayoutInflater";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_LAYOUTINFLATER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_LAYOUTINFLATER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_LAYOUTINFLATER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/LayoutInflater_Factory.h>
#include <scapix/java_api/android/view/LayoutInflater_Factory2.h>
#include <scapix/java_api/android/view/LayoutInflater_Filter.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::LayoutInflater : public jni::object_base<"android/view/LayoutInflater",
	java::lang::Object>
{
public:

	using Filter = LayoutInflater_Filter;
	using Factory2 = LayoutInflater_Factory2;
	using Factory = LayoutInflater_Factory;

	static jni::ref<android::view::LayoutInflater> from(jni::ref<android::content::Context> context) { return call_static_method<"from", jni::ref<android::view::LayoutInflater>>(context); }
	jni::ref<android::view::LayoutInflater> cloneInContext(jni::ref<android::content::Context> p1) { return call_method<"cloneInContext", jni::ref<android::view::LayoutInflater>>(p1); }
	jni::ref<android::content::Context> getContext() { return call_method<"getContext", jni::ref<android::content::Context>>(); }
	jni::ref<android::view::LayoutInflater_Factory> getFactory() { return call_method<"getFactory", jni::ref<android::view::LayoutInflater_Factory>>(); }
	jni::ref<android::view::LayoutInflater_Factory2> getFactory2() { return call_method<"getFactory2", jni::ref<android::view::LayoutInflater_Factory2>>(); }
	void setFactory(jni::ref<android::view::LayoutInflater_Factory> factory) { return call_method<"setFactory", void>(factory); }
	void setFactory2(jni::ref<android::view::LayoutInflater_Factory2> factory) { return call_method<"setFactory2", void>(factory); }
	jni::ref<android::view::LayoutInflater_Filter> getFilter() { return call_method<"getFilter", jni::ref<android::view::LayoutInflater_Filter>>(); }
	void setFilter(jni::ref<android::view::LayoutInflater_Filter> filter) { return call_method<"setFilter", void>(filter); }
	jni::ref<android::view::View> inflate(jint resource, jni::ref<android::view::ViewGroup> root) { return call_method<"inflate", jni::ref<android::view::View>>(resource, root); }
	jni::ref<android::view::View> inflate(jni::ref<org::xmlpull::v1::XmlPullParser> parser, jni::ref<android::view::ViewGroup> root) { return call_method<"inflate", jni::ref<android::view::View>>(parser, root); }
	jni::ref<android::view::View> inflate(jint resource, jni::ref<android::view::ViewGroup> root, jboolean attachToRoot) { return call_method<"inflate", jni::ref<android::view::View>>(resource, root, attachToRoot); }
	jni::ref<android::view::View> inflate(jni::ref<org::xmlpull::v1::XmlPullParser> parser, jni::ref<android::view::ViewGroup> root, jboolean attachToRoot) { return call_method<"inflate", jni::ref<android::view::View>>(parser, root, attachToRoot); }
	jni::ref<android::view::View> createView(jni::ref<java::lang::String> name, jni::ref<java::lang::String> prefix, jni::ref<android::util::AttributeSet> attrs) { return call_method<"createView", jni::ref<android::view::View>>(name, prefix, attrs); }
	jni::ref<android::view::View> createView(jni::ref<android::content::Context> viewContext, jni::ref<java::lang::String> name, jni::ref<java::lang::String> prefix, jni::ref<android::util::AttributeSet> attrs) { return call_method<"createView", jni::ref<android::view::View>>(viewContext, name, prefix, attrs); }
	jni::ref<android::view::View> onCreateView(jni::ref<android::content::Context> viewContext, jni::ref<android::view::View> parent, jni::ref<java::lang::String> name, jni::ref<android::util::AttributeSet> attrs) { return call_method<"onCreateView", jni::ref<android::view::View>>(viewContext, parent, name, attrs); }

protected:

	LayoutInflater(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_LAYOUTINFLATER
