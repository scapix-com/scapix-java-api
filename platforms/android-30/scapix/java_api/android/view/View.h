// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_Callback.h>
#include <scapix/java_api/android/view/KeyEvent_Callback.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEventSource.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class View; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::View>
{
	static constexpr fixed_string class_name = "android/view/View";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::graphics::drawable::Drawable_Callback, scapix::java_api::android::view::KeyEvent_Callback, scapix::java_api::android::view::accessibility::AccessibilityEventSource>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_VIEW)
#define SCAPIX_JAVA_API_ANDROID_VIEW_VIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/animation/StateListAnimator.h>
#include <scapix/java_api/android/content/ClipData.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/TypedArray.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/BlendMode.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/Matrix.h>
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/graphics/Point.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/util/Property.h>
#include <scapix/java_api/android/util/SparseArray.h>
#include <scapix/java_api/android/view/ActionMode.h>
#include <scapix/java_api/android/view/ActionMode_Callback.h>
#include <scapix/java_api/android/view/ContextMenu.h>
#include <scapix/java_api/android/view/Display.h>
#include <scapix/java_api/android/view/DragEvent.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/KeyEvent_DispatcherState.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/PointerIcon.h>
#include <scapix/java_api/android/view/TouchDelegate.h>
#include <scapix/java_api/android/view/View_AccessibilityDelegate.h>
#include <scapix/java_api/android/view/View_DragShadowBuilder.h>
#include <scapix/java_api/android/view/View_OnApplyWindowInsetsListener.h>
#include <scapix/java_api/android/view/View_OnAttachStateChangeListener.h>
#include <scapix/java_api/android/view/View_OnCapturedPointerListener.h>
#include <scapix/java_api/android/view/View_OnClickListener.h>
#include <scapix/java_api/android/view/View_OnContextClickListener.h>
#include <scapix/java_api/android/view/View_OnCreateContextMenuListener.h>
#include <scapix/java_api/android/view/View_OnDragListener.h>
#include <scapix/java_api/android/view/View_OnFocusChangeListener.h>
#include <scapix/java_api/android/view/View_OnGenericMotionListener.h>
#include <scapix/java_api/android/view/View_OnHoverListener.h>
#include <scapix/java_api/android/view/View_OnKeyListener.h>
#include <scapix/java_api/android/view/View_OnLayoutChangeListener.h>
#include <scapix/java_api/android/view/View_OnLongClickListener.h>
#include <scapix/java_api/android/view/View_OnScrollChangeListener.h>
#include <scapix/java_api/android/view/View_OnSystemUiVisibilityChangeListener.h>
#include <scapix/java_api/android/view/View_OnTouchListener.h>
#include <scapix/java_api/android/view/View_OnUnhandledKeyEventListener.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/android/view/ViewGroup_LayoutParams.h>
#include <scapix/java_api/android/view/ViewOutlineProvider.h>
#include <scapix/java_api/android/view/ViewOverlay.h>
#include <scapix/java_api/android/view/ViewParent.h>
#include <scapix/java_api/android/view/ViewPropertyAnimator.h>
#include <scapix/java_api/android/view/ViewStructure.h>
#include <scapix/java_api/android/view/ViewTreeObserver.h>
#include <scapix/java_api/android/view/WindowId.h>
#include <scapix/java_api/android/view/WindowInsets.h>
#include <scapix/java_api/android/view/WindowInsetsAnimation.h>
#include <scapix/java_api/android/view/WindowInsetsAnimation_Bounds.h>
#include <scapix/java_api/android/view/WindowInsetsAnimation_Callback.h>
#include <scapix/java_api/android/view/WindowInsetsController.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeProvider.h>
#include <scapix/java_api/android/view/animation/Animation.h>
#include <scapix/java_api/android/view/autofill/AutofillId.h>
#include <scapix/java_api/android/view/autofill/AutofillValue.h>
#include <scapix/java_api/android/view/contentcapture/ContentCaptureSession.h>
#include <scapix/java_api/android/view/inputmethod/EditorInfo.h>
#include <scapix/java_api/android/view/inputmethod/InputConnection.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/android/view/View_MeasureSpec.h>
#include <scapix/java_api/android/view/View_BaseSavedState.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::View : public jni::object_base<"android/view/View",
	java::lang::Object,
	android::graphics::drawable::Drawable_Callback,
	android::view::KeyEvent_Callback,
	android::view::accessibility::AccessibilityEventSource>
{
public:

	using OnUnhandledKeyEventListener = View_OnUnhandledKeyEventListener;
	using OnTouchListener = View_OnTouchListener;
	using OnSystemUiVisibilityChangeListener = View_OnSystemUiVisibilityChangeListener;
	using OnScrollChangeListener = View_OnScrollChangeListener;
	using OnLongClickListener = View_OnLongClickListener;
	using OnLayoutChangeListener = View_OnLayoutChangeListener;
	using OnKeyListener = View_OnKeyListener;
	using OnHoverListener = View_OnHoverListener;
	using OnGenericMotionListener = View_OnGenericMotionListener;
	using OnFocusChangeListener = View_OnFocusChangeListener;
	using OnDragListener = View_OnDragListener;
	using OnCreateContextMenuListener = View_OnCreateContextMenuListener;
	using OnContextClickListener = View_OnContextClickListener;
	using OnClickListener = View_OnClickListener;
	using OnCapturedPointerListener = View_OnCapturedPointerListener;
	using OnAttachStateChangeListener = View_OnAttachStateChangeListener;
	using OnApplyWindowInsetsListener = View_OnApplyWindowInsetsListener;
	using MeasureSpec = View_MeasureSpec;
	using DragShadowBuilder = View_DragShadowBuilder;
	using BaseSavedState = View_BaseSavedState;
	using AccessibilityDelegate = View_AccessibilityDelegate;

	static jint ACCESSIBILITY_LIVE_REGION_ASSERTIVE() { return get_static_field<"ACCESSIBILITY_LIVE_REGION_ASSERTIVE", jint>(); }
	static jint ACCESSIBILITY_LIVE_REGION_NONE() { return get_static_field<"ACCESSIBILITY_LIVE_REGION_NONE", jint>(); }
	static jint ACCESSIBILITY_LIVE_REGION_POLITE() { return get_static_field<"ACCESSIBILITY_LIVE_REGION_POLITE", jint>(); }
	static jni::ref<android::util::Property> ALPHA() { return get_static_field<"ALPHA", jni::ref<android::util::Property>>(); }
	static jint AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS() { return get_static_field<"AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS", jint>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE() { return get_static_field<"AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY() { return get_static_field<"AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH() { return get_static_field<"AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR() { return get_static_field<"AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_NUMBER() { return get_static_field<"AUTOFILL_HINT_CREDIT_CARD_NUMBER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE() { return get_static_field<"AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_EMAIL_ADDRESS() { return get_static_field<"AUTOFILL_HINT_EMAIL_ADDRESS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_NAME() { return get_static_field<"AUTOFILL_HINT_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_PASSWORD() { return get_static_field<"AUTOFILL_HINT_PASSWORD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_PHONE() { return get_static_field<"AUTOFILL_HINT_PHONE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_POSTAL_ADDRESS() { return get_static_field<"AUTOFILL_HINT_POSTAL_ADDRESS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_POSTAL_CODE() { return get_static_field<"AUTOFILL_HINT_POSTAL_CODE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTOFILL_HINT_USERNAME() { return get_static_field<"AUTOFILL_HINT_USERNAME", jni::ref<java::lang::String>>(); }
	static jint AUTOFILL_TYPE_DATE() { return get_static_field<"AUTOFILL_TYPE_DATE", jint>(); }
	static jint AUTOFILL_TYPE_LIST() { return get_static_field<"AUTOFILL_TYPE_LIST", jint>(); }
	static jint AUTOFILL_TYPE_NONE() { return get_static_field<"AUTOFILL_TYPE_NONE", jint>(); }
	static jint AUTOFILL_TYPE_TEXT() { return get_static_field<"AUTOFILL_TYPE_TEXT", jint>(); }
	static jint AUTOFILL_TYPE_TOGGLE() { return get_static_field<"AUTOFILL_TYPE_TOGGLE", jint>(); }
	static jint DRAG_FLAG_GLOBAL() { return get_static_field<"DRAG_FLAG_GLOBAL", jint>(); }
	static jint DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION() { return get_static_field<"DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION", jint>(); }
	static jint DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION() { return get_static_field<"DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION", jint>(); }
	static jint DRAG_FLAG_GLOBAL_URI_READ() { return get_static_field<"DRAG_FLAG_GLOBAL_URI_READ", jint>(); }
	static jint DRAG_FLAG_GLOBAL_URI_WRITE() { return get_static_field<"DRAG_FLAG_GLOBAL_URI_WRITE", jint>(); }
	static jint DRAG_FLAG_OPAQUE() { return get_static_field<"DRAG_FLAG_OPAQUE", jint>(); }
	static jint DRAWING_CACHE_QUALITY_AUTO() { return get_static_field<"DRAWING_CACHE_QUALITY_AUTO", jint>(); }
	static jint DRAWING_CACHE_QUALITY_HIGH() { return get_static_field<"DRAWING_CACHE_QUALITY_HIGH", jint>(); }
	static jint DRAWING_CACHE_QUALITY_LOW() { return get_static_field<"DRAWING_CACHE_QUALITY_LOW", jint>(); }
	static jint FIND_VIEWS_WITH_CONTENT_DESCRIPTION() { return get_static_field<"FIND_VIEWS_WITH_CONTENT_DESCRIPTION", jint>(); }
	static jint FIND_VIEWS_WITH_TEXT() { return get_static_field<"FIND_VIEWS_WITH_TEXT", jint>(); }
	static jint FOCUSABLE() { return get_static_field<"FOCUSABLE", jint>(); }
	static jint FOCUSABLES_ALL() { return get_static_field<"FOCUSABLES_ALL", jint>(); }
	static jint FOCUSABLES_TOUCH_MODE() { return get_static_field<"FOCUSABLES_TOUCH_MODE", jint>(); }
	static jint FOCUSABLE_AUTO() { return get_static_field<"FOCUSABLE_AUTO", jint>(); }
	static jint FOCUS_BACKWARD() { return get_static_field<"FOCUS_BACKWARD", jint>(); }
	static jint FOCUS_DOWN() { return get_static_field<"FOCUS_DOWN", jint>(); }
	static jint FOCUS_FORWARD() { return get_static_field<"FOCUS_FORWARD", jint>(); }
	static jint FOCUS_LEFT() { return get_static_field<"FOCUS_LEFT", jint>(); }
	static jint FOCUS_RIGHT() { return get_static_field<"FOCUS_RIGHT", jint>(); }
	static jint FOCUS_UP() { return get_static_field<"FOCUS_UP", jint>(); }
	static jint GONE() { return get_static_field<"GONE", jint>(); }
	static jint HAPTIC_FEEDBACK_ENABLED() { return get_static_field<"HAPTIC_FEEDBACK_ENABLED", jint>(); }
	static jint IMPORTANT_FOR_ACCESSIBILITY_AUTO() { return get_static_field<"IMPORTANT_FOR_ACCESSIBILITY_AUTO", jint>(); }
	static jint IMPORTANT_FOR_ACCESSIBILITY_NO() { return get_static_field<"IMPORTANT_FOR_ACCESSIBILITY_NO", jint>(); }
	static jint IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS() { return get_static_field<"IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS", jint>(); }
	static jint IMPORTANT_FOR_ACCESSIBILITY_YES() { return get_static_field<"IMPORTANT_FOR_ACCESSIBILITY_YES", jint>(); }
	static jint IMPORTANT_FOR_AUTOFILL_AUTO() { return get_static_field<"IMPORTANT_FOR_AUTOFILL_AUTO", jint>(); }
	static jint IMPORTANT_FOR_AUTOFILL_NO() { return get_static_field<"IMPORTANT_FOR_AUTOFILL_NO", jint>(); }
	static jint IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS() { return get_static_field<"IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS", jint>(); }
	static jint IMPORTANT_FOR_AUTOFILL_YES() { return get_static_field<"IMPORTANT_FOR_AUTOFILL_YES", jint>(); }
	static jint IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS() { return get_static_field<"IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS", jint>(); }
	static jint IMPORTANT_FOR_CONTENT_CAPTURE_AUTO() { return get_static_field<"IMPORTANT_FOR_CONTENT_CAPTURE_AUTO", jint>(); }
	static jint IMPORTANT_FOR_CONTENT_CAPTURE_NO() { return get_static_field<"IMPORTANT_FOR_CONTENT_CAPTURE_NO", jint>(); }
	static jint IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS() { return get_static_field<"IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS", jint>(); }
	static jint IMPORTANT_FOR_CONTENT_CAPTURE_YES() { return get_static_field<"IMPORTANT_FOR_CONTENT_CAPTURE_YES", jint>(); }
	static jint IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS() { return get_static_field<"IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS", jint>(); }
	static jint INVISIBLE() { return get_static_field<"INVISIBLE", jint>(); }
	static jint KEEP_SCREEN_ON() { return get_static_field<"KEEP_SCREEN_ON", jint>(); }
	static jint LAYER_TYPE_HARDWARE() { return get_static_field<"LAYER_TYPE_HARDWARE", jint>(); }
	static jint LAYER_TYPE_NONE() { return get_static_field<"LAYER_TYPE_NONE", jint>(); }
	static jint LAYER_TYPE_SOFTWARE() { return get_static_field<"LAYER_TYPE_SOFTWARE", jint>(); }
	static jint LAYOUT_DIRECTION_INHERIT() { return get_static_field<"LAYOUT_DIRECTION_INHERIT", jint>(); }
	static jint LAYOUT_DIRECTION_LOCALE() { return get_static_field<"LAYOUT_DIRECTION_LOCALE", jint>(); }
	static jint LAYOUT_DIRECTION_LTR() { return get_static_field<"LAYOUT_DIRECTION_LTR", jint>(); }
	static jint LAYOUT_DIRECTION_RTL() { return get_static_field<"LAYOUT_DIRECTION_RTL", jint>(); }
	static jint MEASURED_HEIGHT_STATE_SHIFT() { return get_static_field<"MEASURED_HEIGHT_STATE_SHIFT", jint>(); }
	static jint MEASURED_SIZE_MASK() { return get_static_field<"MEASURED_SIZE_MASK", jint>(); }
	static jint MEASURED_STATE_MASK() { return get_static_field<"MEASURED_STATE_MASK", jint>(); }
	static jint MEASURED_STATE_TOO_SMALL() { return get_static_field<"MEASURED_STATE_TOO_SMALL", jint>(); }
	static jint NOT_FOCUSABLE() { return get_static_field<"NOT_FOCUSABLE", jint>(); }
	static jint NO_ID() { return get_static_field<"NO_ID", jint>(); }
	static jint OVER_SCROLL_ALWAYS() { return get_static_field<"OVER_SCROLL_ALWAYS", jint>(); }
	static jint OVER_SCROLL_IF_CONTENT_SCROLLS() { return get_static_field<"OVER_SCROLL_IF_CONTENT_SCROLLS", jint>(); }
	static jint OVER_SCROLL_NEVER() { return get_static_field<"OVER_SCROLL_NEVER", jint>(); }
	static jni::ref<android::util::Property> ROTATION() { return get_static_field<"ROTATION", jni::ref<android::util::Property>>(); }
	static jni::ref<android::util::Property> ROTATION_X() { return get_static_field<"ROTATION_X", jni::ref<android::util::Property>>(); }
	static jni::ref<android::util::Property> ROTATION_Y() { return get_static_field<"ROTATION_Y", jni::ref<android::util::Property>>(); }
	static jni::ref<android::util::Property> SCALE_X() { return get_static_field<"SCALE_X", jni::ref<android::util::Property>>(); }
	static jni::ref<android::util::Property> SCALE_Y() { return get_static_field<"SCALE_Y", jni::ref<android::util::Property>>(); }
	static jint SCREEN_STATE_OFF() { return get_static_field<"SCREEN_STATE_OFF", jint>(); }
	static jint SCREEN_STATE_ON() { return get_static_field<"SCREEN_STATE_ON", jint>(); }
	static jint SCROLLBARS_INSIDE_INSET() { return get_static_field<"SCROLLBARS_INSIDE_INSET", jint>(); }
	static jint SCROLLBARS_INSIDE_OVERLAY() { return get_static_field<"SCROLLBARS_INSIDE_OVERLAY", jint>(); }
	static jint SCROLLBARS_OUTSIDE_INSET() { return get_static_field<"SCROLLBARS_OUTSIDE_INSET", jint>(); }
	static jint SCROLLBARS_OUTSIDE_OVERLAY() { return get_static_field<"SCROLLBARS_OUTSIDE_OVERLAY", jint>(); }
	static jint SCROLLBAR_POSITION_DEFAULT() { return get_static_field<"SCROLLBAR_POSITION_DEFAULT", jint>(); }
	static jint SCROLLBAR_POSITION_LEFT() { return get_static_field<"SCROLLBAR_POSITION_LEFT", jint>(); }
	static jint SCROLLBAR_POSITION_RIGHT() { return get_static_field<"SCROLLBAR_POSITION_RIGHT", jint>(); }
	static jint SCROLL_AXIS_HORIZONTAL() { return get_static_field<"SCROLL_AXIS_HORIZONTAL", jint>(); }
	static jint SCROLL_AXIS_NONE() { return get_static_field<"SCROLL_AXIS_NONE", jint>(); }
	static jint SCROLL_AXIS_VERTICAL() { return get_static_field<"SCROLL_AXIS_VERTICAL", jint>(); }
	static jint SCROLL_INDICATOR_BOTTOM() { return get_static_field<"SCROLL_INDICATOR_BOTTOM", jint>(); }
	static jint SCROLL_INDICATOR_END() { return get_static_field<"SCROLL_INDICATOR_END", jint>(); }
	static jint SCROLL_INDICATOR_LEFT() { return get_static_field<"SCROLL_INDICATOR_LEFT", jint>(); }
	static jint SCROLL_INDICATOR_RIGHT() { return get_static_field<"SCROLL_INDICATOR_RIGHT", jint>(); }
	static jint SCROLL_INDICATOR_START() { return get_static_field<"SCROLL_INDICATOR_START", jint>(); }
	static jint SCROLL_INDICATOR_TOP() { return get_static_field<"SCROLL_INDICATOR_TOP", jint>(); }
	static jint SOUND_EFFECTS_ENABLED() { return get_static_field<"SOUND_EFFECTS_ENABLED", jint>(); }
	static jint STATUS_BAR_HIDDEN() { return get_static_field<"STATUS_BAR_HIDDEN", jint>(); }
	static jint STATUS_BAR_VISIBLE() { return get_static_field<"STATUS_BAR_VISIBLE", jint>(); }
	static jint SYSTEM_UI_FLAG_FULLSCREEN() { return get_static_field<"SYSTEM_UI_FLAG_FULLSCREEN", jint>(); }
	static jint SYSTEM_UI_FLAG_HIDE_NAVIGATION() { return get_static_field<"SYSTEM_UI_FLAG_HIDE_NAVIGATION", jint>(); }
	static jint SYSTEM_UI_FLAG_IMMERSIVE() { return get_static_field<"SYSTEM_UI_FLAG_IMMERSIVE", jint>(); }
	static jint SYSTEM_UI_FLAG_IMMERSIVE_STICKY() { return get_static_field<"SYSTEM_UI_FLAG_IMMERSIVE_STICKY", jint>(); }
	static jint SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN() { return get_static_field<"SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", jint>(); }
	static jint SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION() { return get_static_field<"SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", jint>(); }
	static jint SYSTEM_UI_FLAG_LAYOUT_STABLE() { return get_static_field<"SYSTEM_UI_FLAG_LAYOUT_STABLE", jint>(); }
	static jint SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR() { return get_static_field<"SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR", jint>(); }
	static jint SYSTEM_UI_FLAG_LIGHT_STATUS_BAR() { return get_static_field<"SYSTEM_UI_FLAG_LIGHT_STATUS_BAR", jint>(); }
	static jint SYSTEM_UI_FLAG_LOW_PROFILE() { return get_static_field<"SYSTEM_UI_FLAG_LOW_PROFILE", jint>(); }
	static jint SYSTEM_UI_FLAG_VISIBLE() { return get_static_field<"SYSTEM_UI_FLAG_VISIBLE", jint>(); }
	static jint SYSTEM_UI_LAYOUT_FLAGS() { return get_static_field<"SYSTEM_UI_LAYOUT_FLAGS", jint>(); }
	static jint TEXT_ALIGNMENT_CENTER() { return get_static_field<"TEXT_ALIGNMENT_CENTER", jint>(); }
	static jint TEXT_ALIGNMENT_GRAVITY() { return get_static_field<"TEXT_ALIGNMENT_GRAVITY", jint>(); }
	static jint TEXT_ALIGNMENT_INHERIT() { return get_static_field<"TEXT_ALIGNMENT_INHERIT", jint>(); }
	static jint TEXT_ALIGNMENT_TEXT_END() { return get_static_field<"TEXT_ALIGNMENT_TEXT_END", jint>(); }
	static jint TEXT_ALIGNMENT_TEXT_START() { return get_static_field<"TEXT_ALIGNMENT_TEXT_START", jint>(); }
	static jint TEXT_ALIGNMENT_VIEW_END() { return get_static_field<"TEXT_ALIGNMENT_VIEW_END", jint>(); }
	static jint TEXT_ALIGNMENT_VIEW_START() { return get_static_field<"TEXT_ALIGNMENT_VIEW_START", jint>(); }
	static jint TEXT_DIRECTION_ANY_RTL() { return get_static_field<"TEXT_DIRECTION_ANY_RTL", jint>(); }
	static jint TEXT_DIRECTION_FIRST_STRONG() { return get_static_field<"TEXT_DIRECTION_FIRST_STRONG", jint>(); }
	static jint TEXT_DIRECTION_FIRST_STRONG_LTR() { return get_static_field<"TEXT_DIRECTION_FIRST_STRONG_LTR", jint>(); }
	static jint TEXT_DIRECTION_FIRST_STRONG_RTL() { return get_static_field<"TEXT_DIRECTION_FIRST_STRONG_RTL", jint>(); }
	static jint TEXT_DIRECTION_INHERIT() { return get_static_field<"TEXT_DIRECTION_INHERIT", jint>(); }
	static jint TEXT_DIRECTION_LOCALE() { return get_static_field<"TEXT_DIRECTION_LOCALE", jint>(); }
	static jint TEXT_DIRECTION_LTR() { return get_static_field<"TEXT_DIRECTION_LTR", jint>(); }
	static jint TEXT_DIRECTION_RTL() { return get_static_field<"TEXT_DIRECTION_RTL", jint>(); }
	static jni::ref<android::util::Property> TRANSLATION_X() { return get_static_field<"TRANSLATION_X", jni::ref<android::util::Property>>(); }
	static jni::ref<android::util::Property> TRANSLATION_Y() { return get_static_field<"TRANSLATION_Y", jni::ref<android::util::Property>>(); }
	static jni::ref<android::util::Property> TRANSLATION_Z() { return get_static_field<"TRANSLATION_Z", jni::ref<android::util::Property>>(); }
	static jint VISIBLE() { return get_static_field<"VISIBLE", jint>(); }
	static jni::ref<android::util::Property> X() { return get_static_field<"X", jni::ref<android::util::Property>>(); }
	static jni::ref<android::util::Property> Y() { return get_static_field<"Y", jni::ref<android::util::Property>>(); }
	static jni::ref<android::util::Property> Z() { return get_static_field<"Z", jni::ref<android::util::Property>>(); }

	static jni::ref<android::view::View> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::view::View> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::view::View> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::view::View> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jni::ref<jni::array<jint>> getAttributeResolutionStack(jint attribute) { return call_method<"getAttributeResolutionStack", jni::ref<jni::array<jint>>>(attribute); }
	jni::ref<java::util::Map> getAttributeSourceResourceMap() { return call_method<"getAttributeSourceResourceMap", jni::ref<java::util::Map>>(); }
	jint getExplicitStyle() { return call_method<"getExplicitStyle", jint>(); }
	jboolean isShowingLayoutBounds() { return call_method<"isShowingLayoutBounds", jboolean>(); }
	void saveAttributeDataForStyleable(jni::ref<android::content::Context> context, jni::ref<jni::array<jint>> styleable, jni::ref<android::util::AttributeSet> attrs, jni::ref<android::content::res::TypedArray> t, jint defStyleAttr, jint defStyleRes) { return call_method<"saveAttributeDataForStyleable", void>(context, styleable, attrs, t, defStyleAttr, defStyleRes); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint getVerticalFadingEdgeLength() { return call_method<"getVerticalFadingEdgeLength", jint>(); }
	void setFadingEdgeLength(jint length) { return call_method<"setFadingEdgeLength", void>(length); }
	jint getHorizontalFadingEdgeLength() { return call_method<"getHorizontalFadingEdgeLength", jint>(); }
	jint getVerticalScrollbarWidth() { return call_method<"getVerticalScrollbarWidth", jint>(); }
	void setVerticalScrollbarThumbDrawable(jni::ref<android::graphics::drawable::Drawable> drawable) { return call_method<"setVerticalScrollbarThumbDrawable", void>(drawable); }
	void setVerticalScrollbarTrackDrawable(jni::ref<android::graphics::drawable::Drawable> drawable) { return call_method<"setVerticalScrollbarTrackDrawable", void>(drawable); }
	void setHorizontalScrollbarThumbDrawable(jni::ref<android::graphics::drawable::Drawable> drawable) { return call_method<"setHorizontalScrollbarThumbDrawable", void>(drawable); }
	void setHorizontalScrollbarTrackDrawable(jni::ref<android::graphics::drawable::Drawable> drawable) { return call_method<"setHorizontalScrollbarTrackDrawable", void>(drawable); }
	jni::ref<android::graphics::drawable::Drawable> getVerticalScrollbarThumbDrawable() { return call_method<"getVerticalScrollbarThumbDrawable", jni::ref<android::graphics::drawable::Drawable>>(); }
	jni::ref<android::graphics::drawable::Drawable> getVerticalScrollbarTrackDrawable() { return call_method<"getVerticalScrollbarTrackDrawable", jni::ref<android::graphics::drawable::Drawable>>(); }
	jni::ref<android::graphics::drawable::Drawable> getHorizontalScrollbarThumbDrawable() { return call_method<"getHorizontalScrollbarThumbDrawable", jni::ref<android::graphics::drawable::Drawable>>(); }
	jni::ref<android::graphics::drawable::Drawable> getHorizontalScrollbarTrackDrawable() { return call_method<"getHorizontalScrollbarTrackDrawable", jni::ref<android::graphics::drawable::Drawable>>(); }
	void setVerticalScrollbarPosition(jint position) { return call_method<"setVerticalScrollbarPosition", void>(position); }
	jint getVerticalScrollbarPosition() { return call_method<"getVerticalScrollbarPosition", jint>(); }
	void setScrollIndicators(jint indicators) { return call_method<"setScrollIndicators", void>(indicators); }
	void setScrollIndicators(jint indicators, jint mask) { return call_method<"setScrollIndicators", void>(indicators, mask); }
	jint getScrollIndicators() { return call_method<"getScrollIndicators", jint>(); }
	void setOnScrollChangeListener(jni::ref<android::view::View_OnScrollChangeListener> l) { return call_method<"setOnScrollChangeListener", void>(l); }
	void setOnFocusChangeListener(jni::ref<android::view::View_OnFocusChangeListener> l) { return call_method<"setOnFocusChangeListener", void>(l); }
	void addOnLayoutChangeListener(jni::ref<android::view::View_OnLayoutChangeListener> listener) { return call_method<"addOnLayoutChangeListener", void>(listener); }
	void removeOnLayoutChangeListener(jni::ref<android::view::View_OnLayoutChangeListener> listener) { return call_method<"removeOnLayoutChangeListener", void>(listener); }
	void addOnAttachStateChangeListener(jni::ref<android::view::View_OnAttachStateChangeListener> listener) { return call_method<"addOnAttachStateChangeListener", void>(listener); }
	void removeOnAttachStateChangeListener(jni::ref<android::view::View_OnAttachStateChangeListener> listener) { return call_method<"removeOnAttachStateChangeListener", void>(listener); }
	jni::ref<android::view::View_OnFocusChangeListener> getOnFocusChangeListener() { return call_method<"getOnFocusChangeListener", jni::ref<android::view::View_OnFocusChangeListener>>(); }
	void setOnClickListener(jni::ref<android::view::View_OnClickListener> l) { return call_method<"setOnClickListener", void>(l); }
	jboolean hasOnClickListeners() { return call_method<"hasOnClickListeners", jboolean>(); }
	void setOnLongClickListener(jni::ref<android::view::View_OnLongClickListener> l) { return call_method<"setOnLongClickListener", void>(l); }
	jboolean hasOnLongClickListeners() { return call_method<"hasOnLongClickListeners", jboolean>(); }
	void setOnContextClickListener(jni::ref<android::view::View_OnContextClickListener> l) { return call_method<"setOnContextClickListener", void>(l); }
	void setOnCreateContextMenuListener(jni::ref<android::view::View_OnCreateContextMenuListener> l) { return call_method<"setOnCreateContextMenuListener", void>(l); }
	jboolean performClick() { return call_method<"performClick", jboolean>(); }
	jboolean callOnClick() { return call_method<"callOnClick", jboolean>(); }
	jboolean performLongClick() { return call_method<"performLongClick", jboolean>(); }
	jboolean performLongClick(jfloat x, jfloat y) { return call_method<"performLongClick", jboolean>(x, y); }
	jboolean performContextClick(jfloat x, jfloat y) { return call_method<"performContextClick", jboolean>(x, y); }
	jboolean performContextClick() { return call_method<"performContextClick", jboolean>(); }
	jboolean showContextMenu() { return call_method<"showContextMenu", jboolean>(); }
	jboolean showContextMenu(jfloat x, jfloat y) { return call_method<"showContextMenu", jboolean>(x, y); }
	jni::ref<android::view::ActionMode> startActionMode(jni::ref<android::view::ActionMode_Callback> callback) { return call_method<"startActionMode", jni::ref<android::view::ActionMode>>(callback); }
	jni::ref<android::view::ActionMode> startActionMode(jni::ref<android::view::ActionMode_Callback> callback, jint type) { return call_method<"startActionMode", jni::ref<android::view::ActionMode>>(callback, type); }
	void setOnKeyListener(jni::ref<android::view::View_OnKeyListener> l) { return call_method<"setOnKeyListener", void>(l); }
	void setOnTouchListener(jni::ref<android::view::View_OnTouchListener> l) { return call_method<"setOnTouchListener", void>(l); }
	void setOnGenericMotionListener(jni::ref<android::view::View_OnGenericMotionListener> l) { return call_method<"setOnGenericMotionListener", void>(l); }
	void setOnHoverListener(jni::ref<android::view::View_OnHoverListener> l) { return call_method<"setOnHoverListener", void>(l); }
	void setOnDragListener(jni::ref<android::view::View_OnDragListener> l) { return call_method<"setOnDragListener", void>(l); }
	void setRevealOnFocusHint(jboolean revealOnFocus) { return call_method<"setRevealOnFocusHint", void>(revealOnFocus); }
	jboolean getRevealOnFocusHint() { return call_method<"getRevealOnFocusHint", jboolean>(); }
	jboolean requestRectangleOnScreen(jni::ref<android::graphics::Rect> rectangle) { return call_method<"requestRectangleOnScreen", jboolean>(rectangle); }
	jboolean requestRectangleOnScreen(jni::ref<android::graphics::Rect> rectangle, jboolean immediate) { return call_method<"requestRectangleOnScreen", jboolean>(rectangle, immediate); }
	void clearFocus() { return call_method<"clearFocus", void>(); }
	jboolean hasFocus() { return call_method<"hasFocus", jboolean>(); }
	jboolean hasFocusable() { return call_method<"hasFocusable", jboolean>(); }
	jboolean hasExplicitFocusable() { return call_method<"hasExplicitFocusable", jboolean>(); }
	void setAccessibilityPaneTitle(jni::ref<java::lang::CharSequence> accessibilityPaneTitle) { return call_method<"setAccessibilityPaneTitle", void>(accessibilityPaneTitle); }
	jni::ref<java::lang::CharSequence> getAccessibilityPaneTitle() { return call_method<"getAccessibilityPaneTitle", jni::ref<java::lang::CharSequence>>(); }
	void sendAccessibilityEvent(jint eventType) { return call_method<"sendAccessibilityEvent", void>(eventType); }
	void announceForAccessibility(jni::ref<java::lang::CharSequence> text) { return call_method<"announceForAccessibility", void>(text); }
	void sendAccessibilityEventUnchecked(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"sendAccessibilityEventUnchecked", void>(event); }
	jboolean dispatchPopulateAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"dispatchPopulateAccessibilityEvent", jboolean>(event); }
	void onPopulateAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onPopulateAccessibilityEvent", void>(event); }
	void onInitializeAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onInitializeAccessibilityEvent", void>(event); }
	jni::ref<android::view::accessibility::AccessibilityNodeInfo> createAccessibilityNodeInfo() { return call_method<"createAccessibilityNodeInfo", jni::ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
	void onInitializeAccessibilityNodeInfo(jni::ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<"onInitializeAccessibilityNodeInfo", void>(info); }
	jni::ref<java::lang::CharSequence> getAccessibilityClassName() { return call_method<"getAccessibilityClassName", jni::ref<java::lang::CharSequence>>(); }
	void onProvideStructure(jni::ref<android::view::ViewStructure> structure) { return call_method<"onProvideStructure", void>(structure); }
	void onProvideAutofillStructure(jni::ref<android::view::ViewStructure> structure, jint flags) { return call_method<"onProvideAutofillStructure", void>(structure, flags); }
	void onProvideContentCaptureStructure(jni::ref<android::view::ViewStructure> structure, jint flags) { return call_method<"onProvideContentCaptureStructure", void>(structure, flags); }
	void onProvideVirtualStructure(jni::ref<android::view::ViewStructure> structure) { return call_method<"onProvideVirtualStructure", void>(structure); }
	void onProvideAutofillVirtualStructure(jni::ref<android::view::ViewStructure> structure, jint flags) { return call_method<"onProvideAutofillVirtualStructure", void>(structure, flags); }
	void autofill(jni::ref<android::view::autofill::AutofillValue> value) { return call_method<"autofill", void>(value); }
	void autofill(jni::ref<android::util::SparseArray> values) { return call_method<"autofill", void>(values); }
	jni::ref<android::view::autofill::AutofillId> getAutofillId() { return call_method<"getAutofillId", jni::ref<android::view::autofill::AutofillId>>(); }
	void setAutofillId(jni::ref<android::view::autofill::AutofillId> id) { return call_method<"setAutofillId", void>(id); }
	jint getAutofillType() { return call_method<"getAutofillType", jint>(); }
	jni::ref<jni::array<java::lang::String>> getAutofillHints() { return call_method<"getAutofillHints", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<android::view::autofill::AutofillValue> getAutofillValue() { return call_method<"getAutofillValue", jni::ref<android::view::autofill::AutofillValue>>(); }
	jint getImportantForAutofill() { return call_method<"getImportantForAutofill", jint>(); }
	void setImportantForAutofill(jint mode) { return call_method<"setImportantForAutofill", void>(mode); }
	jboolean isImportantForAutofill() { return call_method<"isImportantForAutofill", jboolean>(); }
	jint getImportantForContentCapture() { return call_method<"getImportantForContentCapture", jint>(); }
	void setImportantForContentCapture(jint mode) { return call_method<"setImportantForContentCapture", void>(mode); }
	jboolean isImportantForContentCapture() { return call_method<"isImportantForContentCapture", jboolean>(); }
	void setContentCaptureSession(jni::ref<android::view::contentcapture::ContentCaptureSession> contentCaptureSession) { return call_method<"setContentCaptureSession", void>(contentCaptureSession); }
	jni::ref<android::view::contentcapture::ContentCaptureSession> getContentCaptureSession() { return call_method<"getContentCaptureSession", jni::ref<android::view::contentcapture::ContentCaptureSession>>(); }
	void dispatchProvideStructure(jni::ref<android::view::ViewStructure> structure) { return call_method<"dispatchProvideStructure", void>(structure); }
	void dispatchProvideAutofillStructure(jni::ref<android::view::ViewStructure> structure, jint flags) { return call_method<"dispatchProvideAutofillStructure", void>(structure, flags); }
	void addExtraDataToAccessibilityNodeInfo(jni::ref<android::view::accessibility::AccessibilityNodeInfo> info, jni::ref<java::lang::String> extraDataKey, jni::ref<android::os::Bundle> arguments) { return call_method<"addExtraDataToAccessibilityNodeInfo", void>(info, extraDataKey, arguments); }
	jboolean isVisibleToUserForAutofill(jint virtualId) { return call_method<"isVisibleToUserForAutofill", jboolean>(virtualId); }
	jni::ref<android::view::View_AccessibilityDelegate> getAccessibilityDelegate() { return call_method<"getAccessibilityDelegate", jni::ref<android::view::View_AccessibilityDelegate>>(); }
	void setAccessibilityDelegate(jni::ref<android::view::View_AccessibilityDelegate> delegate) { return call_method<"setAccessibilityDelegate", void>(delegate); }
	jni::ref<android::view::accessibility::AccessibilityNodeProvider> getAccessibilityNodeProvider() { return call_method<"getAccessibilityNodeProvider", jni::ref<android::view::accessibility::AccessibilityNodeProvider>>(); }
	jni::ref<java::lang::CharSequence> getStateDescription() { return call_method<"getStateDescription", jni::ref<java::lang::CharSequence>>(); }
	jni::ref<java::lang::CharSequence> getContentDescription() { return call_method<"getContentDescription", jni::ref<java::lang::CharSequence>>(); }
	void setStateDescription(jni::ref<java::lang::CharSequence> stateDescription) { return call_method<"setStateDescription", void>(stateDescription); }
	void setContentDescription(jni::ref<java::lang::CharSequence> contentDescription) { return call_method<"setContentDescription", void>(contentDescription); }
	void setAccessibilityTraversalBefore(jint beforeId) { return call_method<"setAccessibilityTraversalBefore", void>(beforeId); }
	jint getAccessibilityTraversalBefore() { return call_method<"getAccessibilityTraversalBefore", jint>(); }
	void setAccessibilityTraversalAfter(jint afterId) { return call_method<"setAccessibilityTraversalAfter", void>(afterId); }
	jint getAccessibilityTraversalAfter() { return call_method<"getAccessibilityTraversalAfter", jint>(); }
	jint getLabelFor() { return call_method<"getLabelFor", jint>(); }
	void setLabelFor(jint id) { return call_method<"setLabelFor", void>(id); }
	jboolean isFocused() { return call_method<"isFocused", jboolean>(); }
	jni::ref<android::view::View> findFocus() { return call_method<"findFocus", jni::ref<android::view::View>>(); }
	jboolean isScrollContainer() { return call_method<"isScrollContainer", jboolean>(); }
	void setScrollContainer(jboolean isScrollContainer) { return call_method<"setScrollContainer", void>(isScrollContainer); }
	jint getDrawingCacheQuality() { return call_method<"getDrawingCacheQuality", jint>(); }
	void setDrawingCacheQuality(jint quality) { return call_method<"setDrawingCacheQuality", void>(quality); }
	jboolean getKeepScreenOn() { return call_method<"getKeepScreenOn", jboolean>(); }
	void setKeepScreenOn(jboolean keepScreenOn) { return call_method<"setKeepScreenOn", void>(keepScreenOn); }
	jint getNextFocusLeftId() { return call_method<"getNextFocusLeftId", jint>(); }
	void setNextFocusLeftId(jint nextFocusLeftId) { return call_method<"setNextFocusLeftId", void>(nextFocusLeftId); }
	jint getNextFocusRightId() { return call_method<"getNextFocusRightId", jint>(); }
	void setNextFocusRightId(jint nextFocusRightId) { return call_method<"setNextFocusRightId", void>(nextFocusRightId); }
	jint getNextFocusUpId() { return call_method<"getNextFocusUpId", jint>(); }
	void setNextFocusUpId(jint nextFocusUpId) { return call_method<"setNextFocusUpId", void>(nextFocusUpId); }
	jint getNextFocusDownId() { return call_method<"getNextFocusDownId", jint>(); }
	void setNextFocusDownId(jint nextFocusDownId) { return call_method<"setNextFocusDownId", void>(nextFocusDownId); }
	jint getNextFocusForwardId() { return call_method<"getNextFocusForwardId", jint>(); }
	void setNextFocusForwardId(jint nextFocusForwardId) { return call_method<"setNextFocusForwardId", void>(nextFocusForwardId); }
	jint getNextClusterForwardId() { return call_method<"getNextClusterForwardId", jint>(); }
	void setNextClusterForwardId(jint nextClusterForwardId) { return call_method<"setNextClusterForwardId", void>(nextClusterForwardId); }
	jboolean isShown() { return call_method<"isShown", jboolean>(); }
	jni::ref<android::view::WindowInsets> onApplyWindowInsets(jni::ref<android::view::WindowInsets> insets) { return call_method<"onApplyWindowInsets", jni::ref<android::view::WindowInsets>>(insets); }
	void setOnApplyWindowInsetsListener(jni::ref<android::view::View_OnApplyWindowInsetsListener> listener) { return call_method<"setOnApplyWindowInsetsListener", void>(listener); }
	jni::ref<android::view::WindowInsets> dispatchApplyWindowInsets(jni::ref<android::view::WindowInsets> insets) { return call_method<"dispatchApplyWindowInsets", jni::ref<android::view::WindowInsets>>(insets); }
	void setWindowInsetsAnimationCallback(jni::ref<android::view::WindowInsetsAnimation_Callback> callback) { return call_method<"setWindowInsetsAnimationCallback", void>(callback); }
	void dispatchWindowInsetsAnimationPrepare(jni::ref<android::view::WindowInsetsAnimation> animation) { return call_method<"dispatchWindowInsetsAnimationPrepare", void>(animation); }
	jni::ref<android::view::WindowInsetsAnimation_Bounds> dispatchWindowInsetsAnimationStart(jni::ref<android::view::WindowInsetsAnimation> animation, jni::ref<android::view::WindowInsetsAnimation_Bounds> bounds) { return call_method<"dispatchWindowInsetsAnimationStart", jni::ref<android::view::WindowInsetsAnimation_Bounds>>(animation, bounds); }
	jni::ref<android::view::WindowInsets> dispatchWindowInsetsAnimationProgress(jni::ref<android::view::WindowInsets> insets, jni::ref<java::util::List> runningAnimations) { return call_method<"dispatchWindowInsetsAnimationProgress", jni::ref<android::view::WindowInsets>>(insets, runningAnimations); }
	void dispatchWindowInsetsAnimationEnd(jni::ref<android::view::WindowInsetsAnimation> animation) { return call_method<"dispatchWindowInsetsAnimationEnd", void>(animation); }
	void setSystemGestureExclusionRects(jni::ref<java::util::List> rects) { return call_method<"setSystemGestureExclusionRects", void>(rects); }
	jni::ref<java::util::List> getSystemGestureExclusionRects() { return call_method<"getSystemGestureExclusionRects", jni::ref<java::util::List>>(); }
	void getLocationInSurface(jni::ref<jni::array<jint>> location) { return call_method<"getLocationInSurface", void>(location); }
	jni::ref<android::view::WindowInsets> getRootWindowInsets() { return call_method<"getRootWindowInsets", jni::ref<android::view::WindowInsets>>(); }
	jni::ref<android::view::WindowInsetsController> getWindowInsetsController() { return call_method<"getWindowInsetsController", jni::ref<android::view::WindowInsetsController>>(); }
	jni::ref<android::view::WindowInsets> computeSystemWindowInsets(jni::ref<android::view::WindowInsets> in, jni::ref<android::graphics::Rect> outLocalInsets) { return call_method<"computeSystemWindowInsets", jni::ref<android::view::WindowInsets>>(in, outLocalInsets); }
	void setFitsSystemWindows(jboolean fitSystemWindows) { return call_method<"setFitsSystemWindows", void>(fitSystemWindows); }
	jboolean getFitsSystemWindows() { return call_method<"getFitsSystemWindows", jboolean>(); }
	void requestFitSystemWindows() { return call_method<"requestFitSystemWindows", void>(); }
	void requestApplyInsets() { return call_method<"requestApplyInsets", void>(); }
	jint getVisibility() { return call_method<"getVisibility", jint>(); }
	void setVisibility(jint visibility) { return call_method<"setVisibility", void>(visibility); }
	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	void setEnabled(jboolean enabled) { return call_method<"setEnabled", void>(enabled); }
	void setFocusable(jboolean focusable) { return call_method<"setFocusable", void>(focusable); }
	void setFocusable(jint focusable) { return call_method<"setFocusable", void>(focusable); }
	void setFocusableInTouchMode(jboolean focusableInTouchMode) { return call_method<"setFocusableInTouchMode", void>(focusableInTouchMode); }
	void setAutofillHints(jni::ref<jni::array<java::lang::String>> autofillHints) { return call_method<"setAutofillHints", void>(autofillHints); }
	void setSoundEffectsEnabled(jboolean soundEffectsEnabled) { return call_method<"setSoundEffectsEnabled", void>(soundEffectsEnabled); }
	jboolean isSoundEffectsEnabled() { return call_method<"isSoundEffectsEnabled", jboolean>(); }
	void setHapticFeedbackEnabled(jboolean hapticFeedbackEnabled) { return call_method<"setHapticFeedbackEnabled", void>(hapticFeedbackEnabled); }
	jboolean isHapticFeedbackEnabled() { return call_method<"isHapticFeedbackEnabled", jboolean>(); }
	void setLayoutDirection(jint layoutDirection) { return call_method<"setLayoutDirection", void>(layoutDirection); }
	jint getLayoutDirection() { return call_method<"getLayoutDirection", jint>(); }
	jboolean hasTransientState() { return call_method<"hasTransientState", jboolean>(); }
	void setHasTransientState(jboolean hasTransientState) { return call_method<"setHasTransientState", void>(hasTransientState); }
	jboolean isAttachedToWindow() { return call_method<"isAttachedToWindow", jboolean>(); }
	jboolean isLaidOut() { return call_method<"isLaidOut", jboolean>(); }
	void setWillNotDraw(jboolean willNotDraw) { return call_method<"setWillNotDraw", void>(willNotDraw); }
	jboolean willNotDraw() { return call_method<"willNotDraw", jboolean>(); }
	void setWillNotCacheDrawing(jboolean willNotCacheDrawing) { return call_method<"setWillNotCacheDrawing", void>(willNotCacheDrawing); }
	jboolean willNotCacheDrawing() { return call_method<"willNotCacheDrawing", jboolean>(); }
	jboolean isClickable() { return call_method<"isClickable", jboolean>(); }
	void setClickable(jboolean clickable) { return call_method<"setClickable", void>(clickable); }
	jboolean isLongClickable() { return call_method<"isLongClickable", jboolean>(); }
	void setLongClickable(jboolean longClickable) { return call_method<"setLongClickable", void>(longClickable); }
	jboolean isContextClickable() { return call_method<"isContextClickable", jboolean>(); }
	void setContextClickable(jboolean contextClickable) { return call_method<"setContextClickable", void>(contextClickable); }
	void setPressed(jboolean pressed) { return call_method<"setPressed", void>(pressed); }
	jboolean isPressed() { return call_method<"isPressed", jboolean>(); }
	jboolean isSaveEnabled() { return call_method<"isSaveEnabled", jboolean>(); }
	void setSaveEnabled(jboolean enabled) { return call_method<"setSaveEnabled", void>(enabled); }
	jboolean getFilterTouchesWhenObscured() { return call_method<"getFilterTouchesWhenObscured", jboolean>(); }
	void setFilterTouchesWhenObscured(jboolean enabled) { return call_method<"setFilterTouchesWhenObscured", void>(enabled); }
	jboolean isSaveFromParentEnabled() { return call_method<"isSaveFromParentEnabled", jboolean>(); }
	void setSaveFromParentEnabled(jboolean enabled) { return call_method<"setSaveFromParentEnabled", void>(enabled); }
	jboolean isFocusable() { return call_method<"isFocusable", jboolean>(); }
	jint getFocusable() { return call_method<"getFocusable", jint>(); }
	jboolean isFocusableInTouchMode() { return call_method<"isFocusableInTouchMode", jboolean>(); }
	jboolean isScreenReaderFocusable() { return call_method<"isScreenReaderFocusable", jboolean>(); }
	void setScreenReaderFocusable(jboolean screenReaderFocusable) { return call_method<"setScreenReaderFocusable", void>(screenReaderFocusable); }
	jboolean isAccessibilityHeading() { return call_method<"isAccessibilityHeading", jboolean>(); }
	void setAccessibilityHeading(jboolean isHeading) { return call_method<"setAccessibilityHeading", void>(isHeading); }
	jni::ref<android::view::View> focusSearch(jint direction) { return call_method<"focusSearch", jni::ref<android::view::View>>(direction); }
	jboolean isKeyboardNavigationCluster() { return call_method<"isKeyboardNavigationCluster", jboolean>(); }
	void setKeyboardNavigationCluster(jboolean isCluster) { return call_method<"setKeyboardNavigationCluster", void>(isCluster); }
	jboolean isFocusedByDefault() { return call_method<"isFocusedByDefault", jboolean>(); }
	void setFocusedByDefault(jboolean isFocusedByDefault) { return call_method<"setFocusedByDefault", void>(isFocusedByDefault); }
	jni::ref<android::view::View> keyboardNavigationClusterSearch(jni::ref<android::view::View> currentCluster, jint direction) { return call_method<"keyboardNavigationClusterSearch", jni::ref<android::view::View>>(currentCluster, direction); }
	jboolean dispatchUnhandledMove(jni::ref<android::view::View> focused, jint direction) { return call_method<"dispatchUnhandledMove", jboolean>(focused, direction); }
	void setDefaultFocusHighlightEnabled(jboolean defaultFocusHighlightEnabled) { return call_method<"setDefaultFocusHighlightEnabled", void>(defaultFocusHighlightEnabled); }
	jboolean getDefaultFocusHighlightEnabled() { return call_method<"getDefaultFocusHighlightEnabled", jboolean>(); }
	jni::ref<java::util::ArrayList> getFocusables(jint direction) { return call_method<"getFocusables", jni::ref<java::util::ArrayList>>(direction); }
	void addFocusables(jni::ref<java::util::ArrayList> views, jint direction) { return call_method<"addFocusables", void>(views, direction); }
	void addFocusables(jni::ref<java::util::ArrayList> views, jint direction, jint focusableMode) { return call_method<"addFocusables", void>(views, direction, focusableMode); }
	void addKeyboardNavigationClusters(jni::ref<java::util::Collection> views, jint direction) { return call_method<"addKeyboardNavigationClusters", void>(views, direction); }
	void findViewsWithText(jni::ref<java::util::ArrayList> outViews, jni::ref<java::lang::CharSequence> searched, jint flags) { return call_method<"findViewsWithText", void>(outViews, searched, flags); }
	jni::ref<java::util::ArrayList> getTouchables() { return call_method<"getTouchables", jni::ref<java::util::ArrayList>>(); }
	void addTouchables(jni::ref<java::util::ArrayList> views) { return call_method<"addTouchables", void>(views); }
	jboolean isAccessibilityFocused() { return call_method<"isAccessibilityFocused", jboolean>(); }
	jboolean requestFocus() { return call_method<"requestFocus", jboolean>(); }
	jboolean restoreDefaultFocus() { return call_method<"restoreDefaultFocus", jboolean>(); }
	jboolean requestFocus(jint direction) { return call_method<"requestFocus", jboolean>(direction); }
	jboolean requestFocus(jint direction, jni::ref<android::graphics::Rect> previouslyFocusedRect) { return call_method<"requestFocus", jboolean>(direction, previouslyFocusedRect); }
	jboolean requestFocusFromTouch() { return call_method<"requestFocusFromTouch", jboolean>(); }
	jint getImportantForAccessibility() { return call_method<"getImportantForAccessibility", jint>(); }
	void setAccessibilityLiveRegion(jint mode) { return call_method<"setAccessibilityLiveRegion", void>(mode); }
	jint getAccessibilityLiveRegion() { return call_method<"getAccessibilityLiveRegion", jint>(); }
	void setImportantForAccessibility(jint mode) { return call_method<"setImportantForAccessibility", void>(mode); }
	jboolean isImportantForAccessibility() { return call_method<"isImportantForAccessibility", jboolean>(); }
	jni::ref<android::view::ViewParent> getParentForAccessibility() { return call_method<"getParentForAccessibility", jni::ref<android::view::ViewParent>>(); }
	void addChildrenForAccessibility(jni::ref<java::util::ArrayList> outChildren) { return call_method<"addChildrenForAccessibility", void>(outChildren); }
	void setTransitionVisibility(jint visibility) { return call_method<"setTransitionVisibility", void>(visibility); }
	jboolean dispatchNestedPrePerformAccessibilityAction(jint action, jni::ref<android::os::Bundle> arguments) { return call_method<"dispatchNestedPrePerformAccessibilityAction", jboolean>(action, arguments); }
	jboolean performAccessibilityAction(jint action, jni::ref<android::os::Bundle> arguments) { return call_method<"performAccessibilityAction", jboolean>(action, arguments); }
	jboolean isTemporarilyDetached() { return call_method<"isTemporarilyDetached", jboolean>(); }
	void dispatchStartTemporaryDetach() { return call_method<"dispatchStartTemporaryDetach", void>(); }
	void onStartTemporaryDetach() { return call_method<"onStartTemporaryDetach", void>(); }
	void dispatchFinishTemporaryDetach() { return call_method<"dispatchFinishTemporaryDetach", void>(); }
	void onFinishTemporaryDetach() { return call_method<"onFinishTemporaryDetach", void>(); }
	jni::ref<android::view::KeyEvent_DispatcherState> getKeyDispatcherState() { return call_method<"getKeyDispatcherState", jni::ref<android::view::KeyEvent_DispatcherState>>(); }
	jboolean dispatchKeyEventPreIme(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEventPreIme", jboolean>(event); }
	jboolean dispatchKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEvent", jboolean>(event); }
	jboolean dispatchKeyShortcutEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyShortcutEvent", jboolean>(event); }
	jboolean dispatchTouchEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchTouchEvent", jboolean>(event); }
	jboolean onFilterTouchEventForSecurity(jni::ref<android::view::MotionEvent> event) { return call_method<"onFilterTouchEventForSecurity", jboolean>(event); }
	jboolean dispatchTrackballEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchTrackballEvent", jboolean>(event); }
	jboolean dispatchCapturedPointerEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchCapturedPointerEvent", jboolean>(event); }
	jboolean dispatchGenericMotionEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"dispatchGenericMotionEvent", jboolean>(event); }
	void dispatchWindowFocusChanged(jboolean hasFocus) { return call_method<"dispatchWindowFocusChanged", void>(hasFocus); }
	void onWindowFocusChanged(jboolean hasWindowFocus) { return call_method<"onWindowFocusChanged", void>(hasWindowFocus); }
	jboolean hasWindowFocus() { return call_method<"hasWindowFocus", jboolean>(); }
	void dispatchDisplayHint(jint hint) { return call_method<"dispatchDisplayHint", void>(hint); }
	void dispatchWindowVisibilityChanged(jint visibility) { return call_method<"dispatchWindowVisibilityChanged", void>(visibility); }
	void onVisibilityAggregated(jboolean isVisible) { return call_method<"onVisibilityAggregated", void>(isVisible); }
	jint getWindowVisibility() { return call_method<"getWindowVisibility", jint>(); }
	void getWindowVisibleDisplayFrame(jni::ref<android::graphics::Rect> outRect) { return call_method<"getWindowVisibleDisplayFrame", void>(outRect); }
	void dispatchConfigurationChanged(jni::ref<android::content::res::Configuration> newConfig) { return call_method<"dispatchConfigurationChanged", void>(newConfig); }
	jboolean isInTouchMode() { return call_method<"isInTouchMode", jboolean>(); }
	jni::ref<android::content::Context> getContext() { return call_method<"getContext", jni::ref<android::content::Context>>(); }
	jboolean onKeyPreIme(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyPreIme", jboolean>(keyCode, event); }
	jboolean onKeyDown(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyDown", jboolean>(keyCode, event); }
	jboolean onKeyLongPress(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyLongPress", jboolean>(keyCode, event); }
	jboolean onKeyUp(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyUp", jboolean>(keyCode, event); }
	jboolean onKeyMultiple(jint keyCode, jint repeatCount, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyMultiple", jboolean>(keyCode, repeatCount, event); }
	jboolean onKeyShortcut(jint keyCode, jni::ref<android::view::KeyEvent> event) { return call_method<"onKeyShortcut", jboolean>(keyCode, event); }
	jboolean onCheckIsTextEditor() { return call_method<"onCheckIsTextEditor", jboolean>(); }
	jni::ref<android::view::inputmethod::InputConnection> onCreateInputConnection(jni::ref<android::view::inputmethod::EditorInfo> outAttrs) { return call_method<"onCreateInputConnection", jni::ref<android::view::inputmethod::InputConnection>>(outAttrs); }
	jboolean checkInputConnectionProxy(jni::ref<android::view::View> view) { return call_method<"checkInputConnectionProxy", jboolean>(view); }
	void createContextMenu(jni::ref<android::view::ContextMenu> menu) { return call_method<"createContextMenu", void>(menu); }
	jboolean onTrackballEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onTrackballEvent", jboolean>(event); }
	jboolean onGenericMotionEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onGenericMotionEvent", jboolean>(event); }
	jboolean onHoverEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onHoverEvent", jboolean>(event); }
	jboolean isHovered() { return call_method<"isHovered", jboolean>(); }
	void setHovered(jboolean hovered) { return call_method<"setHovered", void>(hovered); }
	void onHoverChanged(jboolean hovered) { return call_method<"onHoverChanged", void>(hovered); }
	jboolean onTouchEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onTouchEvent", jboolean>(event); }
	void cancelLongPress() { return call_method<"cancelLongPress", void>(); }
	void setTouchDelegate(jni::ref<android::view::TouchDelegate> delegate) { return call_method<"setTouchDelegate", void>(delegate); }
	jni::ref<android::view::TouchDelegate> getTouchDelegate() { return call_method<"getTouchDelegate", jni::ref<android::view::TouchDelegate>>(); }
	void requestUnbufferedDispatch(jni::ref<android::view::MotionEvent> event) { return call_method<"requestUnbufferedDispatch", void>(event); }
	void requestUnbufferedDispatch(jint source) { return call_method<"requestUnbufferedDispatch", void>(source); }
	void bringToFront() { return call_method<"bringToFront", void>(); }
	jni::ref<android::view::ViewParent> getParent() { return call_method<"getParent", jni::ref<android::view::ViewParent>>(); }
	void setScrollX(jint value) { return call_method<"setScrollX", void>(value); }
	void setScrollY(jint value) { return call_method<"setScrollY", void>(value); }
	jint getScrollX() { return call_method<"getScrollX", jint>(); }
	jint getScrollY() { return call_method<"getScrollY", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	void getDrawingRect(jni::ref<android::graphics::Rect> outRect) { return call_method<"getDrawingRect", void>(outRect); }
	jint getMeasuredWidth() { return call_method<"getMeasuredWidth", jint>(); }
	jint getMeasuredWidthAndState() { return call_method<"getMeasuredWidthAndState", jint>(); }
	jint getMeasuredHeight() { return call_method<"getMeasuredHeight", jint>(); }
	jint getMeasuredHeightAndState() { return call_method<"getMeasuredHeightAndState", jint>(); }
	jint getMeasuredState() { return call_method<"getMeasuredState", jint>(); }
	jni::ref<android::graphics::Matrix> getMatrix() { return call_method<"getMatrix", jni::ref<android::graphics::Matrix>>(); }
	jfloat getCameraDistance() { return call_method<"getCameraDistance", jfloat>(); }
	void setCameraDistance(jfloat distance) { return call_method<"setCameraDistance", void>(distance); }
	jfloat getRotation() { return call_method<"getRotation", jfloat>(); }
	void setRotation(jfloat rotation) { return call_method<"setRotation", void>(rotation); }
	jfloat getRotationY() { return call_method<"getRotationY", jfloat>(); }
	void setRotationY(jfloat rotationY) { return call_method<"setRotationY", void>(rotationY); }
	jfloat getRotationX() { return call_method<"getRotationX", jfloat>(); }
	void setRotationX(jfloat rotationX) { return call_method<"setRotationX", void>(rotationX); }
	jfloat getScaleX() { return call_method<"getScaleX", jfloat>(); }
	void setScaleX(jfloat scaleX) { return call_method<"setScaleX", void>(scaleX); }
	jfloat getScaleY() { return call_method<"getScaleY", jfloat>(); }
	void setScaleY(jfloat scaleY) { return call_method<"setScaleY", void>(scaleY); }
	jfloat getPivotX() { return call_method<"getPivotX", jfloat>(); }
	void setPivotX(jfloat pivotX) { return call_method<"setPivotX", void>(pivotX); }
	jfloat getPivotY() { return call_method<"getPivotY", jfloat>(); }
	void setPivotY(jfloat pivotY) { return call_method<"setPivotY", void>(pivotY); }
	jboolean isPivotSet() { return call_method<"isPivotSet", jboolean>(); }
	void resetPivot() { return call_method<"resetPivot", void>(); }
	jfloat getAlpha() { return call_method<"getAlpha", jfloat>(); }
	void forceHasOverlappingRendering(jboolean hasOverlappingRendering) { return call_method<"forceHasOverlappingRendering", void>(hasOverlappingRendering); }
	jboolean getHasOverlappingRendering() { return call_method<"getHasOverlappingRendering", jboolean>(); }
	jboolean hasOverlappingRendering() { return call_method<"hasOverlappingRendering", jboolean>(); }
	void setAlpha(jfloat alpha) { return call_method<"setAlpha", void>(alpha); }
	void setTransitionAlpha(jfloat alpha) { return call_method<"setTransitionAlpha", void>(alpha); }
	jfloat getTransitionAlpha() { return call_method<"getTransitionAlpha", jfloat>(); }
	void setForceDarkAllowed(jboolean allow) { return call_method<"setForceDarkAllowed", void>(allow); }
	jboolean isForceDarkAllowed() { return call_method<"isForceDarkAllowed", jboolean>(); }
	jint getTop() { return call_method<"getTop", jint>(); }
	void setTop(jint top) { return call_method<"setTop", void>(top); }
	jint getBottom() { return call_method<"getBottom", jint>(); }
	jboolean isDirty() { return call_method<"isDirty", jboolean>(); }
	void setBottom(jint bottom) { return call_method<"setBottom", void>(bottom); }
	jint getLeft() { return call_method<"getLeft", jint>(); }
	void setLeft(jint left) { return call_method<"setLeft", void>(left); }
	jint getRight() { return call_method<"getRight", jint>(); }
	void setRight(jint right) { return call_method<"setRight", void>(right); }
	jfloat getX() { return call_method<"getX", jfloat>(); }
	void setX(jfloat x) { return call_method<"setX", void>(x); }
	jfloat getY() { return call_method<"getY", jfloat>(); }
	void setY(jfloat y) { return call_method<"setY", void>(y); }
	jfloat getZ() { return call_method<"getZ", jfloat>(); }
	void setZ(jfloat z) { return call_method<"setZ", void>(z); }
	jfloat getElevation() { return call_method<"getElevation", jfloat>(); }
	void setElevation(jfloat elevation) { return call_method<"setElevation", void>(elevation); }
	jfloat getTranslationX() { return call_method<"getTranslationX", jfloat>(); }
	void setTranslationX(jfloat translationX) { return call_method<"setTranslationX", void>(translationX); }
	jfloat getTranslationY() { return call_method<"getTranslationY", jfloat>(); }
	void setTranslationY(jfloat translationY) { return call_method<"setTranslationY", void>(translationY); }
	jfloat getTranslationZ() { return call_method<"getTranslationZ", jfloat>(); }
	void setTranslationZ(jfloat translationZ) { return call_method<"setTranslationZ", void>(translationZ); }
	void setAnimationMatrix(jni::ref<android::graphics::Matrix> matrix) { return call_method<"setAnimationMatrix", void>(matrix); }
	jni::ref<android::graphics::Matrix> getAnimationMatrix() { return call_method<"getAnimationMatrix", jni::ref<android::graphics::Matrix>>(); }
	jni::ref<android::animation::StateListAnimator> getStateListAnimator() { return call_method<"getStateListAnimator", jni::ref<android::animation::StateListAnimator>>(); }
	void setStateListAnimator(jni::ref<android::animation::StateListAnimator> stateListAnimator) { return call_method<"setStateListAnimator", void>(stateListAnimator); }
	jboolean getClipToOutline() { return call_method<"getClipToOutline", jboolean>(); }
	void setClipToOutline(jboolean clipToOutline) { return call_method<"setClipToOutline", void>(clipToOutline); }
	void setOutlineProvider(jni::ref<android::view::ViewOutlineProvider> provider) { return call_method<"setOutlineProvider", void>(provider); }
	jni::ref<android::view::ViewOutlineProvider> getOutlineProvider() { return call_method<"getOutlineProvider", jni::ref<android::view::ViewOutlineProvider>>(); }
	void invalidateOutline() { return call_method<"invalidateOutline", void>(); }
	void setOutlineSpotShadowColor(jint color) { return call_method<"setOutlineSpotShadowColor", void>(color); }
	jint getOutlineSpotShadowColor() { return call_method<"getOutlineSpotShadowColor", jint>(); }
	void setOutlineAmbientShadowColor(jint color) { return call_method<"setOutlineAmbientShadowColor", void>(color); }
	jint getOutlineAmbientShadowColor() { return call_method<"getOutlineAmbientShadowColor", jint>(); }
	void getHitRect(jni::ref<android::graphics::Rect> outRect) { return call_method<"getHitRect", void>(outRect); }
	void getFocusedRect(jni::ref<android::graphics::Rect> r) { return call_method<"getFocusedRect", void>(r); }
	jboolean getGlobalVisibleRect(jni::ref<android::graphics::Rect> r, jni::ref<android::graphics::Point> globalOffset) { return call_method<"getGlobalVisibleRect", jboolean>(r, globalOffset); }
	jboolean getGlobalVisibleRect(jni::ref<android::graphics::Rect> r) { return call_method<"getGlobalVisibleRect", jboolean>(r); }
	jboolean getLocalVisibleRect(jni::ref<android::graphics::Rect> r) { return call_method<"getLocalVisibleRect", jboolean>(r); }
	void offsetTopAndBottom(jint offset) { return call_method<"offsetTopAndBottom", void>(offset); }
	void offsetLeftAndRight(jint offset) { return call_method<"offsetLeftAndRight", void>(offset); }
	jni::ref<android::view::ViewGroup_LayoutParams> getLayoutParams() { return call_method<"getLayoutParams", jni::ref<android::view::ViewGroup_LayoutParams>>(); }
	void setLayoutParams(jni::ref<android::view::ViewGroup_LayoutParams> params) { return call_method<"setLayoutParams", void>(params); }
	void scrollTo(jint x, jint y) { return call_method<"scrollTo", void>(x, y); }
	void scrollBy(jint x, jint y) { return call_method<"scrollBy", void>(x, y); }
	void invalidate(jni::ref<android::graphics::Rect> dirty) { return call_method<"invalidate", void>(dirty); }
	void invalidate(jint l, jint t, jint r, jint b) { return call_method<"invalidate", void>(l, t, r, b); }
	void invalidate() { return call_method<"invalidate", void>(); }
	jboolean isOpaque() { return call_method<"isOpaque", jboolean>(); }
	jni::ref<android::os::Handler> getHandler() { return call_method<"getHandler", jni::ref<android::os::Handler>>(); }
	jboolean post(jni::ref<java::lang::Runnable> action) { return call_method<"post", jboolean>(action); }
	jboolean postDelayed(jni::ref<java::lang::Runnable> action, jlong delayMillis) { return call_method<"postDelayed", jboolean>(action, delayMillis); }
	void postOnAnimation(jni::ref<java::lang::Runnable> action) { return call_method<"postOnAnimation", void>(action); }
	void postOnAnimationDelayed(jni::ref<java::lang::Runnable> action, jlong delayMillis) { return call_method<"postOnAnimationDelayed", void>(action, delayMillis); }
	jboolean removeCallbacks(jni::ref<java::lang::Runnable> action) { return call_method<"removeCallbacks", jboolean>(action); }
	void postInvalidate() { return call_method<"postInvalidate", void>(); }
	void postInvalidate(jint left, jint top, jint right, jint bottom) { return call_method<"postInvalidate", void>(left, top, right, bottom); }
	void postInvalidateDelayed(jlong delayMilliseconds) { return call_method<"postInvalidateDelayed", void>(delayMilliseconds); }
	void postInvalidateDelayed(jlong delayMilliseconds, jint p2, jint left, jint top, jint right) { return call_method<"postInvalidateDelayed", void>(delayMilliseconds, p2, left, top, right); }
	void postInvalidateOnAnimation() { return call_method<"postInvalidateOnAnimation", void>(); }
	void postInvalidateOnAnimation(jint left, jint top, jint right, jint bottom) { return call_method<"postInvalidateOnAnimation", void>(left, top, right, bottom); }
	void computeScroll() { return call_method<"computeScroll", void>(); }
	jboolean isHorizontalFadingEdgeEnabled() { return call_method<"isHorizontalFadingEdgeEnabled", jboolean>(); }
	void setHorizontalFadingEdgeEnabled(jboolean horizontalFadingEdgeEnabled) { return call_method<"setHorizontalFadingEdgeEnabled", void>(horizontalFadingEdgeEnabled); }
	jboolean isVerticalFadingEdgeEnabled() { return call_method<"isVerticalFadingEdgeEnabled", jboolean>(); }
	void setVerticalFadingEdgeEnabled(jboolean verticalFadingEdgeEnabled) { return call_method<"setVerticalFadingEdgeEnabled", void>(verticalFadingEdgeEnabled); }
	jboolean isHorizontalScrollBarEnabled() { return call_method<"isHorizontalScrollBarEnabled", jboolean>(); }
	void setHorizontalScrollBarEnabled(jboolean horizontalScrollBarEnabled) { return call_method<"setHorizontalScrollBarEnabled", void>(horizontalScrollBarEnabled); }
	jboolean isVerticalScrollBarEnabled() { return call_method<"isVerticalScrollBarEnabled", jboolean>(); }
	void setVerticalScrollBarEnabled(jboolean verticalScrollBarEnabled) { return call_method<"setVerticalScrollBarEnabled", void>(verticalScrollBarEnabled); }
	void setScrollbarFadingEnabled(jboolean fadeScrollbars) { return call_method<"setScrollbarFadingEnabled", void>(fadeScrollbars); }
	jboolean isScrollbarFadingEnabled() { return call_method<"isScrollbarFadingEnabled", jboolean>(); }
	jint getScrollBarDefaultDelayBeforeFade() { return call_method<"getScrollBarDefaultDelayBeforeFade", jint>(); }
	void setScrollBarDefaultDelayBeforeFade(jint scrollBarDefaultDelayBeforeFade) { return call_method<"setScrollBarDefaultDelayBeforeFade", void>(scrollBarDefaultDelayBeforeFade); }
	jint getScrollBarFadeDuration() { return call_method<"getScrollBarFadeDuration", jint>(); }
	void setScrollBarFadeDuration(jint scrollBarFadeDuration) { return call_method<"setScrollBarFadeDuration", void>(scrollBarFadeDuration); }
	jint getScrollBarSize() { return call_method<"getScrollBarSize", jint>(); }
	void setScrollBarSize(jint scrollBarSize) { return call_method<"setScrollBarSize", void>(scrollBarSize); }
	void setScrollBarStyle(jint style) { return call_method<"setScrollBarStyle", void>(style); }
	jint getScrollBarStyle() { return call_method<"getScrollBarStyle", jint>(); }
	jboolean canScrollHorizontally(jint direction) { return call_method<"canScrollHorizontally", jboolean>(direction); }
	jboolean canScrollVertically(jint direction) { return call_method<"canScrollVertically", jboolean>(direction); }
	void onScreenStateChanged(jint screenState) { return call_method<"onScreenStateChanged", void>(screenState); }
	void onRtlPropertiesChanged(jint layoutDirection) { return call_method<"onRtlPropertiesChanged", void>(layoutDirection); }
	jboolean canResolveLayoutDirection() { return call_method<"canResolveLayoutDirection", jboolean>(); }
	jboolean isLayoutDirectionResolved() { return call_method<"isLayoutDirectionResolved", jboolean>(); }
	jni::ref<android::os::IBinder> getWindowToken() { return call_method<"getWindowToken", jni::ref<android::os::IBinder>>(); }
	jni::ref<android::view::WindowId> getWindowId() { return call_method<"getWindowId", jni::ref<android::view::WindowId>>(); }
	jni::ref<android::os::IBinder> getApplicationWindowToken() { return call_method<"getApplicationWindowToken", jni::ref<android::os::IBinder>>(); }
	jni::ref<android::view::Display> getDisplay() { return call_method<"getDisplay", jni::ref<android::view::Display>>(); }
	void cancelPendingInputEvents() { return call_method<"cancelPendingInputEvents", void>(); }
	void onCancelPendingInputEvents() { return call_method<"onCancelPendingInputEvents", void>(); }
	void saveHierarchyState(jni::ref<android::util::SparseArray> container) { return call_method<"saveHierarchyState", void>(container); }
	void restoreHierarchyState(jni::ref<android::util::SparseArray> container) { return call_method<"restoreHierarchyState", void>(container); }
	jlong getDrawingTime() { return call_method<"getDrawingTime", jlong>(); }
	void setDuplicateParentStateEnabled(jboolean enabled) { return call_method<"setDuplicateParentStateEnabled", void>(enabled); }
	jboolean isDuplicateParentStateEnabled() { return call_method<"isDuplicateParentStateEnabled", jboolean>(); }
	void setLayerType(jint layerType, jni::ref<android::graphics::Paint> paint) { return call_method<"setLayerType", void>(layerType, paint); }
	void setLayerPaint(jni::ref<android::graphics::Paint> paint) { return call_method<"setLayerPaint", void>(paint); }
	jint getLayerType() { return call_method<"getLayerType", jint>(); }
	void buildLayer() { return call_method<"buildLayer", void>(); }
	void setDrawingCacheEnabled(jboolean enabled) { return call_method<"setDrawingCacheEnabled", void>(enabled); }
	jboolean isDrawingCacheEnabled() { return call_method<"isDrawingCacheEnabled", jboolean>(); }
	jni::ref<android::graphics::Bitmap> getDrawingCache() { return call_method<"getDrawingCache", jni::ref<android::graphics::Bitmap>>(); }
	jni::ref<android::graphics::Bitmap> getDrawingCache(jboolean autoScale) { return call_method<"getDrawingCache", jni::ref<android::graphics::Bitmap>>(autoScale); }
	void destroyDrawingCache() { return call_method<"destroyDrawingCache", void>(); }
	void setDrawingCacheBackgroundColor(jint color) { return call_method<"setDrawingCacheBackgroundColor", void>(color); }
	jint getDrawingCacheBackgroundColor() { return call_method<"getDrawingCacheBackgroundColor", jint>(); }
	void buildDrawingCache() { return call_method<"buildDrawingCache", void>(); }
	void buildDrawingCache(jboolean autoScale) { return call_method<"buildDrawingCache", void>(autoScale); }
	jboolean isInEditMode() { return call_method<"isInEditMode", jboolean>(); }
	jboolean isHardwareAccelerated() { return call_method<"isHardwareAccelerated", jboolean>(); }
	void setClipBounds(jni::ref<android::graphics::Rect> clipBounds) { return call_method<"setClipBounds", void>(clipBounds); }
	jni::ref<android::graphics::Rect> getClipBounds() { return call_method<"getClipBounds", jni::ref<android::graphics::Rect>>(); }
	jboolean getClipBounds(jni::ref<android::graphics::Rect> outRect) { return call_method<"getClipBounds", jboolean>(outRect); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }
	jni::ref<android::view::ViewOverlay> getOverlay() { return call_method<"getOverlay", jni::ref<android::view::ViewOverlay>>(); }
	jint getSolidColor() { return call_method<"getSolidColor", jint>(); }
	jboolean isLayoutRequested() { return call_method<"isLayoutRequested", jboolean>(); }
	void layout(jint l, jint t, jint r, jint b) { return call_method<"layout", void>(l, t, r, b); }
	void setLeftTopRightBottom(jint left, jint top, jint right, jint bottom) { return call_method<"setLeftTopRightBottom", void>(left, top, right, bottom); }
	jni::ref<android::content::res::Resources> getResources() { return call_method<"getResources", jni::ref<android::content::res::Resources>>(); }
	void invalidateDrawable(jni::ref<android::graphics::drawable::Drawable> drawable) { return call_method<"invalidateDrawable", void>(drawable); }
	void scheduleDrawable(jni::ref<android::graphics::drawable::Drawable> who, jni::ref<java::lang::Runnable> what, jlong when) { return call_method<"scheduleDrawable", void>(who, what, when); }
	void unscheduleDrawable(jni::ref<android::graphics::drawable::Drawable> who, jni::ref<java::lang::Runnable> what) { return call_method<"unscheduleDrawable", void>(who, what); }
	void unscheduleDrawable(jni::ref<android::graphics::drawable::Drawable> who) { return call_method<"unscheduleDrawable", void>(who); }
	void drawableHotspotChanged(jfloat x, jfloat y) { return call_method<"drawableHotspotChanged", void>(x, y); }
	void dispatchDrawableHotspotChanged(jfloat x, jfloat y) { return call_method<"dispatchDrawableHotspotChanged", void>(x, y); }
	void refreshDrawableState() { return call_method<"refreshDrawableState", void>(); }
	jni::ref<jni::array<jint>> getDrawableState() { return call_method<"getDrawableState", jni::ref<jni::array<jint>>>(); }
	void jumpDrawablesToCurrentState() { return call_method<"jumpDrawablesToCurrentState", void>(); }
	void setBackgroundColor(jint color) { return call_method<"setBackgroundColor", void>(color); }
	void setBackgroundResource(jint resid) { return call_method<"setBackgroundResource", void>(resid); }
	void setBackground(jni::ref<android::graphics::drawable::Drawable> background) { return call_method<"setBackground", void>(background); }
	void setBackgroundDrawable(jni::ref<android::graphics::drawable::Drawable> background) { return call_method<"setBackgroundDrawable", void>(background); }
	jni::ref<android::graphics::drawable::Drawable> getBackground() { return call_method<"getBackground", jni::ref<android::graphics::drawable::Drawable>>(); }
	void setBackgroundTintList(jni::ref<android::content::res::ColorStateList> tint) { return call_method<"setBackgroundTintList", void>(tint); }
	jni::ref<android::content::res::ColorStateList> getBackgroundTintList() { return call_method<"getBackgroundTintList", jni::ref<android::content::res::ColorStateList>>(); }
	void setBackgroundTintMode(jni::ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<"setBackgroundTintMode", void>(tintMode); }
	void setBackgroundTintBlendMode(jni::ref<android::graphics::BlendMode> blendMode) { return call_method<"setBackgroundTintBlendMode", void>(blendMode); }
	jni::ref<android::graphics::PorterDuff_Mode> getBackgroundTintMode() { return call_method<"getBackgroundTintMode", jni::ref<android::graphics::PorterDuff_Mode>>(); }
	jni::ref<android::graphics::BlendMode> getBackgroundTintBlendMode() { return call_method<"getBackgroundTintBlendMode", jni::ref<android::graphics::BlendMode>>(); }
	jni::ref<android::graphics::drawable::Drawable> getForeground() { return call_method<"getForeground", jni::ref<android::graphics::drawable::Drawable>>(); }
	void setForeground(jni::ref<android::graphics::drawable::Drawable> foreground) { return call_method<"setForeground", void>(foreground); }
	jint getForegroundGravity() { return call_method<"getForegroundGravity", jint>(); }
	void setForegroundGravity(jint gravity) { return call_method<"setForegroundGravity", void>(gravity); }
	void setForegroundTintList(jni::ref<android::content::res::ColorStateList> tint) { return call_method<"setForegroundTintList", void>(tint); }
	jni::ref<android::content::res::ColorStateList> getForegroundTintList() { return call_method<"getForegroundTintList", jni::ref<android::content::res::ColorStateList>>(); }
	void setForegroundTintMode(jni::ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<"setForegroundTintMode", void>(tintMode); }
	void setForegroundTintBlendMode(jni::ref<android::graphics::BlendMode> blendMode) { return call_method<"setForegroundTintBlendMode", void>(blendMode); }
	jni::ref<android::graphics::PorterDuff_Mode> getForegroundTintMode() { return call_method<"getForegroundTintMode", jni::ref<android::graphics::PorterDuff_Mode>>(); }
	jni::ref<android::graphics::BlendMode> getForegroundTintBlendMode() { return call_method<"getForegroundTintBlendMode", jni::ref<android::graphics::BlendMode>>(); }
	void onDrawForeground(jni::ref<android::graphics::Canvas> canvas) { return call_method<"onDrawForeground", void>(canvas); }
	void setPadding(jint left, jint top, jint right, jint bottom) { return call_method<"setPadding", void>(left, top, right, bottom); }
	void setPaddingRelative(jint start, jint top, jint end, jint bottom) { return call_method<"setPaddingRelative", void>(start, top, end, bottom); }
	jint getSourceLayoutResId() { return call_method<"getSourceLayoutResId", jint>(); }
	jint getPaddingTop() { return call_method<"getPaddingTop", jint>(); }
	jint getPaddingBottom() { return call_method<"getPaddingBottom", jint>(); }
	jint getPaddingLeft() { return call_method<"getPaddingLeft", jint>(); }
	jint getPaddingStart() { return call_method<"getPaddingStart", jint>(); }
	jint getPaddingRight() { return call_method<"getPaddingRight", jint>(); }
	jint getPaddingEnd() { return call_method<"getPaddingEnd", jint>(); }
	jboolean isPaddingRelative() { return call_method<"isPaddingRelative", jboolean>(); }
	void setSelected(jboolean selected) { return call_method<"setSelected", void>(selected); }
	jboolean isSelected() { return call_method<"isSelected", jboolean>(); }
	void setActivated(jboolean activated) { return call_method<"setActivated", void>(activated); }
	jboolean isActivated() { return call_method<"isActivated", jboolean>(); }
	jni::ref<android::view::ViewTreeObserver> getViewTreeObserver() { return call_method<"getViewTreeObserver", jni::ref<android::view::ViewTreeObserver>>(); }
	jni::ref<android::view::View> getRootView() { return call_method<"getRootView", jni::ref<android::view::View>>(); }
	void transformMatrixToGlobal(jni::ref<android::graphics::Matrix> matrix) { return call_method<"transformMatrixToGlobal", void>(matrix); }
	void transformMatrixToLocal(jni::ref<android::graphics::Matrix> matrix) { return call_method<"transformMatrixToLocal", void>(matrix); }
	void getLocationOnScreen(jni::ref<jni::array<jint>> outLocation) { return call_method<"getLocationOnScreen", void>(outLocation); }
	void getLocationInWindow(jni::ref<jni::array<jint>> outLocation) { return call_method<"getLocationInWindow", void>(outLocation); }
	jni::ref<android::view::View> findViewById(jint id) { return call_method<"findViewById", jni::ref<android::view::View>>(id); }
	jni::ref<android::view::View> requireViewById(jint id) { return call_method<"requireViewById", jni::ref<android::view::View>>(id); }
	jni::ref<android::view::View> findViewWithTag(jni::ref<java::lang::Object> tag) { return call_method<"findViewWithTag", jni::ref<android::view::View>>(tag); }
	void setId(jint id) { return call_method<"setId", void>(id); }
	jint getId() { return call_method<"getId", jint>(); }
	jlong getUniqueDrawingId() { return call_method<"getUniqueDrawingId", jlong>(); }
	jni::ref<java::lang::Object> getTag() { return call_method<"getTag", jni::ref<java::lang::Object>>(); }
	void setTag(jni::ref<java::lang::Object> tag) { return call_method<"setTag", void>(tag); }
	jni::ref<java::lang::Object> getTag(jint key) { return call_method<"getTag", jni::ref<java::lang::Object>>(key); }
	void setTag(jint key, jni::ref<java::lang::Object> tag) { return call_method<"setTag", void>(key, tag); }
	jint getBaseline() { return call_method<"getBaseline", jint>(); }
	jboolean isInLayout() { return call_method<"isInLayout", jboolean>(); }
	void requestLayout() { return call_method<"requestLayout", void>(); }
	void forceLayout() { return call_method<"forceLayout", void>(); }
	void measure(jint widthMeasureSpec, jint heightMeasureSpec) { return call_method<"measure", void>(widthMeasureSpec, heightMeasureSpec); }
	static jint combineMeasuredStates(jint curState, jint newState) { return call_static_method<"combineMeasuredStates", jint>(curState, newState); }
	static jint resolveSize(jint size, jint measureSpec) { return call_static_method<"resolveSize", jint>(size, measureSpec); }
	static jint resolveSizeAndState(jint size, jint measureSpec, jint childMeasuredState) { return call_static_method<"resolveSizeAndState", jint>(size, measureSpec, childMeasuredState); }
	static jint getDefaultSize(jint size, jint measureSpec) { return call_static_method<"getDefaultSize", jint>(size, measureSpec); }
	jint getMinimumHeight() { return call_method<"getMinimumHeight", jint>(); }
	void setMinimumHeight(jint minHeight) { return call_method<"setMinimumHeight", void>(minHeight); }
	jint getMinimumWidth() { return call_method<"getMinimumWidth", jint>(); }
	void setMinimumWidth(jint minWidth) { return call_method<"setMinimumWidth", void>(minWidth); }
	jni::ref<android::view::animation::Animation> getAnimation() { return call_method<"getAnimation", jni::ref<android::view::animation::Animation>>(); }
	void startAnimation(jni::ref<android::view::animation::Animation> animation) { return call_method<"startAnimation", void>(animation); }
	void clearAnimation() { return call_method<"clearAnimation", void>(); }
	void setAnimation(jni::ref<android::view::animation::Animation> animation) { return call_method<"setAnimation", void>(animation); }
	void playSoundEffect(jint soundConstant) { return call_method<"playSoundEffect", void>(soundConstant); }
	jboolean performHapticFeedback(jint feedbackConstant) { return call_method<"performHapticFeedback", jboolean>(feedbackConstant); }
	jboolean performHapticFeedback(jint feedbackConstant, jint flags) { return call_method<"performHapticFeedback", jboolean>(feedbackConstant, flags); }
	void setSystemUiVisibility(jint visibility) { return call_method<"setSystemUiVisibility", void>(visibility); }
	jint getSystemUiVisibility() { return call_method<"getSystemUiVisibility", jint>(); }
	jint getWindowSystemUiVisibility() { return call_method<"getWindowSystemUiVisibility", jint>(); }
	void onWindowSystemUiVisibilityChanged(jint visible) { return call_method<"onWindowSystemUiVisibilityChanged", void>(visible); }
	void dispatchWindowSystemUiVisiblityChanged(jint visible) { return call_method<"dispatchWindowSystemUiVisiblityChanged", void>(visible); }
	void setOnSystemUiVisibilityChangeListener(jni::ref<android::view::View_OnSystemUiVisibilityChangeListener> l) { return call_method<"setOnSystemUiVisibilityChangeListener", void>(l); }
	void dispatchSystemUiVisibilityChanged(jint visibility) { return call_method<"dispatchSystemUiVisibilityChanged", void>(visibility); }
	jboolean startDrag(jni::ref<android::content::ClipData> data, jni::ref<android::view::View_DragShadowBuilder> shadowBuilder, jni::ref<java::lang::Object> myLocalState, jint flags) { return call_method<"startDrag", jboolean>(data, shadowBuilder, myLocalState, flags); }
	jboolean startDragAndDrop(jni::ref<android::content::ClipData> data, jni::ref<android::view::View_DragShadowBuilder> shadowBuilder, jni::ref<java::lang::Object> myLocalState, jint flags) { return call_method<"startDragAndDrop", jboolean>(data, shadowBuilder, myLocalState, flags); }
	void cancelDragAndDrop() { return call_method<"cancelDragAndDrop", void>(); }
	void updateDragShadow(jni::ref<android::view::View_DragShadowBuilder> shadowBuilder) { return call_method<"updateDragShadow", void>(shadowBuilder); }
	jboolean onDragEvent(jni::ref<android::view::DragEvent> event) { return call_method<"onDragEvent", jboolean>(event); }
	jboolean dispatchDragEvent(jni::ref<android::view::DragEvent> event) { return call_method<"dispatchDragEvent", jboolean>(event); }
	static jni::ref<android::view::View> inflate(jni::ref<android::content::Context> context, jint resource, jni::ref<android::view::ViewGroup> root) { return call_static_method<"inflate", jni::ref<android::view::View>>(context, resource, root); }
	jint getOverScrollMode() { return call_method<"getOverScrollMode", jint>(); }
	void setOverScrollMode(jint overScrollMode) { return call_method<"setOverScrollMode", void>(overScrollMode); }
	void setNestedScrollingEnabled(jboolean enabled) { return call_method<"setNestedScrollingEnabled", void>(enabled); }
	jboolean isNestedScrollingEnabled() { return call_method<"isNestedScrollingEnabled", jboolean>(); }
	jboolean startNestedScroll(jint axes) { return call_method<"startNestedScroll", jboolean>(axes); }
	void stopNestedScroll() { return call_method<"stopNestedScroll", void>(); }
	jboolean hasNestedScrollingParent() { return call_method<"hasNestedScrollingParent", jboolean>(); }
	jboolean dispatchNestedScroll(jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed, jni::ref<jni::array<jint>> offsetInWindow) { return call_method<"dispatchNestedScroll", jboolean>(dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow); }
	jboolean dispatchNestedPreScroll(jint dx, jint dy, jni::ref<jni::array<jint>> consumed, jni::ref<jni::array<jint>> offsetInWindow) { return call_method<"dispatchNestedPreScroll", jboolean>(dx, dy, consumed, offsetInWindow); }
	jboolean dispatchNestedFling(jfloat velocityX, jfloat velocityY, jboolean consumed) { return call_method<"dispatchNestedFling", jboolean>(velocityX, velocityY, consumed); }
	jboolean dispatchNestedPreFling(jfloat velocityX, jfloat velocityY) { return call_method<"dispatchNestedPreFling", jboolean>(velocityX, velocityY); }
	void setTextDirection(jint textDirection) { return call_method<"setTextDirection", void>(textDirection); }
	jint getTextDirection() { return call_method<"getTextDirection", jint>(); }
	jboolean canResolveTextDirection() { return call_method<"canResolveTextDirection", jboolean>(); }
	jboolean isTextDirectionResolved() { return call_method<"isTextDirectionResolved", jboolean>(); }
	void setTextAlignment(jint textAlignment) { return call_method<"setTextAlignment", void>(textAlignment); }
	jint getTextAlignment() { return call_method<"getTextAlignment", jint>(); }
	jboolean canResolveTextAlignment() { return call_method<"canResolveTextAlignment", jboolean>(); }
	jboolean isTextAlignmentResolved() { return call_method<"isTextAlignmentResolved", jboolean>(); }
	static jint generateViewId() { return call_static_method<"generateViewId", jint>(); }
	jni::ref<android::view::PointerIcon> onResolvePointerIcon(jni::ref<android::view::MotionEvent> event, jint pointerIndex) { return call_method<"onResolvePointerIcon", jni::ref<android::view::PointerIcon>>(event, pointerIndex); }
	void setPointerIcon(jni::ref<android::view::PointerIcon> pointerIcon) { return call_method<"setPointerIcon", void>(pointerIcon); }
	jni::ref<android::view::PointerIcon> getPointerIcon() { return call_method<"getPointerIcon", jni::ref<android::view::PointerIcon>>(); }
	jboolean hasPointerCapture() { return call_method<"hasPointerCapture", jboolean>(); }
	void requestPointerCapture() { return call_method<"requestPointerCapture", void>(); }
	void releasePointerCapture() { return call_method<"releasePointerCapture", void>(); }
	void onPointerCaptureChange(jboolean hasCapture) { return call_method<"onPointerCaptureChange", void>(hasCapture); }
	void dispatchPointerCaptureChanged(jboolean hasCapture) { return call_method<"dispatchPointerCaptureChanged", void>(hasCapture); }
	jboolean onCapturedPointerEvent(jni::ref<android::view::MotionEvent> event) { return call_method<"onCapturedPointerEvent", jboolean>(event); }
	void setOnCapturedPointerListener(jni::ref<android::view::View_OnCapturedPointerListener> l) { return call_method<"setOnCapturedPointerListener", void>(l); }
	jni::ref<android::view::ViewPropertyAnimator> animate() { return call_method<"animate", jni::ref<android::view::ViewPropertyAnimator>>(); }
	void setTransitionName(jni::ref<java::lang::String> transitionName) { return call_method<"setTransitionName", void>(transitionName); }
	jni::ref<java::lang::String> getTransitionName() { return call_method<"getTransitionName", jni::ref<java::lang::String>>(); }
	void setTooltipText(jni::ref<java::lang::CharSequence> tooltipText) { return call_method<"setTooltipText", void>(tooltipText); }
	jni::ref<java::lang::CharSequence> getTooltipText() { return call_method<"getTooltipText", jni::ref<java::lang::CharSequence>>(); }
	void addOnUnhandledKeyEventListener(jni::ref<android::view::View_OnUnhandledKeyEventListener> listener) { return call_method<"addOnUnhandledKeyEventListener", void>(listener); }
	void removeOnUnhandledKeyEventListener(jni::ref<android::view::View_OnUnhandledKeyEventListener> listener) { return call_method<"removeOnUnhandledKeyEventListener", void>(listener); }

protected:

	View(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_VIEW
