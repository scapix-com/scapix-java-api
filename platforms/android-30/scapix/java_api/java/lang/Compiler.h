// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_COMPILER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_COMPILER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Compiler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Compiler>
{
	static constexpr fixed_string class_name = "java/lang/Compiler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_COMPILER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_COMPILER)
#define SCAPIX_JAVA_API_JAVA_LANG_COMPILER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Compiler : public jni::object_base<"java/lang/Compiler",
	java::lang::Object>
{
public:

	static jboolean compileClass(jni::ref<java::lang::Class> classToCompile) { return call_static_method<"compileClass", jboolean>(classToCompile); }
	static jboolean compileClasses(jni::ref<java::lang::String> nameRoot) { return call_static_method<"compileClasses", jboolean>(nameRoot); }
	static jni::ref<java::lang::Object> command(jni::ref<java::lang::Object> cmd) { return call_static_method<"command", jni::ref<java::lang::Object>>(cmd); }
	static void enable() { return call_static_method<"enable", void>(); }
	static void disable() { return call_static_method<"disable", void>(); }

protected:

	Compiler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_COMPILER
