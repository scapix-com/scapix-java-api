// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_REGEX_PATTERN_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_REGEX_PATTERN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::regex { class Pattern; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::regex::Pattern>
{
	static constexpr fixed_string class_name = "java/util/regex/Pattern";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_REGEX_PATTERN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_REGEX_PATTERN)
#define SCAPIX_JAVA_API_JAVA_UTIL_REGEX_PATTERN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/Predicate.h>
#include <scapix/java_api/java/util/regex/Matcher.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::regex::Pattern : public jni::object_base<"java/util/regex/Pattern",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jint CANON_EQ() { return get_static_field<"CANON_EQ", jint>(); }
	static jint CASE_INSENSITIVE() { return get_static_field<"CASE_INSENSITIVE", jint>(); }
	static jint COMMENTS() { return get_static_field<"COMMENTS", jint>(); }
	static jint DOTALL() { return get_static_field<"DOTALL", jint>(); }
	static jint LITERAL() { return get_static_field<"LITERAL", jint>(); }
	static jint MULTILINE() { return get_static_field<"MULTILINE", jint>(); }
	static jint UNICODE_CASE() { return get_static_field<"UNICODE_CASE", jint>(); }
	static jint UNICODE_CHARACTER_CLASS() { return get_static_field<"UNICODE_CHARACTER_CLASS", jint>(); }
	static jint UNIX_LINES() { return get_static_field<"UNIX_LINES", jint>(); }

	static jni::ref<java::util::regex::Pattern> compile(jni::ref<java::lang::String> regex) { return call_static_method<"compile", jni::ref<java::util::regex::Pattern>>(regex); }
	static jni::ref<java::util::regex::Pattern> compile(jni::ref<java::lang::String> regex, jint flags) { return call_static_method<"compile", jni::ref<java::util::regex::Pattern>>(regex, flags); }
	jni::ref<java::lang::String> pattern() { return call_method<"pattern", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::regex::Matcher> matcher(jni::ref<java::lang::CharSequence> input) { return call_method<"matcher", jni::ref<java::util::regex::Matcher>>(input); }
	jint flags() { return call_method<"flags", jint>(); }
	static jboolean matches(jni::ref<java::lang::String> regex, jni::ref<java::lang::CharSequence> input) { return call_static_method<"matches", jboolean>(regex, input); }
	jni::ref<jni::array<java::lang::String>> split(jni::ref<java::lang::CharSequence> input, jint limit) { return call_method<"split", jni::ref<jni::array<java::lang::String>>>(input, limit); }
	jni::ref<jni::array<java::lang::String>> split(jni::ref<java::lang::CharSequence> input) { return call_method<"split", jni::ref<jni::array<java::lang::String>>>(input); }
	static jni::ref<java::lang::String> quote(jni::ref<java::lang::String> s) { return call_static_method<"quote", jni::ref<java::lang::String>>(s); }
	jni::ref<java::util::function::Predicate> asPredicate() { return call_method<"asPredicate", jni::ref<java::util::function::Predicate>>(); }
	jni::ref<java::util::stream::Stream> splitAsStream(jni::ref<java::lang::CharSequence> input) { return call_method<"splitAsStream", jni::ref<java::util::stream::Stream>>(input); }

protected:

	Pattern(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_REGEX_PATTERN
