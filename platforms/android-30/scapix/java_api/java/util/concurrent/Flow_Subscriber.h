// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class Flow_Subscriber; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::Flow_Subscriber>
{
	static constexpr fixed_string class_name = "java/util/concurrent/Flow$Subscriber";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/concurrent/Flow_Subscription.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::Flow_Subscriber : public jni::object_base<"java/util/concurrent/Flow$Subscriber",
	java::lang::Object>
{
public:

	void onSubscribe(jni::ref<java::util::concurrent::Flow_Subscription> p1) { return call_method<"onSubscribe", void>(p1); }
	void onNext(jni::ref<java::lang::Object> p1) { return call_method<"onNext", void>(p1); }
	void onError(jni::ref<java::lang::Throwable> p1) { return call_method<"onError", void>(p1); }
	void onComplete() { return call_method<"onComplete", void>(); }

protected:

	Flow_Subscriber(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_FLOW_SUBSCRIBER
