// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_MAP_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_MAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Map; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Map>
{
	static constexpr fixed_string class_name = "java/util/Map";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_MAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_MAP)
#define SCAPIX_JAVA_API_JAVA_UTIL_MAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Map_Entry.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Function.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Map : public jni::object_base<"java/util/Map",
	java::lang::Object>
{
public:

	using Entry = Map_Entry;

	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean containsKey(jni::ref<java::lang::Object> p1) { return call_method<"containsKey", jboolean>(p1); }
	jboolean containsValue(jni::ref<java::lang::Object> p1) { return call_method<"containsValue", jboolean>(p1); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"put", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> remove(jni::ref<java::lang::Object> p1) { return call_method<"remove", jni::ref<java::lang::Object>>(p1); }
	void putAll(jni::ref<java::util::Map> p1) { return call_method<"putAll", void>(p1); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Collection> values() { return call_method<"values", jni::ref<java::util::Collection>>(); }
	jni::ref<java::util::Set> entrySet() { return call_method<"entrySet", jni::ref<java::util::Set>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::Object> getOrDefault(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> defaultValue) { return call_method<"getOrDefault", jni::ref<java::lang::Object>>(key, defaultValue); }
	void forEach(jni::ref<java::util::function::BiConsumer> action) { return call_method<"forEach", void>(action); }
	void replaceAll(jni::ref<java::util::function::BiFunction> function) { return call_method<"replaceAll", void>(function); }
	jni::ref<java::lang::Object> putIfAbsent(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"putIfAbsent", jni::ref<java::lang::Object>>(key, value); }
	jboolean remove(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"remove", jboolean>(key, value); }
	jboolean replace(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> oldValue, jni::ref<java::lang::Object> newValue) { return call_method<"replace", jboolean>(key, oldValue, newValue); }
	jni::ref<java::lang::Object> replace(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"replace", jni::ref<java::lang::Object>>(key, value); }
	jni::ref<java::lang::Object> computeIfAbsent(jni::ref<java::lang::Object> key, jni::ref<java::util::function::Function> mappingFunction) { return call_method<"computeIfAbsent", jni::ref<java::lang::Object>>(key, mappingFunction); }
	jni::ref<java::lang::Object> computeIfPresent(jni::ref<java::lang::Object> key, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"computeIfPresent", jni::ref<java::lang::Object>>(key, remappingFunction); }
	jni::ref<java::lang::Object> compute(jni::ref<java::lang::Object> key, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"compute", jni::ref<java::lang::Object>>(key, remappingFunction); }
	jni::ref<java::lang::Object> merge(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"merge", jni::ref<java::lang::Object>>(key, value, remappingFunction); }
	static jni::ref<java::util::Map> of() { return call_static_method<"of", jni::ref<java::util::Map>>(); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2, jni::ref<java::lang::Object> k3, jni::ref<java::lang::Object> v3) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2, k3, v3); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2, jni::ref<java::lang::Object> k3, jni::ref<java::lang::Object> v3, jni::ref<java::lang::Object> k4, jni::ref<java::lang::Object> v4) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2, jni::ref<java::lang::Object> k3, jni::ref<java::lang::Object> v3, jni::ref<java::lang::Object> k4, jni::ref<java::lang::Object> v4, jni::ref<java::lang::Object> k5, jni::ref<java::lang::Object> v5) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2, jni::ref<java::lang::Object> k3, jni::ref<java::lang::Object> v3, jni::ref<java::lang::Object> k4, jni::ref<java::lang::Object> v4, jni::ref<java::lang::Object> k5, jni::ref<java::lang::Object> v5, jni::ref<java::lang::Object> k6, jni::ref<java::lang::Object> v6) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2, jni::ref<java::lang::Object> k3, jni::ref<java::lang::Object> v3, jni::ref<java::lang::Object> k4, jni::ref<java::lang::Object> v4, jni::ref<java::lang::Object> k5, jni::ref<java::lang::Object> v5, jni::ref<java::lang::Object> k6, jni::ref<java::lang::Object> v6, jni::ref<java::lang::Object> k7, jni::ref<java::lang::Object> v7) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2, jni::ref<java::lang::Object> k3, jni::ref<java::lang::Object> v3, jni::ref<java::lang::Object> k4, jni::ref<java::lang::Object> v4, jni::ref<java::lang::Object> k5, jni::ref<java::lang::Object> v5, jni::ref<java::lang::Object> k6, jni::ref<java::lang::Object> v6, jni::ref<java::lang::Object> k7, jni::ref<java::lang::Object> v7, jni::ref<java::lang::Object> k8, jni::ref<java::lang::Object> v8) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2, jni::ref<java::lang::Object> k3, jni::ref<java::lang::Object> v3, jni::ref<java::lang::Object> k4, jni::ref<java::lang::Object> v4, jni::ref<java::lang::Object> k5, jni::ref<java::lang::Object> v5, jni::ref<java::lang::Object> k6, jni::ref<java::lang::Object> v6, jni::ref<java::lang::Object> k7, jni::ref<java::lang::Object> v7, jni::ref<java::lang::Object> k8, jni::ref<java::lang::Object> v8, jni::ref<java::lang::Object> k9, jni::ref<java::lang::Object> v9) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8, k9, v9); }
	static jni::ref<java::util::Map> of(jni::ref<java::lang::Object> k1, jni::ref<java::lang::Object> v1, jni::ref<java::lang::Object> k2, jni::ref<java::lang::Object> v2, jni::ref<java::lang::Object> k3, jni::ref<java::lang::Object> v3, jni::ref<java::lang::Object> k4, jni::ref<java::lang::Object> v4, jni::ref<java::lang::Object> k5, jni::ref<java::lang::Object> v5, jni::ref<java::lang::Object> k6, jni::ref<java::lang::Object> v6, jni::ref<java::lang::Object> k7, jni::ref<java::lang::Object> v7, jni::ref<java::lang::Object> k8, jni::ref<java::lang::Object> v8, jni::ref<java::lang::Object> k9, jni::ref<java::lang::Object> v9, jni::ref<java::lang::Object> k10, jni::ref<java::lang::Object> v10) { return call_static_method<"of", jni::ref<java::util::Map>>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8, k9, v9, k10, v10); }
	static jni::ref<java::util::Map> ofEntries(jni::ref<jni::array<java::util::Map_Entry>> entries) { return call_static_method<"ofEntries", jni::ref<java::util::Map>>(entries); }
	static jni::ref<java::util::Map_Entry> entry(jni::ref<java::lang::Object> k, jni::ref<java::lang::Object> v) { return call_static_method<"entry", jni::ref<java::util::Map_Entry>>(k, v); }

protected:

	Map(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_MAP
