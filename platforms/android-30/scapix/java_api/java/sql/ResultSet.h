// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Wrapper.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_RESULTSET_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_RESULTSET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class ResultSet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::ResultSet>
{
	static constexpr fixed_string class_name = "java/sql/ResultSet";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::sql::Wrapper, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_RESULTSET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_RESULTSET)
#define SCAPIX_JAVA_API_JAVA_SQL_RESULTSET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/Ref.h>
#include <scapix/java_api/java/sql/ResultSetMetaData.h>
#include <scapix/java_api/java/sql/RowId.h>
#include <scapix/java_api/java/sql/SQLWarning.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Statement.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Calendar.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::ResultSet : public jni::object_base<"java/sql/ResultSet",
	java::lang::Object,
	java::sql::Wrapper,
	java::lang::AutoCloseable>
{
public:

	static jint CLOSE_CURSORS_AT_COMMIT() { return get_static_field<"CLOSE_CURSORS_AT_COMMIT", jint>(); }
	static jint CONCUR_READ_ONLY() { return get_static_field<"CONCUR_READ_ONLY", jint>(); }
	static jint CONCUR_UPDATABLE() { return get_static_field<"CONCUR_UPDATABLE", jint>(); }
	static jint FETCH_FORWARD() { return get_static_field<"FETCH_FORWARD", jint>(); }
	static jint FETCH_REVERSE() { return get_static_field<"FETCH_REVERSE", jint>(); }
	static jint FETCH_UNKNOWN() { return get_static_field<"FETCH_UNKNOWN", jint>(); }
	static jint HOLD_CURSORS_OVER_COMMIT() { return get_static_field<"HOLD_CURSORS_OVER_COMMIT", jint>(); }
	static jint TYPE_FORWARD_ONLY() { return get_static_field<"TYPE_FORWARD_ONLY", jint>(); }
	static jint TYPE_SCROLL_INSENSITIVE() { return get_static_field<"TYPE_SCROLL_INSENSITIVE", jint>(); }
	static jint TYPE_SCROLL_SENSITIVE() { return get_static_field<"TYPE_SCROLL_SENSITIVE", jint>(); }

	jboolean next() { return call_method<"next", jboolean>(); }
	void close() { return call_method<"close", void>(); }
	jboolean wasNull() { return call_method<"wasNull", jboolean>(); }
	jni::ref<java::lang::String> getString(jint p1) { return call_method<"getString", jni::ref<java::lang::String>>(p1); }
	jboolean getBoolean(jint p1) { return call_method<"getBoolean", jboolean>(p1); }
	jbyte getByte(jint p1) { return call_method<"getByte", jbyte>(p1); }
	jshort getShort(jint p1) { return call_method<"getShort", jshort>(p1); }
	jint getInt(jint p1) { return call_method<"getInt", jint>(p1); }
	jlong getLong(jint p1) { return call_method<"getLong", jlong>(p1); }
	jfloat getFloat(jint p1) { return call_method<"getFloat", jfloat>(p1); }
	jdouble getDouble(jint p1) { return call_method<"getDouble", jdouble>(p1); }
	jni::ref<java::math::BigDecimal> getBigDecimal(jint p1, jint p2) { return call_method<"getBigDecimal", jni::ref<java::math::BigDecimal>>(p1, p2); }
	jni::ref<jni::array<jbyte>> getBytes(jint p1) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<java::sql::Date> getDate(jint p1) { return call_method<"getDate", jni::ref<java::sql::Date>>(p1); }
	jni::ref<java::sql::Time> getTime(jint p1) { return call_method<"getTime", jni::ref<java::sql::Time>>(p1); }
	jni::ref<java::sql::Timestamp> getTimestamp(jint p1) { return call_method<"getTimestamp", jni::ref<java::sql::Timestamp>>(p1); }
	jni::ref<java::io::InputStream> getAsciiStream(jint p1) { return call_method<"getAsciiStream", jni::ref<java::io::InputStream>>(p1); }
	jni::ref<java::io::InputStream> getUnicodeStream(jint p1) { return call_method<"getUnicodeStream", jni::ref<java::io::InputStream>>(p1); }
	jni::ref<java::io::InputStream> getBinaryStream(jint p1) { return call_method<"getBinaryStream", jni::ref<java::io::InputStream>>(p1); }
	jni::ref<java::lang::String> getString(jni::ref<java::lang::String> p1) { return call_method<"getString", jni::ref<java::lang::String>>(p1); }
	jboolean getBoolean(jni::ref<java::lang::String> p1) { return call_method<"getBoolean", jboolean>(p1); }
	jbyte getByte(jni::ref<java::lang::String> p1) { return call_method<"getByte", jbyte>(p1); }
	jshort getShort(jni::ref<java::lang::String> p1) { return call_method<"getShort", jshort>(p1); }
	jint getInt(jni::ref<java::lang::String> p1) { return call_method<"getInt", jint>(p1); }
	jlong getLong(jni::ref<java::lang::String> p1) { return call_method<"getLong", jlong>(p1); }
	jfloat getFloat(jni::ref<java::lang::String> p1) { return call_method<"getFloat", jfloat>(p1); }
	jdouble getDouble(jni::ref<java::lang::String> p1) { return call_method<"getDouble", jdouble>(p1); }
	jni::ref<java::math::BigDecimal> getBigDecimal(jni::ref<java::lang::String> p1, jint p2) { return call_method<"getBigDecimal", jni::ref<java::math::BigDecimal>>(p1, p2); }
	jni::ref<jni::array<jbyte>> getBytes(jni::ref<java::lang::String> p1) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<java::sql::Date> getDate(jni::ref<java::lang::String> p1) { return call_method<"getDate", jni::ref<java::sql::Date>>(p1); }
	jni::ref<java::sql::Time> getTime(jni::ref<java::lang::String> p1) { return call_method<"getTime", jni::ref<java::sql::Time>>(p1); }
	jni::ref<java::sql::Timestamp> getTimestamp(jni::ref<java::lang::String> p1) { return call_method<"getTimestamp", jni::ref<java::sql::Timestamp>>(p1); }
	jni::ref<java::io::InputStream> getAsciiStream(jni::ref<java::lang::String> p1) { return call_method<"getAsciiStream", jni::ref<java::io::InputStream>>(p1); }
	jni::ref<java::io::InputStream> getUnicodeStream(jni::ref<java::lang::String> p1) { return call_method<"getUnicodeStream", jni::ref<java::io::InputStream>>(p1); }
	jni::ref<java::io::InputStream> getBinaryStream(jni::ref<java::lang::String> p1) { return call_method<"getBinaryStream", jni::ref<java::io::InputStream>>(p1); }
	jni::ref<java::sql::SQLWarning> getWarnings() { return call_method<"getWarnings", jni::ref<java::sql::SQLWarning>>(); }
	void clearWarnings() { return call_method<"clearWarnings", void>(); }
	jni::ref<java::lang::String> getCursorName() { return call_method<"getCursorName", jni::ref<java::lang::String>>(); }
	jni::ref<java::sql::ResultSetMetaData> getMetaData() { return call_method<"getMetaData", jni::ref<java::sql::ResultSetMetaData>>(); }
	jni::ref<java::lang::Object> getObject(jint p1) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> getObject(jni::ref<java::lang::String> p1) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1); }
	jint findColumn(jni::ref<java::lang::String> p1) { return call_method<"findColumn", jint>(p1); }
	jni::ref<java::io::Reader> getCharacterStream(jint p1) { return call_method<"getCharacterStream", jni::ref<java::io::Reader>>(p1); }
	jni::ref<java::io::Reader> getCharacterStream(jni::ref<java::lang::String> p1) { return call_method<"getCharacterStream", jni::ref<java::io::Reader>>(p1); }
	jni::ref<java::math::BigDecimal> getBigDecimal(jint p1) { return call_method<"getBigDecimal", jni::ref<java::math::BigDecimal>>(p1); }
	jni::ref<java::math::BigDecimal> getBigDecimal(jni::ref<java::lang::String> p1) { return call_method<"getBigDecimal", jni::ref<java::math::BigDecimal>>(p1); }
	jboolean isBeforeFirst() { return call_method<"isBeforeFirst", jboolean>(); }
	jboolean isAfterLast() { return call_method<"isAfterLast", jboolean>(); }
	jboolean isFirst() { return call_method<"isFirst", jboolean>(); }
	jboolean isLast() { return call_method<"isLast", jboolean>(); }
	void beforeFirst() { return call_method<"beforeFirst", void>(); }
	void afterLast() { return call_method<"afterLast", void>(); }
	jboolean first() { return call_method<"first", jboolean>(); }
	jboolean last() { return call_method<"last", jboolean>(); }
	jint getRow() { return call_method<"getRow", jint>(); }
	jboolean absolute(jint p1) { return call_method<"absolute", jboolean>(p1); }
	jboolean relative(jint p1) { return call_method<"relative", jboolean>(p1); }
	jboolean previous() { return call_method<"previous", jboolean>(); }
	void setFetchDirection(jint p1) { return call_method<"setFetchDirection", void>(p1); }
	jint getFetchDirection() { return call_method<"getFetchDirection", jint>(); }
	void setFetchSize(jint p1) { return call_method<"setFetchSize", void>(p1); }
	jint getFetchSize() { return call_method<"getFetchSize", jint>(); }
	jint getType() { return call_method<"getType", jint>(); }
	jint getConcurrency() { return call_method<"getConcurrency", jint>(); }
	jboolean rowUpdated() { return call_method<"rowUpdated", jboolean>(); }
	jboolean rowInserted() { return call_method<"rowInserted", jboolean>(); }
	jboolean rowDeleted() { return call_method<"rowDeleted", jboolean>(); }
	void updateNull(jint p1) { return call_method<"updateNull", void>(p1); }
	void updateBoolean(jint p1, jboolean p2) { return call_method<"updateBoolean", void>(p1, p2); }
	void updateByte(jint p1, jbyte p2) { return call_method<"updateByte", void>(p1, p2); }
	void updateShort(jint p1, jshort p2) { return call_method<"updateShort", void>(p1, p2); }
	void updateInt(jint p1, jint p2) { return call_method<"updateInt", void>(p1, p2); }
	void updateLong(jint p1, jlong p2) { return call_method<"updateLong", void>(p1, p2); }
	void updateFloat(jint p1, jfloat p2) { return call_method<"updateFloat", void>(p1, p2); }
	void updateDouble(jint p1, jdouble p2) { return call_method<"updateDouble", void>(p1, p2); }
	void updateBigDecimal(jint p1, jni::ref<java::math::BigDecimal> p2) { return call_method<"updateBigDecimal", void>(p1, p2); }
	void updateString(jint p1, jni::ref<java::lang::String> p2) { return call_method<"updateString", void>(p1, p2); }
	void updateBytes(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"updateBytes", void>(p1, p2); }
	void updateDate(jint p1, jni::ref<java::sql::Date> p2) { return call_method<"updateDate", void>(p1, p2); }
	void updateTime(jint p1, jni::ref<java::sql::Time> p2) { return call_method<"updateTime", void>(p1, p2); }
	void updateTimestamp(jint p1, jni::ref<java::sql::Timestamp> p2) { return call_method<"updateTimestamp", void>(p1, p2); }
	void updateAsciiStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"updateAsciiStream", void>(p1, p2, p3); }
	void updateBinaryStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"updateBinaryStream", void>(p1, p2, p3); }
	void updateCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jint p3) { return call_method<"updateCharacterStream", void>(p1, p2, p3); }
	void updateObject(jint p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"updateObject", void>(p1, p2, p3); }
	void updateObject(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"updateObject", void>(p1, p2); }
	void updateNull(jni::ref<java::lang::String> p1) { return call_method<"updateNull", void>(p1); }
	void updateBoolean(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"updateBoolean", void>(p1, p2); }
	void updateByte(jni::ref<java::lang::String> p1, jbyte p2) { return call_method<"updateByte", void>(p1, p2); }
	void updateShort(jni::ref<java::lang::String> p1, jshort p2) { return call_method<"updateShort", void>(p1, p2); }
	void updateInt(jni::ref<java::lang::String> p1, jint p2) { return call_method<"updateInt", void>(p1, p2); }
	void updateLong(jni::ref<java::lang::String> p1, jlong p2) { return call_method<"updateLong", void>(p1, p2); }
	void updateFloat(jni::ref<java::lang::String> p1, jfloat p2) { return call_method<"updateFloat", void>(p1, p2); }
	void updateDouble(jni::ref<java::lang::String> p1, jdouble p2) { return call_method<"updateDouble", void>(p1, p2); }
	void updateBigDecimal(jni::ref<java::lang::String> p1, jni::ref<java::math::BigDecimal> p2) { return call_method<"updateBigDecimal", void>(p1, p2); }
	void updateString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"updateString", void>(p1, p2); }
	void updateBytes(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"updateBytes", void>(p1, p2); }
	void updateDate(jni::ref<java::lang::String> p1, jni::ref<java::sql::Date> p2) { return call_method<"updateDate", void>(p1, p2); }
	void updateTime(jni::ref<java::lang::String> p1, jni::ref<java::sql::Time> p2) { return call_method<"updateTime", void>(p1, p2); }
	void updateTimestamp(jni::ref<java::lang::String> p1, jni::ref<java::sql::Timestamp> p2) { return call_method<"updateTimestamp", void>(p1, p2); }
	void updateAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"updateAsciiStream", void>(p1, p2, p3); }
	void updateBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"updateBinaryStream", void>(p1, p2, p3); }
	void updateCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jint p3) { return call_method<"updateCharacterStream", void>(p1, p2, p3); }
	void updateObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"updateObject", void>(p1, p2, p3); }
	void updateObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"updateObject", void>(p1, p2); }
	void insertRow() { return call_method<"insertRow", void>(); }
	void updateRow() { return call_method<"updateRow", void>(); }
	void deleteRow() { return call_method<"deleteRow", void>(); }
	void refreshRow() { return call_method<"refreshRow", void>(); }
	void cancelRowUpdates() { return call_method<"cancelRowUpdates", void>(); }
	void moveToInsertRow() { return call_method<"moveToInsertRow", void>(); }
	void moveToCurrentRow() { return call_method<"moveToCurrentRow", void>(); }
	jni::ref<java::sql::Statement> getStatement() { return call_method<"getStatement", jni::ref<java::sql::Statement>>(); }
	jni::ref<java::lang::Object> getObject(jint p1, jni::ref<java::util::Map> p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::sql::Ref> getRef(jint p1) { return call_method<"getRef", jni::ref<java::sql::Ref>>(p1); }
	jni::ref<java::sql::Blob> getBlob(jint p1) { return call_method<"getBlob", jni::ref<java::sql::Blob>>(p1); }
	jni::ref<java::sql::Clob> getClob(jint p1) { return call_method<"getClob", jni::ref<java::sql::Clob>>(p1); }
	jni::ref<java::sql::Array> getArray(jint p1) { return call_method<"getArray", jni::ref<java::sql::Array>>(p1); }
	jni::ref<java::lang::Object> getObject(jni::ref<java::lang::String> p1, jni::ref<java::util::Map> p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::sql::Ref> getRef(jni::ref<java::lang::String> p1) { return call_method<"getRef", jni::ref<java::sql::Ref>>(p1); }
	jni::ref<java::sql::Blob> getBlob(jni::ref<java::lang::String> p1) { return call_method<"getBlob", jni::ref<java::sql::Blob>>(p1); }
	jni::ref<java::sql::Clob> getClob(jni::ref<java::lang::String> p1) { return call_method<"getClob", jni::ref<java::sql::Clob>>(p1); }
	jni::ref<java::sql::Array> getArray(jni::ref<java::lang::String> p1) { return call_method<"getArray", jni::ref<java::sql::Array>>(p1); }
	jni::ref<java::sql::Date> getDate(jint p1, jni::ref<java::util::Calendar> p2) { return call_method<"getDate", jni::ref<java::sql::Date>>(p1, p2); }
	jni::ref<java::sql::Date> getDate(jni::ref<java::lang::String> p1, jni::ref<java::util::Calendar> p2) { return call_method<"getDate", jni::ref<java::sql::Date>>(p1, p2); }
	jni::ref<java::sql::Time> getTime(jint p1, jni::ref<java::util::Calendar> p2) { return call_method<"getTime", jni::ref<java::sql::Time>>(p1, p2); }
	jni::ref<java::sql::Time> getTime(jni::ref<java::lang::String> p1, jni::ref<java::util::Calendar> p2) { return call_method<"getTime", jni::ref<java::sql::Time>>(p1, p2); }
	jni::ref<java::sql::Timestamp> getTimestamp(jint p1, jni::ref<java::util::Calendar> p2) { return call_method<"getTimestamp", jni::ref<java::sql::Timestamp>>(p1, p2); }
	jni::ref<java::sql::Timestamp> getTimestamp(jni::ref<java::lang::String> p1, jni::ref<java::util::Calendar> p2) { return call_method<"getTimestamp", jni::ref<java::sql::Timestamp>>(p1, p2); }
	jni::ref<java::net::URL> getURL(jint p1) { return call_method<"getURL", jni::ref<java::net::URL>>(p1); }
	jni::ref<java::net::URL> getURL(jni::ref<java::lang::String> p1) { return call_method<"getURL", jni::ref<java::net::URL>>(p1); }
	void updateRef(jint p1, jni::ref<java::sql::Ref> p2) { return call_method<"updateRef", void>(p1, p2); }
	void updateRef(jni::ref<java::lang::String> p1, jni::ref<java::sql::Ref> p2) { return call_method<"updateRef", void>(p1, p2); }
	void updateBlob(jint p1, jni::ref<java::sql::Blob> p2) { return call_method<"updateBlob", void>(p1, p2); }
	void updateBlob(jni::ref<java::lang::String> p1, jni::ref<java::sql::Blob> p2) { return call_method<"updateBlob", void>(p1, p2); }
	void updateClob(jint p1, jni::ref<java::sql::Clob> p2) { return call_method<"updateClob", void>(p1, p2); }
	void updateClob(jni::ref<java::lang::String> p1, jni::ref<java::sql::Clob> p2) { return call_method<"updateClob", void>(p1, p2); }
	void updateArray(jint p1, jni::ref<java::sql::Array> p2) { return call_method<"updateArray", void>(p1, p2); }
	void updateArray(jni::ref<java::lang::String> p1, jni::ref<java::sql::Array> p2) { return call_method<"updateArray", void>(p1, p2); }
	jni::ref<java::sql::RowId> getRowId(jint p1) { return call_method<"getRowId", jni::ref<java::sql::RowId>>(p1); }
	jni::ref<java::sql::RowId> getRowId(jni::ref<java::lang::String> p1) { return call_method<"getRowId", jni::ref<java::sql::RowId>>(p1); }
	void updateRowId(jint p1, jni::ref<java::sql::RowId> p2) { return call_method<"updateRowId", void>(p1, p2); }
	void updateRowId(jni::ref<java::lang::String> p1, jni::ref<java::sql::RowId> p2) { return call_method<"updateRowId", void>(p1, p2); }
	jint getHoldability() { return call_method<"getHoldability", jint>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	void updateNString(jint p1, jni::ref<java::lang::String> p2) { return call_method<"updateNString", void>(p1, p2); }
	void updateNString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"updateNString", void>(p1, p2); }
	void updateNClob(jint p1, jni::ref<java::sql::NClob> p2) { return call_method<"updateNClob", void>(p1, p2); }
	void updateNClob(jni::ref<java::lang::String> p1, jni::ref<java::sql::NClob> p2) { return call_method<"updateNClob", void>(p1, p2); }
	jni::ref<java::sql::NClob> getNClob(jint p1) { return call_method<"getNClob", jni::ref<java::sql::NClob>>(p1); }
	jni::ref<java::sql::NClob> getNClob(jni::ref<java::lang::String> p1) { return call_method<"getNClob", jni::ref<java::sql::NClob>>(p1); }
	jni::ref<java::sql::SQLXML> getSQLXML(jint p1) { return call_method<"getSQLXML", jni::ref<java::sql::SQLXML>>(p1); }
	jni::ref<java::sql::SQLXML> getSQLXML(jni::ref<java::lang::String> p1) { return call_method<"getSQLXML", jni::ref<java::sql::SQLXML>>(p1); }
	void updateSQLXML(jint p1, jni::ref<java::sql::SQLXML> p2) { return call_method<"updateSQLXML", void>(p1, p2); }
	void updateSQLXML(jni::ref<java::lang::String> p1, jni::ref<java::sql::SQLXML> p2) { return call_method<"updateSQLXML", void>(p1, p2); }
	jni::ref<java::lang::String> getNString(jint p1) { return call_method<"getNString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNString(jni::ref<java::lang::String> p1) { return call_method<"getNString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::io::Reader> getNCharacterStream(jint p1) { return call_method<"getNCharacterStream", jni::ref<java::io::Reader>>(p1); }
	jni::ref<java::io::Reader> getNCharacterStream(jni::ref<java::lang::String> p1) { return call_method<"getNCharacterStream", jni::ref<java::io::Reader>>(p1); }
	void updateNCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"updateNCharacterStream", void>(p1, p2, p3); }
	void updateNCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"updateNCharacterStream", void>(p1, p2, p3); }
	void updateAsciiStream(jint p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"updateAsciiStream", void>(p1, p2, p3); }
	void updateBinaryStream(jint p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"updateBinaryStream", void>(p1, p2, p3); }
	void updateCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"updateCharacterStream", void>(p1, p2, p3); }
	void updateAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"updateAsciiStream", void>(p1, p2, p3); }
	void updateBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"updateBinaryStream", void>(p1, p2, p3); }
	void updateCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"updateCharacterStream", void>(p1, p2, p3); }
	void updateBlob(jint p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"updateBlob", void>(p1, p2, p3); }
	void updateBlob(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"updateBlob", void>(p1, p2, p3); }
	void updateClob(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"updateClob", void>(p1, p2, p3); }
	void updateClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"updateClob", void>(p1, p2, p3); }
	void updateNClob(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"updateNClob", void>(p1, p2, p3); }
	void updateNClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"updateNClob", void>(p1, p2, p3); }
	void updateNCharacterStream(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"updateNCharacterStream", void>(p1, p2); }
	void updateNCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"updateNCharacterStream", void>(p1, p2); }
	void updateAsciiStream(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"updateAsciiStream", void>(p1, p2); }
	void updateBinaryStream(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"updateBinaryStream", void>(p1, p2); }
	void updateCharacterStream(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"updateCharacterStream", void>(p1, p2); }
	void updateAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"updateAsciiStream", void>(p1, p2); }
	void updateBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"updateBinaryStream", void>(p1, p2); }
	void updateCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"updateCharacterStream", void>(p1, p2); }
	void updateBlob(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"updateBlob", void>(p1, p2); }
	void updateBlob(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"updateBlob", void>(p1, p2); }
	void updateClob(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"updateClob", void>(p1, p2); }
	void updateClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"updateClob", void>(p1, p2); }
	void updateNClob(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"updateNClob", void>(p1, p2); }
	void updateNClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"updateNClob", void>(p1, p2); }

protected:

	ResultSet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_RESULTSET
