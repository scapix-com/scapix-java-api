// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_JAVA_SECURITY_CRYPTOPRIMITIVE_FWD
#define SCAPIX_JAVA_API_JAVA_SECURITY_CRYPTOPRIMITIVE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::security { class CryptoPrimitive; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::security::CryptoPrimitive>
{
	static constexpr fixed_string class_name = "java/security/CryptoPrimitive";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_CRYPTOPRIMITIVE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SECURITY_CRYPTOPRIMITIVE)
#define SCAPIX_JAVA_API_JAVA_SECURITY_CRYPTOPRIMITIVE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::security::CryptoPrimitive : public jni::object_base<"java/security/CryptoPrimitive",
	java::lang::Enum>
{
public:

	static jni::ref<java::security::CryptoPrimitive> MESSAGE_DIGEST() { return get_static_field<"MESSAGE_DIGEST", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> SECURE_RANDOM() { return get_static_field<"SECURE_RANDOM", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> BLOCK_CIPHER() { return get_static_field<"BLOCK_CIPHER", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> STREAM_CIPHER() { return get_static_field<"STREAM_CIPHER", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> MAC() { return get_static_field<"MAC", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> KEY_WRAP() { return get_static_field<"KEY_WRAP", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> PUBLIC_KEY_ENCRYPTION() { return get_static_field<"PUBLIC_KEY_ENCRYPTION", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> SIGNATURE() { return get_static_field<"SIGNATURE", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> KEY_ENCAPSULATION() { return get_static_field<"KEY_ENCAPSULATION", jni::ref<java::security::CryptoPrimitive>>(); }
	static jni::ref<java::security::CryptoPrimitive> KEY_AGREEMENT() { return get_static_field<"KEY_AGREEMENT", jni::ref<java::security::CryptoPrimitive>>(); }

	static jni::ref<jni::array<java::security::CryptoPrimitive>> values() { return call_static_method<"values", jni::ref<jni::array<java::security::CryptoPrimitive>>>(); }
	static jni::ref<java::security::CryptoPrimitive> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<java::security::CryptoPrimitive>>(name); }

protected:

	CryptoPrimitive(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_CRYPTOPRIMITIVE
