// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Panel.h>

#ifndef SCAPIX_JAVA_API_JAVA_APPLET_APPLET_FWD
#define SCAPIX_JAVA_API_JAVA_APPLET_APPLET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::applet { class Applet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::applet::Applet>
{
	static constexpr fixed_string class_name = "java/applet/Applet";
	using base_classes = std::tuple<scapix::java_api::java::awt::Panel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_APPLET_APPLET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_APPLET_APPLET)
#define SCAPIX_JAVA_API_JAVA_APPLET_APPLET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/applet/AppletContext.h>
#include <scapix/java_api/java/applet/AppletStub.h>
#include <scapix/java_api/java/applet/AudioClip.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::applet::Applet : public jni::object_base<"java/applet/Applet",
	java::awt::Panel>
{
public:

	static jni::ref<java::applet::Applet> new_object() { return base_::new_object(); }
	void setStub(jni::ref<java::applet::AppletStub> p1) { return call_method<"setStub", void>(p1); }
	jboolean isActive() { return call_method<"isActive", jboolean>(); }
	jni::ref<java::net::URL> getDocumentBase() { return call_method<"getDocumentBase", jni::ref<java::net::URL>>(); }
	jni::ref<java::net::URL> getCodeBase() { return call_method<"getCodeBase", jni::ref<java::net::URL>>(); }
	jni::ref<java::lang::String> getParameter(jni::ref<java::lang::String> p1) { return call_method<"getParameter", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::applet::AppletContext> getAppletContext() { return call_method<"getAppletContext", jni::ref<java::applet::AppletContext>>(); }
	void resize(jint p1, jint p2) { return call_method<"resize", void>(p1, p2); }
	void resize(jni::ref<java::awt::Dimension> p1) { return call_method<"resize", void>(p1); }
	jboolean isValidateRoot() { return call_method<"isValidateRoot", jboolean>(); }
	void showStatus(jni::ref<java::lang::String> p1) { return call_method<"showStatus", void>(p1); }
	jni::ref<java::awt::Image> getImage(jni::ref<java::net::URL> p1) { return call_method<"getImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> getImage(jni::ref<java::net::URL> p1, jni::ref<java::lang::String> p2) { return call_method<"getImage", jni::ref<java::awt::Image>>(p1, p2); }
	static jni::ref<java::applet::AudioClip> newAudioClip(jni::ref<java::net::URL> p1) { return call_static_method<"newAudioClip", jni::ref<java::applet::AudioClip>>(p1); }
	jni::ref<java::applet::AudioClip> getAudioClip(jni::ref<java::net::URL> p1) { return call_method<"getAudioClip", jni::ref<java::applet::AudioClip>>(p1); }
	jni::ref<java::applet::AudioClip> getAudioClip(jni::ref<java::net::URL> p1, jni::ref<java::lang::String> p2) { return call_method<"getAudioClip", jni::ref<java::applet::AudioClip>>(p1, p2); }
	jni::ref<java::lang::String> getAppletInfo() { return call_method<"getAppletInfo", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	jni::ref<jni::array<jni::array<java::lang::String>>> getParameterInfo() { return call_method<"getParameterInfo", jni::ref<jni::array<jni::array<java::lang::String>>>>(); }
	void play(jni::ref<java::net::URL> p1) { return call_method<"play", void>(p1); }
	void play(jni::ref<java::net::URL> p1, jni::ref<java::lang::String> p2) { return call_method<"play", void>(p1, p2); }
	void init() { return call_method<"init", void>(); }
	void start() { return call_method<"start", void>(); }
	void stop() { return call_method<"stop", void>(); }
	void destroy() { return call_method<"destroy", void>(); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	Applet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_APPLET_APPLET
