// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Thread_UncaughtExceptionHandler.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_THREADGROUP_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_THREADGROUP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class ThreadGroup; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::ThreadGroup>
{
	static constexpr fixed_string class_name = "java/lang/ThreadGroup";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Thread_UncaughtExceptionHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_THREADGROUP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_THREADGROUP)
#define SCAPIX_JAVA_API_JAVA_LANG_THREADGROUP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/lang/Throwable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::ThreadGroup : public jni::object_base<"java/lang/ThreadGroup",
	java::lang::Object,
	java::lang::Thread_UncaughtExceptionHandler>
{
public:

	static jni::ref<java::lang::ThreadGroup> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::ThreadGroup> new_object(jni::ref<java::lang::ThreadGroup> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::ThreadGroup> getParent() { return call_method<"getParent", jni::ref<java::lang::ThreadGroup>>(); }
	jint getMaxPriority() { return call_method<"getMaxPriority", jint>(); }
	jboolean isDaemon() { return call_method<"isDaemon", jboolean>(); }
	jboolean isDestroyed() { return call_method<"isDestroyed", jboolean>(); }
	void setDaemon(jboolean p1) { return call_method<"setDaemon", void>(p1); }
	void setMaxPriority(jint p1) { return call_method<"setMaxPriority", void>(p1); }
	jboolean parentOf(jni::ref<java::lang::ThreadGroup> p1) { return call_method<"parentOf", jboolean>(p1); }
	void checkAccess() { return call_method<"checkAccess", void>(); }
	jint activeCount() { return call_method<"activeCount", jint>(); }
	jint enumerate(jni::ref<jni::array<java::lang::Thread>> p1) { return call_method<"enumerate", jint>(p1); }
	jint enumerate(jni::ref<jni::array<java::lang::Thread>> p1, jboolean p2) { return call_method<"enumerate", jint>(p1, p2); }
	jint activeGroupCount() { return call_method<"activeGroupCount", jint>(); }
	jint enumerate(jni::ref<jni::array<java::lang::ThreadGroup>> p1) { return call_method<"enumerate", jint>(p1); }
	jint enumerate(jni::ref<jni::array<java::lang::ThreadGroup>> p1, jboolean p2) { return call_method<"enumerate", jint>(p1, p2); }
	void stop() { return call_method<"stop", void>(); }
	void interrupt() { return call_method<"interrupt", void>(); }
	void suspend() { return call_method<"suspend", void>(); }
	void resume() { return call_method<"resume", void>(); }
	void destroy() { return call_method<"destroy", void>(); }
	void list() { return call_method<"list", void>(); }
	void uncaughtException(jni::ref<java::lang::Thread> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"uncaughtException", void>(p1, p2); }
	jboolean allowThreadSuspension(jboolean p1) { return call_method<"allowThreadSuspension", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ThreadGroup(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_THREADGROUP
