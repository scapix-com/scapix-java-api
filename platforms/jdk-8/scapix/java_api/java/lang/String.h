// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/CharSequence.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRING_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class String; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::String>
{
	static constexpr fixed_string class_name = "java/lang/String";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Comparable, scapix::java_api::java::lang::CharSequence>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRING)
#define SCAPIX_JAVA_API_JAVA_LANG_STRING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::String : public jni::object_base<"java/lang/String",
	java::lang::Object,
	java::io::Serializable,
	java::lang::Comparable,
	java::lang::CharSequence>
{
public:

	static jni::ref<java::util::Comparator> CASE_INSENSITIVE_ORDER() { return get_static_field<"CASE_INSENSITIVE_ORDER", jni::ref<java::util::Comparator>>(); }

	static jni::ref<java::lang::String> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jchar>> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jbyte>> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jni::ref<java::lang::String> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jni::ref<java::nio::charset::Charset> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jbyte>> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jbyte>> p1, jni::ref<java::nio::charset::Charset> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::lang::String> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::String> new_object(jni::ref<java::lang::StringBuffer> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::String> new_object(jni::ref<java::lang::StringBuilder> p1) { return base_::new_object(p1); }
	jint length() { return call_method<"length", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jchar charAt(jint p1) { return call_method<"charAt", jchar>(p1); }
	jint codePointAt(jint p1) { return call_method<"codePointAt", jint>(p1); }
	jint codePointBefore(jint p1) { return call_method<"codePointBefore", jint>(p1); }
	jint codePointCount(jint p1, jint p2) { return call_method<"codePointCount", jint>(p1, p2); }
	jint offsetByCodePoints(jint p1, jint p2) { return call_method<"offsetByCodePoints", jint>(p1, p2); }
	void getChars(jint p1, jint p2, jni::ref<jni::array<jchar>> p3, jint p4) { return call_method<"getChars", void>(p1, p2, p3, p4); }
	void getBytes(jint p1, jint p2, jni::ref<jni::array<jbyte>> p3, jint p4) { return call_method<"getBytes", void>(p1, p2, p3, p4); }
	jni::ref<jni::array<jbyte>> getBytes(jni::ref<java::lang::String> p1) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jbyte>> getBytes(jni::ref<java::nio::charset::Charset> p1) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jbyte>> getBytes() { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jboolean contentEquals(jni::ref<java::lang::StringBuffer> p1) { return call_method<"contentEquals", jboolean>(p1); }
	jboolean contentEquals(jni::ref<java::lang::CharSequence> p1) { return call_method<"contentEquals", jboolean>(p1); }
	jboolean equalsIgnoreCase(jni::ref<java::lang::String> p1) { return call_method<"equalsIgnoreCase", jboolean>(p1); }
	jint compareTo(jni::ref<java::lang::String> p1) { return call_method<"compareTo", jint>(p1); }
	jint compareToIgnoreCase(jni::ref<java::lang::String> p1) { return call_method<"compareToIgnoreCase", jint>(p1); }
	jboolean regionMatches(jint p1, jni::ref<java::lang::String> p2, jint p3, jint p4) { return call_method<"regionMatches", jboolean>(p1, p2, p3, p4); }
	jboolean regionMatches(jboolean p1, jint p2, jni::ref<java::lang::String> p3, jint p4, jint p5) { return call_method<"regionMatches", jboolean>(p1, p2, p3, p4, p5); }
	jboolean startsWith(jni::ref<java::lang::String> p1, jint p2) { return call_method<"startsWith", jboolean>(p1, p2); }
	jboolean startsWith(jni::ref<java::lang::String> p1) { return call_method<"startsWith", jboolean>(p1); }
	jboolean endsWith(jni::ref<java::lang::String> p1) { return call_method<"endsWith", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint indexOf(jint p1) { return call_method<"indexOf", jint>(p1); }
	jint indexOf(jint p1, jint p2) { return call_method<"indexOf", jint>(p1, p2); }
	jint lastIndexOf(jint p1) { return call_method<"lastIndexOf", jint>(p1); }
	jint lastIndexOf(jint p1, jint p2) { return call_method<"lastIndexOf", jint>(p1, p2); }
	jint indexOf(jni::ref<java::lang::String> p1) { return call_method<"indexOf", jint>(p1); }
	jint indexOf(jni::ref<java::lang::String> p1, jint p2) { return call_method<"indexOf", jint>(p1, p2); }
	jint lastIndexOf(jni::ref<java::lang::String> p1) { return call_method<"lastIndexOf", jint>(p1); }
	jint lastIndexOf(jni::ref<java::lang::String> p1, jint p2) { return call_method<"lastIndexOf", jint>(p1, p2); }
	jni::ref<java::lang::String> substring(jint p1) { return call_method<"substring", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> substring(jint p1, jint p2) { return call_method<"substring", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::CharSequence> subSequence(jint p1, jint p2) { return call_method<"subSequence", jni::ref<java::lang::CharSequence>>(p1, p2); }
	jni::ref<java::lang::String> concat(jni::ref<java::lang::String> p1) { return call_method<"concat", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> replace(jchar p1, jchar p2) { return call_method<"replace", jni::ref<java::lang::String>>(p1, p2); }
	jboolean matches(jni::ref<java::lang::String> p1) { return call_method<"matches", jboolean>(p1); }
	jboolean contains(jni::ref<java::lang::CharSequence> p1) { return call_method<"contains", jboolean>(p1); }
	jni::ref<java::lang::String> replaceFirst(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"replaceFirst", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> replaceAll(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"replaceAll", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> replace(jni::ref<java::lang::CharSequence> p1, jni::ref<java::lang::CharSequence> p2) { return call_method<"replace", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<jni::array<java::lang::String>> split(jni::ref<java::lang::String> p1, jint p2) { return call_method<"split", jni::ref<jni::array<java::lang::String>>>(p1, p2); }
	jni::ref<jni::array<java::lang::String>> split(jni::ref<java::lang::String> p1) { return call_method<"split", jni::ref<jni::array<java::lang::String>>>(p1); }
	static jni::ref<java::lang::String> join(jni::ref<java::lang::CharSequence> p1, jni::ref<jni::array<java::lang::CharSequence>> p2) { return call_static_method<"join", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> join(jni::ref<java::lang::CharSequence> p1, jni::ref<java::lang::Iterable> p2) { return call_static_method<"join", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> toLowerCase(jni::ref<java::util::Locale> p1) { return call_method<"toLowerCase", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> toLowerCase() { return call_method<"toLowerCase", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toUpperCase(jni::ref<java::util::Locale> p1) { return call_method<"toUpperCase", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> toUpperCase() { return call_method<"toUpperCase", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> trim() { return call_method<"trim", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jchar>> toCharArray() { return call_method<"toCharArray", jni::ref<jni::array<jchar>>>(); }
	static jni::ref<java::lang::String> format(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_static_method<"format", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> format(jni::ref<java::util::Locale> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_static_method<"format", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> valueOf(jni::ref<java::lang::Object> p1) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> valueOf(jni::ref<jni::array<jchar>> p1) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> valueOf(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> copyValueOf(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_static_method<"copyValueOf", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> copyValueOf(jni::ref<jni::array<jchar>> p1) { return call_static_method<"copyValueOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> valueOf(jboolean p1) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> valueOf(jchar p1) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> valueOf(jint p1) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> valueOf(jlong p1) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> valueOf(jfloat p1) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> valueOf(jdouble p1) { return call_static_method<"valueOf", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> intern() { return call_method<"intern", jni::ref<java::lang::String>>(); }

protected:

	String(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRING
