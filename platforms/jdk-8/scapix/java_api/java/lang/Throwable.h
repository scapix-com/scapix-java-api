// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_THROWABLE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_THROWABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Throwable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Throwable>
{
	static constexpr fixed_string class_name = "java/lang/Throwable";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_THROWABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_THROWABLE)
#define SCAPIX_JAVA_API_JAVA_LANG_THROWABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/StackTraceElement.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Throwable : public jni::object_base<"java/lang/Throwable",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::lang::Throwable> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::Throwable> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::Throwable> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::lang::Throwable> new_object(jni::ref<java::lang::Throwable> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::String> getMessage() { return call_method<"getMessage", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getLocalizedMessage() { return call_method<"getLocalizedMessage", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Throwable> getCause() { return call_method<"getCause", jni::ref<java::lang::Throwable>>(); }
	jni::ref<java::lang::Throwable> initCause(jni::ref<java::lang::Throwable> p1) { return call_method<"initCause", jni::ref<java::lang::Throwable>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void printStackTrace() { return call_method<"printStackTrace", void>(); }
	void printStackTrace(jni::ref<java::io::PrintStream> p1) { return call_method<"printStackTrace", void>(p1); }
	void printStackTrace(jni::ref<java::io::PrintWriter> p1) { return call_method<"printStackTrace", void>(p1); }
	jni::ref<java::lang::Throwable> fillInStackTrace() { return call_method<"fillInStackTrace", jni::ref<java::lang::Throwable>>(); }
	jni::ref<jni::array<java::lang::StackTraceElement>> getStackTrace() { return call_method<"getStackTrace", jni::ref<jni::array<java::lang::StackTraceElement>>>(); }
	void setStackTrace(jni::ref<jni::array<java::lang::StackTraceElement>> p1) { return call_method<"setStackTrace", void>(p1); }
	void addSuppressed(jni::ref<java::lang::Throwable> p1) { return call_method<"addSuppressed", void>(p1); }
	jni::ref<jni::array<java::lang::Throwable>> getSuppressed() { return call_method<"getSuppressed", jni::ref<jni::array<java::lang::Throwable>>>(); }

protected:

	Throwable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_THROWABLE
