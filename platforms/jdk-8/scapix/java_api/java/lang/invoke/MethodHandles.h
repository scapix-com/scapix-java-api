// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::invoke { class MethodHandles; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::invoke::MethodHandles>
{
	static constexpr fixed_string class_name = "java/lang/invoke/MethodHandles";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES)
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/lang/reflect/Member.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::invoke::MethodHandles : public jni::object_base<"java/lang/invoke/MethodHandles",
	java::lang::Object>
{
public:

	using Lookup = MethodHandles_Lookup;

	static jni::ref<java::lang::invoke::MethodHandles_Lookup> lookup() { return call_static_method<"lookup", jni::ref<java::lang::invoke::MethodHandles_Lookup>>(); }
	static jni::ref<java::lang::invoke::MethodHandles_Lookup> publicLookup() { return call_static_method<"publicLookup", jni::ref<java::lang::invoke::MethodHandles_Lookup>>(); }
	static jni::ref<java::lang::reflect::Member> reflectAs(jni::ref<java::lang::Class> p1, jni::ref<java::lang::invoke::MethodHandle> p2) { return call_static_method<"reflectAs", jni::ref<java::lang::reflect::Member>>(p1, p2); }
	static jni::ref<java::lang::invoke::MethodHandle> arrayElementGetter(jni::ref<java::lang::Class> p1) { return call_static_method<"arrayElementGetter", jni::ref<java::lang::invoke::MethodHandle>>(p1); }
	static jni::ref<java::lang::invoke::MethodHandle> arrayElementSetter(jni::ref<java::lang::Class> p1) { return call_static_method<"arrayElementSetter", jni::ref<java::lang::invoke::MethodHandle>>(p1); }
	static jni::ref<java::lang::invoke::MethodHandle> spreadInvoker(jni::ref<java::lang::invoke::MethodType> p1, jint p2) { return call_static_method<"spreadInvoker", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2); }
	static jni::ref<java::lang::invoke::MethodHandle> exactInvoker(jni::ref<java::lang::invoke::MethodType> p1) { return call_static_method<"exactInvoker", jni::ref<java::lang::invoke::MethodHandle>>(p1); }
	static jni::ref<java::lang::invoke::MethodHandle> invoker(jni::ref<java::lang::invoke::MethodType> p1) { return call_static_method<"invoker", jni::ref<java::lang::invoke::MethodHandle>>(p1); }
	static jni::ref<java::lang::invoke::MethodHandle> explicitCastArguments(jni::ref<java::lang::invoke::MethodHandle> p1, jni::ref<java::lang::invoke::MethodType> p2) { return call_static_method<"explicitCastArguments", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2); }
	static jni::ref<java::lang::invoke::MethodHandle> permuteArguments(jni::ref<java::lang::invoke::MethodHandle> p1, jni::ref<java::lang::invoke::MethodType> p2, jni::ref<jni::array<jint>> p3) { return call_static_method<"permuteArguments", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2, p3); }
	static jni::ref<java::lang::invoke::MethodHandle> constant(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"constant", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2); }
	static jni::ref<java::lang::invoke::MethodHandle> identity(jni::ref<java::lang::Class> p1) { return call_static_method<"identity", jni::ref<java::lang::invoke::MethodHandle>>(p1); }
	static jni::ref<java::lang::invoke::MethodHandle> insertArguments(jni::ref<java::lang::invoke::MethodHandle> p1, jint p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_static_method<"insertArguments", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2, p3); }
	static jni::ref<java::lang::invoke::MethodHandle> dropArguments(jni::ref<java::lang::invoke::MethodHandle> p1, jint p2, jni::ref<java::util::List> p3) { return call_static_method<"dropArguments", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2, p3); }
	static jni::ref<java::lang::invoke::MethodHandle> dropArguments(jni::ref<java::lang::invoke::MethodHandle> p1, jint p2, jni::ref<jni::array<java::lang::Class>> p3) { return call_static_method<"dropArguments", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2, p3); }
	static jni::ref<java::lang::invoke::MethodHandle> filterArguments(jni::ref<java::lang::invoke::MethodHandle> p1, jint p2, jni::ref<jni::array<java::lang::invoke::MethodHandle>> p3) { return call_static_method<"filterArguments", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2, p3); }
	static jni::ref<java::lang::invoke::MethodHandle> collectArguments(jni::ref<java::lang::invoke::MethodHandle> p1, jint p2, jni::ref<java::lang::invoke::MethodHandle> p3) { return call_static_method<"collectArguments", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2, p3); }
	static jni::ref<java::lang::invoke::MethodHandle> filterReturnValue(jni::ref<java::lang::invoke::MethodHandle> p1, jni::ref<java::lang::invoke::MethodHandle> p2) { return call_static_method<"filterReturnValue", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2); }
	static jni::ref<java::lang::invoke::MethodHandle> foldArguments(jni::ref<java::lang::invoke::MethodHandle> p1, jni::ref<java::lang::invoke::MethodHandle> p2) { return call_static_method<"foldArguments", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2); }
	static jni::ref<java::lang::invoke::MethodHandle> guardWithTest(jni::ref<java::lang::invoke::MethodHandle> p1, jni::ref<java::lang::invoke::MethodHandle> p2, jni::ref<java::lang::invoke::MethodHandle> p3) { return call_static_method<"guardWithTest", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2, p3); }
	static jni::ref<java::lang::invoke::MethodHandle> catchException(jni::ref<java::lang::invoke::MethodHandle> p1, jni::ref<java::lang::Class> p2, jni::ref<java::lang::invoke::MethodHandle> p3) { return call_static_method<"catchException", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2, p3); }
	static jni::ref<java::lang::invoke::MethodHandle> throwException(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"throwException", jni::ref<java::lang::invoke::MethodHandle>>(p1, p2); }

protected:

	MethodHandles(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLES
