// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLEINFO_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLEINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::invoke { class MethodHandleInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::invoke::MethodHandleInfo>
{
	static constexpr fixed_string class_name = "java/lang/invoke/MethodHandleInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLEINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLEINFO)
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLEINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/lang/reflect/Member.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::invoke::MethodHandleInfo : public jni::object_base<"java/lang/invoke/MethodHandleInfo",
	java::lang::Object>
{
public:

	static jint REF_getField() { return get_static_field<"REF_getField", jint>(); }
	static jint REF_getStatic() { return get_static_field<"REF_getStatic", jint>(); }
	static jint REF_putField() { return get_static_field<"REF_putField", jint>(); }
	static jint REF_putStatic() { return get_static_field<"REF_putStatic", jint>(); }
	static jint REF_invokeVirtual() { return get_static_field<"REF_invokeVirtual", jint>(); }
	static jint REF_invokeStatic() { return get_static_field<"REF_invokeStatic", jint>(); }
	static jint REF_invokeSpecial() { return get_static_field<"REF_invokeSpecial", jint>(); }
	static jint REF_newInvokeSpecial() { return get_static_field<"REF_newInvokeSpecial", jint>(); }
	static jint REF_invokeInterface() { return get_static_field<"REF_invokeInterface", jint>(); }

	jint getReferenceKind() { return call_method<"getReferenceKind", jint>(); }
	jni::ref<java::lang::Class> getDeclaringClass() { return call_method<"getDeclaringClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::invoke::MethodType> getMethodType() { return call_method<"getMethodType", jni::ref<java::lang::invoke::MethodType>>(); }
	jni::ref<java::lang::reflect::Member> reflectAs(jni::ref<java::lang::Class> p1, jni::ref<java::lang::invoke::MethodHandles_Lookup> p2) { return call_method<"reflectAs", jni::ref<java::lang::reflect::Member>>(p1, p2); }
	jint getModifiers() { return call_method<"getModifiers", jint>(); }
	jboolean isVarArgs() { return call_method<"isVarArgs", jboolean>(); }
	static jni::ref<java::lang::String> referenceKindToString(jint p1) { return call_static_method<"referenceKindToString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jint p1, jni::ref<java::lang::Class> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::invoke::MethodType> p4) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1, p2, p3, p4); }

protected:

	MethodHandleInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_METHODHANDLEINFO
