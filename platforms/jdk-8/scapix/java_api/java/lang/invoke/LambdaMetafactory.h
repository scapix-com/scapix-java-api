// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::invoke { class LambdaMetafactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::invoke::LambdaMetafactory>
{
	static constexpr fixed_string class_name = "java/lang/invoke/LambdaMetafactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY)
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/CallSite.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::invoke::LambdaMetafactory : public jni::object_base<"java/lang/invoke/LambdaMetafactory",
	java::lang::Object>
{
public:

	static jint FLAG_SERIALIZABLE() { return get_static_field<"FLAG_SERIALIZABLE", jint>(); }
	static jint FLAG_MARKERS() { return get_static_field<"FLAG_MARKERS", jint>(); }
	static jint FLAG_BRIDGES() { return get_static_field<"FLAG_BRIDGES", jint>(); }

	static jni::ref<java::lang::invoke::LambdaMetafactory> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::invoke::CallSite> metafactory(jni::ref<java::lang::invoke::MethodHandles_Lookup> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::invoke::MethodType> p3, jni::ref<java::lang::invoke::MethodType> p4, jni::ref<java::lang::invoke::MethodHandle> p5, jni::ref<java::lang::invoke::MethodType> p6) { return call_static_method<"metafactory", jni::ref<java::lang::invoke::CallSite>>(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::lang::invoke::CallSite> altMetafactory(jni::ref<java::lang::invoke::MethodHandles_Lookup> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::invoke::MethodType> p3, jni::ref<jni::array<java::lang::Object>> p4) { return call_static_method<"altMetafactory", jni::ref<java::lang::invoke::CallSite>>(p1, p2, p3, p4); }

protected:

	LambdaMetafactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_LAMBDAMETAFACTORY
