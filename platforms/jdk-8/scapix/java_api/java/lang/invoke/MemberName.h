// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/reflect/Member.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_INVOKE_MEMBERNAME_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_MEMBERNAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::invoke { class MemberName; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::invoke::MemberName>
{
	static constexpr fixed_string class_name = "java/lang/invoke/MemberName";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::reflect::Member, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_MEMBERNAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_INVOKE_MEMBERNAME)
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_MEMBERNAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/IllegalAccessException.h>
#include <scapix/java_api/java/lang/ReflectiveOperationException.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::invoke::MemberName : public jni::object_base<"java/lang/invoke/MemberName",
	java::lang::Object,
	java::lang::reflect::Member,
	java::lang::Cloneable>
{
public:

	jni::ref<java::lang::Class> getDeclaringClass() { return call_method<"getDeclaringClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::ClassLoader> getClassLoader() { return call_method<"getClassLoader", jni::ref<java::lang::ClassLoader>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::invoke::MethodType> getMethodOrFieldType() { return call_method<"getMethodOrFieldType", jni::ref<java::lang::invoke::MethodType>>(); }
	jni::ref<java::lang::invoke::MethodType> getMethodType() { return call_method<"getMethodType", jni::ref<java::lang::invoke::MethodType>>(); }
	jni::ref<java::lang::invoke::MethodType> getInvocationType() { return call_method<"getInvocationType", jni::ref<java::lang::invoke::MethodType>>(); }
	jni::ref<jni::array<java::lang::Class>> getParameterTypes() { return call_method<"getParameterTypes", jni::ref<jni::array<java::lang::Class>>>(); }
	jni::ref<java::lang::Class> getReturnType() { return call_method<"getReturnType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> getFieldType() { return call_method<"getFieldType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Object> getType() { return call_method<"getType", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> getSignature() { return call_method<"getSignature", jni::ref<java::lang::String>>(); }
	jint getModifiers() { return call_method<"getModifiers", jint>(); }
	jbyte getReferenceKind() { return call_method<"getReferenceKind", jbyte>(); }
	jboolean isMethodHandleInvoke() { return call_method<"isMethodHandleInvoke", jboolean>(); }
	static jboolean isMethodHandleInvokeName(jni::ref<java::lang::String> p1) { return call_static_method<"isMethodHandleInvokeName", jboolean>(p1); }
	jboolean isStatic() { return call_method<"isStatic", jboolean>(); }
	jboolean isPublic() { return call_method<"isPublic", jboolean>(); }
	jboolean isPrivate() { return call_method<"isPrivate", jboolean>(); }
	jboolean isProtected() { return call_method<"isProtected", jboolean>(); }
	jboolean isFinal() { return call_method<"isFinal", jboolean>(); }
	jboolean canBeStaticallyBound() { return call_method<"canBeStaticallyBound", jboolean>(); }
	jboolean isVolatile() { return call_method<"isVolatile", jboolean>(); }
	jboolean isAbstract() { return call_method<"isAbstract", jboolean>(); }
	jboolean isNative() { return call_method<"isNative", jboolean>(); }
	jboolean isBridge() { return call_method<"isBridge", jboolean>(); }
	jboolean isVarargs() { return call_method<"isVarargs", jboolean>(); }
	jboolean isSynthetic() { return call_method<"isSynthetic", jboolean>(); }
	jboolean isInvocable() { return call_method<"isInvocable", jboolean>(); }
	jboolean isFieldOrMethod() { return call_method<"isFieldOrMethod", jboolean>(); }
	jboolean isMethod() { return call_method<"isMethod", jboolean>(); }
	jboolean isConstructor() { return call_method<"isConstructor", jboolean>(); }
	jboolean isField() { return call_method<"isField", jboolean>(); }
	jboolean isType() { return call_method<"isType", jboolean>(); }
	jboolean isPackage() { return call_method<"isPackage", jboolean>(); }
	jboolean isCallerSensitive() { return call_method<"isCallerSensitive", jboolean>(); }
	jboolean isAccessibleFrom(jni::ref<java::lang::Class> p1) { return call_method<"isAccessibleFrom", jboolean>(p1); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jni::ref<java::lang::reflect::Method> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jni::ref<java::lang::reflect::Method> p1, jboolean p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::invoke::MemberName> asSpecial() { return call_method<"asSpecial", jni::ref<java::lang::invoke::MemberName>>(); }
	jni::ref<java::lang::invoke::MemberName> asConstructor() { return call_method<"asConstructor", jni::ref<java::lang::invoke::MemberName>>(); }
	jni::ref<java::lang::invoke::MemberName> asNormalOriginal() { return call_method<"asNormalOriginal", jni::ref<java::lang::invoke::MemberName>>(); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jni::ref<java::lang::reflect::Constructor> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jni::ref<java::lang::reflect::Field> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jni::ref<java::lang::reflect::Field> p1, jboolean p2) { return base_::new_object(p1, p2); }
	jboolean isGetter() { return call_method<"isGetter", jboolean>(); }
	jboolean isSetter() { return call_method<"isSetter", jboolean>(); }
	jni::ref<java::lang::invoke::MemberName> asSetter() { return call_method<"asSetter", jni::ref<java::lang::invoke::MemberName>>(); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jni::ref<java::lang::Class> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::invoke::MemberName> getDefinition() { return call_method<"getDefinition", jni::ref<java::lang::invoke::MemberName>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::invoke::MemberName> p1) { return call_method<"equals", jboolean>(p1); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Class> p3, jbyte p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::invoke::MethodType> p3, jbyte p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::lang::invoke::MemberName> new_object(jbyte p1, jni::ref<java::lang::Class> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::Object> p4) { return base_::new_object(p1, p2, p3, p4); }
	jboolean hasReceiverTypeDispatch() { return call_method<"hasReceiverTypeDispatch", jboolean>(); }
	jboolean isResolved() { return call_method<"isResolved", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::IllegalAccessException> makeAccessException(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"makeAccessException", jni::ref<java::lang::IllegalAccessException>>(p1, p2); }
	jni::ref<java::lang::ReflectiveOperationException> makeAccessException() { return call_method<"makeAccessException", jni::ref<java::lang::ReflectiveOperationException>>(); }

protected:

	MemberName(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_MEMBERNAME
