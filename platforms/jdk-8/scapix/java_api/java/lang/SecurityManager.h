// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_SECURITYMANAGER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_SECURITYMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class SecurityManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::SecurityManager>
{
	static constexpr fixed_string class_name = "java/lang/SecurityManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_SECURITYMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_SECURITYMANAGER)
#define SCAPIX_JAVA_API_JAVA_LANG_SECURITYMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/lang/ThreadGroup.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/security/Permission.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::SecurityManager : public jni::object_base<"java/lang/SecurityManager",
	java::lang::Object>
{
public:

	jboolean getInCheck() { return call_method<"getInCheck", jboolean>(); }
	static jni::ref<java::lang::SecurityManager> new_object() { return base_::new_object(); }
	jni::ref<java::lang::Object> getSecurityContext() { return call_method<"getSecurityContext", jni::ref<java::lang::Object>>(); }
	void checkPermission(jni::ref<java::security::Permission> p1) { return call_method<"checkPermission", void>(p1); }
	void checkPermission(jni::ref<java::security::Permission> p1, jni::ref<java::lang::Object> p2) { return call_method<"checkPermission", void>(p1, p2); }
	void checkCreateClassLoader() { return call_method<"checkCreateClassLoader", void>(); }
	void checkAccess(jni::ref<java::lang::Thread> p1) { return call_method<"checkAccess", void>(p1); }
	void checkAccess(jni::ref<java::lang::ThreadGroup> p1) { return call_method<"checkAccess", void>(p1); }
	void checkExit(jint p1) { return call_method<"checkExit", void>(p1); }
	void checkExec(jni::ref<java::lang::String> p1) { return call_method<"checkExec", void>(p1); }
	void checkLink(jni::ref<java::lang::String> p1) { return call_method<"checkLink", void>(p1); }
	void checkRead(jni::ref<java::io::FileDescriptor> p1) { return call_method<"checkRead", void>(p1); }
	void checkRead(jni::ref<java::lang::String> p1) { return call_method<"checkRead", void>(p1); }
	void checkRead(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"checkRead", void>(p1, p2); }
	void checkWrite(jni::ref<java::io::FileDescriptor> p1) { return call_method<"checkWrite", void>(p1); }
	void checkWrite(jni::ref<java::lang::String> p1) { return call_method<"checkWrite", void>(p1); }
	void checkDelete(jni::ref<java::lang::String> p1) { return call_method<"checkDelete", void>(p1); }
	void checkConnect(jni::ref<java::lang::String> p1, jint p2) { return call_method<"checkConnect", void>(p1, p2); }
	void checkConnect(jni::ref<java::lang::String> p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"checkConnect", void>(p1, p2, p3); }
	void checkListen(jint p1) { return call_method<"checkListen", void>(p1); }
	void checkAccept(jni::ref<java::lang::String> p1, jint p2) { return call_method<"checkAccept", void>(p1, p2); }
	void checkMulticast(jni::ref<java::net::InetAddress> p1) { return call_method<"checkMulticast", void>(p1); }
	void checkMulticast(jni::ref<java::net::InetAddress> p1, jbyte p2) { return call_method<"checkMulticast", void>(p1, p2); }
	void checkPropertiesAccess() { return call_method<"checkPropertiesAccess", void>(); }
	void checkPropertyAccess(jni::ref<java::lang::String> p1) { return call_method<"checkPropertyAccess", void>(p1); }
	jboolean checkTopLevelWindow(jni::ref<java::lang::Object> p1) { return call_method<"checkTopLevelWindow", jboolean>(p1); }
	void checkPrintJobAccess() { return call_method<"checkPrintJobAccess", void>(); }
	void checkSystemClipboardAccess() { return call_method<"checkSystemClipboardAccess", void>(); }
	void checkAwtEventQueueAccess() { return call_method<"checkAwtEventQueueAccess", void>(); }
	void checkPackageAccess(jni::ref<java::lang::String> p1) { return call_method<"checkPackageAccess", void>(p1); }
	void checkPackageDefinition(jni::ref<java::lang::String> p1) { return call_method<"checkPackageDefinition", void>(p1); }
	void checkSetFactory() { return call_method<"checkSetFactory", void>(); }
	void checkMemberAccess(jni::ref<java::lang::Class> p1, jint p2) { return call_method<"checkMemberAccess", void>(p1, p2); }
	void checkSecurityAccess(jni::ref<java::lang::String> p1) { return call_method<"checkSecurityAccess", void>(p1); }
	jni::ref<java::lang::ThreadGroup> getThreadGroup() { return call_method<"getThreadGroup", jni::ref<java::lang::ThreadGroup>>(); }

protected:

	SecurityManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_SECURITYMANAGER
