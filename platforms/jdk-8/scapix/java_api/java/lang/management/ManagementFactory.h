// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_MANAGEMENTFACTORY_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_MANAGEMENTFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::management { class ManagementFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::management::ManagementFactory>
{
	static constexpr fixed_string class_name = "java/lang/management/ManagementFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_MANAGEMENTFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_MANAGEMENTFACTORY)
#define SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_MANAGEMENTFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/management/ClassLoadingMXBean.h>
#include <scapix/java_api/java/lang/management/CompilationMXBean.h>
#include <scapix/java_api/java/lang/management/MemoryMXBean.h>
#include <scapix/java_api/java/lang/management/OperatingSystemMXBean.h>
#include <scapix/java_api/java/lang/management/PlatformManagedObject.h>
#include <scapix/java_api/java/lang/management/RuntimeMXBean.h>
#include <scapix/java_api/java/lang/management/ThreadMXBean.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#include <scapix/java_api/javax/management/MBeanServerConnection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::management::ManagementFactory : public jni::object_base<"java/lang/management/ManagementFactory",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> CLASS_LOADING_MXBEAN_NAME() { return get_static_field<"CLASS_LOADING_MXBEAN_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COMPILATION_MXBEAN_NAME() { return get_static_field<"COMPILATION_MXBEAN_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MEMORY_MXBEAN_NAME() { return get_static_field<"MEMORY_MXBEAN_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> OPERATING_SYSTEM_MXBEAN_NAME() { return get_static_field<"OPERATING_SYSTEM_MXBEAN_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RUNTIME_MXBEAN_NAME() { return get_static_field<"RUNTIME_MXBEAN_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> THREAD_MXBEAN_NAME() { return get_static_field<"THREAD_MXBEAN_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE() { return get_static_field<"GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE() { return get_static_field<"MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MEMORY_POOL_MXBEAN_DOMAIN_TYPE() { return get_static_field<"MEMORY_POOL_MXBEAN_DOMAIN_TYPE", jni::ref<java::lang::String>>(); }

	static jni::ref<java::lang::management::ClassLoadingMXBean> getClassLoadingMXBean() { return call_static_method<"getClassLoadingMXBean", jni::ref<java::lang::management::ClassLoadingMXBean>>(); }
	static jni::ref<java::lang::management::MemoryMXBean> getMemoryMXBean() { return call_static_method<"getMemoryMXBean", jni::ref<java::lang::management::MemoryMXBean>>(); }
	static jni::ref<java::lang::management::ThreadMXBean> getThreadMXBean() { return call_static_method<"getThreadMXBean", jni::ref<java::lang::management::ThreadMXBean>>(); }
	static jni::ref<java::lang::management::RuntimeMXBean> getRuntimeMXBean() { return call_static_method<"getRuntimeMXBean", jni::ref<java::lang::management::RuntimeMXBean>>(); }
	static jni::ref<java::lang::management::CompilationMXBean> getCompilationMXBean() { return call_static_method<"getCompilationMXBean", jni::ref<java::lang::management::CompilationMXBean>>(); }
	static jni::ref<java::lang::management::OperatingSystemMXBean> getOperatingSystemMXBean() { return call_static_method<"getOperatingSystemMXBean", jni::ref<java::lang::management::OperatingSystemMXBean>>(); }
	static jni::ref<java::util::List> getMemoryPoolMXBeans() { return call_static_method<"getMemoryPoolMXBeans", jni::ref<java::util::List>>(); }
	static jni::ref<java::util::List> getMemoryManagerMXBeans() { return call_static_method<"getMemoryManagerMXBeans", jni::ref<java::util::List>>(); }
	static jni::ref<java::util::List> getGarbageCollectorMXBeans() { return call_static_method<"getGarbageCollectorMXBeans", jni::ref<java::util::List>>(); }
	static jni::ref<javax::management::MBeanServer> getPlatformMBeanServer() { return call_static_method<"getPlatformMBeanServer", jni::ref<javax::management::MBeanServer>>(); }
	static jni::ref<java::lang::Object> newPlatformMXBeanProxy(jni::ref<javax::management::MBeanServerConnection> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Class> p3) { return call_static_method<"newPlatformMXBeanProxy", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jni::ref<java::lang::management::PlatformManagedObject> getPlatformMXBean(jni::ref<java::lang::Class> p1) { return call_static_method<"getPlatformMXBean", jni::ref<java::lang::management::PlatformManagedObject>>(p1); }
	static jni::ref<java::util::List> getPlatformMXBeans(jni::ref<java::lang::Class> p1) { return call_static_method<"getPlatformMXBeans", jni::ref<java::util::List>>(p1); }
	static jni::ref<java::lang::management::PlatformManagedObject> getPlatformMXBean(jni::ref<javax::management::MBeanServerConnection> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"getPlatformMXBean", jni::ref<java::lang::management::PlatformManagedObject>>(p1, p2); }
	static jni::ref<java::util::List> getPlatformMXBeans(jni::ref<javax::management::MBeanServerConnection> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"getPlatformMXBeans", jni::ref<java::util::List>>(p1, p2); }
	static jni::ref<java::util::Set> getPlatformManagementInterfaces() { return call_static_method<"getPlatformManagementInterfaces", jni::ref<java::util::Set>>(); }

protected:

	ManagementFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_MANAGEMENTFACTORY
