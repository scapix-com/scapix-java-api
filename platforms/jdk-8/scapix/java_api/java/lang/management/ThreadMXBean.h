// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/management/PlatformManagedObject.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_THREADMXBEAN_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_THREADMXBEAN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::management { class ThreadMXBean; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::management::ThreadMXBean>
{
	static constexpr fixed_string class_name = "java/lang/management/ThreadMXBean";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::management::PlatformManagedObject>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_THREADMXBEAN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_THREADMXBEAN)
#define SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_THREADMXBEAN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/management/ThreadInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::management::ThreadMXBean : public jni::object_base<"java/lang/management/ThreadMXBean",
	java::lang::Object,
	java::lang::management::PlatformManagedObject>
{
public:

	jint getThreadCount() { return call_method<"getThreadCount", jint>(); }
	jint getPeakThreadCount() { return call_method<"getPeakThreadCount", jint>(); }
	jlong getTotalStartedThreadCount() { return call_method<"getTotalStartedThreadCount", jlong>(); }
	jint getDaemonThreadCount() { return call_method<"getDaemonThreadCount", jint>(); }
	jni::ref<jni::array<jlong>> getAllThreadIds() { return call_method<"getAllThreadIds", jni::ref<jni::array<jlong>>>(); }
	jni::ref<java::lang::management::ThreadInfo> getThreadInfo(jlong p1) { return call_method<"getThreadInfo", jni::ref<java::lang::management::ThreadInfo>>(p1); }
	jni::ref<jni::array<java::lang::management::ThreadInfo>> getThreadInfo(jni::ref<jni::array<jlong>> p1) { return call_method<"getThreadInfo", jni::ref<jni::array<java::lang::management::ThreadInfo>>>(p1); }
	jni::ref<java::lang::management::ThreadInfo> getThreadInfo(jlong p1, jint p2) { return call_method<"getThreadInfo", jni::ref<java::lang::management::ThreadInfo>>(p1, p2); }
	jni::ref<jni::array<java::lang::management::ThreadInfo>> getThreadInfo(jni::ref<jni::array<jlong>> p1, jint p2) { return call_method<"getThreadInfo", jni::ref<jni::array<java::lang::management::ThreadInfo>>>(p1, p2); }
	jboolean isThreadContentionMonitoringSupported() { return call_method<"isThreadContentionMonitoringSupported", jboolean>(); }
	jboolean isThreadContentionMonitoringEnabled() { return call_method<"isThreadContentionMonitoringEnabled", jboolean>(); }
	void setThreadContentionMonitoringEnabled(jboolean p1) { return call_method<"setThreadContentionMonitoringEnabled", void>(p1); }
	jlong getCurrentThreadCpuTime() { return call_method<"getCurrentThreadCpuTime", jlong>(); }
	jlong getCurrentThreadUserTime() { return call_method<"getCurrentThreadUserTime", jlong>(); }
	jlong getThreadCpuTime(jlong p1) { return call_method<"getThreadCpuTime", jlong>(p1); }
	jlong getThreadUserTime(jlong p1) { return call_method<"getThreadUserTime", jlong>(p1); }
	jboolean isThreadCpuTimeSupported() { return call_method<"isThreadCpuTimeSupported", jboolean>(); }
	jboolean isCurrentThreadCpuTimeSupported() { return call_method<"isCurrentThreadCpuTimeSupported", jboolean>(); }
	jboolean isThreadCpuTimeEnabled() { return call_method<"isThreadCpuTimeEnabled", jboolean>(); }
	void setThreadCpuTimeEnabled(jboolean p1) { return call_method<"setThreadCpuTimeEnabled", void>(p1); }
	jni::ref<jni::array<jlong>> findMonitorDeadlockedThreads() { return call_method<"findMonitorDeadlockedThreads", jni::ref<jni::array<jlong>>>(); }
	void resetPeakThreadCount() { return call_method<"resetPeakThreadCount", void>(); }
	jni::ref<jni::array<jlong>> findDeadlockedThreads() { return call_method<"findDeadlockedThreads", jni::ref<jni::array<jlong>>>(); }
	jboolean isObjectMonitorUsageSupported() { return call_method<"isObjectMonitorUsageSupported", jboolean>(); }
	jboolean isSynchronizerUsageSupported() { return call_method<"isSynchronizerUsageSupported", jboolean>(); }
	jni::ref<jni::array<java::lang::management::ThreadInfo>> getThreadInfo(jni::ref<jni::array<jlong>> p1, jboolean p2, jboolean p3) { return call_method<"getThreadInfo", jni::ref<jni::array<java::lang::management::ThreadInfo>>>(p1, p2, p3); }
	jni::ref<jni::array<java::lang::management::ThreadInfo>> dumpAllThreads(jboolean p1, jboolean p2) { return call_method<"dumpAllThreads", jni::ref<jni::array<java::lang::management::ThreadInfo>>>(p1, p2); }

protected:

	ThreadMXBean(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_MANAGEMENT_THREADMXBEAN
