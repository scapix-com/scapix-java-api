// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/HashMap.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_PROCESSENVIRONMENT_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_PROCESSENVIRONMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class ProcessEnvironment; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::ProcessEnvironment>
{
	static constexpr fixed_string class_name = "java/lang/ProcessEnvironment";
	using base_classes = std::tuple<scapix::java_api::java::util::HashMap>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_PROCESSENVIRONMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_PROCESSENVIRONMENT)
#define SCAPIX_JAVA_API_JAVA_LANG_PROCESSENVIRONMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::ProcessEnvironment : public jni::object_base<"java/lang/ProcessEnvironment",
	java::util::HashMap>
{
public:

	jni::ref<java::lang::String> put(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"put", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> get(jni::ref<java::lang::Object> p1) { return call_method<"get", jni::ref<java::lang::String>>(p1); }
	jboolean containsKey(jni::ref<java::lang::Object> p1) { return call_method<"containsKey", jboolean>(p1); }
	jboolean containsValue(jni::ref<java::lang::Object> p1) { return call_method<"containsValue", jboolean>(p1); }
	jni::ref<java::lang::String> remove(jni::ref<java::lang::Object> p1) { return call_method<"remove", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Collection> values() { return call_method<"values", jni::ref<java::util::Collection>>(); }
	jni::ref<java::util::Set> entrySet() { return call_method<"entrySet", jni::ref<java::util::Set>>(); }

protected:

	ProcessEnvironment(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_PROCESSENVIRONMENT
