// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/AbstractStringBuilder.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/CharSequence.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class StringBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::StringBuilder>
{
	static constexpr fixed_string class_name = "java/lang/StringBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::AbstractStringBuilder, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::CharSequence>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER)
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::StringBuilder : public jni::object_base<"java/lang/StringBuilder",
	java::lang::AbstractStringBuilder,
	java::io::Serializable,
	java::lang::CharSequence>
{
public:

	static jni::ref<java::lang::StringBuilder> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::StringBuilder> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::StringBuilder> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<java::lang::StringBuilder> new_object(jni::ref<java::lang::CharSequence> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::Object> p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::String> p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::StringBuffer> p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::CharSequence> p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::CharSequence> p1, jint p2, jint p3) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<jni::array<jchar>> p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuilder> append(jboolean p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jchar p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jint p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jlong p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jfloat p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> append(jdouble p1) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> appendCodePoint(jint p1) { return call_method<"appendCodePoint", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> delete_(jint p1, jint p2) { return call_method<"delete", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> deleteCharAt(jint p1) { return call_method<"deleteCharAt", jni::ref<java::lang::StringBuilder>>(p1); }
	jni::ref<java::lang::StringBuilder> replace(jint p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"replace", jni::ref<java::lang::StringBuilder>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jni::ref<jni::array<jchar>> p2, jint p3, jint p4) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2, p3, p4); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jni::ref<java::lang::String> p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jni::ref<jni::array<jchar>> p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jni::ref<java::lang::CharSequence> p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jni::ref<java::lang::CharSequence> p2, jint p3, jint p4) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2, p3, p4); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jboolean p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jchar p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jint p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jlong p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jfloat p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jni::ref<java::lang::StringBuilder> insert(jint p1, jdouble p2) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(p1, p2); }
	jint indexOf(jni::ref<java::lang::String> p1) { return call_method<"indexOf", jint>(p1); }
	jint indexOf(jni::ref<java::lang::String> p1, jint p2) { return call_method<"indexOf", jint>(p1, p2); }
	jint lastIndexOf(jni::ref<java::lang::String> p1) { return call_method<"lastIndexOf", jint>(p1); }
	jint lastIndexOf(jni::ref<java::lang::String> p1, jint p2) { return call_method<"lastIndexOf", jint>(p1, p2); }
	jni::ref<java::lang::StringBuilder> reverse() { return call_method<"reverse", jni::ref<java::lang::StringBuilder>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	StringBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER
