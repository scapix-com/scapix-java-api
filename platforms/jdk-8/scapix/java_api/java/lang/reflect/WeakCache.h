// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_WEAKCACHE_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_WEAKCACHE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class WeakCache; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::WeakCache>
{
	static constexpr fixed_string class_name = "java/lang/reflect/WeakCache";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_WEAKCACHE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_WEAKCACHE)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_WEAKCACHE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/function/BiFunction.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::reflect::WeakCache : public jni::object_base<"java/lang/reflect/WeakCache",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::reflect::WeakCache> new_object(jni::ref<java::util::function::BiFunction> p1, jni::ref<java::util::function::BiFunction> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"get", jni::ref<java::lang::Object>>(p1, p2); }
	jboolean containsValue(jni::ref<java::lang::Object> p1) { return call_method<"containsValue", jboolean>(p1); }
	jint size() { return call_method<"size", jint>(); }

protected:

	WeakCache(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_WEAKCACHE
