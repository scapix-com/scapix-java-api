// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/reflect/LangReflectAccess.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class ReflectAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::ReflectAccess>
{
	static constexpr fixed_string class_name = "java/lang/reflect/ReflectAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::reflect::LangReflectAccess>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/lang/reflect/Executable.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/sun/reflect/ConstructorAccessor.h>
#include <scapix/java_api/sun/reflect/MethodAccessor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::reflect::ReflectAccess : public jni::object_base<"java/lang/reflect/ReflectAccess",
	java::lang::Object,
	sun::reflect::LangReflectAccess>
{
public:

	jni::ref<java::lang::reflect::Field> newField(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Class> p3, jint p4, jint p5, jni::ref<java::lang::String> p6, jni::ref<jni::array<jbyte>> p7) { return call_method<"newField", jni::ref<java::lang::reflect::Field>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::lang::reflect::Method> newMethod(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::Class>> p3, jni::ref<java::lang::Class> p4, jni::ref<jni::array<java::lang::Class>> p5, jint p6, jint p7, jni::ref<java::lang::String> p8, jni::ref<jni::array<jbyte>> p9, jni::ref<jni::array<jbyte>> p10, jni::ref<jni::array<jbyte>> p11) { return call_method<"newMethod", jni::ref<java::lang::reflect::Method>>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	jni::ref<java::lang::reflect::Constructor> newConstructor(jni::ref<java::lang::Class> p1, jni::ref<jni::array<java::lang::Class>> p2, jni::ref<jni::array<java::lang::Class>> p3, jint p4, jint p5, jni::ref<java::lang::String> p6, jni::ref<jni::array<jbyte>> p7, jni::ref<jni::array<jbyte>> p8) { return call_method<"newConstructor", jni::ref<java::lang::reflect::Constructor>>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jni::ref<sun::reflect::MethodAccessor> getMethodAccessor(jni::ref<java::lang::reflect::Method> p1) { return call_method<"getMethodAccessor", jni::ref<sun::reflect::MethodAccessor>>(p1); }
	void setMethodAccessor(jni::ref<java::lang::reflect::Method> p1, jni::ref<sun::reflect::MethodAccessor> p2) { return call_method<"setMethodAccessor", void>(p1, p2); }
	jni::ref<sun::reflect::ConstructorAccessor> getConstructorAccessor(jni::ref<java::lang::reflect::Constructor> p1) { return call_method<"getConstructorAccessor", jni::ref<sun::reflect::ConstructorAccessor>>(p1); }
	void setConstructorAccessor(jni::ref<java::lang::reflect::Constructor> p1, jni::ref<sun::reflect::ConstructorAccessor> p2) { return call_method<"setConstructorAccessor", void>(p1, p2); }
	jint getConstructorSlot(jni::ref<java::lang::reflect::Constructor> p1) { return call_method<"getConstructorSlot", jint>(p1); }
	jni::ref<java::lang::String> getConstructorSignature(jni::ref<java::lang::reflect::Constructor> p1) { return call_method<"getConstructorSignature", jni::ref<java::lang::String>>(p1); }
	jni::ref<jni::array<jbyte>> getConstructorAnnotations(jni::ref<java::lang::reflect::Constructor> p1) { return call_method<"getConstructorAnnotations", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jbyte>> getConstructorParameterAnnotations(jni::ref<java::lang::reflect::Constructor> p1) { return call_method<"getConstructorParameterAnnotations", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jbyte>> getExecutableTypeAnnotationBytes(jni::ref<java::lang::reflect::Executable> p1) { return call_method<"getExecutableTypeAnnotationBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<java::lang::reflect::Method> copyMethod(jni::ref<java::lang::reflect::Method> p1) { return call_method<"copyMethod", jni::ref<java::lang::reflect::Method>>(p1); }
	jni::ref<java::lang::reflect::Field> copyField(jni::ref<java::lang::reflect::Field> p1) { return call_method<"copyField", jni::ref<java::lang::reflect::Field>>(p1); }
	jni::ref<java::lang::reflect::Constructor> copyConstructor(jni::ref<java::lang::reflect::Constructor> p1) { return call_method<"copyConstructor", jni::ref<java::lang::reflect::Constructor>>(p1); }

protected:

	ReflectAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_REFLECTACCESS
