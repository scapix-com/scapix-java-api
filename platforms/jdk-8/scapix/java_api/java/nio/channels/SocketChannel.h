// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/spi/AbstractSelectableChannel.h>
#include <scapix/java_api/java/nio/channels/ByteChannel.h>
#include <scapix/java_api/java/nio/channels/ScatteringByteChannel.h>
#include <scapix/java_api/java/nio/channels/GatheringByteChannel.h>
#include <scapix/java_api/java/nio/channels/NetworkChannel.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SOCKETCHANNEL_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SOCKETCHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::channels { class SocketChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::channels::SocketChannel>
{
	static constexpr fixed_string class_name = "java/nio/channels/SocketChannel";
	using base_classes = std::tuple<scapix::java_api::java::nio::channels::spi::AbstractSelectableChannel, scapix::java_api::java::nio::channels::ByteChannel, scapix::java_api::java::nio::channels::ScatteringByteChannel, scapix::java_api::java::nio::channels::GatheringByteChannel, scapix::java_api::java::nio::channels::NetworkChannel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SOCKETCHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SOCKETCHANNEL)
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SOCKETCHANNEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::channels::SocketChannel : public jni::object_base<"java/nio/channels/SocketChannel",
	java::nio::channels::spi::AbstractSelectableChannel,
	java::nio::channels::ByteChannel,
	java::nio::channels::ScatteringByteChannel,
	java::nio::channels::GatheringByteChannel,
	java::nio::channels::NetworkChannel>
{
public:

	static jni::ref<java::nio::channels::SocketChannel> open() { return call_static_method<"open", jni::ref<java::nio::channels::SocketChannel>>(); }
	static jni::ref<java::nio::channels::SocketChannel> open(jni::ref<java::net::SocketAddress> p1) { return call_static_method<"open", jni::ref<java::nio::channels::SocketChannel>>(p1); }
	jint validOps() { return call_method<"validOps", jint>(); }
	jni::ref<java::nio::channels::SocketChannel> bind(jni::ref<java::net::SocketAddress> p1) { return call_method<"bind", jni::ref<java::nio::channels::SocketChannel>>(p1); }
	jni::ref<java::nio::channels::SocketChannel> setOption(jni::ref<java::net::SocketOption> p1, jni::ref<java::lang::Object> p2) { return call_method<"setOption", jni::ref<java::nio::channels::SocketChannel>>(p1, p2); }
	jni::ref<java::nio::channels::SocketChannel> shutdownInput() { return call_method<"shutdownInput", jni::ref<java::nio::channels::SocketChannel>>(); }
	jni::ref<java::nio::channels::SocketChannel> shutdownOutput() { return call_method<"shutdownOutput", jni::ref<java::nio::channels::SocketChannel>>(); }
	jni::ref<java::net::Socket> socket() { return call_method<"socket", jni::ref<java::net::Socket>>(); }
	jboolean isConnected() { return call_method<"isConnected", jboolean>(); }
	jboolean isConnectionPending() { return call_method<"isConnectionPending", jboolean>(); }
	jboolean connect(jni::ref<java::net::SocketAddress> p1) { return call_method<"connect", jboolean>(p1); }
	jboolean finishConnect() { return call_method<"finishConnect", jboolean>(); }
	jni::ref<java::net::SocketAddress> getRemoteAddress() { return call_method<"getRemoteAddress", jni::ref<java::net::SocketAddress>>(); }
	jint read(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"read", jint>(p1); }
	jlong read(jni::ref<jni::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<"read", jlong>(p1, p2, p3); }
	jlong read(jni::ref<jni::array<java::nio::ByteBuffer>> p1) { return call_method<"read", jlong>(p1); }
	jint write(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"write", jint>(p1); }
	jlong write(jni::ref<jni::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<"write", jlong>(p1, p2, p3); }
	jlong write(jni::ref<jni::array<java::nio::ByteBuffer>> p1) { return call_method<"write", jlong>(p1); }
	jni::ref<java::net::SocketAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::SocketAddress>>(); }

protected:

	SocketChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SOCKETCHANNEL
