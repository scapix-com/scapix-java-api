// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/AsynchronousByteChannel.h>
#include <scapix/java_api/java/nio/channels/NetworkChannel.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::channels { class AsynchronousSocketChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::channels::AsynchronousSocketChannel>
{
	static constexpr fixed_string class_name = "java/nio/channels/AsynchronousSocketChannel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::nio::channels::AsynchronousByteChannel, scapix::java_api::java::nio::channels::NetworkChannel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL)
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/channels/AsynchronousChannelGroup.h>
#include <scapix/java_api/java/nio/channels/CompletionHandler.h>
#include <scapix/java_api/java/nio/channels/spi/AsynchronousChannelProvider.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::channels::AsynchronousSocketChannel : public jni::object_base<"java/nio/channels/AsynchronousSocketChannel",
	java::lang::Object,
	java::nio::channels::AsynchronousByteChannel,
	java::nio::channels::NetworkChannel>
{
public:

	jni::ref<java::nio::channels::spi::AsynchronousChannelProvider> provider() { return call_method<"provider", jni::ref<java::nio::channels::spi::AsynchronousChannelProvider>>(); }
	static jni::ref<java::nio::channels::AsynchronousSocketChannel> open(jni::ref<java::nio::channels::AsynchronousChannelGroup> p1) { return call_static_method<"open", jni::ref<java::nio::channels::AsynchronousSocketChannel>>(p1); }
	static jni::ref<java::nio::channels::AsynchronousSocketChannel> open() { return call_static_method<"open", jni::ref<java::nio::channels::AsynchronousSocketChannel>>(); }
	jni::ref<java::nio::channels::AsynchronousSocketChannel> bind(jni::ref<java::net::SocketAddress> p1) { return call_method<"bind", jni::ref<java::nio::channels::AsynchronousSocketChannel>>(p1); }
	jni::ref<java::nio::channels::AsynchronousSocketChannel> setOption(jni::ref<java::net::SocketOption> p1, jni::ref<java::lang::Object> p2) { return call_method<"setOption", jni::ref<java::nio::channels::AsynchronousSocketChannel>>(p1, p2); }
	jni::ref<java::nio::channels::AsynchronousSocketChannel> shutdownInput() { return call_method<"shutdownInput", jni::ref<java::nio::channels::AsynchronousSocketChannel>>(); }
	jni::ref<java::nio::channels::AsynchronousSocketChannel> shutdownOutput() { return call_method<"shutdownOutput", jni::ref<java::nio::channels::AsynchronousSocketChannel>>(); }
	jni::ref<java::net::SocketAddress> getRemoteAddress() { return call_method<"getRemoteAddress", jni::ref<java::net::SocketAddress>>(); }
	void connect(jni::ref<java::net::SocketAddress> p1, jni::ref<java::lang::Object> p2, jni::ref<java::nio::channels::CompletionHandler> p3) { return call_method<"connect", void>(p1, p2, p3); }
	jni::ref<java::util::concurrent::Future> connect(jni::ref<java::net::SocketAddress> p1) { return call_method<"connect", jni::ref<java::util::concurrent::Future>>(p1); }
	void read(jni::ref<java::nio::ByteBuffer> p1, jlong p2, jni::ref<java::util::concurrent::TimeUnit> p3, jni::ref<java::lang::Object> p4, jni::ref<java::nio::channels::CompletionHandler> p5) { return call_method<"read", void>(p1, p2, p3, p4, p5); }
	void read(jni::ref<java::nio::ByteBuffer> p1, jni::ref<java::lang::Object> p2, jni::ref<java::nio::channels::CompletionHandler> p3) { return call_method<"read", void>(p1, p2, p3); }
	jni::ref<java::util::concurrent::Future> read(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"read", jni::ref<java::util::concurrent::Future>>(p1); }
	void read(jni::ref<jni::array<java::nio::ByteBuffer>> p1, jint p2, jint p3, jlong p4, jni::ref<java::util::concurrent::TimeUnit> p5, jni::ref<java::lang::Object> p6, jni::ref<java::nio::channels::CompletionHandler> p7) { return call_method<"read", void>(p1, p2, p3, p4, p5, p6, p7); }
	void write(jni::ref<java::nio::ByteBuffer> p1, jlong p2, jni::ref<java::util::concurrent::TimeUnit> p3, jni::ref<java::lang::Object> p4, jni::ref<java::nio::channels::CompletionHandler> p5) { return call_method<"write", void>(p1, p2, p3, p4, p5); }
	void write(jni::ref<java::nio::ByteBuffer> p1, jni::ref<java::lang::Object> p2, jni::ref<java::nio::channels::CompletionHandler> p3) { return call_method<"write", void>(p1, p2, p3); }
	jni::ref<java::util::concurrent::Future> write(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"write", jni::ref<java::util::concurrent::Future>>(p1); }
	void write(jni::ref<jni::array<java::nio::ByteBuffer>> p1, jint p2, jint p3, jlong p4, jni::ref<java::util::concurrent::TimeUnit> p5, jni::ref<java::lang::Object> p6, jni::ref<java::nio::channels::CompletionHandler> p7) { return call_method<"write", void>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::net::SocketAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::SocketAddress>>(); }

protected:

	AsynchronousSocketChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_ASYNCHRONOUSSOCKETCHANNEL
