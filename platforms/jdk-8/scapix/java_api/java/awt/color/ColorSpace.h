// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_COLOR_COLORSPACE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_COLOR_COLORSPACE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::color { class ColorSpace; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::color::ColorSpace>
{
	static constexpr fixed_string class_name = "java/awt/color/ColorSpace";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_COLOR_COLORSPACE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_COLOR_COLORSPACE)
#define SCAPIX_JAVA_API_JAVA_AWT_COLOR_COLORSPACE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::color::ColorSpace : public jni::object_base<"java/awt/color/ColorSpace",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jint TYPE_XYZ() { return get_static_field<"TYPE_XYZ", jint>(); }
	static jint TYPE_Lab() { return get_static_field<"TYPE_Lab", jint>(); }
	static jint TYPE_Luv() { return get_static_field<"TYPE_Luv", jint>(); }
	static jint TYPE_YCbCr() { return get_static_field<"TYPE_YCbCr", jint>(); }
	static jint TYPE_Yxy() { return get_static_field<"TYPE_Yxy", jint>(); }
	static jint TYPE_RGB() { return get_static_field<"TYPE_RGB", jint>(); }
	static jint TYPE_GRAY() { return get_static_field<"TYPE_GRAY", jint>(); }
	static jint TYPE_HSV() { return get_static_field<"TYPE_HSV", jint>(); }
	static jint TYPE_HLS() { return get_static_field<"TYPE_HLS", jint>(); }
	static jint TYPE_CMYK() { return get_static_field<"TYPE_CMYK", jint>(); }
	static jint TYPE_CMY() { return get_static_field<"TYPE_CMY", jint>(); }
	static jint TYPE_2CLR() { return get_static_field<"TYPE_2CLR", jint>(); }
	static jint TYPE_3CLR() { return get_static_field<"TYPE_3CLR", jint>(); }
	static jint TYPE_4CLR() { return get_static_field<"TYPE_4CLR", jint>(); }
	static jint TYPE_5CLR() { return get_static_field<"TYPE_5CLR", jint>(); }
	static jint TYPE_6CLR() { return get_static_field<"TYPE_6CLR", jint>(); }
	static jint TYPE_7CLR() { return get_static_field<"TYPE_7CLR", jint>(); }
	static jint TYPE_8CLR() { return get_static_field<"TYPE_8CLR", jint>(); }
	static jint TYPE_9CLR() { return get_static_field<"TYPE_9CLR", jint>(); }
	static jint TYPE_ACLR() { return get_static_field<"TYPE_ACLR", jint>(); }
	static jint TYPE_BCLR() { return get_static_field<"TYPE_BCLR", jint>(); }
	static jint TYPE_CCLR() { return get_static_field<"TYPE_CCLR", jint>(); }
	static jint TYPE_DCLR() { return get_static_field<"TYPE_DCLR", jint>(); }
	static jint TYPE_ECLR() { return get_static_field<"TYPE_ECLR", jint>(); }
	static jint TYPE_FCLR() { return get_static_field<"TYPE_FCLR", jint>(); }
	static jint CS_sRGB() { return get_static_field<"CS_sRGB", jint>(); }
	static jint CS_LINEAR_RGB() { return get_static_field<"CS_LINEAR_RGB", jint>(); }
	static jint CS_CIEXYZ() { return get_static_field<"CS_CIEXYZ", jint>(); }
	static jint CS_PYCC() { return get_static_field<"CS_PYCC", jint>(); }
	static jint CS_GRAY() { return get_static_field<"CS_GRAY", jint>(); }

	static jni::ref<java::awt::color::ColorSpace> getInstance(jint p1) { return call_static_method<"getInstance", jni::ref<java::awt::color::ColorSpace>>(p1); }
	jboolean isCS_sRGB() { return call_method<"isCS_sRGB", jboolean>(); }
	jni::ref<jni::array<jfloat>> toRGB(jni::ref<jni::array<jfloat>> p1) { return call_method<"toRGB", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<jni::array<jfloat>> fromRGB(jni::ref<jni::array<jfloat>> p1) { return call_method<"fromRGB", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<jni::array<jfloat>> toCIEXYZ(jni::ref<jni::array<jfloat>> p1) { return call_method<"toCIEXYZ", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<jni::array<jfloat>> fromCIEXYZ(jni::ref<jni::array<jfloat>> p1) { return call_method<"fromCIEXYZ", jni::ref<jni::array<jfloat>>>(p1); }
	jint getType() { return call_method<"getType", jint>(); }
	jint getNumComponents() { return call_method<"getNumComponents", jint>(); }
	jni::ref<java::lang::String> getName(jint p1) { return call_method<"getName", jni::ref<java::lang::String>>(p1); }
	jfloat getMinValue(jint p1) { return call_method<"getMinValue", jfloat>(p1); }
	jfloat getMaxValue(jint p1) { return call_method<"getMaxValue", jfloat>(p1); }

protected:

	ColorSpace(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_COLOR_COLORSPACE
