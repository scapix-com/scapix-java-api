// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHVECTOR_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHVECTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::font { class GlyphVector; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::font::GlyphVector>
{
	static constexpr fixed_string class_name = "java/awt/font/GlyphVector";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHVECTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHVECTOR)
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHVECTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/font/FontRenderContext.h>
#include <scapix/java_api/java/awt/font/GlyphJustificationInfo.h>
#include <scapix/java_api/java/awt/font/GlyphMetrics.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/Point2D.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::font::GlyphVector : public jni::object_base<"java/awt/font/GlyphVector",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jint FLAG_HAS_TRANSFORMS() { return get_static_field<"FLAG_HAS_TRANSFORMS", jint>(); }
	static jint FLAG_HAS_POSITION_ADJUSTMENTS() { return get_static_field<"FLAG_HAS_POSITION_ADJUSTMENTS", jint>(); }
	static jint FLAG_RUN_RTL() { return get_static_field<"FLAG_RUN_RTL", jint>(); }
	static jint FLAG_COMPLEX_GLYPHS() { return get_static_field<"FLAG_COMPLEX_GLYPHS", jint>(); }
	static jint FLAG_MASK() { return get_static_field<"FLAG_MASK", jint>(); }

	static jni::ref<java::awt::font::GlyphVector> new_object() { return base_::new_object(); }
	jni::ref<java::awt::Font> getFont() { return call_method<"getFont", jni::ref<java::awt::Font>>(); }
	jni::ref<java::awt::font::FontRenderContext> getFontRenderContext() { return call_method<"getFontRenderContext", jni::ref<java::awt::font::FontRenderContext>>(); }
	void performDefaultLayout() { return call_method<"performDefaultLayout", void>(); }
	jint getNumGlyphs() { return call_method<"getNumGlyphs", jint>(); }
	jint getGlyphCode(jint p1) { return call_method<"getGlyphCode", jint>(p1); }
	jni::ref<jni::array<jint>> getGlyphCodes(jint p1, jint p2, jni::ref<jni::array<jint>> p3) { return call_method<"getGlyphCodes", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	jint getGlyphCharIndex(jint p1) { return call_method<"getGlyphCharIndex", jint>(p1); }
	jni::ref<jni::array<jint>> getGlyphCharIndices(jint p1, jint p2, jni::ref<jni::array<jint>> p3) { return call_method<"getGlyphCharIndices", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	jni::ref<java::awt::geom::Rectangle2D> getLogicalBounds() { return call_method<"getLogicalBounds", jni::ref<java::awt::geom::Rectangle2D>>(); }
	jni::ref<java::awt::geom::Rectangle2D> getVisualBounds() { return call_method<"getVisualBounds", jni::ref<java::awt::geom::Rectangle2D>>(); }
	jni::ref<java::awt::Rectangle> getPixelBounds(jni::ref<java::awt::font::FontRenderContext> p1, jfloat p2, jfloat p3) { return call_method<"getPixelBounds", jni::ref<java::awt::Rectangle>>(p1, p2, p3); }
	jni::ref<java::awt::Shape> getOutline() { return call_method<"getOutline", jni::ref<java::awt::Shape>>(); }
	jni::ref<java::awt::Shape> getOutline(jfloat p1, jfloat p2) { return call_method<"getOutline", jni::ref<java::awt::Shape>>(p1, p2); }
	jni::ref<java::awt::Shape> getGlyphOutline(jint p1) { return call_method<"getGlyphOutline", jni::ref<java::awt::Shape>>(p1); }
	jni::ref<java::awt::Shape> getGlyphOutline(jint p1, jfloat p2, jfloat p3) { return call_method<"getGlyphOutline", jni::ref<java::awt::Shape>>(p1, p2, p3); }
	jni::ref<java::awt::geom::Point2D> getGlyphPosition(jint p1) { return call_method<"getGlyphPosition", jni::ref<java::awt::geom::Point2D>>(p1); }
	void setGlyphPosition(jint p1, jni::ref<java::awt::geom::Point2D> p2) { return call_method<"setGlyphPosition", void>(p1, p2); }
	jni::ref<java::awt::geom::AffineTransform> getGlyphTransform(jint p1) { return call_method<"getGlyphTransform", jni::ref<java::awt::geom::AffineTransform>>(p1); }
	void setGlyphTransform(jint p1, jni::ref<java::awt::geom::AffineTransform> p2) { return call_method<"setGlyphTransform", void>(p1, p2); }
	jint getLayoutFlags() { return call_method<"getLayoutFlags", jint>(); }
	jni::ref<jni::array<jfloat>> getGlyphPositions(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3) { return call_method<"getGlyphPositions", jni::ref<jni::array<jfloat>>>(p1, p2, p3); }
	jni::ref<java::awt::Shape> getGlyphLogicalBounds(jint p1) { return call_method<"getGlyphLogicalBounds", jni::ref<java::awt::Shape>>(p1); }
	jni::ref<java::awt::Shape> getGlyphVisualBounds(jint p1) { return call_method<"getGlyphVisualBounds", jni::ref<java::awt::Shape>>(p1); }
	jni::ref<java::awt::Rectangle> getGlyphPixelBounds(jint p1, jni::ref<java::awt::font::FontRenderContext> p2, jfloat p3, jfloat p4) { return call_method<"getGlyphPixelBounds", jni::ref<java::awt::Rectangle>>(p1, p2, p3, p4); }
	jni::ref<java::awt::font::GlyphMetrics> getGlyphMetrics(jint p1) { return call_method<"getGlyphMetrics", jni::ref<java::awt::font::GlyphMetrics>>(p1); }
	jni::ref<java::awt::font::GlyphJustificationInfo> getGlyphJustificationInfo(jint p1) { return call_method<"getGlyphJustificationInfo", jni::ref<java::awt::font::GlyphJustificationInfo>>(p1); }
	jboolean equals(jni::ref<java::awt::font::GlyphVector> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	GlyphVector(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHVECTOR
