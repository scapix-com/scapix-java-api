// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTHITINFO_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTHITINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::font { class TextHitInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::font::TextHitInfo>
{
	static constexpr fixed_string class_name = "java/awt/font/TextHitInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTHITINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTHITINFO)
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTHITINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::font::TextHitInfo : public jni::object_base<"java/awt/font/TextHitInfo",
	java::lang::Object>
{
public:

	jint getCharIndex() { return call_method<"getCharIndex", jint>(); }
	jboolean isLeadingEdge() { return call_method<"isLeadingEdge", jboolean>(); }
	jint getInsertionIndex() { return call_method<"getInsertionIndex", jint>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jboolean equals(jni::ref<java::awt::font::TextHitInfo> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::awt::font::TextHitInfo> leading(jint p1) { return call_static_method<"leading", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	static jni::ref<java::awt::font::TextHitInfo> trailing(jint p1) { return call_static_method<"trailing", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	static jni::ref<java::awt::font::TextHitInfo> beforeOffset(jint p1) { return call_static_method<"beforeOffset", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	static jni::ref<java::awt::font::TextHitInfo> afterOffset(jint p1) { return call_static_method<"afterOffset", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	jni::ref<java::awt::font::TextHitInfo> getOtherHit() { return call_method<"getOtherHit", jni::ref<java::awt::font::TextHitInfo>>(); }
	jni::ref<java::awt::font::TextHitInfo> getOffsetHit(jint p1) { return call_method<"getOffsetHit", jni::ref<java::awt::font::TextHitInfo>>(p1); }

protected:

	TextHitInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTHITINFO
