// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHMETRICS_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHMETRICS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::font { class GlyphMetrics; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::font::GlyphMetrics>
{
	static constexpr fixed_string class_name = "java/awt/font/GlyphMetrics";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHMETRICS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHMETRICS)
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHMETRICS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::font::GlyphMetrics : public jni::object_base<"java/awt/font/GlyphMetrics",
	java::lang::Object>
{
public:

	static jbyte STANDARD() { return get_static_field<"STANDARD", jbyte>(); }
	static jbyte LIGATURE() { return get_static_field<"LIGATURE", jbyte>(); }
	static jbyte COMBINING() { return get_static_field<"COMBINING", jbyte>(); }
	static jbyte COMPONENT() { return get_static_field<"COMPONENT", jbyte>(); }
	static jbyte WHITESPACE() { return get_static_field<"WHITESPACE", jbyte>(); }

	static jni::ref<java::awt::font::GlyphMetrics> new_object(jfloat p1, jni::ref<java::awt::geom::Rectangle2D> p2, jbyte p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::font::GlyphMetrics> new_object(jboolean p1, jfloat p2, jfloat p3, jni::ref<java::awt::geom::Rectangle2D> p4, jbyte p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	jfloat getAdvance() { return call_method<"getAdvance", jfloat>(); }
	jfloat getAdvanceX() { return call_method<"getAdvanceX", jfloat>(); }
	jfloat getAdvanceY() { return call_method<"getAdvanceY", jfloat>(); }
	jni::ref<java::awt::geom::Rectangle2D> getBounds2D() { return call_method<"getBounds2D", jni::ref<java::awt::geom::Rectangle2D>>(); }
	jfloat getLSB() { return call_method<"getLSB", jfloat>(); }
	jfloat getRSB() { return call_method<"getRSB", jfloat>(); }
	jint getType() { return call_method<"getType", jint>(); }
	jboolean isStandard() { return call_method<"isStandard", jboolean>(); }
	jboolean isLigature() { return call_method<"isLigature", jboolean>(); }
	jboolean isCombining() { return call_method<"isCombining", jboolean>(); }
	jboolean isComponent() { return call_method<"isComponent", jboolean>(); }
	jboolean isWhitespace() { return call_method<"isWhitespace", jboolean>(); }

protected:

	GlyphMetrics(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_GLYPHMETRICS
