// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTLAYOUT_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTLAYOUT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::font { class TextLayout; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::font::TextLayout>
{
	static constexpr fixed_string class_name = "java/awt/font/TextLayout";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTLAYOUT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTLAYOUT)
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTLAYOUT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Graphics2D.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/font/FontRenderContext.h>
#include <scapix/java_api/java/awt/font/LayoutPath.h>
#include <scapix/java_api/java/awt/font/TextHitInfo.h>
#include <scapix/java_api/java/awt/font/TextLayout_CaretPolicy.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/Point2D.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::font::TextLayout : public jni::object_base<"java/awt/font/TextLayout",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using CaretPolicy = TextLayout_CaretPolicy;

	static jni::ref<java::awt::font::TextLayout_CaretPolicy> DEFAULT_CARET_POLICY() { return get_static_field<"DEFAULT_CARET_POLICY", jni::ref<java::awt::font::TextLayout_CaretPolicy>>(); }

	static jni::ref<java::awt::font::TextLayout> new_object(jni::ref<java::lang::String> p1, jni::ref<java::awt::Font> p2, jni::ref<java::awt::font::FontRenderContext> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::font::TextLayout> new_object(jni::ref<java::lang::String> p1, jni::ref<java::util::Map> p2, jni::ref<java::awt::font::FontRenderContext> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::font::TextLayout> new_object(jni::ref<java::text::AttributedCharacterIterator> p1, jni::ref<java::awt::font::FontRenderContext> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::awt::font::TextLayout> getJustifiedLayout(jfloat p1) { return call_method<"getJustifiedLayout", jni::ref<java::awt::font::TextLayout>>(p1); }
	jbyte getBaseline() { return call_method<"getBaseline", jbyte>(); }
	jni::ref<jni::array<jfloat>> getBaselineOffsets() { return call_method<"getBaselineOffsets", jni::ref<jni::array<jfloat>>>(); }
	jfloat getAdvance() { return call_method<"getAdvance", jfloat>(); }
	jfloat getVisibleAdvance() { return call_method<"getVisibleAdvance", jfloat>(); }
	jfloat getAscent() { return call_method<"getAscent", jfloat>(); }
	jfloat getDescent() { return call_method<"getDescent", jfloat>(); }
	jfloat getLeading() { return call_method<"getLeading", jfloat>(); }
	jni::ref<java::awt::geom::Rectangle2D> getBounds() { return call_method<"getBounds", jni::ref<java::awt::geom::Rectangle2D>>(); }
	jni::ref<java::awt::Rectangle> getPixelBounds(jni::ref<java::awt::font::FontRenderContext> p1, jfloat p2, jfloat p3) { return call_method<"getPixelBounds", jni::ref<java::awt::Rectangle>>(p1, p2, p3); }
	jboolean isLeftToRight() { return call_method<"isLeftToRight", jboolean>(); }
	jboolean isVertical() { return call_method<"isVertical", jboolean>(); }
	jint getCharacterCount() { return call_method<"getCharacterCount", jint>(); }
	jni::ref<jni::array<jfloat>> getCaretInfo(jni::ref<java::awt::font::TextHitInfo> p1, jni::ref<java::awt::geom::Rectangle2D> p2) { return call_method<"getCaretInfo", jni::ref<jni::array<jfloat>>>(p1, p2); }
	jni::ref<jni::array<jfloat>> getCaretInfo(jni::ref<java::awt::font::TextHitInfo> p1) { return call_method<"getCaretInfo", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<java::awt::font::TextHitInfo> getNextRightHit(jni::ref<java::awt::font::TextHitInfo> p1) { return call_method<"getNextRightHit", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	jni::ref<java::awt::font::TextHitInfo> getNextRightHit(jint p1, jni::ref<java::awt::font::TextLayout_CaretPolicy> p2) { return call_method<"getNextRightHit", jni::ref<java::awt::font::TextHitInfo>>(p1, p2); }
	jni::ref<java::awt::font::TextHitInfo> getNextRightHit(jint p1) { return call_method<"getNextRightHit", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	jni::ref<java::awt::font::TextHitInfo> getNextLeftHit(jni::ref<java::awt::font::TextHitInfo> p1) { return call_method<"getNextLeftHit", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	jni::ref<java::awt::font::TextHitInfo> getNextLeftHit(jint p1, jni::ref<java::awt::font::TextLayout_CaretPolicy> p2) { return call_method<"getNextLeftHit", jni::ref<java::awt::font::TextHitInfo>>(p1, p2); }
	jni::ref<java::awt::font::TextHitInfo> getNextLeftHit(jint p1) { return call_method<"getNextLeftHit", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	jni::ref<java::awt::font::TextHitInfo> getVisualOtherHit(jni::ref<java::awt::font::TextHitInfo> p1) { return call_method<"getVisualOtherHit", jni::ref<java::awt::font::TextHitInfo>>(p1); }
	jni::ref<java::awt::Shape> getCaretShape(jni::ref<java::awt::font::TextHitInfo> p1, jni::ref<java::awt::geom::Rectangle2D> p2) { return call_method<"getCaretShape", jni::ref<java::awt::Shape>>(p1, p2); }
	jni::ref<java::awt::Shape> getCaretShape(jni::ref<java::awt::font::TextHitInfo> p1) { return call_method<"getCaretShape", jni::ref<java::awt::Shape>>(p1); }
	jbyte getCharacterLevel(jint p1) { return call_method<"getCharacterLevel", jbyte>(p1); }
	jni::ref<jni::array<java::awt::Shape>> getCaretShapes(jint p1, jni::ref<java::awt::geom::Rectangle2D> p2, jni::ref<java::awt::font::TextLayout_CaretPolicy> p3) { return call_method<"getCaretShapes", jni::ref<jni::array<java::awt::Shape>>>(p1, p2, p3); }
	jni::ref<jni::array<java::awt::Shape>> getCaretShapes(jint p1, jni::ref<java::awt::geom::Rectangle2D> p2) { return call_method<"getCaretShapes", jni::ref<jni::array<java::awt::Shape>>>(p1, p2); }
	jni::ref<jni::array<java::awt::Shape>> getCaretShapes(jint p1) { return call_method<"getCaretShapes", jni::ref<jni::array<java::awt::Shape>>>(p1); }
	jni::ref<jni::array<jint>> getLogicalRangesForVisualSelection(jni::ref<java::awt::font::TextHitInfo> p1, jni::ref<java::awt::font::TextHitInfo> p2) { return call_method<"getLogicalRangesForVisualSelection", jni::ref<jni::array<jint>>>(p1, p2); }
	jni::ref<java::awt::Shape> getVisualHighlightShape(jni::ref<java::awt::font::TextHitInfo> p1, jni::ref<java::awt::font::TextHitInfo> p2, jni::ref<java::awt::geom::Rectangle2D> p3) { return call_method<"getVisualHighlightShape", jni::ref<java::awt::Shape>>(p1, p2, p3); }
	jni::ref<java::awt::Shape> getVisualHighlightShape(jni::ref<java::awt::font::TextHitInfo> p1, jni::ref<java::awt::font::TextHitInfo> p2) { return call_method<"getVisualHighlightShape", jni::ref<java::awt::Shape>>(p1, p2); }
	jni::ref<java::awt::Shape> getLogicalHighlightShape(jint p1, jint p2, jni::ref<java::awt::geom::Rectangle2D> p3) { return call_method<"getLogicalHighlightShape", jni::ref<java::awt::Shape>>(p1, p2, p3); }
	jni::ref<java::awt::Shape> getLogicalHighlightShape(jint p1, jint p2) { return call_method<"getLogicalHighlightShape", jni::ref<java::awt::Shape>>(p1, p2); }
	jni::ref<java::awt::Shape> getBlackBoxBounds(jint p1, jint p2) { return call_method<"getBlackBoxBounds", jni::ref<java::awt::Shape>>(p1, p2); }
	jni::ref<java::awt::font::TextHitInfo> hitTestChar(jfloat p1, jfloat p2, jni::ref<java::awt::geom::Rectangle2D> p3) { return call_method<"hitTestChar", jni::ref<java::awt::font::TextHitInfo>>(p1, p2, p3); }
	jni::ref<java::awt::font::TextHitInfo> hitTestChar(jfloat p1, jfloat p2) { return call_method<"hitTestChar", jni::ref<java::awt::font::TextHitInfo>>(p1, p2); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jboolean equals(jni::ref<java::awt::font::TextLayout> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void draw(jni::ref<java::awt::Graphics2D> p1, jfloat p2, jfloat p3) { return call_method<"draw", void>(p1, p2, p3); }
	jni::ref<java::awt::Shape> getOutline(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"getOutline", jni::ref<java::awt::Shape>>(p1); }
	jni::ref<java::awt::font::LayoutPath> getLayoutPath() { return call_method<"getLayoutPath", jni::ref<java::awt::font::LayoutPath>>(); }
	void hitToPoint(jni::ref<java::awt::font::TextHitInfo> p1, jni::ref<java::awt::geom::Point2D> p2) { return call_method<"hitToPoint", void>(p1, p2); }

protected:

	TextLayout(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_TEXTLAYOUT
