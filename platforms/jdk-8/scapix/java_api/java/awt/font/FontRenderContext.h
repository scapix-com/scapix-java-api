// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_FONT_FONTRENDERCONTEXT_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_FONTRENDERCONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::font { class FontRenderContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::font::FontRenderContext>
{
	static constexpr fixed_string class_name = "java/awt/font/FontRenderContext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_FONTRENDERCONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_FONT_FONTRENDERCONTEXT)
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_FONTRENDERCONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::font::FontRenderContext : public jni::object_base<"java/awt/font/FontRenderContext",
	java::lang::Object>
{
public:

	static jni::ref<java::awt::font::FontRenderContext> new_object(jni::ref<java::awt::geom::AffineTransform> p1, jboolean p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::font::FontRenderContext> new_object(jni::ref<java::awt::geom::AffineTransform> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return base_::new_object(p1, p2, p3); }
	jboolean isTransformed() { return call_method<"isTransformed", jboolean>(); }
	jint getTransformType() { return call_method<"getTransformType", jint>(); }
	jni::ref<java::awt::geom::AffineTransform> getTransform() { return call_method<"getTransform", jni::ref<java::awt::geom::AffineTransform>>(); }
	jboolean isAntiAliased() { return call_method<"isAntiAliased", jboolean>(); }
	jboolean usesFractionalMetrics() { return call_method<"usesFractionalMetrics", jboolean>(); }
	jni::ref<java::lang::Object> getAntiAliasingHint() { return call_method<"getAntiAliasingHint", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> getFractionalMetricsHint() { return call_method<"getFractionalMetricsHint", jni::ref<java::lang::Object>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jboolean equals(jni::ref<java::awt::font::FontRenderContext> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	FontRenderContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_FONTRENDERCONTEXT
