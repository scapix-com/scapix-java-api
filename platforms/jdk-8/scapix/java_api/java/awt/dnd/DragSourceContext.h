// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/dnd/DragSourceListener.h>
#include <scapix/java_api/java/awt/dnd/DragSourceMotionListener.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCECONTEXT_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCECONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::dnd { class DragSourceContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::dnd::DragSourceContext>
{
	static constexpr fixed_string class_name = "java/awt/dnd/DragSourceContext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::dnd::DragSourceListener, scapix::java_api::java::awt::dnd::DragSourceMotionListener, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCECONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCECONTEXT)
#define SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCECONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Cursor.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/datatransfer/Transferable.h>
#include <scapix/java_api/java/awt/dnd/DragGestureEvent.h>
#include <scapix/java_api/java/awt/dnd/DragSource.h>
#include <scapix/java_api/java/awt/dnd/DragSourceDragEvent.h>
#include <scapix/java_api/java/awt/dnd/DragSourceDropEvent.h>
#include <scapix/java_api/java/awt/dnd/DragSourceEvent.h>
#include <scapix/java_api/java/awt/dnd/peer/DragSourceContextPeer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::dnd::DragSourceContext : public jni::object_base<"java/awt/dnd/DragSourceContext",
	java::lang::Object,
	java::awt::dnd::DragSourceListener,
	java::awt::dnd::DragSourceMotionListener,
	java::io::Serializable>
{
public:

	static jni::ref<java::awt::dnd::DragSourceContext> new_object(jni::ref<java::awt::dnd::peer::DragSourceContextPeer> p1, jni::ref<java::awt::dnd::DragGestureEvent> p2, jni::ref<java::awt::Cursor> p3, jni::ref<java::awt::Image> p4, jni::ref<java::awt::Point> p5, jni::ref<java::awt::datatransfer::Transferable> p6, jni::ref<java::awt::dnd::DragSourceListener> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::awt::dnd::DragSource> getDragSource() { return call_method<"getDragSource", jni::ref<java::awt::dnd::DragSource>>(); }
	jni::ref<java::awt::Component> getComponent() { return call_method<"getComponent", jni::ref<java::awt::Component>>(); }
	jni::ref<java::awt::dnd::DragGestureEvent> getTrigger() { return call_method<"getTrigger", jni::ref<java::awt::dnd::DragGestureEvent>>(); }
	jint getSourceActions() { return call_method<"getSourceActions", jint>(); }
	void setCursor(jni::ref<java::awt::Cursor> p1) { return call_method<"setCursor", void>(p1); }
	jni::ref<java::awt::Cursor> getCursor() { return call_method<"getCursor", jni::ref<java::awt::Cursor>>(); }
	void addDragSourceListener(jni::ref<java::awt::dnd::DragSourceListener> p1) { return call_method<"addDragSourceListener", void>(p1); }
	void removeDragSourceListener(jni::ref<java::awt::dnd::DragSourceListener> p1) { return call_method<"removeDragSourceListener", void>(p1); }
	void transferablesFlavorsChanged() { return call_method<"transferablesFlavorsChanged", void>(); }
	void dragEnter(jni::ref<java::awt::dnd::DragSourceDragEvent> p1) { return call_method<"dragEnter", void>(p1); }
	void dragOver(jni::ref<java::awt::dnd::DragSourceDragEvent> p1) { return call_method<"dragOver", void>(p1); }
	void dragExit(jni::ref<java::awt::dnd::DragSourceEvent> p1) { return call_method<"dragExit", void>(p1); }
	void dropActionChanged(jni::ref<java::awt::dnd::DragSourceDragEvent> p1) { return call_method<"dropActionChanged", void>(p1); }
	void dragDropEnd(jni::ref<java::awt::dnd::DragSourceDropEvent> p1) { return call_method<"dragDropEnd", void>(p1); }
	void dragMouseMoved(jni::ref<java::awt::dnd::DragSourceDragEvent> p1) { return call_method<"dragMouseMoved", void>(p1); }
	jni::ref<java::awt::datatransfer::Transferable> getTransferable() { return call_method<"getTransferable", jni::ref<java::awt::datatransfer::Transferable>>(); }

protected:

	DragSourceContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCECONTEXT
