// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::dnd { class DragSource; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::dnd::DragSource>
{
	static constexpr fixed_string class_name = "java/awt/dnd/DragSource";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCE)
#define SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Cursor.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/datatransfer/FlavorMap.h>
#include <scapix/java_api/java/awt/datatransfer/Transferable.h>
#include <scapix/java_api/java/awt/dnd/DragGestureEvent.h>
#include <scapix/java_api/java/awt/dnd/DragGestureListener.h>
#include <scapix/java_api/java/awt/dnd/DragGestureRecognizer.h>
#include <scapix/java_api/java/awt/dnd/DragSourceListener.h>
#include <scapix/java_api/java/awt/dnd/DragSourceMotionListener.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/util/EventListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::dnd::DragSource : public jni::object_base<"java/awt/dnd/DragSource",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::awt::Cursor> DefaultCopyDrop() { return get_static_field<"DefaultCopyDrop", jni::ref<java::awt::Cursor>>(); }
	static jni::ref<java::awt::Cursor> DefaultMoveDrop() { return get_static_field<"DefaultMoveDrop", jni::ref<java::awt::Cursor>>(); }
	static jni::ref<java::awt::Cursor> DefaultLinkDrop() { return get_static_field<"DefaultLinkDrop", jni::ref<java::awt::Cursor>>(); }
	static jni::ref<java::awt::Cursor> DefaultCopyNoDrop() { return get_static_field<"DefaultCopyNoDrop", jni::ref<java::awt::Cursor>>(); }
	static jni::ref<java::awt::Cursor> DefaultMoveNoDrop() { return get_static_field<"DefaultMoveNoDrop", jni::ref<java::awt::Cursor>>(); }
	static jni::ref<java::awt::Cursor> DefaultLinkNoDrop() { return get_static_field<"DefaultLinkNoDrop", jni::ref<java::awt::Cursor>>(); }

	static jni::ref<java::awt::dnd::DragSource> getDefaultDragSource() { return call_static_method<"getDefaultDragSource", jni::ref<java::awt::dnd::DragSource>>(); }
	static jboolean isDragImageSupported() { return call_static_method<"isDragImageSupported", jboolean>(); }
	static jni::ref<java::awt::dnd::DragSource> new_object() { return base_::new_object(); }
	void startDrag(jni::ref<java::awt::dnd::DragGestureEvent> p1, jni::ref<java::awt::Cursor> p2, jni::ref<java::awt::Image> p3, jni::ref<java::awt::Point> p4, jni::ref<java::awt::datatransfer::Transferable> p5, jni::ref<java::awt::dnd::DragSourceListener> p6, jni::ref<java::awt::datatransfer::FlavorMap> p7) { return call_method<"startDrag", void>(p1, p2, p3, p4, p5, p6, p7); }
	void startDrag(jni::ref<java::awt::dnd::DragGestureEvent> p1, jni::ref<java::awt::Cursor> p2, jni::ref<java::awt::datatransfer::Transferable> p3, jni::ref<java::awt::dnd::DragSourceListener> p4, jni::ref<java::awt::datatransfer::FlavorMap> p5) { return call_method<"startDrag", void>(p1, p2, p3, p4, p5); }
	void startDrag(jni::ref<java::awt::dnd::DragGestureEvent> p1, jni::ref<java::awt::Cursor> p2, jni::ref<java::awt::Image> p3, jni::ref<java::awt::Point> p4, jni::ref<java::awt::datatransfer::Transferable> p5, jni::ref<java::awt::dnd::DragSourceListener> p6) { return call_method<"startDrag", void>(p1, p2, p3, p4, p5, p6); }
	void startDrag(jni::ref<java::awt::dnd::DragGestureEvent> p1, jni::ref<java::awt::Cursor> p2, jni::ref<java::awt::datatransfer::Transferable> p3, jni::ref<java::awt::dnd::DragSourceListener> p4) { return call_method<"startDrag", void>(p1, p2, p3, p4); }
	jni::ref<java::awt::datatransfer::FlavorMap> getFlavorMap() { return call_method<"getFlavorMap", jni::ref<java::awt::datatransfer::FlavorMap>>(); }
	jni::ref<java::awt::dnd::DragGestureRecognizer> createDragGestureRecognizer(jni::ref<java::lang::Class> p1, jni::ref<java::awt::Component> p2, jint p3, jni::ref<java::awt::dnd::DragGestureListener> p4) { return call_method<"createDragGestureRecognizer", jni::ref<java::awt::dnd::DragGestureRecognizer>>(p1, p2, p3, p4); }
	jni::ref<java::awt::dnd::DragGestureRecognizer> createDefaultDragGestureRecognizer(jni::ref<java::awt::Component> p1, jint p2, jni::ref<java::awt::dnd::DragGestureListener> p3) { return call_method<"createDefaultDragGestureRecognizer", jni::ref<java::awt::dnd::DragGestureRecognizer>>(p1, p2, p3); }
	void addDragSourceListener(jni::ref<java::awt::dnd::DragSourceListener> p1) { return call_method<"addDragSourceListener", void>(p1); }
	void removeDragSourceListener(jni::ref<java::awt::dnd::DragSourceListener> p1) { return call_method<"removeDragSourceListener", void>(p1); }
	jni::ref<jni::array<java::awt::dnd::DragSourceListener>> getDragSourceListeners() { return call_method<"getDragSourceListeners", jni::ref<jni::array<java::awt::dnd::DragSourceListener>>>(); }
	void addDragSourceMotionListener(jni::ref<java::awt::dnd::DragSourceMotionListener> p1) { return call_method<"addDragSourceMotionListener", void>(p1); }
	void removeDragSourceMotionListener(jni::ref<java::awt::dnd::DragSourceMotionListener> p1) { return call_method<"removeDragSourceMotionListener", void>(p1); }
	jni::ref<jni::array<java::awt::dnd::DragSourceMotionListener>> getDragSourceMotionListeners() { return call_method<"getDragSourceMotionListeners", jni::ref<jni::array<java::awt::dnd::DragSourceMotionListener>>>(); }
	jni::ref<jni::array<java::util::EventListener>> getListeners(jni::ref<java::lang::Class> p1) { return call_method<"getListeners", jni::ref<jni::array<java::util::EventListener>>>(p1); }
	static jint getDragThreshold() { return call_static_method<"getDragThreshold", jint>(); }

protected:

	DragSource(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DND_DRAGSOURCE
