// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/Paint.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_COLOR_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_COLOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Color; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Color>
{
	static constexpr fixed_string class_name = "java/awt/Color";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::Paint, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_COLOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_COLOR)
#define SCAPIX_JAVA_API_JAVA_AWT_COLOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/PaintContext.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/RenderingHints.h>
#include <scapix/java_api/java/awt/color/ColorSpace.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Color : public jni::object_base<"java/awt/Color",
	java::lang::Object,
	java::awt::Paint,
	java::io::Serializable>
{
public:

	static jni::ref<java::awt::Color> white() { return get_static_field<"white", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> WHITE() { return get_static_field<"WHITE", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> lightGray() { return get_static_field<"lightGray", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> LIGHT_GRAY() { return get_static_field<"LIGHT_GRAY", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> gray() { return get_static_field<"gray", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> GRAY() { return get_static_field<"GRAY", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> darkGray() { return get_static_field<"darkGray", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> DARK_GRAY() { return get_static_field<"DARK_GRAY", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> black() { return get_static_field<"black", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> BLACK() { return get_static_field<"BLACK", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> red() { return get_static_field<"red", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> RED() { return get_static_field<"RED", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> pink() { return get_static_field<"pink", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> PINK() { return get_static_field<"PINK", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> orange() { return get_static_field<"orange", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> ORANGE() { return get_static_field<"ORANGE", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> yellow() { return get_static_field<"yellow", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> YELLOW() { return get_static_field<"YELLOW", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> green() { return get_static_field<"green", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> GREEN() { return get_static_field<"GREEN", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> magenta() { return get_static_field<"magenta", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> MAGENTA() { return get_static_field<"MAGENTA", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> cyan() { return get_static_field<"cyan", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> CYAN() { return get_static_field<"CYAN", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> blue() { return get_static_field<"blue", jni::ref<java::awt::Color>>(); }
	static jni::ref<java::awt::Color> BLUE() { return get_static_field<"BLUE", jni::ref<java::awt::Color>>(); }

	static jni::ref<java::awt::Color> new_object(jint p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::Color> new_object(jint p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::awt::Color> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::Color> new_object(jint p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::Color> new_object(jfloat p1, jfloat p2, jfloat p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::Color> new_object(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::awt::Color> new_object(jni::ref<java::awt::color::ColorSpace> p1, jni::ref<jni::array<jfloat>> p2, jfloat p3) { return base_::new_object(p1, p2, p3); }
	jint getRed() { return call_method<"getRed", jint>(); }
	jint getGreen() { return call_method<"getGreen", jint>(); }
	jint getBlue() { return call_method<"getBlue", jint>(); }
	jint getAlpha() { return call_method<"getAlpha", jint>(); }
	jint getRGB() { return call_method<"getRGB", jint>(); }
	jni::ref<java::awt::Color> brighter() { return call_method<"brighter", jni::ref<java::awt::Color>>(); }
	jni::ref<java::awt::Color> darker() { return call_method<"darker", jni::ref<java::awt::Color>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::awt::Color> decode(jni::ref<java::lang::String> p1) { return call_static_method<"decode", jni::ref<java::awt::Color>>(p1); }
	static jni::ref<java::awt::Color> getColor(jni::ref<java::lang::String> p1) { return call_static_method<"getColor", jni::ref<java::awt::Color>>(p1); }
	static jni::ref<java::awt::Color> getColor(jni::ref<java::lang::String> p1, jni::ref<java::awt::Color> p2) { return call_static_method<"getColor", jni::ref<java::awt::Color>>(p1, p2); }
	static jni::ref<java::awt::Color> getColor(jni::ref<java::lang::String> p1, jint p2) { return call_static_method<"getColor", jni::ref<java::awt::Color>>(p1, p2); }
	static jint HSBtoRGB(jfloat p1, jfloat p2, jfloat p3) { return call_static_method<"HSBtoRGB", jint>(p1, p2, p3); }
	static jni::ref<jni::array<jfloat>> RGBtoHSB(jint p1, jint p2, jint p3, jni::ref<jni::array<jfloat>> p4) { return call_static_method<"RGBtoHSB", jni::ref<jni::array<jfloat>>>(p1, p2, p3, p4); }
	static jni::ref<java::awt::Color> getHSBColor(jfloat p1, jfloat p2, jfloat p3) { return call_static_method<"getHSBColor", jni::ref<java::awt::Color>>(p1, p2, p3); }
	jni::ref<jni::array<jfloat>> getRGBComponents(jni::ref<jni::array<jfloat>> p1) { return call_method<"getRGBComponents", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<jni::array<jfloat>> getRGBColorComponents(jni::ref<jni::array<jfloat>> p1) { return call_method<"getRGBColorComponents", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<jni::array<jfloat>> getComponents(jni::ref<jni::array<jfloat>> p1) { return call_method<"getComponents", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<jni::array<jfloat>> getColorComponents(jni::ref<jni::array<jfloat>> p1) { return call_method<"getColorComponents", jni::ref<jni::array<jfloat>>>(p1); }
	jni::ref<jni::array<jfloat>> getComponents(jni::ref<java::awt::color::ColorSpace> p1, jni::ref<jni::array<jfloat>> p2) { return call_method<"getComponents", jni::ref<jni::array<jfloat>>>(p1, p2); }
	jni::ref<jni::array<jfloat>> getColorComponents(jni::ref<java::awt::color::ColorSpace> p1, jni::ref<jni::array<jfloat>> p2) { return call_method<"getColorComponents", jni::ref<jni::array<jfloat>>>(p1, p2); }
	jni::ref<java::awt::color::ColorSpace> getColorSpace() { return call_method<"getColorSpace", jni::ref<java::awt::color::ColorSpace>>(); }
	jni::ref<java::awt::PaintContext> createContext(jni::ref<java::awt::image::ColorModel> p1, jni::ref<java::awt::Rectangle> p2, jni::ref<java::awt::geom::Rectangle2D> p3, jni::ref<java::awt::geom::AffineTransform> p4, jni::ref<java::awt::RenderingHints> p5) { return call_method<"createContext", jni::ref<java::awt::PaintContext>>(p1, p2, p3, p4, p5); }
	jint getTransparency() { return call_method<"getTransparency", jint>(); }

protected:

	Color(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_COLOR
