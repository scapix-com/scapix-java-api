// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Externalizable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_MIMETYPE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_MIMETYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::datatransfer { class MimeType; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::datatransfer::MimeType>
{
	static constexpr fixed_string class_name = "java/awt/datatransfer/MimeType";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Externalizable, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_MIMETYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_MIMETYPE)
#define SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_MIMETYPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/datatransfer/MimeTypeParameterList.h>
#include <scapix/java_api/java/io/ObjectInput.h>
#include <scapix/java_api/java/io/ObjectOutput.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::awt::datatransfer::MimeType : public jni::object_base<"java/awt/datatransfer/MimeType",
	java::lang::Object,
	java::io::Externalizable,
	java::lang::Cloneable>
{
public:

	static jni::ref<java::awt::datatransfer::MimeType> new_object() { return base_::new_object(); }
	static jni::ref<java::awt::datatransfer::MimeType> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::datatransfer::MimeType> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::datatransfer::MimeType> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::awt::datatransfer::MimeTypeParameterList> p3) { return base_::new_object(p1, p2, p3); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> getPrimaryType() { return call_method<"getPrimaryType", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSubType() { return call_method<"getSubType", jni::ref<java::lang::String>>(); }
	jni::ref<java::awt::datatransfer::MimeTypeParameterList> getParameters() { return call_method<"getParameters", jni::ref<java::awt::datatransfer::MimeTypeParameterList>>(); }
	jni::ref<java::lang::String> getParameter(jni::ref<java::lang::String> p1) { return call_method<"getParameter", jni::ref<java::lang::String>>(p1); }
	void setParameter(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setParameter", void>(p1, p2); }
	void removeParameter(jni::ref<java::lang::String> p1) { return call_method<"removeParameter", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getBaseType() { return call_method<"getBaseType", jni::ref<java::lang::String>>(); }
	jboolean match(jni::ref<java::awt::datatransfer::MimeType> p1) { return call_method<"match", jboolean>(p1); }
	jboolean match(jni::ref<java::lang::String> p1) { return call_method<"match", jboolean>(p1); }
	void writeExternal(jni::ref<java::io::ObjectOutput> p1) { return call_method<"writeExternal", void>(p1); }
	void readExternal(jni::ref<java::io::ObjectInput> p1) { return call_method<"readExternal", void>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	MimeType(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_MIMETYPE
