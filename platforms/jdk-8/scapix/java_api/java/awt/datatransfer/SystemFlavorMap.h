// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/datatransfer/FlavorMap.h>
#include <scapix/java_api/java/awt/datatransfer/FlavorTable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_SYSTEMFLAVORMAP_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_SYSTEMFLAVORMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::datatransfer { class SystemFlavorMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::datatransfer::SystemFlavorMap>
{
	static constexpr fixed_string class_name = "java/awt/datatransfer/SystemFlavorMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::datatransfer::FlavorMap, scapix::java_api::java::awt::datatransfer::FlavorTable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_SYSTEMFLAVORMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_SYSTEMFLAVORMAP)
#define SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_SYSTEMFLAVORMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/datatransfer/DataFlavor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::datatransfer::SystemFlavorMap : public jni::object_base<"java/awt/datatransfer/SystemFlavorMap",
	java::lang::Object,
	java::awt::datatransfer::FlavorMap,
	java::awt::datatransfer::FlavorTable>
{
public:

	static jni::ref<java::awt::datatransfer::FlavorMap> getDefaultFlavorMap() { return call_static_method<"getDefaultFlavorMap", jni::ref<java::awt::datatransfer::FlavorMap>>(); }
	jni::ref<java::util::List> getNativesForFlavor(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_method<"getNativesForFlavor", jni::ref<java::util::List>>(p1); }
	jni::ref<java::util::List> getFlavorsForNative(jni::ref<java::lang::String> p1) { return call_method<"getFlavorsForNative", jni::ref<java::util::List>>(p1); }
	jni::ref<java::util::Map> getNativesForFlavors(jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> p1) { return call_method<"getNativesForFlavors", jni::ref<java::util::Map>>(p1); }
	jni::ref<java::util::Map> getFlavorsForNatives(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"getFlavorsForNatives", jni::ref<java::util::Map>>(p1); }
	void addUnencodedNativeForFlavor(jni::ref<java::awt::datatransfer::DataFlavor> p1, jni::ref<java::lang::String> p2) { return call_method<"addUnencodedNativeForFlavor", void>(p1, p2); }
	void setNativesForFlavor(jni::ref<java::awt::datatransfer::DataFlavor> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_method<"setNativesForFlavor", void>(p1, p2); }
	void addFlavorForUnencodedNative(jni::ref<java::lang::String> p1, jni::ref<java::awt::datatransfer::DataFlavor> p2) { return call_method<"addFlavorForUnencodedNative", void>(p1, p2); }
	void setFlavorsForNative(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> p2) { return call_method<"setFlavorsForNative", void>(p1, p2); }
	static jni::ref<java::lang::String> encodeJavaMIMEType(jni::ref<java::lang::String> p1) { return call_static_method<"encodeJavaMIMEType", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> encodeDataFlavor(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_static_method<"encodeDataFlavor", jni::ref<java::lang::String>>(p1); }
	static jboolean isJavaMIMEType(jni::ref<java::lang::String> p1) { return call_static_method<"isJavaMIMEType", jboolean>(p1); }
	static jni::ref<java::lang::String> decodeJavaMIMEType(jni::ref<java::lang::String> p1) { return call_static_method<"decodeJavaMIMEType", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::awt::datatransfer::DataFlavor> decodeDataFlavor(jni::ref<java::lang::String> p1) { return call_static_method<"decodeDataFlavor", jni::ref<java::awt::datatransfer::DataFlavor>>(p1); }

protected:

	SystemFlavorMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DATATRANSFER_SYSTEMFLAVORMAP
