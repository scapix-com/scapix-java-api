// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSCONFIGURATION_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSCONFIGURATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class GraphicsConfiguration; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::GraphicsConfiguration>
{
	static constexpr fixed_string class_name = "java/awt/GraphicsConfiguration";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSCONFIGURATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSCONFIGURATION)
#define SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSCONFIGURATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/BufferCapabilities.h>
#include <scapix/java_api/java/awt/GraphicsDevice.h>
#include <scapix/java_api/java/awt/ImageCapabilities.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/VolatileImage.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::GraphicsConfiguration : public jni::object_base<"java/awt/GraphicsConfiguration",
	java::lang::Object>
{
public:

	jni::ref<java::awt::GraphicsDevice> getDevice() { return call_method<"getDevice", jni::ref<java::awt::GraphicsDevice>>(); }
	jni::ref<java::awt::image::BufferedImage> createCompatibleImage(jint p1, jint p2) { return call_method<"createCompatibleImage", jni::ref<java::awt::image::BufferedImage>>(p1, p2); }
	jni::ref<java::awt::image::BufferedImage> createCompatibleImage(jint p1, jint p2, jint p3) { return call_method<"createCompatibleImage", jni::ref<java::awt::image::BufferedImage>>(p1, p2, p3); }
	jni::ref<java::awt::image::VolatileImage> createCompatibleVolatileImage(jint p1, jint p2) { return call_method<"createCompatibleVolatileImage", jni::ref<java::awt::image::VolatileImage>>(p1, p2); }
	jni::ref<java::awt::image::VolatileImage> createCompatibleVolatileImage(jint p1, jint p2, jint p3) { return call_method<"createCompatibleVolatileImage", jni::ref<java::awt::image::VolatileImage>>(p1, p2, p3); }
	jni::ref<java::awt::image::VolatileImage> createCompatibleVolatileImage(jint p1, jint p2, jni::ref<java::awt::ImageCapabilities> p3) { return call_method<"createCompatibleVolatileImage", jni::ref<java::awt::image::VolatileImage>>(p1, p2, p3); }
	jni::ref<java::awt::image::VolatileImage> createCompatibleVolatileImage(jint p1, jint p2, jni::ref<java::awt::ImageCapabilities> p3, jint p4) { return call_method<"createCompatibleVolatileImage", jni::ref<java::awt::image::VolatileImage>>(p1, p2, p3, p4); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::image::ColorModel> getColorModel(jint p1) { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(p1); }
	jni::ref<java::awt::geom::AffineTransform> getDefaultTransform() { return call_method<"getDefaultTransform", jni::ref<java::awt::geom::AffineTransform>>(); }
	jni::ref<java::awt::geom::AffineTransform> getNormalizingTransform() { return call_method<"getNormalizingTransform", jni::ref<java::awt::geom::AffineTransform>>(); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	jni::ref<java::awt::BufferCapabilities> getBufferCapabilities() { return call_method<"getBufferCapabilities", jni::ref<java::awt::BufferCapabilities>>(); }
	jni::ref<java::awt::ImageCapabilities> getImageCapabilities() { return call_method<"getImageCapabilities", jni::ref<java::awt::ImageCapabilities>>(); }
	jboolean isTranslucencyCapable() { return call_method<"isTranslucencyCapable", jboolean>(); }

protected:

	GraphicsConfiguration(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSCONFIGURATION
