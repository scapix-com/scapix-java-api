// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_JOBATTRIBUTES_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_JOBATTRIBUTES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class JobAttributes; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::JobAttributes>
{
	static constexpr fixed_string class_name = "java/awt/JobAttributes";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_JOBATTRIBUTES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_JOBATTRIBUTES)
#define SCAPIX_JAVA_API_JAVA_AWT_JOBATTRIBUTES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/JobAttributes_DefaultSelectionType.h>
#include <scapix/java_api/java/awt/JobAttributes_DestinationType.h>
#include <scapix/java_api/java/awt/JobAttributes_DialogType.h>
#include <scapix/java_api/java/awt/JobAttributes_MultipleDocumentHandlingType.h>
#include <scapix/java_api/java/awt/JobAttributes_SidesType.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::JobAttributes : public jni::object_base<"java/awt/JobAttributes",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	using DefaultSelectionType = JobAttributes_DefaultSelectionType;
	using DestinationType = JobAttributes_DestinationType;
	using DialogType = JobAttributes_DialogType;
	using MultipleDocumentHandlingType = JobAttributes_MultipleDocumentHandlingType;
	using SidesType = JobAttributes_SidesType;

	static jni::ref<java::awt::JobAttributes> new_object() { return base_::new_object(); }
	static jni::ref<java::awt::JobAttributes> new_object(jni::ref<java::awt::JobAttributes> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::JobAttributes> new_object(jint p1, jni::ref<java::awt::JobAttributes_DefaultSelectionType> p2, jni::ref<java::awt::JobAttributes_DestinationType> p3, jni::ref<java::awt::JobAttributes_DialogType> p4, jni::ref<java::lang::String> p5, jint p6, jint p7, jni::ref<java::awt::JobAttributes_MultipleDocumentHandlingType> p8, jni::ref<jni::array<jni::array<jint>>> p9, jni::ref<java::lang::String> p10, jni::ref<java::awt::JobAttributes_SidesType> p11) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	void set(jni::ref<java::awt::JobAttributes> p1) { return call_method<"set", void>(p1); }
	jint getCopies() { return call_method<"getCopies", jint>(); }
	void setCopies(jint p1) { return call_method<"setCopies", void>(p1); }
	void setCopiesToDefault() { return call_method<"setCopiesToDefault", void>(); }
	jni::ref<java::awt::JobAttributes_DefaultSelectionType> getDefaultSelection() { return call_method<"getDefaultSelection", jni::ref<java::awt::JobAttributes_DefaultSelectionType>>(); }
	void setDefaultSelection(jni::ref<java::awt::JobAttributes_DefaultSelectionType> p1) { return call_method<"setDefaultSelection", void>(p1); }
	jni::ref<java::awt::JobAttributes_DestinationType> getDestination() { return call_method<"getDestination", jni::ref<java::awt::JobAttributes_DestinationType>>(); }
	void setDestination(jni::ref<java::awt::JobAttributes_DestinationType> p1) { return call_method<"setDestination", void>(p1); }
	jni::ref<java::awt::JobAttributes_DialogType> getDialog() { return call_method<"getDialog", jni::ref<java::awt::JobAttributes_DialogType>>(); }
	void setDialog(jni::ref<java::awt::JobAttributes_DialogType> p1) { return call_method<"setDialog", void>(p1); }
	jni::ref<java::lang::String> getFileName() { return call_method<"getFileName", jni::ref<java::lang::String>>(); }
	void setFileName(jni::ref<java::lang::String> p1) { return call_method<"setFileName", void>(p1); }
	jint getFromPage() { return call_method<"getFromPage", jint>(); }
	void setFromPage(jint p1) { return call_method<"setFromPage", void>(p1); }
	jint getMaxPage() { return call_method<"getMaxPage", jint>(); }
	void setMaxPage(jint p1) { return call_method<"setMaxPage", void>(p1); }
	jint getMinPage() { return call_method<"getMinPage", jint>(); }
	void setMinPage(jint p1) { return call_method<"setMinPage", void>(p1); }
	jni::ref<java::awt::JobAttributes_MultipleDocumentHandlingType> getMultipleDocumentHandling() { return call_method<"getMultipleDocumentHandling", jni::ref<java::awt::JobAttributes_MultipleDocumentHandlingType>>(); }
	void setMultipleDocumentHandling(jni::ref<java::awt::JobAttributes_MultipleDocumentHandlingType> p1) { return call_method<"setMultipleDocumentHandling", void>(p1); }
	void setMultipleDocumentHandlingToDefault() { return call_method<"setMultipleDocumentHandlingToDefault", void>(); }
	jni::ref<jni::array<jni::array<jint>>> getPageRanges() { return call_method<"getPageRanges", jni::ref<jni::array<jni::array<jint>>>>(); }
	void setPageRanges(jni::ref<jni::array<jni::array<jint>>> p1) { return call_method<"setPageRanges", void>(p1); }
	jni::ref<java::lang::String> getPrinter() { return call_method<"getPrinter", jni::ref<java::lang::String>>(); }
	void setPrinter(jni::ref<java::lang::String> p1) { return call_method<"setPrinter", void>(p1); }
	jni::ref<java::awt::JobAttributes_SidesType> getSides() { return call_method<"getSides", jni::ref<java::awt::JobAttributes_SidesType>>(); }
	void setSides(jni::ref<java::awt::JobAttributes_SidesType> p1) { return call_method<"setSides", void>(p1); }
	void setSidesToDefault() { return call_method<"setSidesToDefault", void>(); }
	jint getToPage() { return call_method<"getToPage", jint>(); }
	void setToPage(jint p1) { return call_method<"setToPage", void>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	JobAttributes(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_JOBATTRIBUTES
