// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Window.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_DIALOG_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_DIALOG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Dialog; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Dialog>
{
	static constexpr fixed_string class_name = "java/awt/Dialog";
	using base_classes = std::tuple<scapix::java_api::java::awt::Window>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DIALOG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_DIALOG)
#define SCAPIX_JAVA_API_JAVA_AWT_DIALOG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Dialog_ModalityType.h>
#include <scapix/java_api/java/awt/Frame.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/java/awt/Dialog_ModalExclusionType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Dialog : public jni::object_base<"java/awt/Dialog",
	java::awt::Window>
{
public:

	using ModalityType = Dialog_ModalityType;
	using ModalExclusionType = Dialog_ModalExclusionType;

	static jni::ref<java::awt::Dialog_ModalityType> DEFAULT_MODALITY_TYPE() { return get_static_field<"DEFAULT_MODALITY_TYPE", jni::ref<java::awt::Dialog_ModalityType>>(); }

	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Frame> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Frame> p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Frame> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Frame> p1, jni::ref<java::lang::String> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Frame> p1, jni::ref<java::lang::String> p2, jboolean p3, jni::ref<java::awt::GraphicsConfiguration> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Dialog> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Dialog> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Dialog> p1, jni::ref<java::lang::String> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Dialog> p1, jni::ref<java::lang::String> p2, jboolean p3, jni::ref<java::awt::GraphicsConfiguration> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Window> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Window> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Window> p1, jni::ref<java::awt::Dialog_ModalityType> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Window> p1, jni::ref<java::lang::String> p2, jni::ref<java::awt::Dialog_ModalityType> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::Dialog> new_object(jni::ref<java::awt::Window> p1, jni::ref<java::lang::String> p2, jni::ref<java::awt::Dialog_ModalityType> p3, jni::ref<java::awt::GraphicsConfiguration> p4) { return base_::new_object(p1, p2, p3, p4); }
	void addNotify() { return call_method<"addNotify", void>(); }
	jboolean isModal() { return call_method<"isModal", jboolean>(); }
	void setModal(jboolean p1) { return call_method<"setModal", void>(p1); }
	jni::ref<java::awt::Dialog_ModalityType> getModalityType() { return call_method<"getModalityType", jni::ref<java::awt::Dialog_ModalityType>>(); }
	void setModalityType(jni::ref<java::awt::Dialog_ModalityType> p1) { return call_method<"setModalityType", void>(p1); }
	jni::ref<java::lang::String> getTitle() { return call_method<"getTitle", jni::ref<java::lang::String>>(); }
	void setTitle(jni::ref<java::lang::String> p1) { return call_method<"setTitle", void>(p1); }
	void setVisible(jboolean p1) { return call_method<"setVisible", void>(p1); }
	void show() { return call_method<"show", void>(); }
	void hide() { return call_method<"hide", void>(); }
	void toBack() { return call_method<"toBack", void>(); }
	jboolean isResizable() { return call_method<"isResizable", jboolean>(); }
	void setResizable(jboolean p1) { return call_method<"setResizable", void>(p1); }
	void setUndecorated(jboolean p1) { return call_method<"setUndecorated", void>(p1); }
	jboolean isUndecorated() { return call_method<"isUndecorated", jboolean>(); }
	void setOpacity(jfloat p1) { return call_method<"setOpacity", void>(p1); }
	void setShape(jni::ref<java::awt::Shape> p1) { return call_method<"setShape", void>(p1); }
	void setBackground(jni::ref<java::awt::Color> p1) { return call_method<"setBackground", void>(p1); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	Dialog(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_DIALOG
