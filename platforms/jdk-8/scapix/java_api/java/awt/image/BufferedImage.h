// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/image/WritableRenderedImage.h>
#include <scapix/java_api/java/awt/Transparency.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_BUFFEREDIMAGE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_BUFFEREDIMAGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class BufferedImage; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::BufferedImage>
{
	static constexpr fixed_string class_name = "java/awt/image/BufferedImage";
	using base_classes = std::tuple<scapix::java_api::java::awt::Image, scapix::java_api::java::awt::image::WritableRenderedImage, scapix::java_api::java::awt::Transparency>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_BUFFEREDIMAGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_BUFFEREDIMAGE)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_BUFFEREDIMAGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Graphics2D.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/awt/image/ImageProducer.h>
#include <scapix/java_api/java/awt/image/IndexColorModel.h>
#include <scapix/java_api/java/awt/image/Raster.h>
#include <scapix/java_api/java/awt/image/SampleModel.h>
#include <scapix/java_api/java/awt/image/TileObserver.h>
#include <scapix/java_api/java/awt/image/WritableRaster.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Hashtable.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::BufferedImage : public jni::object_base<"java/awt/image/BufferedImage",
	java::awt::Image,
	java::awt::image::WritableRenderedImage,
	java::awt::Transparency>
{
public:

	static jint TYPE_CUSTOM() { return get_static_field<"TYPE_CUSTOM", jint>(); }
	static jint TYPE_INT_RGB() { return get_static_field<"TYPE_INT_RGB", jint>(); }
	static jint TYPE_INT_ARGB() { return get_static_field<"TYPE_INT_ARGB", jint>(); }
	static jint TYPE_INT_ARGB_PRE() { return get_static_field<"TYPE_INT_ARGB_PRE", jint>(); }
	static jint TYPE_INT_BGR() { return get_static_field<"TYPE_INT_BGR", jint>(); }
	static jint TYPE_3BYTE_BGR() { return get_static_field<"TYPE_3BYTE_BGR", jint>(); }
	static jint TYPE_4BYTE_ABGR() { return get_static_field<"TYPE_4BYTE_ABGR", jint>(); }
	static jint TYPE_4BYTE_ABGR_PRE() { return get_static_field<"TYPE_4BYTE_ABGR_PRE", jint>(); }
	static jint TYPE_USHORT_565_RGB() { return get_static_field<"TYPE_USHORT_565_RGB", jint>(); }
	static jint TYPE_USHORT_555_RGB() { return get_static_field<"TYPE_USHORT_555_RGB", jint>(); }
	static jint TYPE_BYTE_GRAY() { return get_static_field<"TYPE_BYTE_GRAY", jint>(); }
	static jint TYPE_USHORT_GRAY() { return get_static_field<"TYPE_USHORT_GRAY", jint>(); }
	static jint TYPE_BYTE_BINARY() { return get_static_field<"TYPE_BYTE_BINARY", jint>(); }
	static jint TYPE_BYTE_INDEXED() { return get_static_field<"TYPE_BYTE_INDEXED", jint>(); }

	static jni::ref<java::awt::image::BufferedImage> new_object(jint p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::image::BufferedImage> new_object(jint p1, jint p2, jint p3, jni::ref<java::awt::image::IndexColorModel> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::awt::image::BufferedImage> new_object(jni::ref<java::awt::image::ColorModel> p1, jni::ref<java::awt::image::WritableRaster> p2, jboolean p3, jni::ref<java::util::Hashtable> p4) { return base_::new_object(p1, p2, p3, p4); }
	jint getType() { return call_method<"getType", jint>(); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::image::WritableRaster> getRaster() { return call_method<"getRaster", jni::ref<java::awt::image::WritableRaster>>(); }
	jni::ref<java::awt::image::WritableRaster> getAlphaRaster() { return call_method<"getAlphaRaster", jni::ref<java::awt::image::WritableRaster>>(); }
	jint getRGB(jint p1, jint p2) { return call_method<"getRGB", jint>(p1, p2); }
	jni::ref<jni::array<jint>> getRGB(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jint p6, jint p7) { return call_method<"getRGB", jni::ref<jni::array<jint>>>(p1, p2, p3, p4, p5, p6, p7); }
	void setRGB(jint p1, jint p2, jint p3) { return call_method<"setRGB", void>(p1, p2, p3); }
	void setRGB(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jint p6, jint p7) { return call_method<"setRGB", void>(p1, p2, p3, p4, p5, p6, p7); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jint getWidth(jni::ref<java::awt::image::ImageObserver> p1) { return call_method<"getWidth", jint>(p1); }
	jint getHeight(jni::ref<java::awt::image::ImageObserver> p1) { return call_method<"getHeight", jint>(p1); }
	jni::ref<java::awt::image::ImageProducer> getSource() { return call_method<"getSource", jni::ref<java::awt::image::ImageProducer>>(); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1, jni::ref<java::awt::image::ImageObserver> p2) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::awt::Graphics> getGraphics() { return call_method<"getGraphics", jni::ref<java::awt::Graphics>>(); }
	jni::ref<java::awt::Graphics2D> createGraphics() { return call_method<"createGraphics", jni::ref<java::awt::Graphics2D>>(); }
	jni::ref<java::awt::image::BufferedImage> getSubimage(jint p1, jint p2, jint p3, jint p4) { return call_method<"getSubimage", jni::ref<java::awt::image::BufferedImage>>(p1, p2, p3, p4); }
	jboolean isAlphaPremultiplied() { return call_method<"isAlphaPremultiplied", jboolean>(); }
	void coerceData(jboolean p1) { return call_method<"coerceData", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Vector> getSources() { return call_method<"getSources", jni::ref<java::util::Vector>>(); }
	jni::ref<jni::array<java::lang::String>> getPropertyNames() { return call_method<"getPropertyNames", jni::ref<jni::array<java::lang::String>>>(); }
	jint getMinX() { return call_method<"getMinX", jint>(); }
	jint getMinY() { return call_method<"getMinY", jint>(); }
	jni::ref<java::awt::image::SampleModel> getSampleModel() { return call_method<"getSampleModel", jni::ref<java::awt::image::SampleModel>>(); }
	jint getNumXTiles() { return call_method<"getNumXTiles", jint>(); }
	jint getNumYTiles() { return call_method<"getNumYTiles", jint>(); }
	jint getMinTileX() { return call_method<"getMinTileX", jint>(); }
	jint getMinTileY() { return call_method<"getMinTileY", jint>(); }
	jint getTileWidth() { return call_method<"getTileWidth", jint>(); }
	jint getTileHeight() { return call_method<"getTileHeight", jint>(); }
	jint getTileGridXOffset() { return call_method<"getTileGridXOffset", jint>(); }
	jint getTileGridYOffset() { return call_method<"getTileGridYOffset", jint>(); }
	jni::ref<java::awt::image::Raster> getTile(jint p1, jint p2) { return call_method<"getTile", jni::ref<java::awt::image::Raster>>(p1, p2); }
	jni::ref<java::awt::image::Raster> getData() { return call_method<"getData", jni::ref<java::awt::image::Raster>>(); }
	jni::ref<java::awt::image::Raster> getData(jni::ref<java::awt::Rectangle> p1) { return call_method<"getData", jni::ref<java::awt::image::Raster>>(p1); }
	jni::ref<java::awt::image::WritableRaster> copyData(jni::ref<java::awt::image::WritableRaster> p1) { return call_method<"copyData", jni::ref<java::awt::image::WritableRaster>>(p1); }
	void setData(jni::ref<java::awt::image::Raster> p1) { return call_method<"setData", void>(p1); }
	void addTileObserver(jni::ref<java::awt::image::TileObserver> p1) { return call_method<"addTileObserver", void>(p1); }
	void removeTileObserver(jni::ref<java::awt::image::TileObserver> p1) { return call_method<"removeTileObserver", void>(p1); }
	jboolean isTileWritable(jint p1, jint p2) { return call_method<"isTileWritable", jboolean>(p1, p2); }
	jni::ref<jni::array<java::awt::Point>> getWritableTileIndices() { return call_method<"getWritableTileIndices", jni::ref<jni::array<java::awt::Point>>>(); }
	jboolean hasTileWriters() { return call_method<"hasTileWriters", jboolean>(); }
	jni::ref<java::awt::image::WritableRaster> getWritableTile(jint p1, jint p2) { return call_method<"getWritableTile", jni::ref<java::awt::image::WritableRaster>>(p1, p2); }
	void releaseWritableTile(jint p1, jint p2) { return call_method<"releaseWritableTile", void>(p1, p2); }
	jint getTransparency() { return call_method<"getTransparency", jint>(); }

protected:

	BufferedImage(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_BUFFEREDIMAGE
