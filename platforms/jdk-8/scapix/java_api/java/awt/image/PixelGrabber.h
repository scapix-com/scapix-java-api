// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/image/ImageConsumer.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_PIXELGRABBER_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_PIXELGRABBER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class PixelGrabber; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::PixelGrabber>
{
	static constexpr fixed_string class_name = "java/awt/image/PixelGrabber";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::image::ImageConsumer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_PIXELGRABBER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_PIXELGRABBER)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_PIXELGRABBER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/ImageProducer.h>
#include <scapix/java_api/java/util/Hashtable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::PixelGrabber : public jni::object_base<"java/awt/image/PixelGrabber",
	java::lang::Object,
	java::awt::image::ImageConsumer>
{
public:

	static jni::ref<java::awt::image::PixelGrabber> new_object(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jint>> p6, jint p7, jint p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jni::ref<java::awt::image::PixelGrabber> new_object(jni::ref<java::awt::image::ImageProducer> p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jint>> p6, jint p7, jint p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jni::ref<java::awt::image::PixelGrabber> new_object(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jboolean p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	void startGrabbing() { return call_method<"startGrabbing", void>(); }
	void abortGrabbing() { return call_method<"abortGrabbing", void>(); }
	jboolean grabPixels() { return call_method<"grabPixels", jboolean>(); }
	jboolean grabPixels(jlong p1) { return call_method<"grabPixels", jboolean>(p1); }
	jint getStatus() { return call_method<"getStatus", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jni::ref<java::lang::Object> getPixels() { return call_method<"getPixels", jni::ref<java::lang::Object>>(); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	void setDimensions(jint p1, jint p2) { return call_method<"setDimensions", void>(p1, p2); }
	void setHints(jint p1) { return call_method<"setHints", void>(p1); }
	void setProperties(jni::ref<java::util::Hashtable> p1) { return call_method<"setProperties", void>(p1); }
	void setColorModel(jni::ref<java::awt::image::ColorModel> p1) { return call_method<"setColorModel", void>(p1); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::image::ColorModel> p5, jni::ref<jni::array<jbyte>> p6, jint p7, jint p8) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::image::ColorModel> p5, jni::ref<jni::array<jint>> p6, jint p7, jint p8) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void imageComplete(jint p1) { return call_method<"imageComplete", void>(p1); }
	jint status() { return call_method<"status", jint>(); }

protected:

	PixelGrabber(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_PIXELGRABBER
