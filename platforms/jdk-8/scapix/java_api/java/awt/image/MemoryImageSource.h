// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/image/ImageProducer.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MEMORYIMAGESOURCE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MEMORYIMAGESOURCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class MemoryImageSource; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::MemoryImageSource>
{
	static constexpr fixed_string class_name = "java/awt/image/MemoryImageSource";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::image::ImageProducer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MEMORYIMAGESOURCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MEMORYIMAGESOURCE)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MEMORYIMAGESOURCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/ImageConsumer.h>
#include <scapix/java_api/java/util/Hashtable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::MemoryImageSource : public jni::object_base<"java/awt/image/MemoryImageSource",
	java::lang::Object,
	java::awt::image::ImageProducer>
{
public:

	static jni::ref<java::awt::image::MemoryImageSource> new_object(jint p1, jint p2, jni::ref<java::awt::image::ColorModel> p3, jni::ref<jni::array<jbyte>> p4, jint p5, jint p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::image::MemoryImageSource> new_object(jint p1, jint p2, jni::ref<java::awt::image::ColorModel> p3, jni::ref<jni::array<jbyte>> p4, jint p5, jint p6, jni::ref<java::util::Hashtable> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<java::awt::image::MemoryImageSource> new_object(jint p1, jint p2, jni::ref<java::awt::image::ColorModel> p3, jni::ref<jni::array<jint>> p4, jint p5, jint p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::image::MemoryImageSource> new_object(jint p1, jint p2, jni::ref<java::awt::image::ColorModel> p3, jni::ref<jni::array<jint>> p4, jint p5, jint p6, jni::ref<java::util::Hashtable> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<java::awt::image::MemoryImageSource> new_object(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4, jint p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::image::MemoryImageSource> new_object(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4, jint p5, jni::ref<java::util::Hashtable> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	void addConsumer(jni::ref<java::awt::image::ImageConsumer> p1) { return call_method<"addConsumer", void>(p1); }
	jboolean isConsumer(jni::ref<java::awt::image::ImageConsumer> p1) { return call_method<"isConsumer", jboolean>(p1); }
	void removeConsumer(jni::ref<java::awt::image::ImageConsumer> p1) { return call_method<"removeConsumer", void>(p1); }
	void startProduction(jni::ref<java::awt::image::ImageConsumer> p1) { return call_method<"startProduction", void>(p1); }
	void requestTopDownLeftRightResend(jni::ref<java::awt::image::ImageConsumer> p1) { return call_method<"requestTopDownLeftRightResend", void>(p1); }
	void setAnimated(jboolean p1) { return call_method<"setAnimated", void>(p1); }
	void setFullBufferUpdates(jboolean p1) { return call_method<"setFullBufferUpdates", void>(p1); }
	void newPixels() { return call_method<"newPixels", void>(); }
	void newPixels(jint p1, jint p2, jint p3, jint p4) { return call_method<"newPixels", void>(p1, p2, p3, p4); }
	void newPixels(jint p1, jint p2, jint p3, jint p4, jboolean p5) { return call_method<"newPixels", void>(p1, p2, p3, p4, p5); }
	void newPixels(jni::ref<jni::array<jbyte>> p1, jni::ref<java::awt::image::ColorModel> p2, jint p3, jint p4) { return call_method<"newPixels", void>(p1, p2, p3, p4); }
	void newPixels(jni::ref<jni::array<jint>> p1, jni::ref<java::awt::image::ColorModel> p2, jint p3, jint p4) { return call_method<"newPixels", void>(p1, p2, p3, p4); }

protected:

	MemoryImageSource(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MEMORYIMAGESOURCE
