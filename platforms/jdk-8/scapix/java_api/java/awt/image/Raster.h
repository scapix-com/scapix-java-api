// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RASTER_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RASTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class Raster; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::Raster>
{
	static constexpr fixed_string class_name = "java/awt/image/Raster";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RASTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RASTER)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RASTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/image/DataBuffer.h>
#include <scapix/java_api/java/awt/image/SampleModel.h>
#include <scapix/java_api/java/awt/image/WritableRaster.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::Raster : public jni::object_base<"java/awt/image/Raster",
	java::lang::Object>
{
public:

	static jni::ref<java::awt::image::WritableRaster> createInterleavedRaster(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::Point> p5) { return call_static_method<"createInterleavedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::image::WritableRaster> createInterleavedRaster(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jint>> p6, jni::ref<java::awt::Point> p7) { return call_static_method<"createInterleavedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<java::awt::image::WritableRaster> createBandedRaster(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::Point> p5) { return call_static_method<"createBandedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::image::WritableRaster> createBandedRaster(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jni::ref<jni::array<jint>> p6, jni::ref<java::awt::Point> p7) { return call_static_method<"createBandedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<java::awt::image::WritableRaster> createPackedRaster(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jni::ref<java::awt::Point> p5) { return call_static_method<"createPackedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::image::WritableRaster> createPackedRaster(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<java::awt::Point> p6) { return call_static_method<"createPackedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::image::WritableRaster> createInterleavedRaster(jni::ref<java::awt::image::DataBuffer> p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jint>> p6, jni::ref<java::awt::Point> p7) { return call_static_method<"createInterleavedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<java::awt::image::WritableRaster> createBandedRaster(jni::ref<java::awt::image::DataBuffer> p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jni::ref<jni::array<jint>> p6, jni::ref<java::awt::Point> p7) { return call_static_method<"createBandedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<java::awt::image::WritableRaster> createPackedRaster(jni::ref<java::awt::image::DataBuffer> p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jni::ref<java::awt::Point> p6) { return call_static_method<"createPackedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::image::WritableRaster> createPackedRaster(jni::ref<java::awt::image::DataBuffer> p1, jint p2, jint p3, jint p4, jni::ref<java::awt::Point> p5) { return call_static_method<"createPackedRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::image::Raster> createRaster(jni::ref<java::awt::image::SampleModel> p1, jni::ref<java::awt::image::DataBuffer> p2, jni::ref<java::awt::Point> p3) { return call_static_method<"createRaster", jni::ref<java::awt::image::Raster>>(p1, p2, p3); }
	static jni::ref<java::awt::image::WritableRaster> createWritableRaster(jni::ref<java::awt::image::SampleModel> p1, jni::ref<java::awt::Point> p2) { return call_static_method<"createWritableRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2); }
	static jni::ref<java::awt::image::WritableRaster> createWritableRaster(jni::ref<java::awt::image::SampleModel> p1, jni::ref<java::awt::image::DataBuffer> p2, jni::ref<java::awt::Point> p3) { return call_static_method<"createWritableRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3); }
	jni::ref<java::awt::image::Raster> getParent() { return call_method<"getParent", jni::ref<java::awt::image::Raster>>(); }
	jint getSampleModelTranslateX() { return call_method<"getSampleModelTranslateX", jint>(); }
	jint getSampleModelTranslateY() { return call_method<"getSampleModelTranslateY", jint>(); }
	jni::ref<java::awt::image::WritableRaster> createCompatibleWritableRaster() { return call_method<"createCompatibleWritableRaster", jni::ref<java::awt::image::WritableRaster>>(); }
	jni::ref<java::awt::image::WritableRaster> createCompatibleWritableRaster(jint p1, jint p2) { return call_method<"createCompatibleWritableRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2); }
	jni::ref<java::awt::image::WritableRaster> createCompatibleWritableRaster(jni::ref<java::awt::Rectangle> p1) { return call_method<"createCompatibleWritableRaster", jni::ref<java::awt::image::WritableRaster>>(p1); }
	jni::ref<java::awt::image::WritableRaster> createCompatibleWritableRaster(jint p1, jint p2, jint p3, jint p4) { return call_method<"createCompatibleWritableRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4); }
	jni::ref<java::awt::image::Raster> createTranslatedChild(jint p1, jint p2) { return call_method<"createTranslatedChild", jni::ref<java::awt::image::Raster>>(p1, p2); }
	jni::ref<java::awt::image::Raster> createChild(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jni::ref<jni::array<jint>> p7) { return call_method<"createChild", jni::ref<java::awt::image::Raster>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	jint getMinX() { return call_method<"getMinX", jint>(); }
	jint getMinY() { return call_method<"getMinY", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jint getNumBands() { return call_method<"getNumBands", jint>(); }
	jint getNumDataElements() { return call_method<"getNumDataElements", jint>(); }
	jint getTransferType() { return call_method<"getTransferType", jint>(); }
	jni::ref<java::awt::image::DataBuffer> getDataBuffer() { return call_method<"getDataBuffer", jni::ref<java::awt::image::DataBuffer>>(); }
	jni::ref<java::awt::image::SampleModel> getSampleModel() { return call_method<"getSampleModel", jni::ref<java::awt::image::SampleModel>>(); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jint p2, jint p3, jint p4, jni::ref<java::lang::Object> p5) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3, p4, p5); }
	jni::ref<jni::array<jint>> getPixel(jint p1, jint p2, jni::ref<jni::array<jint>> p3) { return call_method<"getPixel", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	jni::ref<jni::array<jfloat>> getPixel(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3) { return call_method<"getPixel", jni::ref<jni::array<jfloat>>>(p1, p2, p3); }
	jni::ref<jni::array<jdouble>> getPixel(jint p1, jint p2, jni::ref<jni::array<jdouble>> p3) { return call_method<"getPixel", jni::ref<jni::array<jdouble>>>(p1, p2, p3); }
	jni::ref<jni::array<jint>> getPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5) { return call_method<"getPixels", jni::ref<jni::array<jint>>>(p1, p2, p3, p4, p5); }
	jni::ref<jni::array<jfloat>> getPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jfloat>> p5) { return call_method<"getPixels", jni::ref<jni::array<jfloat>>>(p1, p2, p3, p4, p5); }
	jni::ref<jni::array<jdouble>> getPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jdouble>> p5) { return call_method<"getPixels", jni::ref<jni::array<jdouble>>>(p1, p2, p3, p4, p5); }
	jint getSample(jint p1, jint p2, jint p3) { return call_method<"getSample", jint>(p1, p2, p3); }
	jfloat getSampleFloat(jint p1, jint p2, jint p3) { return call_method<"getSampleFloat", jfloat>(p1, p2, p3); }
	jdouble getSampleDouble(jint p1, jint p2, jint p3) { return call_method<"getSampleDouble", jdouble>(p1, p2, p3); }
	jni::ref<jni::array<jint>> getSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jint>> p6) { return call_method<"getSamples", jni::ref<jni::array<jint>>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<jni::array<jfloat>> getSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jfloat>> p6) { return call_method<"getSamples", jni::ref<jni::array<jfloat>>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<jni::array<jdouble>> getSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jdouble>> p6) { return call_method<"getSamples", jni::ref<jni::array<jdouble>>>(p1, p2, p3, p4, p5, p6); }

protected:

	Raster(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RASTER
