// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFER_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class DataBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::DataBuffer>
{
	static constexpr fixed_string class_name = "java/awt/image/DataBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFER)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::DataBuffer : public jni::object_base<"java/awt/image/DataBuffer",
	java::lang::Object>
{
public:

	static jint TYPE_BYTE() { return get_static_field<"TYPE_BYTE", jint>(); }
	static jint TYPE_USHORT() { return get_static_field<"TYPE_USHORT", jint>(); }
	static jint TYPE_SHORT() { return get_static_field<"TYPE_SHORT", jint>(); }
	static jint TYPE_INT() { return get_static_field<"TYPE_INT", jint>(); }
	static jint TYPE_FLOAT() { return get_static_field<"TYPE_FLOAT", jint>(); }
	static jint TYPE_DOUBLE() { return get_static_field<"TYPE_DOUBLE", jint>(); }
	static jint TYPE_UNDEFINED() { return get_static_field<"TYPE_UNDEFINED", jint>(); }

	static jint getDataTypeSize(jint p1) { return call_static_method<"getDataTypeSize", jint>(p1); }
	jint getDataType() { return call_method<"getDataType", jint>(); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jint getOffset() { return call_method<"getOffset", jint>(); }
	jni::ref<jni::array<jint>> getOffsets() { return call_method<"getOffsets", jni::ref<jni::array<jint>>>(); }
	jint getNumBanks() { return call_method<"getNumBanks", jint>(); }
	jint getElem(jint p1) { return call_method<"getElem", jint>(p1); }
	jint getElem(jint p1, jint p2) { return call_method<"getElem", jint>(p1, p2); }
	void setElem(jint p1, jint p2) { return call_method<"setElem", void>(p1, p2); }
	void setElem(jint p1, jint p2, jint p3) { return call_method<"setElem", void>(p1, p2, p3); }
	jfloat getElemFloat(jint p1) { return call_method<"getElemFloat", jfloat>(p1); }
	jfloat getElemFloat(jint p1, jint p2) { return call_method<"getElemFloat", jfloat>(p1, p2); }
	void setElemFloat(jint p1, jfloat p2) { return call_method<"setElemFloat", void>(p1, p2); }
	void setElemFloat(jint p1, jint p2, jfloat p3) { return call_method<"setElemFloat", void>(p1, p2, p3); }
	jdouble getElemDouble(jint p1) { return call_method<"getElemDouble", jdouble>(p1); }
	jdouble getElemDouble(jint p1, jint p2) { return call_method<"getElemDouble", jdouble>(p1, p2); }
	void setElemDouble(jint p1, jdouble p2) { return call_method<"setElemDouble", void>(p1, p2); }
	void setElemDouble(jint p1, jint p2, jdouble p3) { return call_method<"setElemDouble", void>(p1, p2, p3); }

protected:

	DataBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFER
