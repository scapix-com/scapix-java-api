// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/image/PackedColorModel.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DIRECTCOLORMODEL_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DIRECTCOLORMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class DirectColorModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::DirectColorModel>
{
	static constexpr fixed_string class_name = "java/awt/image/DirectColorModel";
	using base_classes = std::tuple<scapix::java_api::java::awt::image::PackedColorModel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DIRECTCOLORMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DIRECTCOLORMODEL)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DIRECTCOLORMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/color/ColorSpace.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/Raster.h>
#include <scapix/java_api/java/awt/image/WritableRaster.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::DirectColorModel : public jni::object_base<"java/awt/image/DirectColorModel",
	java::awt::image::PackedColorModel>
{
public:

	static jni::ref<java::awt::image::DirectColorModel> new_object(jint p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::awt::image::DirectColorModel> new_object(jint p1, jint p2, jint p3, jint p4, jint p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::image::DirectColorModel> new_object(jni::ref<java::awt::color::ColorSpace> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jboolean p7, jint p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	jint getRedMask() { return call_method<"getRedMask", jint>(); }
	jint getGreenMask() { return call_method<"getGreenMask", jint>(); }
	jint getBlueMask() { return call_method<"getBlueMask", jint>(); }
	jint getAlphaMask() { return call_method<"getAlphaMask", jint>(); }
	jint getRed(jint p1) { return call_method<"getRed", jint>(p1); }
	jint getGreen(jint p1) { return call_method<"getGreen", jint>(p1); }
	jint getBlue(jint p1) { return call_method<"getBlue", jint>(p1); }
	jint getAlpha(jint p1) { return call_method<"getAlpha", jint>(p1); }
	jint getRGB(jint p1) { return call_method<"getRGB", jint>(p1); }
	jint getRed(jni::ref<java::lang::Object> p1) { return call_method<"getRed", jint>(p1); }
	jint getGreen(jni::ref<java::lang::Object> p1) { return call_method<"getGreen", jint>(p1); }
	jint getBlue(jni::ref<java::lang::Object> p1) { return call_method<"getBlue", jint>(p1); }
	jint getAlpha(jni::ref<java::lang::Object> p1) { return call_method<"getAlpha", jint>(p1); }
	jint getRGB(jni::ref<java::lang::Object> p1) { return call_method<"getRGB", jint>(p1); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<jni::array<jint>> getComponents(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"getComponents", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	jni::ref<jni::array<jint>> getComponents(jni::ref<java::lang::Object> p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"getComponents", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	jni::ref<java::awt::image::WritableRaster> createCompatibleWritableRaster(jint p1, jint p2) { return call_method<"createCompatibleWritableRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2); }
	jint getDataElement(jni::ref<jni::array<jint>> p1, jint p2) { return call_method<"getDataElement", jint>(p1, p2); }
	jni::ref<java::lang::Object> getDataElements(jni::ref<jni::array<jint>> p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::awt::image::ColorModel> coerceData(jni::ref<java::awt::image::WritableRaster> p1, jboolean p2) { return call_method<"coerceData", jni::ref<java::awt::image::ColorModel>>(p1, p2); }
	jboolean isCompatibleRaster(jni::ref<java::awt::image::Raster> p1) { return call_method<"isCompatibleRaster", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	DirectColorModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DIRECTCOLORMODEL
