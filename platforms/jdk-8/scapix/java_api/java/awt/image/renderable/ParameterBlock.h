// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_PARAMETERBLOCK_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_PARAMETERBLOCK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image::renderable { class ParameterBlock; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::renderable::ParameterBlock>
{
	static constexpr fixed_string class_name = "java/awt/image/renderable/ParameterBlock";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_PARAMETERBLOCK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_PARAMETERBLOCK)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_PARAMETERBLOCK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/image/RenderedImage.h>
#include <scapix/java_api/java/awt/image/renderable/RenderableImage.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::renderable::ParameterBlock : public jni::object_base<"java/awt/image/renderable/ParameterBlock",
	java::lang::Object,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static jni::ref<java::awt::image::renderable::ParameterBlock> new_object() { return base_::new_object(); }
	static jni::ref<java::awt::image::renderable::ParameterBlock> new_object(jni::ref<java::util::Vector> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::image::renderable::ParameterBlock> new_object(jni::ref<java::util::Vector> p1, jni::ref<java::util::Vector> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::Object> shallowClone() { return call_method<"shallowClone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::awt::image::renderable::ParameterBlock> addSource(jni::ref<java::lang::Object> p1) { return call_method<"addSource", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::lang::Object> getSource(jint p1) { return call_method<"getSource", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> setSource(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"setSource", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::awt::image::RenderedImage> getRenderedSource(jint p1) { return call_method<"getRenderedSource", jni::ref<java::awt::image::RenderedImage>>(p1); }
	jni::ref<java::awt::image::renderable::RenderableImage> getRenderableSource(jint p1) { return call_method<"getRenderableSource", jni::ref<java::awt::image::renderable::RenderableImage>>(p1); }
	jint getNumSources() { return call_method<"getNumSources", jint>(); }
	jni::ref<java::util::Vector> getSources() { return call_method<"getSources", jni::ref<java::util::Vector>>(); }
	void setSources(jni::ref<java::util::Vector> p1) { return call_method<"setSources", void>(p1); }
	void removeSources() { return call_method<"removeSources", void>(); }
	jint getNumParameters() { return call_method<"getNumParameters", jint>(); }
	jni::ref<java::util::Vector> getParameters() { return call_method<"getParameters", jni::ref<java::util::Vector>>(); }
	void setParameters(jni::ref<java::util::Vector> p1) { return call_method<"setParameters", void>(p1); }
	void removeParameters() { return call_method<"removeParameters", void>(); }
	jni::ref<java::awt::image::renderable::ParameterBlock> add(jni::ref<java::lang::Object> p1) { return call_method<"add", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> add(jbyte p1) { return call_method<"add", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> add(jchar p1) { return call_method<"add", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> add(jshort p1) { return call_method<"add", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> add(jint p1) { return call_method<"add", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> add(jlong p1) { return call_method<"add", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> add(jfloat p1) { return call_method<"add", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> add(jdouble p1) { return call_method<"add", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> set(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"set", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::awt::image::renderable::ParameterBlock> set(jbyte p1, jint p2) { return call_method<"set", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::awt::image::renderable::ParameterBlock> set(jchar p1, jint p2) { return call_method<"set", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::awt::image::renderable::ParameterBlock> set(jshort p1, jint p2) { return call_method<"set", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::awt::image::renderable::ParameterBlock> set(jint p1, jint p2) { return call_method<"set", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::awt::image::renderable::ParameterBlock> set(jlong p1, jint p2) { return call_method<"set", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::awt::image::renderable::ParameterBlock> set(jfloat p1, jint p2) { return call_method<"set", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::awt::image::renderable::ParameterBlock> set(jdouble p1, jint p2) { return call_method<"set", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1, p2); }
	jni::ref<java::lang::Object> getObjectParameter(jint p1) { return call_method<"getObjectParameter", jni::ref<java::lang::Object>>(p1); }
	jbyte getByteParameter(jint p1) { return call_method<"getByteParameter", jbyte>(p1); }
	jchar getCharParameter(jint p1) { return call_method<"getCharParameter", jchar>(p1); }
	jshort getShortParameter(jint p1) { return call_method<"getShortParameter", jshort>(p1); }
	jint getIntParameter(jint p1) { return call_method<"getIntParameter", jint>(p1); }
	jlong getLongParameter(jint p1) { return call_method<"getLongParameter", jlong>(p1); }
	jfloat getFloatParameter(jint p1) { return call_method<"getFloatParameter", jfloat>(p1); }
	jdouble getDoubleParameter(jint p1) { return call_method<"getDoubleParameter", jdouble>(p1); }
	jni::ref<jni::array<java::lang::Class>> getParamClasses() { return call_method<"getParamClasses", jni::ref<jni::array<java::lang::Class>>>(); }

protected:

	ParameterBlock(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_PARAMETERBLOCK
