// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/image/renderable/RenderableImage.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_RENDERABLEIMAGEOP_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_RENDERABLEIMAGEOP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image::renderable { class RenderableImageOp; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::renderable::RenderableImageOp>
{
	static constexpr fixed_string class_name = "java/awt/image/renderable/RenderableImageOp";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::image::renderable::RenderableImage>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_RENDERABLEIMAGEOP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_RENDERABLEIMAGEOP)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_RENDERABLEIMAGEOP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/RenderingHints.h>
#include <scapix/java_api/java/awt/image/RenderedImage.h>
#include <scapix/java_api/java/awt/image/renderable/ContextualRenderedImageFactory.h>
#include <scapix/java_api/java/awt/image/renderable/ParameterBlock.h>
#include <scapix/java_api/java/awt/image/renderable/RenderContext.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::renderable::RenderableImageOp : public jni::object_base<"java/awt/image/renderable/RenderableImageOp",
	java::lang::Object,
	java::awt::image::renderable::RenderableImage>
{
public:

	static jni::ref<java::awt::image::renderable::RenderableImageOp> new_object(jni::ref<java::awt::image::renderable::ContextualRenderedImageFactory> p1, jni::ref<java::awt::image::renderable::ParameterBlock> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::util::Vector> getSources() { return call_method<"getSources", jni::ref<java::util::Vector>>(); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	jni::ref<jni::array<java::lang::String>> getPropertyNames() { return call_method<"getPropertyNames", jni::ref<jni::array<java::lang::String>>>(); }
	jboolean isDynamic() { return call_method<"isDynamic", jboolean>(); }
	jfloat getWidth() { return call_method<"getWidth", jfloat>(); }
	jfloat getHeight() { return call_method<"getHeight", jfloat>(); }
	jfloat getMinX() { return call_method<"getMinX", jfloat>(); }
	jfloat getMinY() { return call_method<"getMinY", jfloat>(); }
	jni::ref<java::awt::image::renderable::ParameterBlock> setParameterBlock(jni::ref<java::awt::image::renderable::ParameterBlock> p1) { return call_method<"setParameterBlock", jni::ref<java::awt::image::renderable::ParameterBlock>>(p1); }
	jni::ref<java::awt::image::renderable::ParameterBlock> getParameterBlock() { return call_method<"getParameterBlock", jni::ref<java::awt::image::renderable::ParameterBlock>>(); }
	jni::ref<java::awt::image::RenderedImage> createScaledRendering(jint p1, jint p2, jni::ref<java::awt::RenderingHints> p3) { return call_method<"createScaledRendering", jni::ref<java::awt::image::RenderedImage>>(p1, p2, p3); }
	jni::ref<java::awt::image::RenderedImage> createDefaultRendering() { return call_method<"createDefaultRendering", jni::ref<java::awt::image::RenderedImage>>(); }
	jni::ref<java::awt::image::RenderedImage> createRendering(jni::ref<java::awt::image::renderable::RenderContext> p1) { return call_method<"createRendering", jni::ref<java::awt::image::RenderedImage>>(p1); }

protected:

	RenderableImageOp(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_RENDERABLE_RENDERABLEIMAGEOP
