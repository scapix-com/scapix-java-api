// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/image/Raster.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_WRITABLERASTER_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_WRITABLERASTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class WritableRaster; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::WritableRaster>
{
	static constexpr fixed_string class_name = "java/awt/image/WritableRaster";
	using base_classes = std::tuple<scapix::java_api::java::awt::image::Raster>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_WRITABLERASTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_WRITABLERASTER)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_WRITABLERASTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::WritableRaster : public jni::object_base<"java/awt/image/WritableRaster",
	java::awt::image::Raster>
{
public:

	jni::ref<java::awt::image::WritableRaster> getWritableParent() { return call_method<"getWritableParent", jni::ref<java::awt::image::WritableRaster>>(); }
	jni::ref<java::awt::image::WritableRaster> createWritableTranslatedChild(jint p1, jint p2) { return call_method<"createWritableTranslatedChild", jni::ref<java::awt::image::WritableRaster>>(p1, p2); }
	jni::ref<java::awt::image::WritableRaster> createWritableChild(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jni::ref<jni::array<jint>> p7) { return call_method<"createWritableChild", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5, p6, p7); }
	void setDataElements(jint p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"setDataElements", void>(p1, p2, p3); }
	void setDataElements(jint p1, jint p2, jni::ref<java::awt::image::Raster> p3) { return call_method<"setDataElements", void>(p1, p2, p3); }
	void setDataElements(jint p1, jint p2, jint p3, jint p4, jni::ref<java::lang::Object> p5) { return call_method<"setDataElements", void>(p1, p2, p3, p4, p5); }
	void setRect(jni::ref<java::awt::image::Raster> p1) { return call_method<"setRect", void>(p1); }
	void setRect(jint p1, jint p2, jni::ref<java::awt::image::Raster> p3) { return call_method<"setRect", void>(p1, p2, p3); }
	void setPixel(jint p1, jint p2, jni::ref<jni::array<jint>> p3) { return call_method<"setPixel", void>(p1, p2, p3); }
	void setPixel(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3) { return call_method<"setPixel", void>(p1, p2, p3); }
	void setPixel(jint p1, jint p2, jni::ref<jni::array<jdouble>> p3) { return call_method<"setPixel", void>(p1, p2, p3); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jfloat>> p5) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jdouble>> p5) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5); }
	void setSample(jint p1, jint p2, jint p3, jint p4) { return call_method<"setSample", void>(p1, p2, p3, p4); }
	void setSample(jint p1, jint p2, jint p3, jfloat p4) { return call_method<"setSample", void>(p1, p2, p3, p4); }
	void setSample(jint p1, jint p2, jint p3, jdouble p4) { return call_method<"setSample", void>(p1, p2, p3, p4); }
	void setSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jint>> p6) { return call_method<"setSamples", void>(p1, p2, p3, p4, p5, p6); }
	void setSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jfloat>> p6) { return call_method<"setSamples", void>(p1, p2, p3, p4, p5, p6); }
	void setSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jdouble>> p6) { return call_method<"setSamples", void>(p1, p2, p3, p4, p5, p6); }

protected:

	WritableRaster(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_WRITABLERASTER
