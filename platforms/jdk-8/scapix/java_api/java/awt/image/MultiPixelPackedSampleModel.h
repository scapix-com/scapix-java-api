// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/image/SampleModel.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MULTIPIXELPACKEDSAMPLEMODEL_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MULTIPIXELPACKEDSAMPLEMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class MultiPixelPackedSampleModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::MultiPixelPackedSampleModel>
{
	static constexpr fixed_string class_name = "java/awt/image/MultiPixelPackedSampleModel";
	using base_classes = std::tuple<scapix::java_api::java::awt::image::SampleModel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MULTIPIXELPACKEDSAMPLEMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MULTIPIXELPACKEDSAMPLEMODEL)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MULTIPIXELPACKEDSAMPLEMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/image/DataBuffer.h>
#include <scapix/java_api/java/lang/Object.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::MultiPixelPackedSampleModel : public jni::object_base<"java/awt/image/MultiPixelPackedSampleModel",
	java::awt::image::SampleModel>
{
public:

	static jni::ref<java::awt::image::MultiPixelPackedSampleModel> new_object(jint p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::awt::image::MultiPixelPackedSampleModel> new_object(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::awt::image::SampleModel> createCompatibleSampleModel(jint p1, jint p2) { return call_method<"createCompatibleSampleModel", jni::ref<java::awt::image::SampleModel>>(p1, p2); }
	jni::ref<java::awt::image::DataBuffer> createDataBuffer() { return call_method<"createDataBuffer", jni::ref<java::awt::image::DataBuffer>>(); }
	jint getNumDataElements() { return call_method<"getNumDataElements", jint>(); }
	jni::ref<jni::array<jint>> getSampleSize() { return call_method<"getSampleSize", jni::ref<jni::array<jint>>>(); }
	jint getSampleSize(jint p1) { return call_method<"getSampleSize", jint>(p1); }
	jint getOffset(jint p1, jint p2) { return call_method<"getOffset", jint>(p1, p2); }
	jint getBitOffset(jint p1) { return call_method<"getBitOffset", jint>(p1); }
	jint getScanlineStride() { return call_method<"getScanlineStride", jint>(); }
	jint getPixelBitStride() { return call_method<"getPixelBitStride", jint>(); }
	jint getDataBitOffset() { return call_method<"getDataBitOffset", jint>(); }
	jint getTransferType() { return call_method<"getTransferType", jint>(); }
	jni::ref<java::awt::image::SampleModel> createSubsetSampleModel(jni::ref<jni::array<jint>> p1) { return call_method<"createSubsetSampleModel", jni::ref<java::awt::image::SampleModel>>(p1); }
	jint getSample(jint p1, jint p2, jint p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getSample", jint>(p1, p2, p3, p4); }
	void setSample(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::image::DataBuffer> p5) { return call_method<"setSample", void>(p1, p2, p3, p4, p5); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jint p2, jni::ref<java::lang::Object> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<jni::array<jint>> getPixel(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getPixel", jni::ref<jni::array<jint>>>(p1, p2, p3, p4); }
	void setDataElements(jint p1, jint p2, jni::ref<java::lang::Object> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"setDataElements", void>(p1, p2, p3, p4); }
	void setPixel(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"setPixel", void>(p1, p2, p3, p4); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	MultiPixelPackedSampleModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_MULTIPIXELPACKEDSAMPLEMODEL
