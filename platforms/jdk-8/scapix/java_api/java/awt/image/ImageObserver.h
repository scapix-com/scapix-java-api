// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_IMAGEOBSERVER_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_IMAGEOBSERVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class ImageObserver; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::ImageObserver>
{
	static constexpr fixed_string class_name = "java/awt/image/ImageObserver";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_IMAGEOBSERVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_IMAGEOBSERVER)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_IMAGEOBSERVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Image.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::ImageObserver : public jni::object_base<"java/awt/image/ImageObserver",
	java::lang::Object>
{
public:

	static jint WIDTH() { return get_static_field<"WIDTH", jint>(); }
	static jint HEIGHT() { return get_static_field<"HEIGHT", jint>(); }
	static jint PROPERTIES() { return get_static_field<"PROPERTIES", jint>(); }
	static jint SOMEBITS() { return get_static_field<"SOMEBITS", jint>(); }
	static jint FRAMEBITS() { return get_static_field<"FRAMEBITS", jint>(); }
	static jint ALLBITS() { return get_static_field<"ALLBITS", jint>(); }
	static jint ERROR() { return get_static_field<"ERROR", jint>(); }
	static jint ABORT() { return get_static_field<"ABORT", jint>(); }

	jboolean imageUpdate(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"imageUpdate", jboolean>(p1, p2, p3, p4, p5, p6); }

protected:

	ImageObserver(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_IMAGEOBSERVER
