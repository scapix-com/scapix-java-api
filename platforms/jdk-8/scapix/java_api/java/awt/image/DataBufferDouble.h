// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/image/DataBuffer.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFERDOUBLE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFERDOUBLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class DataBufferDouble; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::DataBufferDouble>
{
	static constexpr fixed_string class_name = "java/awt/image/DataBufferDouble";
	using base_classes = std::tuple<scapix::java_api::java::awt::image::DataBuffer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFERDOUBLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFERDOUBLE)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFERDOUBLE

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::DataBufferDouble : public jni::object_base<"java/awt/image/DataBufferDouble",
	java::awt::image::DataBuffer>
{
public:

	static jni::ref<java::awt::image::DataBufferDouble> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::image::DataBufferDouble> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::image::DataBufferDouble> new_object(jni::ref<jni::array<jdouble>> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::image::DataBufferDouble> new_object(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::image::DataBufferDouble> new_object(jni::ref<jni::array<jni::array<jdouble>>> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::image::DataBufferDouble> new_object(jni::ref<jni::array<jni::array<jdouble>>> p1, jint p2, jni::ref<jni::array<jint>> p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<jni::array<jdouble>> getData() { return call_method<"getData", jni::ref<jni::array<jdouble>>>(); }
	jni::ref<jni::array<jdouble>> getData(jint p1) { return call_method<"getData", jni::ref<jni::array<jdouble>>>(p1); }
	jni::ref<jni::array<jni::array<jdouble>>> getBankData() { return call_method<"getBankData", jni::ref<jni::array<jni::array<jdouble>>>>(); }
	jint getElem(jint p1) { return call_method<"getElem", jint>(p1); }
	jint getElem(jint p1, jint p2) { return call_method<"getElem", jint>(p1, p2); }
	void setElem(jint p1, jint p2) { return call_method<"setElem", void>(p1, p2); }
	void setElem(jint p1, jint p2, jint p3) { return call_method<"setElem", void>(p1, p2, p3); }
	jfloat getElemFloat(jint p1) { return call_method<"getElemFloat", jfloat>(p1); }
	jfloat getElemFloat(jint p1, jint p2) { return call_method<"getElemFloat", jfloat>(p1, p2); }
	void setElemFloat(jint p1, jfloat p2) { return call_method<"setElemFloat", void>(p1, p2); }
	void setElemFloat(jint p1, jint p2, jfloat p3) { return call_method<"setElemFloat", void>(p1, p2, p3); }
	jdouble getElemDouble(jint p1) { return call_method<"getElemDouble", jdouble>(p1); }
	jdouble getElemDouble(jint p1, jint p2) { return call_method<"getElemDouble", jdouble>(p1, p2); }
	void setElemDouble(jint p1, jdouble p2) { return call_method<"setElemDouble", void>(p1, p2); }
	void setElemDouble(jint p1, jint p2, jdouble p3) { return call_method<"setElemDouble", void>(p1, p2, p3); }

protected:

	DataBufferDouble(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_DATABUFFERDOUBLE
