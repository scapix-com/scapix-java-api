// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_SAMPLEMODEL_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_SAMPLEMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class SampleModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::SampleModel>
{
	static constexpr fixed_string class_name = "java/awt/image/SampleModel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_SAMPLEMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_SAMPLEMODEL)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_SAMPLEMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/image/DataBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::SampleModel : public jni::object_base<"java/awt/image/SampleModel",
	java::lang::Object>
{
public:

	static jni::ref<java::awt::image::SampleModel> new_object(jint p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jint getNumBands() { return call_method<"getNumBands", jint>(); }
	jint getNumDataElements() { return call_method<"getNumDataElements", jint>(); }
	jint getDataType() { return call_method<"getDataType", jint>(); }
	jint getTransferType() { return call_method<"getTransferType", jint>(); }
	jni::ref<jni::array<jint>> getPixel(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getPixel", jni::ref<jni::array<jint>>>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jint p2, jni::ref<java::lang::Object> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jint p2, jint p3, jint p4, jni::ref<java::lang::Object> p5, jni::ref<java::awt::image::DataBuffer> p6) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3, p4, p5, p6); }
	void setDataElements(jint p1, jint p2, jni::ref<java::lang::Object> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"setDataElements", void>(p1, p2, p3, p4); }
	void setDataElements(jint p1, jint p2, jint p3, jint p4, jni::ref<java::lang::Object> p5, jni::ref<java::awt::image::DataBuffer> p6) { return call_method<"setDataElements", void>(p1, p2, p3, p4, p5, p6); }
	jni::ref<jni::array<jfloat>> getPixel(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getPixel", jni::ref<jni::array<jfloat>>>(p1, p2, p3, p4); }
	jni::ref<jni::array<jdouble>> getPixel(jint p1, jint p2, jni::ref<jni::array<jdouble>> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getPixel", jni::ref<jni::array<jdouble>>>(p1, p2, p3, p4); }
	jni::ref<jni::array<jint>> getPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jni::ref<java::awt::image::DataBuffer> p6) { return call_method<"getPixels", jni::ref<jni::array<jint>>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<jni::array<jfloat>> getPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jfloat>> p5, jni::ref<java::awt::image::DataBuffer> p6) { return call_method<"getPixels", jni::ref<jni::array<jfloat>>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<jni::array<jdouble>> getPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jdouble>> p5, jni::ref<java::awt::image::DataBuffer> p6) { return call_method<"getPixels", jni::ref<jni::array<jdouble>>>(p1, p2, p3, p4, p5, p6); }
	jint getSample(jint p1, jint p2, jint p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getSample", jint>(p1, p2, p3, p4); }
	jfloat getSampleFloat(jint p1, jint p2, jint p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getSampleFloat", jfloat>(p1, p2, p3, p4); }
	jdouble getSampleDouble(jint p1, jint p2, jint p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"getSampleDouble", jdouble>(p1, p2, p3, p4); }
	jni::ref<jni::array<jint>> getSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jint>> p6, jni::ref<java::awt::image::DataBuffer> p7) { return call_method<"getSamples", jni::ref<jni::array<jint>>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<jni::array<jfloat>> getSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jfloat>> p6, jni::ref<java::awt::image::DataBuffer> p7) { return call_method<"getSamples", jni::ref<jni::array<jfloat>>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<jni::array<jdouble>> getSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jdouble>> p6, jni::ref<java::awt::image::DataBuffer> p7) { return call_method<"getSamples", jni::ref<jni::array<jdouble>>>(p1, p2, p3, p4, p5, p6, p7); }
	void setPixel(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"setPixel", void>(p1, p2, p3, p4); }
	void setPixel(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"setPixel", void>(p1, p2, p3, p4); }
	void setPixel(jint p1, jint p2, jni::ref<jni::array<jdouble>> p3, jni::ref<java::awt::image::DataBuffer> p4) { return call_method<"setPixel", void>(p1, p2, p3, p4); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jni::ref<java::awt::image::DataBuffer> p6) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5, p6); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jfloat>> p5, jni::ref<java::awt::image::DataBuffer> p6) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5, p6); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jdouble>> p5, jni::ref<java::awt::image::DataBuffer> p6) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5, p6); }
	void setSample(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::image::DataBuffer> p5) { return call_method<"setSample", void>(p1, p2, p3, p4, p5); }
	void setSample(jint p1, jint p2, jint p3, jfloat p4, jni::ref<java::awt::image::DataBuffer> p5) { return call_method<"setSample", void>(p1, p2, p3, p4, p5); }
	void setSample(jint p1, jint p2, jint p3, jdouble p4, jni::ref<java::awt::image::DataBuffer> p5) { return call_method<"setSample", void>(p1, p2, p3, p4, p5); }
	void setSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jint>> p6, jni::ref<java::awt::image::DataBuffer> p7) { return call_method<"setSamples", void>(p1, p2, p3, p4, p5, p6, p7); }
	void setSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jfloat>> p6, jni::ref<java::awt::image::DataBuffer> p7) { return call_method<"setSamples", void>(p1, p2, p3, p4, p5, p6, p7); }
	void setSamples(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jdouble>> p6, jni::ref<java::awt::image::DataBuffer> p7) { return call_method<"setSamples", void>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::awt::image::SampleModel> createCompatibleSampleModel(jint p1, jint p2) { return call_method<"createCompatibleSampleModel", jni::ref<java::awt::image::SampleModel>>(p1, p2); }
	jni::ref<java::awt::image::SampleModel> createSubsetSampleModel(jni::ref<jni::array<jint>> p1) { return call_method<"createSubsetSampleModel", jni::ref<java::awt::image::SampleModel>>(p1); }
	jni::ref<java::awt::image::DataBuffer> createDataBuffer() { return call_method<"createDataBuffer", jni::ref<java::awt::image::DataBuffer>>(); }
	jni::ref<jni::array<jint>> getSampleSize() { return call_method<"getSampleSize", jni::ref<jni::array<jint>>>(); }
	jint getSampleSize(jint p1) { return call_method<"getSampleSize", jint>(p1); }

protected:

	SampleModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_SAMPLEMODEL
