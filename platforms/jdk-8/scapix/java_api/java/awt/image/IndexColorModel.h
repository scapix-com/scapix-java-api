// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/image/ColorModel.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_IMAGE_INDEXCOLORMODEL_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_INDEXCOLORMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::image { class IndexColorModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::image::IndexColorModel>
{
	static constexpr fixed_string class_name = "java/awt/image/IndexColorModel";
	using base_classes = std::tuple<scapix::java_api::java::awt::image::ColorModel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_INDEXCOLORMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_IMAGE_INDEXCOLORMODEL)
#define SCAPIX_JAVA_API_JAVA_AWT_IMAGE_INDEXCOLORMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/Raster.h>
#include <scapix/java_api/java/awt/image/SampleModel.h>
#include <scapix/java_api/java/awt/image/WritableRaster.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::image::IndexColorModel : public jni::object_base<"java/awt/image/IndexColorModel",
	java::awt::image::ColorModel>
{
public:

	static jni::ref<java::awt::image::IndexColorModel> new_object(jint p1, jint p2, jni::ref<jni::array<jbyte>> p3, jni::ref<jni::array<jbyte>> p4, jni::ref<jni::array<jbyte>> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::image::IndexColorModel> new_object(jint p1, jint p2, jni::ref<jni::array<jbyte>> p3, jni::ref<jni::array<jbyte>> p4, jni::ref<jni::array<jbyte>> p5, jint p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::image::IndexColorModel> new_object(jint p1, jint p2, jni::ref<jni::array<jbyte>> p3, jni::ref<jni::array<jbyte>> p4, jni::ref<jni::array<jbyte>> p5, jni::ref<jni::array<jbyte>> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::image::IndexColorModel> new_object(jint p1, jint p2, jni::ref<jni::array<jbyte>> p3, jint p4, jboolean p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::image::IndexColorModel> new_object(jint p1, jint p2, jni::ref<jni::array<jbyte>> p3, jint p4, jboolean p5, jint p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::image::IndexColorModel> new_object(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4, jboolean p5, jint p6, jint p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<java::awt::image::IndexColorModel> new_object(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4, jint p5, jni::ref<java::math::BigInteger> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	jint getTransparency() { return call_method<"getTransparency", jint>(); }
	jni::ref<jni::array<jint>> getComponentSize() { return call_method<"getComponentSize", jni::ref<jni::array<jint>>>(); }
	jint getMapSize() { return call_method<"getMapSize", jint>(); }
	jint getTransparentPixel() { return call_method<"getTransparentPixel", jint>(); }
	void getReds(jni::ref<jni::array<jbyte>> p1) { return call_method<"getReds", void>(p1); }
	void getGreens(jni::ref<jni::array<jbyte>> p1) { return call_method<"getGreens", void>(p1); }
	void getBlues(jni::ref<jni::array<jbyte>> p1) { return call_method<"getBlues", void>(p1); }
	void getAlphas(jni::ref<jni::array<jbyte>> p1) { return call_method<"getAlphas", void>(p1); }
	void getRGBs(jni::ref<jni::array<jint>> p1) { return call_method<"getRGBs", void>(p1); }
	jint getRed(jint p1) { return call_method<"getRed", jint>(p1); }
	jint getGreen(jint p1) { return call_method<"getGreen", jint>(p1); }
	jint getBlue(jint p1) { return call_method<"getBlue", jint>(p1); }
	jint getAlpha(jint p1) { return call_method<"getAlpha", jint>(p1); }
	jint getRGB(jint p1) { return call_method<"getRGB", jint>(p1); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<jni::array<jint>> getComponents(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"getComponents", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	jni::ref<jni::array<jint>> getComponents(jni::ref<java::lang::Object> p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"getComponents", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	jint getDataElement(jni::ref<jni::array<jint>> p1, jint p2) { return call_method<"getDataElement", jint>(p1, p2); }
	jni::ref<java::lang::Object> getDataElements(jni::ref<jni::array<jint>> p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::awt::image::WritableRaster> createCompatibleWritableRaster(jint p1, jint p2) { return call_method<"createCompatibleWritableRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2); }
	jboolean isCompatibleRaster(jni::ref<java::awt::image::Raster> p1) { return call_method<"isCompatibleRaster", jboolean>(p1); }
	jni::ref<java::awt::image::SampleModel> createCompatibleSampleModel(jint p1, jint p2) { return call_method<"createCompatibleSampleModel", jni::ref<java::awt::image::SampleModel>>(p1, p2); }
	jboolean isCompatibleSampleModel(jni::ref<java::awt::image::SampleModel> p1) { return call_method<"isCompatibleSampleModel", jboolean>(p1); }
	jni::ref<java::awt::image::BufferedImage> convertToIntDiscrete(jni::ref<java::awt::image::Raster> p1, jboolean p2) { return call_method<"convertToIntDiscrete", jni::ref<java::awt::image::BufferedImage>>(p1, p2); }
	jboolean isValid(jint p1) { return call_method<"isValid", jboolean>(p1); }
	jboolean isValid() { return call_method<"isValid", jboolean>(); }
	jni::ref<java::math::BigInteger> getValidPixels() { return call_method<"getValidPixels", jni::ref<java::math::BigInteger>>(); }
	void finalize() { return call_method<"finalize", void>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	IndexColorModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_IMAGE_INDEXCOLORMODEL
