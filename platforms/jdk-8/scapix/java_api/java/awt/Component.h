// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/awt/MenuContainer.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_COMPONENT_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_COMPONENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Component; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Component>
{
	static constexpr fixed_string class_name = "java/awt/Component";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::image::ImageObserver, scapix::java_api::java::awt::MenuContainer, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_COMPONENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_COMPONENT)
#define SCAPIX_JAVA_API_JAVA_AWT_COMPONENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/AWTEvent.h>
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component_BaselineResizeBehavior.h>
#include <scapix/java_api/java/awt/ComponentOrientation.h>
#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/awt/Cursor.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Event.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/ImageCapabilities.h>
#include <scapix/java_api/java/awt/MenuComponent.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/PopupMenu.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/Toolkit.h>
#include <scapix/java_api/java/awt/dnd/DropTarget.h>
#include <scapix/java_api/java/awt/event/ComponentListener.h>
#include <scapix/java_api/java/awt/event/FocusListener.h>
#include <scapix/java_api/java/awt/event/HierarchyBoundsListener.h>
#include <scapix/java_api/java/awt/event/HierarchyListener.h>
#include <scapix/java_api/java/awt/event/InputMethodListener.h>
#include <scapix/java_api/java/awt/event/KeyListener.h>
#include <scapix/java_api/java/awt/event/MouseListener.h>
#include <scapix/java_api/java/awt/event/MouseMotionListener.h>
#include <scapix/java_api/java/awt/event/MouseWheelListener.h>
#include <scapix/java_api/java/awt/im/InputContext.h>
#include <scapix/java_api/java/awt/im/InputMethodRequests.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/ImageProducer.h>
#include <scapix/java_api/java/awt/image/VolatileImage.h>
#include <scapix/java_api/java/awt/peer/ComponentPeer.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/EventListener.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Component : public jni::object_base<"java/awt/Component",
	java::lang::Object,
	java::awt::image::ImageObserver,
	java::awt::MenuContainer,
	java::io::Serializable>
{
public:

	using BaselineResizeBehavior = Component_BaselineResizeBehavior;

	static jfloat TOP_ALIGNMENT() { return get_static_field<"TOP_ALIGNMENT", jfloat>(); }
	static jfloat CENTER_ALIGNMENT() { return get_static_field<"CENTER_ALIGNMENT", jfloat>(); }
	static jfloat BOTTOM_ALIGNMENT() { return get_static_field<"BOTTOM_ALIGNMENT", jfloat>(); }
	static jfloat LEFT_ALIGNMENT() { return get_static_field<"LEFT_ALIGNMENT", jfloat>(); }
	static jfloat RIGHT_ALIGNMENT() { return get_static_field<"RIGHT_ALIGNMENT", jfloat>(); }

	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void setName(jni::ref<java::lang::String> p1) { return call_method<"setName", void>(p1); }
	jni::ref<java::awt::Container> getParent() { return call_method<"getParent", jni::ref<java::awt::Container>>(); }
	jni::ref<java::awt::peer::ComponentPeer> getPeer() { return call_method<"getPeer", jni::ref<java::awt::peer::ComponentPeer>>(); }
	void setDropTarget(jni::ref<java::awt::dnd::DropTarget> p1) { return call_method<"setDropTarget", void>(p1); }
	jni::ref<java::awt::dnd::DropTarget> getDropTarget() { return call_method<"getDropTarget", jni::ref<java::awt::dnd::DropTarget>>(); }
	jni::ref<java::awt::GraphicsConfiguration> getGraphicsConfiguration() { return call_method<"getGraphicsConfiguration", jni::ref<java::awt::GraphicsConfiguration>>(); }
	jni::ref<java::lang::Object> getTreeLock() { return call_method<"getTreeLock", jni::ref<java::lang::Object>>(); }
	jni::ref<java::awt::Toolkit> getToolkit() { return call_method<"getToolkit", jni::ref<java::awt::Toolkit>>(); }
	jboolean isValid() { return call_method<"isValid", jboolean>(); }
	jboolean isDisplayable() { return call_method<"isDisplayable", jboolean>(); }
	jboolean isVisible() { return call_method<"isVisible", jboolean>(); }
	jni::ref<java::awt::Point> getMousePosition() { return call_method<"getMousePosition", jni::ref<java::awt::Point>>(); }
	jboolean isShowing() { return call_method<"isShowing", jboolean>(); }
	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	void setEnabled(jboolean p1) { return call_method<"setEnabled", void>(p1); }
	void enable() { return call_method<"enable", void>(); }
	void enable(jboolean p1) { return call_method<"enable", void>(p1); }
	void disable() { return call_method<"disable", void>(); }
	jboolean isDoubleBuffered() { return call_method<"isDoubleBuffered", jboolean>(); }
	void enableInputMethods(jboolean p1) { return call_method<"enableInputMethods", void>(p1); }
	void setVisible(jboolean p1) { return call_method<"setVisible", void>(p1); }
	void show() { return call_method<"show", void>(); }
	void show(jboolean p1) { return call_method<"show", void>(p1); }
	void hide() { return call_method<"hide", void>(); }
	jni::ref<java::awt::Color> getForeground() { return call_method<"getForeground", jni::ref<java::awt::Color>>(); }
	void setForeground(jni::ref<java::awt::Color> p1) { return call_method<"setForeground", void>(p1); }
	jboolean isForegroundSet() { return call_method<"isForegroundSet", jboolean>(); }
	jni::ref<java::awt::Color> getBackground() { return call_method<"getBackground", jni::ref<java::awt::Color>>(); }
	void setBackground(jni::ref<java::awt::Color> p1) { return call_method<"setBackground", void>(p1); }
	jboolean isBackgroundSet() { return call_method<"isBackgroundSet", jboolean>(); }
	jni::ref<java::awt::Font> getFont() { return call_method<"getFont", jni::ref<java::awt::Font>>(); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	jboolean isFontSet() { return call_method<"isFontSet", jboolean>(); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	void setLocale(jni::ref<java::util::Locale> p1) { return call_method<"setLocale", void>(p1); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::Point> getLocation() { return call_method<"getLocation", jni::ref<java::awt::Point>>(); }
	jni::ref<java::awt::Point> getLocationOnScreen() { return call_method<"getLocationOnScreen", jni::ref<java::awt::Point>>(); }
	jni::ref<java::awt::Point> location() { return call_method<"location", jni::ref<java::awt::Point>>(); }
	void setLocation(jint p1, jint p2) { return call_method<"setLocation", void>(p1, p2); }
	void move(jint p1, jint p2) { return call_method<"move", void>(p1, p2); }
	void setLocation(jni::ref<java::awt::Point> p1) { return call_method<"setLocation", void>(p1); }
	jni::ref<java::awt::Dimension> getSize() { return call_method<"getSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> size() { return call_method<"size", jni::ref<java::awt::Dimension>>(); }
	void setSize(jint p1, jint p2) { return call_method<"setSize", void>(p1, p2); }
	void resize(jint p1, jint p2) { return call_method<"resize", void>(p1, p2); }
	void setSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setSize", void>(p1); }
	void resize(jni::ref<java::awt::Dimension> p1) { return call_method<"resize", void>(p1); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	jni::ref<java::awt::Rectangle> bounds() { return call_method<"bounds", jni::ref<java::awt::Rectangle>>(); }
	void setBounds(jint p1, jint p2, jint p3, jint p4) { return call_method<"setBounds", void>(p1, p2, p3, p4); }
	void reshape(jint p1, jint p2, jint p3, jint p4) { return call_method<"reshape", void>(p1, p2, p3, p4); }
	void setBounds(jni::ref<java::awt::Rectangle> p1) { return call_method<"setBounds", void>(p1); }
	jint getX() { return call_method<"getX", jint>(); }
	jint getY() { return call_method<"getY", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jni::ref<java::awt::Rectangle> getBounds(jni::ref<java::awt::Rectangle> p1) { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(p1); }
	jni::ref<java::awt::Dimension> getSize(jni::ref<java::awt::Dimension> p1) { return call_method<"getSize", jni::ref<java::awt::Dimension>>(p1); }
	jni::ref<java::awt::Point> getLocation(jni::ref<java::awt::Point> p1) { return call_method<"getLocation", jni::ref<java::awt::Point>>(p1); }
	jboolean isOpaque() { return call_method<"isOpaque", jboolean>(); }
	jboolean isLightweight() { return call_method<"isLightweight", jboolean>(); }
	void setPreferredSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setPreferredSize", void>(p1); }
	jboolean isPreferredSizeSet() { return call_method<"isPreferredSizeSet", jboolean>(); }
	jni::ref<java::awt::Dimension> getPreferredSize() { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> preferredSize() { return call_method<"preferredSize", jni::ref<java::awt::Dimension>>(); }
	void setMinimumSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setMinimumSize", void>(p1); }
	jboolean isMinimumSizeSet() { return call_method<"isMinimumSizeSet", jboolean>(); }
	jni::ref<java::awt::Dimension> getMinimumSize() { return call_method<"getMinimumSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> minimumSize() { return call_method<"minimumSize", jni::ref<java::awt::Dimension>>(); }
	void setMaximumSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setMaximumSize", void>(p1); }
	jboolean isMaximumSizeSet() { return call_method<"isMaximumSizeSet", jboolean>(); }
	jni::ref<java::awt::Dimension> getMaximumSize() { return call_method<"getMaximumSize", jni::ref<java::awt::Dimension>>(); }
	jfloat getAlignmentX() { return call_method<"getAlignmentX", jfloat>(); }
	jfloat getAlignmentY() { return call_method<"getAlignmentY", jfloat>(); }
	jint getBaseline(jint p1, jint p2) { return call_method<"getBaseline", jint>(p1, p2); }
	jni::ref<java::awt::Component_BaselineResizeBehavior> getBaselineResizeBehavior() { return call_method<"getBaselineResizeBehavior", jni::ref<java::awt::Component_BaselineResizeBehavior>>(); }
	void doLayout() { return call_method<"doLayout", void>(); }
	void layout() { return call_method<"layout", void>(); }
	void validate() { return call_method<"validate", void>(); }
	void invalidate() { return call_method<"invalidate", void>(); }
	void revalidate() { return call_method<"revalidate", void>(); }
	jni::ref<java::awt::Graphics> getGraphics() { return call_method<"getGraphics", jni::ref<java::awt::Graphics>>(); }
	jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<java::awt::Font> p1) { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1); }
	void setCursor(jni::ref<java::awt::Cursor> p1) { return call_method<"setCursor", void>(p1); }
	jni::ref<java::awt::Cursor> getCursor() { return call_method<"getCursor", jni::ref<java::awt::Cursor>>(); }
	jboolean isCursorSet() { return call_method<"isCursorSet", jboolean>(); }
	void paint(jni::ref<java::awt::Graphics> p1) { return call_method<"paint", void>(p1); }
	void update(jni::ref<java::awt::Graphics> p1) { return call_method<"update", void>(p1); }
	void paintAll(jni::ref<java::awt::Graphics> p1) { return call_method<"paintAll", void>(p1); }
	void repaint() { return call_method<"repaint", void>(); }
	void repaint(jlong p1) { return call_method<"repaint", void>(p1); }
	void repaint(jint p1, jint p2, jint p3, jint p4) { return call_method<"repaint", void>(p1, p2, p3, p4); }
	void repaint(jlong p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"repaint", void>(p1, p2, p3, p4, p5); }
	void print(jni::ref<java::awt::Graphics> p1) { return call_method<"print", void>(p1); }
	void printAll(jni::ref<java::awt::Graphics> p1) { return call_method<"printAll", void>(p1); }
	jboolean imageUpdate(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"imageUpdate", jboolean>(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::awt::Image> createImage(jni::ref<java::awt::image::ImageProducer> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jint p1, jint p2) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1, p2); }
	jni::ref<java::awt::image::VolatileImage> createVolatileImage(jint p1, jint p2) { return call_method<"createVolatileImage", jni::ref<java::awt::image::VolatileImage>>(p1, p2); }
	jni::ref<java::awt::image::VolatileImage> createVolatileImage(jint p1, jint p2, jni::ref<java::awt::ImageCapabilities> p3) { return call_method<"createVolatileImage", jni::ref<java::awt::image::VolatileImage>>(p1, p2, p3); }
	jboolean prepareImage(jni::ref<java::awt::Image> p1, jni::ref<java::awt::image::ImageObserver> p2) { return call_method<"prepareImage", jboolean>(p1, p2); }
	jboolean prepareImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"prepareImage", jboolean>(p1, p2, p3, p4); }
	jint checkImage(jni::ref<java::awt::Image> p1, jni::ref<java::awt::image::ImageObserver> p2) { return call_method<"checkImage", jint>(p1, p2); }
	jint checkImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"checkImage", jint>(p1, p2, p3, p4); }
	void setIgnoreRepaint(jboolean p1) { return call_method<"setIgnoreRepaint", void>(p1); }
	jboolean getIgnoreRepaint() { return call_method<"getIgnoreRepaint", jboolean>(); }
	jboolean contains(jint p1, jint p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean inside(jint p1, jint p2) { return call_method<"inside", jboolean>(p1, p2); }
	jboolean contains(jni::ref<java::awt::Point> p1) { return call_method<"contains", jboolean>(p1); }
	jni::ref<java::awt::Component> getComponentAt(jint p1, jint p2) { return call_method<"getComponentAt", jni::ref<java::awt::Component>>(p1, p2); }
	jni::ref<java::awt::Component> locate(jint p1, jint p2) { return call_method<"locate", jni::ref<java::awt::Component>>(p1, p2); }
	jni::ref<java::awt::Component> getComponentAt(jni::ref<java::awt::Point> p1) { return call_method<"getComponentAt", jni::ref<java::awt::Component>>(p1); }
	void deliverEvent(jni::ref<java::awt::Event> p1) { return call_method<"deliverEvent", void>(p1); }
	void dispatchEvent(jni::ref<java::awt::AWTEvent> p1) { return call_method<"dispatchEvent", void>(p1); }
	jboolean postEvent(jni::ref<java::awt::Event> p1) { return call_method<"postEvent", jboolean>(p1); }
	void addComponentListener(jni::ref<java::awt::event::ComponentListener> p1) { return call_method<"addComponentListener", void>(p1); }
	void removeComponentListener(jni::ref<java::awt::event::ComponentListener> p1) { return call_method<"removeComponentListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::ComponentListener>> getComponentListeners() { return call_method<"getComponentListeners", jni::ref<jni::array<java::awt::event::ComponentListener>>>(); }
	void addFocusListener(jni::ref<java::awt::event::FocusListener> p1) { return call_method<"addFocusListener", void>(p1); }
	void removeFocusListener(jni::ref<java::awt::event::FocusListener> p1) { return call_method<"removeFocusListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::FocusListener>> getFocusListeners() { return call_method<"getFocusListeners", jni::ref<jni::array<java::awt::event::FocusListener>>>(); }
	void addHierarchyListener(jni::ref<java::awt::event::HierarchyListener> p1) { return call_method<"addHierarchyListener", void>(p1); }
	void removeHierarchyListener(jni::ref<java::awt::event::HierarchyListener> p1) { return call_method<"removeHierarchyListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::HierarchyListener>> getHierarchyListeners() { return call_method<"getHierarchyListeners", jni::ref<jni::array<java::awt::event::HierarchyListener>>>(); }
	void addHierarchyBoundsListener(jni::ref<java::awt::event::HierarchyBoundsListener> p1) { return call_method<"addHierarchyBoundsListener", void>(p1); }
	void removeHierarchyBoundsListener(jni::ref<java::awt::event::HierarchyBoundsListener> p1) { return call_method<"removeHierarchyBoundsListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::HierarchyBoundsListener>> getHierarchyBoundsListeners() { return call_method<"getHierarchyBoundsListeners", jni::ref<jni::array<java::awt::event::HierarchyBoundsListener>>>(); }
	void addKeyListener(jni::ref<java::awt::event::KeyListener> p1) { return call_method<"addKeyListener", void>(p1); }
	void removeKeyListener(jni::ref<java::awt::event::KeyListener> p1) { return call_method<"removeKeyListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::KeyListener>> getKeyListeners() { return call_method<"getKeyListeners", jni::ref<jni::array<java::awt::event::KeyListener>>>(); }
	void addMouseListener(jni::ref<java::awt::event::MouseListener> p1) { return call_method<"addMouseListener", void>(p1); }
	void removeMouseListener(jni::ref<java::awt::event::MouseListener> p1) { return call_method<"removeMouseListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::MouseListener>> getMouseListeners() { return call_method<"getMouseListeners", jni::ref<jni::array<java::awt::event::MouseListener>>>(); }
	void addMouseMotionListener(jni::ref<java::awt::event::MouseMotionListener> p1) { return call_method<"addMouseMotionListener", void>(p1); }
	void removeMouseMotionListener(jni::ref<java::awt::event::MouseMotionListener> p1) { return call_method<"removeMouseMotionListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::MouseMotionListener>> getMouseMotionListeners() { return call_method<"getMouseMotionListeners", jni::ref<jni::array<java::awt::event::MouseMotionListener>>>(); }
	void addMouseWheelListener(jni::ref<java::awt::event::MouseWheelListener> p1) { return call_method<"addMouseWheelListener", void>(p1); }
	void removeMouseWheelListener(jni::ref<java::awt::event::MouseWheelListener> p1) { return call_method<"removeMouseWheelListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::MouseWheelListener>> getMouseWheelListeners() { return call_method<"getMouseWheelListeners", jni::ref<jni::array<java::awt::event::MouseWheelListener>>>(); }
	void addInputMethodListener(jni::ref<java::awt::event::InputMethodListener> p1) { return call_method<"addInputMethodListener", void>(p1); }
	void removeInputMethodListener(jni::ref<java::awt::event::InputMethodListener> p1) { return call_method<"removeInputMethodListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::InputMethodListener>> getInputMethodListeners() { return call_method<"getInputMethodListeners", jni::ref<jni::array<java::awt::event::InputMethodListener>>>(); }
	jni::ref<jni::array<java::util::EventListener>> getListeners(jni::ref<java::lang::Class> p1) { return call_method<"getListeners", jni::ref<jni::array<java::util::EventListener>>>(p1); }
	jni::ref<java::awt::im::InputMethodRequests> getInputMethodRequests() { return call_method<"getInputMethodRequests", jni::ref<java::awt::im::InputMethodRequests>>(); }
	jni::ref<java::awt::im::InputContext> getInputContext() { return call_method<"getInputContext", jni::ref<java::awt::im::InputContext>>(); }
	jboolean handleEvent(jni::ref<java::awt::Event> p1) { return call_method<"handleEvent", jboolean>(p1); }
	jboolean mouseDown(jni::ref<java::awt::Event> p1, jint p2, jint p3) { return call_method<"mouseDown", jboolean>(p1, p2, p3); }
	jboolean mouseDrag(jni::ref<java::awt::Event> p1, jint p2, jint p3) { return call_method<"mouseDrag", jboolean>(p1, p2, p3); }
	jboolean mouseUp(jni::ref<java::awt::Event> p1, jint p2, jint p3) { return call_method<"mouseUp", jboolean>(p1, p2, p3); }
	jboolean mouseMove(jni::ref<java::awt::Event> p1, jint p2, jint p3) { return call_method<"mouseMove", jboolean>(p1, p2, p3); }
	jboolean mouseEnter(jni::ref<java::awt::Event> p1, jint p2, jint p3) { return call_method<"mouseEnter", jboolean>(p1, p2, p3); }
	jboolean mouseExit(jni::ref<java::awt::Event> p1, jint p2, jint p3) { return call_method<"mouseExit", jboolean>(p1, p2, p3); }
	jboolean keyDown(jni::ref<java::awt::Event> p1, jint p2) { return call_method<"keyDown", jboolean>(p1, p2); }
	jboolean keyUp(jni::ref<java::awt::Event> p1, jint p2) { return call_method<"keyUp", jboolean>(p1, p2); }
	jboolean action(jni::ref<java::awt::Event> p1, jni::ref<java::lang::Object> p2) { return call_method<"action", jboolean>(p1, p2); }
	void addNotify() { return call_method<"addNotify", void>(); }
	void removeNotify() { return call_method<"removeNotify", void>(); }
	jboolean gotFocus(jni::ref<java::awt::Event> p1, jni::ref<java::lang::Object> p2) { return call_method<"gotFocus", jboolean>(p1, p2); }
	jboolean lostFocus(jni::ref<java::awt::Event> p1, jni::ref<java::lang::Object> p2) { return call_method<"lostFocus", jboolean>(p1, p2); }
	jboolean isFocusTraversable() { return call_method<"isFocusTraversable", jboolean>(); }
	jboolean isFocusable() { return call_method<"isFocusable", jboolean>(); }
	void setFocusable(jboolean p1) { return call_method<"setFocusable", void>(p1); }
	void setFocusTraversalKeys(jint p1, jni::ref<java::util::Set> p2) { return call_method<"setFocusTraversalKeys", void>(p1, p2); }
	jni::ref<java::util::Set> getFocusTraversalKeys(jint p1) { return call_method<"getFocusTraversalKeys", jni::ref<java::util::Set>>(p1); }
	jboolean areFocusTraversalKeysSet(jint p1) { return call_method<"areFocusTraversalKeysSet", jboolean>(p1); }
	void setFocusTraversalKeysEnabled(jboolean p1) { return call_method<"setFocusTraversalKeysEnabled", void>(p1); }
	jboolean getFocusTraversalKeysEnabled() { return call_method<"getFocusTraversalKeysEnabled", jboolean>(); }
	void requestFocus() { return call_method<"requestFocus", void>(); }
	jboolean requestFocusInWindow() { return call_method<"requestFocusInWindow", jboolean>(); }
	jni::ref<java::awt::Container> getFocusCycleRootAncestor() { return call_method<"getFocusCycleRootAncestor", jni::ref<java::awt::Container>>(); }
	jboolean isFocusCycleRoot(jni::ref<java::awt::Container> p1) { return call_method<"isFocusCycleRoot", jboolean>(p1); }
	void transferFocus() { return call_method<"transferFocus", void>(); }
	void nextFocus() { return call_method<"nextFocus", void>(); }
	void transferFocusBackward() { return call_method<"transferFocusBackward", void>(); }
	void transferFocusUpCycle() { return call_method<"transferFocusUpCycle", void>(); }
	jboolean hasFocus() { return call_method<"hasFocus", jboolean>(); }
	jboolean isFocusOwner() { return call_method<"isFocusOwner", jboolean>(); }
	void add(jni::ref<java::awt::PopupMenu> p1) { return call_method<"add", void>(p1); }
	void remove(jni::ref<java::awt::MenuComponent> p1) { return call_method<"remove", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void list() { return call_method<"list", void>(); }
	void list(jni::ref<java::io::PrintStream> p1) { return call_method<"list", void>(p1); }
	void list(jni::ref<java::io::PrintStream> p1, jint p2) { return call_method<"list", void>(p1, p2); }
	void list(jni::ref<java::io::PrintWriter> p1) { return call_method<"list", void>(p1); }
	void list(jni::ref<java::io::PrintWriter> p1, jint p2) { return call_method<"list", void>(p1, p2); }
	void addPropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_method<"addPropertyChangeListener", void>(p1); }
	void removePropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_method<"removePropertyChangeListener", void>(p1); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners() { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(); }
	void addPropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"addPropertyChangeListener", void>(p1, p2); }
	void removePropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"removePropertyChangeListener", void>(p1, p2); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners(jni::ref<java::lang::String> p1) { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(p1); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jbyte p2, jbyte p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jchar p2, jchar p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jshort p2, jshort p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jlong p2, jlong p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jfloat p2, jfloat p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jdouble p2, jdouble p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void setComponentOrientation(jni::ref<java::awt::ComponentOrientation> p1) { return call_method<"setComponentOrientation", void>(p1); }
	jni::ref<java::awt::ComponentOrientation> getComponentOrientation() { return call_method<"getComponentOrientation", jni::ref<java::awt::ComponentOrientation>>(); }
	void applyComponentOrientation(jni::ref<java::awt::ComponentOrientation> p1) { return call_method<"applyComponentOrientation", void>(p1); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	Component(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_COMPONENT
