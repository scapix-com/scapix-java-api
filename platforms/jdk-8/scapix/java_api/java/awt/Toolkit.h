// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_TOOLKIT_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_TOOLKIT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Toolkit; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Toolkit>
{
	static constexpr fixed_string class_name = "java/awt/Toolkit";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_TOOLKIT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_TOOLKIT)
#define SCAPIX_JAVA_API_JAVA_AWT_TOOLKIT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Cursor.h>
#include <scapix/java_api/java/awt/Dialog_ModalExclusionType.h>
#include <scapix/java_api/java/awt/Dialog_ModalityType.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/EventQueue.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Frame.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/awt/JobAttributes.h>
#include <scapix/java_api/java/awt/PageAttributes.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/PrintJob.h>
#include <scapix/java_api/java/awt/datatransfer/Clipboard.h>
#include <scapix/java_api/java/awt/dnd/DragGestureEvent.h>
#include <scapix/java_api/java/awt/dnd/DragGestureListener.h>
#include <scapix/java_api/java/awt/dnd/DragGestureRecognizer.h>
#include <scapix/java_api/java/awt/dnd/DragSource.h>
#include <scapix/java_api/java/awt/dnd/peer/DragSourceContextPeer.h>
#include <scapix/java_api/java/awt/event/AWTEventListener.h>
#include <scapix/java_api/java/awt/im/InputMethodHighlight.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/awt/image/ImageProducer.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Properties.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Toolkit : public jni::object_base<"java/awt/Toolkit",
	java::lang::Object>
{
public:

	static jni::ref<java::awt::Toolkit> new_object() { return base_::new_object(); }
	void setDynamicLayout(jboolean p1) { return call_method<"setDynamicLayout", void>(p1); }
	jboolean isDynamicLayoutActive() { return call_method<"isDynamicLayoutActive", jboolean>(); }
	jni::ref<java::awt::Dimension> getScreenSize() { return call_method<"getScreenSize", jni::ref<java::awt::Dimension>>(); }
	jint getScreenResolution() { return call_method<"getScreenResolution", jint>(); }
	jni::ref<java::awt::Insets> getScreenInsets(jni::ref<java::awt::GraphicsConfiguration> p1) { return call_method<"getScreenInsets", jni::ref<java::awt::Insets>>(p1); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<jni::array<java::lang::String>> getFontList() { return call_method<"getFontList", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<java::awt::Font> p1) { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1); }
	void sync() { return call_method<"sync", void>(); }
	static jni::ref<java::awt::Toolkit> getDefaultToolkit() { return call_static_method<"getDefaultToolkit", jni::ref<java::awt::Toolkit>>(); }
	jni::ref<java::awt::Image> getImage(jni::ref<java::lang::String> p1) { return call_method<"getImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> getImage(jni::ref<java::net::URL> p1) { return call_method<"getImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jni::ref<java::lang::String> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jni::ref<java::net::URL> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	jboolean prepareImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"prepareImage", jboolean>(p1, p2, p3, p4); }
	jint checkImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"checkImage", jint>(p1, p2, p3, p4); }
	jni::ref<java::awt::Image> createImage(jni::ref<java::awt::image::ImageProducer> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jni::ref<jni::array<jbyte>> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1, p2, p3); }
	jni::ref<java::awt::PrintJob> getPrintJob(jni::ref<java::awt::Frame> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Properties> p3) { return call_method<"getPrintJob", jni::ref<java::awt::PrintJob>>(p1, p2, p3); }
	jni::ref<java::awt::PrintJob> getPrintJob(jni::ref<java::awt::Frame> p1, jni::ref<java::lang::String> p2, jni::ref<java::awt::JobAttributes> p3, jni::ref<java::awt::PageAttributes> p4) { return call_method<"getPrintJob", jni::ref<java::awt::PrintJob>>(p1, p2, p3, p4); }
	void beep() { return call_method<"beep", void>(); }
	jni::ref<java::awt::datatransfer::Clipboard> getSystemClipboard() { return call_method<"getSystemClipboard", jni::ref<java::awt::datatransfer::Clipboard>>(); }
	jni::ref<java::awt::datatransfer::Clipboard> getSystemSelection() { return call_method<"getSystemSelection", jni::ref<java::awt::datatransfer::Clipboard>>(); }
	jint getMenuShortcutKeyMask() { return call_method<"getMenuShortcutKeyMask", jint>(); }
	jboolean getLockingKeyState(jint p1) { return call_method<"getLockingKeyState", jboolean>(p1); }
	void setLockingKeyState(jint p1, jboolean p2) { return call_method<"setLockingKeyState", void>(p1, p2); }
	jni::ref<java::awt::Cursor> createCustomCursor(jni::ref<java::awt::Image> p1, jni::ref<java::awt::Point> p2, jni::ref<java::lang::String> p3) { return call_method<"createCustomCursor", jni::ref<java::awt::Cursor>>(p1, p2, p3); }
	jni::ref<java::awt::Dimension> getBestCursorSize(jint p1, jint p2) { return call_method<"getBestCursorSize", jni::ref<java::awt::Dimension>>(p1, p2); }
	jint getMaximumCursorColors() { return call_method<"getMaximumCursorColors", jint>(); }
	jboolean isFrameStateSupported(jint p1) { return call_method<"isFrameStateSupported", jboolean>(p1); }
	static jni::ref<java::lang::String> getProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"getProperty", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::awt::EventQueue> getSystemEventQueue() { return call_method<"getSystemEventQueue", jni::ref<java::awt::EventQueue>>(); }
	jni::ref<java::awt::dnd::peer::DragSourceContextPeer> createDragSourceContextPeer(jni::ref<java::awt::dnd::DragGestureEvent> p1) { return call_method<"createDragSourceContextPeer", jni::ref<java::awt::dnd::peer::DragSourceContextPeer>>(p1); }
	jni::ref<java::awt::dnd::DragGestureRecognizer> createDragGestureRecognizer(jni::ref<java::lang::Class> p1, jni::ref<java::awt::dnd::DragSource> p2, jni::ref<java::awt::Component> p3, jint p4, jni::ref<java::awt::dnd::DragGestureListener> p5) { return call_method<"createDragGestureRecognizer", jni::ref<java::awt::dnd::DragGestureRecognizer>>(p1, p2, p3, p4, p5); }
	jni::ref<java::lang::Object> getDesktopProperty(jni::ref<java::lang::String> p1) { return call_method<"getDesktopProperty", jni::ref<java::lang::Object>>(p1); }
	void addPropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"addPropertyChangeListener", void>(p1, p2); }
	void removePropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"removePropertyChangeListener", void>(p1, p2); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners() { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners(jni::ref<java::lang::String> p1) { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(p1); }
	jboolean isAlwaysOnTopSupported() { return call_method<"isAlwaysOnTopSupported", jboolean>(); }
	jboolean isModalityTypeSupported(jni::ref<java::awt::Dialog_ModalityType> p1) { return call_method<"isModalityTypeSupported", jboolean>(p1); }
	jboolean isModalExclusionTypeSupported(jni::ref<java::awt::Dialog_ModalExclusionType> p1) { return call_method<"isModalExclusionTypeSupported", jboolean>(p1); }
	void addAWTEventListener(jni::ref<java::awt::event::AWTEventListener> p1, jlong p2) { return call_method<"addAWTEventListener", void>(p1, p2); }
	void removeAWTEventListener(jni::ref<java::awt::event::AWTEventListener> p1) { return call_method<"removeAWTEventListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::AWTEventListener>> getAWTEventListeners() { return call_method<"getAWTEventListeners", jni::ref<jni::array<java::awt::event::AWTEventListener>>>(); }
	jni::ref<jni::array<java::awt::event::AWTEventListener>> getAWTEventListeners(jlong p1) { return call_method<"getAWTEventListeners", jni::ref<jni::array<java::awt::event::AWTEventListener>>>(p1); }
	jni::ref<java::util::Map> mapInputMethodHighlight(jni::ref<java::awt::im::InputMethodHighlight> p1) { return call_method<"mapInputMethodHighlight", jni::ref<java::util::Map>>(p1); }
	jboolean areExtraMouseButtonsEnabled() { return call_method<"areExtraMouseButtonsEnabled", jboolean>(); }

protected:

	Toolkit(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_TOOLKIT
