// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/TextComponent.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_TEXTAREA_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_TEXTAREA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class TextArea; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::TextArea>
{
	static constexpr fixed_string class_name = "java/awt/TextArea";
	using base_classes = std::tuple<scapix::java_api::java::awt::TextComponent>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_TEXTAREA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_TEXTAREA)
#define SCAPIX_JAVA_API_JAVA_AWT_TEXTAREA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::TextArea : public jni::object_base<"java/awt/TextArea",
	java::awt::TextComponent>
{
public:

	static jint SCROLLBARS_BOTH() { return get_static_field<"SCROLLBARS_BOTH", jint>(); }
	static jint SCROLLBARS_VERTICAL_ONLY() { return get_static_field<"SCROLLBARS_VERTICAL_ONLY", jint>(); }
	static jint SCROLLBARS_HORIZONTAL_ONLY() { return get_static_field<"SCROLLBARS_HORIZONTAL_ONLY", jint>(); }
	static jint SCROLLBARS_NONE() { return get_static_field<"SCROLLBARS_NONE", jint>(); }

	static jni::ref<java::awt::TextArea> new_object() { return base_::new_object(); }
	static jni::ref<java::awt::TextArea> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::TextArea> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::TextArea> new_object(jni::ref<java::lang::String> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::TextArea> new_object(jni::ref<java::lang::String> p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	void addNotify() { return call_method<"addNotify", void>(); }
	void insert(jni::ref<java::lang::String> p1, jint p2) { return call_method<"insert", void>(p1, p2); }
	void insertText(jni::ref<java::lang::String> p1, jint p2) { return call_method<"insertText", void>(p1, p2); }
	void append(jni::ref<java::lang::String> p1) { return call_method<"append", void>(p1); }
	void appendText(jni::ref<java::lang::String> p1) { return call_method<"appendText", void>(p1); }
	void replaceRange(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"replaceRange", void>(p1, p2, p3); }
	void replaceText(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"replaceText", void>(p1, p2, p3); }
	jint getRows() { return call_method<"getRows", jint>(); }
	void setRows(jint p1) { return call_method<"setRows", void>(p1); }
	jint getColumns() { return call_method<"getColumns", jint>(); }
	void setColumns(jint p1) { return call_method<"setColumns", void>(p1); }
	jint getScrollbarVisibility() { return call_method<"getScrollbarVisibility", jint>(); }
	jni::ref<java::awt::Dimension> getPreferredSize(jint p1, jint p2) { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(p1, p2); }
	jni::ref<java::awt::Dimension> preferredSize(jint p1, jint p2) { return call_method<"preferredSize", jni::ref<java::awt::Dimension>>(p1, p2); }
	jni::ref<java::awt::Dimension> getPreferredSize() { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> preferredSize() { return call_method<"preferredSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getMinimumSize(jint p1, jint p2) { return call_method<"getMinimumSize", jni::ref<java::awt::Dimension>>(p1, p2); }
	jni::ref<java::awt::Dimension> minimumSize(jint p1, jint p2) { return call_method<"minimumSize", jni::ref<java::awt::Dimension>>(p1, p2); }
	jni::ref<java::awt::Dimension> getMinimumSize() { return call_method<"getMinimumSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> minimumSize() { return call_method<"minimumSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	TextArea(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_TEXTAREA
