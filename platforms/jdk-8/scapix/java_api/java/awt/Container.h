// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Component.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_CONTAINER_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_CONTAINER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Container; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Container>
{
	static constexpr fixed_string class_name = "java/awt/Container";
	using base_classes = std::tuple<scapix::java_api::java::awt::Component>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_CONTAINER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_CONTAINER)
#define SCAPIX_JAVA_API_JAVA_AWT_CONTAINER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/ComponentOrientation.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Event.h>
#include <scapix/java_api/java/awt/FocusTraversalPolicy.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/awt/LayoutManager.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/event/ContainerListener.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/EventListener.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Container : public jni::object_base<"java/awt/Container",
	java::awt::Component>
{
public:

	static jni::ref<java::awt::Container> new_object() { return base_::new_object(); }
	jint getComponentCount() { return call_method<"getComponentCount", jint>(); }
	jint countComponents() { return call_method<"countComponents", jint>(); }
	jni::ref<java::awt::Component> getComponent(jint p1) { return call_method<"getComponent", jni::ref<java::awt::Component>>(p1); }
	jni::ref<jni::array<java::awt::Component>> getComponents() { return call_method<"getComponents", jni::ref<jni::array<java::awt::Component>>>(); }
	jni::ref<java::awt::Insets> getInsets() { return call_method<"getInsets", jni::ref<java::awt::Insets>>(); }
	jni::ref<java::awt::Insets> insets() { return call_method<"insets", jni::ref<java::awt::Insets>>(); }
	jni::ref<java::awt::Component> add(jni::ref<java::awt::Component> p1) { return call_method<"add", jni::ref<java::awt::Component>>(p1); }
	jni::ref<java::awt::Component> add(jni::ref<java::lang::String> p1, jni::ref<java::awt::Component> p2) { return call_method<"add", jni::ref<java::awt::Component>>(p1, p2); }
	jni::ref<java::awt::Component> add(jni::ref<java::awt::Component> p1, jint p2) { return call_method<"add", jni::ref<java::awt::Component>>(p1, p2); }
	void setComponentZOrder(jni::ref<java::awt::Component> p1, jint p2) { return call_method<"setComponentZOrder", void>(p1, p2); }
	jint getComponentZOrder(jni::ref<java::awt::Component> p1) { return call_method<"getComponentZOrder", jint>(p1); }
	void add(jni::ref<java::awt::Component> p1, jni::ref<java::lang::Object> p2) { return call_method<"add", void>(p1, p2); }
	void add(jni::ref<java::awt::Component> p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"add", void>(p1, p2, p3); }
	void remove(jint p1) { return call_method<"remove", void>(p1); }
	void remove(jni::ref<java::awt::Component> p1) { return call_method<"remove", void>(p1); }
	void removeAll() { return call_method<"removeAll", void>(); }
	jni::ref<java::awt::LayoutManager> getLayout() { return call_method<"getLayout", jni::ref<java::awt::LayoutManager>>(); }
	void setLayout(jni::ref<java::awt::LayoutManager> p1) { return call_method<"setLayout", void>(p1); }
	void doLayout() { return call_method<"doLayout", void>(); }
	void layout() { return call_method<"layout", void>(); }
	jboolean isValidateRoot() { return call_method<"isValidateRoot", jboolean>(); }
	void invalidate() { return call_method<"invalidate", void>(); }
	void validate() { return call_method<"validate", void>(); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	jni::ref<java::awt::Dimension> getPreferredSize() { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> preferredSize() { return call_method<"preferredSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getMinimumSize() { return call_method<"getMinimumSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> minimumSize() { return call_method<"minimumSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getMaximumSize() { return call_method<"getMaximumSize", jni::ref<java::awt::Dimension>>(); }
	jfloat getAlignmentX() { return call_method<"getAlignmentX", jfloat>(); }
	jfloat getAlignmentY() { return call_method<"getAlignmentY", jfloat>(); }
	void paint(jni::ref<java::awt::Graphics> p1) { return call_method<"paint", void>(p1); }
	void update(jni::ref<java::awt::Graphics> p1) { return call_method<"update", void>(p1); }
	void print(jni::ref<java::awt::Graphics> p1) { return call_method<"print", void>(p1); }
	void paintComponents(jni::ref<java::awt::Graphics> p1) { return call_method<"paintComponents", void>(p1); }
	void printComponents(jni::ref<java::awt::Graphics> p1) { return call_method<"printComponents", void>(p1); }
	void addContainerListener(jni::ref<java::awt::event::ContainerListener> p1) { return call_method<"addContainerListener", void>(p1); }
	void removeContainerListener(jni::ref<java::awt::event::ContainerListener> p1) { return call_method<"removeContainerListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::ContainerListener>> getContainerListeners() { return call_method<"getContainerListeners", jni::ref<jni::array<java::awt::event::ContainerListener>>>(); }
	jni::ref<jni::array<java::util::EventListener>> getListeners(jni::ref<java::lang::Class> p1) { return call_method<"getListeners", jni::ref<jni::array<java::util::EventListener>>>(p1); }
	void deliverEvent(jni::ref<java::awt::Event> p1) { return call_method<"deliverEvent", void>(p1); }
	jni::ref<java::awt::Component> getComponentAt(jint p1, jint p2) { return call_method<"getComponentAt", jni::ref<java::awt::Component>>(p1, p2); }
	jni::ref<java::awt::Component> locate(jint p1, jint p2) { return call_method<"locate", jni::ref<java::awt::Component>>(p1, p2); }
	jni::ref<java::awt::Component> getComponentAt(jni::ref<java::awt::Point> p1) { return call_method<"getComponentAt", jni::ref<java::awt::Component>>(p1); }
	jni::ref<java::awt::Point> getMousePosition(jboolean p1) { return call_method<"getMousePosition", jni::ref<java::awt::Point>>(p1); }
	jni::ref<java::awt::Component> findComponentAt(jint p1, jint p2) { return call_method<"findComponentAt", jni::ref<java::awt::Component>>(p1, p2); }
	jni::ref<java::awt::Component> findComponentAt(jni::ref<java::awt::Point> p1) { return call_method<"findComponentAt", jni::ref<java::awt::Component>>(p1); }
	void addNotify() { return call_method<"addNotify", void>(); }
	void removeNotify() { return call_method<"removeNotify", void>(); }
	jboolean isAncestorOf(jni::ref<java::awt::Component> p1) { return call_method<"isAncestorOf", jboolean>(p1); }
	void list(jni::ref<java::io::PrintStream> p1, jint p2) { return call_method<"list", void>(p1, p2); }
	void list(jni::ref<java::io::PrintWriter> p1, jint p2) { return call_method<"list", void>(p1, p2); }
	void setFocusTraversalKeys(jint p1, jni::ref<java::util::Set> p2) { return call_method<"setFocusTraversalKeys", void>(p1, p2); }
	jni::ref<java::util::Set> getFocusTraversalKeys(jint p1) { return call_method<"getFocusTraversalKeys", jni::ref<java::util::Set>>(p1); }
	jboolean areFocusTraversalKeysSet(jint p1) { return call_method<"areFocusTraversalKeysSet", jboolean>(p1); }
	jboolean isFocusCycleRoot(jni::ref<java::awt::Container> p1) { return call_method<"isFocusCycleRoot", jboolean>(p1); }
	void setFocusTraversalPolicy(jni::ref<java::awt::FocusTraversalPolicy> p1) { return call_method<"setFocusTraversalPolicy", void>(p1); }
	jni::ref<java::awt::FocusTraversalPolicy> getFocusTraversalPolicy() { return call_method<"getFocusTraversalPolicy", jni::ref<java::awt::FocusTraversalPolicy>>(); }
	jboolean isFocusTraversalPolicySet() { return call_method<"isFocusTraversalPolicySet", jboolean>(); }
	void setFocusCycleRoot(jboolean p1) { return call_method<"setFocusCycleRoot", void>(p1); }
	jboolean isFocusCycleRoot() { return call_method<"isFocusCycleRoot", jboolean>(); }
	void setFocusTraversalPolicyProvider(jboolean p1) { return call_method<"setFocusTraversalPolicyProvider", void>(p1); }
	jboolean isFocusTraversalPolicyProvider() { return call_method<"isFocusTraversalPolicyProvider", jboolean>(); }
	void transferFocusDownCycle() { return call_method<"transferFocusDownCycle", void>(); }
	void applyComponentOrientation(jni::ref<java::awt::ComponentOrientation> p1) { return call_method<"applyComponentOrientation", void>(p1); }
	void addPropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_method<"addPropertyChangeListener", void>(p1); }
	void addPropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"addPropertyChangeListener", void>(p1, p2); }

protected:

	Container(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_CONTAINER
