// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_RECTANGLE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_RECTANGLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Rectangle; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Rectangle>
{
	static constexpr fixed_string class_name = "java/awt/Rectangle";
	using base_classes = std::tuple<scapix::java_api::java::awt::geom::Rectangle2D, scapix::java_api::java::awt::Shape, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_RECTANGLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_RECTANGLE)
#define SCAPIX_JAVA_API_JAVA_AWT_RECTANGLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Rectangle : public jni::object_base<"java/awt/Rectangle",
	java::awt::geom::Rectangle2D,
	java::awt::Shape,
	java::io::Serializable>
{
public:

	jint x() { return get_field<"x", jint>(); }
	void x(jint v) { set_field<"x", jint>(v); }
	jint y() { return get_field<"y", jint>(); }
	void y(jint v) { set_field<"y", jint>(v); }
	jint width() { return get_field<"width", jint>(); }
	void width(jint v) { set_field<"width", jint>(v); }
	jint height() { return get_field<"height", jint>(); }
	void height(jint v) { set_field<"height", jint>(v); }

	static jni::ref<java::awt::Rectangle> new_object() { return base_::new_object(); }
	static jni::ref<java::awt::Rectangle> new_object(jni::ref<java::awt::Rectangle> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::Rectangle> new_object(jint p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::awt::Rectangle> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::Rectangle> new_object(jni::ref<java::awt::Point> p1, jni::ref<java::awt::Dimension> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::awt::Rectangle> new_object(jni::ref<java::awt::Point> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::Rectangle> new_object(jni::ref<java::awt::Dimension> p1) { return base_::new_object(p1); }
	jdouble getX() { return call_method<"getX", jdouble>(); }
	jdouble getY() { return call_method<"getY", jdouble>(); }
	jdouble getWidth() { return call_method<"getWidth", jdouble>(); }
	jdouble getHeight() { return call_method<"getHeight", jdouble>(); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	jni::ref<java::awt::geom::Rectangle2D> getBounds2D() { return call_method<"getBounds2D", jni::ref<java::awt::geom::Rectangle2D>>(); }
	void setBounds(jni::ref<java::awt::Rectangle> p1) { return call_method<"setBounds", void>(p1); }
	void setBounds(jint p1, jint p2, jint p3, jint p4) { return call_method<"setBounds", void>(p1, p2, p3, p4); }
	void setRect(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"setRect", void>(p1, p2, p3, p4); }
	void reshape(jint p1, jint p2, jint p3, jint p4) { return call_method<"reshape", void>(p1, p2, p3, p4); }
	jni::ref<java::awt::Point> getLocation() { return call_method<"getLocation", jni::ref<java::awt::Point>>(); }
	void setLocation(jni::ref<java::awt::Point> p1) { return call_method<"setLocation", void>(p1); }
	void setLocation(jint p1, jint p2) { return call_method<"setLocation", void>(p1, p2); }
	void move(jint p1, jint p2) { return call_method<"move", void>(p1, p2); }
	void translate(jint p1, jint p2) { return call_method<"translate", void>(p1, p2); }
	jni::ref<java::awt::Dimension> getSize() { return call_method<"getSize", jni::ref<java::awt::Dimension>>(); }
	void setSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setSize", void>(p1); }
	void setSize(jint p1, jint p2) { return call_method<"setSize", void>(p1, p2); }
	void resize(jint p1, jint p2) { return call_method<"resize", void>(p1, p2); }
	jboolean contains(jni::ref<java::awt::Point> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean contains(jint p1, jint p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean contains(jni::ref<java::awt::Rectangle> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean contains(jint p1, jint p2, jint p3, jint p4) { return call_method<"contains", jboolean>(p1, p2, p3, p4); }
	jboolean inside(jint p1, jint p2) { return call_method<"inside", jboolean>(p1, p2); }
	jboolean intersects(jni::ref<java::awt::Rectangle> p1) { return call_method<"intersects", jboolean>(p1); }
	jni::ref<java::awt::Rectangle> intersection(jni::ref<java::awt::Rectangle> p1) { return call_method<"intersection", jni::ref<java::awt::Rectangle>>(p1); }
	jni::ref<java::awt::Rectangle> union_(jni::ref<java::awt::Rectangle> p1) { return call_method<"union", jni::ref<java::awt::Rectangle>>(p1); }
	void add(jint p1, jint p2) { return call_method<"add", void>(p1, p2); }
	void add(jni::ref<java::awt::Point> p1) { return call_method<"add", void>(p1); }
	void add(jni::ref<java::awt::Rectangle> p1) { return call_method<"add", void>(p1); }
	void grow(jint p1, jint p2) { return call_method<"grow", void>(p1, p2); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jint outcode(jdouble p1, jdouble p2) { return call_method<"outcode", jint>(p1, p2); }
	jni::ref<java::awt::geom::Rectangle2D> createIntersection(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"createIntersection", jni::ref<java::awt::geom::Rectangle2D>>(p1); }
	jni::ref<java::awt::geom::Rectangle2D> createUnion(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"createUnion", jni::ref<java::awt::geom::Rectangle2D>>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Rectangle(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_RECTANGLE
