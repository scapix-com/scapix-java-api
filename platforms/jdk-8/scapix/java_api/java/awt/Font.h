// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_FONT_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_FONT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Font; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Font>
{
	static constexpr fixed_string class_name = "java/awt/Font";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_FONT)
#define SCAPIX_JAVA_API_JAVA_AWT_FONT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/font/FontRenderContext.h>
#include <scapix/java_api/java/awt/font/GlyphVector.h>
#include <scapix/java_api/java/awt/font/LineMetrics.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/java/awt/peer/FontPeer.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator_Attribute.h>
#include <scapix/java_api/java/text/CharacterIterator.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Font : public jni::object_base<"java/awt/Font",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::lang::String> DIALOG() { return get_static_field<"DIALOG", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DIALOG_INPUT() { return get_static_field<"DIALOG_INPUT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SANS_SERIF() { return get_static_field<"SANS_SERIF", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERIF() { return get_static_field<"SERIF", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MONOSPACED() { return get_static_field<"MONOSPACED", jni::ref<java::lang::String>>(); }
	static jint PLAIN() { return get_static_field<"PLAIN", jint>(); }
	static jint BOLD() { return get_static_field<"BOLD", jint>(); }
	static jint ITALIC() { return get_static_field<"ITALIC", jint>(); }
	static jint ROMAN_BASELINE() { return get_static_field<"ROMAN_BASELINE", jint>(); }
	static jint CENTER_BASELINE() { return get_static_field<"CENTER_BASELINE", jint>(); }
	static jint HANGING_BASELINE() { return get_static_field<"HANGING_BASELINE", jint>(); }
	static jint TRUETYPE_FONT() { return get_static_field<"TRUETYPE_FONT", jint>(); }
	static jint TYPE1_FONT() { return get_static_field<"TYPE1_FONT", jint>(); }
	static jint LAYOUT_LEFT_TO_RIGHT() { return get_static_field<"LAYOUT_LEFT_TO_RIGHT", jint>(); }
	static jint LAYOUT_RIGHT_TO_LEFT() { return get_static_field<"LAYOUT_RIGHT_TO_LEFT", jint>(); }
	static jint LAYOUT_NO_START_CONTEXT() { return get_static_field<"LAYOUT_NO_START_CONTEXT", jint>(); }
	static jint LAYOUT_NO_LIMIT_CONTEXT() { return get_static_field<"LAYOUT_NO_LIMIT_CONTEXT", jint>(); }

	jni::ref<java::awt::peer::FontPeer> getPeer() { return call_method<"getPeer", jni::ref<java::awt::peer::FontPeer>>(); }
	static jni::ref<java::awt::Font> new_object(jni::ref<java::lang::String> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::awt::Font> new_object(jni::ref<java::util::Map> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::Font> getFont(jni::ref<java::util::Map> p1) { return call_static_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	static jni::ref<java::awt::Font> createFont(jint p1, jni::ref<java::io::InputStream> p2) { return call_static_method<"createFont", jni::ref<java::awt::Font>>(p1, p2); }
	static jni::ref<java::awt::Font> createFont(jint p1, jni::ref<java::io::File> p2) { return call_static_method<"createFont", jni::ref<java::awt::Font>>(p1, p2); }
	jni::ref<java::awt::geom::AffineTransform> getTransform() { return call_method<"getTransform", jni::ref<java::awt::geom::AffineTransform>>(); }
	jni::ref<java::lang::String> getFamily() { return call_method<"getFamily", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFamily(jni::ref<java::util::Locale> p1) { return call_method<"getFamily", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getPSName() { return call_method<"getPSName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFontName() { return call_method<"getFontName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFontName(jni::ref<java::util::Locale> p1) { return call_method<"getFontName", jni::ref<java::lang::String>>(p1); }
	jint getStyle() { return call_method<"getStyle", jint>(); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jfloat getSize2D() { return call_method<"getSize2D", jfloat>(); }
	jboolean isPlain() { return call_method<"isPlain", jboolean>(); }
	jboolean isBold() { return call_method<"isBold", jboolean>(); }
	jboolean isItalic() { return call_method<"isItalic", jboolean>(); }
	jboolean isTransformed() { return call_method<"isTransformed", jboolean>(); }
	jboolean hasLayoutAttributes() { return call_method<"hasLayoutAttributes", jboolean>(); }
	static jni::ref<java::awt::Font> getFont(jni::ref<java::lang::String> p1) { return call_static_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	static jni::ref<java::awt::Font> decode(jni::ref<java::lang::String> p1) { return call_static_method<"decode", jni::ref<java::awt::Font>>(p1); }
	static jni::ref<java::awt::Font> getFont(jni::ref<java::lang::String> p1, jni::ref<java::awt::Font> p2) { return call_static_method<"getFont", jni::ref<java::awt::Font>>(p1, p2); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint getNumGlyphs() { return call_method<"getNumGlyphs", jint>(); }
	jint getMissingGlyphCode() { return call_method<"getMissingGlyphCode", jint>(); }
	jbyte getBaselineFor(jchar p1) { return call_method<"getBaselineFor", jbyte>(p1); }
	jni::ref<java::util::Map> getAttributes() { return call_method<"getAttributes", jni::ref<java::util::Map>>(); }
	jni::ref<jni::array<java::text::AttributedCharacterIterator_Attribute>> getAvailableAttributes() { return call_method<"getAvailableAttributes", jni::ref<jni::array<java::text::AttributedCharacterIterator_Attribute>>>(); }
	jni::ref<java::awt::Font> deriveFont(jint p1, jfloat p2) { return call_method<"deriveFont", jni::ref<java::awt::Font>>(p1, p2); }
	jni::ref<java::awt::Font> deriveFont(jint p1, jni::ref<java::awt::geom::AffineTransform> p2) { return call_method<"deriveFont", jni::ref<java::awt::Font>>(p1, p2); }
	jni::ref<java::awt::Font> deriveFont(jfloat p1) { return call_method<"deriveFont", jni::ref<java::awt::Font>>(p1); }
	jni::ref<java::awt::Font> deriveFont(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"deriveFont", jni::ref<java::awt::Font>>(p1); }
	jni::ref<java::awt::Font> deriveFont(jint p1) { return call_method<"deriveFont", jni::ref<java::awt::Font>>(p1); }
	jni::ref<java::awt::Font> deriveFont(jni::ref<java::util::Map> p1) { return call_method<"deriveFont", jni::ref<java::awt::Font>>(p1); }
	jboolean canDisplay(jchar p1) { return call_method<"canDisplay", jboolean>(p1); }
	jboolean canDisplay(jint p1) { return call_method<"canDisplay", jboolean>(p1); }
	jint canDisplayUpTo(jni::ref<java::lang::String> p1) { return call_method<"canDisplayUpTo", jint>(p1); }
	jint canDisplayUpTo(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"canDisplayUpTo", jint>(p1, p2, p3); }
	jint canDisplayUpTo(jni::ref<java::text::CharacterIterator> p1, jint p2, jint p3) { return call_method<"canDisplayUpTo", jint>(p1, p2, p3); }
	jfloat getItalicAngle() { return call_method<"getItalicAngle", jfloat>(); }
	jboolean hasUniformLineMetrics() { return call_method<"hasUniformLineMetrics", jboolean>(); }
	jni::ref<java::awt::font::LineMetrics> getLineMetrics(jni::ref<java::lang::String> p1, jni::ref<java::awt::font::FontRenderContext> p2) { return call_method<"getLineMetrics", jni::ref<java::awt::font::LineMetrics>>(p1, p2); }
	jni::ref<java::awt::font::LineMetrics> getLineMetrics(jni::ref<java::lang::String> p1, jint p2, jint p3, jni::ref<java::awt::font::FontRenderContext> p4) { return call_method<"getLineMetrics", jni::ref<java::awt::font::LineMetrics>>(p1, p2, p3, p4); }
	jni::ref<java::awt::font::LineMetrics> getLineMetrics(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jni::ref<java::awt::font::FontRenderContext> p4) { return call_method<"getLineMetrics", jni::ref<java::awt::font::LineMetrics>>(p1, p2, p3, p4); }
	jni::ref<java::awt::font::LineMetrics> getLineMetrics(jni::ref<java::text::CharacterIterator> p1, jint p2, jint p3, jni::ref<java::awt::font::FontRenderContext> p4) { return call_method<"getLineMetrics", jni::ref<java::awt::font::LineMetrics>>(p1, p2, p3, p4); }
	jni::ref<java::awt::geom::Rectangle2D> getStringBounds(jni::ref<java::lang::String> p1, jni::ref<java::awt::font::FontRenderContext> p2) { return call_method<"getStringBounds", jni::ref<java::awt::geom::Rectangle2D>>(p1, p2); }
	jni::ref<java::awt::geom::Rectangle2D> getStringBounds(jni::ref<java::lang::String> p1, jint p2, jint p3, jni::ref<java::awt::font::FontRenderContext> p4) { return call_method<"getStringBounds", jni::ref<java::awt::geom::Rectangle2D>>(p1, p2, p3, p4); }
	jni::ref<java::awt::geom::Rectangle2D> getStringBounds(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jni::ref<java::awt::font::FontRenderContext> p4) { return call_method<"getStringBounds", jni::ref<java::awt::geom::Rectangle2D>>(p1, p2, p3, p4); }
	jni::ref<java::awt::geom::Rectangle2D> getStringBounds(jni::ref<java::text::CharacterIterator> p1, jint p2, jint p3, jni::ref<java::awt::font::FontRenderContext> p4) { return call_method<"getStringBounds", jni::ref<java::awt::geom::Rectangle2D>>(p1, p2, p3, p4); }
	jni::ref<java::awt::geom::Rectangle2D> getMaxCharBounds(jni::ref<java::awt::font::FontRenderContext> p1) { return call_method<"getMaxCharBounds", jni::ref<java::awt::geom::Rectangle2D>>(p1); }
	jni::ref<java::awt::font::GlyphVector> createGlyphVector(jni::ref<java::awt::font::FontRenderContext> p1, jni::ref<java::lang::String> p2) { return call_method<"createGlyphVector", jni::ref<java::awt::font::GlyphVector>>(p1, p2); }
	jni::ref<java::awt::font::GlyphVector> createGlyphVector(jni::ref<java::awt::font::FontRenderContext> p1, jni::ref<jni::array<jchar>> p2) { return call_method<"createGlyphVector", jni::ref<java::awt::font::GlyphVector>>(p1, p2); }
	jni::ref<java::awt::font::GlyphVector> createGlyphVector(jni::ref<java::awt::font::FontRenderContext> p1, jni::ref<java::text::CharacterIterator> p2) { return call_method<"createGlyphVector", jni::ref<java::awt::font::GlyphVector>>(p1, p2); }
	jni::ref<java::awt::font::GlyphVector> createGlyphVector(jni::ref<java::awt::font::FontRenderContext> p1, jni::ref<jni::array<jint>> p2) { return call_method<"createGlyphVector", jni::ref<java::awt::font::GlyphVector>>(p1, p2); }
	jni::ref<java::awt::font::GlyphVector> layoutGlyphVector(jni::ref<java::awt::font::FontRenderContext> p1, jni::ref<jni::array<jchar>> p2, jint p3, jint p4, jint p5) { return call_method<"layoutGlyphVector", jni::ref<java::awt::font::GlyphVector>>(p1, p2, p3, p4, p5); }

protected:

	Font(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_FONT
