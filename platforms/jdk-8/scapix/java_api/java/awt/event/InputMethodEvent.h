// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/AWTEvent.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_EVENT_INPUTMETHODEVENT_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_EVENT_INPUTMETHODEVENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::event { class InputMethodEvent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::event::InputMethodEvent>
{
	static constexpr fixed_string class_name = "java/awt/event/InputMethodEvent";
	using base_classes = std::tuple<scapix::java_api::java::awt::AWTEvent>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_EVENT_INPUTMETHODEVENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_EVENT_INPUTMETHODEVENT)
#define SCAPIX_JAVA_API_JAVA_AWT_EVENT_INPUTMETHODEVENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/font/TextHitInfo.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::event::InputMethodEvent : public jni::object_base<"java/awt/event/InputMethodEvent",
	java::awt::AWTEvent>
{
public:

	static jint INPUT_METHOD_FIRST() { return get_static_field<"INPUT_METHOD_FIRST", jint>(); }
	static jint INPUT_METHOD_TEXT_CHANGED() { return get_static_field<"INPUT_METHOD_TEXT_CHANGED", jint>(); }
	static jint CARET_POSITION_CHANGED() { return get_static_field<"CARET_POSITION_CHANGED", jint>(); }
	static jint INPUT_METHOD_LAST() { return get_static_field<"INPUT_METHOD_LAST", jint>(); }

	static jni::ref<java::awt::event::InputMethodEvent> new_object(jni::ref<java::awt::Component> p1, jint p2, jlong p3, jni::ref<java::text::AttributedCharacterIterator> p4, jint p5, jni::ref<java::awt::font::TextHitInfo> p6, jni::ref<java::awt::font::TextHitInfo> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<java::awt::event::InputMethodEvent> new_object(jni::ref<java::awt::Component> p1, jint p2, jni::ref<java::text::AttributedCharacterIterator> p3, jint p4, jni::ref<java::awt::font::TextHitInfo> p5, jni::ref<java::awt::font::TextHitInfo> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::event::InputMethodEvent> new_object(jni::ref<java::awt::Component> p1, jint p2, jni::ref<java::awt::font::TextHitInfo> p3, jni::ref<java::awt::font::TextHitInfo> p4) { return base_::new_object(p1, p2, p3, p4); }
	jni::ref<java::text::AttributedCharacterIterator> getText() { return call_method<"getText", jni::ref<java::text::AttributedCharacterIterator>>(); }
	jint getCommittedCharacterCount() { return call_method<"getCommittedCharacterCount", jint>(); }
	jni::ref<java::awt::font::TextHitInfo> getCaret() { return call_method<"getCaret", jni::ref<java::awt::font::TextHitInfo>>(); }
	jni::ref<java::awt::font::TextHitInfo> getVisiblePosition() { return call_method<"getVisiblePosition", jni::ref<java::awt::font::TextHitInfo>>(); }
	void consume() { return call_method<"consume", void>(); }
	jboolean isConsumed() { return call_method<"isConsumed", jboolean>(); }
	jlong getWhen() { return call_method<"getWhen", jlong>(); }
	jni::ref<java::lang::String> paramString() { return call_method<"paramString", jni::ref<java::lang::String>>(); }

protected:

	InputMethodEvent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_EVENT_INPUTMETHODEVENT
