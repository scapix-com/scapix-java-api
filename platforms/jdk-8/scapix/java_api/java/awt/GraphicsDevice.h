// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSDEVICE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSDEVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class GraphicsDevice; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::GraphicsDevice>
{
	static constexpr fixed_string class_name = "java/awt/GraphicsDevice";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSDEVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSDEVICE)
#define SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSDEVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/DisplayMode.h>
#include <scapix/java_api/java/awt/GraphicsConfigTemplate.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/GraphicsDevice_WindowTranslucency.h>
#include <scapix/java_api/java/awt/Window.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::GraphicsDevice : public jni::object_base<"java/awt/GraphicsDevice",
	java::lang::Object>
{
public:

	using WindowTranslucency = GraphicsDevice_WindowTranslucency;

	static jint TYPE_RASTER_SCREEN() { return get_static_field<"TYPE_RASTER_SCREEN", jint>(); }
	static jint TYPE_PRINTER() { return get_static_field<"TYPE_PRINTER", jint>(); }
	static jint TYPE_IMAGE_BUFFER() { return get_static_field<"TYPE_IMAGE_BUFFER", jint>(); }

	jint getType() { return call_method<"getType", jint>(); }
	jni::ref<java::lang::String> getIDstring() { return call_method<"getIDstring", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::awt::GraphicsConfiguration>> getConfigurations() { return call_method<"getConfigurations", jni::ref<jni::array<java::awt::GraphicsConfiguration>>>(); }
	jni::ref<java::awt::GraphicsConfiguration> getDefaultConfiguration() { return call_method<"getDefaultConfiguration", jni::ref<java::awt::GraphicsConfiguration>>(); }
	jni::ref<java::awt::GraphicsConfiguration> getBestConfiguration(jni::ref<java::awt::GraphicsConfigTemplate> p1) { return call_method<"getBestConfiguration", jni::ref<java::awt::GraphicsConfiguration>>(p1); }
	jboolean isFullScreenSupported() { return call_method<"isFullScreenSupported", jboolean>(); }
	void setFullScreenWindow(jni::ref<java::awt::Window> p1) { return call_method<"setFullScreenWindow", void>(p1); }
	jni::ref<java::awt::Window> getFullScreenWindow() { return call_method<"getFullScreenWindow", jni::ref<java::awt::Window>>(); }
	jboolean isDisplayChangeSupported() { return call_method<"isDisplayChangeSupported", jboolean>(); }
	void setDisplayMode(jni::ref<java::awt::DisplayMode> p1) { return call_method<"setDisplayMode", void>(p1); }
	jni::ref<java::awt::DisplayMode> getDisplayMode() { return call_method<"getDisplayMode", jni::ref<java::awt::DisplayMode>>(); }
	jni::ref<jni::array<java::awt::DisplayMode>> getDisplayModes() { return call_method<"getDisplayModes", jni::ref<jni::array<java::awt::DisplayMode>>>(); }
	jint getAvailableAcceleratedMemory() { return call_method<"getAvailableAcceleratedMemory", jint>(); }
	jboolean isWindowTranslucencySupported(jni::ref<java::awt::GraphicsDevice_WindowTranslucency> p1) { return call_method<"isWindowTranslucencySupported", jboolean>(p1); }

protected:

	GraphicsDevice(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GRAPHICSDEVICE
