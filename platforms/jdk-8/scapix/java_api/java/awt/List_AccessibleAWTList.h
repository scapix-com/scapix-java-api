// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Component_AccessibleAWTComponent.h>
#include <scapix/java_api/javax/accessibility/AccessibleSelection.h>
#include <scapix/java_api/java/awt/event/ItemListener.h>
#include <scapix/java_api/java/awt/event/ActionListener.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_LIST_ACCESSIBLEAWTLIST_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_LIST_ACCESSIBLEAWTLIST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class List_AccessibleAWTList; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::List_AccessibleAWTList>
{
	static constexpr fixed_string class_name = "java/awt/List$AccessibleAWTList";
	using base_classes = std::tuple<scapix::java_api::java::awt::Component_AccessibleAWTComponent, scapix::java_api::javax::accessibility::AccessibleSelection, scapix::java_api::java::awt::event::ItemListener, scapix::java_api::java::awt::event::ActionListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_LIST_ACCESSIBLEAWTLIST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_LIST_ACCESSIBLEAWTLIST)
#define SCAPIX_JAVA_API_JAVA_AWT_LIST_ACCESSIBLEAWTLIST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/List.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/event/ActionEvent.h>
#include <scapix/java_api/java/awt/event/ItemEvent.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>
#include <scapix/java_api/javax/accessibility/AccessibleRole.h>
#include <scapix/java_api/javax/accessibility/AccessibleStateSet.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::List_AccessibleAWTList : public jni::object_base<"java/awt/List$AccessibleAWTList",
	java::awt::Component_AccessibleAWTComponent,
	javax::accessibility::AccessibleSelection,
	java::awt::event::ItemListener,
	java::awt::event::ActionListener>
{
public:

	static jni::ref<java::awt::List_AccessibleAWTList> new_object(jni::ref<java::awt::List> p1) { return base_::new_object(p1); }
	void actionPerformed(jni::ref<java::awt::event::ActionEvent> p1) { return call_method<"actionPerformed", void>(p1); }
	void itemStateChanged(jni::ref<java::awt::event::ItemEvent> p1) { return call_method<"itemStateChanged", void>(p1); }
	jni::ref<javax::accessibility::AccessibleStateSet> getAccessibleStateSet() { return call_method<"getAccessibleStateSet", jni::ref<javax::accessibility::AccessibleStateSet>>(); }
	jni::ref<javax::accessibility::AccessibleRole> getAccessibleRole() { return call_method<"getAccessibleRole", jni::ref<javax::accessibility::AccessibleRole>>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleAt(jni::ref<java::awt::Point> p1) { return call_method<"getAccessibleAt", jni::ref<javax::accessibility::Accessible>>(p1); }
	jint getAccessibleChildrenCount() { return call_method<"getAccessibleChildrenCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleChild(jint p1) { return call_method<"getAccessibleChild", jni::ref<javax::accessibility::Accessible>>(p1); }
	jni::ref<javax::accessibility::AccessibleSelection> getAccessibleSelection() { return call_method<"getAccessibleSelection", jni::ref<javax::accessibility::AccessibleSelection>>(); }
	jint getAccessibleSelectionCount() { return call_method<"getAccessibleSelectionCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleSelection(jint p1) { return call_method<"getAccessibleSelection", jni::ref<javax::accessibility::Accessible>>(p1); }
	jboolean isAccessibleChildSelected(jint p1) { return call_method<"isAccessibleChildSelected", jboolean>(p1); }
	void addAccessibleSelection(jint p1) { return call_method<"addAccessibleSelection", void>(p1); }
	void removeAccessibleSelection(jint p1) { return call_method<"removeAccessibleSelection", void>(p1); }
	void clearAccessibleSelection() { return call_method<"clearAccessibleSelection", void>(); }
	void selectAllAccessibleSelection() { return call_method<"selectAllAccessibleSelection", void>(); }

protected:

	List_AccessibleAWTList(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_LIST_ACCESSIBLEAWTLIST
