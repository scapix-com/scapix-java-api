// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_PEER_COMPONENTPEER_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_PEER_COMPONENTPEER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::peer { class ComponentPeer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::peer::ComponentPeer>
{
	static constexpr fixed_string class_name = "java/awt/peer/ComponentPeer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_PEER_COMPONENTPEER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_PEER_COMPONENTPEER)
#define SCAPIX_JAVA_API_JAVA_AWT_PEER_COMPONENTPEER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/AWTEvent.h>
#include <scapix/java_api/java/awt/BufferCapabilities.h>
#include <scapix/java_api/java/awt/BufferCapabilities_FlipContents.h>
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/event/PaintEvent.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/awt/image/ImageProducer.h>
#include <scapix/java_api/java/awt/image/VolatileImage.h>
#include <scapix/java_api/java/awt/peer/ContainerPeer.h>
#include <scapix/java_api/sun/awt/CausedFocusEvent_Cause.h>
#include <scapix/java_api/sun/java2d/pipe/Region.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::peer::ComponentPeer : public jni::object_base<"java/awt/peer/ComponentPeer",
	java::lang::Object>
{
public:

	static jint SET_LOCATION() { return get_static_field<"SET_LOCATION", jint>(); }
	static jint SET_SIZE() { return get_static_field<"SET_SIZE", jint>(); }
	static jint SET_BOUNDS() { return get_static_field<"SET_BOUNDS", jint>(); }
	static jint SET_CLIENT_SIZE() { return get_static_field<"SET_CLIENT_SIZE", jint>(); }
	static jint RESET_OPERATION() { return get_static_field<"RESET_OPERATION", jint>(); }
	static jint NO_EMBEDDED_CHECK() { return get_static_field<"NO_EMBEDDED_CHECK", jint>(); }
	static jint DEFAULT_OPERATION() { return get_static_field<"DEFAULT_OPERATION", jint>(); }

	jboolean isObscured() { return call_method<"isObscured", jboolean>(); }
	jboolean canDetermineObscurity() { return call_method<"canDetermineObscurity", jboolean>(); }
	void setVisible(jboolean p1) { return call_method<"setVisible", void>(p1); }
	void setEnabled(jboolean p1) { return call_method<"setEnabled", void>(p1); }
	void paint(jni::ref<java::awt::Graphics> p1) { return call_method<"paint", void>(p1); }
	void print(jni::ref<java::awt::Graphics> p1) { return call_method<"print", void>(p1); }
	void setBounds(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"setBounds", void>(p1, p2, p3, p4, p5); }
	void handleEvent(jni::ref<java::awt::AWTEvent> p1) { return call_method<"handleEvent", void>(p1); }
	void coalescePaintEvent(jni::ref<java::awt::event::PaintEvent> p1) { return call_method<"coalescePaintEvent", void>(p1); }
	jni::ref<java::awt::Point> getLocationOnScreen() { return call_method<"getLocationOnScreen", jni::ref<java::awt::Point>>(); }
	jni::ref<java::awt::Dimension> getPreferredSize() { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getMinimumSize() { return call_method<"getMinimumSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::Graphics> getGraphics() { return call_method<"getGraphics", jni::ref<java::awt::Graphics>>(); }
	jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<java::awt::Font> p1) { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1); }
	void dispose() { return call_method<"dispose", void>(); }
	void setForeground(jni::ref<java::awt::Color> p1) { return call_method<"setForeground", void>(p1); }
	void setBackground(jni::ref<java::awt::Color> p1) { return call_method<"setBackground", void>(p1); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	void updateCursorImmediately() { return call_method<"updateCursorImmediately", void>(); }
	jboolean requestFocus(jni::ref<java::awt::Component> p1, jboolean p2, jboolean p3, jlong p4, jni::ref<sun::awt::CausedFocusEvent_Cause> p5) { return call_method<"requestFocus", jboolean>(p1, p2, p3, p4, p5); }
	jboolean isFocusable() { return call_method<"isFocusable", jboolean>(); }
	jni::ref<java::awt::Image> createImage(jni::ref<java::awt::image::ImageProducer> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jint p1, jint p2) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1, p2); }
	jni::ref<java::awt::image::VolatileImage> createVolatileImage(jint p1, jint p2) { return call_method<"createVolatileImage", jni::ref<java::awt::image::VolatileImage>>(p1, p2); }
	jboolean prepareImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"prepareImage", jboolean>(p1, p2, p3, p4); }
	jint checkImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"checkImage", jint>(p1, p2, p3, p4); }
	jni::ref<java::awt::GraphicsConfiguration> getGraphicsConfiguration() { return call_method<"getGraphicsConfiguration", jni::ref<java::awt::GraphicsConfiguration>>(); }
	jboolean handlesWheelScrolling() { return call_method<"handlesWheelScrolling", jboolean>(); }
	void createBuffers(jint p1, jni::ref<java::awt::BufferCapabilities> p2) { return call_method<"createBuffers", void>(p1, p2); }
	jni::ref<java::awt::Image> getBackBuffer() { return call_method<"getBackBuffer", jni::ref<java::awt::Image>>(); }
	void flip(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::BufferCapabilities_FlipContents> p5) { return call_method<"flip", void>(p1, p2, p3, p4, p5); }
	void destroyBuffers() { return call_method<"destroyBuffers", void>(); }
	void reparent(jni::ref<java::awt::peer::ContainerPeer> p1) { return call_method<"reparent", void>(p1); }
	jboolean isReparentSupported() { return call_method<"isReparentSupported", jboolean>(); }
	void layout() { return call_method<"layout", void>(); }
	void applyShape(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"applyShape", void>(p1); }
	void setZOrder(jni::ref<java::awt::peer::ComponentPeer> p1) { return call_method<"setZOrder", void>(p1); }
	jboolean updateGraphicsData(jni::ref<java::awt::GraphicsConfiguration> p1) { return call_method<"updateGraphicsData", jboolean>(p1); }

protected:

	ComponentPeer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_PEER_COMPONENTPEER
