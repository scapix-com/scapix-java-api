// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Graphics.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS2D_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS2D_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Graphics2D; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Graphics2D>
{
	static constexpr fixed_string class_name = "java/awt/Graphics2D";
	using base_classes = std::tuple<scapix::java_api::java::awt::Graphics>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS2D_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS2D)
#define SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS2D

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Composite.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Paint.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/RenderingHints.h>
#include <scapix/java_api/java/awt/RenderingHints_Key.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/Stroke.h>
#include <scapix/java_api/java/awt/font/FontRenderContext.h>
#include <scapix/java_api/java/awt/font/GlyphVector.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/BufferedImageOp.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/awt/image/RenderedImage.h>
#include <scapix/java_api/java/awt/image/renderable/RenderableImage.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Graphics2D : public jni::object_base<"java/awt/Graphics2D",
	java::awt::Graphics>
{
public:

	void draw3DRect(jint p1, jint p2, jint p3, jint p4, jboolean p5) { return call_method<"draw3DRect", void>(p1, p2, p3, p4, p5); }
	void fill3DRect(jint p1, jint p2, jint p3, jint p4, jboolean p5) { return call_method<"fill3DRect", void>(p1, p2, p3, p4, p5); }
	void draw(jni::ref<java::awt::Shape> p1) { return call_method<"draw", void>(p1); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jni::ref<java::awt::geom::AffineTransform> p2, jni::ref<java::awt::image::ImageObserver> p3) { return call_method<"drawImage", jboolean>(p1, p2, p3); }
	void drawImage(jni::ref<java::awt::image::BufferedImage> p1, jni::ref<java::awt::image::BufferedImageOp> p2, jint p3, jint p4) { return call_method<"drawImage", void>(p1, p2, p3, p4); }
	void drawRenderedImage(jni::ref<java::awt::image::RenderedImage> p1, jni::ref<java::awt::geom::AffineTransform> p2) { return call_method<"drawRenderedImage", void>(p1, p2); }
	void drawRenderableImage(jni::ref<java::awt::image::renderable::RenderableImage> p1, jni::ref<java::awt::geom::AffineTransform> p2) { return call_method<"drawRenderableImage", void>(p1, p2); }
	void drawString(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawString(jni::ref<java::lang::String> p1, jfloat p2, jfloat p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawString(jni::ref<java::text::AttributedCharacterIterator> p1, jint p2, jint p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawString(jni::ref<java::text::AttributedCharacterIterator> p1, jfloat p2, jfloat p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawGlyphVector(jni::ref<java::awt::font::GlyphVector> p1, jfloat p2, jfloat p3) { return call_method<"drawGlyphVector", void>(p1, p2, p3); }
	void fill(jni::ref<java::awt::Shape> p1) { return call_method<"fill", void>(p1); }
	jboolean hit(jni::ref<java::awt::Rectangle> p1, jni::ref<java::awt::Shape> p2, jboolean p3) { return call_method<"hit", jboolean>(p1, p2, p3); }
	jni::ref<java::awt::GraphicsConfiguration> getDeviceConfiguration() { return call_method<"getDeviceConfiguration", jni::ref<java::awt::GraphicsConfiguration>>(); }
	void setComposite(jni::ref<java::awt::Composite> p1) { return call_method<"setComposite", void>(p1); }
	void setPaint(jni::ref<java::awt::Paint> p1) { return call_method<"setPaint", void>(p1); }
	void setStroke(jni::ref<java::awt::Stroke> p1) { return call_method<"setStroke", void>(p1); }
	void setRenderingHint(jni::ref<java::awt::RenderingHints_Key> p1, jni::ref<java::lang::Object> p2) { return call_method<"setRenderingHint", void>(p1, p2); }
	jni::ref<java::lang::Object> getRenderingHint(jni::ref<java::awt::RenderingHints_Key> p1) { return call_method<"getRenderingHint", jni::ref<java::lang::Object>>(p1); }
	void setRenderingHints(jni::ref<java::util::Map> p1) { return call_method<"setRenderingHints", void>(p1); }
	void addRenderingHints(jni::ref<java::util::Map> p1) { return call_method<"addRenderingHints", void>(p1); }
	jni::ref<java::awt::RenderingHints> getRenderingHints() { return call_method<"getRenderingHints", jni::ref<java::awt::RenderingHints>>(); }
	void translate(jint p1, jint p2) { return call_method<"translate", void>(p1, p2); }
	void translate(jdouble p1, jdouble p2) { return call_method<"translate", void>(p1, p2); }
	void rotate(jdouble p1) { return call_method<"rotate", void>(p1); }
	void rotate(jdouble p1, jdouble p2, jdouble p3) { return call_method<"rotate", void>(p1, p2, p3); }
	void scale(jdouble p1, jdouble p2) { return call_method<"scale", void>(p1, p2); }
	void shear(jdouble p1, jdouble p2) { return call_method<"shear", void>(p1, p2); }
	void transform(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"transform", void>(p1); }
	void setTransform(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"setTransform", void>(p1); }
	jni::ref<java::awt::geom::AffineTransform> getTransform() { return call_method<"getTransform", jni::ref<java::awt::geom::AffineTransform>>(); }
	jni::ref<java::awt::Paint> getPaint() { return call_method<"getPaint", jni::ref<java::awt::Paint>>(); }
	jni::ref<java::awt::Composite> getComposite() { return call_method<"getComposite", jni::ref<java::awt::Composite>>(); }
	void setBackground(jni::ref<java::awt::Color> p1) { return call_method<"setBackground", void>(p1); }
	jni::ref<java::awt::Color> getBackground() { return call_method<"getBackground", jni::ref<java::awt::Color>>(); }
	jni::ref<java::awt::Stroke> getStroke() { return call_method<"getStroke", jni::ref<java::awt::Stroke>>(); }
	void clip(jni::ref<java::awt::Shape> p1) { return call_method<"clip", void>(p1); }
	jni::ref<java::awt::font::FontRenderContext> getFontRenderContext() { return call_method<"getFontRenderContext", jni::ref<java::awt::font::FontRenderContext>>(); }

protected:

	Graphics2D(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS2D
