// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GEOM_RECTANGULARSHAPE_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_RECTANGULARSHAPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::geom { class RectangularShape; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::geom::RectangularShape>
{
	static constexpr fixed_string class_name = "java/awt/geom/RectangularShape";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::Shape, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_RECTANGULARSHAPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GEOM_RECTANGULARSHAPE)
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_RECTANGULARSHAPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/Dimension2D.h>
#include <scapix/java_api/java/awt/geom/PathIterator.h>
#include <scapix/java_api/java/awt/geom/Point2D.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::geom::RectangularShape : public jni::object_base<"java/awt/geom/RectangularShape",
	java::lang::Object,
	java::awt::Shape,
	java::lang::Cloneable>
{
public:

	jdouble getX() { return call_method<"getX", jdouble>(); }
	jdouble getY() { return call_method<"getY", jdouble>(); }
	jdouble getWidth() { return call_method<"getWidth", jdouble>(); }
	jdouble getHeight() { return call_method<"getHeight", jdouble>(); }
	jdouble getMinX() { return call_method<"getMinX", jdouble>(); }
	jdouble getMinY() { return call_method<"getMinY", jdouble>(); }
	jdouble getMaxX() { return call_method<"getMaxX", jdouble>(); }
	jdouble getMaxY() { return call_method<"getMaxY", jdouble>(); }
	jdouble getCenterX() { return call_method<"getCenterX", jdouble>(); }
	jdouble getCenterY() { return call_method<"getCenterY", jdouble>(); }
	jni::ref<java::awt::geom::Rectangle2D> getFrame() { return call_method<"getFrame", jni::ref<java::awt::geom::Rectangle2D>>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	void setFrame(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"setFrame", void>(p1, p2, p3, p4); }
	void setFrame(jni::ref<java::awt::geom::Point2D> p1, jni::ref<java::awt::geom::Dimension2D> p2) { return call_method<"setFrame", void>(p1, p2); }
	void setFrame(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"setFrame", void>(p1); }
	void setFrameFromDiagonal(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"setFrameFromDiagonal", void>(p1, p2, p3, p4); }
	void setFrameFromDiagonal(jni::ref<java::awt::geom::Point2D> p1, jni::ref<java::awt::geom::Point2D> p2) { return call_method<"setFrameFromDiagonal", void>(p1, p2); }
	void setFrameFromCenter(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"setFrameFromCenter", void>(p1, p2, p3, p4); }
	void setFrameFromCenter(jni::ref<java::awt::geom::Point2D> p1, jni::ref<java::awt::geom::Point2D> p2) { return call_method<"setFrameFromCenter", void>(p1, p2); }
	jboolean contains(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean intersects(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"intersects", jboolean>(p1); }
	jboolean contains(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"contains", jboolean>(p1); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	jni::ref<java::awt::geom::PathIterator> getPathIterator(jni::ref<java::awt::geom::AffineTransform> p1, jdouble p2) { return call_method<"getPathIterator", jni::ref<java::awt::geom::PathIterator>>(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	RectangularShape(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_RECTANGULARSHAPE
