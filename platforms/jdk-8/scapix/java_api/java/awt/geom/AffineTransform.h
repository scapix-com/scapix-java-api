// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GEOM_AFFINETRANSFORM_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_AFFINETRANSFORM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::geom { class AffineTransform; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::geom::AffineTransform>
{
	static constexpr fixed_string class_name = "java/awt/geom/AffineTransform";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_AFFINETRANSFORM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GEOM_AFFINETRANSFORM)
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_AFFINETRANSFORM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/geom/Point2D.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::geom::AffineTransform : public jni::object_base<"java/awt/geom/AffineTransform",
	java::lang::Object,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static jint TYPE_IDENTITY() { return get_static_field<"TYPE_IDENTITY", jint>(); }
	static jint TYPE_TRANSLATION() { return get_static_field<"TYPE_TRANSLATION", jint>(); }
	static jint TYPE_UNIFORM_SCALE() { return get_static_field<"TYPE_UNIFORM_SCALE", jint>(); }
	static jint TYPE_GENERAL_SCALE() { return get_static_field<"TYPE_GENERAL_SCALE", jint>(); }
	static jint TYPE_MASK_SCALE() { return get_static_field<"TYPE_MASK_SCALE", jint>(); }
	static jint TYPE_FLIP() { return get_static_field<"TYPE_FLIP", jint>(); }
	static jint TYPE_QUADRANT_ROTATION() { return get_static_field<"TYPE_QUADRANT_ROTATION", jint>(); }
	static jint TYPE_GENERAL_ROTATION() { return get_static_field<"TYPE_GENERAL_ROTATION", jint>(); }
	static jint TYPE_MASK_ROTATION() { return get_static_field<"TYPE_MASK_ROTATION", jint>(); }
	static jint TYPE_GENERAL_TRANSFORM() { return get_static_field<"TYPE_GENERAL_TRANSFORM", jint>(); }

	static jni::ref<java::awt::geom::AffineTransform> new_object() { return base_::new_object(); }
	static jni::ref<java::awt::geom::AffineTransform> new_object(jni::ref<java::awt::geom::AffineTransform> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::geom::AffineTransform> new_object(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::geom::AffineTransform> new_object(jni::ref<jni::array<jfloat>> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::geom::AffineTransform> new_object(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::awt::geom::AffineTransform> new_object(jni::ref<jni::array<jdouble>> p1) { return base_::new_object(p1); }
	static jni::ref<java::awt::geom::AffineTransform> getTranslateInstance(jdouble p1, jdouble p2) { return call_static_method<"getTranslateInstance", jni::ref<java::awt::geom::AffineTransform>>(p1, p2); }
	static jni::ref<java::awt::geom::AffineTransform> getRotateInstance(jdouble p1) { return call_static_method<"getRotateInstance", jni::ref<java::awt::geom::AffineTransform>>(p1); }
	static jni::ref<java::awt::geom::AffineTransform> getRotateInstance(jdouble p1, jdouble p2, jdouble p3) { return call_static_method<"getRotateInstance", jni::ref<java::awt::geom::AffineTransform>>(p1, p2, p3); }
	static jni::ref<java::awt::geom::AffineTransform> getRotateInstance(jdouble p1, jdouble p2) { return call_static_method<"getRotateInstance", jni::ref<java::awt::geom::AffineTransform>>(p1, p2); }
	static jni::ref<java::awt::geom::AffineTransform> getRotateInstance(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_static_method<"getRotateInstance", jni::ref<java::awt::geom::AffineTransform>>(p1, p2, p3, p4); }
	static jni::ref<java::awt::geom::AffineTransform> getQuadrantRotateInstance(jint p1) { return call_static_method<"getQuadrantRotateInstance", jni::ref<java::awt::geom::AffineTransform>>(p1); }
	static jni::ref<java::awt::geom::AffineTransform> getQuadrantRotateInstance(jint p1, jdouble p2, jdouble p3) { return call_static_method<"getQuadrantRotateInstance", jni::ref<java::awt::geom::AffineTransform>>(p1, p2, p3); }
	static jni::ref<java::awt::geom::AffineTransform> getScaleInstance(jdouble p1, jdouble p2) { return call_static_method<"getScaleInstance", jni::ref<java::awt::geom::AffineTransform>>(p1, p2); }
	static jni::ref<java::awt::geom::AffineTransform> getShearInstance(jdouble p1, jdouble p2) { return call_static_method<"getShearInstance", jni::ref<java::awt::geom::AffineTransform>>(p1, p2); }
	jint getType() { return call_method<"getType", jint>(); }
	jdouble getDeterminant() { return call_method<"getDeterminant", jdouble>(); }
	void getMatrix(jni::ref<jni::array<jdouble>> p1) { return call_method<"getMatrix", void>(p1); }
	jdouble getScaleX() { return call_method<"getScaleX", jdouble>(); }
	jdouble getScaleY() { return call_method<"getScaleY", jdouble>(); }
	jdouble getShearX() { return call_method<"getShearX", jdouble>(); }
	jdouble getShearY() { return call_method<"getShearY", jdouble>(); }
	jdouble getTranslateX() { return call_method<"getTranslateX", jdouble>(); }
	jdouble getTranslateY() { return call_method<"getTranslateY", jdouble>(); }
	void translate(jdouble p1, jdouble p2) { return call_method<"translate", void>(p1, p2); }
	void rotate(jdouble p1) { return call_method<"rotate", void>(p1); }
	void rotate(jdouble p1, jdouble p2, jdouble p3) { return call_method<"rotate", void>(p1, p2, p3); }
	void rotate(jdouble p1, jdouble p2) { return call_method<"rotate", void>(p1, p2); }
	void rotate(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"rotate", void>(p1, p2, p3, p4); }
	void quadrantRotate(jint p1) { return call_method<"quadrantRotate", void>(p1); }
	void quadrantRotate(jint p1, jdouble p2, jdouble p3) { return call_method<"quadrantRotate", void>(p1, p2, p3); }
	void scale(jdouble p1, jdouble p2) { return call_method<"scale", void>(p1, p2); }
	void shear(jdouble p1, jdouble p2) { return call_method<"shear", void>(p1, p2); }
	void setToIdentity() { return call_method<"setToIdentity", void>(); }
	void setToTranslation(jdouble p1, jdouble p2) { return call_method<"setToTranslation", void>(p1, p2); }
	void setToRotation(jdouble p1) { return call_method<"setToRotation", void>(p1); }
	void setToRotation(jdouble p1, jdouble p2, jdouble p3) { return call_method<"setToRotation", void>(p1, p2, p3); }
	void setToRotation(jdouble p1, jdouble p2) { return call_method<"setToRotation", void>(p1, p2); }
	void setToRotation(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"setToRotation", void>(p1, p2, p3, p4); }
	void setToQuadrantRotation(jint p1) { return call_method<"setToQuadrantRotation", void>(p1); }
	void setToQuadrantRotation(jint p1, jdouble p2, jdouble p3) { return call_method<"setToQuadrantRotation", void>(p1, p2, p3); }
	void setToScale(jdouble p1, jdouble p2) { return call_method<"setToScale", void>(p1, p2); }
	void setToShear(jdouble p1, jdouble p2) { return call_method<"setToShear", void>(p1, p2); }
	void setTransform(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"setTransform", void>(p1); }
	void setTransform(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6) { return call_method<"setTransform", void>(p1, p2, p3, p4, p5, p6); }
	void concatenate(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"concatenate", void>(p1); }
	void preConcatenate(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"preConcatenate", void>(p1); }
	jni::ref<java::awt::geom::AffineTransform> createInverse() { return call_method<"createInverse", jni::ref<java::awt::geom::AffineTransform>>(); }
	void invert() { return call_method<"invert", void>(); }
	jni::ref<java::awt::geom::Point2D> transform(jni::ref<java::awt::geom::Point2D> p1, jni::ref<java::awt::geom::Point2D> p2) { return call_method<"transform", jni::ref<java::awt::geom::Point2D>>(p1, p2); }
	void transform(jni::ref<jni::array<java::awt::geom::Point2D>> p1, jint p2, jni::ref<jni::array<java::awt::geom::Point2D>> p3, jint p4, jint p5) { return call_method<"transform", void>(p1, p2, p3, p4, p5); }
	void transform(jni::ref<jni::array<jfloat>> p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4, jint p5) { return call_method<"transform", void>(p1, p2, p3, p4, p5); }
	void transform(jni::ref<jni::array<jdouble>> p1, jint p2, jni::ref<jni::array<jdouble>> p3, jint p4, jint p5) { return call_method<"transform", void>(p1, p2, p3, p4, p5); }
	void transform(jni::ref<jni::array<jfloat>> p1, jint p2, jni::ref<jni::array<jdouble>> p3, jint p4, jint p5) { return call_method<"transform", void>(p1, p2, p3, p4, p5); }
	void transform(jni::ref<jni::array<jdouble>> p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4, jint p5) { return call_method<"transform", void>(p1, p2, p3, p4, p5); }
	jni::ref<java::awt::geom::Point2D> inverseTransform(jni::ref<java::awt::geom::Point2D> p1, jni::ref<java::awt::geom::Point2D> p2) { return call_method<"inverseTransform", jni::ref<java::awt::geom::Point2D>>(p1, p2); }
	void inverseTransform(jni::ref<jni::array<jdouble>> p1, jint p2, jni::ref<jni::array<jdouble>> p3, jint p4, jint p5) { return call_method<"inverseTransform", void>(p1, p2, p3, p4, p5); }
	jni::ref<java::awt::geom::Point2D> deltaTransform(jni::ref<java::awt::geom::Point2D> p1, jni::ref<java::awt::geom::Point2D> p2) { return call_method<"deltaTransform", jni::ref<java::awt::geom::Point2D>>(p1, p2); }
	void deltaTransform(jni::ref<jni::array<jdouble>> p1, jint p2, jni::ref<jni::array<jdouble>> p3, jint p4, jint p5) { return call_method<"deltaTransform", void>(p1, p2, p3, p4, p5); }
	jni::ref<java::awt::Shape> createTransformedShape(jni::ref<java::awt::Shape> p1) { return call_method<"createTransformedShape", jni::ref<java::awt::Shape>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean isIdentity() { return call_method<"isIdentity", jboolean>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	AffineTransform(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_AFFINETRANSFORM
