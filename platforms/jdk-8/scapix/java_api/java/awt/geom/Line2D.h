// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GEOM_LINE2D_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_LINE2D_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::geom { class Line2D; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::geom::Line2D>
{
	static constexpr fixed_string class_name = "java/awt/geom/Line2D";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::Shape, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_LINE2D_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GEOM_LINE2D)
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_LINE2D

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/PathIterator.h>
#include <scapix/java_api/java/awt/geom/Point2D.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/java/awt/geom/Line2D_Float.h>
#include <scapix/java_api/java/awt/geom/Line2D_Double.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::geom::Line2D : public jni::object_base<"java/awt/geom/Line2D",
	java::lang::Object,
	java::awt::Shape,
	java::lang::Cloneable>
{
public:

	using Float = Line2D_Float;
	using Double = Line2D_Double;

	jdouble getX1() { return call_method<"getX1", jdouble>(); }
	jdouble getY1() { return call_method<"getY1", jdouble>(); }
	jni::ref<java::awt::geom::Point2D> getP1() { return call_method<"getP1", jni::ref<java::awt::geom::Point2D>>(); }
	jdouble getX2() { return call_method<"getX2", jdouble>(); }
	jdouble getY2() { return call_method<"getY2", jdouble>(); }
	jni::ref<java::awt::geom::Point2D> getP2() { return call_method<"getP2", jni::ref<java::awt::geom::Point2D>>(); }
	void setLine(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"setLine", void>(p1, p2, p3, p4); }
	void setLine(jni::ref<java::awt::geom::Point2D> p1, jni::ref<java::awt::geom::Point2D> p2) { return call_method<"setLine", void>(p1, p2); }
	void setLine(jni::ref<java::awt::geom::Line2D> p1) { return call_method<"setLine", void>(p1); }
	static jint relativeCCW(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6) { return call_static_method<"relativeCCW", jint>(p1, p2, p3, p4, p5, p6); }
	jint relativeCCW(jdouble p1, jdouble p2) { return call_method<"relativeCCW", jint>(p1, p2); }
	jint relativeCCW(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"relativeCCW", jint>(p1); }
	static jboolean linesIntersect(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8) { return call_static_method<"linesIntersect", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jboolean intersectsLine(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"intersectsLine", jboolean>(p1, p2, p3, p4); }
	jboolean intersectsLine(jni::ref<java::awt::geom::Line2D> p1) { return call_method<"intersectsLine", jboolean>(p1); }
	static jdouble ptSegDistSq(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6) { return call_static_method<"ptSegDistSq", jdouble>(p1, p2, p3, p4, p5, p6); }
	static jdouble ptSegDist(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6) { return call_static_method<"ptSegDist", jdouble>(p1, p2, p3, p4, p5, p6); }
	jdouble ptSegDistSq(jdouble p1, jdouble p2) { return call_method<"ptSegDistSq", jdouble>(p1, p2); }
	jdouble ptSegDistSq(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"ptSegDistSq", jdouble>(p1); }
	jdouble ptSegDist(jdouble p1, jdouble p2) { return call_method<"ptSegDist", jdouble>(p1, p2); }
	jdouble ptSegDist(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"ptSegDist", jdouble>(p1); }
	static jdouble ptLineDistSq(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6) { return call_static_method<"ptLineDistSq", jdouble>(p1, p2, p3, p4, p5, p6); }
	static jdouble ptLineDist(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6) { return call_static_method<"ptLineDist", jdouble>(p1, p2, p3, p4, p5, p6); }
	jdouble ptLineDistSq(jdouble p1, jdouble p2) { return call_method<"ptLineDistSq", jdouble>(p1, p2); }
	jdouble ptLineDistSq(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"ptLineDistSq", jdouble>(p1); }
	jdouble ptLineDist(jdouble p1, jdouble p2) { return call_method<"ptLineDist", jdouble>(p1, p2); }
	jdouble ptLineDist(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"ptLineDist", jdouble>(p1); }
	jboolean contains(jdouble p1, jdouble p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean contains(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean intersects(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"intersects", jboolean>(p1, p2, p3, p4); }
	jboolean intersects(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"intersects", jboolean>(p1); }
	jboolean contains(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"contains", jboolean>(p1, p2, p3, p4); }
	jboolean contains(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"contains", jboolean>(p1); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	jni::ref<java::awt::geom::PathIterator> getPathIterator(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"getPathIterator", jni::ref<java::awt::geom::PathIterator>>(p1); }
	jni::ref<java::awt::geom::PathIterator> getPathIterator(jni::ref<java::awt::geom::AffineTransform> p1, jdouble p2) { return call_method<"getPathIterator", jni::ref<java::awt::geom::PathIterator>>(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	Line2D(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_LINE2D
