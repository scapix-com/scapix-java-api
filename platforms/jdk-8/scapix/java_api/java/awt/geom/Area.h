// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GEOM_AREA_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_AREA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::geom { class Area; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::geom::Area>
{
	static constexpr fixed_string class_name = "java/awt/geom/Area";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::Shape, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_AREA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GEOM_AREA)
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_AREA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/PathIterator.h>
#include <scapix/java_api/java/awt/geom/Point2D.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::geom::Area : public jni::object_base<"java/awt/geom/Area",
	java::lang::Object,
	java::awt::Shape,
	java::lang::Cloneable>
{
public:

	static jni::ref<java::awt::geom::Area> new_object() { return base_::new_object(); }
	static jni::ref<java::awt::geom::Area> new_object(jni::ref<java::awt::Shape> p1) { return base_::new_object(p1); }
	void add(jni::ref<java::awt::geom::Area> p1) { return call_method<"add", void>(p1); }
	void subtract(jni::ref<java::awt::geom::Area> p1) { return call_method<"subtract", void>(p1); }
	void intersect(jni::ref<java::awt::geom::Area> p1) { return call_method<"intersect", void>(p1); }
	void exclusiveOr(jni::ref<java::awt::geom::Area> p1) { return call_method<"exclusiveOr", void>(p1); }
	void reset() { return call_method<"reset", void>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean isPolygonal() { return call_method<"isPolygonal", jboolean>(); }
	jboolean isRectangular() { return call_method<"isRectangular", jboolean>(); }
	jboolean isSingular() { return call_method<"isSingular", jboolean>(); }
	jni::ref<java::awt::geom::Rectangle2D> getBounds2D() { return call_method<"getBounds2D", jni::ref<java::awt::geom::Rectangle2D>>(); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean equals(jni::ref<java::awt::geom::Area> p1) { return call_method<"equals", jboolean>(p1); }
	void transform(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"transform", void>(p1); }
	jni::ref<java::awt::geom::Area> createTransformedArea(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"createTransformedArea", jni::ref<java::awt::geom::Area>>(p1); }
	jboolean contains(jdouble p1, jdouble p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean contains(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean contains(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"contains", jboolean>(p1, p2, p3, p4); }
	jboolean contains(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean intersects(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"intersects", jboolean>(p1, p2, p3, p4); }
	jboolean intersects(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"intersects", jboolean>(p1); }
	jni::ref<java::awt::geom::PathIterator> getPathIterator(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"getPathIterator", jni::ref<java::awt::geom::PathIterator>>(p1); }
	jni::ref<java::awt::geom::PathIterator> getPathIterator(jni::ref<java::awt::geom::AffineTransform> p1, jdouble p2) { return call_method<"getPathIterator", jni::ref<java::awt::geom::PathIterator>>(p1, p2); }

protected:

	Area(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_AREA
