// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GEOM_PATH2D_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_PATH2D_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::geom { class Path2D; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::geom::Path2D>
{
	static constexpr fixed_string class_name = "java/awt/geom/Path2D";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::Shape, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_PATH2D_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GEOM_PATH2D)
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_PATH2D

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/PathIterator.h>
#include <scapix/java_api/java/awt/geom/Point2D.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/java/awt/geom/Path2D_Float.h>
#include <scapix/java_api/java/awt/geom/Path2D_Double.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::geom::Path2D : public jni::object_base<"java/awt/geom/Path2D",
	java::lang::Object,
	java::awt::Shape,
	java::lang::Cloneable>
{
public:

	using Float = Path2D_Float;
	using Double = Path2D_Double;

	static jint WIND_EVEN_ODD() { return get_static_field<"WIND_EVEN_ODD", jint>(); }
	static jint WIND_NON_ZERO() { return get_static_field<"WIND_NON_ZERO", jint>(); }

	void moveTo(jdouble p1, jdouble p2) { return call_method<"moveTo", void>(p1, p2); }
	void lineTo(jdouble p1, jdouble p2) { return call_method<"lineTo", void>(p1, p2); }
	void quadTo(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"quadTo", void>(p1, p2, p3, p4); }
	void curveTo(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6) { return call_method<"curveTo", void>(p1, p2, p3, p4, p5, p6); }
	void closePath() { return call_method<"closePath", void>(); }
	void append(jni::ref<java::awt::Shape> p1, jboolean p2) { return call_method<"append", void>(p1, p2); }
	void append(jni::ref<java::awt::geom::PathIterator> p1, jboolean p2) { return call_method<"append", void>(p1, p2); }
	jint getWindingRule() { return call_method<"getWindingRule", jint>(); }
	void setWindingRule(jint p1) { return call_method<"setWindingRule", void>(p1); }
	jni::ref<java::awt::geom::Point2D> getCurrentPoint() { return call_method<"getCurrentPoint", jni::ref<java::awt::geom::Point2D>>(); }
	void reset() { return call_method<"reset", void>(); }
	void transform(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"transform", void>(p1); }
	jni::ref<java::awt::Shape> createTransformedShape(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"createTransformedShape", jni::ref<java::awt::Shape>>(p1); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	static jboolean contains(jni::ref<java::awt::geom::PathIterator> p1, jdouble p2, jdouble p3) { return call_static_method<"contains", jboolean>(p1, p2, p3); }
	static jboolean contains(jni::ref<java::awt::geom::PathIterator> p1, jni::ref<java::awt::geom::Point2D> p2) { return call_static_method<"contains", jboolean>(p1, p2); }
	jboolean contains(jdouble p1, jdouble p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean contains(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"contains", jboolean>(p1); }
	static jboolean contains(jni::ref<java::awt::geom::PathIterator> p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5) { return call_static_method<"contains", jboolean>(p1, p2, p3, p4, p5); }
	static jboolean contains(jni::ref<java::awt::geom::PathIterator> p1, jni::ref<java::awt::geom::Rectangle2D> p2) { return call_static_method<"contains", jboolean>(p1, p2); }
	jboolean contains(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"contains", jboolean>(p1, p2, p3, p4); }
	jboolean contains(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"contains", jboolean>(p1); }
	static jboolean intersects(jni::ref<java::awt::geom::PathIterator> p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5) { return call_static_method<"intersects", jboolean>(p1, p2, p3, p4, p5); }
	static jboolean intersects(jni::ref<java::awt::geom::PathIterator> p1, jni::ref<java::awt::geom::Rectangle2D> p2) { return call_static_method<"intersects", jboolean>(p1, p2); }
	jboolean intersects(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"intersects", jboolean>(p1, p2, p3, p4); }
	jboolean intersects(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"intersects", jboolean>(p1); }
	jni::ref<java::awt::geom::PathIterator> getPathIterator(jni::ref<java::awt::geom::AffineTransform> p1, jdouble p2) { return call_method<"getPathIterator", jni::ref<java::awt::geom::PathIterator>>(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	Path2D(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_PATH2D
