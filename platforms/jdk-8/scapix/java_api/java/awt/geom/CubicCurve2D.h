// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GEOM_CUBICCURVE2D_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_CUBICCURVE2D_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt::geom { class CubicCurve2D; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::geom::CubicCurve2D>
{
	static constexpr fixed_string class_name = "java/awt/geom/CubicCurve2D";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::Shape, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_CUBICCURVE2D_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GEOM_CUBICCURVE2D)
#define SCAPIX_JAVA_API_JAVA_AWT_GEOM_CUBICCURVE2D

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/PathIterator.h>
#include <scapix/java_api/java/awt/geom/Point2D.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/java/awt/geom/CubicCurve2D_Float.h>
#include <scapix/java_api/java/awt/geom/CubicCurve2D_Double.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::geom::CubicCurve2D : public jni::object_base<"java/awt/geom/CubicCurve2D",
	java::lang::Object,
	java::awt::Shape,
	java::lang::Cloneable>
{
public:

	using Float = CubicCurve2D_Float;
	using Double = CubicCurve2D_Double;

	jdouble getX1() { return call_method<"getX1", jdouble>(); }
	jdouble getY1() { return call_method<"getY1", jdouble>(); }
	jni::ref<java::awt::geom::Point2D> getP1() { return call_method<"getP1", jni::ref<java::awt::geom::Point2D>>(); }
	jdouble getCtrlX1() { return call_method<"getCtrlX1", jdouble>(); }
	jdouble getCtrlY1() { return call_method<"getCtrlY1", jdouble>(); }
	jni::ref<java::awt::geom::Point2D> getCtrlP1() { return call_method<"getCtrlP1", jni::ref<java::awt::geom::Point2D>>(); }
	jdouble getCtrlX2() { return call_method<"getCtrlX2", jdouble>(); }
	jdouble getCtrlY2() { return call_method<"getCtrlY2", jdouble>(); }
	jni::ref<java::awt::geom::Point2D> getCtrlP2() { return call_method<"getCtrlP2", jni::ref<java::awt::geom::Point2D>>(); }
	jdouble getX2() { return call_method<"getX2", jdouble>(); }
	jdouble getY2() { return call_method<"getY2", jdouble>(); }
	jni::ref<java::awt::geom::Point2D> getP2() { return call_method<"getP2", jni::ref<java::awt::geom::Point2D>>(); }
	void setCurve(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8) { return call_method<"setCurve", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void setCurve(jni::ref<jni::array<jdouble>> p1, jint p2) { return call_method<"setCurve", void>(p1, p2); }
	void setCurve(jni::ref<java::awt::geom::Point2D> p1, jni::ref<java::awt::geom::Point2D> p2, jni::ref<java::awt::geom::Point2D> p3, jni::ref<java::awt::geom::Point2D> p4) { return call_method<"setCurve", void>(p1, p2, p3, p4); }
	void setCurve(jni::ref<jni::array<java::awt::geom::Point2D>> p1, jint p2) { return call_method<"setCurve", void>(p1, p2); }
	void setCurve(jni::ref<java::awt::geom::CubicCurve2D> p1) { return call_method<"setCurve", void>(p1); }
	static jdouble getFlatnessSq(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8) { return call_static_method<"getFlatnessSq", jdouble>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jdouble getFlatness(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8) { return call_static_method<"getFlatness", jdouble>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jdouble getFlatnessSq(jni::ref<jni::array<jdouble>> p1, jint p2) { return call_static_method<"getFlatnessSq", jdouble>(p1, p2); }
	static jdouble getFlatness(jni::ref<jni::array<jdouble>> p1, jint p2) { return call_static_method<"getFlatness", jdouble>(p1, p2); }
	jdouble getFlatnessSq() { return call_method<"getFlatnessSq", jdouble>(); }
	jdouble getFlatness() { return call_method<"getFlatness", jdouble>(); }
	void subdivide(jni::ref<java::awt::geom::CubicCurve2D> p1, jni::ref<java::awt::geom::CubicCurve2D> p2) { return call_method<"subdivide", void>(p1, p2); }
	static void subdivide(jni::ref<java::awt::geom::CubicCurve2D> p1, jni::ref<java::awt::geom::CubicCurve2D> p2, jni::ref<java::awt::geom::CubicCurve2D> p3) { return call_static_method<"subdivide", void>(p1, p2, p3); }
	static void subdivide(jni::ref<jni::array<jdouble>> p1, jint p2, jni::ref<jni::array<jdouble>> p3, jint p4, jni::ref<jni::array<jdouble>> p5, jint p6) { return call_static_method<"subdivide", void>(p1, p2, p3, p4, p5, p6); }
	static jint solveCubic(jni::ref<jni::array<jdouble>> p1) { return call_static_method<"solveCubic", jint>(p1); }
	static jint solveCubic(jni::ref<jni::array<jdouble>> p1, jni::ref<jni::array<jdouble>> p2) { return call_static_method<"solveCubic", jint>(p1, p2); }
	jboolean contains(jdouble p1, jdouble p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean contains(jni::ref<java::awt::geom::Point2D> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean intersects(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"intersects", jboolean>(p1, p2, p3, p4); }
	jboolean intersects(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"intersects", jboolean>(p1); }
	jboolean contains(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"contains", jboolean>(p1, p2, p3, p4); }
	jboolean contains(jni::ref<java::awt::geom::Rectangle2D> p1) { return call_method<"contains", jboolean>(p1); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	jni::ref<java::awt::geom::PathIterator> getPathIterator(jni::ref<java::awt::geom::AffineTransform> p1) { return call_method<"getPathIterator", jni::ref<java::awt::geom::PathIterator>>(p1); }
	jni::ref<java::awt::geom::PathIterator> getPathIterator(jni::ref<java::awt::geom::AffineTransform> p1, jdouble p2) { return call_method<"getPathIterator", jni::ref<java::awt::geom::PathIterator>>(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	CubicCurve2D(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GEOM_CUBICCURVE2D
