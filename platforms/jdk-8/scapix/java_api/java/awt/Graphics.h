// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS_FWD
#define SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::awt { class Graphics; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::awt::Graphics>
{
	static constexpr fixed_string class_name = "java/awt/Graphics";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS)
#define SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Polygon.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::awt::Graphics : public jni::object_base<"java/awt/Graphics",
	java::lang::Object>
{
public:

	jni::ref<java::awt::Graphics> create() { return call_method<"create", jni::ref<java::awt::Graphics>>(); }
	jni::ref<java::awt::Graphics> create(jint p1, jint p2, jint p3, jint p4) { return call_method<"create", jni::ref<java::awt::Graphics>>(p1, p2, p3, p4); }
	void translate(jint p1, jint p2) { return call_method<"translate", void>(p1, p2); }
	jni::ref<java::awt::Color> getColor() { return call_method<"getColor", jni::ref<java::awt::Color>>(); }
	void setColor(jni::ref<java::awt::Color> p1) { return call_method<"setColor", void>(p1); }
	void setPaintMode() { return call_method<"setPaintMode", void>(); }
	void setXORMode(jni::ref<java::awt::Color> p1) { return call_method<"setXORMode", void>(p1); }
	jni::ref<java::awt::Font> getFont() { return call_method<"getFont", jni::ref<java::awt::Font>>(); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	jni::ref<java::awt::FontMetrics> getFontMetrics() { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(); }
	jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<java::awt::Font> p1) { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1); }
	jni::ref<java::awt::Rectangle> getClipBounds() { return call_method<"getClipBounds", jni::ref<java::awt::Rectangle>>(); }
	void clipRect(jint p1, jint p2, jint p3, jint p4) { return call_method<"clipRect", void>(p1, p2, p3, p4); }
	void setClip(jint p1, jint p2, jint p3, jint p4) { return call_method<"setClip", void>(p1, p2, p3, p4); }
	jni::ref<java::awt::Shape> getClip() { return call_method<"getClip", jni::ref<java::awt::Shape>>(); }
	void setClip(jni::ref<java::awt::Shape> p1) { return call_method<"setClip", void>(p1); }
	void copyArea(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"copyArea", void>(p1, p2, p3, p4, p5, p6); }
	void drawLine(jint p1, jint p2, jint p3, jint p4) { return call_method<"drawLine", void>(p1, p2, p3, p4); }
	void fillRect(jint p1, jint p2, jint p3, jint p4) { return call_method<"fillRect", void>(p1, p2, p3, p4); }
	void drawRect(jint p1, jint p2, jint p3, jint p4) { return call_method<"drawRect", void>(p1, p2, p3, p4); }
	void clearRect(jint p1, jint p2, jint p3, jint p4) { return call_method<"clearRect", void>(p1, p2, p3, p4); }
	void drawRoundRect(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"drawRoundRect", void>(p1, p2, p3, p4, p5, p6); }
	void fillRoundRect(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"fillRoundRect", void>(p1, p2, p3, p4, p5, p6); }
	void draw3DRect(jint p1, jint p2, jint p3, jint p4, jboolean p5) { return call_method<"draw3DRect", void>(p1, p2, p3, p4, p5); }
	void fill3DRect(jint p1, jint p2, jint p3, jint p4, jboolean p5) { return call_method<"fill3DRect", void>(p1, p2, p3, p4, p5); }
	void drawOval(jint p1, jint p2, jint p3, jint p4) { return call_method<"drawOval", void>(p1, p2, p3, p4); }
	void fillOval(jint p1, jint p2, jint p3, jint p4) { return call_method<"fillOval", void>(p1, p2, p3, p4); }
	void drawArc(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"drawArc", void>(p1, p2, p3, p4, p5, p6); }
	void fillArc(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"fillArc", void>(p1, p2, p3, p4, p5, p6); }
	void drawPolyline(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"drawPolyline", void>(p1, p2, p3); }
	void drawPolygon(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"drawPolygon", void>(p1, p2, p3); }
	void drawPolygon(jni::ref<java::awt::Polygon> p1) { return call_method<"drawPolygon", void>(p1); }
	void fillPolygon(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"fillPolygon", void>(p1, p2, p3); }
	void fillPolygon(jni::ref<java::awt::Polygon> p1) { return call_method<"fillPolygon", void>(p1); }
	void drawString(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawString(jni::ref<java::text::AttributedCharacterIterator> p1, jint p2, jint p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawChars(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawChars", void>(p1, p2, p3, p4, p5); }
	void drawBytes(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawBytes", void>(p1, p2, p3, p4, p5); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jni::ref<java::awt::image::ImageObserver> p6) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5, p6); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::Color> p4, jni::ref<java::awt::image::ImageObserver> p5) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jni::ref<java::awt::Color> p6, jni::ref<java::awt::image::ImageObserver> p7) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5, p6, p7); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jni::ref<java::awt::image::ImageObserver> p10) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jni::ref<java::awt::Color> p10, jni::ref<java::awt::image::ImageObserver> p11) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	void dispose() { return call_method<"dispose", void>(); }
	void finalize() { return call_method<"finalize", void>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::awt::Rectangle> getClipRect() { return call_method<"getClipRect", jni::ref<java::awt::Rectangle>>(); }
	jboolean hitClip(jint p1, jint p2, jint p3, jint p4) { return call_method<"hitClip", jboolean>(p1, p2, p3, p4); }
	jni::ref<java::awt::Rectangle> getClipBounds(jni::ref<java::awt::Rectangle> p1) { return call_method<"getClipBounds", jni::ref<java::awt::Rectangle>>(p1); }

protected:

	Graphics(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_AWT_GRAPHICS
