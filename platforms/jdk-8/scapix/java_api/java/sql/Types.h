// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_TYPES_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_TYPES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class Types; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::Types>
{
	static constexpr fixed_string class_name = "java/sql/Types";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_TYPES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_TYPES)
#define SCAPIX_JAVA_API_JAVA_SQL_TYPES

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::Types : public jni::object_base<"java/sql/Types",
	java::lang::Object>
{
public:

	static jint BIT() { return get_static_field<"BIT", jint>(); }
	static jint TINYINT() { return get_static_field<"TINYINT", jint>(); }
	static jint SMALLINT() { return get_static_field<"SMALLINT", jint>(); }
	static jint INTEGER() { return get_static_field<"INTEGER", jint>(); }
	static jint BIGINT() { return get_static_field<"BIGINT", jint>(); }
	static jint FLOAT() { return get_static_field<"FLOAT", jint>(); }
	static jint REAL() { return get_static_field<"REAL", jint>(); }
	static jint DOUBLE() { return get_static_field<"DOUBLE", jint>(); }
	static jint NUMERIC() { return get_static_field<"NUMERIC", jint>(); }
	static jint DECIMAL() { return get_static_field<"DECIMAL", jint>(); }
	static jint CHAR() { return get_static_field<"CHAR", jint>(); }
	static jint VARCHAR() { return get_static_field<"VARCHAR", jint>(); }
	static jint LONGVARCHAR() { return get_static_field<"LONGVARCHAR", jint>(); }
	static jint DATE() { return get_static_field<"DATE", jint>(); }
	static jint TIME() { return get_static_field<"TIME", jint>(); }
	static jint TIMESTAMP() { return get_static_field<"TIMESTAMP", jint>(); }
	static jint BINARY() { return get_static_field<"BINARY", jint>(); }
	static jint VARBINARY() { return get_static_field<"VARBINARY", jint>(); }
	static jint LONGVARBINARY() { return get_static_field<"LONGVARBINARY", jint>(); }
	static jint NULL() { return get_static_field<"NULL", jint>(); }
	static jint OTHER() { return get_static_field<"OTHER", jint>(); }
	static jint JAVA_OBJECT() { return get_static_field<"JAVA_OBJECT", jint>(); }
	static jint DISTINCT() { return get_static_field<"DISTINCT", jint>(); }
	static jint STRUCT() { return get_static_field<"STRUCT", jint>(); }
	static jint ARRAY() { return get_static_field<"ARRAY", jint>(); }
	static jint BLOB() { return get_static_field<"BLOB", jint>(); }
	static jint CLOB() { return get_static_field<"CLOB", jint>(); }
	static jint REF() { return get_static_field<"REF", jint>(); }
	static jint DATALINK() { return get_static_field<"DATALINK", jint>(); }
	static jint BOOLEAN() { return get_static_field<"BOOLEAN", jint>(); }
	static jint ROWID() { return get_static_field<"ROWID", jint>(); }
	static jint NCHAR() { return get_static_field<"NCHAR", jint>(); }
	static jint NVARCHAR() { return get_static_field<"NVARCHAR", jint>(); }
	static jint LONGNVARCHAR() { return get_static_field<"LONGNVARCHAR", jint>(); }
	static jint NCLOB() { return get_static_field<"NCLOB", jint>(); }
	static jint SQLXML() { return get_static_field<"SQLXML", jint>(); }
	static jint REF_CURSOR() { return get_static_field<"REF_CURSOR", jint>(); }
	static jint TIME_WITH_TIMEZONE() { return get_static_field<"TIME_WITH_TIMEZONE", jint>(); }
	static jint TIMESTAMP_WITH_TIMEZONE() { return get_static_field<"TIMESTAMP_WITH_TIMEZONE", jint>(); }


protected:

	Types(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_TYPES
