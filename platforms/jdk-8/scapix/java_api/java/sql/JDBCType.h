// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/java/sql/SQLType.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_JDBCTYPE_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_JDBCTYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class JDBCType; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::JDBCType>
{
	static constexpr fixed_string class_name = "java/sql/JDBCType";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum, scapix::java_api::java::sql::SQLType>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_JDBCTYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_JDBCTYPE)
#define SCAPIX_JAVA_API_JAVA_SQL_JDBCTYPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::JDBCType : public jni::object_base<"java/sql/JDBCType",
	java::lang::Enum,
	java::sql::SQLType>
{
public:

	static jni::ref<java::sql::JDBCType> BIT() { return get_static_field<"BIT", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> TINYINT() { return get_static_field<"TINYINT", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> SMALLINT() { return get_static_field<"SMALLINT", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> INTEGER() { return get_static_field<"INTEGER", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> BIGINT() { return get_static_field<"BIGINT", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> FLOAT() { return get_static_field<"FLOAT", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> REAL() { return get_static_field<"REAL", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> DOUBLE() { return get_static_field<"DOUBLE", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> NUMERIC() { return get_static_field<"NUMERIC", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> DECIMAL() { return get_static_field<"DECIMAL", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> CHAR() { return get_static_field<"CHAR", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> VARCHAR() { return get_static_field<"VARCHAR", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> LONGVARCHAR() { return get_static_field<"LONGVARCHAR", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> DATE() { return get_static_field<"DATE", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> TIME() { return get_static_field<"TIME", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> TIMESTAMP() { return get_static_field<"TIMESTAMP", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> BINARY() { return get_static_field<"BINARY", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> VARBINARY() { return get_static_field<"VARBINARY", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> LONGVARBINARY() { return get_static_field<"LONGVARBINARY", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> NULL() { return get_static_field<"NULL", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> OTHER() { return get_static_field<"OTHER", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> JAVA_OBJECT() { return get_static_field<"JAVA_OBJECT", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> DISTINCT() { return get_static_field<"DISTINCT", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> STRUCT() { return get_static_field<"STRUCT", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> ARRAY() { return get_static_field<"ARRAY", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> BLOB() { return get_static_field<"BLOB", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> CLOB() { return get_static_field<"CLOB", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> REF() { return get_static_field<"REF", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> DATALINK() { return get_static_field<"DATALINK", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> BOOLEAN() { return get_static_field<"BOOLEAN", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> ROWID() { return get_static_field<"ROWID", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> NCHAR() { return get_static_field<"NCHAR", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> NVARCHAR() { return get_static_field<"NVARCHAR", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> LONGNVARCHAR() { return get_static_field<"LONGNVARCHAR", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> NCLOB() { return get_static_field<"NCLOB", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> SQLXML() { return get_static_field<"SQLXML", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> REF_CURSOR() { return get_static_field<"REF_CURSOR", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> TIME_WITH_TIMEZONE() { return get_static_field<"TIME_WITH_TIMEZONE", jni::ref<java::sql::JDBCType>>(); }
	static jni::ref<java::sql::JDBCType> TIMESTAMP_WITH_TIMEZONE() { return get_static_field<"TIMESTAMP_WITH_TIMEZONE", jni::ref<java::sql::JDBCType>>(); }

	static jni::ref<jni::array<java::sql::JDBCType>> values() { return call_static_method<"values", jni::ref<jni::array<java::sql::JDBCType>>>(); }
	static jni::ref<java::sql::JDBCType> valueOf(jni::ref<java::lang::String> p1) { return call_static_method<"valueOf", jni::ref<java::sql::JDBCType>>(p1); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVendor() { return call_method<"getVendor", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Integer> getVendorTypeNumber() { return call_method<"getVendorTypeNumber", jni::ref<java::lang::Integer>>(); }
	static jni::ref<java::sql::JDBCType> valueOf(jint p1) { return call_static_method<"valueOf", jni::ref<java::sql::JDBCType>>(p1); }

protected:

	JDBCType(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_JDBCTYPE
