// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/PreparedStatement.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_CALLABLESTATEMENT_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_CALLABLESTATEMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class CallableStatement; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::CallableStatement>
{
	static constexpr fixed_string class_name = "java/sql/CallableStatement";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::sql::PreparedStatement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_CALLABLESTATEMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_CALLABLESTATEMENT)
#define SCAPIX_JAVA_API_JAVA_SQL_CALLABLESTATEMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/Ref.h>
#include <scapix/java_api/java/sql/RowId.h>
#include <scapix/java_api/java/sql/SQLType.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Calendar.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::CallableStatement : public jni::object_base<"java/sql/CallableStatement",
	java::lang::Object,
	java::sql::PreparedStatement>
{
public:

	void registerOutParameter(jint p1, jint p2) { return call_method<"registerOutParameter", void>(p1, p2); }
	void registerOutParameter(jint p1, jint p2, jint p3) { return call_method<"registerOutParameter", void>(p1, p2, p3); }
	jboolean wasNull() { return call_method<"wasNull", jboolean>(); }
	jni::ref<java::lang::String> getString(jint p1) { return call_method<"getString", jni::ref<java::lang::String>>(p1); }
	jboolean getBoolean(jint p1) { return call_method<"getBoolean", jboolean>(p1); }
	jbyte getByte(jint p1) { return call_method<"getByte", jbyte>(p1); }
	jshort getShort(jint p1) { return call_method<"getShort", jshort>(p1); }
	jint getInt(jint p1) { return call_method<"getInt", jint>(p1); }
	jlong getLong(jint p1) { return call_method<"getLong", jlong>(p1); }
	jfloat getFloat(jint p1) { return call_method<"getFloat", jfloat>(p1); }
	jdouble getDouble(jint p1) { return call_method<"getDouble", jdouble>(p1); }
	jni::ref<java::math::BigDecimal> getBigDecimal(jint p1, jint p2) { return call_method<"getBigDecimal", jni::ref<java::math::BigDecimal>>(p1, p2); }
	jni::ref<jni::array<jbyte>> getBytes(jint p1) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<java::sql::Date> getDate(jint p1) { return call_method<"getDate", jni::ref<java::sql::Date>>(p1); }
	jni::ref<java::sql::Time> getTime(jint p1) { return call_method<"getTime", jni::ref<java::sql::Time>>(p1); }
	jni::ref<java::sql::Timestamp> getTimestamp(jint p1) { return call_method<"getTimestamp", jni::ref<java::sql::Timestamp>>(p1); }
	jni::ref<java::lang::Object> getObject(jint p1) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::math::BigDecimal> getBigDecimal(jint p1) { return call_method<"getBigDecimal", jni::ref<java::math::BigDecimal>>(p1); }
	jni::ref<java::lang::Object> getObject(jint p1, jni::ref<java::util::Map> p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::sql::Ref> getRef(jint p1) { return call_method<"getRef", jni::ref<java::sql::Ref>>(p1); }
	jni::ref<java::sql::Blob> getBlob(jint p1) { return call_method<"getBlob", jni::ref<java::sql::Blob>>(p1); }
	jni::ref<java::sql::Clob> getClob(jint p1) { return call_method<"getClob", jni::ref<java::sql::Clob>>(p1); }
	jni::ref<java::sql::Array> getArray(jint p1) { return call_method<"getArray", jni::ref<java::sql::Array>>(p1); }
	jni::ref<java::sql::Date> getDate(jint p1, jni::ref<java::util::Calendar> p2) { return call_method<"getDate", jni::ref<java::sql::Date>>(p1, p2); }
	jni::ref<java::sql::Time> getTime(jint p1, jni::ref<java::util::Calendar> p2) { return call_method<"getTime", jni::ref<java::sql::Time>>(p1, p2); }
	jni::ref<java::sql::Timestamp> getTimestamp(jint p1, jni::ref<java::util::Calendar> p2) { return call_method<"getTimestamp", jni::ref<java::sql::Timestamp>>(p1, p2); }
	void registerOutParameter(jint p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"registerOutParameter", void>(p1, p2, p3); }
	void registerOutParameter(jni::ref<java::lang::String> p1, jint p2) { return call_method<"registerOutParameter", void>(p1, p2); }
	void registerOutParameter(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"registerOutParameter", void>(p1, p2, p3); }
	void registerOutParameter(jni::ref<java::lang::String> p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"registerOutParameter", void>(p1, p2, p3); }
	jni::ref<java::net::URL> getURL(jint p1) { return call_method<"getURL", jni::ref<java::net::URL>>(p1); }
	void setURL(jni::ref<java::lang::String> p1, jni::ref<java::net::URL> p2) { return call_method<"setURL", void>(p1, p2); }
	void setNull(jni::ref<java::lang::String> p1, jint p2) { return call_method<"setNull", void>(p1, p2); }
	void setBoolean(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setBoolean", void>(p1, p2); }
	void setByte(jni::ref<java::lang::String> p1, jbyte p2) { return call_method<"setByte", void>(p1, p2); }
	void setShort(jni::ref<java::lang::String> p1, jshort p2) { return call_method<"setShort", void>(p1, p2); }
	void setInt(jni::ref<java::lang::String> p1, jint p2) { return call_method<"setInt", void>(p1, p2); }
	void setLong(jni::ref<java::lang::String> p1, jlong p2) { return call_method<"setLong", void>(p1, p2); }
	void setFloat(jni::ref<java::lang::String> p1, jfloat p2) { return call_method<"setFloat", void>(p1, p2); }
	void setDouble(jni::ref<java::lang::String> p1, jdouble p2) { return call_method<"setDouble", void>(p1, p2); }
	void setBigDecimal(jni::ref<java::lang::String> p1, jni::ref<java::math::BigDecimal> p2) { return call_method<"setBigDecimal", void>(p1, p2); }
	void setString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setString", void>(p1, p2); }
	void setBytes(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"setBytes", void>(p1, p2); }
	void setDate(jni::ref<java::lang::String> p1, jni::ref<java::sql::Date> p2) { return call_method<"setDate", void>(p1, p2); }
	void setTime(jni::ref<java::lang::String> p1, jni::ref<java::sql::Time> p2) { return call_method<"setTime", void>(p1, p2); }
	void setTimestamp(jni::ref<java::lang::String> p1, jni::ref<java::sql::Timestamp> p2) { return call_method<"setTimestamp", void>(p1, p2); }
	void setAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setAsciiStream", void>(p1, p2, p3); }
	void setBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setBinaryStream", void>(p1, p2, p3); }
	void setObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<"setObject", void>(p1, p2, p3, p4); }
	void setObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"setObject", void>(p1, p2, p3); }
	void setObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setObject", void>(p1, p2); }
	void setCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jint p3) { return call_method<"setCharacterStream", void>(p1, p2, p3); }
	void setDate(jni::ref<java::lang::String> p1, jni::ref<java::sql::Date> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setDate", void>(p1, p2, p3); }
	void setTime(jni::ref<java::lang::String> p1, jni::ref<java::sql::Time> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setTime", void>(p1, p2, p3); }
	void setTimestamp(jni::ref<java::lang::String> p1, jni::ref<java::sql::Timestamp> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setTimestamp", void>(p1, p2, p3); }
	void setNull(jni::ref<java::lang::String> p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"setNull", void>(p1, p2, p3); }
	jni::ref<java::lang::String> getString(jni::ref<java::lang::String> p1) { return call_method<"getString", jni::ref<java::lang::String>>(p1); }
	jboolean getBoolean(jni::ref<java::lang::String> p1) { return call_method<"getBoolean", jboolean>(p1); }
	jbyte getByte(jni::ref<java::lang::String> p1) { return call_method<"getByte", jbyte>(p1); }
	jshort getShort(jni::ref<java::lang::String> p1) { return call_method<"getShort", jshort>(p1); }
	jint getInt(jni::ref<java::lang::String> p1) { return call_method<"getInt", jint>(p1); }
	jlong getLong(jni::ref<java::lang::String> p1) { return call_method<"getLong", jlong>(p1); }
	jfloat getFloat(jni::ref<java::lang::String> p1) { return call_method<"getFloat", jfloat>(p1); }
	jdouble getDouble(jni::ref<java::lang::String> p1) { return call_method<"getDouble", jdouble>(p1); }
	jni::ref<jni::array<jbyte>> getBytes(jni::ref<java::lang::String> p1) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<java::sql::Date> getDate(jni::ref<java::lang::String> p1) { return call_method<"getDate", jni::ref<java::sql::Date>>(p1); }
	jni::ref<java::sql::Time> getTime(jni::ref<java::lang::String> p1) { return call_method<"getTime", jni::ref<java::sql::Time>>(p1); }
	jni::ref<java::sql::Timestamp> getTimestamp(jni::ref<java::lang::String> p1) { return call_method<"getTimestamp", jni::ref<java::sql::Timestamp>>(p1); }
	jni::ref<java::lang::Object> getObject(jni::ref<java::lang::String> p1) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::math::BigDecimal> getBigDecimal(jni::ref<java::lang::String> p1) { return call_method<"getBigDecimal", jni::ref<java::math::BigDecimal>>(p1); }
	jni::ref<java::lang::Object> getObject(jni::ref<java::lang::String> p1, jni::ref<java::util::Map> p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::sql::Ref> getRef(jni::ref<java::lang::String> p1) { return call_method<"getRef", jni::ref<java::sql::Ref>>(p1); }
	jni::ref<java::sql::Blob> getBlob(jni::ref<java::lang::String> p1) { return call_method<"getBlob", jni::ref<java::sql::Blob>>(p1); }
	jni::ref<java::sql::Clob> getClob(jni::ref<java::lang::String> p1) { return call_method<"getClob", jni::ref<java::sql::Clob>>(p1); }
	jni::ref<java::sql::Array> getArray(jni::ref<java::lang::String> p1) { return call_method<"getArray", jni::ref<java::sql::Array>>(p1); }
	jni::ref<java::sql::Date> getDate(jni::ref<java::lang::String> p1, jni::ref<java::util::Calendar> p2) { return call_method<"getDate", jni::ref<java::sql::Date>>(p1, p2); }
	jni::ref<java::sql::Time> getTime(jni::ref<java::lang::String> p1, jni::ref<java::util::Calendar> p2) { return call_method<"getTime", jni::ref<java::sql::Time>>(p1, p2); }
	jni::ref<java::sql::Timestamp> getTimestamp(jni::ref<java::lang::String> p1, jni::ref<java::util::Calendar> p2) { return call_method<"getTimestamp", jni::ref<java::sql::Timestamp>>(p1, p2); }
	jni::ref<java::net::URL> getURL(jni::ref<java::lang::String> p1) { return call_method<"getURL", jni::ref<java::net::URL>>(p1); }
	jni::ref<java::sql::RowId> getRowId(jint p1) { return call_method<"getRowId", jni::ref<java::sql::RowId>>(p1); }
	jni::ref<java::sql::RowId> getRowId(jni::ref<java::lang::String> p1) { return call_method<"getRowId", jni::ref<java::sql::RowId>>(p1); }
	void setRowId(jni::ref<java::lang::String> p1, jni::ref<java::sql::RowId> p2) { return call_method<"setRowId", void>(p1, p2); }
	void setNString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setNString", void>(p1, p2); }
	void setNCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setNCharacterStream", void>(p1, p2, p3); }
	void setNClob(jni::ref<java::lang::String> p1, jni::ref<java::sql::NClob> p2) { return call_method<"setNClob", void>(p1, p2); }
	void setClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setClob", void>(p1, p2, p3); }
	void setBlob(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"setBlob", void>(p1, p2, p3); }
	void setNClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setNClob", void>(p1, p2, p3); }
	jni::ref<java::sql::NClob> getNClob(jint p1) { return call_method<"getNClob", jni::ref<java::sql::NClob>>(p1); }
	jni::ref<java::sql::NClob> getNClob(jni::ref<java::lang::String> p1) { return call_method<"getNClob", jni::ref<java::sql::NClob>>(p1); }
	void setSQLXML(jni::ref<java::lang::String> p1, jni::ref<java::sql::SQLXML> p2) { return call_method<"setSQLXML", void>(p1, p2); }
	jni::ref<java::sql::SQLXML> getSQLXML(jint p1) { return call_method<"getSQLXML", jni::ref<java::sql::SQLXML>>(p1); }
	jni::ref<java::sql::SQLXML> getSQLXML(jni::ref<java::lang::String> p1) { return call_method<"getSQLXML", jni::ref<java::sql::SQLXML>>(p1); }
	jni::ref<java::lang::String> getNString(jint p1) { return call_method<"getNString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNString(jni::ref<java::lang::String> p1) { return call_method<"getNString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::io::Reader> getNCharacterStream(jint p1) { return call_method<"getNCharacterStream", jni::ref<java::io::Reader>>(p1); }
	jni::ref<java::io::Reader> getNCharacterStream(jni::ref<java::lang::String> p1) { return call_method<"getNCharacterStream", jni::ref<java::io::Reader>>(p1); }
	jni::ref<java::io::Reader> getCharacterStream(jint p1) { return call_method<"getCharacterStream", jni::ref<java::io::Reader>>(p1); }
	jni::ref<java::io::Reader> getCharacterStream(jni::ref<java::lang::String> p1) { return call_method<"getCharacterStream", jni::ref<java::io::Reader>>(p1); }
	void setBlob(jni::ref<java::lang::String> p1, jni::ref<java::sql::Blob> p2) { return call_method<"setBlob", void>(p1, p2); }
	void setClob(jni::ref<java::lang::String> p1, jni::ref<java::sql::Clob> p2) { return call_method<"setClob", void>(p1, p2); }
	void setAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"setAsciiStream", void>(p1, p2, p3); }
	void setBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"setBinaryStream", void>(p1, p2, p3); }
	void setCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setCharacterStream", void>(p1, p2, p3); }
	void setAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"setAsciiStream", void>(p1, p2); }
	void setBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"setBinaryStream", void>(p1, p2); }
	void setCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"setCharacterStream", void>(p1, p2); }
	void setNCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"setNCharacterStream", void>(p1, p2); }
	void setClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"setClob", void>(p1, p2); }
	void setBlob(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"setBlob", void>(p1, p2); }
	void setNClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"setNClob", void>(p1, p2); }
	jni::ref<java::lang::Object> getObject(jint p1, jni::ref<java::lang::Class> p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> getObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Class> p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	void setObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<java::sql::SQLType> p3, jint p4) { return call_method<"setObject", void>(p1, p2, p3, p4); }
	void setObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<java::sql::SQLType> p3) { return call_method<"setObject", void>(p1, p2, p3); }
	void registerOutParameter(jint p1, jni::ref<java::sql::SQLType> p2) { return call_method<"registerOutParameter", void>(p1, p2); }
	void registerOutParameter(jint p1, jni::ref<java::sql::SQLType> p2, jint p3) { return call_method<"registerOutParameter", void>(p1, p2, p3); }
	void registerOutParameter(jint p1, jni::ref<java::sql::SQLType> p2, jni::ref<java::lang::String> p3) { return call_method<"registerOutParameter", void>(p1, p2, p3); }
	void registerOutParameter(jni::ref<java::lang::String> p1, jni::ref<java::sql::SQLType> p2) { return call_method<"registerOutParameter", void>(p1, p2); }
	void registerOutParameter(jni::ref<java::lang::String> p1, jni::ref<java::sql::SQLType> p2, jint p3) { return call_method<"registerOutParameter", void>(p1, p2, p3); }
	void registerOutParameter(jni::ref<java::lang::String> p1, jni::ref<java::sql::SQLType> p2, jni::ref<java::lang::String> p3) { return call_method<"registerOutParameter", void>(p1, p2, p3); }

protected:

	CallableStatement(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_CALLABLESTATEMENT
