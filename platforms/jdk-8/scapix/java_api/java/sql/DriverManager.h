// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_DRIVERMANAGER_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_DRIVERMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class DriverManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::DriverManager>
{
	static constexpr fixed_string class_name = "java/sql/DriverManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_DRIVERMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_DRIVERMANAGER)
#define SCAPIX_JAVA_API_JAVA_SQL_DRIVERMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/sql/Connection.h>
#include <scapix/java_api/java/sql/Driver.h>
#include <scapix/java_api/java/sql/DriverAction.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/Properties.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::DriverManager : public jni::object_base<"java/sql/DriverManager",
	java::lang::Object>
{
public:

	static jni::ref<java::io::PrintWriter> getLogWriter() { return call_static_method<"getLogWriter", jni::ref<java::io::PrintWriter>>(); }
	static void setLogWriter(jni::ref<java::io::PrintWriter> p1) { return call_static_method<"setLogWriter", void>(p1); }
	static jni::ref<java::sql::Connection> getConnection(jni::ref<java::lang::String> p1, jni::ref<java::util::Properties> p2) { return call_static_method<"getConnection", jni::ref<java::sql::Connection>>(p1, p2); }
	static jni::ref<java::sql::Connection> getConnection(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"getConnection", jni::ref<java::sql::Connection>>(p1, p2, p3); }
	static jni::ref<java::sql::Connection> getConnection(jni::ref<java::lang::String> p1) { return call_static_method<"getConnection", jni::ref<java::sql::Connection>>(p1); }
	static jni::ref<java::sql::Driver> getDriver(jni::ref<java::lang::String> p1) { return call_static_method<"getDriver", jni::ref<java::sql::Driver>>(p1); }
	static void registerDriver(jni::ref<java::sql::Driver> p1) { return call_static_method<"registerDriver", void>(p1); }
	static void registerDriver(jni::ref<java::sql::Driver> p1, jni::ref<java::sql::DriverAction> p2) { return call_static_method<"registerDriver", void>(p1, p2); }
	static void deregisterDriver(jni::ref<java::sql::Driver> p1) { return call_static_method<"deregisterDriver", void>(p1); }
	static jni::ref<java::util::Enumeration> getDrivers() { return call_static_method<"getDrivers", jni::ref<java::util::Enumeration>>(); }
	static void setLoginTimeout(jint p1) { return call_static_method<"setLoginTimeout", void>(p1); }
	static jint getLoginTimeout() { return call_static_method<"getLoginTimeout", jint>(); }
	static void setLogStream(jni::ref<java::io::PrintStream> p1) { return call_static_method<"setLogStream", void>(p1); }
	static jni::ref<java::io::PrintStream> getLogStream() { return call_static_method<"getLogStream", jni::ref<java::io::PrintStream>>(); }
	static void println(jni::ref<java::lang::String> p1) { return call_static_method<"println", void>(p1); }

protected:

	DriverManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_DRIVERMANAGER
