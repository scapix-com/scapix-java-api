// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Wrapper.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_CONNECTION_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_CONNECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class Connection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::Connection>
{
	static constexpr fixed_string class_name = "java/sql/Connection";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::sql::Wrapper, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_CONNECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_CONNECTION)
#define SCAPIX_JAVA_API_JAVA_SQL_CONNECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/CallableStatement.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/DatabaseMetaData.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/PreparedStatement.h>
#include <scapix/java_api/java/sql/SQLWarning.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Savepoint.h>
#include <scapix/java_api/java/sql/Statement.h>
#include <scapix/java_api/java/sql/Struct.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::Connection : public jni::object_base<"java/sql/Connection",
	java::lang::Object,
	java::sql::Wrapper,
	java::lang::AutoCloseable>
{
public:

	static jint TRANSACTION_NONE() { return get_static_field<"TRANSACTION_NONE", jint>(); }
	static jint TRANSACTION_READ_UNCOMMITTED() { return get_static_field<"TRANSACTION_READ_UNCOMMITTED", jint>(); }
	static jint TRANSACTION_READ_COMMITTED() { return get_static_field<"TRANSACTION_READ_COMMITTED", jint>(); }
	static jint TRANSACTION_REPEATABLE_READ() { return get_static_field<"TRANSACTION_REPEATABLE_READ", jint>(); }
	static jint TRANSACTION_SERIALIZABLE() { return get_static_field<"TRANSACTION_SERIALIZABLE", jint>(); }

	jni::ref<java::sql::Statement> createStatement() { return call_method<"createStatement", jni::ref<java::sql::Statement>>(); }
	jni::ref<java::sql::PreparedStatement> prepareStatement(jni::ref<java::lang::String> p1) { return call_method<"prepareStatement", jni::ref<java::sql::PreparedStatement>>(p1); }
	jni::ref<java::sql::CallableStatement> prepareCall(jni::ref<java::lang::String> p1) { return call_method<"prepareCall", jni::ref<java::sql::CallableStatement>>(p1); }
	jni::ref<java::lang::String> nativeSQL(jni::ref<java::lang::String> p1) { return call_method<"nativeSQL", jni::ref<java::lang::String>>(p1); }
	void setAutoCommit(jboolean p1) { return call_method<"setAutoCommit", void>(p1); }
	jboolean getAutoCommit() { return call_method<"getAutoCommit", jboolean>(); }
	void commit() { return call_method<"commit", void>(); }
	void rollback() { return call_method<"rollback", void>(); }
	void close() { return call_method<"close", void>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	jni::ref<java::sql::DatabaseMetaData> getMetaData() { return call_method<"getMetaData", jni::ref<java::sql::DatabaseMetaData>>(); }
	void setReadOnly(jboolean p1) { return call_method<"setReadOnly", void>(p1); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	void setCatalog(jni::ref<java::lang::String> p1) { return call_method<"setCatalog", void>(p1); }
	jni::ref<java::lang::String> getCatalog() { return call_method<"getCatalog", jni::ref<java::lang::String>>(); }
	void setTransactionIsolation(jint p1) { return call_method<"setTransactionIsolation", void>(p1); }
	jint getTransactionIsolation() { return call_method<"getTransactionIsolation", jint>(); }
	jni::ref<java::sql::SQLWarning> getWarnings() { return call_method<"getWarnings", jni::ref<java::sql::SQLWarning>>(); }
	void clearWarnings() { return call_method<"clearWarnings", void>(); }
	jni::ref<java::sql::Statement> createStatement(jint p1, jint p2) { return call_method<"createStatement", jni::ref<java::sql::Statement>>(p1, p2); }
	jni::ref<java::sql::PreparedStatement> prepareStatement(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"prepareStatement", jni::ref<java::sql::PreparedStatement>>(p1, p2, p3); }
	jni::ref<java::sql::CallableStatement> prepareCall(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"prepareCall", jni::ref<java::sql::CallableStatement>>(p1, p2, p3); }
	jni::ref<java::util::Map> getTypeMap() { return call_method<"getTypeMap", jni::ref<java::util::Map>>(); }
	void setTypeMap(jni::ref<java::util::Map> p1) { return call_method<"setTypeMap", void>(p1); }
	void setHoldability(jint p1) { return call_method<"setHoldability", void>(p1); }
	jint getHoldability() { return call_method<"getHoldability", jint>(); }
	jni::ref<java::sql::Savepoint> setSavepoint() { return call_method<"setSavepoint", jni::ref<java::sql::Savepoint>>(); }
	jni::ref<java::sql::Savepoint> setSavepoint(jni::ref<java::lang::String> p1) { return call_method<"setSavepoint", jni::ref<java::sql::Savepoint>>(p1); }
	void rollback(jni::ref<java::sql::Savepoint> p1) { return call_method<"rollback", void>(p1); }
	void releaseSavepoint(jni::ref<java::sql::Savepoint> p1) { return call_method<"releaseSavepoint", void>(p1); }
	jni::ref<java::sql::Statement> createStatement(jint p1, jint p2, jint p3) { return call_method<"createStatement", jni::ref<java::sql::Statement>>(p1, p2, p3); }
	jni::ref<java::sql::PreparedStatement> prepareStatement(jni::ref<java::lang::String> p1, jint p2, jint p3, jint p4) { return call_method<"prepareStatement", jni::ref<java::sql::PreparedStatement>>(p1, p2, p3, p4); }
	jni::ref<java::sql::CallableStatement> prepareCall(jni::ref<java::lang::String> p1, jint p2, jint p3, jint p4) { return call_method<"prepareCall", jni::ref<java::sql::CallableStatement>>(p1, p2, p3, p4); }
	jni::ref<java::sql::PreparedStatement> prepareStatement(jni::ref<java::lang::String> p1, jint p2) { return call_method<"prepareStatement", jni::ref<java::sql::PreparedStatement>>(p1, p2); }
	jni::ref<java::sql::PreparedStatement> prepareStatement(jni::ref<java::lang::String> p1, jni::ref<jni::array<jint>> p2) { return call_method<"prepareStatement", jni::ref<java::sql::PreparedStatement>>(p1, p2); }
	jni::ref<java::sql::PreparedStatement> prepareStatement(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_method<"prepareStatement", jni::ref<java::sql::PreparedStatement>>(p1, p2); }
	jni::ref<java::sql::Clob> createClob() { return call_method<"createClob", jni::ref<java::sql::Clob>>(); }
	jni::ref<java::sql::Blob> createBlob() { return call_method<"createBlob", jni::ref<java::sql::Blob>>(); }
	jni::ref<java::sql::NClob> createNClob() { return call_method<"createNClob", jni::ref<java::sql::NClob>>(); }
	jni::ref<java::sql::SQLXML> createSQLXML() { return call_method<"createSQLXML", jni::ref<java::sql::SQLXML>>(); }
	jboolean isValid(jint p1) { return call_method<"isValid", jboolean>(p1); }
	void setClientInfo(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setClientInfo", void>(p1, p2); }
	void setClientInfo(jni::ref<java::util::Properties> p1) { return call_method<"setClientInfo", void>(p1); }
	jni::ref<java::lang::String> getClientInfo(jni::ref<java::lang::String> p1) { return call_method<"getClientInfo", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::util::Properties> getClientInfo() { return call_method<"getClientInfo", jni::ref<java::util::Properties>>(); }
	jni::ref<java::sql::Array> createArrayOf(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_method<"createArrayOf", jni::ref<java::sql::Array>>(p1, p2); }
	jni::ref<java::sql::Struct> createStruct(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_method<"createStruct", jni::ref<java::sql::Struct>>(p1, p2); }
	void setSchema(jni::ref<java::lang::String> p1) { return call_method<"setSchema", void>(p1); }
	jni::ref<java::lang::String> getSchema() { return call_method<"getSchema", jni::ref<java::lang::String>>(); }
	void abort(jni::ref<java::util::concurrent::Executor> p1) { return call_method<"abort", void>(p1); }
	void setNetworkTimeout(jni::ref<java::util::concurrent::Executor> p1, jint p2) { return call_method<"setNetworkTimeout", void>(p1, p2); }
	jint getNetworkTimeout() { return call_method<"getNetworkTimeout", jint>(); }

protected:

	Connection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_CONNECTION
