// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Wrapper.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_STATEMENT_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_STATEMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class Statement; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::Statement>
{
	static constexpr fixed_string class_name = "java/sql/Statement";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::sql::Wrapper, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_STATEMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_STATEMENT)
#define SCAPIX_JAVA_API_JAVA_SQL_STATEMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/sql/Connection.h>
#include <scapix/java_api/java/sql/ResultSet.h>
#include <scapix/java_api/java/sql/SQLWarning.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::Statement : public jni::object_base<"java/sql/Statement",
	java::lang::Object,
	java::sql::Wrapper,
	java::lang::AutoCloseable>
{
public:

	static jint CLOSE_CURRENT_RESULT() { return get_static_field<"CLOSE_CURRENT_RESULT", jint>(); }
	static jint KEEP_CURRENT_RESULT() { return get_static_field<"KEEP_CURRENT_RESULT", jint>(); }
	static jint CLOSE_ALL_RESULTS() { return get_static_field<"CLOSE_ALL_RESULTS", jint>(); }
	static jint SUCCESS_NO_INFO() { return get_static_field<"SUCCESS_NO_INFO", jint>(); }
	static jint EXECUTE_FAILED() { return get_static_field<"EXECUTE_FAILED", jint>(); }
	static jint RETURN_GENERATED_KEYS() { return get_static_field<"RETURN_GENERATED_KEYS", jint>(); }
	static jint NO_GENERATED_KEYS() { return get_static_field<"NO_GENERATED_KEYS", jint>(); }

	jni::ref<java::sql::ResultSet> executeQuery(jni::ref<java::lang::String> p1) { return call_method<"executeQuery", jni::ref<java::sql::ResultSet>>(p1); }
	jint executeUpdate(jni::ref<java::lang::String> p1) { return call_method<"executeUpdate", jint>(p1); }
	void close() { return call_method<"close", void>(); }
	jint getMaxFieldSize() { return call_method<"getMaxFieldSize", jint>(); }
	void setMaxFieldSize(jint p1) { return call_method<"setMaxFieldSize", void>(p1); }
	jint getMaxRows() { return call_method<"getMaxRows", jint>(); }
	void setMaxRows(jint p1) { return call_method<"setMaxRows", void>(p1); }
	void setEscapeProcessing(jboolean p1) { return call_method<"setEscapeProcessing", void>(p1); }
	jint getQueryTimeout() { return call_method<"getQueryTimeout", jint>(); }
	void setQueryTimeout(jint p1) { return call_method<"setQueryTimeout", void>(p1); }
	void cancel() { return call_method<"cancel", void>(); }
	jni::ref<java::sql::SQLWarning> getWarnings() { return call_method<"getWarnings", jni::ref<java::sql::SQLWarning>>(); }
	void clearWarnings() { return call_method<"clearWarnings", void>(); }
	void setCursorName(jni::ref<java::lang::String> p1) { return call_method<"setCursorName", void>(p1); }
	jboolean execute(jni::ref<java::lang::String> p1) { return call_method<"execute", jboolean>(p1); }
	jni::ref<java::sql::ResultSet> getResultSet() { return call_method<"getResultSet", jni::ref<java::sql::ResultSet>>(); }
	jint getUpdateCount() { return call_method<"getUpdateCount", jint>(); }
	jboolean getMoreResults() { return call_method<"getMoreResults", jboolean>(); }
	void setFetchDirection(jint p1) { return call_method<"setFetchDirection", void>(p1); }
	jint getFetchDirection() { return call_method<"getFetchDirection", jint>(); }
	void setFetchSize(jint p1) { return call_method<"setFetchSize", void>(p1); }
	jint getFetchSize() { return call_method<"getFetchSize", jint>(); }
	jint getResultSetConcurrency() { return call_method<"getResultSetConcurrency", jint>(); }
	jint getResultSetType() { return call_method<"getResultSetType", jint>(); }
	void addBatch(jni::ref<java::lang::String> p1) { return call_method<"addBatch", void>(p1); }
	void clearBatch() { return call_method<"clearBatch", void>(); }
	jni::ref<jni::array<jint>> executeBatch() { return call_method<"executeBatch", jni::ref<jni::array<jint>>>(); }
	jni::ref<java::sql::Connection> getConnection() { return call_method<"getConnection", jni::ref<java::sql::Connection>>(); }
	jboolean getMoreResults(jint p1) { return call_method<"getMoreResults", jboolean>(p1); }
	jni::ref<java::sql::ResultSet> getGeneratedKeys() { return call_method<"getGeneratedKeys", jni::ref<java::sql::ResultSet>>(); }
	jint executeUpdate(jni::ref<java::lang::String> p1, jint p2) { return call_method<"executeUpdate", jint>(p1, p2); }
	jint executeUpdate(jni::ref<java::lang::String> p1, jni::ref<jni::array<jint>> p2) { return call_method<"executeUpdate", jint>(p1, p2); }
	jint executeUpdate(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_method<"executeUpdate", jint>(p1, p2); }
	jboolean execute(jni::ref<java::lang::String> p1, jint p2) { return call_method<"execute", jboolean>(p1, p2); }
	jboolean execute(jni::ref<java::lang::String> p1, jni::ref<jni::array<jint>> p2) { return call_method<"execute", jboolean>(p1, p2); }
	jboolean execute(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_method<"execute", jboolean>(p1, p2); }
	jint getResultSetHoldability() { return call_method<"getResultSetHoldability", jint>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	void setPoolable(jboolean p1) { return call_method<"setPoolable", void>(p1); }
	jboolean isPoolable() { return call_method<"isPoolable", jboolean>(); }
	void closeOnCompletion() { return call_method<"closeOnCompletion", void>(); }
	jboolean isCloseOnCompletion() { return call_method<"isCloseOnCompletion", jboolean>(); }
	jlong getLargeUpdateCount() { return call_method<"getLargeUpdateCount", jlong>(); }
	void setLargeMaxRows(jlong p1) { return call_method<"setLargeMaxRows", void>(p1); }
	jlong getLargeMaxRows() { return call_method<"getLargeMaxRows", jlong>(); }
	jni::ref<jni::array<jlong>> executeLargeBatch() { return call_method<"executeLargeBatch", jni::ref<jni::array<jlong>>>(); }
	jlong executeLargeUpdate(jni::ref<java::lang::String> p1) { return call_method<"executeLargeUpdate", jlong>(p1); }
	jlong executeLargeUpdate(jni::ref<java::lang::String> p1, jint p2) { return call_method<"executeLargeUpdate", jlong>(p1, p2); }
	jlong executeLargeUpdate(jni::ref<java::lang::String> p1, jni::ref<jni::array<jint>> p2) { return call_method<"executeLargeUpdate", jlong>(p1, p2); }
	jlong executeLargeUpdate(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_method<"executeLargeUpdate", jlong>(p1, p2); }

protected:

	Statement(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_STATEMENT
