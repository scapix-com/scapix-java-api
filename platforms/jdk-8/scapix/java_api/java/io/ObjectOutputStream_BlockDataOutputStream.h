// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/DataOutput.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_BLOCKDATAOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_BLOCKDATAOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class ObjectOutputStream_BlockDataOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::ObjectOutputStream_BlockDataOutputStream>
{
	static constexpr fixed_string class_name = "java/io/ObjectOutputStream$BlockDataOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::OutputStream, scapix::java_api::java::io::DataOutput>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_BLOCKDATAOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_BLOCKDATAOUTPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_BLOCKDATAOUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::io::ObjectOutputStream_BlockDataOutputStream : public jni::object_base<"java/io/ObjectOutputStream$BlockDataOutputStream",
	java::io::OutputStream,
	java::io::DataOutput>
{
public:

	void write(jint p1) { return call_method<"write", void>(p1); }
	void write(jni::ref<jni::array<jbyte>> p1) { return call_method<"write", void>(p1); }
	void write(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"write", void>(p1, p2, p3); }
	void flush() { return call_method<"flush", void>(); }
	void close() { return call_method<"close", void>(); }
	void writeBoolean(jboolean p1) { return call_method<"writeBoolean", void>(p1); }
	void writeByte(jint p1) { return call_method<"writeByte", void>(p1); }
	void writeChar(jint p1) { return call_method<"writeChar", void>(p1); }
	void writeShort(jint p1) { return call_method<"writeShort", void>(p1); }
	void writeInt(jint p1) { return call_method<"writeInt", void>(p1); }
	void writeFloat(jfloat p1) { return call_method<"writeFloat", void>(p1); }
	void writeLong(jlong p1) { return call_method<"writeLong", void>(p1); }
	void writeDouble(jdouble p1) { return call_method<"writeDouble", void>(p1); }
	void writeBytes(jni::ref<java::lang::String> p1) { return call_method<"writeBytes", void>(p1); }
	void writeChars(jni::ref<java::lang::String> p1) { return call_method<"writeChars", void>(p1); }
	void writeUTF(jni::ref<java::lang::String> p1) { return call_method<"writeUTF", void>(p1); }

protected:

	ObjectOutputStream_BlockDataOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OBJECTOUTPUTSTREAM_BLOCKDATAOUTPUTSTREAM
