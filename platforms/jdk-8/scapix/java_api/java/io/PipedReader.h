// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/Reader.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_PIPEDREADER_FWD
#define SCAPIX_JAVA_API_JAVA_IO_PIPEDREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class PipedReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::PipedReader>
{
	static constexpr fixed_string class_name = "java/io/PipedReader";
	using base_classes = std::tuple<scapix::java_api::java::io::Reader>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_PIPEDREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_PIPEDREADER)
#define SCAPIX_JAVA_API_JAVA_IO_PIPEDREADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PipedWriter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::PipedReader : public jni::object_base<"java/io/PipedReader",
	java::io::Reader>
{
public:

	static jni::ref<java::io::PipedReader> new_object(jni::ref<java::io::PipedWriter> p1) { return base_::new_object(p1); }
	static jni::ref<java::io::PipedReader> new_object(jni::ref<java::io::PipedWriter> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::io::PipedReader> new_object() { return base_::new_object(); }
	static jni::ref<java::io::PipedReader> new_object(jint p1) { return base_::new_object(p1); }
	void connect(jni::ref<java::io::PipedWriter> p1) { return call_method<"connect", void>(p1); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	jboolean ready() { return call_method<"ready", jboolean>(); }
	void close() { return call_method<"close", void>(); }

protected:

	PipedReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_PIPEDREADER
