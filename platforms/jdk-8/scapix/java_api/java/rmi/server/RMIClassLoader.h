// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMICLASSLOADER_FWD
#define SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMICLASSLOADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::rmi::server { class RMIClassLoader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::rmi::server::RMIClassLoader>
{
	static constexpr fixed_string class_name = "java/rmi/server/RMIClassLoader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMICLASSLOADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMICLASSLOADER)
#define SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMICLASSLOADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/rmi/server/RMIClassLoaderSpi.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::rmi::server::RMIClassLoader : public jni::object_base<"java/rmi/server/RMIClassLoader",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::Class> loadClass(jni::ref<java::lang::String> p1) { return call_static_method<"loadClass", jni::ref<java::lang::Class>>(p1); }
	static jni::ref<java::lang::Class> loadClass(jni::ref<java::net::URL> p1, jni::ref<java::lang::String> p2) { return call_static_method<"loadClass", jni::ref<java::lang::Class>>(p1, p2); }
	static jni::ref<java::lang::Class> loadClass(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"loadClass", jni::ref<java::lang::Class>>(p1, p2); }
	static jni::ref<java::lang::Class> loadClass(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::ClassLoader> p3) { return call_static_method<"loadClass", jni::ref<java::lang::Class>>(p1, p2, p3); }
	static jni::ref<java::lang::Class> loadProxyClass(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2, jni::ref<java::lang::ClassLoader> p3) { return call_static_method<"loadProxyClass", jni::ref<java::lang::Class>>(p1, p2, p3); }
	static jni::ref<java::lang::ClassLoader> getClassLoader(jni::ref<java::lang::String> p1) { return call_static_method<"getClassLoader", jni::ref<java::lang::ClassLoader>>(p1); }
	static jni::ref<java::lang::String> getClassAnnotation(jni::ref<java::lang::Class> p1) { return call_static_method<"getClassAnnotation", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::rmi::server::RMIClassLoaderSpi> getDefaultProviderInstance() { return call_static_method<"getDefaultProviderInstance", jni::ref<java::rmi::server::RMIClassLoaderSpi>>(); }
	static jni::ref<java::lang::Object> getSecurityContext(jni::ref<java::lang::ClassLoader> p1) { return call_static_method<"getSecurityContext", jni::ref<java::lang::Object>>(p1); }

protected:

	RMIClassLoader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMICLASSLOADER
