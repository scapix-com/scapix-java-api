// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_RMI_SERVER_SKELETON_FWD
#define SCAPIX_JAVA_API_JAVA_RMI_SERVER_SKELETON_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::rmi::server { class Skeleton; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::rmi::server::Skeleton>
{
	static constexpr fixed_string class_name = "java/rmi/server/Skeleton";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_RMI_SERVER_SKELETON_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_RMI_SERVER_SKELETON)
#define SCAPIX_JAVA_API_JAVA_RMI_SERVER_SKELETON

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/rmi/Remote.h>
#include <scapix/java_api/java/rmi/server/Operation.h>
#include <scapix/java_api/java/rmi/server/RemoteCall.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::rmi::server::Skeleton : public jni::object_base<"java/rmi/server/Skeleton",
	java::lang::Object>
{
public:

	void dispatch(jni::ref<java::rmi::Remote> p1, jni::ref<java::rmi::server::RemoteCall> p2, jint p3, jlong p4) { return call_method<"dispatch", void>(p1, p2, p3, p4); }
	jni::ref<jni::array<java::rmi::server::Operation>> getOperations() { return call_method<"getOperations", jni::ref<jni::array<java::rmi::server::Operation>>>(); }

protected:

	Skeleton(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_RMI_SERVER_SKELETON
