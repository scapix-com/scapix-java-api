// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/rmi/server/RMIClientSocketFactory.h>
#include <scapix/java_api/java/rmi/server/RMIServerSocketFactory.h>

#ifndef SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMISOCKETFACTORY_FWD
#define SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMISOCKETFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::rmi::server { class RMISocketFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::rmi::server::RMISocketFactory>
{
	static constexpr fixed_string class_name = "java/rmi/server/RMISocketFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::rmi::server::RMIClientSocketFactory, scapix::java_api::java::rmi::server::RMIServerSocketFactory>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMISOCKETFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMISOCKETFACTORY)
#define SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMISOCKETFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/ServerSocket.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/java/rmi/server/RMIFailureHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::rmi::server::RMISocketFactory : public jni::object_base<"java/rmi/server/RMISocketFactory",
	java::lang::Object,
	java::rmi::server::RMIClientSocketFactory,
	java::rmi::server::RMIServerSocketFactory>
{
public:

	static jni::ref<java::rmi::server::RMISocketFactory> new_object() { return base_::new_object(); }
	jni::ref<java::net::Socket> createSocket(jni::ref<java::lang::String> p1, jint p2) { return call_method<"createSocket", jni::ref<java::net::Socket>>(p1, p2); }
	jni::ref<java::net::ServerSocket> createServerSocket(jint p1) { return call_method<"createServerSocket", jni::ref<java::net::ServerSocket>>(p1); }
	static void setSocketFactory(jni::ref<java::rmi::server::RMISocketFactory> p1) { return call_static_method<"setSocketFactory", void>(p1); }
	static jni::ref<java::rmi::server::RMISocketFactory> getSocketFactory() { return call_static_method<"getSocketFactory", jni::ref<java::rmi::server::RMISocketFactory>>(); }
	static jni::ref<java::rmi::server::RMISocketFactory> getDefaultSocketFactory() { return call_static_method<"getDefaultSocketFactory", jni::ref<java::rmi::server::RMISocketFactory>>(); }
	static void setFailureHandler(jni::ref<java::rmi::server::RMIFailureHandler> p1) { return call_static_method<"setFailureHandler", void>(p1); }
	static jni::ref<java::rmi::server::RMIFailureHandler> getFailureHandler() { return call_static_method<"getFailureHandler", jni::ref<java::rmi::server::RMIFailureHandler>>(); }

protected:

	RMISocketFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_RMI_SERVER_RMISOCKETFACTORY
