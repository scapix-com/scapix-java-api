// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/beans/FeatureDescriptor.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYDESCRIPTOR_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYDESCRIPTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans { class PropertyDescriptor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::PropertyDescriptor>
{
	static constexpr fixed_string class_name = "java/beans/PropertyDescriptor";
	using base_classes = std::tuple<scapix::java_api::java::beans::FeatureDescriptor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYDESCRIPTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYDESCRIPTOR)
#define SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYDESCRIPTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyEditor.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::PropertyDescriptor : public jni::object_base<"java/beans/PropertyDescriptor",
	java::beans::FeatureDescriptor>
{
public:

	static jni::ref<java::beans::PropertyDescriptor> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Class> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::beans::PropertyDescriptor> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Class> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::beans::PropertyDescriptor> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::reflect::Method> p2, jni::ref<java::lang::reflect::Method> p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::Class> getPropertyType() { return call_method<"getPropertyType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::reflect::Method> getReadMethod() { return call_method<"getReadMethod", jni::ref<java::lang::reflect::Method>>(); }
	void setReadMethod(jni::ref<java::lang::reflect::Method> p1) { return call_method<"setReadMethod", void>(p1); }
	jni::ref<java::lang::reflect::Method> getWriteMethod() { return call_method<"getWriteMethod", jni::ref<java::lang::reflect::Method>>(); }
	void setWriteMethod(jni::ref<java::lang::reflect::Method> p1) { return call_method<"setWriteMethod", void>(p1); }
	jboolean isBound() { return call_method<"isBound", jboolean>(); }
	void setBound(jboolean p1) { return call_method<"setBound", void>(p1); }
	jboolean isConstrained() { return call_method<"isConstrained", jboolean>(); }
	void setConstrained(jboolean p1) { return call_method<"setConstrained", void>(p1); }
	void setPropertyEditorClass(jni::ref<java::lang::Class> p1) { return call_method<"setPropertyEditorClass", void>(p1); }
	jni::ref<java::lang::Class> getPropertyEditorClass() { return call_method<"getPropertyEditorClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::beans::PropertyEditor> createPropertyEditor(jni::ref<java::lang::Object> p1) { return call_method<"createPropertyEditor", jni::ref<java::beans::PropertyEditor>>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	PropertyDescriptor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYDESCRIPTOR
