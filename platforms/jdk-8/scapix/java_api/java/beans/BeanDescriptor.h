// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/beans/FeatureDescriptor.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_BEANDESCRIPTOR_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_BEANDESCRIPTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans { class BeanDescriptor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::BeanDescriptor>
{
	static constexpr fixed_string class_name = "java/beans/BeanDescriptor";
	using base_classes = std::tuple<scapix::java_api::java::beans::FeatureDescriptor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_BEANDESCRIPTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_BEANDESCRIPTOR)
#define SCAPIX_JAVA_API_JAVA_BEANS_BEANDESCRIPTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::BeanDescriptor : public jni::object_base<"java/beans/BeanDescriptor",
	java::beans::FeatureDescriptor>
{
public:

	static jni::ref<java::beans::BeanDescriptor> new_object(jni::ref<java::lang::Class> p1) { return base_::new_object(p1); }
	static jni::ref<java::beans::BeanDescriptor> new_object(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Class> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::Class> getBeanClass() { return call_method<"getBeanClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> getCustomizerClass() { return call_method<"getCustomizerClass", jni::ref<java::lang::Class>>(); }

protected:

	BeanDescriptor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_BEANDESCRIPTOR
