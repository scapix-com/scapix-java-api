// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_BEANS_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_BEANS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans { class Beans; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::Beans>
{
	static constexpr fixed_string class_name = "java/beans/Beans";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_BEANS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_BEANS)
#define SCAPIX_JAVA_API_JAVA_BEANS_BEANS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/AppletInitializer.h>
#include <scapix/java_api/java/beans/beancontext/BeanContext.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::Beans : public jni::object_base<"java/beans/Beans",
	java::lang::Object>
{
public:

	static jni::ref<java::beans::Beans> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::Object> instantiate(jni::ref<java::lang::ClassLoader> p1, jni::ref<java::lang::String> p2) { return call_static_method<"instantiate", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> instantiate(jni::ref<java::lang::ClassLoader> p1, jni::ref<java::lang::String> p2, jni::ref<java::beans::beancontext::BeanContext> p3) { return call_static_method<"instantiate", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jni::ref<java::lang::Object> instantiate(jni::ref<java::lang::ClassLoader> p1, jni::ref<java::lang::String> p2, jni::ref<java::beans::beancontext::BeanContext> p3, jni::ref<java::beans::AppletInitializer> p4) { return call_static_method<"instantiate", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::Object> getInstanceOf(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"getInstanceOf", jni::ref<java::lang::Object>>(p1, p2); }
	static jboolean isInstanceOf(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"isInstanceOf", jboolean>(p1, p2); }
	static jboolean isDesignTime() { return call_static_method<"isDesignTime", jboolean>(); }
	static jboolean isGuiAvailable() { return call_static_method<"isGuiAvailable", jboolean>(); }
	static void setDesignTime(jboolean p1) { return call_static_method<"setDesignTime", void>(p1); }
	static void setGuiAvailable(jboolean p1) { return call_static_method<"setGuiAvailable", void>(p1); }

protected:

	Beans(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_BEANS
