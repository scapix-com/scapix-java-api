// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_INTROSPECTOR_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_INTROSPECTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans { class Introspector; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::Introspector>
{
	static constexpr fixed_string class_name = "java/beans/Introspector";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_INTROSPECTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_INTROSPECTOR)
#define SCAPIX_JAVA_API_JAVA_BEANS_INTROSPECTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/BeanInfo.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::Introspector : public jni::object_base<"java/beans/Introspector",
	java::lang::Object>
{
public:

	static jint USE_ALL_BEANINFO() { return get_static_field<"USE_ALL_BEANINFO", jint>(); }
	static jint IGNORE_IMMEDIATE_BEANINFO() { return get_static_field<"IGNORE_IMMEDIATE_BEANINFO", jint>(); }
	static jint IGNORE_ALL_BEANINFO() { return get_static_field<"IGNORE_ALL_BEANINFO", jint>(); }

	static jni::ref<java::beans::BeanInfo> getBeanInfo(jni::ref<java::lang::Class> p1) { return call_static_method<"getBeanInfo", jni::ref<java::beans::BeanInfo>>(p1); }
	static jni::ref<java::beans::BeanInfo> getBeanInfo(jni::ref<java::lang::Class> p1, jint p2) { return call_static_method<"getBeanInfo", jni::ref<java::beans::BeanInfo>>(p1, p2); }
	static jni::ref<java::beans::BeanInfo> getBeanInfo(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"getBeanInfo", jni::ref<java::beans::BeanInfo>>(p1, p2); }
	static jni::ref<java::beans::BeanInfo> getBeanInfo(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Class> p2, jint p3) { return call_static_method<"getBeanInfo", jni::ref<java::beans::BeanInfo>>(p1, p2, p3); }
	static jni::ref<java::lang::String> decapitalize(jni::ref<java::lang::String> p1) { return call_static_method<"decapitalize", jni::ref<java::lang::String>>(p1); }
	static jni::ref<jni::array<java::lang::String>> getBeanInfoSearchPath() { return call_static_method<"getBeanInfoSearchPath", jni::ref<jni::array<java::lang::String>>>(); }
	static void setBeanInfoSearchPath(jni::ref<jni::array<java::lang::String>> p1) { return call_static_method<"setBeanInfoSearchPath", void>(p1); }
	static void flushCaches() { return call_static_method<"flushCaches", void>(); }
	static void flushFromCaches(jni::ref<java::lang::Class> p1) { return call_static_method<"flushFromCaches", void>(p1); }

protected:

	Introspector(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_INTROSPECTOR
