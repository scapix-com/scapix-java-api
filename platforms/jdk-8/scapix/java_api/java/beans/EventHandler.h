// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/reflect/InvocationHandler.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_EVENTHANDLER_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_EVENTHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans { class EventHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::EventHandler>
{
	static constexpr fixed_string class_name = "java/beans/EventHandler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::reflect::InvocationHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_EVENTHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_EVENTHANDLER)
#define SCAPIX_JAVA_API_JAVA_BEANS_EVENTHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::EventHandler : public jni::object_base<"java/beans/EventHandler",
	java::lang::Object,
	java::lang::reflect::InvocationHandler>
{
public:

	static jni::ref<java::beans::EventHandler> new_object(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return base_::new_object(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> getTarget() { return call_method<"getTarget", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> getAction() { return call_method<"getAction", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEventPropertyName() { return call_method<"getEventPropertyName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getListenerMethodName() { return call_method<"getListenerMethodName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Object> invoke(jni::ref<java::lang::Object> p1, jni::ref<java::lang::reflect::Method> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_method<"invoke", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jni::ref<java::lang::Object> create(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::String> p3) { return call_static_method<"create", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jni::ref<java::lang::Object> create(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_static_method<"create", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::Object> create(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_static_method<"create", jni::ref<java::lang::Object>>(p1, p2, p3, p4, p5); }

protected:

	EventHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_EVENTHANDLER
