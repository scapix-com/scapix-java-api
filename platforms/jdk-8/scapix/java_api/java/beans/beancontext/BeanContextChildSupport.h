// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/beans/beancontext/BeanContextChild.h>
#include <scapix/java_api/java/beans/beancontext/BeanContextServicesListener.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTCHILDSUPPORT_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTCHILDSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans::beancontext { class BeanContextChildSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::beancontext::BeanContextChildSupport>
{
	static constexpr fixed_string class_name = "java/beans/beancontext/BeanContextChildSupport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::beans::beancontext::BeanContextChild, scapix::java_api::java::beans::beancontext::BeanContextServicesListener, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTCHILDSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTCHILDSUPPORT)
#define SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTCHILDSUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/beans/VetoableChangeListener.h>
#include <scapix/java_api/java/beans/beancontext/BeanContext.h>
#include <scapix/java_api/java/beans/beancontext/BeanContextServiceAvailableEvent.h>
#include <scapix/java_api/java/beans/beancontext/BeanContextServiceRevokedEvent.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::beancontext::BeanContextChildSupport : public jni::object_base<"java/beans/beancontext/BeanContextChildSupport",
	java::lang::Object,
	java::beans::beancontext::BeanContextChild,
	java::beans::beancontext::BeanContextServicesListener,
	java::io::Serializable>
{
public:

	jni::ref<java::beans::beancontext::BeanContextChild> beanContextChildPeer() { return get_field<"beanContextChildPeer", jni::ref<java::beans::beancontext::BeanContextChild>>(); }
	void beanContextChildPeer(jni::ref<java::beans::beancontext::BeanContextChild> v) { set_field<"beanContextChildPeer", jni::ref<java::beans::beancontext::BeanContextChild>>(v); }

	static jni::ref<java::beans::beancontext::BeanContextChildSupport> new_object() { return base_::new_object(); }
	static jni::ref<java::beans::beancontext::BeanContextChildSupport> new_object(jni::ref<java::beans::beancontext::BeanContextChild> p1) { return base_::new_object(p1); }
	void setBeanContext(jni::ref<java::beans::beancontext::BeanContext> p1) { return call_method<"setBeanContext", void>(p1); }
	jni::ref<java::beans::beancontext::BeanContext> getBeanContext() { return call_method<"getBeanContext", jni::ref<java::beans::beancontext::BeanContext>>(); }
	void addPropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"addPropertyChangeListener", void>(p1, p2); }
	void removePropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"removePropertyChangeListener", void>(p1, p2); }
	void addVetoableChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::VetoableChangeListener> p2) { return call_method<"addVetoableChangeListener", void>(p1, p2); }
	void removeVetoableChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::VetoableChangeListener> p2) { return call_method<"removeVetoableChangeListener", void>(p1, p2); }
	void serviceRevoked(jni::ref<java::beans::beancontext::BeanContextServiceRevokedEvent> p1) { return call_method<"serviceRevoked", void>(p1); }
	void serviceAvailable(jni::ref<java::beans::beancontext::BeanContextServiceAvailableEvent> p1) { return call_method<"serviceAvailable", void>(p1); }
	jni::ref<java::beans::beancontext::BeanContextChild> getBeanContextChildPeer() { return call_method<"getBeanContextChildPeer", jni::ref<java::beans::beancontext::BeanContextChild>>(); }
	jboolean isDelegated() { return call_method<"isDelegated", jboolean>(); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void fireVetoableChange(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"fireVetoableChange", void>(p1, p2, p3); }
	jboolean validatePendingSetBeanContext(jni::ref<java::beans::beancontext::BeanContext> p1) { return call_method<"validatePendingSetBeanContext", jboolean>(p1); }

protected:

	BeanContextChildSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTCHILDSUPPORT
