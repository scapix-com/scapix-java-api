// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/beans/beancontext/BeanContextChildSupport.h>
#include <scapix/java_api/java/beans/beancontext/BeanContext.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/beans/VetoableChangeListener.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTSUPPORT_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans::beancontext { class BeanContextSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::beancontext::BeanContextSupport>
{
	static constexpr fixed_string class_name = "java/beans/beancontext/BeanContextSupport";
	using base_classes = std::tuple<scapix::java_api::java::beans::beancontext::BeanContextChildSupport, scapix::java_api::java::beans::beancontext::BeanContext, scapix::java_api::java::io::Serializable, scapix::java_api::java::beans::PropertyChangeListener, scapix::java_api::java::beans::VetoableChangeListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTSUPPORT)
#define SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTSUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyChangeEvent.h>
#include <scapix/java_api/java/beans/beancontext/BeanContextChild.h>
#include <scapix/java_api/java/beans/beancontext/BeanContextMembershipListener.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/ObjectInputStream.h>
#include <scapix/java_api/java/io/ObjectOutputStream.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::beancontext::BeanContextSupport : public jni::object_base<"java/beans/beancontext/BeanContextSupport",
	java::beans::beancontext::BeanContextChildSupport,
	java::beans::beancontext::BeanContext,
	java::io::Serializable,
	java::beans::PropertyChangeListener,
	java::beans::VetoableChangeListener>
{
public:

	static jni::ref<java::beans::beancontext::BeanContextSupport> new_object(jni::ref<java::beans::beancontext::BeanContext> p1, jni::ref<java::util::Locale> p2, jboolean p3, jboolean p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::beans::beancontext::BeanContextSupport> new_object(jni::ref<java::beans::beancontext::BeanContext> p1, jni::ref<java::util::Locale> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::beans::beancontext::BeanContextSupport> new_object(jni::ref<java::beans::beancontext::BeanContext> p1, jni::ref<java::util::Locale> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::beans::beancontext::BeanContextSupport> new_object(jni::ref<java::beans::beancontext::BeanContext> p1) { return base_::new_object(p1); }
	static jni::ref<java::beans::beancontext::BeanContextSupport> new_object() { return base_::new_object(); }
	jni::ref<java::beans::beancontext::BeanContext> getBeanContextPeer() { return call_method<"getBeanContextPeer", jni::ref<java::beans::beancontext::BeanContext>>(); }
	jni::ref<java::lang::Object> instantiateChild(jni::ref<java::lang::String> p1) { return call_method<"instantiateChild", jni::ref<java::lang::Object>>(p1); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean contains(jni::ref<java::lang::Object> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean containsKey(jni::ref<java::lang::Object> p1) { return call_method<"containsKey", jboolean>(p1); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jni::ref<jni::array<java::lang::Object>> toArray() { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<jni::array<java::lang::Object>> toArray(jni::ref<jni::array<java::lang::Object>> p1) { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(p1); }
	jboolean add(jni::ref<java::lang::Object> p1) { return call_method<"add", jboolean>(p1); }
	jboolean remove(jni::ref<java::lang::Object> p1) { return call_method<"remove", jboolean>(p1); }
	jboolean containsAll(jni::ref<java::util::Collection> p1) { return call_method<"containsAll", jboolean>(p1); }
	jboolean addAll(jni::ref<java::util::Collection> p1) { return call_method<"addAll", jboolean>(p1); }
	jboolean removeAll(jni::ref<java::util::Collection> p1) { return call_method<"removeAll", jboolean>(p1); }
	jboolean retainAll(jni::ref<java::util::Collection> p1) { return call_method<"retainAll", jboolean>(p1); }
	void clear() { return call_method<"clear", void>(); }
	void addBeanContextMembershipListener(jni::ref<java::beans::beancontext::BeanContextMembershipListener> p1) { return call_method<"addBeanContextMembershipListener", void>(p1); }
	void removeBeanContextMembershipListener(jni::ref<java::beans::beancontext::BeanContextMembershipListener> p1) { return call_method<"removeBeanContextMembershipListener", void>(p1); }
	jni::ref<java::io::InputStream> getResourceAsStream(jni::ref<java::lang::String> p1, jni::ref<java::beans::beancontext::BeanContextChild> p2) { return call_method<"getResourceAsStream", jni::ref<java::io::InputStream>>(p1, p2); }
	jni::ref<java::net::URL> getResource(jni::ref<java::lang::String> p1, jni::ref<java::beans::beancontext::BeanContextChild> p2) { return call_method<"getResource", jni::ref<java::net::URL>>(p1, p2); }
	void setDesignTime(jboolean p1) { return call_method<"setDesignTime", void>(p1); }
	jboolean isDesignTime() { return call_method<"isDesignTime", jboolean>(); }
	void setLocale(jni::ref<java::util::Locale> p1) { return call_method<"setLocale", void>(p1); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	jboolean needsGui() { return call_method<"needsGui", jboolean>(); }
	void dontUseGui() { return call_method<"dontUseGui", void>(); }
	void okToUseGui() { return call_method<"okToUseGui", void>(); }
	jboolean avoidingGui() { return call_method<"avoidingGui", jboolean>(); }
	jboolean isSerializing() { return call_method<"isSerializing", jboolean>(); }
	void writeChildren(jni::ref<java::io::ObjectOutputStream> p1) { return call_method<"writeChildren", void>(p1); }
	void readChildren(jni::ref<java::io::ObjectInputStream> p1) { return call_method<"readChildren", void>(p1); }
	void vetoableChange(jni::ref<java::beans::PropertyChangeEvent> p1) { return call_method<"vetoableChange", void>(p1); }
	void propertyChange(jni::ref<java::beans::PropertyChangeEvent> p1) { return call_method<"propertyChange", void>(p1); }

protected:

	BeanContextSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_BEANCONTEXT_BEANCONTEXTSUPPORT
