// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_VETOABLECHANGESUPPORT_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_VETOABLECHANGESUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans { class VetoableChangeSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::VetoableChangeSupport>
{
	static constexpr fixed_string class_name = "java/beans/VetoableChangeSupport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_VETOABLECHANGESUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_VETOABLECHANGESUPPORT)
#define SCAPIX_JAVA_API_JAVA_BEANS_VETOABLECHANGESUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyChangeEvent.h>
#include <scapix/java_api/java/beans/VetoableChangeListener.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::VetoableChangeSupport : public jni::object_base<"java/beans/VetoableChangeSupport",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::beans::VetoableChangeSupport> new_object(jni::ref<java::lang::Object> p1) { return base_::new_object(p1); }
	void addVetoableChangeListener(jni::ref<java::beans::VetoableChangeListener> p1) { return call_method<"addVetoableChangeListener", void>(p1); }
	void removeVetoableChangeListener(jni::ref<java::beans::VetoableChangeListener> p1) { return call_method<"removeVetoableChangeListener", void>(p1); }
	jni::ref<jni::array<java::beans::VetoableChangeListener>> getVetoableChangeListeners() { return call_method<"getVetoableChangeListeners", jni::ref<jni::array<java::beans::VetoableChangeListener>>>(); }
	void addVetoableChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::VetoableChangeListener> p2) { return call_method<"addVetoableChangeListener", void>(p1, p2); }
	void removeVetoableChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::VetoableChangeListener> p2) { return call_method<"removeVetoableChangeListener", void>(p1, p2); }
	jni::ref<jni::array<java::beans::VetoableChangeListener>> getVetoableChangeListeners(jni::ref<java::lang::String> p1) { return call_method<"getVetoableChangeListeners", jni::ref<jni::array<java::beans::VetoableChangeListener>>>(p1); }
	void fireVetoableChange(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"fireVetoableChange", void>(p1, p2, p3); }
	void fireVetoableChange(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"fireVetoableChange", void>(p1, p2, p3); }
	void fireVetoableChange(jni::ref<java::lang::String> p1, jboolean p2, jboolean p3) { return call_method<"fireVetoableChange", void>(p1, p2, p3); }
	void fireVetoableChange(jni::ref<java::beans::PropertyChangeEvent> p1) { return call_method<"fireVetoableChange", void>(p1); }
	jboolean hasListeners(jni::ref<java::lang::String> p1) { return call_method<"hasListeners", jboolean>(p1); }

protected:

	VetoableChangeSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_VETOABLECHANGESUPPORT
