// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_NAMEGENERATOR_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_NAMEGENERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans { class NameGenerator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::NameGenerator>
{
	static constexpr fixed_string class_name = "java/beans/NameGenerator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_NAMEGENERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_NAMEGENERATOR)
#define SCAPIX_JAVA_API_JAVA_BEANS_NAMEGENERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::beans::NameGenerator : public jni::object_base<"java/beans/NameGenerator",
	java::lang::Object>
{
public:

	static jni::ref<java::beans::NameGenerator> new_object() { return base_::new_object(); }
	void clear() { return call_method<"clear", void>(); }
	static jni::ref<java::lang::String> unqualifiedClassName(jni::ref<java::lang::Class> p1) { return call_static_method<"unqualifiedClassName", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> capitalize(jni::ref<java::lang::String> p1) { return call_static_method<"capitalize", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> instanceName(jni::ref<java::lang::Object> p1) { return call_method<"instanceName", jni::ref<java::lang::String>>(p1); }

protected:

	NameGenerator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_NAMEGENERATOR
