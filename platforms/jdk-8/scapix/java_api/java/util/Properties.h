// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Hashtable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_PROPERTIES_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_PROPERTIES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Properties; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Properties>
{
	static constexpr fixed_string class_name = "java/util/Properties";
	using base_classes = std::tuple<scapix::java_api::java::util::Hashtable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_PROPERTIES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_PROPERTIES)
#define SCAPIX_JAVA_API_JAVA_UTIL_PROPERTIES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Properties : public jni::object_base<"java/util/Properties",
	java::util::Hashtable>
{
public:

	static jni::ref<java::util::Properties> new_object() { return base_::new_object(); }
	static jni::ref<java::util::Properties> new_object(jni::ref<java::util::Properties> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::Object> setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setProperty", jni::ref<java::lang::Object>>(p1, p2); }
	void load(jni::ref<java::io::Reader> p1) { return call_method<"load", void>(p1); }
	void load(jni::ref<java::io::InputStream> p1) { return call_method<"load", void>(p1); }
	void save(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"save", void>(p1, p2); }
	void store(jni::ref<java::io::Writer> p1, jni::ref<java::lang::String> p2) { return call_method<"store", void>(p1, p2); }
	void store(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"store", void>(p1, p2); }
	void loadFromXML(jni::ref<java::io::InputStream> p1) { return call_method<"loadFromXML", void>(p1); }
	void storeToXML(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"storeToXML", void>(p1, p2); }
	void storeToXML(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"storeToXML", void>(p1, p2, p3); }
	jni::ref<java::lang::String> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getProperty", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::util::Enumeration> propertyNames() { return call_method<"propertyNames", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::util::Set> stringPropertyNames() { return call_method<"stringPropertyNames", jni::ref<java::util::Set>>(); }
	void list(jni::ref<java::io::PrintStream> p1) { return call_method<"list", void>(p1); }
	void list(jni::ref<java::io::PrintWriter> p1) { return call_method<"list", void>(p1); }

protected:

	Properties(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_PROPERTIES
