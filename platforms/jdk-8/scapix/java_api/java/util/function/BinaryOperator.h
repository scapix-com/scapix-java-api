// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/function/BiFunction.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_FUNCTION_BINARYOPERATOR_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_FUNCTION_BINARYOPERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::function { class BinaryOperator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::function::BinaryOperator>
{
	static constexpr fixed_string class_name = "java/util/function/BinaryOperator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::function::BiFunction>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_FUNCTION_BINARYOPERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_FUNCTION_BINARYOPERATOR)
#define SCAPIX_JAVA_API_JAVA_UTIL_FUNCTION_BINARYOPERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Comparator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::function::BinaryOperator : public jni::object_base<"java/util/function/BinaryOperator",
	java::lang::Object,
	java::util::function::BiFunction>
{
public:

	static jni::ref<java::util::function::BinaryOperator> minBy(jni::ref<java::util::Comparator> p1) { return call_static_method<"minBy", jni::ref<java::util::function::BinaryOperator>>(p1); }
	static jni::ref<java::util::function::BinaryOperator> maxBy(jni::ref<java::util::Comparator> p1) { return call_static_method<"maxBy", jni::ref<java::util::function::BinaryOperator>>(p1); }

protected:

	BinaryOperator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_FUNCTION_BINARYOPERATOR
