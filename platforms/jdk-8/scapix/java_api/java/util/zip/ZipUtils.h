// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::zip { class ZipUtils; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::zip::ZipUtils>
{
	static constexpr fixed_string class_name = "java/util/zip/ZipUtils";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS)
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/file/attribute/FileTime.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::zip::ZipUtils : public jni::object_base<"java/util/zip/ZipUtils",
	java::lang::Object>
{
public:

	static jni::ref<java::nio::file::attribute::FileTime> winTimeToFileTime(jlong p1) { return call_static_method<"winTimeToFileTime", jni::ref<java::nio::file::attribute::FileTime>>(p1); }
	static jlong fileTimeToWinTime(jni::ref<java::nio::file::attribute::FileTime> p1) { return call_static_method<"fileTimeToWinTime", jlong>(p1); }
	static jni::ref<java::nio::file::attribute::FileTime> unixTimeToFileTime(jlong p1) { return call_static_method<"unixTimeToFileTime", jni::ref<java::nio::file::attribute::FileTime>>(p1); }
	static jlong fileTimeToUnixTime(jni::ref<java::nio::file::attribute::FileTime> p1) { return call_static_method<"fileTimeToUnixTime", jlong>(p1); }
	static jlong extendedDosToJavaTime(jlong p1) { return call_static_method<"extendedDosToJavaTime", jlong>(p1); }
	static jlong javaToExtendedDosTime(jlong p1) { return call_static_method<"javaToExtendedDosTime", jlong>(p1); }
	static jint get16(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"get16", jint>(p1, p2); }
	static jlong get32(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"get32", jlong>(p1, p2); }
	static jlong get64(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"get64", jlong>(p1, p2); }

protected:

	ZipUtils(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_ZIPUTILS
