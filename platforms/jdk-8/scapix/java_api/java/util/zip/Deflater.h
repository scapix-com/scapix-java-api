// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::zip { class Deflater; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::zip::Deflater>
{
	static constexpr fixed_string class_name = "java/util/zip/Deflater";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATER)
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::zip::Deflater : public jni::object_base<"java/util/zip/Deflater",
	java::lang::Object>
{
public:

	static jint DEFLATED() { return get_static_field<"DEFLATED", jint>(); }
	static jint NO_COMPRESSION() { return get_static_field<"NO_COMPRESSION", jint>(); }
	static jint BEST_SPEED() { return get_static_field<"BEST_SPEED", jint>(); }
	static jint BEST_COMPRESSION() { return get_static_field<"BEST_COMPRESSION", jint>(); }
	static jint DEFAULT_COMPRESSION() { return get_static_field<"DEFAULT_COMPRESSION", jint>(); }
	static jint FILTERED() { return get_static_field<"FILTERED", jint>(); }
	static jint HUFFMAN_ONLY() { return get_static_field<"HUFFMAN_ONLY", jint>(); }
	static jint DEFAULT_STRATEGY() { return get_static_field<"DEFAULT_STRATEGY", jint>(); }
	static jint NO_FLUSH() { return get_static_field<"NO_FLUSH", jint>(); }
	static jint SYNC_FLUSH() { return get_static_field<"SYNC_FLUSH", jint>(); }
	static jint FULL_FLUSH() { return get_static_field<"FULL_FLUSH", jint>(); }

	static jni::ref<java::util::zip::Deflater> new_object(jint p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::util::zip::Deflater> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<java::util::zip::Deflater> new_object() { return base_::new_object(); }
	void setInput(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"setInput", void>(p1, p2, p3); }
	void setInput(jni::ref<jni::array<jbyte>> p1) { return call_method<"setInput", void>(p1); }
	void setDictionary(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"setDictionary", void>(p1, p2, p3); }
	void setDictionary(jni::ref<jni::array<jbyte>> p1) { return call_method<"setDictionary", void>(p1); }
	void setStrategy(jint p1) { return call_method<"setStrategy", void>(p1); }
	void setLevel(jint p1) { return call_method<"setLevel", void>(p1); }
	jboolean needsInput() { return call_method<"needsInput", jboolean>(); }
	void finish() { return call_method<"finish", void>(); }
	jboolean finished() { return call_method<"finished", jboolean>(); }
	jint deflate(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"deflate", jint>(p1, p2, p3); }
	jint deflate(jni::ref<jni::array<jbyte>> p1) { return call_method<"deflate", jint>(p1); }
	jint deflate(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jint p4) { return call_method<"deflate", jint>(p1, p2, p3, p4); }
	jint getAdler() { return call_method<"getAdler", jint>(); }
	jint getTotalIn() { return call_method<"getTotalIn", jint>(); }
	jlong getBytesRead() { return call_method<"getBytesRead", jlong>(); }
	jint getTotalOut() { return call_method<"getTotalOut", jint>(); }
	jlong getBytesWritten() { return call_method<"getBytesWritten", jlong>(); }
	void reset() { return call_method<"reset", void>(); }
	void end() { return call_method<"end", void>(); }

protected:

	Deflater(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_DEFLATER
