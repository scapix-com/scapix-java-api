// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/prefs/Preferences.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::prefs { class AbstractPreferences; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::prefs::AbstractPreferences>
{
	static constexpr fixed_string class_name = "java/util/prefs/AbstractPreferences";
	using base_classes = std::tuple<scapix::java_api::java::util::prefs::Preferences>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES)
#define SCAPIX_JAVA_API_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/prefs/NodeChangeListener.h>
#include <scapix/java_api/java/util/prefs/PreferenceChangeListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::prefs::AbstractPreferences : public jni::object_base<"java/util/prefs/AbstractPreferences",
	java::util::prefs::Preferences>
{
public:

	void put(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"put", void>(p1, p2); }
	jni::ref<java::lang::String> get(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"get", jni::ref<java::lang::String>>(p1, p2); }
	void remove(jni::ref<java::lang::String> p1) { return call_method<"remove", void>(p1); }
	void clear() { return call_method<"clear", void>(); }
	void putInt(jni::ref<java::lang::String> p1, jint p2) { return call_method<"putInt", void>(p1, p2); }
	jint getInt(jni::ref<java::lang::String> p1, jint p2) { return call_method<"getInt", jint>(p1, p2); }
	void putLong(jni::ref<java::lang::String> p1, jlong p2) { return call_method<"putLong", void>(p1, p2); }
	jlong getLong(jni::ref<java::lang::String> p1, jlong p2) { return call_method<"getLong", jlong>(p1, p2); }
	void putBoolean(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"putBoolean", void>(p1, p2); }
	jboolean getBoolean(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"getBoolean", jboolean>(p1, p2); }
	void putFloat(jni::ref<java::lang::String> p1, jfloat p2) { return call_method<"putFloat", void>(p1, p2); }
	jfloat getFloat(jni::ref<java::lang::String> p1, jfloat p2) { return call_method<"getFloat", jfloat>(p1, p2); }
	void putDouble(jni::ref<java::lang::String> p1, jdouble p2) { return call_method<"putDouble", void>(p1, p2); }
	jdouble getDouble(jni::ref<java::lang::String> p1, jdouble p2) { return call_method<"getDouble", jdouble>(p1, p2); }
	void putByteArray(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"putByteArray", void>(p1, p2); }
	jni::ref<jni::array<jbyte>> getByteArray(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"getByteArray", jni::ref<jni::array<jbyte>>>(p1, p2); }
	jni::ref<jni::array<java::lang::String>> keys() { return call_method<"keys", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> childrenNames() { return call_method<"childrenNames", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::util::prefs::Preferences> parent() { return call_method<"parent", jni::ref<java::util::prefs::Preferences>>(); }
	jni::ref<java::util::prefs::Preferences> node(jni::ref<java::lang::String> p1) { return call_method<"node", jni::ref<java::util::prefs::Preferences>>(p1); }
	jboolean nodeExists(jni::ref<java::lang::String> p1) { return call_method<"nodeExists", jboolean>(p1); }
	void removeNode() { return call_method<"removeNode", void>(); }
	jni::ref<java::lang::String> name() { return call_method<"name", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> absolutePath() { return call_method<"absolutePath", jni::ref<java::lang::String>>(); }
	jboolean isUserNode() { return call_method<"isUserNode", jboolean>(); }
	void addPreferenceChangeListener(jni::ref<java::util::prefs::PreferenceChangeListener> p1) { return call_method<"addPreferenceChangeListener", void>(p1); }
	void removePreferenceChangeListener(jni::ref<java::util::prefs::PreferenceChangeListener> p1) { return call_method<"removePreferenceChangeListener", void>(p1); }
	void addNodeChangeListener(jni::ref<java::util::prefs::NodeChangeListener> p1) { return call_method<"addNodeChangeListener", void>(p1); }
	void removeNodeChangeListener(jni::ref<java::util::prefs::NodeChangeListener> p1) { return call_method<"removeNodeChangeListener", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void sync() { return call_method<"sync", void>(); }
	void flush() { return call_method<"flush", void>(); }
	void exportNode(jni::ref<java::io::OutputStream> p1) { return call_method<"exportNode", void>(p1); }
	void exportSubtree(jni::ref<java::io::OutputStream> p1) { return call_method<"exportSubtree", void>(p1); }

protected:

	AbstractPreferences(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_PREFS_ABSTRACTPREFERENCES
