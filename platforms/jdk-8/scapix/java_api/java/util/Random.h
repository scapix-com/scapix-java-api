// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Random; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Random>
{
	static constexpr fixed_string class_name = "java/util/Random";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_RANDOM)
#define SCAPIX_JAVA_API_JAVA_UTIL_RANDOM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Random : public jni::object_base<"java/util/Random",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::util::Random> new_object() { return base_::new_object(); }
	static jni::ref<java::util::Random> new_object(jlong p1) { return base_::new_object(p1); }
	void setSeed(jlong p1) { return call_method<"setSeed", void>(p1); }
	void nextBytes(jni::ref<jni::array<jbyte>> p1) { return call_method<"nextBytes", void>(p1); }
	jint nextInt() { return call_method<"nextInt", jint>(); }
	jint nextInt(jint p1) { return call_method<"nextInt", jint>(p1); }
	jlong nextLong() { return call_method<"nextLong", jlong>(); }
	jboolean nextBoolean() { return call_method<"nextBoolean", jboolean>(); }
	jfloat nextFloat() { return call_method<"nextFloat", jfloat>(); }
	jdouble nextDouble() { return call_method<"nextDouble", jdouble>(); }
	jdouble nextGaussian() { return call_method<"nextGaussian", jdouble>(); }
	jni::ref<java::util::stream::IntStream> ints(jlong p1) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(p1); }
	jni::ref<java::util::stream::IntStream> ints() { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(); }
	jni::ref<java::util::stream::IntStream> ints(jlong p1, jint p2, jint p3) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(p1, p2, p3); }
	jni::ref<java::util::stream::IntStream> ints(jint p1, jint p2) { return call_method<"ints", jni::ref<java::util::stream::IntStream>>(p1, p2); }
	jni::ref<java::util::stream::LongStream> longs(jlong p1) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(p1); }
	jni::ref<java::util::stream::LongStream> longs() { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(); }
	jni::ref<java::util::stream::LongStream> longs(jlong p1, jlong p2, jlong p3) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(p1, p2, p3); }
	jni::ref<java::util::stream::LongStream> longs(jlong p1, jlong p2) { return call_method<"longs", jni::ref<java::util::stream::LongStream>>(p1, p2); }
	jni::ref<java::util::stream::DoubleStream> doubles(jlong p1) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(p1); }
	jni::ref<java::util::stream::DoubleStream> doubles() { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(); }
	jni::ref<java::util::stream::DoubleStream> doubles(jlong p1, jdouble p2, jdouble p3) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(p1, p2, p3); }
	jni::ref<java::util::stream::DoubleStream> doubles(jdouble p1, jdouble p2) { return call_method<"doubles", jni::ref<java::util::stream::DoubleStream>>(p1, p2); }

protected:

	Random(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_RANDOM
