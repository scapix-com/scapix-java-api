// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/zip/ZipFile.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARFILE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARFILE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::jar { class JarFile; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::jar::JarFile>
{
	static constexpr fixed_string class_name = "java/util/jar/JarFile";
	using base_classes = std::tuple<scapix::java_api::java::util::zip::ZipFile>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARFILE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARFILE)
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARFILE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/jar/JarEntry.h>
#include <scapix/java_api/java/util/jar/Manifest.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#include <scapix/java_api/java/util/zip/ZipEntry.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::jar::JarFile : public jni::object_base<"java/util/jar/JarFile",
	java::util::zip::ZipFile>
{
public:

	static jni::ref<java::lang::String> MANIFEST_NAME() { return get_static_field<"MANIFEST_NAME", jni::ref<java::lang::String>>(); }

	static jni::ref<java::util::jar::JarFile> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::jar::JarFile> new_object(jni::ref<java::lang::String> p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::util::jar::JarFile> new_object(jni::ref<java::io::File> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::jar::JarFile> new_object(jni::ref<java::io::File> p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::util::jar::JarFile> new_object(jni::ref<java::io::File> p1, jboolean p2, jint p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::util::jar::Manifest> getManifest() { return call_method<"getManifest", jni::ref<java::util::jar::Manifest>>(); }
	jni::ref<java::util::jar::JarEntry> getJarEntry(jni::ref<java::lang::String> p1) { return call_method<"getJarEntry", jni::ref<java::util::jar::JarEntry>>(p1); }
	jni::ref<java::util::zip::ZipEntry> getEntry(jni::ref<java::lang::String> p1) { return call_method<"getEntry", jni::ref<java::util::zip::ZipEntry>>(p1); }
	jni::ref<java::util::Enumeration> entries() { return call_method<"entries", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::util::stream::Stream> stream() { return call_method<"stream", jni::ref<java::util::stream::Stream>>(); }
	jni::ref<java::io::InputStream> getInputStream(jni::ref<java::util::zip::ZipEntry> p1) { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(p1); }

protected:

	JarFile(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_JARFILE
