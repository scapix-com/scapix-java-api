// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Calendar.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_JAPANESEIMPERIALCALENDAR_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_JAPANESEIMPERIALCALENDAR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class JapaneseImperialCalendar; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::JapaneseImperialCalendar>
{
	static constexpr fixed_string class_name = "java/util/JapaneseImperialCalendar";
	using base_classes = std::tuple<scapix::java_api::java::util::Calendar>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAPANESEIMPERIALCALENDAR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_JAPANESEIMPERIALCALENDAR)
#define SCAPIX_JAVA_API_JAVA_UTIL_JAPANESEIMPERIALCALENDAR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/TimeZone.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::JapaneseImperialCalendar : public jni::object_base<"java/util/JapaneseImperialCalendar",
	java::util::Calendar>
{
public:

	static jint BEFORE_MEIJI() { return get_static_field<"BEFORE_MEIJI", jint>(); }
	static jint MEIJI() { return get_static_field<"MEIJI", jint>(); }
	static jint TAISHO() { return get_static_field<"TAISHO", jint>(); }
	static jint SHOWA() { return get_static_field<"SHOWA", jint>(); }
	static jint HEISEI() { return get_static_field<"HEISEI", jint>(); }

	jni::ref<java::lang::String> getCalendarType() { return call_method<"getCalendarType", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void add(jint p1, jint p2) { return call_method<"add", void>(p1, p2); }
	void roll(jint p1, jboolean p2) { return call_method<"roll", void>(p1, p2); }
	void roll(jint p1, jint p2) { return call_method<"roll", void>(p1, p2); }
	jni::ref<java::lang::String> getDisplayName(jint p1, jint p2, jni::ref<java::util::Locale> p3) { return call_method<"getDisplayName", jni::ref<java::lang::String>>(p1, p2, p3); }
	jni::ref<java::util::Map> getDisplayNames(jint p1, jint p2, jni::ref<java::util::Locale> p3) { return call_method<"getDisplayNames", jni::ref<java::util::Map>>(p1, p2, p3); }
	jint getMinimum(jint p1) { return call_method<"getMinimum", jint>(p1); }
	jint getMaximum(jint p1) { return call_method<"getMaximum", jint>(p1); }
	jint getGreatestMinimum(jint p1) { return call_method<"getGreatestMinimum", jint>(p1); }
	jint getLeastMaximum(jint p1) { return call_method<"getLeastMaximum", jint>(p1); }
	jint getActualMinimum(jint p1) { return call_method<"getActualMinimum", jint>(p1); }
	jint getActualMaximum(jint p1) { return call_method<"getActualMaximum", jint>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::util::TimeZone> getTimeZone() { return call_method<"getTimeZone", jni::ref<java::util::TimeZone>>(); }
	void setTimeZone(jni::ref<java::util::TimeZone> p1) { return call_method<"setTimeZone", void>(p1); }

protected:

	JapaneseImperialCalendar(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAPANESEIMPERIALCALENDAR
