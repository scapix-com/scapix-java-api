// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>
#include <scapix/java_api/java/io/Flushable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_FORMATTER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_FORMATTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Formatter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Formatter>
{
	static constexpr fixed_string class_name = "java/util/Formatter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable, scapix::java_api::java::io::Flushable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_FORMATTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_FORMATTER)
#define SCAPIX_JAVA_API_JAVA_UTIL_FORMATTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/IOException.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Formatter_BigDecimalLayoutForm.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Formatter : public jni::object_base<"java/util/Formatter",
	java::lang::Object,
	java::io::Closeable,
	java::io::Flushable>
{
public:

	using BigDecimalLayoutForm = Formatter_BigDecimalLayoutForm;

	static jni::ref<java::util::Formatter> new_object() { return base_::new_object(); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::lang::Appendable> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::util::Locale> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::lang::Appendable> p1, jni::ref<java::util::Locale> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Locale> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::io::File> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::io::File> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::io::File> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Locale> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::io::PrintStream> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::io::OutputStream> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::util::Formatter> new_object(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Locale> p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::util::Locale> locale() { return call_method<"locale", jni::ref<java::util::Locale>>(); }
	jni::ref<java::lang::Appendable> out() { return call_method<"out", jni::ref<java::lang::Appendable>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void flush() { return call_method<"flush", void>(); }
	void close() { return call_method<"close", void>(); }
	jni::ref<java::io::IOException> ioException() { return call_method<"ioException", jni::ref<java::io::IOException>>(); }
	jni::ref<java::util::Formatter> format(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_method<"format", jni::ref<java::util::Formatter>>(p1, p2); }
	jni::ref<java::util::Formatter> format(jni::ref<java::util::Locale> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_method<"format", jni::ref<java::util::Formatter>>(p1, p2, p3); }

protected:

	Formatter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_FORMATTER
