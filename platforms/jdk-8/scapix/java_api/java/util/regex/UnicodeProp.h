// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_REGEX_UNICODEPROP_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_REGEX_UNICODEPROP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::regex { class UnicodeProp; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::regex::UnicodeProp>
{
	static constexpr fixed_string class_name = "java/util/regex/UnicodeProp";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_REGEX_UNICODEPROP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_REGEX_UNICODEPROP)
#define SCAPIX_JAVA_API_JAVA_UTIL_REGEX_UNICODEPROP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::regex::UnicodeProp : public jni::object_base<"java/util/regex/UnicodeProp",
	java::lang::Enum>
{
public:

	static jni::ref<java::util::regex::UnicodeProp> ALPHABETIC() { return get_static_field<"ALPHABETIC", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> LETTER() { return get_static_field<"LETTER", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> IDEOGRAPHIC() { return get_static_field<"IDEOGRAPHIC", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> LOWERCASE() { return get_static_field<"LOWERCASE", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> UPPERCASE() { return get_static_field<"UPPERCASE", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> TITLECASE() { return get_static_field<"TITLECASE", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> WHITE_SPACE() { return get_static_field<"WHITE_SPACE", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> CONTROL() { return get_static_field<"CONTROL", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> PUNCTUATION() { return get_static_field<"PUNCTUATION", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> HEX_DIGIT() { return get_static_field<"HEX_DIGIT", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> ASSIGNED() { return get_static_field<"ASSIGNED", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> NONCHARACTER_CODE_POINT() { return get_static_field<"NONCHARACTER_CODE_POINT", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> DIGIT() { return get_static_field<"DIGIT", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> ALNUM() { return get_static_field<"ALNUM", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> BLANK() { return get_static_field<"BLANK", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> GRAPH() { return get_static_field<"GRAPH", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> PRINT() { return get_static_field<"PRINT", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> WORD() { return get_static_field<"WORD", jni::ref<java::util::regex::UnicodeProp>>(); }
	static jni::ref<java::util::regex::UnicodeProp> JOIN_CONTROL() { return get_static_field<"JOIN_CONTROL", jni::ref<java::util::regex::UnicodeProp>>(); }

	static jni::ref<jni::array<java::util::regex::UnicodeProp>> values() { return call_static_method<"values", jni::ref<jni::array<java::util::regex::UnicodeProp>>>(); }
	static jni::ref<java::util::regex::UnicodeProp> valueOf(jni::ref<java::lang::String> p1) { return call_static_method<"valueOf", jni::ref<java::util::regex::UnicodeProp>>(p1); }
	static jni::ref<java::util::regex::UnicodeProp> forName(jni::ref<java::lang::String> p1) { return call_static_method<"forName", jni::ref<java::util::regex::UnicodeProp>>(p1); }
	static jni::ref<java::util::regex::UnicodeProp> forPOSIXName(jni::ref<java::lang::String> p1) { return call_static_method<"forPOSIXName", jni::ref<java::util::regex::UnicodeProp>>(p1); }
	jboolean is(jint p1) { return call_method<"is", jboolean>(p1); }

protected:

	UnicodeProp(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_REGEX_UNICODEPROP
