// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CALENDAR_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CALENDAR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Calendar; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Calendar>
{
	static constexpr fixed_string class_name = "java/util/Calendar";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CALENDAR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CALENDAR)
#define SCAPIX_JAVA_API_JAVA_UTIL_CALENDAR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/TimeZone.h>
#include <scapix/java_api/java/util/Calendar_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Calendar : public jni::object_base<"java/util/Calendar",
	java::lang::Object,
	java::io::Serializable,
	java::lang::Cloneable,
	java::lang::Comparable>
{
public:

	using Builder = Calendar_Builder;

	static jint ERA() { return get_static_field<"ERA", jint>(); }
	static jint YEAR() { return get_static_field<"YEAR", jint>(); }
	static jint MONTH() { return get_static_field<"MONTH", jint>(); }
	static jint WEEK_OF_YEAR() { return get_static_field<"WEEK_OF_YEAR", jint>(); }
	static jint WEEK_OF_MONTH() { return get_static_field<"WEEK_OF_MONTH", jint>(); }
	static jint DATE() { return get_static_field<"DATE", jint>(); }
	static jint DAY_OF_MONTH() { return get_static_field<"DAY_OF_MONTH", jint>(); }
	static jint DAY_OF_YEAR() { return get_static_field<"DAY_OF_YEAR", jint>(); }
	static jint DAY_OF_WEEK() { return get_static_field<"DAY_OF_WEEK", jint>(); }
	static jint DAY_OF_WEEK_IN_MONTH() { return get_static_field<"DAY_OF_WEEK_IN_MONTH", jint>(); }
	static jint AM_PM() { return get_static_field<"AM_PM", jint>(); }
	static jint HOUR() { return get_static_field<"HOUR", jint>(); }
	static jint HOUR_OF_DAY() { return get_static_field<"HOUR_OF_DAY", jint>(); }
	static jint MINUTE() { return get_static_field<"MINUTE", jint>(); }
	static jint SECOND() { return get_static_field<"SECOND", jint>(); }
	static jint MILLISECOND() { return get_static_field<"MILLISECOND", jint>(); }
	static jint ZONE_OFFSET() { return get_static_field<"ZONE_OFFSET", jint>(); }
	static jint DST_OFFSET() { return get_static_field<"DST_OFFSET", jint>(); }
	static jint FIELD_COUNT() { return get_static_field<"FIELD_COUNT", jint>(); }
	static jint SUNDAY() { return get_static_field<"SUNDAY", jint>(); }
	static jint MONDAY() { return get_static_field<"MONDAY", jint>(); }
	static jint TUESDAY() { return get_static_field<"TUESDAY", jint>(); }
	static jint WEDNESDAY() { return get_static_field<"WEDNESDAY", jint>(); }
	static jint THURSDAY() { return get_static_field<"THURSDAY", jint>(); }
	static jint FRIDAY() { return get_static_field<"FRIDAY", jint>(); }
	static jint SATURDAY() { return get_static_field<"SATURDAY", jint>(); }
	static jint JANUARY() { return get_static_field<"JANUARY", jint>(); }
	static jint FEBRUARY() { return get_static_field<"FEBRUARY", jint>(); }
	static jint MARCH() { return get_static_field<"MARCH", jint>(); }
	static jint APRIL() { return get_static_field<"APRIL", jint>(); }
	static jint MAY() { return get_static_field<"MAY", jint>(); }
	static jint JUNE() { return get_static_field<"JUNE", jint>(); }
	static jint JULY() { return get_static_field<"JULY", jint>(); }
	static jint AUGUST() { return get_static_field<"AUGUST", jint>(); }
	static jint SEPTEMBER() { return get_static_field<"SEPTEMBER", jint>(); }
	static jint OCTOBER() { return get_static_field<"OCTOBER", jint>(); }
	static jint NOVEMBER() { return get_static_field<"NOVEMBER", jint>(); }
	static jint DECEMBER() { return get_static_field<"DECEMBER", jint>(); }
	static jint UNDECIMBER() { return get_static_field<"UNDECIMBER", jint>(); }
	static jint AM() { return get_static_field<"AM", jint>(); }
	static jint PM() { return get_static_field<"PM", jint>(); }
	static jint ALL_STYLES() { return get_static_field<"ALL_STYLES", jint>(); }
	static jint SHORT() { return get_static_field<"SHORT", jint>(); }
	static jint LONG() { return get_static_field<"LONG", jint>(); }
	static jint NARROW_FORMAT() { return get_static_field<"NARROW_FORMAT", jint>(); }
	static jint NARROW_STANDALONE() { return get_static_field<"NARROW_STANDALONE", jint>(); }
	static jint SHORT_FORMAT() { return get_static_field<"SHORT_FORMAT", jint>(); }
	static jint LONG_FORMAT() { return get_static_field<"LONG_FORMAT", jint>(); }
	static jint SHORT_STANDALONE() { return get_static_field<"SHORT_STANDALONE", jint>(); }
	static jint LONG_STANDALONE() { return get_static_field<"LONG_STANDALONE", jint>(); }

	static jni::ref<java::util::Calendar> getInstance() { return call_static_method<"getInstance", jni::ref<java::util::Calendar>>(); }
	static jni::ref<java::util::Calendar> getInstance(jni::ref<java::util::TimeZone> p1) { return call_static_method<"getInstance", jni::ref<java::util::Calendar>>(p1); }
	static jni::ref<java::util::Calendar> getInstance(jni::ref<java::util::Locale> p1) { return call_static_method<"getInstance", jni::ref<java::util::Calendar>>(p1); }
	static jni::ref<java::util::Calendar> getInstance(jni::ref<java::util::TimeZone> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getInstance", jni::ref<java::util::Calendar>>(p1, p2); }
	static jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_static_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }
	jni::ref<java::util::Date> getTime() { return call_method<"getTime", jni::ref<java::util::Date>>(); }
	void setTime(jni::ref<java::util::Date> p1) { return call_method<"setTime", void>(p1); }
	jlong getTimeInMillis() { return call_method<"getTimeInMillis", jlong>(); }
	void setTimeInMillis(jlong p1) { return call_method<"setTimeInMillis", void>(p1); }
	jint get(jint p1) { return call_method<"get", jint>(p1); }
	void set(jint p1, jint p2) { return call_method<"set", void>(p1, p2); }
	void set(jint p1, jint p2, jint p3) { return call_method<"set", void>(p1, p2, p3); }
	void set(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"set", void>(p1, p2, p3, p4, p5); }
	void set(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"set", void>(p1, p2, p3, p4, p5, p6); }
	void clear() { return call_method<"clear", void>(); }
	void clear(jint p1) { return call_method<"clear", void>(p1); }
	jboolean isSet(jint p1) { return call_method<"isSet", jboolean>(p1); }
	jni::ref<java::lang::String> getDisplayName(jint p1, jint p2, jni::ref<java::util::Locale> p3) { return call_method<"getDisplayName", jni::ref<java::lang::String>>(p1, p2, p3); }
	jni::ref<java::util::Map> getDisplayNames(jint p1, jint p2, jni::ref<java::util::Locale> p3) { return call_method<"getDisplayNames", jni::ref<java::util::Map>>(p1, p2, p3); }
	static jni::ref<java::util::Set> getAvailableCalendarTypes() { return call_static_method<"getAvailableCalendarTypes", jni::ref<java::util::Set>>(); }
	jni::ref<java::lang::String> getCalendarType() { return call_method<"getCalendarType", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean before(jni::ref<java::lang::Object> p1) { return call_method<"before", jboolean>(p1); }
	jboolean after(jni::ref<java::lang::Object> p1) { return call_method<"after", jboolean>(p1); }
	jint compareTo(jni::ref<java::util::Calendar> p1) { return call_method<"compareTo", jint>(p1); }
	void add(jint p1, jint p2) { return call_method<"add", void>(p1, p2); }
	void roll(jint p1, jboolean p2) { return call_method<"roll", void>(p1, p2); }
	void roll(jint p1, jint p2) { return call_method<"roll", void>(p1, p2); }
	void setTimeZone(jni::ref<java::util::TimeZone> p1) { return call_method<"setTimeZone", void>(p1); }
	jni::ref<java::util::TimeZone> getTimeZone() { return call_method<"getTimeZone", jni::ref<java::util::TimeZone>>(); }
	void setLenient(jboolean p1) { return call_method<"setLenient", void>(p1); }
	jboolean isLenient() { return call_method<"isLenient", jboolean>(); }
	void setFirstDayOfWeek(jint p1) { return call_method<"setFirstDayOfWeek", void>(p1); }
	jint getFirstDayOfWeek() { return call_method<"getFirstDayOfWeek", jint>(); }
	void setMinimalDaysInFirstWeek(jint p1) { return call_method<"setMinimalDaysInFirstWeek", void>(p1); }
	jint getMinimalDaysInFirstWeek() { return call_method<"getMinimalDaysInFirstWeek", jint>(); }
	jboolean isWeekDateSupported() { return call_method<"isWeekDateSupported", jboolean>(); }
	jint getWeekYear() { return call_method<"getWeekYear", jint>(); }
	void setWeekDate(jint p1, jint p2, jint p3) { return call_method<"setWeekDate", void>(p1, p2, p3); }
	jint getWeeksInWeekYear() { return call_method<"getWeeksInWeekYear", jint>(); }
	jint getMinimum(jint p1) { return call_method<"getMinimum", jint>(p1); }
	jint getMaximum(jint p1) { return call_method<"getMaximum", jint>(p1); }
	jint getGreatestMinimum(jint p1) { return call_method<"getGreatestMinimum", jint>(p1); }
	jint getLeastMaximum(jint p1) { return call_method<"getLeastMaximum", jint>(p1); }
	jint getActualMinimum(jint p1) { return call_method<"getActualMinimum", jint>(p1); }
	jint getActualMaximum(jint p1) { return call_method<"getActualMaximum", jint>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::time::Instant> toInstant() { return call_method<"toInstant", jni::ref<java::time::Instant>>(); }

protected:

	Calendar(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CALENDAR
