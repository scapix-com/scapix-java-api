// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/AbstractSpinedBuffer.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/lang/Iterable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_SPINEDBUFFER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_SPINEDBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class SpinedBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::SpinedBuffer>
{
	static constexpr fixed_string class_name = "java/util/stream/SpinedBuffer";
	using base_classes = std::tuple<scapix::java_api::java::util::stream::AbstractSpinedBuffer, scapix::java_api::java::util::function::Consumer, scapix::java_api::java::lang::Iterable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_SPINEDBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_SPINEDBUFFER)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_SPINEDBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::SpinedBuffer : public jni::object_base<"java/util/stream/SpinedBuffer",
	java::util::stream::AbstractSpinedBuffer,
	java::util::function::Consumer,
	java::lang::Iterable>
{
public:

	jni::ref<java::lang::Object> get(jlong p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	void copyInto(jni::ref<jni::array<java::lang::Object>> p1, jint p2) { return call_method<"copyInto", void>(p1, p2); }
	jni::ref<jni::array<java::lang::Object>> asArray(jni::ref<java::util::function::IntFunction> p1) { return call_method<"asArray", jni::ref<jni::array<java::lang::Object>>>(p1); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	void forEach(jni::ref<java::util::function::Consumer> p1) { return call_method<"forEach", void>(p1); }
	void accept(jni::ref<java::lang::Object> p1) { return call_method<"accept", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Spliterator> spliterator() { return call_method<"spliterator", jni::ref<java::util::Spliterator>>(); }

protected:

	SpinedBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_SPINEDBUFFER
