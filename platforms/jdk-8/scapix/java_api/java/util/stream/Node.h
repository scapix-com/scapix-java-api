// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class Node; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::Node>
{
	static constexpr fixed_string class_name = "java/util/stream/Node";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/stream/StreamShape.h>
#include <scapix/java_api/java/util/stream/Node_Builder.h>
#include <scapix/java_api/java/util/stream/Node_OfPrimitive.h>
#include <scapix/java_api/java/util/stream/Node_OfInt.h>
#include <scapix/java_api/java/util/stream/Node_OfLong.h>
#include <scapix/java_api/java/util/stream/Node_OfDouble.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::Node : public jni::object_base<"java/util/stream/Node",
	java::lang::Object>
{
public:

	using Builder = Node_Builder;
	using OfPrimitive = Node_OfPrimitive;
	using OfInt = Node_OfInt;
	using OfLong = Node_OfLong;
	using OfDouble = Node_OfDouble;

	jni::ref<java::util::Spliterator> spliterator() { return call_method<"spliterator", jni::ref<java::util::Spliterator>>(); }
	void forEach(jni::ref<java::util::function::Consumer> p1) { return call_method<"forEach", void>(p1); }
	jint getChildCount() { return call_method<"getChildCount", jint>(); }
	jni::ref<java::util::stream::Node> getChild(jint p1) { return call_method<"getChild", jni::ref<java::util::stream::Node>>(p1); }
	jni::ref<java::util::stream::Node> truncate(jlong p1, jlong p2, jni::ref<java::util::function::IntFunction> p3) { return call_method<"truncate", jni::ref<java::util::stream::Node>>(p1, p2, p3); }
	jni::ref<jni::array<java::lang::Object>> asArray(jni::ref<java::util::function::IntFunction> p1) { return call_method<"asArray", jni::ref<jni::array<java::lang::Object>>>(p1); }
	void copyInto(jni::ref<jni::array<java::lang::Object>> p1, jint p2) { return call_method<"copyInto", void>(p1, p2); }
	jni::ref<java::util::stream::StreamShape> getShape() { return call_method<"getShape", jni::ref<java::util::stream::StreamShape>>(); }
	jlong count() { return call_method<"count", jlong>(); }

protected:

	Node(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE
