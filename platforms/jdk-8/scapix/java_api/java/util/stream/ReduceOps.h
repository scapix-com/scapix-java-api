// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_REDUCEOPS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_REDUCEOPS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class ReduceOps; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::ReduceOps>
{
	static constexpr fixed_string class_name = "java/util/stream/ReduceOps";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_REDUCEOPS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_REDUCEOPS)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_REDUCEOPS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/DoubleBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntBinaryOperator.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/function/ObjDoubleConsumer.h>
#include <scapix/java_api/java/util/function/ObjIntConsumer.h>
#include <scapix/java_api/java/util/function/ObjLongConsumer.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/stream/Collector.h>
#include <scapix/java_api/java/util/stream/TerminalOp.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::ReduceOps : public jni::object_base<"java/util/stream/ReduceOps",
	java::lang::Object>
{
public:

	static jni::ref<java::util::stream::TerminalOp> makeRef(jni::ref<java::lang::Object> p1, jni::ref<java::util::function::BiFunction> p2, jni::ref<java::util::function::BinaryOperator> p3) { return call_static_method<"makeRef", jni::ref<java::util::stream::TerminalOp>>(p1, p2, p3); }
	static jni::ref<java::util::stream::TerminalOp> makeRef(jni::ref<java::util::function::BinaryOperator> p1) { return call_static_method<"makeRef", jni::ref<java::util::stream::TerminalOp>>(p1); }
	static jni::ref<java::util::stream::TerminalOp> makeRef(jni::ref<java::util::stream::Collector> p1) { return call_static_method<"makeRef", jni::ref<java::util::stream::TerminalOp>>(p1); }
	static jni::ref<java::util::stream::TerminalOp> makeRef(jni::ref<java::util::function::Supplier> p1, jni::ref<java::util::function::BiConsumer> p2, jni::ref<java::util::function::BiConsumer> p3) { return call_static_method<"makeRef", jni::ref<java::util::stream::TerminalOp>>(p1, p2, p3); }
	static jni::ref<java::util::stream::TerminalOp> makeInt(jint p1, jni::ref<java::util::function::IntBinaryOperator> p2) { return call_static_method<"makeInt", jni::ref<java::util::stream::TerminalOp>>(p1, p2); }
	static jni::ref<java::util::stream::TerminalOp> makeInt(jni::ref<java::util::function::IntBinaryOperator> p1) { return call_static_method<"makeInt", jni::ref<java::util::stream::TerminalOp>>(p1); }
	static jni::ref<java::util::stream::TerminalOp> makeInt(jni::ref<java::util::function::Supplier> p1, jni::ref<java::util::function::ObjIntConsumer> p2, jni::ref<java::util::function::BinaryOperator> p3) { return call_static_method<"makeInt", jni::ref<java::util::stream::TerminalOp>>(p1, p2, p3); }
	static jni::ref<java::util::stream::TerminalOp> makeLong(jlong p1, jni::ref<java::util::function::LongBinaryOperator> p2) { return call_static_method<"makeLong", jni::ref<java::util::stream::TerminalOp>>(p1, p2); }
	static jni::ref<java::util::stream::TerminalOp> makeLong(jni::ref<java::util::function::LongBinaryOperator> p1) { return call_static_method<"makeLong", jni::ref<java::util::stream::TerminalOp>>(p1); }
	static jni::ref<java::util::stream::TerminalOp> makeLong(jni::ref<java::util::function::Supplier> p1, jni::ref<java::util::function::ObjLongConsumer> p2, jni::ref<java::util::function::BinaryOperator> p3) { return call_static_method<"makeLong", jni::ref<java::util::stream::TerminalOp>>(p1, p2, p3); }
	static jni::ref<java::util::stream::TerminalOp> makeDouble(jdouble p1, jni::ref<java::util::function::DoubleBinaryOperator> p2) { return call_static_method<"makeDouble", jni::ref<java::util::stream::TerminalOp>>(p1, p2); }
	static jni::ref<java::util::stream::TerminalOp> makeDouble(jni::ref<java::util::function::DoubleBinaryOperator> p1) { return call_static_method<"makeDouble", jni::ref<java::util::stream::TerminalOp>>(p1); }
	static jni::ref<java::util::stream::TerminalOp> makeDouble(jni::ref<java::util::function::Supplier> p1, jni::ref<java::util::function::ObjDoubleConsumer> p2, jni::ref<java::util::function::BinaryOperator> p3) { return call_static_method<"makeDouble", jni::ref<java::util::stream::TerminalOp>>(p1, p2, p3); }

protected:

	ReduceOps(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_REDUCEOPS
