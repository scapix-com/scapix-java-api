// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/PipelineHelper.h>
#include <scapix/java_api/java/util/stream/BaseStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTPIPELINE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTPIPELINE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class AbstractPipeline; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::AbstractPipeline>
{
	static constexpr fixed_string class_name = "java/util/stream/AbstractPipeline";
	using base_classes = std::tuple<scapix::java_api::java::util::stream::PipelineHelper, scapix::java_api::java::util::stream::BaseStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTPIPELINE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTPIPELINE)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTPIPELINE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/util/Spliterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::AbstractPipeline : public jni::object_base<"java/util/stream/AbstractPipeline",
	java::util::stream::PipelineHelper,
	java::util::stream::BaseStream>
{
public:

	jni::ref<java::util::stream::BaseStream> sequential() { return call_method<"sequential", jni::ref<java::util::stream::BaseStream>>(); }
	jni::ref<java::util::stream::BaseStream> parallel() { return call_method<"parallel", jni::ref<java::util::stream::BaseStream>>(); }
	void close() { return call_method<"close", void>(); }
	jni::ref<java::util::stream::BaseStream> onClose(jni::ref<java::lang::Runnable> p1) { return call_method<"onClose", jni::ref<java::util::stream::BaseStream>>(p1); }
	jni::ref<java::util::Spliterator> spliterator() { return call_method<"spliterator", jni::ref<java::util::Spliterator>>(); }
	jboolean isParallel() { return call_method<"isParallel", jboolean>(); }

protected:

	AbstractPipeline(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_ABSTRACTPIPELINE
