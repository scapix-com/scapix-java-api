// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::logging { class Logger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::logging::Logger>
{
	static constexpr fixed_string class_name = "java/util/logging/Logger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER)
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/ResourceBundle.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#include <scapix/java_api/java/util/logging/Filter.h>
#include <scapix/java_api/java/util/logging/Handler.h>
#include <scapix/java_api/java/util/logging/Level.h>
#include <scapix/java_api/java/util/logging/LogRecord.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::logging::Logger : public jni::object_base<"java/util/logging/Logger",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> GLOBAL_LOGGER_NAME() { return get_static_field<"GLOBAL_LOGGER_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::util::logging::Logger> global() { return get_static_field<"global", jni::ref<java::util::logging::Logger>>(); }

	static jni::ref<java::util::logging::Logger> getGlobal() { return call_static_method<"getGlobal", jni::ref<java::util::logging::Logger>>(); }
	static jni::ref<java::util::logging::Logger> getLogger(jni::ref<java::lang::String> p1) { return call_static_method<"getLogger", jni::ref<java::util::logging::Logger>>(p1); }
	static jni::ref<java::util::logging::Logger> getLogger(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"getLogger", jni::ref<java::util::logging::Logger>>(p1, p2); }
	static jni::ref<java::util::logging::Logger> getAnonymousLogger() { return call_static_method<"getAnonymousLogger", jni::ref<java::util::logging::Logger>>(); }
	static jni::ref<java::util::logging::Logger> getAnonymousLogger(jni::ref<java::lang::String> p1) { return call_static_method<"getAnonymousLogger", jni::ref<java::util::logging::Logger>>(p1); }
	jni::ref<java::util::ResourceBundle> getResourceBundle() { return call_method<"getResourceBundle", jni::ref<java::util::ResourceBundle>>(); }
	jni::ref<java::lang::String> getResourceBundleName() { return call_method<"getResourceBundleName", jni::ref<java::lang::String>>(); }
	void setFilter(jni::ref<java::util::logging::Filter> p1) { return call_method<"setFilter", void>(p1); }
	jni::ref<java::util::logging::Filter> getFilter() { return call_method<"getFilter", jni::ref<java::util::logging::Filter>>(); }
	void log(jni::ref<java::util::logging::LogRecord> p1) { return call_method<"log", void>(p1); }
	void log(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2) { return call_method<"log", void>(p1, p2); }
	void log(jni::ref<java::util::logging::Level> p1, jni::ref<java::util::function::Supplier> p2) { return call_method<"log", void>(p1, p2); }
	void log(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3) { return call_method<"log", void>(p1, p2, p3); }
	void log(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_method<"log", void>(p1, p2, p3); }
	void log(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"log", void>(p1, p2, p3); }
	void log(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::Throwable> p2, jni::ref<java::util::function::Supplier> p3) { return call_method<"log", void>(p1, p2, p3); }
	void logp(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"logp", void>(p1, p2, p3, p4); }
	void logp(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::function::Supplier> p4) { return call_method<"logp", void>(p1, p2, p3, p4); }
	void logp(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::Object> p5) { return call_method<"logp", void>(p1, p2, p3, p4, p5); }
	void logp(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<jni::array<java::lang::Object>> p5) { return call_method<"logp", void>(p1, p2, p3, p4, p5); }
	void logp(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::Throwable> p5) { return call_method<"logp", void>(p1, p2, p3, p4, p5); }
	void logp(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::Throwable> p4, jni::ref<java::util::function::Supplier> p5) { return call_method<"logp", void>(p1, p2, p3, p4, p5); }
	void logrb(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"logrb", void>(p1, p2, p3, p4, p5); }
	void logrb(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::Object> p6) { return call_method<"logrb", void>(p1, p2, p3, p4, p5, p6); }
	void logrb(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jni::ref<jni::array<java::lang::Object>> p6) { return call_method<"logrb", void>(p1, p2, p3, p4, p5, p6); }
	void logrb(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::ResourceBundle> p4, jni::ref<java::lang::String> p5, jni::ref<jni::array<java::lang::Object>> p6) { return call_method<"logrb", void>(p1, p2, p3, p4, p5, p6); }
	void logrb(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::Throwable> p6) { return call_method<"logrb", void>(p1, p2, p3, p4, p5, p6); }
	void logrb(jni::ref<java::util::logging::Level> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::ResourceBundle> p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::Throwable> p6) { return call_method<"logrb", void>(p1, p2, p3, p4, p5, p6); }
	void entering(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"entering", void>(p1, p2); }
	void entering(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3) { return call_method<"entering", void>(p1, p2, p3); }
	void entering(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_method<"entering", void>(p1, p2, p3); }
	void exiting(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"exiting", void>(p1, p2); }
	void exiting(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3) { return call_method<"exiting", void>(p1, p2, p3); }
	void throwing(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"throwing", void>(p1, p2, p3); }
	void severe(jni::ref<java::lang::String> p1) { return call_method<"severe", void>(p1); }
	void warning(jni::ref<java::lang::String> p1) { return call_method<"warning", void>(p1); }
	void info(jni::ref<java::lang::String> p1) { return call_method<"info", void>(p1); }
	void config(jni::ref<java::lang::String> p1) { return call_method<"config", void>(p1); }
	void fine(jni::ref<java::lang::String> p1) { return call_method<"fine", void>(p1); }
	void finer(jni::ref<java::lang::String> p1) { return call_method<"finer", void>(p1); }
	void finest(jni::ref<java::lang::String> p1) { return call_method<"finest", void>(p1); }
	void severe(jni::ref<java::util::function::Supplier> p1) { return call_method<"severe", void>(p1); }
	void warning(jni::ref<java::util::function::Supplier> p1) { return call_method<"warning", void>(p1); }
	void info(jni::ref<java::util::function::Supplier> p1) { return call_method<"info", void>(p1); }
	void config(jni::ref<java::util::function::Supplier> p1) { return call_method<"config", void>(p1); }
	void fine(jni::ref<java::util::function::Supplier> p1) { return call_method<"fine", void>(p1); }
	void finer(jni::ref<java::util::function::Supplier> p1) { return call_method<"finer", void>(p1); }
	void finest(jni::ref<java::util::function::Supplier> p1) { return call_method<"finest", void>(p1); }
	void setLevel(jni::ref<java::util::logging::Level> p1) { return call_method<"setLevel", void>(p1); }
	jni::ref<java::util::logging::Level> getLevel() { return call_method<"getLevel", jni::ref<java::util::logging::Level>>(); }
	jboolean isLoggable(jni::ref<java::util::logging::Level> p1) { return call_method<"isLoggable", jboolean>(p1); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void addHandler(jni::ref<java::util::logging::Handler> p1) { return call_method<"addHandler", void>(p1); }
	void removeHandler(jni::ref<java::util::logging::Handler> p1) { return call_method<"removeHandler", void>(p1); }
	jni::ref<jni::array<java::util::logging::Handler>> getHandlers() { return call_method<"getHandlers", jni::ref<jni::array<java::util::logging::Handler>>>(); }
	void setUseParentHandlers(jboolean p1) { return call_method<"setUseParentHandlers", void>(p1); }
	jboolean getUseParentHandlers() { return call_method<"getUseParentHandlers", jboolean>(); }
	void setResourceBundle(jni::ref<java::util::ResourceBundle> p1) { return call_method<"setResourceBundle", void>(p1); }
	jni::ref<java::util::logging::Logger> getParent() { return call_method<"getParent", jni::ref<java::util::logging::Logger>>(); }
	void setParent(jni::ref<java::util::logging::Logger> p1) { return call_method<"setParent", void>(p1); }

protected:

	Logger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER
