// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/OutputStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_FILEHANDLER_METEREDSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_FILEHANDLER_METEREDSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::logging { class FileHandler_MeteredStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::logging::FileHandler_MeteredStream>
{
	static constexpr fixed_string class_name = "java/util/logging/FileHandler$MeteredStream";
	using base_classes = std::tuple<scapix::java_api::java::io::OutputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_FILEHANDLER_METEREDSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_FILEHANDLER_METEREDSTREAM)
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_FILEHANDLER_METEREDSTREAM

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::logging::FileHandler_MeteredStream : public jni::object_base<"java/util/logging/FileHandler$MeteredStream",
	java::io::OutputStream>
{
public:

	void write(jint p1) { return call_method<"write", void>(p1); }
	void write(jni::ref<jni::array<jbyte>> p1) { return call_method<"write", void>(p1); }
	void write(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"write", void>(p1, p2, p3); }
	void flush() { return call_method<"flush", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	FileHandler_MeteredStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_FILEHANDLER_METEREDSTREAM
