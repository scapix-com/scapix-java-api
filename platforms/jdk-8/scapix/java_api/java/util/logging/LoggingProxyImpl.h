// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/util/logging/LoggingProxy.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGINGPROXYIMPL_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGINGPROXYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::logging { class LoggingProxyImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::logging::LoggingProxyImpl>
{
	static constexpr fixed_string class_name = "java/util/logging/LoggingProxyImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::util::logging::LoggingProxy>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGINGPROXYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGINGPROXYIMPL)
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGINGPROXYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::logging::LoggingProxyImpl : public jni::object_base<"java/util/logging/LoggingProxyImpl",
	java::lang::Object,
	sun::util::logging::LoggingProxy>
{
public:

	jni::ref<java::lang::Object> getLogger(jni::ref<java::lang::String> p1) { return call_method<"getLogger", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> getLevel(jni::ref<java::lang::Object> p1) { return call_method<"getLevel", jni::ref<java::lang::Object>>(p1); }
	void setLevel(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"setLevel", void>(p1, p2); }
	jboolean isLoggable(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"isLoggable", jboolean>(p1, p2); }
	void log(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::String> p3) { return call_method<"log", void>(p1, p2, p3); }
	void log(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::Throwable> p4) { return call_method<"log", void>(p1, p2, p3, p4); }
	void log(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<java::lang::Object>> p4) { return call_method<"log", void>(p1, p2, p3, p4); }
	jni::ref<java::util::List> getLoggerNames() { return call_method<"getLoggerNames", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> getLoggerLevel(jni::ref<java::lang::String> p1) { return call_method<"getLoggerLevel", jni::ref<java::lang::String>>(p1); }
	void setLoggerLevel(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setLoggerLevel", void>(p1, p2); }
	jni::ref<java::lang::String> getParentLoggerName(jni::ref<java::lang::String> p1) { return call_method<"getParentLoggerName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Object> parseLevel(jni::ref<java::lang::String> p1) { return call_method<"parseLevel", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::String> getLevelName(jni::ref<java::lang::Object> p1) { return call_method<"getLevelName", jni::ref<java::lang::String>>(p1); }
	jint getLevelValue(jni::ref<java::lang::Object> p1) { return call_method<"getLevelValue", jint>(p1); }
	jni::ref<java::lang::String> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::String>>(p1); }

protected:

	LoggingProxyImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGINGPROXYIMPL
