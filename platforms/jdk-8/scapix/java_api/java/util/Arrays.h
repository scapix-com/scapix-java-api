// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Arrays; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Arrays>
{
	static constexpr fixed_string class_name = "java/util/Arrays";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS)
#define SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/Spliterator_OfDouble.h>
#include <scapix/java_api/java/util/Spliterator_OfInt.h>
#include <scapix/java_api/java/util/Spliterator_OfLong.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/DoubleBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/function/IntToDoubleFunction.h>
#include <scapix/java_api/java/util/function/IntToLongFunction.h>
#include <scapix/java_api/java/util/function/IntUnaryOperator.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Arrays : public jni::object_base<"java/util/Arrays",
	java::lang::Object>
{
public:

	static void sort(jni::ref<jni::array<jint>> p1) { return call_static_method<"sort", void>(p1); }
	static void sort(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_static_method<"sort", void>(p1, p2, p3); }
	static void sort(jni::ref<jni::array<jlong>> p1) { return call_static_method<"sort", void>(p1); }
	static void sort(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_static_method<"sort", void>(p1, p2, p3); }
	static void sort(jni::ref<jni::array<jshort>> p1) { return call_static_method<"sort", void>(p1); }
	static void sort(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_static_method<"sort", void>(p1, p2, p3); }
	static void sort(jni::ref<jni::array<jchar>> p1) { return call_static_method<"sort", void>(p1); }
	static void sort(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_static_method<"sort", void>(p1, p2, p3); }
	static void sort(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"sort", void>(p1); }
	static void sort(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"sort", void>(p1, p2, p3); }
	static void sort(jni::ref<jni::array<jfloat>> p1) { return call_static_method<"sort", void>(p1); }
	static void sort(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3) { return call_static_method<"sort", void>(p1, p2, p3); }
	static void sort(jni::ref<jni::array<jdouble>> p1) { return call_static_method<"sort", void>(p1); }
	static void sort(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_static_method<"sort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"parallelSort", void>(p1); }
	static void parallelSort(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"parallelSort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<jchar>> p1) { return call_static_method<"parallelSort", void>(p1); }
	static void parallelSort(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_static_method<"parallelSort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<jshort>> p1) { return call_static_method<"parallelSort", void>(p1); }
	static void parallelSort(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_static_method<"parallelSort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<jint>> p1) { return call_static_method<"parallelSort", void>(p1); }
	static void parallelSort(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_static_method<"parallelSort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<jlong>> p1) { return call_static_method<"parallelSort", void>(p1); }
	static void parallelSort(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_static_method<"parallelSort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<jfloat>> p1) { return call_static_method<"parallelSort", void>(p1); }
	static void parallelSort(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3) { return call_static_method<"parallelSort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<jdouble>> p1) { return call_static_method<"parallelSort", void>(p1); }
	static void parallelSort(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_static_method<"parallelSort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<java::lang::Comparable>> p1) { return call_static_method<"parallelSort", void>(p1); }
	static void parallelSort(jni::ref<jni::array<java::lang::Comparable>> p1, jint p2, jint p3) { return call_static_method<"parallelSort", void>(p1, p2, p3); }
	static void parallelSort(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<java::util::Comparator> p2) { return call_static_method<"parallelSort", void>(p1, p2); }
	static void parallelSort(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3, jni::ref<java::util::Comparator> p4) { return call_static_method<"parallelSort", void>(p1, p2, p3, p4); }
	static void sort(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"sort", void>(p1); }
	static void sort(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3) { return call_static_method<"sort", void>(p1, p2, p3); }
	static void sort(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<java::util::Comparator> p2) { return call_static_method<"sort", void>(p1, p2); }
	static void sort(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3, jni::ref<java::util::Comparator> p4) { return call_static_method<"sort", void>(p1, p2, p3, p4); }
	static void parallelPrefix(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<java::util::function::BinaryOperator> p2) { return call_static_method<"parallelPrefix", void>(p1, p2); }
	static void parallelPrefix(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3, jni::ref<java::util::function::BinaryOperator> p4) { return call_static_method<"parallelPrefix", void>(p1, p2, p3, p4); }
	static void parallelPrefix(jni::ref<jni::array<jlong>> p1, jni::ref<java::util::function::LongBinaryOperator> p2) { return call_static_method<"parallelPrefix", void>(p1, p2); }
	static void parallelPrefix(jni::ref<jni::array<jlong>> p1, jint p2, jint p3, jni::ref<java::util::function::LongBinaryOperator> p4) { return call_static_method<"parallelPrefix", void>(p1, p2, p3, p4); }
	static void parallelPrefix(jni::ref<jni::array<jdouble>> p1, jni::ref<java::util::function::DoubleBinaryOperator> p2) { return call_static_method<"parallelPrefix", void>(p1, p2); }
	static void parallelPrefix(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3, jni::ref<java::util::function::DoubleBinaryOperator> p4) { return call_static_method<"parallelPrefix", void>(p1, p2, p3, p4); }
	static void parallelPrefix(jni::ref<jni::array<jint>> p1, jni::ref<java::util::function::IntBinaryOperator> p2) { return call_static_method<"parallelPrefix", void>(p1, p2); }
	static void parallelPrefix(jni::ref<jni::array<jint>> p1, jint p2, jint p3, jni::ref<java::util::function::IntBinaryOperator> p4) { return call_static_method<"parallelPrefix", void>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<jlong>> p1, jlong p2) { return call_static_method<"binarySearch", jint>(p1, p2); }
	static jint binarySearch(jni::ref<jni::array<jlong>> p1, jint p2, jint p3, jlong p4) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"binarySearch", jint>(p1, p2); }
	static jint binarySearch(jni::ref<jni::array<jint>> p1, jint p2, jint p3, jint p4) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<jshort>> p1, jshort p2) { return call_static_method<"binarySearch", jint>(p1, p2); }
	static jint binarySearch(jni::ref<jni::array<jshort>> p1, jint p2, jint p3, jshort p4) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<jchar>> p1, jchar p2) { return call_static_method<"binarySearch", jint>(p1, p2); }
	static jint binarySearch(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jchar p4) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<jbyte>> p1, jbyte p2) { return call_static_method<"binarySearch", jint>(p1, p2); }
	static jint binarySearch(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jbyte p4) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<jdouble>> p1, jdouble p2) { return call_static_method<"binarySearch", jint>(p1, p2); }
	static jint binarySearch(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3, jdouble p4) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<jfloat>> p1, jfloat p2) { return call_static_method<"binarySearch", jint>(p1, p2); }
	static jint binarySearch(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3, jfloat p4) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"binarySearch", jint>(p1, p2); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3, jni::ref<java::lang::Object> p4) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<java::lang::Object> p2, jni::ref<java::util::Comparator> p3) { return call_static_method<"binarySearch", jint>(p1, p2, p3); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3, jni::ref<java::lang::Object> p4, jni::ref<java::util::Comparator> p5) { return call_static_method<"binarySearch", jint>(p1, p2, p3, p4, p5); }
	static jboolean equals(jni::ref<jni::array<jlong>> p1, jni::ref<jni::array<jlong>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static jboolean equals(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static jboolean equals(jni::ref<jni::array<jshort>> p1, jni::ref<jni::array<jshort>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static jboolean equals(jni::ref<jni::array<jchar>> p1, jni::ref<jni::array<jchar>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static jboolean equals(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static jboolean equals(jni::ref<jni::array<jboolean>> p1, jni::ref<jni::array<jboolean>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static jboolean equals(jni::ref<jni::array<jdouble>> p1, jni::ref<jni::array<jdouble>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static jboolean equals(jni::ref<jni::array<jfloat>> p1, jni::ref<jni::array<jfloat>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static jboolean equals(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_static_method<"equals", jboolean>(p1, p2); }
	static void fill(jni::ref<jni::array<jlong>> p1, jlong p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<jlong>> p1, jint p2, jint p3, jlong p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static void fill(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<jint>> p1, jint p2, jint p3, jint p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static void fill(jni::ref<jni::array<jshort>> p1, jshort p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<jshort>> p1, jint p2, jint p3, jshort p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static void fill(jni::ref<jni::array<jchar>> p1, jchar p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jchar p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static void fill(jni::ref<jni::array<jbyte>> p1, jbyte p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jbyte p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static void fill(jni::ref<jni::array<jboolean>> p1, jboolean p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<jboolean>> p1, jint p2, jint p3, jboolean p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static void fill(jni::ref<jni::array<jdouble>> p1, jdouble p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3, jdouble p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static void fill(jni::ref<jni::array<jfloat>> p1, jfloat p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3, jfloat p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static void fill(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"fill", void>(p1, p2); }
	static void fill(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3, jni::ref<java::lang::Object> p4) { return call_static_method<"fill", void>(p1, p2, p3, p4); }
	static jni::ref<jni::array<java::lang::Object>> copyOf(jni::ref<jni::array<java::lang::Object>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<java::lang::Object>>>(p1, p2); }
	static jni::ref<jni::array<java::lang::Object>> copyOf(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jni::ref<java::lang::Class> p3) { return call_static_method<"copyOf", jni::ref<jni::array<java::lang::Object>>>(p1, p2, p3); }
	static jni::ref<jni::array<jbyte>> copyOf(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<jbyte>>>(p1, p2); }
	static jni::ref<jni::array<jshort>> copyOf(jni::ref<jni::array<jshort>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<jshort>>>(p1, p2); }
	static jni::ref<jni::array<jint>> copyOf(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<jint>>>(p1, p2); }
	static jni::ref<jni::array<jlong>> copyOf(jni::ref<jni::array<jlong>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<jlong>>>(p1, p2); }
	static jni::ref<jni::array<jchar>> copyOf(jni::ref<jni::array<jchar>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<jchar>>>(p1, p2); }
	static jni::ref<jni::array<jfloat>> copyOf(jni::ref<jni::array<jfloat>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<jfloat>>>(p1, p2); }
	static jni::ref<jni::array<jdouble>> copyOf(jni::ref<jni::array<jdouble>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<jdouble>>>(p1, p2); }
	static jni::ref<jni::array<jboolean>> copyOf(jni::ref<jni::array<jboolean>> p1, jint p2) { return call_static_method<"copyOf", jni::ref<jni::array<jboolean>>>(p1, p2); }
	static jni::ref<jni::array<java::lang::Object>> copyOfRange(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<java::lang::Object>>>(p1, p2, p3); }
	static jni::ref<jni::array<java::lang::Object>> copyOfRange(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3, jni::ref<java::lang::Class> p4) { return call_static_method<"copyOfRange", jni::ref<jni::array<java::lang::Object>>>(p1, p2, p3, p4); }
	static jni::ref<jni::array<jbyte>> copyOfRange(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }
	static jni::ref<jni::array<jshort>> copyOfRange(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<jshort>>>(p1, p2, p3); }
	static jni::ref<jni::array<jint>> copyOfRange(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	static jni::ref<jni::array<jlong>> copyOfRange(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<jlong>>>(p1, p2, p3); }
	static jni::ref<jni::array<jchar>> copyOfRange(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<jchar>>>(p1, p2, p3); }
	static jni::ref<jni::array<jfloat>> copyOfRange(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<jfloat>>>(p1, p2, p3); }
	static jni::ref<jni::array<jdouble>> copyOfRange(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<jdouble>>>(p1, p2, p3); }
	static jni::ref<jni::array<jboolean>> copyOfRange(jni::ref<jni::array<jboolean>> p1, jint p2, jint p3) { return call_static_method<"copyOfRange", jni::ref<jni::array<jboolean>>>(p1, p2, p3); }
	static jni::ref<java::util::List> asList(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"asList", jni::ref<java::util::List>>(p1); }
	static jint hashCode(jni::ref<jni::array<jlong>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint hashCode(jni::ref<jni::array<jint>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint hashCode(jni::ref<jni::array<jshort>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint hashCode(jni::ref<jni::array<jchar>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint hashCode(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint hashCode(jni::ref<jni::array<jboolean>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint hashCode(jni::ref<jni::array<jfloat>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint hashCode(jni::ref<jni::array<jdouble>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint hashCode(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"hashCode", jint>(p1); }
	static jint deepHashCode(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"deepHashCode", jint>(p1); }
	static jboolean deepEquals(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_static_method<"deepEquals", jboolean>(p1, p2); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jlong>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jint>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jshort>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jchar>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jboolean>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jfloat>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jdouble>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> deepToString(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"deepToString", jni::ref<java::lang::String>>(p1); }
	static void setAll(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<java::util::function::IntFunction> p2) { return call_static_method<"setAll", void>(p1, p2); }
	static void parallelSetAll(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<java::util::function::IntFunction> p2) { return call_static_method<"parallelSetAll", void>(p1, p2); }
	static void setAll(jni::ref<jni::array<jint>> p1, jni::ref<java::util::function::IntUnaryOperator> p2) { return call_static_method<"setAll", void>(p1, p2); }
	static void parallelSetAll(jni::ref<jni::array<jint>> p1, jni::ref<java::util::function::IntUnaryOperator> p2) { return call_static_method<"parallelSetAll", void>(p1, p2); }
	static void setAll(jni::ref<jni::array<jlong>> p1, jni::ref<java::util::function::IntToLongFunction> p2) { return call_static_method<"setAll", void>(p1, p2); }
	static void parallelSetAll(jni::ref<jni::array<jlong>> p1, jni::ref<java::util::function::IntToLongFunction> p2) { return call_static_method<"parallelSetAll", void>(p1, p2); }
	static void setAll(jni::ref<jni::array<jdouble>> p1, jni::ref<java::util::function::IntToDoubleFunction> p2) { return call_static_method<"setAll", void>(p1, p2); }
	static void parallelSetAll(jni::ref<jni::array<jdouble>> p1, jni::ref<java::util::function::IntToDoubleFunction> p2) { return call_static_method<"parallelSetAll", void>(p1, p2); }
	static jni::ref<java::util::Spliterator> spliterator(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator>>(p1); }
	static jni::ref<java::util::Spliterator> spliterator(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator>>(p1, p2, p3); }
	static jni::ref<java::util::Spliterator_OfInt> spliterator(jni::ref<jni::array<jint>> p1) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfInt>>(p1); }
	static jni::ref<java::util::Spliterator_OfInt> spliterator(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfInt>>(p1, p2, p3); }
	static jni::ref<java::util::Spliterator_OfLong> spliterator(jni::ref<jni::array<jlong>> p1) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfLong>>(p1); }
	static jni::ref<java::util::Spliterator_OfLong> spliterator(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfLong>>(p1, p2, p3); }
	static jni::ref<java::util::Spliterator_OfDouble> spliterator(jni::ref<jni::array<jdouble>> p1) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfDouble>>(p1); }
	static jni::ref<java::util::Spliterator_OfDouble> spliterator(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfDouble>>(p1, p2, p3); }
	static jni::ref<java::util::stream::Stream> stream(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"stream", jni::ref<java::util::stream::Stream>>(p1); }
	static jni::ref<java::util::stream::Stream> stream(jni::ref<jni::array<java::lang::Object>> p1, jint p2, jint p3) { return call_static_method<"stream", jni::ref<java::util::stream::Stream>>(p1, p2, p3); }
	static jni::ref<java::util::stream::IntStream> stream(jni::ref<jni::array<jint>> p1) { return call_static_method<"stream", jni::ref<java::util::stream::IntStream>>(p1); }
	static jni::ref<java::util::stream::IntStream> stream(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_static_method<"stream", jni::ref<java::util::stream::IntStream>>(p1, p2, p3); }
	static jni::ref<java::util::stream::LongStream> stream(jni::ref<jni::array<jlong>> p1) { return call_static_method<"stream", jni::ref<java::util::stream::LongStream>>(p1); }
	static jni::ref<java::util::stream::LongStream> stream(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_static_method<"stream", jni::ref<java::util::stream::LongStream>>(p1, p2, p3); }
	static jni::ref<java::util::stream::DoubleStream> stream(jni::ref<jni::array<jdouble>> p1) { return call_static_method<"stream", jni::ref<java::util::stream::DoubleStream>>(p1); }
	static jni::ref<java::util::stream::DoubleStream> stream(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_static_method<"stream", jni::ref<java::util::stream::DoubleStream>>(p1, p2, p3); }

protected:

	Arrays(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS
