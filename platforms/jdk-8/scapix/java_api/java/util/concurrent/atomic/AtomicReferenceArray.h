// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::atomic { class AtomicReferenceArray; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::atomic::AtomicReferenceArray>
{
	static constexpr fixed_string class_name = "java/util/concurrent/atomic/AtomicReferenceArray";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/UnaryOperator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::atomic::AtomicReferenceArray : public jni::object_base<"java/util/concurrent/atomic/AtomicReferenceArray",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::util::concurrent::atomic::AtomicReferenceArray> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<java::util::concurrent::atomic::AtomicReferenceArray> new_object(jni::ref<jni::array<java::lang::Object>> p1) { return base_::new_object(p1); }
	jint length() { return call_method<"length", jint>(); }
	jni::ref<java::lang::Object> get(jint p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	void set(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"set", void>(p1, p2); }
	void lazySet(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"lazySet", void>(p1, p2); }
	jni::ref<java::lang::Object> getAndSet(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"getAndSet", jni::ref<java::lang::Object>>(p1, p2); }
	jboolean compareAndSet(jint p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"compareAndSet", jboolean>(p1, p2, p3); }
	jboolean weakCompareAndSet(jint p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"weakCompareAndSet", jboolean>(p1, p2, p3); }
	jni::ref<java::lang::Object> getAndUpdate(jint p1, jni::ref<java::util::function::UnaryOperator> p2) { return call_method<"getAndUpdate", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> updateAndGet(jint p1, jni::ref<java::util::function::UnaryOperator> p2) { return call_method<"updateAndGet", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> getAndAccumulate(jint p1, jni::ref<java::lang::Object> p2, jni::ref<java::util::function::BinaryOperator> p3) { return call_method<"getAndAccumulate", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::lang::Object> accumulateAndGet(jint p1, jni::ref<java::lang::Object> p2, jni::ref<java::util::function::BinaryOperator> p3) { return call_method<"accumulateAndGet", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AtomicReferenceArray(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICREFERENCEARRAY
