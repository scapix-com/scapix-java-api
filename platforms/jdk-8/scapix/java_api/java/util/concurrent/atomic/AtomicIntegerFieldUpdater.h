// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::atomic { class AtomicIntegerFieldUpdater; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::atomic::AtomicIntegerFieldUpdater>
{
	static constexpr fixed_string class_name = "java/util/concurrent/atomic/AtomicIntegerFieldUpdater";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/function/IntBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntUnaryOperator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::atomic::AtomicIntegerFieldUpdater : public jni::object_base<"java/util/concurrent/atomic/AtomicIntegerFieldUpdater",
	java::lang::Object>
{
public:

	static jni::ref<java::util::concurrent::atomic::AtomicIntegerFieldUpdater> newUpdater(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2) { return call_static_method<"newUpdater", jni::ref<java::util::concurrent::atomic::AtomicIntegerFieldUpdater>>(p1, p2); }
	jboolean compareAndSet(jni::ref<java::lang::Object> p1, jint p2, jint p3) { return call_method<"compareAndSet", jboolean>(p1, p2, p3); }
	jboolean weakCompareAndSet(jni::ref<java::lang::Object> p1, jint p2, jint p3) { return call_method<"weakCompareAndSet", jboolean>(p1, p2, p3); }
	void set(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"set", void>(p1, p2); }
	void lazySet(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"lazySet", void>(p1, p2); }
	jint get(jni::ref<java::lang::Object> p1) { return call_method<"get", jint>(p1); }
	jint getAndSet(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getAndSet", jint>(p1, p2); }
	jint getAndIncrement(jni::ref<java::lang::Object> p1) { return call_method<"getAndIncrement", jint>(p1); }
	jint getAndDecrement(jni::ref<java::lang::Object> p1) { return call_method<"getAndDecrement", jint>(p1); }
	jint getAndAdd(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getAndAdd", jint>(p1, p2); }
	jint incrementAndGet(jni::ref<java::lang::Object> p1) { return call_method<"incrementAndGet", jint>(p1); }
	jint decrementAndGet(jni::ref<java::lang::Object> p1) { return call_method<"decrementAndGet", jint>(p1); }
	jint addAndGet(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"addAndGet", jint>(p1, p2); }
	jint getAndUpdate(jni::ref<java::lang::Object> p1, jni::ref<java::util::function::IntUnaryOperator> p2) { return call_method<"getAndUpdate", jint>(p1, p2); }
	jint updateAndGet(jni::ref<java::lang::Object> p1, jni::ref<java::util::function::IntUnaryOperator> p2) { return call_method<"updateAndGet", jint>(p1, p2); }
	jint getAndAccumulate(jni::ref<java::lang::Object> p1, jint p2, jni::ref<java::util::function::IntBinaryOperator> p3) { return call_method<"getAndAccumulate", jint>(p1, p2, p3); }
	jint accumulateAndGet(jni::ref<java::lang::Object> p1, jint p2, jni::ref<java::util::function::IntBinaryOperator> p3) { return call_method<"accumulateAndGet", jint>(p1, p2, p3); }

protected:

	AtomicIntegerFieldUpdater(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER
