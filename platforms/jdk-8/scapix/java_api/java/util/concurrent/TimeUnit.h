// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TIMEUNIT_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TIMEUNIT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class TimeUnit; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::TimeUnit>
{
	static constexpr fixed_string class_name = "java/util/concurrent/TimeUnit";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TIMEUNIT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TIMEUNIT)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TIMEUNIT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::TimeUnit : public jni::object_base<"java/util/concurrent/TimeUnit",
	java::lang::Enum>
{
public:

	static jni::ref<java::util::concurrent::TimeUnit> NANOSECONDS() { return get_static_field<"NANOSECONDS", jni::ref<java::util::concurrent::TimeUnit>>(); }
	static jni::ref<java::util::concurrent::TimeUnit> MICROSECONDS() { return get_static_field<"MICROSECONDS", jni::ref<java::util::concurrent::TimeUnit>>(); }
	static jni::ref<java::util::concurrent::TimeUnit> MILLISECONDS() { return get_static_field<"MILLISECONDS", jni::ref<java::util::concurrent::TimeUnit>>(); }
	static jni::ref<java::util::concurrent::TimeUnit> SECONDS() { return get_static_field<"SECONDS", jni::ref<java::util::concurrent::TimeUnit>>(); }
	static jni::ref<java::util::concurrent::TimeUnit> MINUTES() { return get_static_field<"MINUTES", jni::ref<java::util::concurrent::TimeUnit>>(); }
	static jni::ref<java::util::concurrent::TimeUnit> HOURS() { return get_static_field<"HOURS", jni::ref<java::util::concurrent::TimeUnit>>(); }
	static jni::ref<java::util::concurrent::TimeUnit> DAYS() { return get_static_field<"DAYS", jni::ref<java::util::concurrent::TimeUnit>>(); }

	static jni::ref<jni::array<java::util::concurrent::TimeUnit>> values() { return call_static_method<"values", jni::ref<jni::array<java::util::concurrent::TimeUnit>>>(); }
	static jni::ref<java::util::concurrent::TimeUnit> valueOf(jni::ref<java::lang::String> p1) { return call_static_method<"valueOf", jni::ref<java::util::concurrent::TimeUnit>>(p1); }
	jlong convert(jlong p1, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"convert", jlong>(p1, p2); }
	jlong toNanos(jlong p1) { return call_method<"toNanos", jlong>(p1); }
	jlong toMicros(jlong p1) { return call_method<"toMicros", jlong>(p1); }
	jlong toMillis(jlong p1) { return call_method<"toMillis", jlong>(p1); }
	jlong toSeconds(jlong p1) { return call_method<"toSeconds", jlong>(p1); }
	jlong toMinutes(jlong p1) { return call_method<"toMinutes", jlong>(p1); }
	jlong toHours(jlong p1) { return call_method<"toHours", jlong>(p1); }
	jlong toDays(jlong p1) { return call_method<"toDays", jlong>(p1); }
	void timedWait(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"timedWait", void>(p1, p2); }
	void timedJoin(jni::ref<java::lang::Thread> p1, jlong p2) { return call_method<"timedJoin", void>(p1, p2); }
	void sleep(jlong p1) { return call_method<"sleep", void>(p1); }

protected:

	TimeUnit(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_TIMEUNIT
