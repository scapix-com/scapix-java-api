// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXECUTORS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXECUTORS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class Executors; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::Executors>
{
	static constexpr fixed_string class_name = "java/util/concurrent/Executors";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXECUTORS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXECUTORS)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXECUTORS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/security/PrivilegedAction.h>
#include <scapix/java_api/java/security/PrivilegedExceptionAction.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>
#include <scapix/java_api/java/util/concurrent/ScheduledExecutorService.h>
#include <scapix/java_api/java/util/concurrent/ThreadFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::Executors : public jni::object_base<"java/util/concurrent/Executors",
	java::lang::Object>
{
public:

	static jni::ref<java::util::concurrent::ExecutorService> newFixedThreadPool(jint p1) { return call_static_method<"newFixedThreadPool", jni::ref<java::util::concurrent::ExecutorService>>(p1); }
	static jni::ref<java::util::concurrent::ExecutorService> newWorkStealingPool(jint p1) { return call_static_method<"newWorkStealingPool", jni::ref<java::util::concurrent::ExecutorService>>(p1); }
	static jni::ref<java::util::concurrent::ExecutorService> newWorkStealingPool() { return call_static_method<"newWorkStealingPool", jni::ref<java::util::concurrent::ExecutorService>>(); }
	static jni::ref<java::util::concurrent::ExecutorService> newFixedThreadPool(jint p1, jni::ref<java::util::concurrent::ThreadFactory> p2) { return call_static_method<"newFixedThreadPool", jni::ref<java::util::concurrent::ExecutorService>>(p1, p2); }
	static jni::ref<java::util::concurrent::ExecutorService> newSingleThreadExecutor() { return call_static_method<"newSingleThreadExecutor", jni::ref<java::util::concurrent::ExecutorService>>(); }
	static jni::ref<java::util::concurrent::ExecutorService> newSingleThreadExecutor(jni::ref<java::util::concurrent::ThreadFactory> p1) { return call_static_method<"newSingleThreadExecutor", jni::ref<java::util::concurrent::ExecutorService>>(p1); }
	static jni::ref<java::util::concurrent::ExecutorService> newCachedThreadPool() { return call_static_method<"newCachedThreadPool", jni::ref<java::util::concurrent::ExecutorService>>(); }
	static jni::ref<java::util::concurrent::ExecutorService> newCachedThreadPool(jni::ref<java::util::concurrent::ThreadFactory> p1) { return call_static_method<"newCachedThreadPool", jni::ref<java::util::concurrent::ExecutorService>>(p1); }
	static jni::ref<java::util::concurrent::ScheduledExecutorService> newSingleThreadScheduledExecutor() { return call_static_method<"newSingleThreadScheduledExecutor", jni::ref<java::util::concurrent::ScheduledExecutorService>>(); }
	static jni::ref<java::util::concurrent::ScheduledExecutorService> newSingleThreadScheduledExecutor(jni::ref<java::util::concurrent::ThreadFactory> p1) { return call_static_method<"newSingleThreadScheduledExecutor", jni::ref<java::util::concurrent::ScheduledExecutorService>>(p1); }
	static jni::ref<java::util::concurrent::ScheduledExecutorService> newScheduledThreadPool(jint p1) { return call_static_method<"newScheduledThreadPool", jni::ref<java::util::concurrent::ScheduledExecutorService>>(p1); }
	static jni::ref<java::util::concurrent::ScheduledExecutorService> newScheduledThreadPool(jint p1, jni::ref<java::util::concurrent::ThreadFactory> p2) { return call_static_method<"newScheduledThreadPool", jni::ref<java::util::concurrent::ScheduledExecutorService>>(p1, p2); }
	static jni::ref<java::util::concurrent::ExecutorService> unconfigurableExecutorService(jni::ref<java::util::concurrent::ExecutorService> p1) { return call_static_method<"unconfigurableExecutorService", jni::ref<java::util::concurrent::ExecutorService>>(p1); }
	static jni::ref<java::util::concurrent::ScheduledExecutorService> unconfigurableScheduledExecutorService(jni::ref<java::util::concurrent::ScheduledExecutorService> p1) { return call_static_method<"unconfigurableScheduledExecutorService", jni::ref<java::util::concurrent::ScheduledExecutorService>>(p1); }
	static jni::ref<java::util::concurrent::ThreadFactory> defaultThreadFactory() { return call_static_method<"defaultThreadFactory", jni::ref<java::util::concurrent::ThreadFactory>>(); }
	static jni::ref<java::util::concurrent::ThreadFactory> privilegedThreadFactory() { return call_static_method<"privilegedThreadFactory", jni::ref<java::util::concurrent::ThreadFactory>>(); }
	static jni::ref<java::util::concurrent::Callable> callable(jni::ref<java::lang::Runnable> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"callable", jni::ref<java::util::concurrent::Callable>>(p1, p2); }
	static jni::ref<java::util::concurrent::Callable> callable(jni::ref<java::lang::Runnable> p1) { return call_static_method<"callable", jni::ref<java::util::concurrent::Callable>>(p1); }
	static jni::ref<java::util::concurrent::Callable> callable(jni::ref<java::security::PrivilegedAction> p1) { return call_static_method<"callable", jni::ref<java::util::concurrent::Callable>>(p1); }
	static jni::ref<java::util::concurrent::Callable> callable(jni::ref<java::security::PrivilegedExceptionAction> p1) { return call_static_method<"callable", jni::ref<java::util::concurrent::Callable>>(p1); }
	static jni::ref<java::util::concurrent::Callable> privilegedCallable(jni::ref<java::util::concurrent::Callable> p1) { return call_static_method<"privilegedCallable", jni::ref<java::util::concurrent::Callable>>(p1); }
	static jni::ref<java::util::concurrent::Callable> privilegedCallableUsingCurrentClassLoader(jni::ref<java::util::concurrent::Callable> p1) { return call_static_method<"privilegedCallableUsingCurrentClassLoader", jni::ref<java::util::concurrent::Callable>>(p1); }

protected:

	Executors(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_EXECUTORS
