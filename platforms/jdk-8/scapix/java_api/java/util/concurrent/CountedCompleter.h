// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/ForkJoinTask.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_COUNTEDCOMPLETER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_COUNTEDCOMPLETER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class CountedCompleter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::CountedCompleter>
{
	static constexpr fixed_string class_name = "java/util/concurrent/CountedCompleter";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::ForkJoinTask>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_COUNTEDCOMPLETER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_COUNTEDCOMPLETER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_COUNTEDCOMPLETER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Throwable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::CountedCompleter : public jni::object_base<"java/util/concurrent/CountedCompleter",
	java::util::concurrent::ForkJoinTask>
{
public:

	void compute() { return call_method<"compute", void>(); }
	void onCompletion(jni::ref<java::util::concurrent::CountedCompleter> p1) { return call_method<"onCompletion", void>(p1); }
	jboolean onExceptionalCompletion(jni::ref<java::lang::Throwable> p1, jni::ref<java::util::concurrent::CountedCompleter> p2) { return call_method<"onExceptionalCompletion", jboolean>(p1, p2); }
	jni::ref<java::util::concurrent::CountedCompleter> getCompleter() { return call_method<"getCompleter", jni::ref<java::util::concurrent::CountedCompleter>>(); }
	jint getPendingCount() { return call_method<"getPendingCount", jint>(); }
	void setPendingCount(jint p1) { return call_method<"setPendingCount", void>(p1); }
	void addToPendingCount(jint p1) { return call_method<"addToPendingCount", void>(p1); }
	jboolean compareAndSetPendingCount(jint p1, jint p2) { return call_method<"compareAndSetPendingCount", jboolean>(p1, p2); }
	jint decrementPendingCountUnlessZero() { return call_method<"decrementPendingCountUnlessZero", jint>(); }
	jni::ref<java::util::concurrent::CountedCompleter> getRoot() { return call_method<"getRoot", jni::ref<java::util::concurrent::CountedCompleter>>(); }
	void tryComplete() { return call_method<"tryComplete", void>(); }
	void propagateCompletion() { return call_method<"propagateCompletion", void>(); }
	void complete(jni::ref<java::lang::Object> p1) { return call_method<"complete", void>(p1); }
	jni::ref<java::util::concurrent::CountedCompleter> firstComplete() { return call_method<"firstComplete", jni::ref<java::util::concurrent::CountedCompleter>>(); }
	jni::ref<java::util::concurrent::CountedCompleter> nextComplete() { return call_method<"nextComplete", jni::ref<java::util::concurrent::CountedCompleter>>(); }
	void quietlyCompleteRoot() { return call_method<"quietlyCompleteRoot", void>(); }
	void helpComplete(jint p1) { return call_method<"helpComplete", void>(p1); }
	jni::ref<java::lang::Object> getRawResult() { return call_method<"getRawResult", jni::ref<java::lang::Object>>(); }

protected:

	CountedCompleter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_COUNTEDCOMPLETER
