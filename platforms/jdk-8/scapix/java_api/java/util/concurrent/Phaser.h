// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_PHASER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_PHASER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class Phaser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::Phaser>
{
	static constexpr fixed_string class_name = "java/util/concurrent/Phaser";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_PHASER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_PHASER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_PHASER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::Phaser : public jni::object_base<"java/util/concurrent/Phaser",
	java::lang::Object>
{
public:

	static jni::ref<java::util::concurrent::Phaser> new_object() { return base_::new_object(); }
	static jni::ref<java::util::concurrent::Phaser> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<java::util::concurrent::Phaser> new_object(jni::ref<java::util::concurrent::Phaser> p1) { return base_::new_object(p1); }
	static jni::ref<java::util::concurrent::Phaser> new_object(jni::ref<java::util::concurrent::Phaser> p1, jint p2) { return base_::new_object(p1, p2); }
	jint register_() { return call_method<"register", jint>(); }
	jint bulkRegister(jint p1) { return call_method<"bulkRegister", jint>(p1); }
	jint arrive() { return call_method<"arrive", jint>(); }
	jint arriveAndDeregister() { return call_method<"arriveAndDeregister", jint>(); }
	jint arriveAndAwaitAdvance() { return call_method<"arriveAndAwaitAdvance", jint>(); }
	jint awaitAdvance(jint p1) { return call_method<"awaitAdvance", jint>(p1); }
	jint awaitAdvanceInterruptibly(jint p1) { return call_method<"awaitAdvanceInterruptibly", jint>(p1); }
	jint awaitAdvanceInterruptibly(jint p1, jlong p2, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"awaitAdvanceInterruptibly", jint>(p1, p2, p3); }
	void forceTermination() { return call_method<"forceTermination", void>(); }
	jint getPhase() { return call_method<"getPhase", jint>(); }
	jint getRegisteredParties() { return call_method<"getRegisteredParties", jint>(); }
	jint getArrivedParties() { return call_method<"getArrivedParties", jint>(); }
	jint getUnarrivedParties() { return call_method<"getUnarrivedParties", jint>(); }
	jni::ref<java::util::concurrent::Phaser> getParent() { return call_method<"getParent", jni::ref<java::util::concurrent::Phaser>>(); }
	jni::ref<java::util::concurrent::Phaser> getRoot() { return call_method<"getRoot", jni::ref<java::util::concurrent::Phaser>>(); }
	jboolean isTerminated() { return call_method<"isTerminated", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Phaser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_PHASER
