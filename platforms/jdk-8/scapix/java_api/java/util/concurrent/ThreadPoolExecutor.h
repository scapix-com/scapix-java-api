// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/AbstractExecutorService.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ThreadPoolExecutor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ThreadPoolExecutor>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ThreadPoolExecutor";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::AbstractExecutorService>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>
#include <scapix/java_api/java/util/concurrent/RejectedExecutionHandler.h>
#include <scapix/java_api/java/util/concurrent/ThreadFactory.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/java/util/concurrent/ThreadPoolExecutor_CallerRunsPolicy.h>
#include <scapix/java_api/java/util/concurrent/ThreadPoolExecutor_AbortPolicy.h>
#include <scapix/java_api/java/util/concurrent/ThreadPoolExecutor_DiscardPolicy.h>
#include <scapix/java_api/java/util/concurrent/ThreadPoolExecutor_DiscardOldestPolicy.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::ThreadPoolExecutor : public jni::object_base<"java/util/concurrent/ThreadPoolExecutor",
	java::util::concurrent::AbstractExecutorService>
{
public:

	using CallerRunsPolicy = ThreadPoolExecutor_CallerRunsPolicy;
	using AbortPolicy = ThreadPoolExecutor_AbortPolicy;
	using DiscardPolicy = ThreadPoolExecutor_DiscardPolicy;
	using DiscardOldestPolicy = ThreadPoolExecutor_DiscardOldestPolicy;

	static jni::ref<java::util::concurrent::ThreadPoolExecutor> new_object(jint p1, jint p2, jlong p3, jni::ref<java::util::concurrent::TimeUnit> p4, jni::ref<java::util::concurrent::BlockingQueue> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<java::util::concurrent::ThreadPoolExecutor> new_object(jint p1, jint p2, jlong p3, jni::ref<java::util::concurrent::TimeUnit> p4, jni::ref<java::util::concurrent::BlockingQueue> p5, jni::ref<java::util::concurrent::ThreadFactory> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::util::concurrent::ThreadPoolExecutor> new_object(jint p1, jint p2, jlong p3, jni::ref<java::util::concurrent::TimeUnit> p4, jni::ref<java::util::concurrent::BlockingQueue> p5, jni::ref<java::util::concurrent::RejectedExecutionHandler> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::util::concurrent::ThreadPoolExecutor> new_object(jint p1, jint p2, jlong p3, jni::ref<java::util::concurrent::TimeUnit> p4, jni::ref<java::util::concurrent::BlockingQueue> p5, jni::ref<java::util::concurrent::ThreadFactory> p6, jni::ref<java::util::concurrent::RejectedExecutionHandler> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	void execute(jni::ref<java::lang::Runnable> p1) { return call_method<"execute", void>(p1); }
	void shutdown() { return call_method<"shutdown", void>(); }
	jni::ref<java::util::List> shutdownNow() { return call_method<"shutdownNow", jni::ref<java::util::List>>(); }
	jboolean isShutdown() { return call_method<"isShutdown", jboolean>(); }
	jboolean isTerminating() { return call_method<"isTerminating", jboolean>(); }
	jboolean isTerminated() { return call_method<"isTerminated", jboolean>(); }
	jboolean awaitTermination(jlong p1, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"awaitTermination", jboolean>(p1, p2); }
	void setThreadFactory(jni::ref<java::util::concurrent::ThreadFactory> p1) { return call_method<"setThreadFactory", void>(p1); }
	jni::ref<java::util::concurrent::ThreadFactory> getThreadFactory() { return call_method<"getThreadFactory", jni::ref<java::util::concurrent::ThreadFactory>>(); }
	void setRejectedExecutionHandler(jni::ref<java::util::concurrent::RejectedExecutionHandler> p1) { return call_method<"setRejectedExecutionHandler", void>(p1); }
	jni::ref<java::util::concurrent::RejectedExecutionHandler> getRejectedExecutionHandler() { return call_method<"getRejectedExecutionHandler", jni::ref<java::util::concurrent::RejectedExecutionHandler>>(); }
	void setCorePoolSize(jint p1) { return call_method<"setCorePoolSize", void>(p1); }
	jint getCorePoolSize() { return call_method<"getCorePoolSize", jint>(); }
	jboolean prestartCoreThread() { return call_method<"prestartCoreThread", jboolean>(); }
	jint prestartAllCoreThreads() { return call_method<"prestartAllCoreThreads", jint>(); }
	jboolean allowsCoreThreadTimeOut() { return call_method<"allowsCoreThreadTimeOut", jboolean>(); }
	void allowCoreThreadTimeOut(jboolean p1) { return call_method<"allowCoreThreadTimeOut", void>(p1); }
	void setMaximumPoolSize(jint p1) { return call_method<"setMaximumPoolSize", void>(p1); }
	jint getMaximumPoolSize() { return call_method<"getMaximumPoolSize", jint>(); }
	void setKeepAliveTime(jlong p1, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"setKeepAliveTime", void>(p1, p2); }
	jlong getKeepAliveTime(jni::ref<java::util::concurrent::TimeUnit> p1) { return call_method<"getKeepAliveTime", jlong>(p1); }
	jni::ref<java::util::concurrent::BlockingQueue> getQueue() { return call_method<"getQueue", jni::ref<java::util::concurrent::BlockingQueue>>(); }
	jboolean remove(jni::ref<java::lang::Runnable> p1) { return call_method<"remove", jboolean>(p1); }
	void purge() { return call_method<"purge", void>(); }
	jint getPoolSize() { return call_method<"getPoolSize", jint>(); }
	jint getActiveCount() { return call_method<"getActiveCount", jint>(); }
	jint getLargestPoolSize() { return call_method<"getLargestPoolSize", jint>(); }
	jlong getTaskCount() { return call_method<"getTaskCount", jlong>(); }
	jlong getCompletedTaskCount() { return call_method<"getCompletedTaskCount", jlong>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ThreadPoolExecutor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_THREADPOOLEXECUTOR
