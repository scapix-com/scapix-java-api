// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_OBSERVABLE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_OBSERVABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Observable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Observable>
{
	static constexpr fixed_string class_name = "java/util/Observable";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_OBSERVABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_OBSERVABLE)
#define SCAPIX_JAVA_API_JAVA_UTIL_OBSERVABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Observer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Observable : public jni::object_base<"java/util/Observable",
	java::lang::Object>
{
public:

	static jni::ref<java::util::Observable> new_object() { return base_::new_object(); }
	void addObserver(jni::ref<java::util::Observer> p1) { return call_method<"addObserver", void>(p1); }
	void deleteObserver(jni::ref<java::util::Observer> p1) { return call_method<"deleteObserver", void>(p1); }
	void notifyObservers() { return call_method<"notifyObservers", void>(); }
	void notifyObservers(jni::ref<java::lang::Object> p1) { return call_method<"notifyObservers", void>(p1); }
	void deleteObservers() { return call_method<"deleteObservers", void>(); }
	jboolean hasChanged() { return call_method<"hasChanged", jboolean>(); }
	jint countObservers() { return call_method<"countObservers", jint>(); }

protected:

	Observable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_OBSERVABLE
