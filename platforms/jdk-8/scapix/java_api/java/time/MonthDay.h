// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_MONTHDAY_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_MONTHDAY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time { class MonthDay; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::MonthDay>
{
	static constexpr fixed_string class_name = "java/time/MonthDay";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::temporal::TemporalAccessor, scapix::java_api::java::time::temporal::TemporalAdjuster, scapix::java_api::java::lang::Comparable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_MONTHDAY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_MONTHDAY)
#define SCAPIX_JAVA_API_JAVA_TIME_MONTHDAY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/LocalDate.h>
#include <scapix/java_api/java/time/Month.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::MonthDay : public jni::object_base<"java/time/MonthDay",
	java::lang::Object,
	java::time::temporal::TemporalAccessor,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable,
	java::io::Serializable>
{
public:

	static jni::ref<java::time::MonthDay> now() { return call_static_method<"now", jni::ref<java::time::MonthDay>>(); }
	static jni::ref<java::time::MonthDay> now(jni::ref<java::time::ZoneId> p1) { return call_static_method<"now", jni::ref<java::time::MonthDay>>(p1); }
	static jni::ref<java::time::MonthDay> now(jni::ref<java::time::Clock> p1) { return call_static_method<"now", jni::ref<java::time::MonthDay>>(p1); }
	static jni::ref<java::time::MonthDay> of(jni::ref<java::time::Month> p1, jint p2) { return call_static_method<"of", jni::ref<java::time::MonthDay>>(p1, p2); }
	static jni::ref<java::time::MonthDay> of(jint p1, jint p2) { return call_static_method<"of", jni::ref<java::time::MonthDay>>(p1, p2); }
	static jni::ref<java::time::MonthDay> from(jni::ref<java::time::temporal::TemporalAccessor> p1) { return call_static_method<"from", jni::ref<java::time::MonthDay>>(p1); }
	static jni::ref<java::time::MonthDay> parse(jni::ref<java::lang::CharSequence> p1) { return call_static_method<"parse", jni::ref<java::time::MonthDay>>(p1); }
	static jni::ref<java::time::MonthDay> parse(jni::ref<java::lang::CharSequence> p1, jni::ref<java::time::format::DateTimeFormatter> p2) { return call_static_method<"parse", jni::ref<java::time::MonthDay>>(p1, p2); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"isSupported", jboolean>(p1); }
	jni::ref<java::time::temporal::ValueRange> range(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"range", jni::ref<java::time::temporal::ValueRange>>(p1); }
	jint get(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"get", jint>(p1); }
	jlong getLong(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"getLong", jlong>(p1); }
	jint getMonthValue() { return call_method<"getMonthValue", jint>(); }
	jni::ref<java::time::Month> getMonth() { return call_method<"getMonth", jni::ref<java::time::Month>>(); }
	jint getDayOfMonth() { return call_method<"getDayOfMonth", jint>(); }
	jboolean isValidYear(jint p1) { return call_method<"isValidYear", jboolean>(p1); }
	jni::ref<java::time::MonthDay> withMonth(jint p1) { return call_method<"withMonth", jni::ref<java::time::MonthDay>>(p1); }
	jni::ref<java::time::MonthDay> with(jni::ref<java::time::Month> p1) { return call_method<"with", jni::ref<java::time::MonthDay>>(p1); }
	jni::ref<java::time::MonthDay> withDayOfMonth(jint p1) { return call_method<"withDayOfMonth", jni::ref<java::time::MonthDay>>(p1); }
	jni::ref<java::lang::Object> query(jni::ref<java::time::temporal::TemporalQuery> p1) { return call_method<"query", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::time::temporal::Temporal> adjustInto(jni::ref<java::time::temporal::Temporal> p1) { return call_method<"adjustInto", jni::ref<java::time::temporal::Temporal>>(p1); }
	jni::ref<java::lang::String> format(jni::ref<java::time::format::DateTimeFormatter> p1) { return call_method<"format", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::time::LocalDate> atYear(jint p1) { return call_method<"atYear", jni::ref<java::time::LocalDate>>(p1); }
	jint compareTo(jni::ref<java::time::MonthDay> p1) { return call_method<"compareTo", jint>(p1); }
	jboolean isAfter(jni::ref<java::time::MonthDay> p1) { return call_method<"isAfter", jboolean>(p1); }
	jboolean isBefore(jni::ref<java::time::MonthDay> p1) { return call_method<"isBefore", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	MonthDay(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_MONTHDAY
