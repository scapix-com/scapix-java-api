// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOLOCALDATE_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOLOCALDATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::chrono { class ChronoLocalDate; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::chrono::ChronoLocalDate>
{
	static constexpr fixed_string class_name = "java/time/chrono/ChronoLocalDate";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::temporal::Temporal, scapix::java_api::java::time::temporal::TemporalAdjuster, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOLOCALDATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOLOCALDATE)
#define SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOLOCALDATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDateTime.h>
#include <scapix/java_api/java/time/chrono/ChronoPeriod.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/chrono/Era.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/Comparator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::chrono::ChronoLocalDate : public jni::object_base<"java/time/chrono/ChronoLocalDate",
	java::lang::Object,
	java::time::temporal::Temporal,
	java::time::temporal::TemporalAdjuster,
	java::lang::Comparable>
{
public:

	static jni::ref<java::util::Comparator> timeLineOrder() { return call_static_method<"timeLineOrder", jni::ref<java::util::Comparator>>(); }
	static jni::ref<java::time::chrono::ChronoLocalDate> from(jni::ref<java::time::temporal::TemporalAccessor> p1) { return call_static_method<"from", jni::ref<java::time::chrono::ChronoLocalDate>>(p1); }
	jni::ref<java::time::chrono::Chronology> getChronology() { return call_method<"getChronology", jni::ref<java::time::chrono::Chronology>>(); }
	jni::ref<java::time::chrono::Era> getEra() { return call_method<"getEra", jni::ref<java::time::chrono::Era>>(); }
	jboolean isLeapYear() { return call_method<"isLeapYear", jboolean>(); }
	jint lengthOfMonth() { return call_method<"lengthOfMonth", jint>(); }
	jint lengthOfYear() { return call_method<"lengthOfYear", jint>(); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"isSupported", jboolean>(p1); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalUnit> p1) { return call_method<"isSupported", jboolean>(p1); }
	jni::ref<java::time::chrono::ChronoLocalDate> with(jni::ref<java::time::temporal::TemporalAdjuster> p1) { return call_method<"with", jni::ref<java::time::chrono::ChronoLocalDate>>(p1); }
	jni::ref<java::time::chrono::ChronoLocalDate> with(jni::ref<java::time::temporal::TemporalField> p1, jlong p2) { return call_method<"with", jni::ref<java::time::chrono::ChronoLocalDate>>(p1, p2); }
	jni::ref<java::time::chrono::ChronoLocalDate> plus(jni::ref<java::time::temporal::TemporalAmount> p1) { return call_method<"plus", jni::ref<java::time::chrono::ChronoLocalDate>>(p1); }
	jni::ref<java::time::chrono::ChronoLocalDate> plus(jlong p1, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"plus", jni::ref<java::time::chrono::ChronoLocalDate>>(p1, p2); }
	jni::ref<java::time::chrono::ChronoLocalDate> minus(jni::ref<java::time::temporal::TemporalAmount> p1) { return call_method<"minus", jni::ref<java::time::chrono::ChronoLocalDate>>(p1); }
	jni::ref<java::time::chrono::ChronoLocalDate> minus(jlong p1, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"minus", jni::ref<java::time::chrono::ChronoLocalDate>>(p1, p2); }
	jni::ref<java::lang::Object> query(jni::ref<java::time::temporal::TemporalQuery> p1) { return call_method<"query", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::time::temporal::Temporal> adjustInto(jni::ref<java::time::temporal::Temporal> p1) { return call_method<"adjustInto", jni::ref<java::time::temporal::Temporal>>(p1); }
	jlong until(jni::ref<java::time::temporal::Temporal> p1, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"until", jlong>(p1, p2); }
	jni::ref<java::time::chrono::ChronoPeriod> until(jni::ref<java::time::chrono::ChronoLocalDate> p1) { return call_method<"until", jni::ref<java::time::chrono::ChronoPeriod>>(p1); }
	jni::ref<java::lang::String> format(jni::ref<java::time::format::DateTimeFormatter> p1) { return call_method<"format", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::time::chrono::ChronoLocalDateTime> atTime(jni::ref<java::time::LocalTime> p1) { return call_method<"atTime", jni::ref<java::time::chrono::ChronoLocalDateTime>>(p1); }
	jlong toEpochDay() { return call_method<"toEpochDay", jlong>(); }
	jint compareTo(jni::ref<java::time::chrono::ChronoLocalDate> p1) { return call_method<"compareTo", jint>(p1); }
	jboolean isAfter(jni::ref<java::time::chrono::ChronoLocalDate> p1) { return call_method<"isAfter", jboolean>(p1); }
	jboolean isBefore(jni::ref<java::time::chrono::ChronoLocalDate> p1) { return call_method<"isBefore", jboolean>(p1); }
	jboolean isEqual(jni::ref<java::time::chrono::ChronoLocalDate> p1) { return call_method<"isEqual", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ChronoLocalDate(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOLOCALDATE
