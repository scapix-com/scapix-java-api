// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/time/chrono/ChronoLocalDateImpl.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_CHRONO_JAPANESEDATE_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_CHRONO_JAPANESEDATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::chrono { class JapaneseDate; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::chrono::JapaneseDate>
{
	static constexpr fixed_string class_name = "java/time/chrono/JapaneseDate";
	using base_classes = std::tuple<scapix::java_api::java::time::chrono::ChronoLocalDateImpl, scapix::java_api::java::time::chrono::ChronoLocalDate, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_CHRONO_JAPANESEDATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_CHRONO_JAPANESEDATE)
#define SCAPIX_JAVA_API_JAVA_TIME_CHRONO_JAPANESEDATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/Clock.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDateTime.h>
#include <scapix/java_api/java/time/chrono/ChronoPeriod.h>
#include <scapix/java_api/java/time/chrono/JapaneseChronology.h>
#include <scapix/java_api/java/time/chrono/JapaneseEra.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::chrono::JapaneseDate : public jni::object_base<"java/time/chrono/JapaneseDate",
	java::time::chrono::ChronoLocalDateImpl,
	java::time::chrono::ChronoLocalDate,
	java::io::Serializable>
{
public:

	static jni::ref<java::time::chrono::JapaneseDate> now() { return call_static_method<"now", jni::ref<java::time::chrono::JapaneseDate>>(); }
	static jni::ref<java::time::chrono::JapaneseDate> now(jni::ref<java::time::ZoneId> p1) { return call_static_method<"now", jni::ref<java::time::chrono::JapaneseDate>>(p1); }
	static jni::ref<java::time::chrono::JapaneseDate> now(jni::ref<java::time::Clock> p1) { return call_static_method<"now", jni::ref<java::time::chrono::JapaneseDate>>(p1); }
	static jni::ref<java::time::chrono::JapaneseDate> of(jni::ref<java::time::chrono::JapaneseEra> p1, jint p2, jint p3, jint p4) { return call_static_method<"of", jni::ref<java::time::chrono::JapaneseDate>>(p1, p2, p3, p4); }
	static jni::ref<java::time::chrono::JapaneseDate> of(jint p1, jint p2, jint p3) { return call_static_method<"of", jni::ref<java::time::chrono::JapaneseDate>>(p1, p2, p3); }
	static jni::ref<java::time::chrono::JapaneseDate> from(jni::ref<java::time::temporal::TemporalAccessor> p1) { return call_static_method<"from", jni::ref<java::time::chrono::JapaneseDate>>(p1); }
	jni::ref<java::time::chrono::JapaneseChronology> getChronology() { return call_method<"getChronology", jni::ref<java::time::chrono::JapaneseChronology>>(); }
	jni::ref<java::time::chrono::JapaneseEra> getEra() { return call_method<"getEra", jni::ref<java::time::chrono::JapaneseEra>>(); }
	jint lengthOfMonth() { return call_method<"lengthOfMonth", jint>(); }
	jint lengthOfYear() { return call_method<"lengthOfYear", jint>(); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"isSupported", jboolean>(p1); }
	jni::ref<java::time::temporal::ValueRange> range(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"range", jni::ref<java::time::temporal::ValueRange>>(p1); }
	jlong getLong(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"getLong", jlong>(p1); }
	jni::ref<java::time::chrono::JapaneseDate> with(jni::ref<java::time::temporal::TemporalField> p1, jlong p2) { return call_method<"with", jni::ref<java::time::chrono::JapaneseDate>>(p1, p2); }
	jni::ref<java::time::chrono::JapaneseDate> with(jni::ref<java::time::temporal::TemporalAdjuster> p1) { return call_method<"with", jni::ref<java::time::chrono::JapaneseDate>>(p1); }
	jni::ref<java::time::chrono::JapaneseDate> plus(jni::ref<java::time::temporal::TemporalAmount> p1) { return call_method<"plus", jni::ref<java::time::chrono::JapaneseDate>>(p1); }
	jni::ref<java::time::chrono::JapaneseDate> minus(jni::ref<java::time::temporal::TemporalAmount> p1) { return call_method<"minus", jni::ref<java::time::chrono::JapaneseDate>>(p1); }
	jni::ref<java::time::chrono::JapaneseDate> plus(jlong p1, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"plus", jni::ref<java::time::chrono::JapaneseDate>>(p1, p2); }
	jni::ref<java::time::chrono::JapaneseDate> minus(jlong p1, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"minus", jni::ref<java::time::chrono::JapaneseDate>>(p1, p2); }
	jni::ref<java::time::chrono::ChronoLocalDateTime> atTime(jni::ref<java::time::LocalTime> p1) { return call_method<"atTime", jni::ref<java::time::chrono::ChronoLocalDateTime>>(p1); }
	jni::ref<java::time::chrono::ChronoPeriod> until(jni::ref<java::time::chrono::ChronoLocalDate> p1) { return call_method<"until", jni::ref<java::time::chrono::ChronoPeriod>>(p1); }
	jlong toEpochDay() { return call_method<"toEpochDay", jlong>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	JapaneseDate(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_CHRONO_JAPANESEDATE
