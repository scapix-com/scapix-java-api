// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::chrono { class ChronoZonedDateTime; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::chrono::ChronoZonedDateTime>
{
	static constexpr fixed_string class_name = "java/time/chrono/ChronoZonedDateTime";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::temporal::Temporal, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME)
#define SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/Instant.h>
#include <scapix/java_api/java/time/LocalTime.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/ZoneOffset.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDate.h>
#include <scapix/java_api/java/time/chrono/ChronoLocalDateTime.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/format/DateTimeFormatter.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalAdjuster.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/time/temporal/ValueRange.h>
#include <scapix/java_api/java/util/Comparator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::chrono::ChronoZonedDateTime : public jni::object_base<"java/time/chrono/ChronoZonedDateTime",
	java::lang::Object,
	java::time::temporal::Temporal,
	java::lang::Comparable>
{
public:

	static jni::ref<java::util::Comparator> timeLineOrder() { return call_static_method<"timeLineOrder", jni::ref<java::util::Comparator>>(); }
	static jni::ref<java::time::chrono::ChronoZonedDateTime> from(jni::ref<java::time::temporal::TemporalAccessor> p1) { return call_static_method<"from", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
	jni::ref<java::time::temporal::ValueRange> range(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"range", jni::ref<java::time::temporal::ValueRange>>(p1); }
	jint get(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"get", jint>(p1); }
	jlong getLong(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"getLong", jlong>(p1); }
	jni::ref<java::time::chrono::ChronoLocalDate> toLocalDate() { return call_method<"toLocalDate", jni::ref<java::time::chrono::ChronoLocalDate>>(); }
	jni::ref<java::time::LocalTime> toLocalTime() { return call_method<"toLocalTime", jni::ref<java::time::LocalTime>>(); }
	jni::ref<java::time::chrono::ChronoLocalDateTime> toLocalDateTime() { return call_method<"toLocalDateTime", jni::ref<java::time::chrono::ChronoLocalDateTime>>(); }
	jni::ref<java::time::chrono::Chronology> getChronology() { return call_method<"getChronology", jni::ref<java::time::chrono::Chronology>>(); }
	jni::ref<java::time::ZoneOffset> getOffset() { return call_method<"getOffset", jni::ref<java::time::ZoneOffset>>(); }
	jni::ref<java::time::ZoneId> getZone() { return call_method<"getZone", jni::ref<java::time::ZoneId>>(); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> withEarlierOffsetAtOverlap() { return call_method<"withEarlierOffsetAtOverlap", jni::ref<java::time::chrono::ChronoZonedDateTime>>(); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> withLaterOffsetAtOverlap() { return call_method<"withLaterOffsetAtOverlap", jni::ref<java::time::chrono::ChronoZonedDateTime>>(); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> withZoneSameLocal(jni::ref<java::time::ZoneId> p1) { return call_method<"withZoneSameLocal", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> withZoneSameInstant(jni::ref<java::time::ZoneId> p1) { return call_method<"withZoneSameInstant", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalField> p1) { return call_method<"isSupported", jboolean>(p1); }
	jboolean isSupported(jni::ref<java::time::temporal::TemporalUnit> p1) { return call_method<"isSupported", jboolean>(p1); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> with(jni::ref<java::time::temporal::TemporalAdjuster> p1) { return call_method<"with", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> with(jni::ref<java::time::temporal::TemporalField> p1, jlong p2) { return call_method<"with", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1, p2); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> plus(jni::ref<java::time::temporal::TemporalAmount> p1) { return call_method<"plus", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> plus(jlong p1, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"plus", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1, p2); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> minus(jni::ref<java::time::temporal::TemporalAmount> p1) { return call_method<"minus", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1); }
	jni::ref<java::time::chrono::ChronoZonedDateTime> minus(jlong p1, jni::ref<java::time::temporal::TemporalUnit> p2) { return call_method<"minus", jni::ref<java::time::chrono::ChronoZonedDateTime>>(p1, p2); }
	jni::ref<java::lang::Object> query(jni::ref<java::time::temporal::TemporalQuery> p1) { return call_method<"query", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::String> format(jni::ref<java::time::format::DateTimeFormatter> p1) { return call_method<"format", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::time::Instant> toInstant() { return call_method<"toInstant", jni::ref<java::time::Instant>>(); }
	jlong toEpochSecond() { return call_method<"toEpochSecond", jlong>(); }
	jint compareTo(jni::ref<java::time::chrono::ChronoZonedDateTime> p1) { return call_method<"compareTo", jint>(p1); }
	jboolean isBefore(jni::ref<java::time::chrono::ChronoZonedDateTime> p1) { return call_method<"isBefore", jboolean>(p1); }
	jboolean isAfter(jni::ref<java::time::chrono::ChronoZonedDateTime> p1) { return call_method<"isAfter", jboolean>(p1); }
	jboolean isEqual(jni::ref<java::time::chrono::ChronoZonedDateTime> p1) { return call_method<"isEqual", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ChronoZonedDateTime(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOZONEDDATETIME
