// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_SECURITY_KEYSTORE_FWD
#define SCAPIX_JAVA_API_JAVA_SECURITY_KEYSTORE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::security { class KeyStore; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::security::KeyStore>
{
	static constexpr fixed_string class_name = "java/security/KeyStore";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_KEYSTORE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SECURITY_KEYSTORE)
#define SCAPIX_JAVA_API_JAVA_SECURITY_KEYSTORE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Key.h>
#include <scapix/java_api/java/security/KeyStore_Entry.h>
#include <scapix/java_api/java/security/KeyStore_LoadStoreParameter.h>
#include <scapix/java_api/java/security/KeyStore_ProtectionParameter.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/security/KeyStore_PasswordProtection.h>
#include <scapix/java_api/java/security/KeyStore_CallbackHandlerProtection.h>
#include <scapix/java_api/java/security/KeyStore_PrivateKeyEntry.h>
#include <scapix/java_api/java/security/KeyStore_SecretKeyEntry.h>
#include <scapix/java_api/java/security/KeyStore_TrustedCertificateEntry.h>
#include <scapix/java_api/java/security/KeyStore_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::security::KeyStore : public jni::object_base<"java/security/KeyStore",
	java::lang::Object>
{
public:

	using LoadStoreParameter = KeyStore_LoadStoreParameter;
	using ProtectionParameter = KeyStore_ProtectionParameter;
	using PasswordProtection = KeyStore_PasswordProtection;
	using CallbackHandlerProtection = KeyStore_CallbackHandlerProtection;
	using Entry = KeyStore_Entry;
	using PrivateKeyEntry = KeyStore_PrivateKeyEntry;
	using SecretKeyEntry = KeyStore_SecretKeyEntry;
	using TrustedCertificateEntry = KeyStore_TrustedCertificateEntry;
	using Builder = KeyStore_Builder;

	static jni::ref<java::security::KeyStore> getInstance(jni::ref<java::lang::String> p1) { return call_static_method<"getInstance", jni::ref<java::security::KeyStore>>(p1); }
	static jni::ref<java::security::KeyStore> getInstance(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"getInstance", jni::ref<java::security::KeyStore>>(p1, p2); }
	static jni::ref<java::security::KeyStore> getInstance(jni::ref<java::lang::String> p1, jni::ref<java::security::Provider> p2) { return call_static_method<"getInstance", jni::ref<java::security::KeyStore>>(p1, p2); }
	static jni::ref<java::lang::String> getDefaultType() { return call_static_method<"getDefaultType", jni::ref<java::lang::String>>(); }
	jni::ref<java::security::Provider> getProvider() { return call_method<"getProvider", jni::ref<java::security::Provider>>(); }
	jni::ref<java::lang::String> getType() { return call_method<"getType", jni::ref<java::lang::String>>(); }
	jni::ref<java::security::Key> getKey(jni::ref<java::lang::String> p1, jni::ref<jni::array<jchar>> p2) { return call_method<"getKey", jni::ref<java::security::Key>>(p1, p2); }
	jni::ref<jni::array<java::security::cert::Certificate>> getCertificateChain(jni::ref<java::lang::String> p1) { return call_method<"getCertificateChain", jni::ref<jni::array<java::security::cert::Certificate>>>(p1); }
	jni::ref<java::security::cert::Certificate> getCertificate(jni::ref<java::lang::String> p1) { return call_method<"getCertificate", jni::ref<java::security::cert::Certificate>>(p1); }
	jni::ref<java::util::Date> getCreationDate(jni::ref<java::lang::String> p1) { return call_method<"getCreationDate", jni::ref<java::util::Date>>(p1); }
	void setKeyEntry(jni::ref<java::lang::String> p1, jni::ref<java::security::Key> p2, jni::ref<jni::array<jchar>> p3, jni::ref<jni::array<java::security::cert::Certificate>> p4) { return call_method<"setKeyEntry", void>(p1, p2, p3, p4); }
	void setKeyEntry(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<java::security::cert::Certificate>> p3) { return call_method<"setKeyEntry", void>(p1, p2, p3); }
	void setCertificateEntry(jni::ref<java::lang::String> p1, jni::ref<java::security::cert::Certificate> p2) { return call_method<"setCertificateEntry", void>(p1, p2); }
	void deleteEntry(jni::ref<java::lang::String> p1) { return call_method<"deleteEntry", void>(p1); }
	jni::ref<java::util::Enumeration> aliases() { return call_method<"aliases", jni::ref<java::util::Enumeration>>(); }
	jboolean containsAlias(jni::ref<java::lang::String> p1) { return call_method<"containsAlias", jboolean>(p1); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isKeyEntry(jni::ref<java::lang::String> p1) { return call_method<"isKeyEntry", jboolean>(p1); }
	jboolean isCertificateEntry(jni::ref<java::lang::String> p1) { return call_method<"isCertificateEntry", jboolean>(p1); }
	jni::ref<java::lang::String> getCertificateAlias(jni::ref<java::security::cert::Certificate> p1) { return call_method<"getCertificateAlias", jni::ref<java::lang::String>>(p1); }
	void store(jni::ref<java::io::OutputStream> p1, jni::ref<jni::array<jchar>> p2) { return call_method<"store", void>(p1, p2); }
	void store(jni::ref<java::security::KeyStore_LoadStoreParameter> p1) { return call_method<"store", void>(p1); }
	void load(jni::ref<java::io::InputStream> p1, jni::ref<jni::array<jchar>> p2) { return call_method<"load", void>(p1, p2); }
	void load(jni::ref<java::security::KeyStore_LoadStoreParameter> p1) { return call_method<"load", void>(p1); }
	jni::ref<java::security::KeyStore_Entry> getEntry(jni::ref<java::lang::String> p1, jni::ref<java::security::KeyStore_ProtectionParameter> p2) { return call_method<"getEntry", jni::ref<java::security::KeyStore_Entry>>(p1, p2); }
	void setEntry(jni::ref<java::lang::String> p1, jni::ref<java::security::KeyStore_Entry> p2, jni::ref<java::security::KeyStore_ProtectionParameter> p3) { return call_method<"setEntry", void>(p1, p2, p3); }
	jboolean entryInstanceOf(jni::ref<java::lang::String> p1, jni::ref<java::lang::Class> p2) { return call_method<"entryInstanceOf", jboolean>(p1, p2); }

protected:

	KeyStore(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_KEYSTORE
