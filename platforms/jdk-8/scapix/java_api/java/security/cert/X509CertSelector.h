// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/security/cert/CertSelector.h>

#ifndef SCAPIX_JAVA_API_JAVA_SECURITY_CERT_X509CERTSELECTOR_FWD
#define SCAPIX_JAVA_API_JAVA_SECURITY_CERT_X509CERTSELECTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::security::cert { class X509CertSelector; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::security::cert::X509CertSelector>
{
	static constexpr fixed_string class_name = "java/security/cert/X509CertSelector";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::security::cert::CertSelector>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_CERT_X509CERTSELECTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SECURITY_CERT_X509CERTSELECTOR)
#define SCAPIX_JAVA_API_JAVA_SECURITY_CERT_X509CERTSELECTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/security/auth/x500/X500Principal.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::security::cert::X509CertSelector : public jni::object_base<"java/security/cert/X509CertSelector",
	java::lang::Object,
	java::security::cert::CertSelector>
{
public:

	static jni::ref<java::security::cert::X509CertSelector> new_object() { return base_::new_object(); }
	void setCertificate(jni::ref<java::security::cert::X509Certificate> p1) { return call_method<"setCertificate", void>(p1); }
	void setSerialNumber(jni::ref<java::math::BigInteger> p1) { return call_method<"setSerialNumber", void>(p1); }
	void setIssuer(jni::ref<javax::security::auth::x500::X500Principal> p1) { return call_method<"setIssuer", void>(p1); }
	void setIssuer(jni::ref<java::lang::String> p1) { return call_method<"setIssuer", void>(p1); }
	void setIssuer(jni::ref<jni::array<jbyte>> p1) { return call_method<"setIssuer", void>(p1); }
	void setSubject(jni::ref<javax::security::auth::x500::X500Principal> p1) { return call_method<"setSubject", void>(p1); }
	void setSubject(jni::ref<java::lang::String> p1) { return call_method<"setSubject", void>(p1); }
	void setSubject(jni::ref<jni::array<jbyte>> p1) { return call_method<"setSubject", void>(p1); }
	void setSubjectKeyIdentifier(jni::ref<jni::array<jbyte>> p1) { return call_method<"setSubjectKeyIdentifier", void>(p1); }
	void setAuthorityKeyIdentifier(jni::ref<jni::array<jbyte>> p1) { return call_method<"setAuthorityKeyIdentifier", void>(p1); }
	void setCertificateValid(jni::ref<java::util::Date> p1) { return call_method<"setCertificateValid", void>(p1); }
	void setPrivateKeyValid(jni::ref<java::util::Date> p1) { return call_method<"setPrivateKeyValid", void>(p1); }
	void setSubjectPublicKeyAlgID(jni::ref<java::lang::String> p1) { return call_method<"setSubjectPublicKeyAlgID", void>(p1); }
	void setSubjectPublicKey(jni::ref<java::security::PublicKey> p1) { return call_method<"setSubjectPublicKey", void>(p1); }
	void setSubjectPublicKey(jni::ref<jni::array<jbyte>> p1) { return call_method<"setSubjectPublicKey", void>(p1); }
	void setKeyUsage(jni::ref<jni::array<jboolean>> p1) { return call_method<"setKeyUsage", void>(p1); }
	void setExtendedKeyUsage(jni::ref<java::util::Set> p1) { return call_method<"setExtendedKeyUsage", void>(p1); }
	void setMatchAllSubjectAltNames(jboolean p1) { return call_method<"setMatchAllSubjectAltNames", void>(p1); }
	void setSubjectAlternativeNames(jni::ref<java::util::Collection> p1) { return call_method<"setSubjectAlternativeNames", void>(p1); }
	void addSubjectAlternativeName(jint p1, jni::ref<java::lang::String> p2) { return call_method<"addSubjectAlternativeName", void>(p1, p2); }
	void addSubjectAlternativeName(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"addSubjectAlternativeName", void>(p1, p2); }
	void setNameConstraints(jni::ref<jni::array<jbyte>> p1) { return call_method<"setNameConstraints", void>(p1); }
	void setBasicConstraints(jint p1) { return call_method<"setBasicConstraints", void>(p1); }
	void setPolicy(jni::ref<java::util::Set> p1) { return call_method<"setPolicy", void>(p1); }
	void setPathToNames(jni::ref<java::util::Collection> p1) { return call_method<"setPathToNames", void>(p1); }
	void addPathToName(jint p1, jni::ref<java::lang::String> p2) { return call_method<"addPathToName", void>(p1, p2); }
	void addPathToName(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"addPathToName", void>(p1, p2); }
	jni::ref<java::security::cert::X509Certificate> getCertificate() { return call_method<"getCertificate", jni::ref<java::security::cert::X509Certificate>>(); }
	jni::ref<java::math::BigInteger> getSerialNumber() { return call_method<"getSerialNumber", jni::ref<java::math::BigInteger>>(); }
	jni::ref<javax::security::auth::x500::X500Principal> getIssuer() { return call_method<"getIssuer", jni::ref<javax::security::auth::x500::X500Principal>>(); }
	jni::ref<java::lang::String> getIssuerAsString() { return call_method<"getIssuerAsString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> getIssuerAsBytes() { return call_method<"getIssuerAsBytes", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<javax::security::auth::x500::X500Principal> getSubject() { return call_method<"getSubject", jni::ref<javax::security::auth::x500::X500Principal>>(); }
	jni::ref<java::lang::String> getSubjectAsString() { return call_method<"getSubjectAsString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> getSubjectAsBytes() { return call_method<"getSubjectAsBytes", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> getSubjectKeyIdentifier() { return call_method<"getSubjectKeyIdentifier", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> getAuthorityKeyIdentifier() { return call_method<"getAuthorityKeyIdentifier", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::util::Date> getCertificateValid() { return call_method<"getCertificateValid", jni::ref<java::util::Date>>(); }
	jni::ref<java::util::Date> getPrivateKeyValid() { return call_method<"getPrivateKeyValid", jni::ref<java::util::Date>>(); }
	jni::ref<java::lang::String> getSubjectPublicKeyAlgID() { return call_method<"getSubjectPublicKeyAlgID", jni::ref<java::lang::String>>(); }
	jni::ref<java::security::PublicKey> getSubjectPublicKey() { return call_method<"getSubjectPublicKey", jni::ref<java::security::PublicKey>>(); }
	jni::ref<jni::array<jboolean>> getKeyUsage() { return call_method<"getKeyUsage", jni::ref<jni::array<jboolean>>>(); }
	jni::ref<java::util::Set> getExtendedKeyUsage() { return call_method<"getExtendedKeyUsage", jni::ref<java::util::Set>>(); }
	jboolean getMatchAllSubjectAltNames() { return call_method<"getMatchAllSubjectAltNames", jboolean>(); }
	jni::ref<java::util::Collection> getSubjectAlternativeNames() { return call_method<"getSubjectAlternativeNames", jni::ref<java::util::Collection>>(); }
	jni::ref<jni::array<jbyte>> getNameConstraints() { return call_method<"getNameConstraints", jni::ref<jni::array<jbyte>>>(); }
	jint getBasicConstraints() { return call_method<"getBasicConstraints", jint>(); }
	jni::ref<java::util::Set> getPolicy() { return call_method<"getPolicy", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Collection> getPathToNames() { return call_method<"getPathToNames", jni::ref<java::util::Collection>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean match(jni::ref<java::security::cert::Certificate> p1) { return call_method<"match", jboolean>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	X509CertSelector(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_CERT_X509CERTSELECTOR
