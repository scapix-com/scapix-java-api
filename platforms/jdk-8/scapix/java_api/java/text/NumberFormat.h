// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/text/Format.h>

#ifndef SCAPIX_JAVA_API_JAVA_TEXT_NUMBERFORMAT_FWD
#define SCAPIX_JAVA_API_JAVA_TEXT_NUMBERFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::text { class NumberFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::text::NumberFormat>
{
	static constexpr fixed_string class_name = "java/text/NumberFormat";
	using base_classes = std::tuple<scapix::java_api::java::text::Format>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_NUMBERFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TEXT_NUMBERFORMAT)
#define SCAPIX_JAVA_API_JAVA_TEXT_NUMBERFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/math/RoundingMode.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Currency.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/text/NumberFormat_Field.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::text::NumberFormat : public jni::object_base<"java/text/NumberFormat",
	java::text::Format>
{
public:

	using Field = NumberFormat_Field;

	static jint INTEGER_FIELD() { return get_static_field<"INTEGER_FIELD", jint>(); }
	static jint FRACTION_FIELD() { return get_static_field<"FRACTION_FIELD", jint>(); }

	jni::ref<java::lang::StringBuffer> format(jni::ref<java::lang::Object> p1, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> p3) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(p1, p2, p3); }
	jni::ref<java::lang::Object> parseObject(jni::ref<java::lang::String> p1, jni::ref<java::text::ParsePosition> p2) { return call_method<"parseObject", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::String> format(jdouble p1) { return call_method<"format", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> format(jlong p1) { return call_method<"format", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::StringBuffer> format(jdouble p1, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> p3) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(p1, p2, p3); }
	jni::ref<java::lang::StringBuffer> format(jlong p1, jni::ref<java::lang::StringBuffer> p2, jni::ref<java::text::FieldPosition> p3) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(p1, p2, p3); }
	jni::ref<java::lang::Number> parse(jni::ref<java::lang::String> p1, jni::ref<java::text::ParsePosition> p2) { return call_method<"parse", jni::ref<java::lang::Number>>(p1, p2); }
	jni::ref<java::lang::Number> parse(jni::ref<java::lang::String> p1) { return call_method<"parse", jni::ref<java::lang::Number>>(p1); }
	jboolean isParseIntegerOnly() { return call_method<"isParseIntegerOnly", jboolean>(); }
	void setParseIntegerOnly(jboolean p1) { return call_method<"setParseIntegerOnly", void>(p1); }
	static jni::ref<java::text::NumberFormat> getInstance() { return call_static_method<"getInstance", jni::ref<java::text::NumberFormat>>(); }
	static jni::ref<java::text::NumberFormat> getInstance(jni::ref<java::util::Locale> p1) { return call_static_method<"getInstance", jni::ref<java::text::NumberFormat>>(p1); }
	static jni::ref<java::text::NumberFormat> getNumberInstance() { return call_static_method<"getNumberInstance", jni::ref<java::text::NumberFormat>>(); }
	static jni::ref<java::text::NumberFormat> getNumberInstance(jni::ref<java::util::Locale> p1) { return call_static_method<"getNumberInstance", jni::ref<java::text::NumberFormat>>(p1); }
	static jni::ref<java::text::NumberFormat> getIntegerInstance() { return call_static_method<"getIntegerInstance", jni::ref<java::text::NumberFormat>>(); }
	static jni::ref<java::text::NumberFormat> getIntegerInstance(jni::ref<java::util::Locale> p1) { return call_static_method<"getIntegerInstance", jni::ref<java::text::NumberFormat>>(p1); }
	static jni::ref<java::text::NumberFormat> getCurrencyInstance() { return call_static_method<"getCurrencyInstance", jni::ref<java::text::NumberFormat>>(); }
	static jni::ref<java::text::NumberFormat> getCurrencyInstance(jni::ref<java::util::Locale> p1) { return call_static_method<"getCurrencyInstance", jni::ref<java::text::NumberFormat>>(p1); }
	static jni::ref<java::text::NumberFormat> getPercentInstance() { return call_static_method<"getPercentInstance", jni::ref<java::text::NumberFormat>>(); }
	static jni::ref<java::text::NumberFormat> getPercentInstance(jni::ref<java::util::Locale> p1) { return call_static_method<"getPercentInstance", jni::ref<java::text::NumberFormat>>(p1); }
	static jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_static_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean isGroupingUsed() { return call_method<"isGroupingUsed", jboolean>(); }
	void setGroupingUsed(jboolean p1) { return call_method<"setGroupingUsed", void>(p1); }
	jint getMaximumIntegerDigits() { return call_method<"getMaximumIntegerDigits", jint>(); }
	void setMaximumIntegerDigits(jint p1) { return call_method<"setMaximumIntegerDigits", void>(p1); }
	jint getMinimumIntegerDigits() { return call_method<"getMinimumIntegerDigits", jint>(); }
	void setMinimumIntegerDigits(jint p1) { return call_method<"setMinimumIntegerDigits", void>(p1); }
	jint getMaximumFractionDigits() { return call_method<"getMaximumFractionDigits", jint>(); }
	void setMaximumFractionDigits(jint p1) { return call_method<"setMaximumFractionDigits", void>(p1); }
	jint getMinimumFractionDigits() { return call_method<"getMinimumFractionDigits", jint>(); }
	void setMinimumFractionDigits(jint p1) { return call_method<"setMinimumFractionDigits", void>(p1); }
	jni::ref<java::util::Currency> getCurrency() { return call_method<"getCurrency", jni::ref<java::util::Currency>>(); }
	void setCurrency(jni::ref<java::util::Currency> p1) { return call_method<"setCurrency", void>(p1); }
	jni::ref<java::math::RoundingMode> getRoundingMode() { return call_method<"getRoundingMode", jni::ref<java::math::RoundingMode>>(); }
	void setRoundingMode(jni::ref<java::math::RoundingMode> p1) { return call_method<"setRoundingMode", void>(p1); }

protected:

	NumberFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_NUMBERFORMAT
