// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/FileInputStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_SOCKETINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_NET_SOCKETINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class SocketInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::SocketInputStream>
{
	static constexpr fixed_string class_name = "java/net/SocketInputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::FileInputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKETINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_SOCKETINPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_NET_SOCKETINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/channels/FileChannel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::net::SocketInputStream : public jni::object_base<"java/net/SocketInputStream",
	java::io::FileInputStream>
{
public:

	jni::ref<java::nio::channels::FileChannel> getChannel() { return call_method<"getChannel", jni::ref<java::nio::channels::FileChannel>>(); }
	jint read(jni::ref<jni::array<jbyte>> p1) { return call_method<"read", jint>(p1); }
	jint read(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	jint read() { return call_method<"read", jint>(); }
	jlong skip(jlong p1) { return call_method<"skip", jlong>(p1); }
	jint available() { return call_method<"available", jint>(); }
	void close() { return call_method<"close", void>(); }

protected:

	SocketInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKETINPUTSTREAM
