// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_HTTPCOOKIE_FWD
#define SCAPIX_JAVA_API_JAVA_NET_HTTPCOOKIE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class HttpCookie; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::HttpCookie>
{
	static constexpr fixed_string class_name = "java/net/HttpCookie";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_HTTPCOOKIE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_HTTPCOOKIE)
#define SCAPIX_JAVA_API_JAVA_NET_HTTPCOOKIE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::net::HttpCookie : public jni::object_base<"java/net/HttpCookie",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<java::net::HttpCookie> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<java::util::List> parse(jni::ref<java::lang::String> p1) { return call_static_method<"parse", jni::ref<java::util::List>>(p1); }
	jboolean hasExpired() { return call_method<"hasExpired", jboolean>(); }
	void setComment(jni::ref<java::lang::String> p1) { return call_method<"setComment", void>(p1); }
	jni::ref<java::lang::String> getComment() { return call_method<"getComment", jni::ref<java::lang::String>>(); }
	void setCommentURL(jni::ref<java::lang::String> p1) { return call_method<"setCommentURL", void>(p1); }
	jni::ref<java::lang::String> getCommentURL() { return call_method<"getCommentURL", jni::ref<java::lang::String>>(); }
	void setDiscard(jboolean p1) { return call_method<"setDiscard", void>(p1); }
	jboolean getDiscard() { return call_method<"getDiscard", jboolean>(); }
	void setPortlist(jni::ref<java::lang::String> p1) { return call_method<"setPortlist", void>(p1); }
	jni::ref<java::lang::String> getPortlist() { return call_method<"getPortlist", jni::ref<java::lang::String>>(); }
	void setDomain(jni::ref<java::lang::String> p1) { return call_method<"setDomain", void>(p1); }
	jni::ref<java::lang::String> getDomain() { return call_method<"getDomain", jni::ref<java::lang::String>>(); }
	void setMaxAge(jlong p1) { return call_method<"setMaxAge", void>(p1); }
	jlong getMaxAge() { return call_method<"getMaxAge", jlong>(); }
	void setPath(jni::ref<java::lang::String> p1) { return call_method<"setPath", void>(p1); }
	jni::ref<java::lang::String> getPath() { return call_method<"getPath", jni::ref<java::lang::String>>(); }
	void setSecure(jboolean p1) { return call_method<"setSecure", void>(p1); }
	jboolean getSecure() { return call_method<"getSecure", jboolean>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void setValue(jni::ref<java::lang::String> p1) { return call_method<"setValue", void>(p1); }
	jni::ref<java::lang::String> getValue() { return call_method<"getValue", jni::ref<java::lang::String>>(); }
	jint getVersion() { return call_method<"getVersion", jint>(); }
	void setVersion(jint p1) { return call_method<"setVersion", void>(p1); }
	jboolean isHttpOnly() { return call_method<"isHttpOnly", jboolean>(); }
	void setHttpOnly(jboolean p1) { return call_method<"setHttpOnly", void>(p1); }
	static jboolean domainMatches(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"domainMatches", jboolean>(p1, p2); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	HttpCookie(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_HTTPCOOKIE
