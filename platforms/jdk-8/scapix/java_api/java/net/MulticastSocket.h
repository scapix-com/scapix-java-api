// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/net/DatagramSocket.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_MULTICASTSOCKET_FWD
#define SCAPIX_JAVA_API_JAVA_NET_MULTICASTSOCKET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class MulticastSocket; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::MulticastSocket>
{
	static constexpr fixed_string class_name = "java/net/MulticastSocket";
	using base_classes = std::tuple<scapix::java_api::java::net::DatagramSocket>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_MULTICASTSOCKET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_MULTICASTSOCKET)
#define SCAPIX_JAVA_API_JAVA_NET_MULTICASTSOCKET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/net/DatagramPacket.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/NetworkInterface.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::net::MulticastSocket : public jni::object_base<"java/net/MulticastSocket",
	java::net::DatagramSocket>
{
public:

	static jni::ref<java::net::MulticastSocket> new_object() { return base_::new_object(); }
	static jni::ref<java::net::MulticastSocket> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<java::net::MulticastSocket> new_object(jni::ref<java::net::SocketAddress> p1) { return base_::new_object(p1); }
	void setTTL(jbyte p1) { return call_method<"setTTL", void>(p1); }
	void setTimeToLive(jint p1) { return call_method<"setTimeToLive", void>(p1); }
	jbyte getTTL() { return call_method<"getTTL", jbyte>(); }
	jint getTimeToLive() { return call_method<"getTimeToLive", jint>(); }
	void joinGroup(jni::ref<java::net::InetAddress> p1) { return call_method<"joinGroup", void>(p1); }
	void leaveGroup(jni::ref<java::net::InetAddress> p1) { return call_method<"leaveGroup", void>(p1); }
	void joinGroup(jni::ref<java::net::SocketAddress> p1, jni::ref<java::net::NetworkInterface> p2) { return call_method<"joinGroup", void>(p1, p2); }
	void leaveGroup(jni::ref<java::net::SocketAddress> p1, jni::ref<java::net::NetworkInterface> p2) { return call_method<"leaveGroup", void>(p1, p2); }
	void setInterface(jni::ref<java::net::InetAddress> p1) { return call_method<"setInterface", void>(p1); }
	jni::ref<java::net::InetAddress> getInterface() { return call_method<"getInterface", jni::ref<java::net::InetAddress>>(); }
	void setNetworkInterface(jni::ref<java::net::NetworkInterface> p1) { return call_method<"setNetworkInterface", void>(p1); }
	jni::ref<java::net::NetworkInterface> getNetworkInterface() { return call_method<"getNetworkInterface", jni::ref<java::net::NetworkInterface>>(); }
	void setLoopbackMode(jboolean p1) { return call_method<"setLoopbackMode", void>(p1); }
	jboolean getLoopbackMode() { return call_method<"getLoopbackMode", jboolean>(); }
	void send(jni::ref<java::net::DatagramPacket> p1, jbyte p2) { return call_method<"send", void>(p1, p2); }

protected:

	MulticastSocket(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_MULTICASTSOCKET
