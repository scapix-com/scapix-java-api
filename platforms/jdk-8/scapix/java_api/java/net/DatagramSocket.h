// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_DATAGRAMSOCKET_FWD
#define SCAPIX_JAVA_API_JAVA_NET_DATAGRAMSOCKET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class DatagramSocket; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::DatagramSocket>
{
	static constexpr fixed_string class_name = "java/net/DatagramSocket";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_DATAGRAMSOCKET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_DATAGRAMSOCKET)
#define SCAPIX_JAVA_API_JAVA_NET_DATAGRAMSOCKET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/net/DatagramPacket.h>
#include <scapix/java_api/java/net/DatagramSocketImplFactory.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/nio/channels/DatagramChannel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::net::DatagramSocket : public jni::object_base<"java/net/DatagramSocket",
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jni::ref<java::net::DatagramSocket> new_object() { return base_::new_object(); }
	static jni::ref<java::net::DatagramSocket> new_object(jni::ref<java::net::SocketAddress> p1) { return base_::new_object(p1); }
	static jni::ref<java::net::DatagramSocket> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<java::net::DatagramSocket> new_object(jint p1, jni::ref<java::net::InetAddress> p2) { return base_::new_object(p1, p2); }
	void bind(jni::ref<java::net::SocketAddress> p1) { return call_method<"bind", void>(p1); }
	void connect(jni::ref<java::net::InetAddress> p1, jint p2) { return call_method<"connect", void>(p1, p2); }
	void connect(jni::ref<java::net::SocketAddress> p1) { return call_method<"connect", void>(p1); }
	void disconnect() { return call_method<"disconnect", void>(); }
	jboolean isBound() { return call_method<"isBound", jboolean>(); }
	jboolean isConnected() { return call_method<"isConnected", jboolean>(); }
	jni::ref<java::net::InetAddress> getInetAddress() { return call_method<"getInetAddress", jni::ref<java::net::InetAddress>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	jni::ref<java::net::SocketAddress> getRemoteSocketAddress() { return call_method<"getRemoteSocketAddress", jni::ref<java::net::SocketAddress>>(); }
	jni::ref<java::net::SocketAddress> getLocalSocketAddress() { return call_method<"getLocalSocketAddress", jni::ref<java::net::SocketAddress>>(); }
	void send(jni::ref<java::net::DatagramPacket> p1) { return call_method<"send", void>(p1); }
	void receive(jni::ref<java::net::DatagramPacket> p1) { return call_method<"receive", void>(p1); }
	jni::ref<java::net::InetAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::InetAddress>>(); }
	jint getLocalPort() { return call_method<"getLocalPort", jint>(); }
	void setSoTimeout(jint p1) { return call_method<"setSoTimeout", void>(p1); }
	jint getSoTimeout() { return call_method<"getSoTimeout", jint>(); }
	void setSendBufferSize(jint p1) { return call_method<"setSendBufferSize", void>(p1); }
	jint getSendBufferSize() { return call_method<"getSendBufferSize", jint>(); }
	void setReceiveBufferSize(jint p1) { return call_method<"setReceiveBufferSize", void>(p1); }
	jint getReceiveBufferSize() { return call_method<"getReceiveBufferSize", jint>(); }
	void setReuseAddress(jboolean p1) { return call_method<"setReuseAddress", void>(p1); }
	jboolean getReuseAddress() { return call_method<"getReuseAddress", jboolean>(); }
	void setBroadcast(jboolean p1) { return call_method<"setBroadcast", void>(p1); }
	jboolean getBroadcast() { return call_method<"getBroadcast", jboolean>(); }
	void setTrafficClass(jint p1) { return call_method<"setTrafficClass", void>(p1); }
	jint getTrafficClass() { return call_method<"getTrafficClass", jint>(); }
	void close() { return call_method<"close", void>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	jni::ref<java::nio::channels::DatagramChannel> getChannel() { return call_method<"getChannel", jni::ref<java::nio::channels::DatagramChannel>>(); }
	static void setDatagramSocketImplFactory(jni::ref<java::net::DatagramSocketImplFactory> p1) { return call_static_method<"setDatagramSocketImplFactory", void>(p1); }

protected:

	DatagramSocket(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_DATAGRAMSOCKET
