// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_BASEROWSET_FWD
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_BASEROWSET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sql::rowset { class BaseRowSet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sql::rowset::BaseRowSet>
{
	static constexpr fixed_string class_name = "javax/sql/rowset/BaseRowSet";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_BASEROWSET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_BASEROWSET)
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_BASEROWSET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/sql/Array.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/sql/Clob.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/NClob.h>
#include <scapix/java_api/java/sql/Ref.h>
#include <scapix/java_api/java/sql/RowId.h>
#include <scapix/java_api/java/sql/SQLXML.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Calendar.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/sql/RowSetListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sql::rowset::BaseRowSet : public jni::object_base<"javax/sql/rowset/BaseRowSet",
	java::lang::Object,
	java::io::Serializable,
	java::lang::Cloneable>
{
public:

	static jint UNICODE_STREAM_PARAM() { return get_static_field<"UNICODE_STREAM_PARAM", jint>(); }
	static jint BINARY_STREAM_PARAM() { return get_static_field<"BINARY_STREAM_PARAM", jint>(); }
	static jint ASCII_STREAM_PARAM() { return get_static_field<"ASCII_STREAM_PARAM", jint>(); }

	static jni::ref<javax::sql::rowset::BaseRowSet> new_object() { return base_::new_object(); }
	void addRowSetListener(jni::ref<javax::sql::RowSetListener> p1) { return call_method<"addRowSetListener", void>(p1); }
	void removeRowSetListener(jni::ref<javax::sql::RowSetListener> p1) { return call_method<"removeRowSetListener", void>(p1); }
	jni::ref<java::lang::String> getCommand() { return call_method<"getCommand", jni::ref<java::lang::String>>(); }
	void setCommand(jni::ref<java::lang::String> p1) { return call_method<"setCommand", void>(p1); }
	jni::ref<java::lang::String> getUrl() { return call_method<"getUrl", jni::ref<java::lang::String>>(); }
	void setUrl(jni::ref<java::lang::String> p1) { return call_method<"setUrl", void>(p1); }
	jni::ref<java::lang::String> getDataSourceName() { return call_method<"getDataSourceName", jni::ref<java::lang::String>>(); }
	void setDataSourceName(jni::ref<java::lang::String> p1) { return call_method<"setDataSourceName", void>(p1); }
	jni::ref<java::lang::String> getUsername() { return call_method<"getUsername", jni::ref<java::lang::String>>(); }
	void setUsername(jni::ref<java::lang::String> p1) { return call_method<"setUsername", void>(p1); }
	jni::ref<java::lang::String> getPassword() { return call_method<"getPassword", jni::ref<java::lang::String>>(); }
	void setPassword(jni::ref<java::lang::String> p1) { return call_method<"setPassword", void>(p1); }
	void setType(jint p1) { return call_method<"setType", void>(p1); }
	jint getType() { return call_method<"getType", jint>(); }
	void setConcurrency(jint p1) { return call_method<"setConcurrency", void>(p1); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	void setReadOnly(jboolean p1) { return call_method<"setReadOnly", void>(p1); }
	jint getTransactionIsolation() { return call_method<"getTransactionIsolation", jint>(); }
	void setTransactionIsolation(jint p1) { return call_method<"setTransactionIsolation", void>(p1); }
	jni::ref<java::util::Map> getTypeMap() { return call_method<"getTypeMap", jni::ref<java::util::Map>>(); }
	void setTypeMap(jni::ref<java::util::Map> p1) { return call_method<"setTypeMap", void>(p1); }
	jint getMaxFieldSize() { return call_method<"getMaxFieldSize", jint>(); }
	void setMaxFieldSize(jint p1) { return call_method<"setMaxFieldSize", void>(p1); }
	jint getMaxRows() { return call_method<"getMaxRows", jint>(); }
	void setMaxRows(jint p1) { return call_method<"setMaxRows", void>(p1); }
	void setEscapeProcessing(jboolean p1) { return call_method<"setEscapeProcessing", void>(p1); }
	jint getQueryTimeout() { return call_method<"getQueryTimeout", jint>(); }
	void setQueryTimeout(jint p1) { return call_method<"setQueryTimeout", void>(p1); }
	jboolean getShowDeleted() { return call_method<"getShowDeleted", jboolean>(); }
	void setShowDeleted(jboolean p1) { return call_method<"setShowDeleted", void>(p1); }
	jboolean getEscapeProcessing() { return call_method<"getEscapeProcessing", jboolean>(); }
	void setFetchDirection(jint p1) { return call_method<"setFetchDirection", void>(p1); }
	jint getFetchDirection() { return call_method<"getFetchDirection", jint>(); }
	void setFetchSize(jint p1) { return call_method<"setFetchSize", void>(p1); }
	jint getFetchSize() { return call_method<"getFetchSize", jint>(); }
	jint getConcurrency() { return call_method<"getConcurrency", jint>(); }
	void setNull(jint p1, jint p2) { return call_method<"setNull", void>(p1, p2); }
	void setNull(jint p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"setNull", void>(p1, p2, p3); }
	void setBoolean(jint p1, jboolean p2) { return call_method<"setBoolean", void>(p1, p2); }
	void setByte(jint p1, jbyte p2) { return call_method<"setByte", void>(p1, p2); }
	void setShort(jint p1, jshort p2) { return call_method<"setShort", void>(p1, p2); }
	void setInt(jint p1, jint p2) { return call_method<"setInt", void>(p1, p2); }
	void setLong(jint p1, jlong p2) { return call_method<"setLong", void>(p1, p2); }
	void setFloat(jint p1, jfloat p2) { return call_method<"setFloat", void>(p1, p2); }
	void setDouble(jint p1, jdouble p2) { return call_method<"setDouble", void>(p1, p2); }
	void setBigDecimal(jint p1, jni::ref<java::math::BigDecimal> p2) { return call_method<"setBigDecimal", void>(p1, p2); }
	void setString(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setString", void>(p1, p2); }
	void setBytes(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"setBytes", void>(p1, p2); }
	void setDate(jint p1, jni::ref<java::sql::Date> p2) { return call_method<"setDate", void>(p1, p2); }
	void setTime(jint p1, jni::ref<java::sql::Time> p2) { return call_method<"setTime", void>(p1, p2); }
	void setTimestamp(jint p1, jni::ref<java::sql::Timestamp> p2) { return call_method<"setTimestamp", void>(p1, p2); }
	void setAsciiStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setAsciiStream", void>(p1, p2, p3); }
	void setAsciiStream(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"setAsciiStream", void>(p1, p2); }
	void setBinaryStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setBinaryStream", void>(p1, p2, p3); }
	void setBinaryStream(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"setBinaryStream", void>(p1, p2); }
	void setUnicodeStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setUnicodeStream", void>(p1, p2, p3); }
	void setCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jint p3) { return call_method<"setCharacterStream", void>(p1, p2, p3); }
	void setCharacterStream(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"setCharacterStream", void>(p1, p2); }
	void setObject(jint p1, jni::ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<"setObject", void>(p1, p2, p3, p4); }
	void setObject(jint p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"setObject", void>(p1, p2, p3); }
	void setObject(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"setObject", void>(p1, p2); }
	void setRef(jint p1, jni::ref<java::sql::Ref> p2) { return call_method<"setRef", void>(p1, p2); }
	void setBlob(jint p1, jni::ref<java::sql::Blob> p2) { return call_method<"setBlob", void>(p1, p2); }
	void setClob(jint p1, jni::ref<java::sql::Clob> p2) { return call_method<"setClob", void>(p1, p2); }
	void setArray(jint p1, jni::ref<java::sql::Array> p2) { return call_method<"setArray", void>(p1, p2); }
	void setDate(jint p1, jni::ref<java::sql::Date> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setDate", void>(p1, p2, p3); }
	void setTime(jint p1, jni::ref<java::sql::Time> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setTime", void>(p1, p2, p3); }
	void setTimestamp(jint p1, jni::ref<java::sql::Timestamp> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setTimestamp", void>(p1, p2, p3); }
	void clearParameters() { return call_method<"clearParameters", void>(); }
	jni::ref<jni::array<java::lang::Object>> getParams() { return call_method<"getParams", jni::ref<jni::array<java::lang::Object>>>(); }
	void setNull(jni::ref<java::lang::String> p1, jint p2) { return call_method<"setNull", void>(p1, p2); }
	void setNull(jni::ref<java::lang::String> p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"setNull", void>(p1, p2, p3); }
	void setBoolean(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setBoolean", void>(p1, p2); }
	void setByte(jni::ref<java::lang::String> p1, jbyte p2) { return call_method<"setByte", void>(p1, p2); }
	void setShort(jni::ref<java::lang::String> p1, jshort p2) { return call_method<"setShort", void>(p1, p2); }
	void setInt(jni::ref<java::lang::String> p1, jint p2) { return call_method<"setInt", void>(p1, p2); }
	void setLong(jni::ref<java::lang::String> p1, jlong p2) { return call_method<"setLong", void>(p1, p2); }
	void setFloat(jni::ref<java::lang::String> p1, jfloat p2) { return call_method<"setFloat", void>(p1, p2); }
	void setDouble(jni::ref<java::lang::String> p1, jdouble p2) { return call_method<"setDouble", void>(p1, p2); }
	void setBigDecimal(jni::ref<java::lang::String> p1, jni::ref<java::math::BigDecimal> p2) { return call_method<"setBigDecimal", void>(p1, p2); }
	void setString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setString", void>(p1, p2); }
	void setBytes(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"setBytes", void>(p1, p2); }
	void setTimestamp(jni::ref<java::lang::String> p1, jni::ref<java::sql::Timestamp> p2) { return call_method<"setTimestamp", void>(p1, p2); }
	void setAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setAsciiStream", void>(p1, p2, p3); }
	void setBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"setBinaryStream", void>(p1, p2, p3); }
	void setCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jint p3) { return call_method<"setCharacterStream", void>(p1, p2, p3); }
	void setAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"setAsciiStream", void>(p1, p2); }
	void setBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"setBinaryStream", void>(p1, p2); }
	void setCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"setCharacterStream", void>(p1, p2); }
	void setNCharacterStream(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"setNCharacterStream", void>(p1, p2); }
	void setObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jint p3, jint p4) { return call_method<"setObject", void>(p1, p2, p3, p4); }
	void setObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"setObject", void>(p1, p2, p3); }
	void setObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setObject", void>(p1, p2); }
	void setBlob(jint p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"setBlob", void>(p1, p2, p3); }
	void setBlob(jint p1, jni::ref<java::io::InputStream> p2) { return call_method<"setBlob", void>(p1, p2); }
	void setBlob(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jlong p3) { return call_method<"setBlob", void>(p1, p2, p3); }
	void setBlob(jni::ref<java::lang::String> p1, jni::ref<java::sql::Blob> p2) { return call_method<"setBlob", void>(p1, p2); }
	void setBlob(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"setBlob", void>(p1, p2); }
	void setClob(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setClob", void>(p1, p2, p3); }
	void setClob(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"setClob", void>(p1, p2); }
	void setClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setClob", void>(p1, p2, p3); }
	void setClob(jni::ref<java::lang::String> p1, jni::ref<java::sql::Clob> p2) { return call_method<"setClob", void>(p1, p2); }
	void setClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"setClob", void>(p1, p2); }
	void setDate(jni::ref<java::lang::String> p1, jni::ref<java::sql::Date> p2) { return call_method<"setDate", void>(p1, p2); }
	void setDate(jni::ref<java::lang::String> p1, jni::ref<java::sql::Date> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setDate", void>(p1, p2, p3); }
	void setTime(jni::ref<java::lang::String> p1, jni::ref<java::sql::Time> p2) { return call_method<"setTime", void>(p1, p2); }
	void setTime(jni::ref<java::lang::String> p1, jni::ref<java::sql::Time> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setTime", void>(p1, p2, p3); }
	void setTimestamp(jni::ref<java::lang::String> p1, jni::ref<java::sql::Timestamp> p2, jni::ref<java::util::Calendar> p3) { return call_method<"setTimestamp", void>(p1, p2, p3); }
	void setSQLXML(jint p1, jni::ref<java::sql::SQLXML> p2) { return call_method<"setSQLXML", void>(p1, p2); }
	void setSQLXML(jni::ref<java::lang::String> p1, jni::ref<java::sql::SQLXML> p2) { return call_method<"setSQLXML", void>(p1, p2); }
	void setRowId(jint p1, jni::ref<java::sql::RowId> p2) { return call_method<"setRowId", void>(p1, p2); }
	void setRowId(jni::ref<java::lang::String> p1, jni::ref<java::sql::RowId> p2) { return call_method<"setRowId", void>(p1, p2); }
	void setNString(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setNString", void>(p1, p2); }
	void setNString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setNString", void>(p1, p2); }
	void setNCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setNCharacterStream", void>(p1, p2, p3); }
	void setNCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setNCharacterStream", void>(p1, p2, p3); }
	void setNCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"setNCharacterStream", void>(p1, p2); }
	void setNClob(jni::ref<java::lang::String> p1, jni::ref<java::sql::NClob> p2) { return call_method<"setNClob", void>(p1, p2); }
	void setNClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setNClob", void>(p1, p2, p3); }
	void setNClob(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"setNClob", void>(p1, p2); }
	void setNClob(jint p1, jni::ref<java::io::Reader> p2, jlong p3) { return call_method<"setNClob", void>(p1, p2, p3); }
	void setNClob(jint p1, jni::ref<java::sql::NClob> p2) { return call_method<"setNClob", void>(p1, p2); }
	void setNClob(jint p1, jni::ref<java::io::Reader> p2) { return call_method<"setNClob", void>(p1, p2); }
	void setURL(jint p1, jni::ref<java::net::URL> p2) { return call_method<"setURL", void>(p1, p2); }

protected:

	BaseRowSet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_BASEROWSET
