// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SPI_SYNCPROVIDER_FWD
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SPI_SYNCPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sql::rowset::spi { class SyncProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sql::rowset::spi::SyncProvider>
{
	static constexpr fixed_string class_name = "javax/sql/rowset/spi/SyncProvider";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SPI_SYNCPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SPI_SYNCPROVIDER)
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SPI_SYNCPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/sql/RowSetReader.h>
#include <scapix/java_api/javax/sql/RowSetWriter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sql::rowset::spi::SyncProvider : public jni::object_base<"javax/sql/rowset/spi/SyncProvider",
	java::lang::Object>
{
public:

	static jint GRADE_NONE() { return get_static_field<"GRADE_NONE", jint>(); }
	static jint GRADE_CHECK_MODIFIED_AT_COMMIT() { return get_static_field<"GRADE_CHECK_MODIFIED_AT_COMMIT", jint>(); }
	static jint GRADE_CHECK_ALL_AT_COMMIT() { return get_static_field<"GRADE_CHECK_ALL_AT_COMMIT", jint>(); }
	static jint GRADE_LOCK_WHEN_MODIFIED() { return get_static_field<"GRADE_LOCK_WHEN_MODIFIED", jint>(); }
	static jint GRADE_LOCK_WHEN_LOADED() { return get_static_field<"GRADE_LOCK_WHEN_LOADED", jint>(); }
	static jint DATASOURCE_NO_LOCK() { return get_static_field<"DATASOURCE_NO_LOCK", jint>(); }
	static jint DATASOURCE_ROW_LOCK() { return get_static_field<"DATASOURCE_ROW_LOCK", jint>(); }
	static jint DATASOURCE_TABLE_LOCK() { return get_static_field<"DATASOURCE_TABLE_LOCK", jint>(); }
	static jint DATASOURCE_DB_LOCK() { return get_static_field<"DATASOURCE_DB_LOCK", jint>(); }
	static jint UPDATABLE_VIEW_SYNC() { return get_static_field<"UPDATABLE_VIEW_SYNC", jint>(); }
	static jint NONUPDATABLE_VIEW_SYNC() { return get_static_field<"NONUPDATABLE_VIEW_SYNC", jint>(); }

	static jni::ref<javax::sql::rowset::spi::SyncProvider> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> getProviderID() { return call_method<"getProviderID", jni::ref<java::lang::String>>(); }
	jni::ref<javax::sql::RowSetReader> getRowSetReader() { return call_method<"getRowSetReader", jni::ref<javax::sql::RowSetReader>>(); }
	jni::ref<javax::sql::RowSetWriter> getRowSetWriter() { return call_method<"getRowSetWriter", jni::ref<javax::sql::RowSetWriter>>(); }
	jint getProviderGrade() { return call_method<"getProviderGrade", jint>(); }
	void setDataSourceLock(jint p1) { return call_method<"setDataSourceLock", void>(p1); }
	jint getDataSourceLock() { return call_method<"getDataSourceLock", jint>(); }
	jint supportsUpdatableView() { return call_method<"supportsUpdatableView", jint>(); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVendor() { return call_method<"getVendor", jni::ref<java::lang::String>>(); }

protected:

	SyncProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SPI_SYNCPROVIDER
