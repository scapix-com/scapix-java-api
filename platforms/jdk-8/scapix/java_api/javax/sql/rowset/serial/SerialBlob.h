// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/sql/Blob.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SERIAL_SERIALBLOB_FWD
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SERIAL_SERIALBLOB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sql::rowset::serial { class SerialBlob; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sql::rowset::serial::SerialBlob>
{
	static constexpr fixed_string class_name = "javax/sql/rowset/serial/SerialBlob";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::sql::Blob, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SERIAL_SERIALBLOB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SERIAL_SERIALBLOB)
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SERIAL_SERIALBLOB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sql::rowset::serial::SerialBlob : public jni::object_base<"javax/sql/rowset/serial/SerialBlob",
	java::lang::Object,
	java::sql::Blob,
	java::io::Serializable,
	java::lang::Cloneable>
{
public:

	static jni::ref<javax::sql::rowset::serial::SerialBlob> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	static jni::ref<javax::sql::rowset::serial::SerialBlob> new_object(jni::ref<java::sql::Blob> p1) { return base_::new_object(p1); }
	jni::ref<jni::array<jbyte>> getBytes(jlong p1, jint p2) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1, p2); }
	jlong length() { return call_method<"length", jlong>(); }
	jni::ref<java::io::InputStream> getBinaryStream() { return call_method<"getBinaryStream", jni::ref<java::io::InputStream>>(); }
	jlong position(jni::ref<jni::array<jbyte>> p1, jlong p2) { return call_method<"position", jlong>(p1, p2); }
	jlong position(jni::ref<java::sql::Blob> p1, jlong p2) { return call_method<"position", jlong>(p1, p2); }
	jint setBytes(jlong p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"setBytes", jint>(p1, p2); }
	jint setBytes(jlong p1, jni::ref<jni::array<jbyte>> p2, jint p3, jint p4) { return call_method<"setBytes", jint>(p1, p2, p3, p4); }
	jni::ref<java::io::OutputStream> setBinaryStream(jlong p1) { return call_method<"setBinaryStream", jni::ref<java::io::OutputStream>>(p1); }
	void truncate(jlong p1) { return call_method<"truncate", void>(p1); }
	jni::ref<java::io::InputStream> getBinaryStream(jlong p1, jlong p2) { return call_method<"getBinaryStream", jni::ref<java::io::InputStream>>(p1, p2); }
	void free() { return call_method<"free", void>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	SerialBlob(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_SERIAL_SERIALBLOB
