// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/sql/RowSet.h>
#include <scapix/java_api/javax/sql/rowset/Joinable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_CACHEDROWSET_FWD
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_CACHEDROWSET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sql::rowset { class CachedRowSet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sql::rowset::CachedRowSet>
{
	static constexpr fixed_string class_name = "javax/sql/rowset/CachedRowSet";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::sql::RowSet, scapix::java_api::javax::sql::rowset::Joinable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_CACHEDROWSET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_CACHEDROWSET)
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_CACHEDROWSET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/sql/Connection.h>
#include <scapix/java_api/java/sql/ResultSet.h>
#include <scapix/java_api/java/sql/Savepoint.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/javax/sql/RowSetEvent.h>
#include <scapix/java_api/javax/sql/RowSetMetaData.h>
#include <scapix/java_api/javax/sql/rowset/RowSetWarning.h>
#include <scapix/java_api/javax/sql/rowset/spi/SyncProvider.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sql::rowset::CachedRowSet : public jni::object_base<"javax/sql/rowset/CachedRowSet",
	java::lang::Object,
	javax::sql::RowSet,
	javax::sql::rowset::Joinable>
{
public:

	static jboolean COMMIT_ON_ACCEPT_CHANGES() { return get_static_field<"COMMIT_ON_ACCEPT_CHANGES", jboolean>(); }

	void populate(jni::ref<java::sql::ResultSet> p1) { return call_method<"populate", void>(p1); }
	void execute(jni::ref<java::sql::Connection> p1) { return call_method<"execute", void>(p1); }
	void acceptChanges() { return call_method<"acceptChanges", void>(); }
	void acceptChanges(jni::ref<java::sql::Connection> p1) { return call_method<"acceptChanges", void>(p1); }
	void restoreOriginal() { return call_method<"restoreOriginal", void>(); }
	void release() { return call_method<"release", void>(); }
	void undoDelete() { return call_method<"undoDelete", void>(); }
	void undoInsert() { return call_method<"undoInsert", void>(); }
	void undoUpdate() { return call_method<"undoUpdate", void>(); }
	jboolean columnUpdated(jint p1) { return call_method<"columnUpdated", jboolean>(p1); }
	jboolean columnUpdated(jni::ref<java::lang::String> p1) { return call_method<"columnUpdated", jboolean>(p1); }
	jni::ref<java::util::Collection> toCollection() { return call_method<"toCollection", jni::ref<java::util::Collection>>(); }
	jni::ref<java::util::Collection> toCollection(jint p1) { return call_method<"toCollection", jni::ref<java::util::Collection>>(p1); }
	jni::ref<java::util::Collection> toCollection(jni::ref<java::lang::String> p1) { return call_method<"toCollection", jni::ref<java::util::Collection>>(p1); }
	jni::ref<javax::sql::rowset::spi::SyncProvider> getSyncProvider() { return call_method<"getSyncProvider", jni::ref<javax::sql::rowset::spi::SyncProvider>>(); }
	void setSyncProvider(jni::ref<java::lang::String> p1) { return call_method<"setSyncProvider", void>(p1); }
	jint size() { return call_method<"size", jint>(); }
	void setMetaData(jni::ref<javax::sql::RowSetMetaData> p1) { return call_method<"setMetaData", void>(p1); }
	jni::ref<java::sql::ResultSet> getOriginal() { return call_method<"getOriginal", jni::ref<java::sql::ResultSet>>(); }
	jni::ref<java::sql::ResultSet> getOriginalRow() { return call_method<"getOriginalRow", jni::ref<java::sql::ResultSet>>(); }
	void setOriginalRow() { return call_method<"setOriginalRow", void>(); }
	jni::ref<java::lang::String> getTableName() { return call_method<"getTableName", jni::ref<java::lang::String>>(); }
	void setTableName(jni::ref<java::lang::String> p1) { return call_method<"setTableName", void>(p1); }
	jni::ref<jni::array<jint>> getKeyColumns() { return call_method<"getKeyColumns", jni::ref<jni::array<jint>>>(); }
	void setKeyColumns(jni::ref<jni::array<jint>> p1) { return call_method<"setKeyColumns", void>(p1); }
	jni::ref<javax::sql::RowSet> createShared() { return call_method<"createShared", jni::ref<javax::sql::RowSet>>(); }
	jni::ref<javax::sql::rowset::CachedRowSet> createCopy() { return call_method<"createCopy", jni::ref<javax::sql::rowset::CachedRowSet>>(); }
	jni::ref<javax::sql::rowset::CachedRowSet> createCopySchema() { return call_method<"createCopySchema", jni::ref<javax::sql::rowset::CachedRowSet>>(); }
	jni::ref<javax::sql::rowset::CachedRowSet> createCopyNoConstraints() { return call_method<"createCopyNoConstraints", jni::ref<javax::sql::rowset::CachedRowSet>>(); }
	jni::ref<javax::sql::rowset::RowSetWarning> getRowSetWarnings() { return call_method<"getRowSetWarnings", jni::ref<javax::sql::rowset::RowSetWarning>>(); }
	jboolean getShowDeleted() { return call_method<"getShowDeleted", jboolean>(); }
	void setShowDeleted(jboolean p1) { return call_method<"setShowDeleted", void>(p1); }
	void commit() { return call_method<"commit", void>(); }
	void rollback() { return call_method<"rollback", void>(); }
	void rollback(jni::ref<java::sql::Savepoint> p1) { return call_method<"rollback", void>(p1); }
	void rowSetPopulated(jni::ref<javax::sql::RowSetEvent> p1, jint p2) { return call_method<"rowSetPopulated", void>(p1, p2); }
	void populate(jni::ref<java::sql::ResultSet> p1, jint p2) { return call_method<"populate", void>(p1, p2); }
	void setPageSize(jint p1) { return call_method<"setPageSize", void>(p1); }
	jint getPageSize() { return call_method<"getPageSize", jint>(); }
	jboolean nextPage() { return call_method<"nextPage", jboolean>(); }
	jboolean previousPage() { return call_method<"previousPage", jboolean>(); }

protected:

	CachedRowSet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_CACHEDROWSET
