// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/sql/RowSetMetaData.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_ROWSETMETADATAIMPL_FWD
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_ROWSETMETADATAIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sql::rowset { class RowSetMetaDataImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sql::rowset::RowSetMetaDataImpl>
{
	static constexpr fixed_string class_name = "javax/sql/rowset/RowSetMetaDataImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::sql::RowSetMetaData, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_ROWSETMETADATAIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_ROWSETMETADATAIMPL)
#define SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_ROWSETMETADATAIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sql::rowset::RowSetMetaDataImpl : public jni::object_base<"javax/sql/rowset/RowSetMetaDataImpl",
	java::lang::Object,
	javax::sql::RowSetMetaData,
	java::io::Serializable>
{
public:

	static jni::ref<javax::sql::rowset::RowSetMetaDataImpl> new_object() { return base_::new_object(); }
	void setColumnCount(jint p1) { return call_method<"setColumnCount", void>(p1); }
	void setAutoIncrement(jint p1, jboolean p2) { return call_method<"setAutoIncrement", void>(p1, p2); }
	void setCaseSensitive(jint p1, jboolean p2) { return call_method<"setCaseSensitive", void>(p1, p2); }
	void setSearchable(jint p1, jboolean p2) { return call_method<"setSearchable", void>(p1, p2); }
	void setCurrency(jint p1, jboolean p2) { return call_method<"setCurrency", void>(p1, p2); }
	void setNullable(jint p1, jint p2) { return call_method<"setNullable", void>(p1, p2); }
	void setSigned(jint p1, jboolean p2) { return call_method<"setSigned", void>(p1, p2); }
	void setColumnDisplaySize(jint p1, jint p2) { return call_method<"setColumnDisplaySize", void>(p1, p2); }
	void setColumnLabel(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setColumnLabel", void>(p1, p2); }
	void setColumnName(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setColumnName", void>(p1, p2); }
	void setSchemaName(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setSchemaName", void>(p1, p2); }
	void setPrecision(jint p1, jint p2) { return call_method<"setPrecision", void>(p1, p2); }
	void setScale(jint p1, jint p2) { return call_method<"setScale", void>(p1, p2); }
	void setTableName(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setTableName", void>(p1, p2); }
	void setCatalogName(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setCatalogName", void>(p1, p2); }
	void setColumnType(jint p1, jint p2) { return call_method<"setColumnType", void>(p1, p2); }
	void setColumnTypeName(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setColumnTypeName", void>(p1, p2); }
	jint getColumnCount() { return call_method<"getColumnCount", jint>(); }
	jboolean isAutoIncrement(jint p1) { return call_method<"isAutoIncrement", jboolean>(p1); }
	jboolean isCaseSensitive(jint p1) { return call_method<"isCaseSensitive", jboolean>(p1); }
	jboolean isSearchable(jint p1) { return call_method<"isSearchable", jboolean>(p1); }
	jboolean isCurrency(jint p1) { return call_method<"isCurrency", jboolean>(p1); }
	jint isNullable(jint p1) { return call_method<"isNullable", jint>(p1); }
	jboolean isSigned(jint p1) { return call_method<"isSigned", jboolean>(p1); }
	jint getColumnDisplaySize(jint p1) { return call_method<"getColumnDisplaySize", jint>(p1); }
	jni::ref<java::lang::String> getColumnLabel(jint p1) { return call_method<"getColumnLabel", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getColumnName(jint p1) { return call_method<"getColumnName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getSchemaName(jint p1) { return call_method<"getSchemaName", jni::ref<java::lang::String>>(p1); }
	jint getPrecision(jint p1) { return call_method<"getPrecision", jint>(p1); }
	jint getScale(jint p1) { return call_method<"getScale", jint>(p1); }
	jni::ref<java::lang::String> getTableName(jint p1) { return call_method<"getTableName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getCatalogName(jint p1) { return call_method<"getCatalogName", jni::ref<java::lang::String>>(p1); }
	jint getColumnType(jint p1) { return call_method<"getColumnType", jint>(p1); }
	jni::ref<java::lang::String> getColumnTypeName(jint p1) { return call_method<"getColumnTypeName", jni::ref<java::lang::String>>(p1); }
	jboolean isReadOnly(jint p1) { return call_method<"isReadOnly", jboolean>(p1); }
	jboolean isWritable(jint p1) { return call_method<"isWritable", jboolean>(p1); }
	jboolean isDefinitelyWritable(jint p1) { return call_method<"isDefinitelyWritable", jboolean>(p1); }
	jni::ref<java::lang::String> getColumnClassName(jint p1) { return call_method<"getColumnClassName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Object> unwrap(jni::ref<java::lang::Class> p1) { return call_method<"unwrap", jni::ref<java::lang::Object>>(p1); }
	jboolean isWrapperFor(jni::ref<java::lang::Class> p1) { return call_method<"isWrapperFor", jboolean>(p1); }

protected:

	RowSetMetaDataImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SQL_ROWSET_ROWSETMETADATAIMPL
