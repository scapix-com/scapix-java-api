// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/JTextComponent.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JEDITORPANE_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JEDITORPANE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JEditorPane; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JEditorPane>
{
	static constexpr fixed_string class_name = "javax/swing/JEditorPane";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::JTextComponent>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JEDITORPANE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JEDITORPANE)
#define SCAPIX_JAVA_API_JAVAX_SWING_JEDITORPANE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/swing/event/HyperlinkEvent.h>
#include <scapix/java_api/javax/swing/event/HyperlinkListener.h>
#include <scapix/java_api/javax/swing/text/EditorKit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JEditorPane : public jni::object_base<"javax/swing/JEditorPane",
	javax::swing::text::JTextComponent>
{
public:

	static jni::ref<java::lang::String> W3C_LENGTH_UNITS() { return get_static_field<"W3C_LENGTH_UNITS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> HONOR_DISPLAY_PROPERTIES() { return get_static_field<"HONOR_DISPLAY_PROPERTIES", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::swing::JEditorPane> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JEditorPane> new_object(jni::ref<java::net::URL> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JEditorPane> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JEditorPane> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	void addHyperlinkListener(jni::ref<javax::swing::event::HyperlinkListener> p1) { return call_method<"addHyperlinkListener", void>(p1); }
	void removeHyperlinkListener(jni::ref<javax::swing::event::HyperlinkListener> p1) { return call_method<"removeHyperlinkListener", void>(p1); }
	jni::ref<jni::array<javax::swing::event::HyperlinkListener>> getHyperlinkListeners() { return call_method<"getHyperlinkListeners", jni::ref<jni::array<javax::swing::event::HyperlinkListener>>>(); }
	void fireHyperlinkUpdate(jni::ref<javax::swing::event::HyperlinkEvent> p1) { return call_method<"fireHyperlinkUpdate", void>(p1); }
	void setPage(jni::ref<java::net::URL> p1) { return call_method<"setPage", void>(p1); }
	void read(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::Object> p2) { return call_method<"read", void>(p1, p2); }
	void scrollToReference(jni::ref<java::lang::String> p1) { return call_method<"scrollToReference", void>(p1); }
	jni::ref<java::net::URL> getPage() { return call_method<"getPage", jni::ref<java::net::URL>>(); }
	void setPage(jni::ref<java::lang::String> p1) { return call_method<"setPage", void>(p1); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	jni::ref<javax::swing::text::EditorKit> getEditorKit() { return call_method<"getEditorKit", jni::ref<javax::swing::text::EditorKit>>(); }
	jni::ref<java::lang::String> getContentType() { return call_method<"getContentType", jni::ref<java::lang::String>>(); }
	void setContentType(jni::ref<java::lang::String> p1) { return call_method<"setContentType", void>(p1); }
	void setEditorKit(jni::ref<javax::swing::text::EditorKit> p1) { return call_method<"setEditorKit", void>(p1); }
	jni::ref<javax::swing::text::EditorKit> getEditorKitForContentType(jni::ref<java::lang::String> p1) { return call_method<"getEditorKitForContentType", jni::ref<javax::swing::text::EditorKit>>(p1); }
	void setEditorKitForContentType(jni::ref<java::lang::String> p1, jni::ref<javax::swing::text::EditorKit> p2) { return call_method<"setEditorKitForContentType", void>(p1, p2); }
	void replaceSelection(jni::ref<java::lang::String> p1) { return call_method<"replaceSelection", void>(p1); }
	static jni::ref<javax::swing::text::EditorKit> createEditorKitForContentType(jni::ref<java::lang::String> p1) { return call_static_method<"createEditorKitForContentType", jni::ref<javax::swing::text::EditorKit>>(p1); }
	static void registerEditorKitForContentType(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"registerEditorKitForContentType", void>(p1, p2); }
	static void registerEditorKitForContentType(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::ClassLoader> p3) { return call_static_method<"registerEditorKitForContentType", void>(p1, p2, p3); }
	static jni::ref<java::lang::String> getEditorKitClassNameForContentType(jni::ref<java::lang::String> p1) { return call_static_method<"getEditorKitClassNameForContentType", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::awt::Dimension> getPreferredSize() { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(); }
	void setText(jni::ref<java::lang::String> p1) { return call_method<"setText", void>(p1); }
	jni::ref<java::lang::String> getText() { return call_method<"getText", jni::ref<java::lang::String>>(); }
	jboolean getScrollableTracksViewportWidth() { return call_method<"getScrollableTracksViewportWidth", jboolean>(); }
	jboolean getScrollableTracksViewportHeight() { return call_method<"getScrollableTracksViewportHeight", jboolean>(); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	JEditorPane(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JEDITORPANE
