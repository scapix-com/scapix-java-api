// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/AbstractListModel.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_DEFAULTLISTMODEL_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_DEFAULTLISTMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class DefaultListModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::DefaultListModel>
{
	static constexpr fixed_string class_name = "javax/swing/DefaultListModel";
	using base_classes = std::tuple<scapix::java_api::javax::swing::AbstractListModel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_DEFAULTLISTMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_DEFAULTLISTMODEL)
#define SCAPIX_JAVA_API_JAVAX_SWING_DEFAULTLISTMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::DefaultListModel : public jni::object_base<"javax/swing/DefaultListModel",
	javax::swing::AbstractListModel>
{
public:

	static jni::ref<javax::swing::DefaultListModel> new_object() { return base_::new_object(); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jni::ref<java::lang::Object> getElementAt(jint p1) { return call_method<"getElementAt", jni::ref<java::lang::Object>>(p1); }
	void copyInto(jni::ref<jni::array<java::lang::Object>> p1) { return call_method<"copyInto", void>(p1); }
	void trimToSize() { return call_method<"trimToSize", void>(); }
	void ensureCapacity(jint p1) { return call_method<"ensureCapacity", void>(p1); }
	void setSize(jint p1) { return call_method<"setSize", void>(p1); }
	jint capacity() { return call_method<"capacity", jint>(); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<java::util::Enumeration> elements() { return call_method<"elements", jni::ref<java::util::Enumeration>>(); }
	jboolean contains(jni::ref<java::lang::Object> p1) { return call_method<"contains", jboolean>(p1); }
	jint indexOf(jni::ref<java::lang::Object> p1) { return call_method<"indexOf", jint>(p1); }
	jint indexOf(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"indexOf", jint>(p1, p2); }
	jint lastIndexOf(jni::ref<java::lang::Object> p1) { return call_method<"lastIndexOf", jint>(p1); }
	jint lastIndexOf(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"lastIndexOf", jint>(p1, p2); }
	jni::ref<java::lang::Object> elementAt(jint p1) { return call_method<"elementAt", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> firstElement() { return call_method<"firstElement", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> lastElement() { return call_method<"lastElement", jni::ref<java::lang::Object>>(); }
	void setElementAt(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"setElementAt", void>(p1, p2); }
	void removeElementAt(jint p1) { return call_method<"removeElementAt", void>(p1); }
	void insertElementAt(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"insertElementAt", void>(p1, p2); }
	void addElement(jni::ref<java::lang::Object> p1) { return call_method<"addElement", void>(p1); }
	jboolean removeElement(jni::ref<java::lang::Object> p1) { return call_method<"removeElement", jboolean>(p1); }
	void removeAllElements() { return call_method<"removeAllElements", void>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::lang::Object>> toArray() { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<java::lang::Object> get(jint p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> set(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"set", jni::ref<java::lang::Object>>(p1, p2); }
	void add(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"add", void>(p1, p2); }
	jni::ref<java::lang::Object> remove(jint p1) { return call_method<"remove", jni::ref<java::lang::Object>>(p1); }
	void clear() { return call_method<"clear", void>(); }
	void removeRange(jint p1, jint p2) { return call_method<"removeRange", void>(p1, p2); }

protected:

	DefaultListModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_DEFAULTLISTMODEL
