// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JSPLITPANE_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JSPLITPANE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JSplitPane; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JSplitPane>
{
	static constexpr fixed_string class_name = "javax/swing/JSplitPane";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent, scapix::java_api::javax::accessibility::Accessible>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JSPLITPANE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JSPLITPANE)
#define SCAPIX_JAVA_API_JAVAX_SWING_JSPLITPANE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/swing/plaf/SplitPaneUI.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JSplitPane : public jni::object_base<"javax/swing/JSplitPane",
	javax::swing::JComponent,
	javax::accessibility::Accessible>
{
public:

	static jint VERTICAL_SPLIT() { return get_static_field<"VERTICAL_SPLIT", jint>(); }
	static jint HORIZONTAL_SPLIT() { return get_static_field<"HORIZONTAL_SPLIT", jint>(); }
	static jni::ref<java::lang::String> LEFT() { return get_static_field<"LEFT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RIGHT() { return get_static_field<"RIGHT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TOP() { return get_static_field<"TOP", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BOTTOM() { return get_static_field<"BOTTOM", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DIVIDER() { return get_static_field<"DIVIDER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORIENTATION_PROPERTY() { return get_static_field<"ORIENTATION_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONTINUOUS_LAYOUT_PROPERTY() { return get_static_field<"CONTINUOUS_LAYOUT_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DIVIDER_SIZE_PROPERTY() { return get_static_field<"DIVIDER_SIZE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ONE_TOUCH_EXPANDABLE_PROPERTY() { return get_static_field<"ONE_TOUCH_EXPANDABLE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LAST_DIVIDER_LOCATION_PROPERTY() { return get_static_field<"LAST_DIVIDER_LOCATION_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DIVIDER_LOCATION_PROPERTY() { return get_static_field<"DIVIDER_LOCATION_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RESIZE_WEIGHT_PROPERTY() { return get_static_field<"RESIZE_WEIGHT_PROPERTY", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::swing::JSplitPane> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JSplitPane> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JSplitPane> new_object(jint p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::JSplitPane> new_object(jint p1, jni::ref<java::awt::Component> p2, jni::ref<java::awt::Component> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::swing::JSplitPane> new_object(jint p1, jboolean p2, jni::ref<java::awt::Component> p3, jni::ref<java::awt::Component> p4) { return base_::new_object(p1, p2, p3, p4); }
	void setUI(jni::ref<javax::swing::plaf::SplitPaneUI> p1) { return call_method<"setUI", void>(p1); }
	jni::ref<javax::swing::plaf::SplitPaneUI> getUI() { return call_method<"getUI", jni::ref<javax::swing::plaf::SplitPaneUI>>(); }
	void updateUI() { return call_method<"updateUI", void>(); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	void setDividerSize(jint p1) { return call_method<"setDividerSize", void>(p1); }
	jint getDividerSize() { return call_method<"getDividerSize", jint>(); }
	void setLeftComponent(jni::ref<java::awt::Component> p1) { return call_method<"setLeftComponent", void>(p1); }
	jni::ref<java::awt::Component> getLeftComponent() { return call_method<"getLeftComponent", jni::ref<java::awt::Component>>(); }
	void setTopComponent(jni::ref<java::awt::Component> p1) { return call_method<"setTopComponent", void>(p1); }
	jni::ref<java::awt::Component> getTopComponent() { return call_method<"getTopComponent", jni::ref<java::awt::Component>>(); }
	void setRightComponent(jni::ref<java::awt::Component> p1) { return call_method<"setRightComponent", void>(p1); }
	jni::ref<java::awt::Component> getRightComponent() { return call_method<"getRightComponent", jni::ref<java::awt::Component>>(); }
	void setBottomComponent(jni::ref<java::awt::Component> p1) { return call_method<"setBottomComponent", void>(p1); }
	jni::ref<java::awt::Component> getBottomComponent() { return call_method<"getBottomComponent", jni::ref<java::awt::Component>>(); }
	void setOneTouchExpandable(jboolean p1) { return call_method<"setOneTouchExpandable", void>(p1); }
	jboolean isOneTouchExpandable() { return call_method<"isOneTouchExpandable", jboolean>(); }
	void setLastDividerLocation(jint p1) { return call_method<"setLastDividerLocation", void>(p1); }
	jint getLastDividerLocation() { return call_method<"getLastDividerLocation", jint>(); }
	void setOrientation(jint p1) { return call_method<"setOrientation", void>(p1); }
	jint getOrientation() { return call_method<"getOrientation", jint>(); }
	void setContinuousLayout(jboolean p1) { return call_method<"setContinuousLayout", void>(p1); }
	jboolean isContinuousLayout() { return call_method<"isContinuousLayout", jboolean>(); }
	void setResizeWeight(jdouble p1) { return call_method<"setResizeWeight", void>(p1); }
	jdouble getResizeWeight() { return call_method<"getResizeWeight", jdouble>(); }
	void resetToPreferredSizes() { return call_method<"resetToPreferredSizes", void>(); }
	void setDividerLocation(jdouble p1) { return call_method<"setDividerLocation", void>(p1); }
	void setDividerLocation(jint p1) { return call_method<"setDividerLocation", void>(p1); }
	jint getDividerLocation() { return call_method<"getDividerLocation", jint>(); }
	jint getMinimumDividerLocation() { return call_method<"getMinimumDividerLocation", jint>(); }
	jint getMaximumDividerLocation() { return call_method<"getMaximumDividerLocation", jint>(); }
	void remove(jni::ref<java::awt::Component> p1) { return call_method<"remove", void>(p1); }
	void remove(jint p1) { return call_method<"remove", void>(p1); }
	void removeAll() { return call_method<"removeAll", void>(); }
	jboolean isValidateRoot() { return call_method<"isValidateRoot", jboolean>(); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	JSplitPane(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JSPLITPANE
