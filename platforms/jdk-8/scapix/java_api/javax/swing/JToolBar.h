// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/SwingConstants.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JTOOLBAR_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JTOOLBAR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JToolBar; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JToolBar>
{
	static constexpr fixed_string class_name = "javax/swing/JToolBar";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent, scapix::java_api::javax::swing::SwingConstants, scapix::java_api::javax::accessibility::Accessible>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTOOLBAR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JTOOLBAR)
#define SCAPIX_JAVA_API_JAVAX_SWING_JTOOLBAR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/awt/LayoutManager.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/swing/Action.h>
#include <scapix/java_api/javax/swing/JButton.h>
#include <scapix/java_api/javax/swing/plaf/ToolBarUI.h>
#include <scapix/java_api/javax/swing/JToolBar_Separator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JToolBar : public jni::object_base<"javax/swing/JToolBar",
	javax::swing::JComponent,
	javax::swing::SwingConstants,
	javax::accessibility::Accessible>
{
public:

	using Separator = JToolBar_Separator;

	static jni::ref<javax::swing::JToolBar> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JToolBar> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JToolBar> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JToolBar> new_object(jni::ref<java::lang::String> p1, jint p2) { return base_::new_object(p1, p2); }
	jni::ref<javax::swing::plaf::ToolBarUI> getUI() { return call_method<"getUI", jni::ref<javax::swing::plaf::ToolBarUI>>(); }
	void setUI(jni::ref<javax::swing::plaf::ToolBarUI> p1) { return call_method<"setUI", void>(p1); }
	void updateUI() { return call_method<"updateUI", void>(); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	jint getComponentIndex(jni::ref<java::awt::Component> p1) { return call_method<"getComponentIndex", jint>(p1); }
	jni::ref<java::awt::Component> getComponentAtIndex(jint p1) { return call_method<"getComponentAtIndex", jni::ref<java::awt::Component>>(p1); }
	void setMargin(jni::ref<java::awt::Insets> p1) { return call_method<"setMargin", void>(p1); }
	jni::ref<java::awt::Insets> getMargin() { return call_method<"getMargin", jni::ref<java::awt::Insets>>(); }
	jboolean isBorderPainted() { return call_method<"isBorderPainted", jboolean>(); }
	void setBorderPainted(jboolean p1) { return call_method<"setBorderPainted", void>(p1); }
	jboolean isFloatable() { return call_method<"isFloatable", jboolean>(); }
	void setFloatable(jboolean p1) { return call_method<"setFloatable", void>(p1); }
	jint getOrientation() { return call_method<"getOrientation", jint>(); }
	void setOrientation(jint p1) { return call_method<"setOrientation", void>(p1); }
	void setRollover(jboolean p1) { return call_method<"setRollover", void>(p1); }
	jboolean isRollover() { return call_method<"isRollover", jboolean>(); }
	void addSeparator() { return call_method<"addSeparator", void>(); }
	void addSeparator(jni::ref<java::awt::Dimension> p1) { return call_method<"addSeparator", void>(p1); }
	jni::ref<javax::swing::JButton> add(jni::ref<javax::swing::Action> p1) { return call_method<"add", jni::ref<javax::swing::JButton>>(p1); }
	void setLayout(jni::ref<java::awt::LayoutManager> p1) { return call_method<"setLayout", void>(p1); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	JToolBar(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTOOLBAR
