// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/LayoutManager2.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_GROUPLAYOUT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_GROUPLAYOUT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class GroupLayout; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::GroupLayout>
{
	static constexpr fixed_string class_name = "javax/swing/GroupLayout";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::LayoutManager2>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_GROUPLAYOUT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_GROUPLAYOUT)
#define SCAPIX_JAVA_API_JAVAX_SWING_GROUPLAYOUT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/GroupLayout_Alignment.h>
#include <scapix/java_api/javax/swing/GroupLayout_Group.h>
#include <scapix/java_api/javax/swing/GroupLayout_ParallelGroup.h>
#include <scapix/java_api/javax/swing/GroupLayout_SequentialGroup.h>
#include <scapix/java_api/javax/swing/LayoutStyle.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::GroupLayout : public jni::object_base<"javax/swing/GroupLayout",
	java::lang::Object,
	java::awt::LayoutManager2>
{
public:

	using Alignment = GroupLayout_Alignment;
	using Group = GroupLayout_Group;
	using SequentialGroup = GroupLayout_SequentialGroup;
	using ParallelGroup = GroupLayout_ParallelGroup;

	static jint DEFAULT_SIZE() { return get_static_field<"DEFAULT_SIZE", jint>(); }
	static jint PREFERRED_SIZE() { return get_static_field<"PREFERRED_SIZE", jint>(); }

	static jni::ref<javax::swing::GroupLayout> new_object(jni::ref<java::awt::Container> p1) { return base_::new_object(p1); }
	void setHonorsVisibility(jboolean p1) { return call_method<"setHonorsVisibility", void>(p1); }
	jboolean getHonorsVisibility() { return call_method<"getHonorsVisibility", jboolean>(); }
	void setHonorsVisibility(jni::ref<java::awt::Component> p1, jni::ref<java::lang::Boolean> p2) { return call_method<"setHonorsVisibility", void>(p1, p2); }
	void setAutoCreateGaps(jboolean p1) { return call_method<"setAutoCreateGaps", void>(p1); }
	jboolean getAutoCreateGaps() { return call_method<"getAutoCreateGaps", jboolean>(); }
	void setAutoCreateContainerGaps(jboolean p1) { return call_method<"setAutoCreateContainerGaps", void>(p1); }
	jboolean getAutoCreateContainerGaps() { return call_method<"getAutoCreateContainerGaps", jboolean>(); }
	void setHorizontalGroup(jni::ref<javax::swing::GroupLayout_Group> p1) { return call_method<"setHorizontalGroup", void>(p1); }
	void setVerticalGroup(jni::ref<javax::swing::GroupLayout_Group> p1) { return call_method<"setVerticalGroup", void>(p1); }
	jni::ref<javax::swing::GroupLayout_SequentialGroup> createSequentialGroup() { return call_method<"createSequentialGroup", jni::ref<javax::swing::GroupLayout_SequentialGroup>>(); }
	jni::ref<javax::swing::GroupLayout_ParallelGroup> createParallelGroup() { return call_method<"createParallelGroup", jni::ref<javax::swing::GroupLayout_ParallelGroup>>(); }
	jni::ref<javax::swing::GroupLayout_ParallelGroup> createParallelGroup(jni::ref<javax::swing::GroupLayout_Alignment> p1) { return call_method<"createParallelGroup", jni::ref<javax::swing::GroupLayout_ParallelGroup>>(p1); }
	jni::ref<javax::swing::GroupLayout_ParallelGroup> createParallelGroup(jni::ref<javax::swing::GroupLayout_Alignment> p1, jboolean p2) { return call_method<"createParallelGroup", jni::ref<javax::swing::GroupLayout_ParallelGroup>>(p1, p2); }
	jni::ref<javax::swing::GroupLayout_ParallelGroup> createBaselineGroup(jboolean p1, jboolean p2) { return call_method<"createBaselineGroup", jni::ref<javax::swing::GroupLayout_ParallelGroup>>(p1, p2); }
	void linkSize(jni::ref<jni::array<java::awt::Component>> p1) { return call_method<"linkSize", void>(p1); }
	void linkSize(jint p1, jni::ref<jni::array<java::awt::Component>> p2) { return call_method<"linkSize", void>(p1, p2); }
	void replace(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Component> p2) { return call_method<"replace", void>(p1, p2); }
	void setLayoutStyle(jni::ref<javax::swing::LayoutStyle> p1) { return call_method<"setLayoutStyle", void>(p1); }
	jni::ref<javax::swing::LayoutStyle> getLayoutStyle() { return call_method<"getLayoutStyle", jni::ref<javax::swing::LayoutStyle>>(); }
	void addLayoutComponent(jni::ref<java::lang::String> p1, jni::ref<java::awt::Component> p2) { return call_method<"addLayoutComponent", void>(p1, p2); }
	void removeLayoutComponent(jni::ref<java::awt::Component> p1) { return call_method<"removeLayoutComponent", void>(p1); }
	jni::ref<java::awt::Dimension> preferredLayoutSize(jni::ref<java::awt::Container> p1) { return call_method<"preferredLayoutSize", jni::ref<java::awt::Dimension>>(p1); }
	jni::ref<java::awt::Dimension> minimumLayoutSize(jni::ref<java::awt::Container> p1) { return call_method<"minimumLayoutSize", jni::ref<java::awt::Dimension>>(p1); }
	void layoutContainer(jni::ref<java::awt::Container> p1) { return call_method<"layoutContainer", void>(p1); }
	void addLayoutComponent(jni::ref<java::awt::Component> p1, jni::ref<java::lang::Object> p2) { return call_method<"addLayoutComponent", void>(p1, p2); }
	jni::ref<java::awt::Dimension> maximumLayoutSize(jni::ref<java::awt::Container> p1) { return call_method<"maximumLayoutSize", jni::ref<java::awt::Dimension>>(p1); }
	jfloat getLayoutAlignmentX(jni::ref<java::awt::Container> p1) { return call_method<"getLayoutAlignmentX", jfloat>(p1); }
	jfloat getLayoutAlignmentY(jni::ref<java::awt::Container> p1) { return call_method<"getLayoutAlignmentY", jfloat>(p1); }
	void invalidateLayout(jni::ref<java::awt::Container> p1) { return call_method<"invalidateLayout", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	GroupLayout(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_GROUPLAYOUT
