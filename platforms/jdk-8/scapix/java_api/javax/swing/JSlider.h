// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/SwingConstants.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JSLIDER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JSLIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JSlider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JSlider>
{
	static constexpr fixed_string class_name = "javax/swing/JSlider";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent, scapix::java_api::javax::swing::SwingConstants, scapix::java_api::javax::accessibility::Accessible>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JSLIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JSLIDER)
#define SCAPIX_JAVA_API_JAVAX_SWING_JSLIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Dictionary.h>
#include <scapix/java_api/java/util/Hashtable.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/swing/BoundedRangeModel.h>
#include <scapix/java_api/javax/swing/event/ChangeListener.h>
#include <scapix/java_api/javax/swing/plaf/SliderUI.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JSlider : public jni::object_base<"javax/swing/JSlider",
	javax::swing::JComponent,
	javax::swing::SwingConstants,
	javax::accessibility::Accessible>
{
public:

	static jni::ref<javax::swing::JSlider> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JSlider> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JSlider> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::JSlider> new_object(jint p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::swing::JSlider> new_object(jint p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<javax::swing::JSlider> new_object(jni::ref<javax::swing::BoundedRangeModel> p1) { return base_::new_object(p1); }
	jni::ref<javax::swing::plaf::SliderUI> getUI() { return call_method<"getUI", jni::ref<javax::swing::plaf::SliderUI>>(); }
	void setUI(jni::ref<javax::swing::plaf::SliderUI> p1) { return call_method<"setUI", void>(p1); }
	void updateUI() { return call_method<"updateUI", void>(); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	void addChangeListener(jni::ref<javax::swing::event::ChangeListener> p1) { return call_method<"addChangeListener", void>(p1); }
	void removeChangeListener(jni::ref<javax::swing::event::ChangeListener> p1) { return call_method<"removeChangeListener", void>(p1); }
	jni::ref<jni::array<javax::swing::event::ChangeListener>> getChangeListeners() { return call_method<"getChangeListeners", jni::ref<jni::array<javax::swing::event::ChangeListener>>>(); }
	jni::ref<javax::swing::BoundedRangeModel> getModel() { return call_method<"getModel", jni::ref<javax::swing::BoundedRangeModel>>(); }
	void setModel(jni::ref<javax::swing::BoundedRangeModel> p1) { return call_method<"setModel", void>(p1); }
	jint getValue() { return call_method<"getValue", jint>(); }
	void setValue(jint p1) { return call_method<"setValue", void>(p1); }
	jint getMinimum() { return call_method<"getMinimum", jint>(); }
	void setMinimum(jint p1) { return call_method<"setMinimum", void>(p1); }
	jint getMaximum() { return call_method<"getMaximum", jint>(); }
	void setMaximum(jint p1) { return call_method<"setMaximum", void>(p1); }
	jboolean getValueIsAdjusting() { return call_method<"getValueIsAdjusting", jboolean>(); }
	void setValueIsAdjusting(jboolean p1) { return call_method<"setValueIsAdjusting", void>(p1); }
	jint getExtent() { return call_method<"getExtent", jint>(); }
	void setExtent(jint p1) { return call_method<"setExtent", void>(p1); }
	jint getOrientation() { return call_method<"getOrientation", jint>(); }
	void setOrientation(jint p1) { return call_method<"setOrientation", void>(p1); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	jboolean imageUpdate(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"imageUpdate", jboolean>(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::util::Dictionary> getLabelTable() { return call_method<"getLabelTable", jni::ref<java::util::Dictionary>>(); }
	void setLabelTable(jni::ref<java::util::Dictionary> p1) { return call_method<"setLabelTable", void>(p1); }
	jni::ref<java::util::Hashtable> createStandardLabels(jint p1) { return call_method<"createStandardLabels", jni::ref<java::util::Hashtable>>(p1); }
	jni::ref<java::util::Hashtable> createStandardLabels(jint p1, jint p2) { return call_method<"createStandardLabels", jni::ref<java::util::Hashtable>>(p1, p2); }
	jboolean getInverted() { return call_method<"getInverted", jboolean>(); }
	void setInverted(jboolean p1) { return call_method<"setInverted", void>(p1); }
	jint getMajorTickSpacing() { return call_method<"getMajorTickSpacing", jint>(); }
	void setMajorTickSpacing(jint p1) { return call_method<"setMajorTickSpacing", void>(p1); }
	jint getMinorTickSpacing() { return call_method<"getMinorTickSpacing", jint>(); }
	void setMinorTickSpacing(jint p1) { return call_method<"setMinorTickSpacing", void>(p1); }
	jboolean getSnapToTicks() { return call_method<"getSnapToTicks", jboolean>(); }
	void setSnapToTicks(jboolean p1) { return call_method<"setSnapToTicks", void>(p1); }
	jboolean getPaintTicks() { return call_method<"getPaintTicks", jboolean>(); }
	void setPaintTicks(jboolean p1) { return call_method<"setPaintTicks", void>(p1); }
	jboolean getPaintTrack() { return call_method<"getPaintTrack", jboolean>(); }
	void setPaintTrack(jboolean p1) { return call_method<"setPaintTrack", void>(p1); }
	jboolean getPaintLabels() { return call_method<"getPaintLabels", jboolean>(); }
	void setPaintLabels(jboolean p1) { return call_method<"setPaintLabels", void>(p1); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	JSlider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JSLIDER
