// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/border/AbstractBorder.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_BORDER_BEVELBORDER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_BORDER_BEVELBORDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::border { class BevelBorder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::border::BevelBorder>
{
	static constexpr fixed_string class_name = "javax/swing/border/BevelBorder";
	using base_classes = std::tuple<scapix::java_api::javax::swing::border::AbstractBorder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_BORDER_BEVELBORDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_BORDER_BEVELBORDER)
#define SCAPIX_JAVA_API_JAVAX_SWING_BORDER_BEVELBORDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Insets.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::border::BevelBorder : public jni::object_base<"javax/swing/border/BevelBorder",
	javax::swing::border::AbstractBorder>
{
public:

	static jint RAISED() { return get_static_field<"RAISED", jint>(); }
	static jint LOWERED() { return get_static_field<"LOWERED", jint>(); }

	static jni::ref<javax::swing::border::BevelBorder> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::border::BevelBorder> new_object(jint p1, jni::ref<java::awt::Color> p2, jni::ref<java::awt::Color> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::swing::border::BevelBorder> new_object(jint p1, jni::ref<java::awt::Color> p2, jni::ref<java::awt::Color> p3, jni::ref<java::awt::Color> p4, jni::ref<java::awt::Color> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	void paintBorder(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Graphics> p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"paintBorder", void>(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::awt::Insets> getBorderInsets(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Insets> p2) { return call_method<"getBorderInsets", jni::ref<java::awt::Insets>>(p1, p2); }
	jni::ref<java::awt::Color> getHighlightOuterColor(jni::ref<java::awt::Component> p1) { return call_method<"getHighlightOuterColor", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getHighlightInnerColor(jni::ref<java::awt::Component> p1) { return call_method<"getHighlightInnerColor", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getShadowInnerColor(jni::ref<java::awt::Component> p1) { return call_method<"getShadowInnerColor", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getShadowOuterColor(jni::ref<java::awt::Component> p1) { return call_method<"getShadowOuterColor", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getHighlightOuterColor() { return call_method<"getHighlightOuterColor", jni::ref<java::awt::Color>>(); }
	jni::ref<java::awt::Color> getHighlightInnerColor() { return call_method<"getHighlightInnerColor", jni::ref<java::awt::Color>>(); }
	jni::ref<java::awt::Color> getShadowInnerColor() { return call_method<"getShadowInnerColor", jni::ref<java::awt::Color>>(); }
	jni::ref<java::awt::Color> getShadowOuterColor() { return call_method<"getShadowOuterColor", jni::ref<java::awt::Color>>(); }
	jint getBevelType() { return call_method<"getBevelType", jint>(); }
	jboolean isBorderOpaque() { return call_method<"isBorderOpaque", jboolean>(); }

protected:

	BevelBorder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_BORDER_BEVELBORDER
