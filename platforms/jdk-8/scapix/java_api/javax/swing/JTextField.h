// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/JTextComponent.h>
#include <scapix/java_api/javax/swing/SwingConstants.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JTEXTFIELD_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JTEXTFIELD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JTextField; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JTextField>
{
	static constexpr fixed_string class_name = "javax/swing/JTextField";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::JTextComponent, scapix::java_api::javax::swing::SwingConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTEXTFIELD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JTEXTFIELD)
#define SCAPIX_JAVA_API_JAVAX_SWING_JTEXTFIELD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/event/ActionListener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/swing/Action.h>
#include <scapix/java_api/javax/swing/BoundedRangeModel.h>
#include <scapix/java_api/javax/swing/text/Document.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JTextField : public jni::object_base<"javax/swing/JTextField",
	javax::swing::text::JTextComponent,
	javax::swing::SwingConstants>
{
public:

	static jni::ref<java::lang::String> notifyAction() { return get_static_field<"notifyAction", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::swing::JTextField> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JTextField> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JTextField> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JTextField> new_object(jni::ref<java::lang::String> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::JTextField> new_object(jni::ref<javax::swing::text::Document> p1, jni::ref<java::lang::String> p2, jint p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	void setDocument(jni::ref<javax::swing::text::Document> p1) { return call_method<"setDocument", void>(p1); }
	jboolean isValidateRoot() { return call_method<"isValidateRoot", jboolean>(); }
	jint getHorizontalAlignment() { return call_method<"getHorizontalAlignment", jint>(); }
	void setHorizontalAlignment(jint p1) { return call_method<"setHorizontalAlignment", void>(p1); }
	jint getColumns() { return call_method<"getColumns", jint>(); }
	void setColumns(jint p1) { return call_method<"setColumns", void>(p1); }
	jni::ref<java::awt::Dimension> getPreferredSize() { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	void addActionListener(jni::ref<java::awt::event::ActionListener> p1) { return call_method<"addActionListener", void>(p1); }
	void removeActionListener(jni::ref<java::awt::event::ActionListener> p1) { return call_method<"removeActionListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::ActionListener>> getActionListeners() { return call_method<"getActionListeners", jni::ref<jni::array<java::awt::event::ActionListener>>>(); }
	void setActionCommand(jni::ref<java::lang::String> p1) { return call_method<"setActionCommand", void>(p1); }
	void setAction(jni::ref<javax::swing::Action> p1) { return call_method<"setAction", void>(p1); }
	jni::ref<javax::swing::Action> getAction() { return call_method<"getAction", jni::ref<javax::swing::Action>>(); }
	jni::ref<jni::array<javax::swing::Action>> getActions() { return call_method<"getActions", jni::ref<jni::array<javax::swing::Action>>>(); }
	void postActionEvent() { return call_method<"postActionEvent", void>(); }
	jni::ref<javax::swing::BoundedRangeModel> getHorizontalVisibility() { return call_method<"getHorizontalVisibility", jni::ref<javax::swing::BoundedRangeModel>>(); }
	jint getScrollOffset() { return call_method<"getScrollOffset", jint>(); }
	void setScrollOffset(jint p1) { return call_method<"setScrollOffset", void>(p1); }
	void scrollRectToVisible(jni::ref<java::awt::Rectangle> p1) { return call_method<"scrollRectToVisible", void>(p1); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	JTextField(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTEXTFIELD
