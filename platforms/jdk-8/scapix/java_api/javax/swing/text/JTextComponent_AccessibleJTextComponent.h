// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent_AccessibleJComponent.h>
#include <scapix/java_api/javax/accessibility/AccessibleText.h>
#include <scapix/java_api/javax/swing/event/CaretListener.h>
#include <scapix/java_api/javax/swing/event/DocumentListener.h>
#include <scapix/java_api/javax/accessibility/AccessibleAction.h>
#include <scapix/java_api/javax/accessibility/AccessibleEditableText.h>
#include <scapix/java_api/javax/accessibility/AccessibleExtendedText.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_ACCESSIBLEJTEXTCOMPONENT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_ACCESSIBLEJTEXTCOMPONENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class JTextComponent_AccessibleJTextComponent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::JTextComponent_AccessibleJTextComponent>
{
	static constexpr fixed_string class_name = "javax/swing/text/JTextComponent$AccessibleJTextComponent";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent_AccessibleJComponent, scapix::java_api::javax::accessibility::AccessibleText, scapix::java_api::javax::swing::event::CaretListener, scapix::java_api::javax::swing::event::DocumentListener, scapix::java_api::javax::accessibility::AccessibleAction, scapix::java_api::javax::accessibility::AccessibleEditableText, scapix::java_api::javax::accessibility::AccessibleExtendedText>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_ACCESSIBLEJTEXTCOMPONENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_ACCESSIBLEJTEXTCOMPONENT)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_ACCESSIBLEJTEXTCOMPONENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleRole.h>
#include <scapix/java_api/javax/accessibility/AccessibleStateSet.h>
#include <scapix/java_api/javax/accessibility/AccessibleTextSequence.h>
#include <scapix/java_api/javax/swing/event/CaretEvent.h>
#include <scapix/java_api/javax/swing/event/DocumentEvent.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/JTextComponent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::JTextComponent_AccessibleJTextComponent : public jni::object_base<"javax/swing/text/JTextComponent$AccessibleJTextComponent",
	javax::swing::JComponent_AccessibleJComponent,
	javax::accessibility::AccessibleText,
	javax::swing::event::CaretListener,
	javax::swing::event::DocumentListener,
	javax::accessibility::AccessibleAction,
	javax::accessibility::AccessibleEditableText,
	javax::accessibility::AccessibleExtendedText>
{
public:

	static jni::ref<javax::swing::text::JTextComponent_AccessibleJTextComponent> new_object(jni::ref<javax::swing::text::JTextComponent> p1) { return base_::new_object(p1); }
	void caretUpdate(jni::ref<javax::swing::event::CaretEvent> p1) { return call_method<"caretUpdate", void>(p1); }
	void insertUpdate(jni::ref<javax::swing::event::DocumentEvent> p1) { return call_method<"insertUpdate", void>(p1); }
	void removeUpdate(jni::ref<javax::swing::event::DocumentEvent> p1) { return call_method<"removeUpdate", void>(p1); }
	void changedUpdate(jni::ref<javax::swing::event::DocumentEvent> p1) { return call_method<"changedUpdate", void>(p1); }
	jni::ref<javax::accessibility::AccessibleStateSet> getAccessibleStateSet() { return call_method<"getAccessibleStateSet", jni::ref<javax::accessibility::AccessibleStateSet>>(); }
	jni::ref<javax::accessibility::AccessibleRole> getAccessibleRole() { return call_method<"getAccessibleRole", jni::ref<javax::accessibility::AccessibleRole>>(); }
	jni::ref<javax::accessibility::AccessibleText> getAccessibleText() { return call_method<"getAccessibleText", jni::ref<javax::accessibility::AccessibleText>>(); }
	jint getIndexAtPoint(jni::ref<java::awt::Point> p1) { return call_method<"getIndexAtPoint", jint>(p1); }
	jni::ref<java::awt::Rectangle> getCharacterBounds(jint p1) { return call_method<"getCharacterBounds", jni::ref<java::awt::Rectangle>>(p1); }
	jint getCharCount() { return call_method<"getCharCount", jint>(); }
	jint getCaretPosition() { return call_method<"getCaretPosition", jint>(); }
	jni::ref<javax::swing::text::AttributeSet> getCharacterAttribute(jint p1) { return call_method<"getCharacterAttribute", jni::ref<javax::swing::text::AttributeSet>>(p1); }
	jint getSelectionStart() { return call_method<"getSelectionStart", jint>(); }
	jint getSelectionEnd() { return call_method<"getSelectionEnd", jint>(); }
	jni::ref<java::lang::String> getSelectedText() { return call_method<"getSelectedText", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAtIndex(jint p1, jint p2) { return call_method<"getAtIndex", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getAfterIndex(jint p1, jint p2) { return call_method<"getAfterIndex", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getBeforeIndex(jint p1, jint p2) { return call_method<"getBeforeIndex", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<javax::accessibility::AccessibleEditableText> getAccessibleEditableText() { return call_method<"getAccessibleEditableText", jni::ref<javax::accessibility::AccessibleEditableText>>(); }
	void setTextContents(jni::ref<java::lang::String> p1) { return call_method<"setTextContents", void>(p1); }
	void insertTextAtIndex(jint p1, jni::ref<java::lang::String> p2) { return call_method<"insertTextAtIndex", void>(p1, p2); }
	jni::ref<java::lang::String> getTextRange(jint p1, jint p2) { return call_method<"getTextRange", jni::ref<java::lang::String>>(p1, p2); }
	void delete_(jint p1, jint p2) { return call_method<"delete", void>(p1, p2); }
	void cut(jint p1, jint p2) { return call_method<"cut", void>(p1, p2); }
	void paste(jint p1) { return call_method<"paste", void>(p1); }
	void replaceText(jint p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"replaceText", void>(p1, p2, p3); }
	void selectText(jint p1, jint p2) { return call_method<"selectText", void>(p1, p2); }
	void setAttributes(jint p1, jint p2, jni::ref<javax::swing::text::AttributeSet> p3) { return call_method<"setAttributes", void>(p1, p2, p3); }
	jni::ref<javax::accessibility::AccessibleTextSequence> getTextSequenceAt(jint p1, jint p2) { return call_method<"getTextSequenceAt", jni::ref<javax::accessibility::AccessibleTextSequence>>(p1, p2); }
	jni::ref<javax::accessibility::AccessibleTextSequence> getTextSequenceAfter(jint p1, jint p2) { return call_method<"getTextSequenceAfter", jni::ref<javax::accessibility::AccessibleTextSequence>>(p1, p2); }
	jni::ref<javax::accessibility::AccessibleTextSequence> getTextSequenceBefore(jint p1, jint p2) { return call_method<"getTextSequenceBefore", jni::ref<javax::accessibility::AccessibleTextSequence>>(p1, p2); }
	jni::ref<java::awt::Rectangle> getTextBounds(jint p1, jint p2) { return call_method<"getTextBounds", jni::ref<java::awt::Rectangle>>(p1, p2); }
	jni::ref<javax::accessibility::AccessibleAction> getAccessibleAction() { return call_method<"getAccessibleAction", jni::ref<javax::accessibility::AccessibleAction>>(); }
	jint getAccessibleActionCount() { return call_method<"getAccessibleActionCount", jint>(); }
	jni::ref<java::lang::String> getAccessibleActionDescription(jint p1) { return call_method<"getAccessibleActionDescription", jni::ref<java::lang::String>>(p1); }
	jboolean doAccessibleAction(jint p1) { return call_method<"doAccessibleAction", jboolean>(p1); }

protected:

	JTextComponent_AccessibleJTextComponent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_ACCESSIBLEJTEXTCOMPONENT
