// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/swing/SwingConstants.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_VIEW_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_VIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class View; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::View>
{
	static constexpr fixed_string class_name = "javax/swing/text/View";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::swing::SwingConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_VIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_VIEW)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_VIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/event/DocumentEvent.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/Document.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/Position_Bias.h>
#include <scapix/java_api/javax/swing/text/ViewFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::View : public jni::object_base<"javax/swing/text/View",
	java::lang::Object,
	javax::swing::SwingConstants>
{
public:

	static jint BadBreakWeight() { return get_static_field<"BadBreakWeight", jint>(); }
	static jint GoodBreakWeight() { return get_static_field<"GoodBreakWeight", jint>(); }
	static jint ExcellentBreakWeight() { return get_static_field<"ExcellentBreakWeight", jint>(); }
	static jint ForcedBreakWeight() { return get_static_field<"ForcedBreakWeight", jint>(); }
	static jint X_AXIS() { return get_static_field<"X_AXIS", jint>(); }
	static jint Y_AXIS() { return get_static_field<"Y_AXIS", jint>(); }

	static jni::ref<javax::swing::text::View> new_object(jni::ref<javax::swing::text::Element> p1) { return base_::new_object(p1); }
	jni::ref<javax::swing::text::View> getParent() { return call_method<"getParent", jni::ref<javax::swing::text::View>>(); }
	jboolean isVisible() { return call_method<"isVisible", jboolean>(); }
	jfloat getPreferredSpan(jint p1) { return call_method<"getPreferredSpan", jfloat>(p1); }
	jfloat getMinimumSpan(jint p1) { return call_method<"getMinimumSpan", jfloat>(p1); }
	jfloat getMaximumSpan(jint p1) { return call_method<"getMaximumSpan", jfloat>(p1); }
	void preferenceChanged(jni::ref<javax::swing::text::View> p1, jboolean p2, jboolean p3) { return call_method<"preferenceChanged", void>(p1, p2, p3); }
	jfloat getAlignment(jint p1) { return call_method<"getAlignment", jfloat>(p1); }
	void paint(jni::ref<java::awt::Graphics> p1, jni::ref<java::awt::Shape> p2) { return call_method<"paint", void>(p1, p2); }
	void setParent(jni::ref<javax::swing::text::View> p1) { return call_method<"setParent", void>(p1); }
	jint getViewCount() { return call_method<"getViewCount", jint>(); }
	jni::ref<javax::swing::text::View> getView(jint p1) { return call_method<"getView", jni::ref<javax::swing::text::View>>(p1); }
	void removeAll() { return call_method<"removeAll", void>(); }
	void remove(jint p1) { return call_method<"remove", void>(p1); }
	void insert(jint p1, jni::ref<javax::swing::text::View> p2) { return call_method<"insert", void>(p1, p2); }
	void append(jni::ref<javax::swing::text::View> p1) { return call_method<"append", void>(p1); }
	void replace(jint p1, jint p2, jni::ref<jni::array<javax::swing::text::View>> p3) { return call_method<"replace", void>(p1, p2, p3); }
	jint getViewIndex(jint p1, jni::ref<javax::swing::text::Position_Bias> p2) { return call_method<"getViewIndex", jint>(p1, p2); }
	jni::ref<java::awt::Shape> getChildAllocation(jint p1, jni::ref<java::awt::Shape> p2) { return call_method<"getChildAllocation", jni::ref<java::awt::Shape>>(p1, p2); }
	jint getNextVisualPositionFrom(jint p1, jni::ref<javax::swing::text::Position_Bias> p2, jni::ref<java::awt::Shape> p3, jint p4, jni::ref<jni::array<javax::swing::text::Position_Bias>> p5) { return call_method<"getNextVisualPositionFrom", jint>(p1, p2, p3, p4, p5); }
	jni::ref<java::awt::Shape> modelToView(jint p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::Position_Bias> p3) { return call_method<"modelToView", jni::ref<java::awt::Shape>>(p1, p2, p3); }
	jni::ref<java::awt::Shape> modelToView(jint p1, jni::ref<javax::swing::text::Position_Bias> p2, jint p3, jni::ref<javax::swing::text::Position_Bias> p4, jni::ref<java::awt::Shape> p5) { return call_method<"modelToView", jni::ref<java::awt::Shape>>(p1, p2, p3, p4, p5); }
	jint viewToModel(jfloat p1, jfloat p2, jni::ref<java::awt::Shape> p3, jni::ref<jni::array<javax::swing::text::Position_Bias>> p4) { return call_method<"viewToModel", jint>(p1, p2, p3, p4); }
	void insertUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"insertUpdate", void>(p1, p2, p3); }
	void removeUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"removeUpdate", void>(p1, p2, p3); }
	void changedUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"changedUpdate", void>(p1, p2, p3); }
	jni::ref<javax::swing::text::Document> getDocument() { return call_method<"getDocument", jni::ref<javax::swing::text::Document>>(); }
	jint getStartOffset() { return call_method<"getStartOffset", jint>(); }
	jint getEndOffset() { return call_method<"getEndOffset", jint>(); }
	jni::ref<javax::swing::text::Element> getElement() { return call_method<"getElement", jni::ref<javax::swing::text::Element>>(); }
	jni::ref<java::awt::Graphics> getGraphics() { return call_method<"getGraphics", jni::ref<java::awt::Graphics>>(); }
	jni::ref<javax::swing::text::AttributeSet> getAttributes() { return call_method<"getAttributes", jni::ref<javax::swing::text::AttributeSet>>(); }
	jni::ref<javax::swing::text::View> breakView(jint p1, jint p2, jfloat p3, jfloat p4) { return call_method<"breakView", jni::ref<javax::swing::text::View>>(p1, p2, p3, p4); }
	jni::ref<javax::swing::text::View> createFragment(jint p1, jint p2) { return call_method<"createFragment", jni::ref<javax::swing::text::View>>(p1, p2); }
	jint getBreakWeight(jint p1, jfloat p2, jfloat p3) { return call_method<"getBreakWeight", jint>(p1, p2, p3); }
	jint getResizeWeight(jint p1) { return call_method<"getResizeWeight", jint>(p1); }
	void setSize(jfloat p1, jfloat p2) { return call_method<"setSize", void>(p1, p2); }
	jni::ref<java::awt::Container> getContainer() { return call_method<"getContainer", jni::ref<java::awt::Container>>(); }
	jni::ref<javax::swing::text::ViewFactory> getViewFactory() { return call_method<"getViewFactory", jni::ref<javax::swing::text::ViewFactory>>(); }
	jni::ref<java::lang::String> getToolTipText(jfloat p1, jfloat p2, jni::ref<java::awt::Shape> p3) { return call_method<"getToolTipText", jni::ref<java::lang::String>>(p1, p2, p3); }
	jint getViewIndex(jfloat p1, jfloat p2, jni::ref<java::awt::Shape> p3) { return call_method<"getViewIndex", jint>(p1, p2, p3); }
	jni::ref<java::awt::Shape> modelToView(jint p1, jni::ref<java::awt::Shape> p2) { return call_method<"modelToView", jni::ref<java::awt::Shape>>(p1, p2); }
	jint viewToModel(jfloat p1, jfloat p2, jni::ref<java::awt::Shape> p3) { return call_method<"viewToModel", jint>(p1, p2, p3); }

protected:

	View(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_VIEW
