// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/AsyncBoxView.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ZONEVIEW_ZONE_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ZONEVIEW_ZONE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class ZoneView_Zone; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::ZoneView_Zone>
{
	static constexpr fixed_string class_name = "javax/swing/text/ZoneView$Zone";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::AsyncBoxView>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ZONEVIEW_ZONE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ZONEVIEW_ZONE)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ZONEVIEW_ZONE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/javax/swing/event/DocumentEvent.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/Position.h>
#include <scapix/java_api/javax/swing/text/Position_Bias.h>
#include <scapix/java_api/javax/swing/text/ViewFactory.h>
#include <scapix/java_api/javax/swing/text/ZoneView.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class javax::swing::text::ZoneView_Zone : public jni::object_base<"javax/swing/text/ZoneView$Zone",
	javax::swing::text::AsyncBoxView>
{
public:

	static jni::ref<javax::swing::text::ZoneView_Zone> new_object(jni::ref<javax::swing::text::ZoneView> p1, jni::ref<javax::swing::text::Element> p2, jni::ref<javax::swing::text::Position> p3, jni::ref<javax::swing::text::Position> p4) { return base_::new_object(p1, p2, p3, p4); }
	void load() { return call_method<"load", void>(); }
	void unload() { return call_method<"unload", void>(); }
	jboolean isLoaded() { return call_method<"isLoaded", jboolean>(); }
	jint getViewIndex(jint p1, jni::ref<javax::swing::text::Position_Bias> p2) { return call_method<"getViewIndex", jint>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> getAttributes() { return call_method<"getAttributes", jni::ref<javax::swing::text::AttributeSet>>(); }
	void paint(jni::ref<java::awt::Graphics> p1, jni::ref<java::awt::Shape> p2) { return call_method<"paint", void>(p1, p2); }
	jint viewToModel(jfloat p1, jfloat p2, jni::ref<java::awt::Shape> p3, jni::ref<jni::array<javax::swing::text::Position_Bias>> p4) { return call_method<"viewToModel", jint>(p1, p2, p3, p4); }
	jni::ref<java::awt::Shape> modelToView(jint p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::Position_Bias> p3) { return call_method<"modelToView", jni::ref<java::awt::Shape>>(p1, p2, p3); }
	jint getStartOffset() { return call_method<"getStartOffset", jint>(); }
	jint getEndOffset() { return call_method<"getEndOffset", jint>(); }
	void insertUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"insertUpdate", void>(p1, p2, p3); }
	void removeUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"removeUpdate", void>(p1, p2, p3); }
	void changedUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"changedUpdate", void>(p1, p2, p3); }

protected:

	ZoneView_Zone(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ZONEVIEW_ZONE
