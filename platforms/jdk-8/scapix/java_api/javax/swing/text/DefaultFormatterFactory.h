// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JFormattedTextField_AbstractFormatterFactory.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTERFACTORY_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTERFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class DefaultFormatterFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::DefaultFormatterFactory>
{
	static constexpr fixed_string class_name = "javax/swing/text/DefaultFormatterFactory";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JFormattedTextField_AbstractFormatterFactory, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTERFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTERFACTORY)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTERFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/javax/swing/JFormattedTextField.h>
#include <scapix/java_api/javax/swing/JFormattedTextField_AbstractFormatter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::DefaultFormatterFactory : public jni::object_base<"javax/swing/text/DefaultFormatterFactory",
	javax::swing::JFormattedTextField_AbstractFormatterFactory,
	java::io::Serializable>
{
public:

	static jni::ref<javax::swing::text::DefaultFormatterFactory> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::text::DefaultFormatterFactory> new_object(jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::text::DefaultFormatterFactory> new_object(jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p1, jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::text::DefaultFormatterFactory> new_object(jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p1, jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p2, jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::swing::text::DefaultFormatterFactory> new_object(jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p1, jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p2, jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p3, jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p4) { return base_::new_object(p1, p2, p3, p4); }
	void setDefaultFormatter(jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p1) { return call_method<"setDefaultFormatter", void>(p1); }
	jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> getDefaultFormatter() { return call_method<"getDefaultFormatter", jni::ref<javax::swing::JFormattedTextField_AbstractFormatter>>(); }
	void setDisplayFormatter(jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p1) { return call_method<"setDisplayFormatter", void>(p1); }
	jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> getDisplayFormatter() { return call_method<"getDisplayFormatter", jni::ref<javax::swing::JFormattedTextField_AbstractFormatter>>(); }
	void setEditFormatter(jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p1) { return call_method<"setEditFormatter", void>(p1); }
	jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> getEditFormatter() { return call_method<"getEditFormatter", jni::ref<javax::swing::JFormattedTextField_AbstractFormatter>>(); }
	void setNullFormatter(jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> p1) { return call_method<"setNullFormatter", void>(p1); }
	jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> getNullFormatter() { return call_method<"getNullFormatter", jni::ref<javax::swing::JFormattedTextField_AbstractFormatter>>(); }
	jni::ref<javax::swing::JFormattedTextField_AbstractFormatter> getFormatter(jni::ref<javax::swing::JFormattedTextField> p1) { return call_method<"getFormatter", jni::ref<javax::swing::JFormattedTextField_AbstractFormatter>>(p1); }

protected:

	DefaultFormatterFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTERFACTORY
