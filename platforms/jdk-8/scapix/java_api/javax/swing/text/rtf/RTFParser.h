// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/rtf/AbstractFilter.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFPARSER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFPARSER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::rtf { class RTFParser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::rtf::RTFParser>
{
	static constexpr fixed_string class_name = "javax/swing/text/rtf/RTFParser";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::rtf::AbstractFilter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFPARSER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFPARSER)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFPARSER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class javax::swing::text::rtf::RTFParser : public jni::object_base<"javax/swing/text/rtf/RTFParser",
	javax::swing::text::rtf::AbstractFilter>
{
public:

	jint level() { return get_field<"level", jint>(); }
	void level(jint v) { set_field<"level", jint>(v); }

	jboolean handleKeyword(jni::ref<java::lang::String> p1) { return call_method<"handleKeyword", jboolean>(p1); }
	jboolean handleKeyword(jni::ref<java::lang::String> p1, jint p2) { return call_method<"handleKeyword", jboolean>(p1, p2); }
	void handleText(jni::ref<java::lang::String> p1) { return call_method<"handleText", void>(p1); }
	void handleText(jchar p1) { return call_method<"handleText", void>(p1); }
	void handleBinaryBlob(jni::ref<jni::array<jbyte>> p1) { return call_method<"handleBinaryBlob", void>(p1); }
	void begingroup() { return call_method<"begingroup", void>(); }
	void endgroup() { return call_method<"endgroup", void>(); }
	static jni::ref<javax::swing::text::rtf::RTFParser> new_object() { return base_::new_object(); }
	void writeSpecial(jint p1) { return call_method<"writeSpecial", void>(p1); }
	void write(jni::ref<java::lang::String> p1) { return call_method<"write", void>(p1); }
	void write(jchar p1) { return call_method<"write", void>(p1); }
	void flush() { return call_method<"flush", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	RTFParser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFPARSER
