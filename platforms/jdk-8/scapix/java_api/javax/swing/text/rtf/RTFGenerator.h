// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFGENERATOR_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFGENERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::rtf { class RTFGenerator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::rtf::RTFGenerator>
{
	static constexpr fixed_string class_name = "javax/swing/text/rtf/RTFGenerator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFGENERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFGENERATOR)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFGENERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/text/Document.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/Segment.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class javax::swing::text::rtf::RTFGenerator : public jni::object_base<"javax/swing/text/rtf/RTFGenerator",
	java::lang::Object>
{
public:

	static jni::ref<java::awt::Color> defaultRTFColor() { return get_static_field<"defaultRTFColor", jni::ref<java::awt::Color>>(); }
	static jfloat defaultFontSize() { return get_static_field<"defaultFontSize", jfloat>(); }
	static jni::ref<java::lang::String> defaultFontFamily() { return get_static_field<"defaultFontFamily", jni::ref<java::lang::String>>(); }

	static void writeDocument(jni::ref<javax::swing::text::Document> p1, jni::ref<java::io::OutputStream> p2) { return call_static_method<"writeDocument", void>(p1, p2); }
	static jni::ref<javax::swing::text::rtf::RTFGenerator> new_object(jni::ref<java::io::OutputStream> p1) { return base_::new_object(p1); }
	void examineElement(jni::ref<javax::swing::text::Element> p1) { return call_method<"examineElement", void>(p1); }
	void writeLineBreak() { return call_method<"writeLineBreak", void>(); }
	void writeRTFHeader() { return call_method<"writeRTFHeader", void>(); }
	void writeRTFTrailer() { return call_method<"writeRTFTrailer", void>(); }
	void writeParagraphElement(jni::ref<javax::swing::text::Element> p1) { return call_method<"writeParagraphElement", void>(p1); }
	void writeTextElement(jni::ref<javax::swing::text::Element> p1) { return call_method<"writeTextElement", void>(p1); }
	void writeText(jni::ref<javax::swing::text::Segment> p1) { return call_method<"writeText", void>(p1); }
	void writeText(jni::ref<java::lang::String> p1) { return call_method<"writeText", void>(p1); }
	void writeRawString(jni::ref<java::lang::String> p1) { return call_method<"writeRawString", void>(p1); }
	void writeControlWord(jni::ref<java::lang::String> p1) { return call_method<"writeControlWord", void>(p1); }
	void writeControlWord(jni::ref<java::lang::String> p1, jint p2) { return call_method<"writeControlWord", void>(p1, p2); }
	void writeBegingroup() { return call_method<"writeBegingroup", void>(); }
	void writeEndgroup() { return call_method<"writeEndgroup", void>(); }
	void writeCharacter(jchar p1) { return call_method<"writeCharacter", void>(p1); }

protected:

	RTFGenerator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_RTF_RTFGENERATOR
