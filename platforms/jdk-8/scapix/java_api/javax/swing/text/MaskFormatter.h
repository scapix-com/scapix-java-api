// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/DefaultFormatter.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_MASKFORMATTER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_MASKFORMATTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class MaskFormatter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::MaskFormatter>
{
	static constexpr fixed_string class_name = "javax/swing/text/MaskFormatter";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::DefaultFormatter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_MASKFORMATTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_MASKFORMATTER)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_MASKFORMATTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/JFormattedTextField.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::MaskFormatter : public jni::object_base<"javax/swing/text/MaskFormatter",
	javax::swing::text::DefaultFormatter>
{
public:

	static jni::ref<javax::swing::text::MaskFormatter> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::text::MaskFormatter> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	void setMask(jni::ref<java::lang::String> p1) { return call_method<"setMask", void>(p1); }
	jni::ref<java::lang::String> getMask() { return call_method<"getMask", jni::ref<java::lang::String>>(); }
	void setValidCharacters(jni::ref<java::lang::String> p1) { return call_method<"setValidCharacters", void>(p1); }
	jni::ref<java::lang::String> getValidCharacters() { return call_method<"getValidCharacters", jni::ref<java::lang::String>>(); }
	void setInvalidCharacters(jni::ref<java::lang::String> p1) { return call_method<"setInvalidCharacters", void>(p1); }
	jni::ref<java::lang::String> getInvalidCharacters() { return call_method<"getInvalidCharacters", jni::ref<java::lang::String>>(); }
	void setPlaceholder(jni::ref<java::lang::String> p1) { return call_method<"setPlaceholder", void>(p1); }
	jni::ref<java::lang::String> getPlaceholder() { return call_method<"getPlaceholder", jni::ref<java::lang::String>>(); }
	void setPlaceholderCharacter(jchar p1) { return call_method<"setPlaceholderCharacter", void>(p1); }
	jchar getPlaceholderCharacter() { return call_method<"getPlaceholderCharacter", jchar>(); }
	void setValueContainsLiteralCharacters(jboolean p1) { return call_method<"setValueContainsLiteralCharacters", void>(p1); }
	jboolean getValueContainsLiteralCharacters() { return call_method<"getValueContainsLiteralCharacters", jboolean>(); }
	jni::ref<java::lang::Object> stringToValue(jni::ref<java::lang::String> p1) { return call_method<"stringToValue", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::String> valueToString(jni::ref<java::lang::Object> p1) { return call_method<"valueToString", jni::ref<java::lang::String>>(p1); }
	void install(jni::ref<javax::swing::JFormattedTextField> p1) { return call_method<"install", void>(p1); }

protected:

	MaskFormatter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_MASKFORMATTER
