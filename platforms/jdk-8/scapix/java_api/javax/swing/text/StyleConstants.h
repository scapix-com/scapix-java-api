// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONSTANTS_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONSTANTS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class StyleConstants; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::StyleConstants>
{
	static constexpr fixed_string class_name = "javax/swing/text/StyleConstants";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONSTANTS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONSTANTS)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONSTANTS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/MutableAttributeSet.h>
#include <scapix/java_api/javax/swing/text/TabSet.h>
#include <scapix/java_api/javax/swing/text/StyleConstants_ParagraphConstants.h>
#include <scapix/java_api/javax/swing/text/StyleConstants_CharacterConstants.h>
#include <scapix/java_api/javax/swing/text/StyleConstants_ColorConstants.h>
#include <scapix/java_api/javax/swing/text/StyleConstants_FontConstants.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::StyleConstants : public jni::object_base<"javax/swing/text/StyleConstants",
	java::lang::Object>
{
public:

	using ParagraphConstants = StyleConstants_ParagraphConstants;
	using CharacterConstants = StyleConstants_CharacterConstants;
	using ColorConstants = StyleConstants_ColorConstants;
	using FontConstants = StyleConstants_FontConstants;

	static jni::ref<java::lang::String> ComponentElementName() { return get_static_field<"ComponentElementName", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IconElementName() { return get_static_field<"IconElementName", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::Object> NameAttribute() { return get_static_field<"NameAttribute", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> ResolveAttribute() { return get_static_field<"ResolveAttribute", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> ModelAttribute() { return get_static_field<"ModelAttribute", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> BidiLevel() { return get_static_field<"BidiLevel", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> FontFamily() { return get_static_field<"FontFamily", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Family() { return get_static_field<"Family", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> FontSize() { return get_static_field<"FontSize", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Size() { return get_static_field<"Size", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Bold() { return get_static_field<"Bold", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Italic() { return get_static_field<"Italic", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Underline() { return get_static_field<"Underline", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> StrikeThrough() { return get_static_field<"StrikeThrough", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Superscript() { return get_static_field<"Superscript", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Subscript() { return get_static_field<"Subscript", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Foreground() { return get_static_field<"Foreground", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Background() { return get_static_field<"Background", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> ComponentAttribute() { return get_static_field<"ComponentAttribute", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> IconAttribute() { return get_static_field<"IconAttribute", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> ComposedTextAttribute() { return get_static_field<"ComposedTextAttribute", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> FirstLineIndent() { return get_static_field<"FirstLineIndent", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> LeftIndent() { return get_static_field<"LeftIndent", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> RightIndent() { return get_static_field<"RightIndent", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> LineSpacing() { return get_static_field<"LineSpacing", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> SpaceAbove() { return get_static_field<"SpaceAbove", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> SpaceBelow() { return get_static_field<"SpaceBelow", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Alignment() { return get_static_field<"Alignment", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> TabSet() { return get_static_field<"TabSet", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> Orientation() { return get_static_field<"Orientation", jni::ref<java::lang::Object>>(); }
	static jint ALIGN_LEFT() { return get_static_field<"ALIGN_LEFT", jint>(); }
	static jint ALIGN_CENTER() { return get_static_field<"ALIGN_CENTER", jint>(); }
	static jint ALIGN_RIGHT() { return get_static_field<"ALIGN_RIGHT", jint>(); }
	static jint ALIGN_JUSTIFIED() { return get_static_field<"ALIGN_JUSTIFIED", jint>(); }

	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jint getBidiLevel(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getBidiLevel", jint>(p1); }
	static void setBidiLevel(jni::ref<javax::swing::text::MutableAttributeSet> p1, jint p2) { return call_static_method<"setBidiLevel", void>(p1, p2); }
	static jni::ref<java::awt::Component> getComponent(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getComponent", jni::ref<java::awt::Component>>(p1); }
	static void setComponent(jni::ref<javax::swing::text::MutableAttributeSet> p1, jni::ref<java::awt::Component> p2) { return call_static_method<"setComponent", void>(p1, p2); }
	static jni::ref<javax::swing::Icon> getIcon(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getIcon", jni::ref<javax::swing::Icon>>(p1); }
	static void setIcon(jni::ref<javax::swing::text::MutableAttributeSet> p1, jni::ref<javax::swing::Icon> p2) { return call_static_method<"setIcon", void>(p1, p2); }
	static jni::ref<java::lang::String> getFontFamily(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getFontFamily", jni::ref<java::lang::String>>(p1); }
	static void setFontFamily(jni::ref<javax::swing::text::MutableAttributeSet> p1, jni::ref<java::lang::String> p2) { return call_static_method<"setFontFamily", void>(p1, p2); }
	static jint getFontSize(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getFontSize", jint>(p1); }
	static void setFontSize(jni::ref<javax::swing::text::MutableAttributeSet> p1, jint p2) { return call_static_method<"setFontSize", void>(p1, p2); }
	static jboolean isBold(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"isBold", jboolean>(p1); }
	static void setBold(jni::ref<javax::swing::text::MutableAttributeSet> p1, jboolean p2) { return call_static_method<"setBold", void>(p1, p2); }
	static jboolean isItalic(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"isItalic", jboolean>(p1); }
	static void setItalic(jni::ref<javax::swing::text::MutableAttributeSet> p1, jboolean p2) { return call_static_method<"setItalic", void>(p1, p2); }
	static jboolean isUnderline(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"isUnderline", jboolean>(p1); }
	static jboolean isStrikeThrough(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"isStrikeThrough", jboolean>(p1); }
	static jboolean isSuperscript(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"isSuperscript", jboolean>(p1); }
	static jboolean isSubscript(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"isSubscript", jboolean>(p1); }
	static void setUnderline(jni::ref<javax::swing::text::MutableAttributeSet> p1, jboolean p2) { return call_static_method<"setUnderline", void>(p1, p2); }
	static void setStrikeThrough(jni::ref<javax::swing::text::MutableAttributeSet> p1, jboolean p2) { return call_static_method<"setStrikeThrough", void>(p1, p2); }
	static void setSuperscript(jni::ref<javax::swing::text::MutableAttributeSet> p1, jboolean p2) { return call_static_method<"setSuperscript", void>(p1, p2); }
	static void setSubscript(jni::ref<javax::swing::text::MutableAttributeSet> p1, jboolean p2) { return call_static_method<"setSubscript", void>(p1, p2); }
	static jni::ref<java::awt::Color> getForeground(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getForeground", jni::ref<java::awt::Color>>(p1); }
	static void setForeground(jni::ref<javax::swing::text::MutableAttributeSet> p1, jni::ref<java::awt::Color> p2) { return call_static_method<"setForeground", void>(p1, p2); }
	static jni::ref<java::awt::Color> getBackground(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getBackground", jni::ref<java::awt::Color>>(p1); }
	static void setBackground(jni::ref<javax::swing::text::MutableAttributeSet> p1, jni::ref<java::awt::Color> p2) { return call_static_method<"setBackground", void>(p1, p2); }
	static jfloat getFirstLineIndent(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getFirstLineIndent", jfloat>(p1); }
	static void setFirstLineIndent(jni::ref<javax::swing::text::MutableAttributeSet> p1, jfloat p2) { return call_static_method<"setFirstLineIndent", void>(p1, p2); }
	static jfloat getRightIndent(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getRightIndent", jfloat>(p1); }
	static void setRightIndent(jni::ref<javax::swing::text::MutableAttributeSet> p1, jfloat p2) { return call_static_method<"setRightIndent", void>(p1, p2); }
	static jfloat getLeftIndent(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getLeftIndent", jfloat>(p1); }
	static void setLeftIndent(jni::ref<javax::swing::text::MutableAttributeSet> p1, jfloat p2) { return call_static_method<"setLeftIndent", void>(p1, p2); }
	static jfloat getLineSpacing(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getLineSpacing", jfloat>(p1); }
	static void setLineSpacing(jni::ref<javax::swing::text::MutableAttributeSet> p1, jfloat p2) { return call_static_method<"setLineSpacing", void>(p1, p2); }
	static jfloat getSpaceAbove(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getSpaceAbove", jfloat>(p1); }
	static void setSpaceAbove(jni::ref<javax::swing::text::MutableAttributeSet> p1, jfloat p2) { return call_static_method<"setSpaceAbove", void>(p1, p2); }
	static jfloat getSpaceBelow(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getSpaceBelow", jfloat>(p1); }
	static void setSpaceBelow(jni::ref<javax::swing::text::MutableAttributeSet> p1, jfloat p2) { return call_static_method<"setSpaceBelow", void>(p1, p2); }
	static jint getAlignment(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getAlignment", jint>(p1); }
	static void setAlignment(jni::ref<javax::swing::text::MutableAttributeSet> p1, jint p2) { return call_static_method<"setAlignment", void>(p1, p2); }
	static jni::ref<javax::swing::text::TabSet> getTabSet(jni::ref<javax::swing::text::AttributeSet> p1) { return call_static_method<"getTabSet", jni::ref<javax::swing::text::TabSet>>(p1); }
	static void setTabSet(jni::ref<javax::swing::text::MutableAttributeSet> p1, jni::ref<javax::swing::text::TabSet> p2) { return call_static_method<"setTabSet", void>(p1, p2); }

protected:

	StyleConstants(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONSTANTS
