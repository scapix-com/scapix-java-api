// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/View.h>
#include <scapix/java_api/javax/swing/text/TabableView.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_GLYPHVIEW_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_GLYPHVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class GlyphView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::GlyphView>
{
	static constexpr fixed_string class_name = "javax/swing/text/GlyphView";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::View, scapix::java_api::javax::swing::text::TabableView, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_GLYPHVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_GLYPHVIEW)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_GLYPHVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/javax/swing/event/DocumentEvent.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/GlyphView_GlyphPainter.h>
#include <scapix/java_api/javax/swing/text/Position_Bias.h>
#include <scapix/java_api/javax/swing/text/Segment.h>
#include <scapix/java_api/javax/swing/text/TabExpander.h>
#include <scapix/java_api/javax/swing/text/ViewFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::GlyphView : public jni::object_base<"javax/swing/text/GlyphView",
	javax::swing::text::View,
	javax::swing::text::TabableView,
	java::lang::Cloneable>
{
public:

	using GlyphPainter = GlyphView_GlyphPainter;

	static jni::ref<javax::swing::text::GlyphView> new_object(jni::ref<javax::swing::text::Element> p1) { return base_::new_object(p1); }
	jni::ref<javax::swing::text::GlyphView_GlyphPainter> getGlyphPainter() { return call_method<"getGlyphPainter", jni::ref<javax::swing::text::GlyphView_GlyphPainter>>(); }
	void setGlyphPainter(jni::ref<javax::swing::text::GlyphView_GlyphPainter> p1) { return call_method<"setGlyphPainter", void>(p1); }
	jni::ref<javax::swing::text::Segment> getText(jint p1, jint p2) { return call_method<"getText", jni::ref<javax::swing::text::Segment>>(p1, p2); }
	jni::ref<java::awt::Color> getBackground() { return call_method<"getBackground", jni::ref<java::awt::Color>>(); }
	jni::ref<java::awt::Color> getForeground() { return call_method<"getForeground", jni::ref<java::awt::Color>>(); }
	jni::ref<java::awt::Font> getFont() { return call_method<"getFont", jni::ref<java::awt::Font>>(); }
	jboolean isUnderline() { return call_method<"isUnderline", jboolean>(); }
	jboolean isStrikeThrough() { return call_method<"isStrikeThrough", jboolean>(); }
	jboolean isSubscript() { return call_method<"isSubscript", jboolean>(); }
	jboolean isSuperscript() { return call_method<"isSuperscript", jboolean>(); }
	jni::ref<javax::swing::text::TabExpander> getTabExpander() { return call_method<"getTabExpander", jni::ref<javax::swing::text::TabExpander>>(); }
	jfloat getTabbedSpan(jfloat p1, jni::ref<javax::swing::text::TabExpander> p2) { return call_method<"getTabbedSpan", jfloat>(p1, p2); }
	jfloat getPartialSpan(jint p1, jint p2) { return call_method<"getPartialSpan", jfloat>(p1, p2); }
	jint getStartOffset() { return call_method<"getStartOffset", jint>(); }
	jint getEndOffset() { return call_method<"getEndOffset", jint>(); }
	void paint(jni::ref<java::awt::Graphics> p1, jni::ref<java::awt::Shape> p2) { return call_method<"paint", void>(p1, p2); }
	jfloat getMinimumSpan(jint p1) { return call_method<"getMinimumSpan", jfloat>(p1); }
	jfloat getPreferredSpan(jint p1) { return call_method<"getPreferredSpan", jfloat>(p1); }
	jfloat getAlignment(jint p1) { return call_method<"getAlignment", jfloat>(p1); }
	jni::ref<java::awt::Shape> modelToView(jint p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::Position_Bias> p3) { return call_method<"modelToView", jni::ref<java::awt::Shape>>(p1, p2, p3); }
	jint viewToModel(jfloat p1, jfloat p2, jni::ref<java::awt::Shape> p3, jni::ref<jni::array<javax::swing::text::Position_Bias>> p4) { return call_method<"viewToModel", jint>(p1, p2, p3, p4); }
	jint getBreakWeight(jint p1, jfloat p2, jfloat p3) { return call_method<"getBreakWeight", jint>(p1, p2, p3); }
	jni::ref<javax::swing::text::View> breakView(jint p1, jint p2, jfloat p3, jfloat p4) { return call_method<"breakView", jni::ref<javax::swing::text::View>>(p1, p2, p3, p4); }
	jni::ref<javax::swing::text::View> createFragment(jint p1, jint p2) { return call_method<"createFragment", jni::ref<javax::swing::text::View>>(p1, p2); }
	jint getNextVisualPositionFrom(jint p1, jni::ref<javax::swing::text::Position_Bias> p2, jni::ref<java::awt::Shape> p3, jint p4, jni::ref<jni::array<javax::swing::text::Position_Bias>> p5) { return call_method<"getNextVisualPositionFrom", jint>(p1, p2, p3, p4, p5); }
	void insertUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"insertUpdate", void>(p1, p2, p3); }
	void removeUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"removeUpdate", void>(p1, p2, p3); }
	void changedUpdate(jni::ref<javax::swing::event::DocumentEvent> p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::ViewFactory> p3) { return call_method<"changedUpdate", void>(p1, p2, p3); }

protected:

	GlyphView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_GLYPHVIEW
