// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/MutableAttributeSet.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/javax/swing/tree/TreeNode.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ABSTRACTDOCUMENT_ABSTRACTELEMENT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ABSTRACTDOCUMENT_ABSTRACTELEMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class AbstractDocument_AbstractElement; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::AbstractDocument_AbstractElement>
{
	static constexpr fixed_string class_name = "javax/swing/text/AbstractDocument$AbstractElement";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::swing::text::Element, scapix::java_api::javax::swing::text::MutableAttributeSet, scapix::java_api::java::io::Serializable, scapix::java_api::javax::swing::tree::TreeNode>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ABSTRACTDOCUMENT_ABSTRACTELEMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ABSTRACTDOCUMENT_ABSTRACTELEMENT)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ABSTRACTDOCUMENT_ABSTRACTELEMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/javax/swing/text/AbstractDocument.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/Document.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::AbstractDocument_AbstractElement : public jni::object_base<"javax/swing/text/AbstractDocument$AbstractElement",
	java::lang::Object,
	javax::swing::text::Element,
	javax::swing::text::MutableAttributeSet,
	java::io::Serializable,
	javax::swing::tree::TreeNode>
{
public:

	static jni::ref<javax::swing::text::AbstractDocument_AbstractElement> new_object(jni::ref<javax::swing::text::AbstractDocument> p1, jni::ref<javax::swing::text::Element> p2, jni::ref<javax::swing::text::AttributeSet> p3) { return base_::new_object(p1, p2, p3); }
	void dump(jni::ref<java::io::PrintStream> p1, jint p2) { return call_method<"dump", void>(p1, p2); }
	jint getAttributeCount() { return call_method<"getAttributeCount", jint>(); }
	jboolean isDefined(jni::ref<java::lang::Object> p1) { return call_method<"isDefined", jboolean>(p1); }
	jboolean isEqual(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"isEqual", jboolean>(p1); }
	jni::ref<javax::swing::text::AttributeSet> copyAttributes() { return call_method<"copyAttributes", jni::ref<javax::swing::text::AttributeSet>>(); }
	jni::ref<java::lang::Object> getAttribute(jni::ref<java::lang::Object> p1) { return call_method<"getAttribute", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::util::Enumeration> getAttributeNames() { return call_method<"getAttributeNames", jni::ref<java::util::Enumeration>>(); }
	jboolean containsAttribute(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"containsAttribute", jboolean>(p1, p2); }
	jboolean containsAttributes(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"containsAttributes", jboolean>(p1); }
	jni::ref<javax::swing::text::AttributeSet> getResolveParent() { return call_method<"getResolveParent", jni::ref<javax::swing::text::AttributeSet>>(); }
	void addAttribute(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"addAttribute", void>(p1, p2); }
	void addAttributes(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"addAttributes", void>(p1); }
	void removeAttribute(jni::ref<java::lang::Object> p1) { return call_method<"removeAttribute", void>(p1); }
	void removeAttributes(jni::ref<java::util::Enumeration> p1) { return call_method<"removeAttributes", void>(p1); }
	void removeAttributes(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"removeAttributes", void>(p1); }
	void setResolveParent(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"setResolveParent", void>(p1); }
	jni::ref<javax::swing::text::Document> getDocument() { return call_method<"getDocument", jni::ref<javax::swing::text::Document>>(); }
	jni::ref<javax::swing::text::Element> getParentElement() { return call_method<"getParentElement", jni::ref<javax::swing::text::Element>>(); }
	jni::ref<javax::swing::text::AttributeSet> getAttributes() { return call_method<"getAttributes", jni::ref<javax::swing::text::AttributeSet>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getStartOffset() { return call_method<"getStartOffset", jint>(); }
	jint getEndOffset() { return call_method<"getEndOffset", jint>(); }
	jni::ref<javax::swing::text::Element> getElement(jint p1) { return call_method<"getElement", jni::ref<javax::swing::text::Element>>(p1); }
	jint getElementCount() { return call_method<"getElementCount", jint>(); }
	jint getElementIndex(jint p1) { return call_method<"getElementIndex", jint>(p1); }
	jboolean isLeaf() { return call_method<"isLeaf", jboolean>(); }
	jni::ref<javax::swing::tree::TreeNode> getChildAt(jint p1) { return call_method<"getChildAt", jni::ref<javax::swing::tree::TreeNode>>(p1); }
	jint getChildCount() { return call_method<"getChildCount", jint>(); }
	jni::ref<javax::swing::tree::TreeNode> getParent() { return call_method<"getParent", jni::ref<javax::swing::tree::TreeNode>>(); }
	jint getIndex(jni::ref<javax::swing::tree::TreeNode> p1) { return call_method<"getIndex", jint>(p1); }
	jboolean getAllowsChildren() { return call_method<"getAllowsChildren", jboolean>(); }
	jni::ref<java::util::Enumeration> children() { return call_method<"children", jni::ref<java::util::Enumeration>>(); }

protected:

	AbstractDocument_AbstractElement(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ABSTRACTDOCUMENT_ABSTRACTELEMENT
