// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/Scrollable.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class JTextComponent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::JTextComponent>
{
	static constexpr fixed_string class_name = "javax/swing/text/JTextComponent";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent, scapix::java_api::javax::swing::Scrollable, scapix::java_api::javax::accessibility::Accessible>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/ComponentOrientation.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/event/InputMethodListener.h>
#include <scapix/java_api/java/awt/event/MouseEvent.h>
#include <scapix/java_api/java/awt/im/InputMethodRequests.h>
#include <scapix/java_api/java/awt/print/Printable.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/MessageFormat.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/print/PrintService.h>
#include <scapix/java_api/javax/print/attribute/PrintRequestAttributeSet.h>
#include <scapix/java_api/javax/swing/Action.h>
#include <scapix/java_api/javax/swing/DropMode.h>
#include <scapix/java_api/javax/swing/event/CaretListener.h>
#include <scapix/java_api/javax/swing/plaf/TextUI.h>
#include <scapix/java_api/javax/swing/text/Caret.h>
#include <scapix/java_api/javax/swing/text/Document.h>
#include <scapix/java_api/javax/swing/text/Highlighter.h>
#include <scapix/java_api/javax/swing/text/JTextComponent_DropLocation.h>
#include <scapix/java_api/javax/swing/text/JTextComponent_KeyBinding.h>
#include <scapix/java_api/javax/swing/text/Keymap.h>
#include <scapix/java_api/javax/swing/text/NavigationFilter.h>
#include <scapix/java_api/javax/swing/text/JTextComponent_AccessibleJTextComponent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::JTextComponent : public jni::object_base<"javax/swing/text/JTextComponent",
	javax::swing::JComponent,
	javax::swing::Scrollable,
	javax::accessibility::Accessible>
{
public:

	using KeyBinding = JTextComponent_KeyBinding;
	using AccessibleJTextComponent = JTextComponent_AccessibleJTextComponent;
	using DropLocation = JTextComponent_DropLocation;

	static jni::ref<java::lang::String> FOCUS_ACCELERATOR_KEY() { return get_static_field<"FOCUS_ACCELERATOR_KEY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFAULT_KEYMAP() { return get_static_field<"DEFAULT_KEYMAP", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::swing::text::JTextComponent> new_object() { return base_::new_object(); }
	jni::ref<javax::swing::plaf::TextUI> getUI() { return call_method<"getUI", jni::ref<javax::swing::plaf::TextUI>>(); }
	void setUI(jni::ref<javax::swing::plaf::TextUI> p1) { return call_method<"setUI", void>(p1); }
	void updateUI() { return call_method<"updateUI", void>(); }
	void addCaretListener(jni::ref<javax::swing::event::CaretListener> p1) { return call_method<"addCaretListener", void>(p1); }
	void removeCaretListener(jni::ref<javax::swing::event::CaretListener> p1) { return call_method<"removeCaretListener", void>(p1); }
	jni::ref<jni::array<javax::swing::event::CaretListener>> getCaretListeners() { return call_method<"getCaretListeners", jni::ref<jni::array<javax::swing::event::CaretListener>>>(); }
	void setDocument(jni::ref<javax::swing::text::Document> p1) { return call_method<"setDocument", void>(p1); }
	jni::ref<javax::swing::text::Document> getDocument() { return call_method<"getDocument", jni::ref<javax::swing::text::Document>>(); }
	void setComponentOrientation(jni::ref<java::awt::ComponentOrientation> p1) { return call_method<"setComponentOrientation", void>(p1); }
	jni::ref<jni::array<javax::swing::Action>> getActions() { return call_method<"getActions", jni::ref<jni::array<javax::swing::Action>>>(); }
	void setMargin(jni::ref<java::awt::Insets> p1) { return call_method<"setMargin", void>(p1); }
	jni::ref<java::awt::Insets> getMargin() { return call_method<"getMargin", jni::ref<java::awt::Insets>>(); }
	void setNavigationFilter(jni::ref<javax::swing::text::NavigationFilter> p1) { return call_method<"setNavigationFilter", void>(p1); }
	jni::ref<javax::swing::text::NavigationFilter> getNavigationFilter() { return call_method<"getNavigationFilter", jni::ref<javax::swing::text::NavigationFilter>>(); }
	jni::ref<javax::swing::text::Caret> getCaret() { return call_method<"getCaret", jni::ref<javax::swing::text::Caret>>(); }
	void setCaret(jni::ref<javax::swing::text::Caret> p1) { return call_method<"setCaret", void>(p1); }
	jni::ref<javax::swing::text::Highlighter> getHighlighter() { return call_method<"getHighlighter", jni::ref<javax::swing::text::Highlighter>>(); }
	void setHighlighter(jni::ref<javax::swing::text::Highlighter> p1) { return call_method<"setHighlighter", void>(p1); }
	void setKeymap(jni::ref<javax::swing::text::Keymap> p1) { return call_method<"setKeymap", void>(p1); }
	void setDragEnabled(jboolean p1) { return call_method<"setDragEnabled", void>(p1); }
	jboolean getDragEnabled() { return call_method<"getDragEnabled", jboolean>(); }
	void setDropMode(jni::ref<javax::swing::DropMode> p1) { return call_method<"setDropMode", void>(p1); }
	jni::ref<javax::swing::DropMode> getDropMode() { return call_method<"getDropMode", jni::ref<javax::swing::DropMode>>(); }
	jni::ref<javax::swing::text::JTextComponent_DropLocation> getDropLocation() { return call_method<"getDropLocation", jni::ref<javax::swing::text::JTextComponent_DropLocation>>(); }
	jni::ref<javax::swing::text::Keymap> getKeymap() { return call_method<"getKeymap", jni::ref<javax::swing::text::Keymap>>(); }
	static jni::ref<javax::swing::text::Keymap> addKeymap(jni::ref<java::lang::String> p1, jni::ref<javax::swing::text::Keymap> p2) { return call_static_method<"addKeymap", jni::ref<javax::swing::text::Keymap>>(p1, p2); }
	static jni::ref<javax::swing::text::Keymap> removeKeymap(jni::ref<java::lang::String> p1) { return call_static_method<"removeKeymap", jni::ref<javax::swing::text::Keymap>>(p1); }
	static jni::ref<javax::swing::text::Keymap> getKeymap(jni::ref<java::lang::String> p1) { return call_static_method<"getKeymap", jni::ref<javax::swing::text::Keymap>>(p1); }
	static void loadKeymap(jni::ref<javax::swing::text::Keymap> p1, jni::ref<jni::array<javax::swing::text::JTextComponent_KeyBinding>> p2, jni::ref<jni::array<javax::swing::Action>> p3) { return call_static_method<"loadKeymap", void>(p1, p2, p3); }
	jni::ref<java::awt::Color> getCaretColor() { return call_method<"getCaretColor", jni::ref<java::awt::Color>>(); }
	void setCaretColor(jni::ref<java::awt::Color> p1) { return call_method<"setCaretColor", void>(p1); }
	jni::ref<java::awt::Color> getSelectionColor() { return call_method<"getSelectionColor", jni::ref<java::awt::Color>>(); }
	void setSelectionColor(jni::ref<java::awt::Color> p1) { return call_method<"setSelectionColor", void>(p1); }
	jni::ref<java::awt::Color> getSelectedTextColor() { return call_method<"getSelectedTextColor", jni::ref<java::awt::Color>>(); }
	void setSelectedTextColor(jni::ref<java::awt::Color> p1) { return call_method<"setSelectedTextColor", void>(p1); }
	jni::ref<java::awt::Color> getDisabledTextColor() { return call_method<"getDisabledTextColor", jni::ref<java::awt::Color>>(); }
	void setDisabledTextColor(jni::ref<java::awt::Color> p1) { return call_method<"setDisabledTextColor", void>(p1); }
	void replaceSelection(jni::ref<java::lang::String> p1) { return call_method<"replaceSelection", void>(p1); }
	jni::ref<java::lang::String> getText(jint p1, jint p2) { return call_method<"getText", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::awt::Rectangle> modelToView(jint p1) { return call_method<"modelToView", jni::ref<java::awt::Rectangle>>(p1); }
	jint viewToModel(jni::ref<java::awt::Point> p1) { return call_method<"viewToModel", jint>(p1); }
	void cut() { return call_method<"cut", void>(); }
	void copy() { return call_method<"copy", void>(); }
	void paste() { return call_method<"paste", void>(); }
	void moveCaretPosition(jint p1) { return call_method<"moveCaretPosition", void>(p1); }
	void setFocusAccelerator(jchar p1) { return call_method<"setFocusAccelerator", void>(p1); }
	jchar getFocusAccelerator() { return call_method<"getFocusAccelerator", jchar>(); }
	void read(jni::ref<java::io::Reader> p1, jni::ref<java::lang::Object> p2) { return call_method<"read", void>(p1, p2); }
	void write(jni::ref<java::io::Writer> p1) { return call_method<"write", void>(p1); }
	void removeNotify() { return call_method<"removeNotify", void>(); }
	void setCaretPosition(jint p1) { return call_method<"setCaretPosition", void>(p1); }
	jint getCaretPosition() { return call_method<"getCaretPosition", jint>(); }
	void setText(jni::ref<java::lang::String> p1) { return call_method<"setText", void>(p1); }
	jni::ref<java::lang::String> getText() { return call_method<"getText", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSelectedText() { return call_method<"getSelectedText", jni::ref<java::lang::String>>(); }
	jboolean isEditable() { return call_method<"isEditable", jboolean>(); }
	void setEditable(jboolean p1) { return call_method<"setEditable", void>(p1); }
	jint getSelectionStart() { return call_method<"getSelectionStart", jint>(); }
	void setSelectionStart(jint p1) { return call_method<"setSelectionStart", void>(p1); }
	jint getSelectionEnd() { return call_method<"getSelectionEnd", jint>(); }
	void setSelectionEnd(jint p1) { return call_method<"setSelectionEnd", void>(p1); }
	void select(jint p1, jint p2) { return call_method<"select", void>(p1, p2); }
	void selectAll() { return call_method<"selectAll", void>(); }
	jni::ref<java::lang::String> getToolTipText(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"getToolTipText", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::awt::Dimension> getPreferredScrollableViewportSize() { return call_method<"getPreferredScrollableViewportSize", jni::ref<java::awt::Dimension>>(); }
	jint getScrollableUnitIncrement(jni::ref<java::awt::Rectangle> p1, jint p2, jint p3) { return call_method<"getScrollableUnitIncrement", jint>(p1, p2, p3); }
	jint getScrollableBlockIncrement(jni::ref<java::awt::Rectangle> p1, jint p2, jint p3) { return call_method<"getScrollableBlockIncrement", jint>(p1, p2, p3); }
	jboolean getScrollableTracksViewportWidth() { return call_method<"getScrollableTracksViewportWidth", jboolean>(); }
	jboolean getScrollableTracksViewportHeight() { return call_method<"getScrollableTracksViewportHeight", jboolean>(); }
	jboolean print() { return call_method<"print", jboolean>(); }
	jboolean print(jni::ref<java::text::MessageFormat> p1, jni::ref<java::text::MessageFormat> p2) { return call_method<"print", jboolean>(p1, p2); }
	jboolean print(jni::ref<java::text::MessageFormat> p1, jni::ref<java::text::MessageFormat> p2, jboolean p3, jni::ref<javax::print::PrintService> p4, jni::ref<javax::print::attribute::PrintRequestAttributeSet> p5, jboolean p6) { return call_method<"print", jboolean>(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::awt::print::Printable> getPrintable(jni::ref<java::text::MessageFormat> p1, jni::ref<java::text::MessageFormat> p2) { return call_method<"getPrintable", jni::ref<java::awt::print::Printable>>(p1, p2); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }
	jni::ref<java::awt::im::InputMethodRequests> getInputMethodRequests() { return call_method<"getInputMethodRequests", jni::ref<java::awt::im::InputMethodRequests>>(); }
	void addInputMethodListener(jni::ref<java::awt::event::InputMethodListener> p1) { return call_method<"addInputMethodListener", void>(p1); }

protected:

	JTextComponent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_JTEXTCOMPONENT
