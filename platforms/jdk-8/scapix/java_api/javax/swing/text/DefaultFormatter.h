// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JFormattedTextField_AbstractFormatter.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class DefaultFormatter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::DefaultFormatter>
{
	static constexpr fixed_string class_name = "javax/swing/text/DefaultFormatter";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JFormattedTextField_AbstractFormatter, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTER)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/JFormattedTextField.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::DefaultFormatter : public jni::object_base<"javax/swing/text/DefaultFormatter",
	javax::swing::JFormattedTextField_AbstractFormatter,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static jni::ref<javax::swing::text::DefaultFormatter> new_object() { return base_::new_object(); }
	void install(jni::ref<javax::swing::JFormattedTextField> p1) { return call_method<"install", void>(p1); }
	void setCommitsOnValidEdit(jboolean p1) { return call_method<"setCommitsOnValidEdit", void>(p1); }
	jboolean getCommitsOnValidEdit() { return call_method<"getCommitsOnValidEdit", jboolean>(); }
	void setOverwriteMode(jboolean p1) { return call_method<"setOverwriteMode", void>(p1); }
	jboolean getOverwriteMode() { return call_method<"getOverwriteMode", jboolean>(); }
	void setAllowsInvalid(jboolean p1) { return call_method<"setAllowsInvalid", void>(p1); }
	jboolean getAllowsInvalid() { return call_method<"getAllowsInvalid", jboolean>(); }
	void setValueClass(jni::ref<java::lang::Class> p1) { return call_method<"setValueClass", void>(p1); }
	jni::ref<java::lang::Class> getValueClass() { return call_method<"getValueClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Object> stringToValue(jni::ref<java::lang::String> p1) { return call_method<"stringToValue", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::String> valueToString(jni::ref<java::lang::Object> p1) { return call_method<"valueToString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	DefaultFormatter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTFORMATTER
