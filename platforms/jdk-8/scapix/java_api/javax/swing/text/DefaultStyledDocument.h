// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/AbstractDocument.h>
#include <scapix/java_api/javax/swing/text/StyledDocument.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTSTYLEDDOCUMENT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTSTYLEDDOCUMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class DefaultStyledDocument; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::DefaultStyledDocument>
{
	static constexpr fixed_string class_name = "javax/swing/text/DefaultStyledDocument";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::AbstractDocument, scapix::java_api::javax::swing::text::StyledDocument>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTSTYLEDDOCUMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTSTYLEDDOCUMENT)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTSTYLEDDOCUMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/javax/swing/event/DocumentListener.h>
#include <scapix/java_api/javax/swing/text/AbstractDocument_Content.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/Style.h>
#include <scapix/java_api/javax/swing/text/StyleContext.h>
#include <scapix/java_api/javax/swing/text/DefaultStyledDocument_ElementSpec.h>
#include <scapix/java_api/javax/swing/text/DefaultStyledDocument_ElementBuffer.h>
#include <scapix/java_api/javax/swing/text/DefaultStyledDocument_AttributeUndoableEdit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::DefaultStyledDocument : public jni::object_base<"javax/swing/text/DefaultStyledDocument",
	javax::swing::text::AbstractDocument,
	javax::swing::text::StyledDocument>
{
public:

	using ElementSpec = DefaultStyledDocument_ElementSpec;
	using ElementBuffer = DefaultStyledDocument_ElementBuffer;
	using AttributeUndoableEdit = DefaultStyledDocument_AttributeUndoableEdit;

	static jint BUFFER_SIZE_DEFAULT() { return get_static_field<"BUFFER_SIZE_DEFAULT", jint>(); }

	static jni::ref<javax::swing::text::DefaultStyledDocument> new_object(jni::ref<javax::swing::text::AbstractDocument_Content> p1, jni::ref<javax::swing::text::StyleContext> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::text::DefaultStyledDocument> new_object(jni::ref<javax::swing::text::StyleContext> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::text::DefaultStyledDocument> new_object() { return base_::new_object(); }
	jni::ref<javax::swing::text::Element> getDefaultRootElement() { return call_method<"getDefaultRootElement", jni::ref<javax::swing::text::Element>>(); }
	void removeElement(jni::ref<javax::swing::text::Element> p1) { return call_method<"removeElement", void>(p1); }
	jni::ref<javax::swing::text::Style> addStyle(jni::ref<java::lang::String> p1, jni::ref<javax::swing::text::Style> p2) { return call_method<"addStyle", jni::ref<javax::swing::text::Style>>(p1, p2); }
	void removeStyle(jni::ref<java::lang::String> p1) { return call_method<"removeStyle", void>(p1); }
	jni::ref<javax::swing::text::Style> getStyle(jni::ref<java::lang::String> p1) { return call_method<"getStyle", jni::ref<javax::swing::text::Style>>(p1); }
	jni::ref<java::util::Enumeration> getStyleNames() { return call_method<"getStyleNames", jni::ref<java::util::Enumeration>>(); }
	void setLogicalStyle(jint p1, jni::ref<javax::swing::text::Style> p2) { return call_method<"setLogicalStyle", void>(p1, p2); }
	jni::ref<javax::swing::text::Style> getLogicalStyle(jint p1) { return call_method<"getLogicalStyle", jni::ref<javax::swing::text::Style>>(p1); }
	void setCharacterAttributes(jint p1, jint p2, jni::ref<javax::swing::text::AttributeSet> p3, jboolean p4) { return call_method<"setCharacterAttributes", void>(p1, p2, p3, p4); }
	void setParagraphAttributes(jint p1, jint p2, jni::ref<javax::swing::text::AttributeSet> p3, jboolean p4) { return call_method<"setParagraphAttributes", void>(p1, p2, p3, p4); }
	jni::ref<javax::swing::text::Element> getParagraphElement(jint p1) { return call_method<"getParagraphElement", jni::ref<javax::swing::text::Element>>(p1); }
	jni::ref<javax::swing::text::Element> getCharacterElement(jint p1) { return call_method<"getCharacterElement", jni::ref<javax::swing::text::Element>>(p1); }
	jni::ref<java::awt::Color> getForeground(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getForeground", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getBackground(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getBackground", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Font> getFont(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	void addDocumentListener(jni::ref<javax::swing::event::DocumentListener> p1) { return call_method<"addDocumentListener", void>(p1); }
	void removeDocumentListener(jni::ref<javax::swing::event::DocumentListener> p1) { return call_method<"removeDocumentListener", void>(p1); }

protected:

	DefaultStyledDocument(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTSTYLEDDOCUMENT
