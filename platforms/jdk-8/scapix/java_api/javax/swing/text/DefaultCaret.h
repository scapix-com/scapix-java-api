// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/javax/swing/text/Caret.h>
#include <scapix/java_api/java/awt/event/FocusListener.h>
#include <scapix/java_api/java/awt/event/MouseListener.h>
#include <scapix/java_api/java/awt/event/MouseMotionListener.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTCARET_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTCARET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class DefaultCaret; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::DefaultCaret>
{
	static constexpr fixed_string class_name = "javax/swing/text/DefaultCaret";
	using base_classes = std::tuple<scapix::java_api::java::awt::Rectangle, scapix::java_api::javax::swing::text::Caret, scapix::java_api::java::awt::event::FocusListener, scapix::java_api::java::awt::event::MouseListener, scapix::java_api::java::awt::event::MouseMotionListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTCARET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTCARET)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTCARET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/event/FocusEvent.h>
#include <scapix/java_api/java/awt/event/MouseEvent.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/EventListener.h>
#include <scapix/java_api/javax/swing/event/ChangeListener.h>
#include <scapix/java_api/javax/swing/text/JTextComponent.h>
#include <scapix/java_api/javax/swing/text/Position_Bias.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::DefaultCaret : public jni::object_base<"javax/swing/text/DefaultCaret",
	java::awt::Rectangle,
	javax::swing::text::Caret,
	java::awt::event::FocusListener,
	java::awt::event::MouseListener,
	java::awt::event::MouseMotionListener>
{
public:

	static jint UPDATE_WHEN_ON_EDT() { return get_static_field<"UPDATE_WHEN_ON_EDT", jint>(); }
	static jint NEVER_UPDATE() { return get_static_field<"NEVER_UPDATE", jint>(); }
	static jint ALWAYS_UPDATE() { return get_static_field<"ALWAYS_UPDATE", jint>(); }

	static jni::ref<javax::swing::text::DefaultCaret> new_object() { return base_::new_object(); }
	void setUpdatePolicy(jint p1) { return call_method<"setUpdatePolicy", void>(p1); }
	jint getUpdatePolicy() { return call_method<"getUpdatePolicy", jint>(); }
	void focusGained(jni::ref<java::awt::event::FocusEvent> p1) { return call_method<"focusGained", void>(p1); }
	void focusLost(jni::ref<java::awt::event::FocusEvent> p1) { return call_method<"focusLost", void>(p1); }
	void mouseClicked(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"mouseClicked", void>(p1); }
	void mousePressed(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"mousePressed", void>(p1); }
	void mouseReleased(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"mouseReleased", void>(p1); }
	void mouseEntered(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"mouseEntered", void>(p1); }
	void mouseExited(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"mouseExited", void>(p1); }
	void mouseDragged(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"mouseDragged", void>(p1); }
	void mouseMoved(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"mouseMoved", void>(p1); }
	void paint(jni::ref<java::awt::Graphics> p1) { return call_method<"paint", void>(p1); }
	void install(jni::ref<javax::swing::text::JTextComponent> p1) { return call_method<"install", void>(p1); }
	void deinstall(jni::ref<javax::swing::text::JTextComponent> p1) { return call_method<"deinstall", void>(p1); }
	void addChangeListener(jni::ref<javax::swing::event::ChangeListener> p1) { return call_method<"addChangeListener", void>(p1); }
	void removeChangeListener(jni::ref<javax::swing::event::ChangeListener> p1) { return call_method<"removeChangeListener", void>(p1); }
	jni::ref<jni::array<javax::swing::event::ChangeListener>> getChangeListeners() { return call_method<"getChangeListeners", jni::ref<jni::array<javax::swing::event::ChangeListener>>>(); }
	jni::ref<jni::array<java::util::EventListener>> getListeners(jni::ref<java::lang::Class> p1) { return call_method<"getListeners", jni::ref<jni::array<java::util::EventListener>>>(p1); }
	void setSelectionVisible(jboolean p1) { return call_method<"setSelectionVisible", void>(p1); }
	jboolean isSelectionVisible() { return call_method<"isSelectionVisible", jboolean>(); }
	jboolean isActive() { return call_method<"isActive", jboolean>(); }
	jboolean isVisible() { return call_method<"isVisible", jboolean>(); }
	void setVisible(jboolean p1) { return call_method<"setVisible", void>(p1); }
	void setBlinkRate(jint p1) { return call_method<"setBlinkRate", void>(p1); }
	jint getBlinkRate() { return call_method<"getBlinkRate", jint>(); }
	jint getDot() { return call_method<"getDot", jint>(); }
	jint getMark() { return call_method<"getMark", jint>(); }
	void setDot(jint p1) { return call_method<"setDot", void>(p1); }
	void moveDot(jint p1) { return call_method<"moveDot", void>(p1); }
	void moveDot(jint p1, jni::ref<javax::swing::text::Position_Bias> p2) { return call_method<"moveDot", void>(p1, p2); }
	void setDot(jint p1, jni::ref<javax::swing::text::Position_Bias> p2) { return call_method<"setDot", void>(p1, p2); }
	jni::ref<javax::swing::text::Position_Bias> getDotBias() { return call_method<"getDotBias", jni::ref<javax::swing::text::Position_Bias>>(); }
	jni::ref<javax::swing::text::Position_Bias> getMarkBias() { return call_method<"getMarkBias", jni::ref<javax::swing::text::Position_Bias>>(); }
	void setMagicCaretPosition(jni::ref<java::awt::Point> p1) { return call_method<"setMagicCaretPosition", void>(p1); }
	jni::ref<java::awt::Point> getMagicCaretPosition() { return call_method<"getMagicCaretPosition", jni::ref<java::awt::Point>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	DefaultCaret(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_DEFAULTCARET
