// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/javax/swing/text/AbstractDocument_AttributeContext.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONTEXT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class StyleContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::StyleContext>
{
	static constexpr fixed_string class_name = "javax/swing/text/StyleContext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::javax::swing::text::AbstractDocument_AttributeContext>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONTEXT)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/io/ObjectInputStream.h>
#include <scapix/java_api/java/io/ObjectOutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/javax/swing/event/ChangeListener.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/MutableAttributeSet.h>
#include <scapix/java_api/javax/swing/text/Style.h>
#include <scapix/java_api/javax/swing/text/StyleContext_SmallAttributeSet.h>
#include <scapix/java_api/javax/swing/text/StyleContext_NamedStyle.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::StyleContext : public jni::object_base<"javax/swing/text/StyleContext",
	java::lang::Object,
	java::io::Serializable,
	javax::swing::text::AbstractDocument_AttributeContext>
{
public:

	using SmallAttributeSet = StyleContext_SmallAttributeSet;
	using NamedStyle = StyleContext_NamedStyle;

	static jni::ref<java::lang::String> DEFAULT_STYLE() { return get_static_field<"DEFAULT_STYLE", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::swing::text::StyleContext> getDefaultStyleContext() { return call_static_method<"getDefaultStyleContext", jni::ref<javax::swing::text::StyleContext>>(); }
	static jni::ref<javax::swing::text::StyleContext> new_object() { return base_::new_object(); }
	jni::ref<javax::swing::text::Style> addStyle(jni::ref<java::lang::String> p1, jni::ref<javax::swing::text::Style> p2) { return call_method<"addStyle", jni::ref<javax::swing::text::Style>>(p1, p2); }
	void removeStyle(jni::ref<java::lang::String> p1) { return call_method<"removeStyle", void>(p1); }
	jni::ref<javax::swing::text::Style> getStyle(jni::ref<java::lang::String> p1) { return call_method<"getStyle", jni::ref<javax::swing::text::Style>>(p1); }
	jni::ref<java::util::Enumeration> getStyleNames() { return call_method<"getStyleNames", jni::ref<java::util::Enumeration>>(); }
	void addChangeListener(jni::ref<javax::swing::event::ChangeListener> p1) { return call_method<"addChangeListener", void>(p1); }
	void removeChangeListener(jni::ref<javax::swing::event::ChangeListener> p1) { return call_method<"removeChangeListener", void>(p1); }
	jni::ref<jni::array<javax::swing::event::ChangeListener>> getChangeListeners() { return call_method<"getChangeListeners", jni::ref<jni::array<javax::swing::event::ChangeListener>>>(); }
	jni::ref<java::awt::Font> getFont(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	jni::ref<java::awt::Color> getForeground(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getForeground", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getBackground(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getBackground", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Font> getFont(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1, p2, p3); }
	jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<java::awt::Font> p1) { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1); }
	jni::ref<javax::swing::text::AttributeSet> addAttribute(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"addAttribute", jni::ref<javax::swing::text::AttributeSet>>(p1, p2, p3); }
	jni::ref<javax::swing::text::AttributeSet> addAttributes(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<javax::swing::text::AttributeSet> p2) { return call_method<"addAttributes", jni::ref<javax::swing::text::AttributeSet>>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> removeAttribute(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<java::lang::Object> p2) { return call_method<"removeAttribute", jni::ref<javax::swing::text::AttributeSet>>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> removeAttributes(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<java::util::Enumeration> p2) { return call_method<"removeAttributes", jni::ref<javax::swing::text::AttributeSet>>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> removeAttributes(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<javax::swing::text::AttributeSet> p2) { return call_method<"removeAttributes", jni::ref<javax::swing::text::AttributeSet>>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> getEmptySet() { return call_method<"getEmptySet", jni::ref<javax::swing::text::AttributeSet>>(); }
	void reclaim(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"reclaim", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void writeAttributes(jni::ref<java::io::ObjectOutputStream> p1, jni::ref<javax::swing::text::AttributeSet> p2) { return call_method<"writeAttributes", void>(p1, p2); }
	void readAttributes(jni::ref<java::io::ObjectInputStream> p1, jni::ref<javax::swing::text::MutableAttributeSet> p2) { return call_method<"readAttributes", void>(p1, p2); }
	static void writeAttributeSet(jni::ref<java::io::ObjectOutputStream> p1, jni::ref<javax::swing::text::AttributeSet> p2) { return call_static_method<"writeAttributeSet", void>(p1, p2); }
	static void readAttributeSet(jni::ref<java::io::ObjectInputStream> p1, jni::ref<javax::swing::text::MutableAttributeSet> p2) { return call_static_method<"readAttributeSet", void>(p1, p2); }
	static void registerStaticAttributeKey(jni::ref<java::lang::Object> p1) { return call_static_method<"registerStaticAttributeKey", void>(p1); }
	static jni::ref<java::lang::Object> getStaticAttribute(jni::ref<java::lang::Object> p1) { return call_static_method<"getStaticAttribute", jni::ref<java::lang::Object>>(p1); }
	static jni::ref<java::lang::Object> getStaticAttributeKey(jni::ref<java::lang::Object> p1) { return call_static_method<"getStaticAttributeKey", jni::ref<java::lang::Object>>(p1); }

protected:

	StyleContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_STYLECONTEXT
