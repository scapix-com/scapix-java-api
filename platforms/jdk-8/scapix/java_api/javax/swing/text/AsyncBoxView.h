// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/View.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ASYNCBOXVIEW_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ASYNCBOXVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text { class AsyncBoxView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::AsyncBoxView>
{
	static constexpr fixed_string class_name = "javax/swing/text/AsyncBoxView";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::View>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ASYNCBOXVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ASYNCBOXVIEW)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ASYNCBOXVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/Position_Bias.h>
#include <scapix/java_api/javax/swing/text/AsyncBoxView_ChildLocator.h>
#include <scapix/java_api/javax/swing/text/AsyncBoxView_ChildState.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::AsyncBoxView : public jni::object_base<"javax/swing/text/AsyncBoxView",
	javax::swing::text::View>
{
public:

	using ChildLocator = AsyncBoxView_ChildLocator;
	using ChildState = AsyncBoxView_ChildState;

	static jni::ref<javax::swing::text::AsyncBoxView> new_object(jni::ref<javax::swing::text::Element> p1, jint p2) { return base_::new_object(p1, p2); }
	jint getMajorAxis() { return call_method<"getMajorAxis", jint>(); }
	jint getMinorAxis() { return call_method<"getMinorAxis", jint>(); }
	jfloat getTopInset() { return call_method<"getTopInset", jfloat>(); }
	void setTopInset(jfloat p1) { return call_method<"setTopInset", void>(p1); }
	jfloat getBottomInset() { return call_method<"getBottomInset", jfloat>(); }
	void setBottomInset(jfloat p1) { return call_method<"setBottomInset", void>(p1); }
	jfloat getLeftInset() { return call_method<"getLeftInset", jfloat>(); }
	void setLeftInset(jfloat p1) { return call_method<"setLeftInset", void>(p1); }
	jfloat getRightInset() { return call_method<"getRightInset", jfloat>(); }
	void setRightInset(jfloat p1) { return call_method<"setRightInset", void>(p1); }
	void replace(jint p1, jint p2, jni::ref<jni::array<javax::swing::text::View>> p3) { return call_method<"replace", void>(p1, p2, p3); }
	void setParent(jni::ref<javax::swing::text::View> p1) { return call_method<"setParent", void>(p1); }
	void preferenceChanged(jni::ref<javax::swing::text::View> p1, jboolean p2, jboolean p3) { return call_method<"preferenceChanged", void>(p1, p2, p3); }
	void setSize(jfloat p1, jfloat p2) { return call_method<"setSize", void>(p1, p2); }
	void paint(jni::ref<java::awt::Graphics> p1, jni::ref<java::awt::Shape> p2) { return call_method<"paint", void>(p1, p2); }
	jfloat getPreferredSpan(jint p1) { return call_method<"getPreferredSpan", jfloat>(p1); }
	jfloat getMinimumSpan(jint p1) { return call_method<"getMinimumSpan", jfloat>(p1); }
	jfloat getMaximumSpan(jint p1) { return call_method<"getMaximumSpan", jfloat>(p1); }
	jint getViewCount() { return call_method<"getViewCount", jint>(); }
	jni::ref<javax::swing::text::View> getView(jint p1) { return call_method<"getView", jni::ref<javax::swing::text::View>>(p1); }
	jni::ref<java::awt::Shape> getChildAllocation(jint p1, jni::ref<java::awt::Shape> p2) { return call_method<"getChildAllocation", jni::ref<java::awt::Shape>>(p1, p2); }
	jint getViewIndex(jint p1, jni::ref<javax::swing::text::Position_Bias> p2) { return call_method<"getViewIndex", jint>(p1, p2); }
	jni::ref<java::awt::Shape> modelToView(jint p1, jni::ref<java::awt::Shape> p2, jni::ref<javax::swing::text::Position_Bias> p3) { return call_method<"modelToView", jni::ref<java::awt::Shape>>(p1, p2, p3); }
	jint viewToModel(jfloat p1, jfloat p2, jni::ref<java::awt::Shape> p3, jni::ref<jni::array<javax::swing::text::Position_Bias>> p4) { return call_method<"viewToModel", jint>(p1, p2, p3, p4); }
	jint getNextVisualPositionFrom(jint p1, jni::ref<javax::swing::text::Position_Bias> p2, jni::ref<java::awt::Shape> p3, jint p4, jni::ref<jni::array<javax::swing::text::Position_Bias>> p5) { return call_method<"getNextVisualPositionFrom", jint>(p1, p2, p3, p4, p5); }

protected:

	AsyncBoxView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_ASYNCBOXVIEW
