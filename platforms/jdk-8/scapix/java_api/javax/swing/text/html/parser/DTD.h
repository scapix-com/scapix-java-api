// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/swing/text/html/parser/DTDConstants.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_DTD_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_DTD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::html::parser { class DTD; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::html::parser::DTD>
{
	static constexpr fixed_string class_name = "javax/swing/text/html/parser/DTD";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::swing::text::html::parser::DTDConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_DTD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_DTD)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_DTD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/DataInputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/BitSet.h>
#include <scapix/java_api/java/util/Hashtable.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/swing/text/html/parser/AttributeList.h>
#include <scapix/java_api/javax/swing/text/html/parser/ContentModel.h>
#include <scapix/java_api/javax/swing/text/html/parser/Element.h>
#include <scapix/java_api/javax/swing/text/html/parser/Entity.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::html::parser::DTD : public jni::object_base<"javax/swing/text/html/parser/DTD",
	java::lang::Object,
	javax::swing::text::html::parser::DTDConstants>
{
public:

	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jni::ref<java::util::Vector> elements() { return get_field<"elements", jni::ref<java::util::Vector>>(); }
	void elements(jni::ref<java::util::Vector> v) { set_field<"elements", jni::ref<java::util::Vector>>(v); }
	jni::ref<java::util::Hashtable> elementHash() { return get_field<"elementHash", jni::ref<java::util::Hashtable>>(); }
	void elementHash(jni::ref<java::util::Hashtable> v) { set_field<"elementHash", jni::ref<java::util::Hashtable>>(v); }
	jni::ref<java::util::Hashtable> entityHash() { return get_field<"entityHash", jni::ref<java::util::Hashtable>>(); }
	void entityHash(jni::ref<java::util::Hashtable> v) { set_field<"entityHash", jni::ref<java::util::Hashtable>>(v); }
	jni::ref<javax::swing::text::html::parser::Element> pcdata() { return get_field<"pcdata", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> html() { return get_field<"html", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> meta() { return get_field<"meta", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> base() { return get_field<"base", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> isindex() { return get_field<"isindex", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> head() { return get_field<"head", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> body() { return get_field<"body", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> applet() { return get_field<"applet", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> param() { return get_field<"param", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> p() { return get_field<"p", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<javax::swing::text::html::parser::Element> title() { return get_field<"title", jni::ref<javax::swing::text::html::parser::Element>>(); }
	static jint FILE_VERSION() { return get_static_field<"FILE_VERSION", jint>(); }

	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<javax::swing::text::html::parser::Entity> getEntity(jni::ref<java::lang::String> p1) { return call_method<"getEntity", jni::ref<javax::swing::text::html::parser::Entity>>(p1); }
	jni::ref<javax::swing::text::html::parser::Entity> getEntity(jint p1) { return call_method<"getEntity", jni::ref<javax::swing::text::html::parser::Entity>>(p1); }
	jni::ref<javax::swing::text::html::parser::Element> getElement(jni::ref<java::lang::String> p1) { return call_method<"getElement", jni::ref<javax::swing::text::html::parser::Element>>(p1); }
	jni::ref<javax::swing::text::html::parser::Element> getElement(jint p1) { return call_method<"getElement", jni::ref<javax::swing::text::html::parser::Element>>(p1); }
	jni::ref<javax::swing::text::html::parser::Entity> defineEntity(jni::ref<java::lang::String> p1, jint p2, jni::ref<jni::array<jchar>> p3) { return call_method<"defineEntity", jni::ref<javax::swing::text::html::parser::Entity>>(p1, p2, p3); }
	jni::ref<javax::swing::text::html::parser::Element> defineElement(jni::ref<java::lang::String> p1, jint p2, jboolean p3, jboolean p4, jni::ref<javax::swing::text::html::parser::ContentModel> p5, jni::ref<java::util::BitSet> p6, jni::ref<java::util::BitSet> p7, jni::ref<javax::swing::text::html::parser::AttributeList> p8) { return call_method<"defineElement", jni::ref<javax::swing::text::html::parser::Element>>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void defineAttributes(jni::ref<java::lang::String> p1, jni::ref<javax::swing::text::html::parser::AttributeList> p2) { return call_method<"defineAttributes", void>(p1, p2); }
	jni::ref<javax::swing::text::html::parser::Entity> defEntity(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"defEntity", jni::ref<javax::swing::text::html::parser::Entity>>(p1, p2, p3); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static void putDTDHash(jni::ref<java::lang::String> p1, jni::ref<javax::swing::text::html::parser::DTD> p2) { return call_static_method<"putDTDHash", void>(p1, p2); }
	static jni::ref<javax::swing::text::html::parser::DTD> getDTD(jni::ref<java::lang::String> p1) { return call_static_method<"getDTD", jni::ref<javax::swing::text::html::parser::DTD>>(p1); }
	void read(jni::ref<java::io::DataInputStream> p1) { return call_method<"read", void>(p1); }

protected:

	DTD(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_DTD
