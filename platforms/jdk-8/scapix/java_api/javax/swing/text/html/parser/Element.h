// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/swing/text/html/parser/DTDConstants.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ELEMENT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ELEMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::html::parser { class Element; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::html::parser::Element>
{
	static constexpr fixed_string class_name = "javax/swing/text/html/parser/Element";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::swing::text::html::parser::DTDConstants, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ELEMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ELEMENT)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ELEMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/BitSet.h>
#include <scapix/java_api/javax/swing/text/html/parser/AttributeList.h>
#include <scapix/java_api/javax/swing/text/html/parser/ContentModel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::html::parser::Element : public jni::object_base<"javax/swing/text/html/parser/Element",
	java::lang::Object,
	javax::swing::text::html::parser::DTDConstants,
	java::io::Serializable>
{
public:

	jint index() { return get_field<"index", jint>(); }
	void index(jint v) { set_field<"index", jint>(v); }
	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jboolean oStart() { return get_field<"oStart", jboolean>(); }
	void oStart(jboolean v) { set_field<"oStart", jboolean>(v); }
	jboolean oEnd() { return get_field<"oEnd", jboolean>(); }
	void oEnd(jboolean v) { set_field<"oEnd", jboolean>(v); }
	jni::ref<java::util::BitSet> inclusions() { return get_field<"inclusions", jni::ref<java::util::BitSet>>(); }
	void inclusions(jni::ref<java::util::BitSet> v) { set_field<"inclusions", jni::ref<java::util::BitSet>>(v); }
	jni::ref<java::util::BitSet> exclusions() { return get_field<"exclusions", jni::ref<java::util::BitSet>>(); }
	void exclusions(jni::ref<java::util::BitSet> v) { set_field<"exclusions", jni::ref<java::util::BitSet>>(v); }
	jint type() { return get_field<"type", jint>(); }
	void type(jint v) { set_field<"type", jint>(v); }
	jni::ref<javax::swing::text::html::parser::ContentModel> content() { return get_field<"content", jni::ref<javax::swing::text::html::parser::ContentModel>>(); }
	void content(jni::ref<javax::swing::text::html::parser::ContentModel> v) { set_field<"content", jni::ref<javax::swing::text::html::parser::ContentModel>>(v); }
	jni::ref<javax::swing::text::html::parser::AttributeList> atts() { return get_field<"atts", jni::ref<javax::swing::text::html::parser::AttributeList>>(); }
	void atts(jni::ref<javax::swing::text::html::parser::AttributeList> v) { set_field<"atts", jni::ref<javax::swing::text::html::parser::AttributeList>>(v); }
	jni::ref<java::lang::Object> data() { return get_field<"data", jni::ref<java::lang::Object>>(); }
	void data(jni::ref<java::lang::Object> v) { set_field<"data", jni::ref<java::lang::Object>>(v); }

	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jboolean omitStart() { return call_method<"omitStart", jboolean>(); }
	jboolean omitEnd() { return call_method<"omitEnd", jboolean>(); }
	jint getType() { return call_method<"getType", jint>(); }
	jni::ref<javax::swing::text::html::parser::ContentModel> getContent() { return call_method<"getContent", jni::ref<javax::swing::text::html::parser::ContentModel>>(); }
	jni::ref<javax::swing::text::html::parser::AttributeList> getAttributes() { return call_method<"getAttributes", jni::ref<javax::swing::text::html::parser::AttributeList>>(); }
	jint getIndex() { return call_method<"getIndex", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<javax::swing::text::html::parser::AttributeList> getAttribute(jni::ref<java::lang::String> p1) { return call_method<"getAttribute", jni::ref<javax::swing::text::html::parser::AttributeList>>(p1); }
	jni::ref<javax::swing::text::html::parser::AttributeList> getAttributeByValue(jni::ref<java::lang::String> p1) { return call_method<"getAttributeByValue", jni::ref<javax::swing::text::html::parser::AttributeList>>(p1); }
	static jint name2type(jni::ref<java::lang::String> p1) { return call_static_method<"name2type", jint>(p1); }

protected:

	Element(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ELEMENT
