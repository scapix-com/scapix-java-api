// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/StyleContext.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_STYLESHEET_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_STYLESHEET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::html { class StyleSheet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::html::StyleSheet>
{
	static constexpr fixed_string class_name = "javax/swing/text/html/StyleSheet";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::StyleContext>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_STYLESHEET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_STYLESHEET)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_STYLESHEET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/MutableAttributeSet.h>
#include <scapix/java_api/javax/swing/text/Style.h>
#include <scapix/java_api/javax/swing/text/View.h>
#include <scapix/java_api/javax/swing/text/html/CSS_Attribute.h>
#include <scapix/java_api/javax/swing/text/html/HTML_Tag.h>
#include <scapix/java_api/javax/swing/text/html/StyleSheet_BoxPainter.h>
#include <scapix/java_api/javax/swing/text/html/StyleSheet_ListPainter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::html::StyleSheet : public jni::object_base<"javax/swing/text/html/StyleSheet",
	javax::swing::text::StyleContext>
{
public:

	using BoxPainter = StyleSheet_BoxPainter;
	using ListPainter = StyleSheet_ListPainter;

	static jni::ref<javax::swing::text::html::StyleSheet> new_object() { return base_::new_object(); }
	jni::ref<javax::swing::text::Style> getRule(jni::ref<javax::swing::text::html::HTML_Tag> p1, jni::ref<javax::swing::text::Element> p2) { return call_method<"getRule", jni::ref<javax::swing::text::Style>>(p1, p2); }
	jni::ref<javax::swing::text::Style> getRule(jni::ref<java::lang::String> p1) { return call_method<"getRule", jni::ref<javax::swing::text::Style>>(p1); }
	void addRule(jni::ref<java::lang::String> p1) { return call_method<"addRule", void>(p1); }
	jni::ref<javax::swing::text::AttributeSet> getDeclaration(jni::ref<java::lang::String> p1) { return call_method<"getDeclaration", jni::ref<javax::swing::text::AttributeSet>>(p1); }
	void loadRules(jni::ref<java::io::Reader> p1, jni::ref<java::net::URL> p2) { return call_method<"loadRules", void>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> getViewAttributes(jni::ref<javax::swing::text::View> p1) { return call_method<"getViewAttributes", jni::ref<javax::swing::text::AttributeSet>>(p1); }
	void removeStyle(jni::ref<java::lang::String> p1) { return call_method<"removeStyle", void>(p1); }
	void addStyleSheet(jni::ref<javax::swing::text::html::StyleSheet> p1) { return call_method<"addStyleSheet", void>(p1); }
	void removeStyleSheet(jni::ref<javax::swing::text::html::StyleSheet> p1) { return call_method<"removeStyleSheet", void>(p1); }
	jni::ref<jni::array<javax::swing::text::html::StyleSheet>> getStyleSheets() { return call_method<"getStyleSheets", jni::ref<jni::array<javax::swing::text::html::StyleSheet>>>(); }
	void importStyleSheet(jni::ref<java::net::URL> p1) { return call_method<"importStyleSheet", void>(p1); }
	void setBase(jni::ref<java::net::URL> p1) { return call_method<"setBase", void>(p1); }
	jni::ref<java::net::URL> getBase() { return call_method<"getBase", jni::ref<java::net::URL>>(); }
	void addCSSAttribute(jni::ref<javax::swing::text::MutableAttributeSet> p1, jni::ref<javax::swing::text::html::CSS_Attribute> p2, jni::ref<java::lang::String> p3) { return call_method<"addCSSAttribute", void>(p1, p2, p3); }
	jboolean addCSSAttributeFromHTML(jni::ref<javax::swing::text::MutableAttributeSet> p1, jni::ref<javax::swing::text::html::CSS_Attribute> p2, jni::ref<java::lang::String> p3) { return call_method<"addCSSAttributeFromHTML", jboolean>(p1, p2, p3); }
	jni::ref<javax::swing::text::AttributeSet> translateHTMLToCSS(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"translateHTMLToCSS", jni::ref<javax::swing::text::AttributeSet>>(p1); }
	jni::ref<javax::swing::text::AttributeSet> addAttribute(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"addAttribute", jni::ref<javax::swing::text::AttributeSet>>(p1, p2, p3); }
	jni::ref<javax::swing::text::AttributeSet> addAttributes(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<javax::swing::text::AttributeSet> p2) { return call_method<"addAttributes", jni::ref<javax::swing::text::AttributeSet>>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> removeAttribute(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<java::lang::Object> p2) { return call_method<"removeAttribute", jni::ref<javax::swing::text::AttributeSet>>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> removeAttributes(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<java::util::Enumeration> p2) { return call_method<"removeAttributes", jni::ref<javax::swing::text::AttributeSet>>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> removeAttributes(jni::ref<javax::swing::text::AttributeSet> p1, jni::ref<javax::swing::text::AttributeSet> p2) { return call_method<"removeAttributes", jni::ref<javax::swing::text::AttributeSet>>(p1, p2); }
	jni::ref<java::awt::Font> getFont(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	jni::ref<java::awt::Color> getForeground(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getForeground", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getBackground(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getBackground", jni::ref<java::awt::Color>>(p1); }
	jni::ref<javax::swing::text::html::StyleSheet_BoxPainter> getBoxPainter(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getBoxPainter", jni::ref<javax::swing::text::html::StyleSheet_BoxPainter>>(p1); }
	jni::ref<javax::swing::text::html::StyleSheet_ListPainter> getListPainter(jni::ref<javax::swing::text::AttributeSet> p1) { return call_method<"getListPainter", jni::ref<javax::swing::text::html::StyleSheet_ListPainter>>(p1); }
	void setBaseFontSize(jint p1) { return call_method<"setBaseFontSize", void>(p1); }
	void setBaseFontSize(jni::ref<java::lang::String> p1) { return call_method<"setBaseFontSize", void>(p1); }
	static jint getIndexOfSize(jfloat p1) { return call_static_method<"getIndexOfSize", jint>(p1); }
	jfloat getPointSize(jint p1) { return call_method<"getPointSize", jfloat>(p1); }
	jfloat getPointSize(jni::ref<java::lang::String> p1) { return call_method<"getPointSize", jfloat>(p1); }
	jni::ref<java::awt::Color> stringToColor(jni::ref<java::lang::String> p1) { return call_method<"stringToColor", jni::ref<java::awt::Color>>(p1); }

protected:

	StyleSheet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_STYLESHEET
