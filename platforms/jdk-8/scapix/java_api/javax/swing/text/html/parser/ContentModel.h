// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_CONTENTMODEL_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_CONTENTMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::html::parser { class ContentModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::html::parser::ContentModel>
{
	static constexpr fixed_string class_name = "javax/swing/text/html/parser/ContentModel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_CONTENTMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_CONTENTMODEL)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_CONTENTMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/swing/text/html/parser/Element.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::html::parser::ContentModel : public jni::object_base<"javax/swing/text/html/parser/ContentModel",
	java::lang::Object,
	java::io::Serializable>
{
public:

	jint type() { return get_field<"type", jint>(); }
	void type(jint v) { set_field<"type", jint>(v); }
	jni::ref<java::lang::Object> content() { return get_field<"content", jni::ref<java::lang::Object>>(); }
	void content(jni::ref<java::lang::Object> v) { set_field<"content", jni::ref<java::lang::Object>>(v); }
	jni::ref<javax::swing::text::html::parser::ContentModel> next() { return get_field<"next", jni::ref<javax::swing::text::html::parser::ContentModel>>(); }
	void next(jni::ref<javax::swing::text::html::parser::ContentModel> v) { set_field<"next", jni::ref<javax::swing::text::html::parser::ContentModel>>(v); }

	static jni::ref<javax::swing::text::html::parser::ContentModel> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::text::html::parser::ContentModel> new_object(jni::ref<javax::swing::text::html::parser::Element> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::text::html::parser::ContentModel> new_object(jint p1, jni::ref<javax::swing::text::html::parser::ContentModel> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::text::html::parser::ContentModel> new_object(jint p1, jni::ref<java::lang::Object> p2, jni::ref<javax::swing::text::html::parser::ContentModel> p3) { return base_::new_object(p1, p2, p3); }
	jboolean empty() { return call_method<"empty", jboolean>(); }
	void getElements(jni::ref<java::util::Vector> p1) { return call_method<"getElements", void>(p1); }
	jboolean first(jni::ref<java::lang::Object> p1) { return call_method<"first", jboolean>(p1); }
	jni::ref<javax::swing::text::html::parser::Element> first() { return call_method<"first", jni::ref<javax::swing::text::html::parser::Element>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ContentModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_CONTENTMODEL
