// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/DefaultStyledDocument.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_HTMLDOCUMENT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_HTMLDOCUMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::html { class HTMLDocument; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::html::HTMLDocument>
{
	static constexpr fixed_string class_name = "javax/swing/text/html/HTMLDocument";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::DefaultStyledDocument>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_HTMLDOCUMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_HTMLDOCUMENT)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_HTMLDOCUMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/javax/swing/text/AbstractDocument_Content.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/Element.h>
#include <scapix/java_api/javax/swing/text/html/HTML_Tag.h>
#include <scapix/java_api/javax/swing/text/html/HTMLDocument_Iterator.h>
#include <scapix/java_api/javax/swing/text/html/HTMLEditorKit_Parser.h>
#include <scapix/java_api/javax/swing/text/html/HTMLEditorKit_ParserCallback.h>
#include <scapix/java_api/javax/swing/text/html/HTMLFrameHyperlinkEvent.h>
#include <scapix/java_api/javax/swing/text/html/StyleSheet.h>
#include <scapix/java_api/javax/swing/text/html/HTMLDocument_HTMLReader.h>
#include <scapix/java_api/javax/swing/text/html/HTMLDocument_RunElement.h>
#include <scapix/java_api/javax/swing/text/html/HTMLDocument_BlockElement.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::html::HTMLDocument : public jni::object_base<"javax/swing/text/html/HTMLDocument",
	javax::swing::text::DefaultStyledDocument>
{
public:

	using Iterator = HTMLDocument_Iterator;
	using HTMLReader = HTMLDocument_HTMLReader;
	using RunElement = HTMLDocument_RunElement;
	using BlockElement = HTMLDocument_BlockElement;

	static jni::ref<java::lang::String> AdditionalComments() { return get_static_field<"AdditionalComments", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::swing::text::html::HTMLDocument> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::text::html::HTMLDocument> new_object(jni::ref<javax::swing::text::html::StyleSheet> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::text::html::HTMLDocument> new_object(jni::ref<javax::swing::text::AbstractDocument_Content> p1, jni::ref<javax::swing::text::html::StyleSheet> p2) { return base_::new_object(p1, p2); }
	jni::ref<javax::swing::text::html::HTMLEditorKit_ParserCallback> getReader(jint p1) { return call_method<"getReader", jni::ref<javax::swing::text::html::HTMLEditorKit_ParserCallback>>(p1); }
	jni::ref<javax::swing::text::html::HTMLEditorKit_ParserCallback> getReader(jint p1, jint p2, jint p3, jni::ref<javax::swing::text::html::HTML_Tag> p4) { return call_method<"getReader", jni::ref<javax::swing::text::html::HTMLEditorKit_ParserCallback>>(p1, p2, p3, p4); }
	jni::ref<java::net::URL> getBase() { return call_method<"getBase", jni::ref<java::net::URL>>(); }
	void setBase(jni::ref<java::net::URL> p1) { return call_method<"setBase", void>(p1); }
	void setParagraphAttributes(jint p1, jint p2, jni::ref<javax::swing::text::AttributeSet> p3, jboolean p4) { return call_method<"setParagraphAttributes", void>(p1, p2, p3, p4); }
	jni::ref<javax::swing::text::html::StyleSheet> getStyleSheet() { return call_method<"getStyleSheet", jni::ref<javax::swing::text::html::StyleSheet>>(); }
	jni::ref<javax::swing::text::html::HTMLDocument_Iterator> getIterator(jni::ref<javax::swing::text::html::HTML_Tag> p1) { return call_method<"getIterator", jni::ref<javax::swing::text::html::HTMLDocument_Iterator>>(p1); }
	void setTokenThreshold(jint p1) { return call_method<"setTokenThreshold", void>(p1); }
	jint getTokenThreshold() { return call_method<"getTokenThreshold", jint>(); }
	void setPreservesUnknownTags(jboolean p1) { return call_method<"setPreservesUnknownTags", void>(p1); }
	jboolean getPreservesUnknownTags() { return call_method<"getPreservesUnknownTags", jboolean>(); }
	void processHTMLFrameHyperlinkEvent(jni::ref<javax::swing::text::html::HTMLFrameHyperlinkEvent> p1) { return call_method<"processHTMLFrameHyperlinkEvent", void>(p1); }
	void setParser(jni::ref<javax::swing::text::html::HTMLEditorKit_Parser> p1) { return call_method<"setParser", void>(p1); }
	jni::ref<javax::swing::text::html::HTMLEditorKit_Parser> getParser() { return call_method<"getParser", jni::ref<javax::swing::text::html::HTMLEditorKit_Parser>>(); }
	void setInnerHTML(jni::ref<javax::swing::text::Element> p1, jni::ref<java::lang::String> p2) { return call_method<"setInnerHTML", void>(p1, p2); }
	void setOuterHTML(jni::ref<javax::swing::text::Element> p1, jni::ref<java::lang::String> p2) { return call_method<"setOuterHTML", void>(p1, p2); }
	void insertAfterStart(jni::ref<javax::swing::text::Element> p1, jni::ref<java::lang::String> p2) { return call_method<"insertAfterStart", void>(p1, p2); }
	void insertBeforeEnd(jni::ref<javax::swing::text::Element> p1, jni::ref<java::lang::String> p2) { return call_method<"insertBeforeEnd", void>(p1, p2); }
	void insertBeforeStart(jni::ref<javax::swing::text::Element> p1, jni::ref<java::lang::String> p2) { return call_method<"insertBeforeStart", void>(p1, p2); }
	void insertAfterEnd(jni::ref<javax::swing::text::Element> p1, jni::ref<java::lang::String> p2) { return call_method<"insertAfterEnd", void>(p1, p2); }
	jni::ref<javax::swing::text::Element> getElement(jni::ref<java::lang::String> p1) { return call_method<"getElement", jni::ref<javax::swing::text::Element>>(p1); }
	jni::ref<javax::swing::text::Element> getElement(jni::ref<javax::swing::text::Element> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"getElement", jni::ref<javax::swing::text::Element>>(p1, p2, p3); }

protected:

	HTMLDocument(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_HTMLDOCUMENT
