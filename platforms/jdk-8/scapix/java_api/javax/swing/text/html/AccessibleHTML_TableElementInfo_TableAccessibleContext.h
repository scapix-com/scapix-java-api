// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/text/html/AccessibleHTML_HTMLAccessibleContext.h>
#include <scapix/java_api/javax/accessibility/AccessibleTable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_ACCESSIBLEHTML_TABLEELEMENTINFO_TABLEACCESSIBLECONTEXT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_ACCESSIBLEHTML_TABLEELEMENTINFO_TABLEACCESSIBLECONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::html { class AccessibleHTML_TableElementInfo_TableAccessibleContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::html::AccessibleHTML_TableElementInfo_TableAccessibleContext>
{
	static constexpr fixed_string class_name = "javax/swing/text/html/AccessibleHTML$TableElementInfo$TableAccessibleContext";
	using base_classes = std::tuple<scapix::java_api::javax::swing::text::html::AccessibleHTML_HTMLAccessibleContext, scapix::java_api::javax::accessibility::AccessibleTable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_ACCESSIBLEHTML_TABLEELEMENTINFO_TABLEACCESSIBLECONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_ACCESSIBLEHTML_TABLEELEMENTINFO_TABLEACCESSIBLECONTEXT)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_ACCESSIBLEHTML_TABLEELEMENTINFO_TABLEACCESSIBLECONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>
#include <scapix/java_api/javax/accessibility/AccessibleRole.h>
#include <scapix/java_api/javax/swing/text/html/AccessibleHTML_ElementInfo.h>
#include <scapix/java_api/javax/swing/text/html/AccessibleHTML_TableElementInfo.h>
#include <scapix/java_api/javax/swing/text/html/AccessibleHTML_TableElementInfo_TableCellElementInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::html::AccessibleHTML_TableElementInfo_TableAccessibleContext : public jni::object_base<"javax/swing/text/html/AccessibleHTML$TableElementInfo$TableAccessibleContext",
	javax::swing::text::html::AccessibleHTML_HTMLAccessibleContext,
	javax::accessibility::AccessibleTable>
{
public:

	static jni::ref<javax::swing::text::html::AccessibleHTML_TableElementInfo_TableAccessibleContext> new_object(jni::ref<javax::swing::text::html::AccessibleHTML_TableElementInfo> p1, jni::ref<javax::swing::text::html::AccessibleHTML_ElementInfo> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::String> getAccessibleName() { return call_method<"getAccessibleName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAccessibleDescription() { return call_method<"getAccessibleDescription", jni::ref<java::lang::String>>(); }
	jni::ref<javax::accessibility::AccessibleRole> getAccessibleRole() { return call_method<"getAccessibleRole", jni::ref<javax::accessibility::AccessibleRole>>(); }
	jint getAccessibleIndexInParent() { return call_method<"getAccessibleIndexInParent", jint>(); }
	jint getAccessibleChildrenCount() { return call_method<"getAccessibleChildrenCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleChild(jint p1) { return call_method<"getAccessibleChild", jni::ref<javax::accessibility::Accessible>>(p1); }
	jni::ref<javax::accessibility::AccessibleTable> getAccessibleTable() { return call_method<"getAccessibleTable", jni::ref<javax::accessibility::AccessibleTable>>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleCaption() { return call_method<"getAccessibleCaption", jni::ref<javax::accessibility::Accessible>>(); }
	void setAccessibleCaption(jni::ref<javax::accessibility::Accessible> p1) { return call_method<"setAccessibleCaption", void>(p1); }
	jni::ref<javax::accessibility::Accessible> getAccessibleSummary() { return call_method<"getAccessibleSummary", jni::ref<javax::accessibility::Accessible>>(); }
	void setAccessibleSummary(jni::ref<javax::accessibility::Accessible> p1) { return call_method<"setAccessibleSummary", void>(p1); }
	jint getAccessibleRowCount() { return call_method<"getAccessibleRowCount", jint>(); }
	jint getAccessibleColumnCount() { return call_method<"getAccessibleColumnCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleAt(jint p1, jint p2) { return call_method<"getAccessibleAt", jni::ref<javax::accessibility::Accessible>>(p1, p2); }
	jint getAccessibleRowExtentAt(jint p1, jint p2) { return call_method<"getAccessibleRowExtentAt", jint>(p1, p2); }
	jint getAccessibleColumnExtentAt(jint p1, jint p2) { return call_method<"getAccessibleColumnExtentAt", jint>(p1, p2); }
	jni::ref<javax::accessibility::AccessibleTable> getAccessibleRowHeader() { return call_method<"getAccessibleRowHeader", jni::ref<javax::accessibility::AccessibleTable>>(); }
	void setAccessibleRowHeader(jni::ref<javax::accessibility::AccessibleTable> p1) { return call_method<"setAccessibleRowHeader", void>(p1); }
	jni::ref<javax::accessibility::AccessibleTable> getAccessibleColumnHeader() { return call_method<"getAccessibleColumnHeader", jni::ref<javax::accessibility::AccessibleTable>>(); }
	void setAccessibleColumnHeader(jni::ref<javax::accessibility::AccessibleTable> p1) { return call_method<"setAccessibleColumnHeader", void>(p1); }
	jni::ref<javax::accessibility::Accessible> getAccessibleRowDescription(jint p1) { return call_method<"getAccessibleRowDescription", jni::ref<javax::accessibility::Accessible>>(p1); }
	void setAccessibleRowDescription(jint p1, jni::ref<javax::accessibility::Accessible> p2) { return call_method<"setAccessibleRowDescription", void>(p1, p2); }
	jni::ref<javax::accessibility::Accessible> getAccessibleColumnDescription(jint p1) { return call_method<"getAccessibleColumnDescription", jni::ref<javax::accessibility::Accessible>>(p1); }
	void setAccessibleColumnDescription(jint p1, jni::ref<javax::accessibility::Accessible> p2) { return call_method<"setAccessibleColumnDescription", void>(p1, p2); }
	jboolean isAccessibleSelected(jint p1, jint p2) { return call_method<"isAccessibleSelected", jboolean>(p1, p2); }
	jboolean isAccessibleRowSelected(jint p1) { return call_method<"isAccessibleRowSelected", jboolean>(p1); }
	jboolean isAccessibleColumnSelected(jint p1) { return call_method<"isAccessibleColumnSelected", jboolean>(p1); }
	jni::ref<jni::array<jint>> getSelectedAccessibleRows() { return call_method<"getSelectedAccessibleRows", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<jint>> getSelectedAccessibleColumns() { return call_method<"getSelectedAccessibleColumns", jni::ref<jni::array<jint>>>(); }
	jint getAccessibleRow(jint p1) { return call_method<"getAccessibleRow", jint>(p1); }
	jint getAccessibleColumn(jint p1) { return call_method<"getAccessibleColumn", jint>(p1); }
	jint getAccessibleIndex(jint p1, jint p2) { return call_method<"getAccessibleIndex", jint>(p1, p2); }
	jni::ref<java::lang::String> getAccessibleRowHeader(jint p1) { return call_method<"getAccessibleRowHeader", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAccessibleColumnHeader(jint p1) { return call_method<"getAccessibleColumnHeader", jni::ref<java::lang::String>>(p1); }
	void addRowHeader(jni::ref<javax::swing::text::html::AccessibleHTML_TableElementInfo_TableCellElementInfo> p1, jint p2) { return call_method<"addRowHeader", void>(p1, p2); }

protected:

	AccessibleHTML_TableElementInfo_TableAccessibleContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_ACCESSIBLEHTML_TABLEELEMENTINFO_TABLEACCESSIBLECONTEXT
