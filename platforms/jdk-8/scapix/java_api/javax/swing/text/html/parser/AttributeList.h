// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/swing/text/html/parser/DTDConstants.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ATTRIBUTELIST_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ATTRIBUTELIST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::text::html::parser { class AttributeList; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::text::html::parser::AttributeList>
{
	static constexpr fixed_string class_name = "javax/swing/text/html/parser/AttributeList";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::swing::text::html::parser::DTDConstants, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ATTRIBUTELIST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ATTRIBUTELIST)
#define SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ATTRIBUTELIST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::text::html::parser::AttributeList : public jni::object_base<"javax/swing/text/html/parser/AttributeList",
	java::lang::Object,
	javax::swing::text::html::parser::DTDConstants,
	java::io::Serializable>
{
public:

	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jint type() { return get_field<"type", jint>(); }
	void type(jint v) { set_field<"type", jint>(v); }
	jni::ref<java::util::Vector> values() { return get_field<"values", jni::ref<java::util::Vector>>(); }
	void values(jni::ref<java::util::Vector> v) { set_field<"values", jni::ref<java::util::Vector>>(v); }
	jint modifier() { return get_field<"modifier", jint>(); }
	void modifier(jint v) { set_field<"modifier", jint>(v); }
	jni::ref<java::lang::String> value() { return get_field<"value", jni::ref<java::lang::String>>(); }
	void value(jni::ref<java::lang::String> v) { set_field<"value", jni::ref<java::lang::String>>(v); }
	jni::ref<javax::swing::text::html::parser::AttributeList> next() { return get_field<"next", jni::ref<javax::swing::text::html::parser::AttributeList>>(); }
	void next(jni::ref<javax::swing::text::html::parser::AttributeList> v) { set_field<"next", jni::ref<javax::swing::text::html::parser::AttributeList>>(v); }

	static jni::ref<javax::swing::text::html::parser::AttributeList> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::text::html::parser::AttributeList> new_object(jni::ref<java::lang::String> p1, jint p2, jint p3, jni::ref<java::lang::String> p4, jni::ref<java::util::Vector> p5, jni::ref<javax::swing::text::html::parser::AttributeList> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getType() { return call_method<"getType", jint>(); }
	jint getModifier() { return call_method<"getModifier", jint>(); }
	jni::ref<java::util::Enumeration> getValues() { return call_method<"getValues", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::lang::String> getValue() { return call_method<"getValue", jni::ref<java::lang::String>>(); }
	jni::ref<javax::swing::text::html::parser::AttributeList> getNext() { return call_method<"getNext", jni::ref<javax::swing::text::html::parser::AttributeList>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jint name2type(jni::ref<java::lang::String> p1) { return call_static_method<"name2type", jint>(p1); }
	static jni::ref<java::lang::String> type2name(jint p1) { return call_static_method<"type2name", jni::ref<java::lang::String>>(p1); }

protected:

	AttributeList(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TEXT_HTML_PARSER_ATTRIBUTELIST
