// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/swing/SwingConstants.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_SWINGUTILITIES_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_SWINGUTILITIES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class SwingUtilities; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::SwingUtilities>
{
	static constexpr fixed_string class_name = "javax/swing/SwingUtilities";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::swing::SwingConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_SWINGUTILITIES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_SWINGUTILITIES)
#define SCAPIX_JAVA_API_JAVAX_SWING_SWINGUTILITIES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/Window.h>
#include <scapix/java_api/java/awt/event/KeyEvent.h>
#include <scapix/java_api/java/awt/event/MouseEvent.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>
#include <scapix/java_api/javax/accessibility/AccessibleStateSet.h>
#include <scapix/java_api/javax/swing/Action.h>
#include <scapix/java_api/javax/swing/ActionMap.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/InputMap.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/JRootPane.h>
#include <scapix/java_api/javax/swing/JViewport.h>
#include <scapix/java_api/javax/swing/KeyStroke.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::SwingUtilities : public jni::object_base<"javax/swing/SwingUtilities",
	java::lang::Object,
	javax::swing::SwingConstants>
{
public:

	static jboolean isRectangleContainingRectangle(jni::ref<java::awt::Rectangle> p1, jni::ref<java::awt::Rectangle> p2) { return call_static_method<"isRectangleContainingRectangle", jboolean>(p1, p2); }
	static jni::ref<java::awt::Rectangle> getLocalBounds(jni::ref<java::awt::Component> p1) { return call_static_method<"getLocalBounds", jni::ref<java::awt::Rectangle>>(p1); }
	static jni::ref<java::awt::Window> getWindowAncestor(jni::ref<java::awt::Component> p1) { return call_static_method<"getWindowAncestor", jni::ref<java::awt::Window>>(p1); }
	static jni::ref<java::awt::Point> convertPoint(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Point> p2, jni::ref<java::awt::Component> p3) { return call_static_method<"convertPoint", jni::ref<java::awt::Point>>(p1, p2, p3); }
	static jni::ref<java::awt::Point> convertPoint(jni::ref<java::awt::Component> p1, jint p2, jint p3, jni::ref<java::awt::Component> p4) { return call_static_method<"convertPoint", jni::ref<java::awt::Point>>(p1, p2, p3, p4); }
	static jni::ref<java::awt::Rectangle> convertRectangle(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Rectangle> p2, jni::ref<java::awt::Component> p3) { return call_static_method<"convertRectangle", jni::ref<java::awt::Rectangle>>(p1, p2, p3); }
	static jni::ref<java::awt::Container> getAncestorOfClass(jni::ref<java::lang::Class> p1, jni::ref<java::awt::Component> p2) { return call_static_method<"getAncestorOfClass", jni::ref<java::awt::Container>>(p1, p2); }
	static jni::ref<java::awt::Container> getAncestorNamed(jni::ref<java::lang::String> p1, jni::ref<java::awt::Component> p2) { return call_static_method<"getAncestorNamed", jni::ref<java::awt::Container>>(p1, p2); }
	static jni::ref<java::awt::Component> getDeepestComponentAt(jni::ref<java::awt::Component> p1, jint p2, jint p3) { return call_static_method<"getDeepestComponentAt", jni::ref<java::awt::Component>>(p1, p2, p3); }
	static jni::ref<java::awt::event::MouseEvent> convertMouseEvent(jni::ref<java::awt::Component> p1, jni::ref<java::awt::event::MouseEvent> p2, jni::ref<java::awt::Component> p3) { return call_static_method<"convertMouseEvent", jni::ref<java::awt::event::MouseEvent>>(p1, p2, p3); }
	static void convertPointToScreen(jni::ref<java::awt::Point> p1, jni::ref<java::awt::Component> p2) { return call_static_method<"convertPointToScreen", void>(p1, p2); }
	static void convertPointFromScreen(jni::ref<java::awt::Point> p1, jni::ref<java::awt::Component> p2) { return call_static_method<"convertPointFromScreen", void>(p1, p2); }
	static jni::ref<java::awt::Window> windowForComponent(jni::ref<java::awt::Component> p1) { return call_static_method<"windowForComponent", jni::ref<java::awt::Window>>(p1); }
	static jboolean isDescendingFrom(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Component> p2) { return call_static_method<"isDescendingFrom", jboolean>(p1, p2); }
	static jni::ref<java::awt::Rectangle> computeIntersection(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::Rectangle> p5) { return call_static_method<"computeIntersection", jni::ref<java::awt::Rectangle>>(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::Rectangle> computeUnion(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::Rectangle> p5) { return call_static_method<"computeUnion", jni::ref<java::awt::Rectangle>>(p1, p2, p3, p4, p5); }
	static jni::ref<jni::array<java::awt::Rectangle>> computeDifference(jni::ref<java::awt::Rectangle> p1, jni::ref<java::awt::Rectangle> p2) { return call_static_method<"computeDifference", jni::ref<jni::array<java::awt::Rectangle>>>(p1, p2); }
	static jboolean isLeftMouseButton(jni::ref<java::awt::event::MouseEvent> p1) { return call_static_method<"isLeftMouseButton", jboolean>(p1); }
	static jboolean isMiddleMouseButton(jni::ref<java::awt::event::MouseEvent> p1) { return call_static_method<"isMiddleMouseButton", jboolean>(p1); }
	static jboolean isRightMouseButton(jni::ref<java::awt::event::MouseEvent> p1) { return call_static_method<"isRightMouseButton", jboolean>(p1); }
	static jint computeStringWidth(jni::ref<java::awt::FontMetrics> p1, jni::ref<java::lang::String> p2) { return call_static_method<"computeStringWidth", jint>(p1, p2); }
	static jni::ref<java::lang::String> layoutCompoundLabel(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::FontMetrics> p2, jni::ref<java::lang::String> p3, jni::ref<javax::swing::Icon> p4, jint p5, jint p6, jint p7, jint p8, jni::ref<java::awt::Rectangle> p9, jni::ref<java::awt::Rectangle> p10, jni::ref<java::awt::Rectangle> p11, jint p12) { return call_static_method<"layoutCompoundLabel", jni::ref<java::lang::String>>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
	static jni::ref<java::lang::String> layoutCompoundLabel(jni::ref<java::awt::FontMetrics> p1, jni::ref<java::lang::String> p2, jni::ref<javax::swing::Icon> p3, jint p4, jint p5, jint p6, jint p7, jni::ref<java::awt::Rectangle> p8, jni::ref<java::awt::Rectangle> p9, jni::ref<java::awt::Rectangle> p10, jint p11) { return call_static_method<"layoutCompoundLabel", jni::ref<java::lang::String>>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	static void paintComponent(jni::ref<java::awt::Graphics> p1, jni::ref<java::awt::Component> p2, jni::ref<java::awt::Container> p3, jint p4, jint p5, jint p6, jint p7) { return call_static_method<"paintComponent", void>(p1, p2, p3, p4, p5, p6, p7); }
	static void paintComponent(jni::ref<java::awt::Graphics> p1, jni::ref<java::awt::Component> p2, jni::ref<java::awt::Container> p3, jni::ref<java::awt::Rectangle> p4) { return call_static_method<"paintComponent", void>(p1, p2, p3, p4); }
	static void updateComponentTreeUI(jni::ref<java::awt::Component> p1) { return call_static_method<"updateComponentTreeUI", void>(p1); }
	static void invokeLater(jni::ref<java::lang::Runnable> p1) { return call_static_method<"invokeLater", void>(p1); }
	static void invokeAndWait(jni::ref<java::lang::Runnable> p1) { return call_static_method<"invokeAndWait", void>(p1); }
	static jboolean isEventDispatchThread() { return call_static_method<"isEventDispatchThread", jboolean>(); }
	static jint getAccessibleIndexInParent(jni::ref<java::awt::Component> p1) { return call_static_method<"getAccessibleIndexInParent", jint>(p1); }
	static jni::ref<javax::accessibility::Accessible> getAccessibleAt(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Point> p2) { return call_static_method<"getAccessibleAt", jni::ref<javax::accessibility::Accessible>>(p1, p2); }
	static jni::ref<javax::accessibility::AccessibleStateSet> getAccessibleStateSet(jni::ref<java::awt::Component> p1) { return call_static_method<"getAccessibleStateSet", jni::ref<javax::accessibility::AccessibleStateSet>>(p1); }
	static jint getAccessibleChildrenCount(jni::ref<java::awt::Component> p1) { return call_static_method<"getAccessibleChildrenCount", jint>(p1); }
	static jni::ref<javax::accessibility::Accessible> getAccessibleChild(jni::ref<java::awt::Component> p1, jint p2) { return call_static_method<"getAccessibleChild", jni::ref<javax::accessibility::Accessible>>(p1, p2); }
	static jni::ref<java::awt::Component> findFocusOwner(jni::ref<java::awt::Component> p1) { return call_static_method<"findFocusOwner", jni::ref<java::awt::Component>>(p1); }
	static jni::ref<javax::swing::JRootPane> getRootPane(jni::ref<java::awt::Component> p1) { return call_static_method<"getRootPane", jni::ref<javax::swing::JRootPane>>(p1); }
	static jni::ref<java::awt::Component> getRoot(jni::ref<java::awt::Component> p1) { return call_static_method<"getRoot", jni::ref<java::awt::Component>>(p1); }
	static jboolean processKeyBindings(jni::ref<java::awt::event::KeyEvent> p1) { return call_static_method<"processKeyBindings", jboolean>(p1); }
	static jboolean notifyAction(jni::ref<javax::swing::Action> p1, jni::ref<javax::swing::KeyStroke> p2, jni::ref<java::awt::event::KeyEvent> p3, jni::ref<java::lang::Object> p4, jint p5) { return call_static_method<"notifyAction", jboolean>(p1, p2, p3, p4, p5); }
	static void replaceUIInputMap(jni::ref<javax::swing::JComponent> p1, jint p2, jni::ref<javax::swing::InputMap> p3) { return call_static_method<"replaceUIInputMap", void>(p1, p2, p3); }
	static void replaceUIActionMap(jni::ref<javax::swing::JComponent> p1, jni::ref<javax::swing::ActionMap> p2) { return call_static_method<"replaceUIActionMap", void>(p1, p2); }
	static jni::ref<javax::swing::InputMap> getUIInputMap(jni::ref<javax::swing::JComponent> p1, jint p2) { return call_static_method<"getUIInputMap", jni::ref<javax::swing::InputMap>>(p1, p2); }
	static jni::ref<javax::swing::ActionMap> getUIActionMap(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"getUIActionMap", jni::ref<javax::swing::ActionMap>>(p1); }
	static jni::ref<java::awt::Rectangle> calculateInnerArea(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::Rectangle> p2) { return call_static_method<"calculateInnerArea", jni::ref<java::awt::Rectangle>>(p1, p2); }
	static jni::ref<java::awt::Container> getUnwrappedParent(jni::ref<java::awt::Component> p1) { return call_static_method<"getUnwrappedParent", jni::ref<java::awt::Container>>(p1); }
	static jni::ref<java::awt::Component> getUnwrappedView(jni::ref<javax::swing::JViewport> p1) { return call_static_method<"getUnwrappedView", jni::ref<java::awt::Component>>(p1); }

protected:

	SwingUtilities(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_SWINGUTILITIES
