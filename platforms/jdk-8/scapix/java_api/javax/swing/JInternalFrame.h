// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>
#include <scapix/java_api/javax/swing/WindowConstants.h>
#include <scapix/java_api/javax/swing/RootPaneContainer.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JINTERNALFRAME_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JINTERNALFRAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JInternalFrame; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JInternalFrame>
{
	static constexpr fixed_string class_name = "javax/swing/JInternalFrame";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent, scapix::java_api::javax::accessibility::Accessible, scapix::java_api::javax::swing::WindowConstants, scapix::java_api::javax::swing::RootPaneContainer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JINTERNALFRAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JINTERNALFRAME)
#define SCAPIX_JAVA_API_JAVAX_SWING_JINTERNALFRAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/awt/Cursor.h>
#include <scapix/java_api/java/awt/LayoutManager.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/JDesktopPane.h>
#include <scapix/java_api/javax/swing/JInternalFrame_JDesktopIcon.h>
#include <scapix/java_api/javax/swing/JLayeredPane.h>
#include <scapix/java_api/javax/swing/JMenuBar.h>
#include <scapix/java_api/javax/swing/JRootPane.h>
#include <scapix/java_api/javax/swing/event/InternalFrameListener.h>
#include <scapix/java_api/javax/swing/plaf/InternalFrameUI.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JInternalFrame : public jni::object_base<"javax/swing/JInternalFrame",
	javax::swing::JComponent,
	javax::accessibility::Accessible,
	javax::swing::WindowConstants,
	javax::swing::RootPaneContainer>
{
public:

	using JDesktopIcon = JInternalFrame_JDesktopIcon;

	static jni::ref<java::lang::String> CONTENT_PANE_PROPERTY() { return get_static_field<"CONTENT_PANE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MENU_BAR_PROPERTY() { return get_static_field<"MENU_BAR_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TITLE_PROPERTY() { return get_static_field<"TITLE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LAYERED_PANE_PROPERTY() { return get_static_field<"LAYERED_PANE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ROOT_PANE_PROPERTY() { return get_static_field<"ROOT_PANE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GLASS_PANE_PROPERTY() { return get_static_field<"GLASS_PANE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FRAME_ICON_PROPERTY() { return get_static_field<"FRAME_ICON_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IS_SELECTED_PROPERTY() { return get_static_field<"IS_SELECTED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IS_CLOSED_PROPERTY() { return get_static_field<"IS_CLOSED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IS_MAXIMUM_PROPERTY() { return get_static_field<"IS_MAXIMUM_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IS_ICON_PROPERTY() { return get_static_field<"IS_ICON_PROPERTY", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::swing::JInternalFrame> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JInternalFrame> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JInternalFrame> new_object(jni::ref<java::lang::String> p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::JInternalFrame> new_object(jni::ref<java::lang::String> p1, jboolean p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::swing::JInternalFrame> new_object(jni::ref<java::lang::String> p1, jboolean p2, jboolean p3, jboolean p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<javax::swing::JInternalFrame> new_object(jni::ref<java::lang::String> p1, jboolean p2, jboolean p3, jboolean p4, jboolean p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	jni::ref<javax::swing::plaf::InternalFrameUI> getUI() { return call_method<"getUI", jni::ref<javax::swing::plaf::InternalFrameUI>>(); }
	void setUI(jni::ref<javax::swing::plaf::InternalFrameUI> p1) { return call_method<"setUI", void>(p1); }
	void updateUI() { return call_method<"updateUI", void>(); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	void remove(jni::ref<java::awt::Component> p1) { return call_method<"remove", void>(p1); }
	void setLayout(jni::ref<java::awt::LayoutManager> p1) { return call_method<"setLayout", void>(p1); }
	jni::ref<javax::swing::JMenuBar> getMenuBar() { return call_method<"getMenuBar", jni::ref<javax::swing::JMenuBar>>(); }
	jni::ref<javax::swing::JMenuBar> getJMenuBar() { return call_method<"getJMenuBar", jni::ref<javax::swing::JMenuBar>>(); }
	void setMenuBar(jni::ref<javax::swing::JMenuBar> p1) { return call_method<"setMenuBar", void>(p1); }
	void setJMenuBar(jni::ref<javax::swing::JMenuBar> p1) { return call_method<"setJMenuBar", void>(p1); }
	jni::ref<java::awt::Container> getContentPane() { return call_method<"getContentPane", jni::ref<java::awt::Container>>(); }
	void setContentPane(jni::ref<java::awt::Container> p1) { return call_method<"setContentPane", void>(p1); }
	jni::ref<javax::swing::JLayeredPane> getLayeredPane() { return call_method<"getLayeredPane", jni::ref<javax::swing::JLayeredPane>>(); }
	void setLayeredPane(jni::ref<javax::swing::JLayeredPane> p1) { return call_method<"setLayeredPane", void>(p1); }
	jni::ref<java::awt::Component> getGlassPane() { return call_method<"getGlassPane", jni::ref<java::awt::Component>>(); }
	void setGlassPane(jni::ref<java::awt::Component> p1) { return call_method<"setGlassPane", void>(p1); }
	jni::ref<javax::swing::JRootPane> getRootPane() { return call_method<"getRootPane", jni::ref<javax::swing::JRootPane>>(); }
	void setClosable(jboolean p1) { return call_method<"setClosable", void>(p1); }
	jboolean isClosable() { return call_method<"isClosable", jboolean>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	void setClosed(jboolean p1) { return call_method<"setClosed", void>(p1); }
	void setResizable(jboolean p1) { return call_method<"setResizable", void>(p1); }
	jboolean isResizable() { return call_method<"isResizable", jboolean>(); }
	void setIconifiable(jboolean p1) { return call_method<"setIconifiable", void>(p1); }
	jboolean isIconifiable() { return call_method<"isIconifiable", jboolean>(); }
	jboolean isIcon() { return call_method<"isIcon", jboolean>(); }
	void setIcon(jboolean p1) { return call_method<"setIcon", void>(p1); }
	void setMaximizable(jboolean p1) { return call_method<"setMaximizable", void>(p1); }
	jboolean isMaximizable() { return call_method<"isMaximizable", jboolean>(); }
	jboolean isMaximum() { return call_method<"isMaximum", jboolean>(); }
	void setMaximum(jboolean p1) { return call_method<"setMaximum", void>(p1); }
	jni::ref<java::lang::String> getTitle() { return call_method<"getTitle", jni::ref<java::lang::String>>(); }
	void setTitle(jni::ref<java::lang::String> p1) { return call_method<"setTitle", void>(p1); }
	void setSelected(jboolean p1) { return call_method<"setSelected", void>(p1); }
	jboolean isSelected() { return call_method<"isSelected", jboolean>(); }
	void setFrameIcon(jni::ref<javax::swing::Icon> p1) { return call_method<"setFrameIcon", void>(p1); }
	jni::ref<javax::swing::Icon> getFrameIcon() { return call_method<"getFrameIcon", jni::ref<javax::swing::Icon>>(); }
	void moveToFront() { return call_method<"moveToFront", void>(); }
	void moveToBack() { return call_method<"moveToBack", void>(); }
	jni::ref<java::awt::Cursor> getLastCursor() { return call_method<"getLastCursor", jni::ref<java::awt::Cursor>>(); }
	void setCursor(jni::ref<java::awt::Cursor> p1) { return call_method<"setCursor", void>(p1); }
	void setLayer(jni::ref<java::lang::Integer> p1) { return call_method<"setLayer", void>(p1); }
	void setLayer(jint p1) { return call_method<"setLayer", void>(p1); }
	jint getLayer() { return call_method<"getLayer", jint>(); }
	jni::ref<javax::swing::JDesktopPane> getDesktopPane() { return call_method<"getDesktopPane", jni::ref<javax::swing::JDesktopPane>>(); }
	void setDesktopIcon(jni::ref<javax::swing::JInternalFrame_JDesktopIcon> p1) { return call_method<"setDesktopIcon", void>(p1); }
	jni::ref<javax::swing::JInternalFrame_JDesktopIcon> getDesktopIcon() { return call_method<"getDesktopIcon", jni::ref<javax::swing::JInternalFrame_JDesktopIcon>>(); }
	jni::ref<java::awt::Rectangle> getNormalBounds() { return call_method<"getNormalBounds", jni::ref<java::awt::Rectangle>>(); }
	void setNormalBounds(jni::ref<java::awt::Rectangle> p1) { return call_method<"setNormalBounds", void>(p1); }
	jni::ref<java::awt::Component> getFocusOwner() { return call_method<"getFocusOwner", jni::ref<java::awt::Component>>(); }
	jni::ref<java::awt::Component> getMostRecentFocusOwner() { return call_method<"getMostRecentFocusOwner", jni::ref<java::awt::Component>>(); }
	void restoreSubcomponentFocus() { return call_method<"restoreSubcomponentFocus", void>(); }
	void reshape(jint p1, jint p2, jint p3, jint p4) { return call_method<"reshape", void>(p1, p2, p3, p4); }
	void addInternalFrameListener(jni::ref<javax::swing::event::InternalFrameListener> p1) { return call_method<"addInternalFrameListener", void>(p1); }
	void removeInternalFrameListener(jni::ref<javax::swing::event::InternalFrameListener> p1) { return call_method<"removeInternalFrameListener", void>(p1); }
	jni::ref<jni::array<javax::swing::event::InternalFrameListener>> getInternalFrameListeners() { return call_method<"getInternalFrameListeners", jni::ref<jni::array<javax::swing::event::InternalFrameListener>>>(); }
	void doDefaultCloseAction() { return call_method<"doDefaultCloseAction", void>(); }
	void setDefaultCloseOperation(jint p1) { return call_method<"setDefaultCloseOperation", void>(p1); }
	jint getDefaultCloseOperation() { return call_method<"getDefaultCloseOperation", jint>(); }
	void pack() { return call_method<"pack", void>(); }
	void show() { return call_method<"show", void>(); }
	void hide() { return call_method<"hide", void>(); }
	void dispose() { return call_method<"dispose", void>(); }
	void toFront() { return call_method<"toFront", void>(); }
	void toBack() { return call_method<"toBack", void>(); }
	void setFocusCycleRoot(jboolean p1) { return call_method<"setFocusCycleRoot", void>(p1); }
	jboolean isFocusCycleRoot() { return call_method<"isFocusCycleRoot", jboolean>(); }
	jni::ref<java::awt::Container> getFocusCycleRootAncestor() { return call_method<"getFocusCycleRootAncestor", jni::ref<java::awt::Container>>(); }
	jni::ref<java::lang::String> getWarningString() { return call_method<"getWarningString", jni::ref<java::lang::String>>(); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	JInternalFrame(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JINTERNALFRAME
