// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TRANSFERHANDLER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TRANSFERHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class TransferHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::TransferHandler>
{
	static constexpr fixed_string class_name = "javax/swing/TransferHandler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TRANSFERHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TRANSFERHANDLER)
#define SCAPIX_JAVA_API_JAVAX_SWING_TRANSFERHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/datatransfer/Clipboard.h>
#include <scapix/java_api/java/awt/datatransfer/DataFlavor.h>
#include <scapix/java_api/java/awt/datatransfer/Transferable.h>
#include <scapix/java_api/java/awt/event/InputEvent.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Action.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/TransferHandler_TransferSupport.h>
#include <scapix/java_api/javax/swing/TransferHandler_DropLocation.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::TransferHandler : public jni::object_base<"javax/swing/TransferHandler",
	java::lang::Object,
	java::io::Serializable>
{
public:

	using DropLocation = TransferHandler_DropLocation;
	using TransferSupport = TransferHandler_TransferSupport;

	static jint NONE() { return get_static_field<"NONE", jint>(); }
	static jint COPY() { return get_static_field<"COPY", jint>(); }
	static jint MOVE() { return get_static_field<"MOVE", jint>(); }
	static jint COPY_OR_MOVE() { return get_static_field<"COPY_OR_MOVE", jint>(); }
	static jint LINK() { return get_static_field<"LINK", jint>(); }

	static jni::ref<javax::swing::Action> getCutAction() { return call_static_method<"getCutAction", jni::ref<javax::swing::Action>>(); }
	static jni::ref<javax::swing::Action> getCopyAction() { return call_static_method<"getCopyAction", jni::ref<javax::swing::Action>>(); }
	static jni::ref<javax::swing::Action> getPasteAction() { return call_static_method<"getPasteAction", jni::ref<javax::swing::Action>>(); }
	static jni::ref<javax::swing::TransferHandler> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	void setDragImage(jni::ref<java::awt::Image> p1) { return call_method<"setDragImage", void>(p1); }
	jni::ref<java::awt::Image> getDragImage() { return call_method<"getDragImage", jni::ref<java::awt::Image>>(); }
	void setDragImageOffset(jni::ref<java::awt::Point> p1) { return call_method<"setDragImageOffset", void>(p1); }
	jni::ref<java::awt::Point> getDragImageOffset() { return call_method<"getDragImageOffset", jni::ref<java::awt::Point>>(); }
	void exportAsDrag(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::event::InputEvent> p2, jint p3) { return call_method<"exportAsDrag", void>(p1, p2, p3); }
	void exportToClipboard(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::datatransfer::Clipboard> p2, jint p3) { return call_method<"exportToClipboard", void>(p1, p2, p3); }
	jboolean importData(jni::ref<javax::swing::TransferHandler_TransferSupport> p1) { return call_method<"importData", jboolean>(p1); }
	jboolean importData(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::datatransfer::Transferable> p2) { return call_method<"importData", jboolean>(p1, p2); }
	jboolean canImport(jni::ref<javax::swing::TransferHandler_TransferSupport> p1) { return call_method<"canImport", jboolean>(p1); }
	jboolean canImport(jni::ref<javax::swing::JComponent> p1, jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> p2) { return call_method<"canImport", jboolean>(p1, p2); }
	jint getSourceActions(jni::ref<javax::swing::JComponent> p1) { return call_method<"getSourceActions", jint>(p1); }
	jni::ref<javax::swing::Icon> getVisualRepresentation(jni::ref<java::awt::datatransfer::Transferable> p1) { return call_method<"getVisualRepresentation", jni::ref<javax::swing::Icon>>(p1); }

protected:

	TransferHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TRANSFERHANDLER
