// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JEditorPane.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JTEXTPANE_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JTEXTPANE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JTextPane; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JTextPane>
{
	static constexpr fixed_string class_name = "javax/swing/JTextPane";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JEditorPane>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTEXTPANE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JTEXTPANE)
#define SCAPIX_JAVA_API_JAVAX_SWING_JTEXTPANE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#include <scapix/java_api/javax/swing/text/Document.h>
#include <scapix/java_api/javax/swing/text/EditorKit.h>
#include <scapix/java_api/javax/swing/text/MutableAttributeSet.h>
#include <scapix/java_api/javax/swing/text/Style.h>
#include <scapix/java_api/javax/swing/text/StyledDocument.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JTextPane : public jni::object_base<"javax/swing/JTextPane",
	javax::swing::JEditorPane>
{
public:

	static jni::ref<javax::swing::JTextPane> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JTextPane> new_object(jni::ref<javax::swing::text::StyledDocument> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	void setDocument(jni::ref<javax::swing::text::Document> p1) { return call_method<"setDocument", void>(p1); }
	void setStyledDocument(jni::ref<javax::swing::text::StyledDocument> p1) { return call_method<"setStyledDocument", void>(p1); }
	jni::ref<javax::swing::text::StyledDocument> getStyledDocument() { return call_method<"getStyledDocument", jni::ref<javax::swing::text::StyledDocument>>(); }
	void replaceSelection(jni::ref<java::lang::String> p1) { return call_method<"replaceSelection", void>(p1); }
	void insertComponent(jni::ref<java::awt::Component> p1) { return call_method<"insertComponent", void>(p1); }
	void insertIcon(jni::ref<javax::swing::Icon> p1) { return call_method<"insertIcon", void>(p1); }
	jni::ref<javax::swing::text::Style> addStyle(jni::ref<java::lang::String> p1, jni::ref<javax::swing::text::Style> p2) { return call_method<"addStyle", jni::ref<javax::swing::text::Style>>(p1, p2); }
	void removeStyle(jni::ref<java::lang::String> p1) { return call_method<"removeStyle", void>(p1); }
	jni::ref<javax::swing::text::Style> getStyle(jni::ref<java::lang::String> p1) { return call_method<"getStyle", jni::ref<javax::swing::text::Style>>(p1); }
	void setLogicalStyle(jni::ref<javax::swing::text::Style> p1) { return call_method<"setLogicalStyle", void>(p1); }
	jni::ref<javax::swing::text::Style> getLogicalStyle() { return call_method<"getLogicalStyle", jni::ref<javax::swing::text::Style>>(); }
	jni::ref<javax::swing::text::AttributeSet> getCharacterAttributes() { return call_method<"getCharacterAttributes", jni::ref<javax::swing::text::AttributeSet>>(); }
	void setCharacterAttributes(jni::ref<javax::swing::text::AttributeSet> p1, jboolean p2) { return call_method<"setCharacterAttributes", void>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> getParagraphAttributes() { return call_method<"getParagraphAttributes", jni::ref<javax::swing::text::AttributeSet>>(); }
	void setParagraphAttributes(jni::ref<javax::swing::text::AttributeSet> p1, jboolean p2) { return call_method<"setParagraphAttributes", void>(p1, p2); }
	jni::ref<javax::swing::text::MutableAttributeSet> getInputAttributes() { return call_method<"getInputAttributes", jni::ref<javax::swing::text::MutableAttributeSet>>(); }
	void setEditorKit(jni::ref<javax::swing::text::EditorKit> p1) { return call_method<"setEditorKit", void>(p1); }

protected:

	JTextPane(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTEXTPANE
