// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent_AccessibleJComponent.h>
#include <scapix/java_api/javax/accessibility/AccessibleAction.h>
#include <scapix/java_api/javax/accessibility/AccessibleValue.h>
#include <scapix/java_api/javax/accessibility/AccessibleText.h>
#include <scapix/java_api/javax/accessibility/AccessibleExtendedComponent.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_ABSTRACTBUTTON_ACCESSIBLEABSTRACTBUTTON_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_ABSTRACTBUTTON_ACCESSIBLEABSTRACTBUTTON_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class AbstractButton_AccessibleAbstractButton; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::AbstractButton_AccessibleAbstractButton>
{
	static constexpr fixed_string class_name = "javax/swing/AbstractButton$AccessibleAbstractButton";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent_AccessibleJComponent, scapix::java_api::javax::accessibility::AccessibleAction, scapix::java_api::javax::accessibility::AccessibleValue, scapix::java_api::javax::accessibility::AccessibleText, scapix::java_api::javax::accessibility::AccessibleExtendedComponent>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_ABSTRACTBUTTON_ACCESSIBLEABSTRACTBUTTON_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_ABSTRACTBUTTON_ACCESSIBLEABSTRACTBUTTON)
#define SCAPIX_JAVA_API_JAVAX_SWING_ABSTRACTBUTTON_ACCESSIBLEABSTRACTBUTTON

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleIcon.h>
#include <scapix/java_api/javax/accessibility/AccessibleKeyBinding.h>
#include <scapix/java_api/javax/accessibility/AccessibleRelationSet.h>
#include <scapix/java_api/javax/accessibility/AccessibleStateSet.h>
#include <scapix/java_api/javax/swing/text/AttributeSet.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::AbstractButton_AccessibleAbstractButton : public jni::object_base<"javax/swing/AbstractButton$AccessibleAbstractButton",
	javax::swing::JComponent_AccessibleJComponent,
	javax::accessibility::AccessibleAction,
	javax::accessibility::AccessibleValue,
	javax::accessibility::AccessibleText,
	javax::accessibility::AccessibleExtendedComponent>
{
public:

	jni::ref<java::lang::String> getAccessibleName() { return call_method<"getAccessibleName", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<javax::accessibility::AccessibleIcon>> getAccessibleIcon() { return call_method<"getAccessibleIcon", jni::ref<jni::array<javax::accessibility::AccessibleIcon>>>(); }
	jni::ref<javax::accessibility::AccessibleStateSet> getAccessibleStateSet() { return call_method<"getAccessibleStateSet", jni::ref<javax::accessibility::AccessibleStateSet>>(); }
	jni::ref<javax::accessibility::AccessibleRelationSet> getAccessibleRelationSet() { return call_method<"getAccessibleRelationSet", jni::ref<javax::accessibility::AccessibleRelationSet>>(); }
	jni::ref<javax::accessibility::AccessibleAction> getAccessibleAction() { return call_method<"getAccessibleAction", jni::ref<javax::accessibility::AccessibleAction>>(); }
	jni::ref<javax::accessibility::AccessibleValue> getAccessibleValue() { return call_method<"getAccessibleValue", jni::ref<javax::accessibility::AccessibleValue>>(); }
	jint getAccessibleActionCount() { return call_method<"getAccessibleActionCount", jint>(); }
	jni::ref<java::lang::String> getAccessibleActionDescription(jint p1) { return call_method<"getAccessibleActionDescription", jni::ref<java::lang::String>>(p1); }
	jboolean doAccessibleAction(jint p1) { return call_method<"doAccessibleAction", jboolean>(p1); }
	jni::ref<java::lang::Number> getCurrentAccessibleValue() { return call_method<"getCurrentAccessibleValue", jni::ref<java::lang::Number>>(); }
	jboolean setCurrentAccessibleValue(jni::ref<java::lang::Number> p1) { return call_method<"setCurrentAccessibleValue", jboolean>(p1); }
	jni::ref<java::lang::Number> getMinimumAccessibleValue() { return call_method<"getMinimumAccessibleValue", jni::ref<java::lang::Number>>(); }
	jni::ref<java::lang::Number> getMaximumAccessibleValue() { return call_method<"getMaximumAccessibleValue", jni::ref<java::lang::Number>>(); }
	jni::ref<javax::accessibility::AccessibleText> getAccessibleText() { return call_method<"getAccessibleText", jni::ref<javax::accessibility::AccessibleText>>(); }
	jint getIndexAtPoint(jni::ref<java::awt::Point> p1) { return call_method<"getIndexAtPoint", jint>(p1); }
	jni::ref<java::awt::Rectangle> getCharacterBounds(jint p1) { return call_method<"getCharacterBounds", jni::ref<java::awt::Rectangle>>(p1); }
	jint getCharCount() { return call_method<"getCharCount", jint>(); }
	jint getCaretPosition() { return call_method<"getCaretPosition", jint>(); }
	jni::ref<java::lang::String> getAtIndex(jint p1, jint p2) { return call_method<"getAtIndex", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getAfterIndex(jint p1, jint p2) { return call_method<"getAfterIndex", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getBeforeIndex(jint p1, jint p2) { return call_method<"getBeforeIndex", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<javax::swing::text::AttributeSet> getCharacterAttribute(jint p1) { return call_method<"getCharacterAttribute", jni::ref<javax::swing::text::AttributeSet>>(p1); }
	jint getSelectionStart() { return call_method<"getSelectionStart", jint>(); }
	jint getSelectionEnd() { return call_method<"getSelectionEnd", jint>(); }
	jni::ref<java::lang::String> getSelectedText() { return call_method<"getSelectedText", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getToolTipText() { return call_method<"getToolTipText", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getTitledBorderText() { return call_method<"getTitledBorderText", jni::ref<java::lang::String>>(); }
	jni::ref<javax::accessibility::AccessibleKeyBinding> getAccessibleKeyBinding() { return call_method<"getAccessibleKeyBinding", jni::ref<javax::accessibility::AccessibleKeyBinding>>(); }

protected:

	AbstractButton_AccessibleAbstractButton(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_ABSTRACTBUTTON_ACCESSIBLEABSTRACTBUTTON
