// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Container_AccessibleAWTContainer.h>
#include <scapix/java_api/javax/accessibility/AccessibleExtendedComponent.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_ACCESSIBLEJCOMPONENT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_ACCESSIBLEJCOMPONENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JComponent_AccessibleJComponent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JComponent_AccessibleJComponent>
{
	static constexpr fixed_string class_name = "javax/swing/JComponent$AccessibleJComponent";
	using base_classes = std::tuple<scapix::java_api::java::awt::Container_AccessibleAWTContainer, scapix::java_api::javax::accessibility::AccessibleExtendedComponent>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_ACCESSIBLEJCOMPONENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_ACCESSIBLEJCOMPONENT)
#define SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_ACCESSIBLEJCOMPONENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>
#include <scapix/java_api/javax/accessibility/AccessibleKeyBinding.h>
#include <scapix/java_api/javax/accessibility/AccessibleRole.h>
#include <scapix/java_api/javax/accessibility/AccessibleStateSet.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JComponent_AccessibleJComponent : public jni::object_base<"javax/swing/JComponent$AccessibleJComponent",
	java::awt::Container_AccessibleAWTContainer,
	javax::accessibility::AccessibleExtendedComponent>
{
public:

	void addPropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_method<"addPropertyChangeListener", void>(p1); }
	void removePropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_method<"removePropertyChangeListener", void>(p1); }
	jni::ref<java::lang::String> getAccessibleName() { return call_method<"getAccessibleName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAccessibleDescription() { return call_method<"getAccessibleDescription", jni::ref<java::lang::String>>(); }
	jni::ref<javax::accessibility::AccessibleRole> getAccessibleRole() { return call_method<"getAccessibleRole", jni::ref<javax::accessibility::AccessibleRole>>(); }
	jni::ref<javax::accessibility::AccessibleStateSet> getAccessibleStateSet() { return call_method<"getAccessibleStateSet", jni::ref<javax::accessibility::AccessibleStateSet>>(); }
	jint getAccessibleChildrenCount() { return call_method<"getAccessibleChildrenCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleChild(jint p1) { return call_method<"getAccessibleChild", jni::ref<javax::accessibility::Accessible>>(p1); }
	jni::ref<java::lang::String> getToolTipText() { return call_method<"getToolTipText", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getTitledBorderText() { return call_method<"getTitledBorderText", jni::ref<java::lang::String>>(); }
	jni::ref<javax::accessibility::AccessibleKeyBinding> getAccessibleKeyBinding() { return call_method<"getAccessibleKeyBinding", jni::ref<javax::accessibility::AccessibleKeyBinding>>(); }

protected:

	JComponent_AccessibleJComponent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_ACCESSIBLEJCOMPONENT
