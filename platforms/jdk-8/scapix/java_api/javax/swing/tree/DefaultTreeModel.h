// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/javax/swing/tree/TreeModel.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREEMODEL_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREEMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::tree { class DefaultTreeModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::tree::DefaultTreeModel>
{
	static constexpr fixed_string class_name = "javax/swing/tree/DefaultTreeModel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::javax::swing::tree::TreeModel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREEMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREEMODEL)
#define SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREEMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/util/EventListener.h>
#include <scapix/java_api/javax/swing/event/TreeModelListener.h>
#include <scapix/java_api/javax/swing/tree/MutableTreeNode.h>
#include <scapix/java_api/javax/swing/tree/TreeNode.h>
#include <scapix/java_api/javax/swing/tree/TreePath.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::tree::DefaultTreeModel : public jni::object_base<"javax/swing/tree/DefaultTreeModel",
	java::lang::Object,
	java::io::Serializable,
	javax::swing::tree::TreeModel>
{
public:

	static jni::ref<javax::swing::tree::DefaultTreeModel> new_object(jni::ref<javax::swing::tree::TreeNode> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::tree::DefaultTreeModel> new_object(jni::ref<javax::swing::tree::TreeNode> p1, jboolean p2) { return base_::new_object(p1, p2); }
	void setAsksAllowsChildren(jboolean p1) { return call_method<"setAsksAllowsChildren", void>(p1); }
	jboolean asksAllowsChildren() { return call_method<"asksAllowsChildren", jboolean>(); }
	void setRoot(jni::ref<javax::swing::tree::TreeNode> p1) { return call_method<"setRoot", void>(p1); }
	jni::ref<java::lang::Object> getRoot() { return call_method<"getRoot", jni::ref<java::lang::Object>>(); }
	jint getIndexOfChild(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"getIndexOfChild", jint>(p1, p2); }
	jni::ref<java::lang::Object> getChild(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getChild", jni::ref<java::lang::Object>>(p1, p2); }
	jint getChildCount(jni::ref<java::lang::Object> p1) { return call_method<"getChildCount", jint>(p1); }
	jboolean isLeaf(jni::ref<java::lang::Object> p1) { return call_method<"isLeaf", jboolean>(p1); }
	void reload() { return call_method<"reload", void>(); }
	void valueForPathChanged(jni::ref<javax::swing::tree::TreePath> p1, jni::ref<java::lang::Object> p2) { return call_method<"valueForPathChanged", void>(p1, p2); }
	void insertNodeInto(jni::ref<javax::swing::tree::MutableTreeNode> p1, jni::ref<javax::swing::tree::MutableTreeNode> p2, jint p3) { return call_method<"insertNodeInto", void>(p1, p2, p3); }
	void removeNodeFromParent(jni::ref<javax::swing::tree::MutableTreeNode> p1) { return call_method<"removeNodeFromParent", void>(p1); }
	void nodeChanged(jni::ref<javax::swing::tree::TreeNode> p1) { return call_method<"nodeChanged", void>(p1); }
	void reload(jni::ref<javax::swing::tree::TreeNode> p1) { return call_method<"reload", void>(p1); }
	void nodesWereInserted(jni::ref<javax::swing::tree::TreeNode> p1, jni::ref<jni::array<jint>> p2) { return call_method<"nodesWereInserted", void>(p1, p2); }
	void nodesWereRemoved(jni::ref<javax::swing::tree::TreeNode> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_method<"nodesWereRemoved", void>(p1, p2, p3); }
	void nodesChanged(jni::ref<javax::swing::tree::TreeNode> p1, jni::ref<jni::array<jint>> p2) { return call_method<"nodesChanged", void>(p1, p2); }
	void nodeStructureChanged(jni::ref<javax::swing::tree::TreeNode> p1) { return call_method<"nodeStructureChanged", void>(p1); }
	jni::ref<jni::array<javax::swing::tree::TreeNode>> getPathToRoot(jni::ref<javax::swing::tree::TreeNode> p1) { return call_method<"getPathToRoot", jni::ref<jni::array<javax::swing::tree::TreeNode>>>(p1); }
	void addTreeModelListener(jni::ref<javax::swing::event::TreeModelListener> p1) { return call_method<"addTreeModelListener", void>(p1); }
	void removeTreeModelListener(jni::ref<javax::swing::event::TreeModelListener> p1) { return call_method<"removeTreeModelListener", void>(p1); }
	jni::ref<jni::array<javax::swing::event::TreeModelListener>> getTreeModelListeners() { return call_method<"getTreeModelListeners", jni::ref<jni::array<javax::swing::event::TreeModelListener>>>(); }
	jni::ref<jni::array<java::util::EventListener>> getListeners(jni::ref<java::lang::Class> p1) { return call_method<"getListeners", jni::ref<jni::array<java::util::EventListener>>>(p1); }

protected:

	DefaultTreeModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREEMODEL
