// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JLabel.h>
#include <scapix/java_api/javax/swing/tree/TreeCellRenderer.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREECELLRENDERER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREECELLRENDERER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::tree { class DefaultTreeCellRenderer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::tree::DefaultTreeCellRenderer>
{
	static constexpr fixed_string class_name = "javax/swing/tree/DefaultTreeCellRenderer";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JLabel, scapix::java_api::javax::swing::tree::TreeCellRenderer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREECELLRENDERER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREECELLRENDERER)
#define SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREECELLRENDERER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/JTree.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::tree::DefaultTreeCellRenderer : public jni::object_base<"javax/swing/tree/DefaultTreeCellRenderer",
	javax::swing::JLabel,
	javax::swing::tree::TreeCellRenderer>
{
public:

	static jni::ref<javax::swing::tree::DefaultTreeCellRenderer> new_object() { return base_::new_object(); }
	void updateUI() { return call_method<"updateUI", void>(); }
	jni::ref<javax::swing::Icon> getDefaultOpenIcon() { return call_method<"getDefaultOpenIcon", jni::ref<javax::swing::Icon>>(); }
	jni::ref<javax::swing::Icon> getDefaultClosedIcon() { return call_method<"getDefaultClosedIcon", jni::ref<javax::swing::Icon>>(); }
	jni::ref<javax::swing::Icon> getDefaultLeafIcon() { return call_method<"getDefaultLeafIcon", jni::ref<javax::swing::Icon>>(); }
	void setOpenIcon(jni::ref<javax::swing::Icon> p1) { return call_method<"setOpenIcon", void>(p1); }
	jni::ref<javax::swing::Icon> getOpenIcon() { return call_method<"getOpenIcon", jni::ref<javax::swing::Icon>>(); }
	void setClosedIcon(jni::ref<javax::swing::Icon> p1) { return call_method<"setClosedIcon", void>(p1); }
	jni::ref<javax::swing::Icon> getClosedIcon() { return call_method<"getClosedIcon", jni::ref<javax::swing::Icon>>(); }
	void setLeafIcon(jni::ref<javax::swing::Icon> p1) { return call_method<"setLeafIcon", void>(p1); }
	jni::ref<javax::swing::Icon> getLeafIcon() { return call_method<"getLeafIcon", jni::ref<javax::swing::Icon>>(); }
	void setTextSelectionColor(jni::ref<java::awt::Color> p1) { return call_method<"setTextSelectionColor", void>(p1); }
	jni::ref<java::awt::Color> getTextSelectionColor() { return call_method<"getTextSelectionColor", jni::ref<java::awt::Color>>(); }
	void setTextNonSelectionColor(jni::ref<java::awt::Color> p1) { return call_method<"setTextNonSelectionColor", void>(p1); }
	jni::ref<java::awt::Color> getTextNonSelectionColor() { return call_method<"getTextNonSelectionColor", jni::ref<java::awt::Color>>(); }
	void setBackgroundSelectionColor(jni::ref<java::awt::Color> p1) { return call_method<"setBackgroundSelectionColor", void>(p1); }
	jni::ref<java::awt::Color> getBackgroundSelectionColor() { return call_method<"getBackgroundSelectionColor", jni::ref<java::awt::Color>>(); }
	void setBackgroundNonSelectionColor(jni::ref<java::awt::Color> p1) { return call_method<"setBackgroundNonSelectionColor", void>(p1); }
	jni::ref<java::awt::Color> getBackgroundNonSelectionColor() { return call_method<"getBackgroundNonSelectionColor", jni::ref<java::awt::Color>>(); }
	void setBorderSelectionColor(jni::ref<java::awt::Color> p1) { return call_method<"setBorderSelectionColor", void>(p1); }
	jni::ref<java::awt::Color> getBorderSelectionColor() { return call_method<"getBorderSelectionColor", jni::ref<java::awt::Color>>(); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	jni::ref<java::awt::Font> getFont() { return call_method<"getFont", jni::ref<java::awt::Font>>(); }
	void setBackground(jni::ref<java::awt::Color> p1) { return call_method<"setBackground", void>(p1); }
	jni::ref<java::awt::Component> getTreeCellRendererComponent(jni::ref<javax::swing::JTree> p1, jni::ref<java::lang::Object> p2, jboolean p3, jboolean p4, jboolean p5, jint p6, jboolean p7) { return call_method<"getTreeCellRendererComponent", jni::ref<java::awt::Component>>(p1, p2, p3, p4, p5, p6, p7); }
	void paint(jni::ref<java::awt::Graphics> p1) { return call_method<"paint", void>(p1); }
	jni::ref<java::awt::Dimension> getPreferredSize() { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(); }
	void validate() { return call_method<"validate", void>(); }
	void invalidate() { return call_method<"invalidate", void>(); }
	void revalidate() { return call_method<"revalidate", void>(); }
	void repaint(jlong p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"repaint", void>(p1, p2, p3, p4, p5); }
	void repaint(jni::ref<java::awt::Rectangle> p1) { return call_method<"repaint", void>(p1); }
	void repaint() { return call_method<"repaint", void>(); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jbyte p2, jbyte p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jchar p2, jchar p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jshort p2, jshort p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jlong p2, jlong p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jfloat p2, jfloat p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jdouble p2, jdouble p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jboolean p2, jboolean p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }

protected:

	DefaultTreeCellRenderer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TREE_DEFAULTTREECELLRENDERER
