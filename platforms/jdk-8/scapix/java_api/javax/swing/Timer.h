// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TIMER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TIMER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class Timer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::Timer>
{
	static constexpr fixed_string class_name = "javax/swing/Timer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TIMER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TIMER)
#define SCAPIX_JAVA_API_JAVAX_SWING_TIMER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/event/ActionListener.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/EventListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::Timer : public jni::object_base<"javax/swing/Timer",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<javax::swing::Timer> new_object(jint p1, jni::ref<java::awt::event::ActionListener> p2) { return base_::new_object(p1, p2); }
	void addActionListener(jni::ref<java::awt::event::ActionListener> p1) { return call_method<"addActionListener", void>(p1); }
	void removeActionListener(jni::ref<java::awt::event::ActionListener> p1) { return call_method<"removeActionListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::ActionListener>> getActionListeners() { return call_method<"getActionListeners", jni::ref<jni::array<java::awt::event::ActionListener>>>(); }
	jni::ref<jni::array<java::util::EventListener>> getListeners(jni::ref<java::lang::Class> p1) { return call_method<"getListeners", jni::ref<jni::array<java::util::EventListener>>>(p1); }
	static void setLogTimers(jboolean p1) { return call_static_method<"setLogTimers", void>(p1); }
	static jboolean getLogTimers() { return call_static_method<"getLogTimers", jboolean>(); }
	void setDelay(jint p1) { return call_method<"setDelay", void>(p1); }
	jint getDelay() { return call_method<"getDelay", jint>(); }
	void setInitialDelay(jint p1) { return call_method<"setInitialDelay", void>(p1); }
	jint getInitialDelay() { return call_method<"getInitialDelay", jint>(); }
	void setRepeats(jboolean p1) { return call_method<"setRepeats", void>(p1); }
	jboolean isRepeats() { return call_method<"isRepeats", jboolean>(); }
	void setCoalesce(jboolean p1) { return call_method<"setCoalesce", void>(p1); }
	jboolean isCoalesce() { return call_method<"isCoalesce", jboolean>(); }
	void setActionCommand(jni::ref<java::lang::String> p1) { return call_method<"setActionCommand", void>(p1); }
	jni::ref<java::lang::String> getActionCommand() { return call_method<"getActionCommand", jni::ref<java::lang::String>>(); }
	void start() { return call_method<"start", void>(); }
	jboolean isRunning() { return call_method<"isRunning", jboolean>(); }
	void stop() { return call_method<"stop", void>(); }
	void restart() { return call_method<"restart", void>(); }

protected:

	Timer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TIMER
