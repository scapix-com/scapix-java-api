// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/event/TableModelListener.h>
#include <scapix/java_api/javax/swing/Scrollable.h>
#include <scapix/java_api/javax/swing/event/TableColumnModelListener.h>
#include <scapix/java_api/javax/swing/event/ListSelectionListener.h>
#include <scapix/java_api/javax/swing/event/CellEditorListener.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>
#include <scapix/java_api/javax/swing/event/RowSorterListener.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JTable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JTable>
{
	static constexpr fixed_string class_name = "javax/swing/JTable";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent, scapix::java_api::javax::swing::event::TableModelListener, scapix::java_api::javax::swing::Scrollable, scapix::java_api::javax::swing::event::TableColumnModelListener, scapix::java_api::javax::swing::event::ListSelectionListener, scapix::java_api::javax::swing::event::CellEditorListener, scapix::java_api::javax::accessibility::Accessible, scapix::java_api::javax::swing::event::RowSorterListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JTABLE)
#define SCAPIX_JAVA_API_JAVAX_SWING_JTABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/event/MouseEvent.h>
#include <scapix/java_api/java/awt/print/Printable.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/MessageFormat.h>
#include <scapix/java_api/java/util/EventObject.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/print/PrintService.h>
#include <scapix/java_api/javax/print/attribute/PrintRequestAttributeSet.h>
#include <scapix/java_api/javax/swing/DropMode.h>
#include <scapix/java_api/javax/swing/JScrollPane.h>
#include <scapix/java_api/javax/swing/JTable_DropLocation.h>
#include <scapix/java_api/javax/swing/JTable_PrintMode.h>
#include <scapix/java_api/javax/swing/ListSelectionModel.h>
#include <scapix/java_api/javax/swing/RowSorter.h>
#include <scapix/java_api/javax/swing/event/ChangeEvent.h>
#include <scapix/java_api/javax/swing/event/ListSelectionEvent.h>
#include <scapix/java_api/javax/swing/event/RowSorterEvent.h>
#include <scapix/java_api/javax/swing/event/TableColumnModelEvent.h>
#include <scapix/java_api/javax/swing/event/TableModelEvent.h>
#include <scapix/java_api/javax/swing/plaf/TableUI.h>
#include <scapix/java_api/javax/swing/table/JTableHeader.h>
#include <scapix/java_api/javax/swing/table/TableCellEditor.h>
#include <scapix/java_api/javax/swing/table/TableCellRenderer.h>
#include <scapix/java_api/javax/swing/table/TableColumn.h>
#include <scapix/java_api/javax/swing/table/TableColumnModel.h>
#include <scapix/java_api/javax/swing/table/TableModel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JTable : public jni::object_base<"javax/swing/JTable",
	javax::swing::JComponent,
	javax::swing::event::TableModelListener,
	javax::swing::Scrollable,
	javax::swing::event::TableColumnModelListener,
	javax::swing::event::ListSelectionListener,
	javax::swing::event::CellEditorListener,
	javax::accessibility::Accessible,
	javax::swing::event::RowSorterListener>
{
public:

	using PrintMode = JTable_PrintMode;
	using DropLocation = JTable_DropLocation;

	static jint AUTO_RESIZE_OFF() { return get_static_field<"AUTO_RESIZE_OFF", jint>(); }
	static jint AUTO_RESIZE_NEXT_COLUMN() { return get_static_field<"AUTO_RESIZE_NEXT_COLUMN", jint>(); }
	static jint AUTO_RESIZE_SUBSEQUENT_COLUMNS() { return get_static_field<"AUTO_RESIZE_SUBSEQUENT_COLUMNS", jint>(); }
	static jint AUTO_RESIZE_LAST_COLUMN() { return get_static_field<"AUTO_RESIZE_LAST_COLUMN", jint>(); }
	static jint AUTO_RESIZE_ALL_COLUMNS() { return get_static_field<"AUTO_RESIZE_ALL_COLUMNS", jint>(); }

	static jni::ref<javax::swing::JTable> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JTable> new_object(jni::ref<javax::swing::table::TableModel> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JTable> new_object(jni::ref<javax::swing::table::TableModel> p1, jni::ref<javax::swing::table::TableColumnModel> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::JTable> new_object(jni::ref<javax::swing::table::TableModel> p1, jni::ref<javax::swing::table::TableColumnModel> p2, jni::ref<javax::swing::ListSelectionModel> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::swing::JTable> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::JTable> new_object(jni::ref<java::util::Vector> p1, jni::ref<java::util::Vector> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::JTable> new_object(jni::ref<jni::array<jni::array<java::lang::Object>>> p1, jni::ref<jni::array<java::lang::Object>> p2) { return base_::new_object(p1, p2); }
	void addNotify() { return call_method<"addNotify", void>(); }
	void removeNotify() { return call_method<"removeNotify", void>(); }
	static jni::ref<javax::swing::JScrollPane> createScrollPaneForTable(jni::ref<javax::swing::JTable> p1) { return call_static_method<"createScrollPaneForTable", jni::ref<javax::swing::JScrollPane>>(p1); }
	void setTableHeader(jni::ref<javax::swing::table::JTableHeader> p1) { return call_method<"setTableHeader", void>(p1); }
	jni::ref<javax::swing::table::JTableHeader> getTableHeader() { return call_method<"getTableHeader", jni::ref<javax::swing::table::JTableHeader>>(); }
	void setRowHeight(jint p1) { return call_method<"setRowHeight", void>(p1); }
	jint getRowHeight() { return call_method<"getRowHeight", jint>(); }
	void setRowHeight(jint p1, jint p2) { return call_method<"setRowHeight", void>(p1, p2); }
	jint getRowHeight(jint p1) { return call_method<"getRowHeight", jint>(p1); }
	void setRowMargin(jint p1) { return call_method<"setRowMargin", void>(p1); }
	jint getRowMargin() { return call_method<"getRowMargin", jint>(); }
	void setIntercellSpacing(jni::ref<java::awt::Dimension> p1) { return call_method<"setIntercellSpacing", void>(p1); }
	jni::ref<java::awt::Dimension> getIntercellSpacing() { return call_method<"getIntercellSpacing", jni::ref<java::awt::Dimension>>(); }
	void setGridColor(jni::ref<java::awt::Color> p1) { return call_method<"setGridColor", void>(p1); }
	jni::ref<java::awt::Color> getGridColor() { return call_method<"getGridColor", jni::ref<java::awt::Color>>(); }
	void setShowGrid(jboolean p1) { return call_method<"setShowGrid", void>(p1); }
	void setShowHorizontalLines(jboolean p1) { return call_method<"setShowHorizontalLines", void>(p1); }
	void setShowVerticalLines(jboolean p1) { return call_method<"setShowVerticalLines", void>(p1); }
	jboolean getShowHorizontalLines() { return call_method<"getShowHorizontalLines", jboolean>(); }
	jboolean getShowVerticalLines() { return call_method<"getShowVerticalLines", jboolean>(); }
	void setAutoResizeMode(jint p1) { return call_method<"setAutoResizeMode", void>(p1); }
	jint getAutoResizeMode() { return call_method<"getAutoResizeMode", jint>(); }
	void setAutoCreateColumnsFromModel(jboolean p1) { return call_method<"setAutoCreateColumnsFromModel", void>(p1); }
	jboolean getAutoCreateColumnsFromModel() { return call_method<"getAutoCreateColumnsFromModel", jboolean>(); }
	void createDefaultColumnsFromModel() { return call_method<"createDefaultColumnsFromModel", void>(); }
	void setDefaultRenderer(jni::ref<java::lang::Class> p1, jni::ref<javax::swing::table::TableCellRenderer> p2) { return call_method<"setDefaultRenderer", void>(p1, p2); }
	jni::ref<javax::swing::table::TableCellRenderer> getDefaultRenderer(jni::ref<java::lang::Class> p1) { return call_method<"getDefaultRenderer", jni::ref<javax::swing::table::TableCellRenderer>>(p1); }
	void setDefaultEditor(jni::ref<java::lang::Class> p1, jni::ref<javax::swing::table::TableCellEditor> p2) { return call_method<"setDefaultEditor", void>(p1, p2); }
	jni::ref<javax::swing::table::TableCellEditor> getDefaultEditor(jni::ref<java::lang::Class> p1) { return call_method<"getDefaultEditor", jni::ref<javax::swing::table::TableCellEditor>>(p1); }
	void setDragEnabled(jboolean p1) { return call_method<"setDragEnabled", void>(p1); }
	jboolean getDragEnabled() { return call_method<"getDragEnabled", jboolean>(); }
	void setDropMode(jni::ref<javax::swing::DropMode> p1) { return call_method<"setDropMode", void>(p1); }
	jni::ref<javax::swing::DropMode> getDropMode() { return call_method<"getDropMode", jni::ref<javax::swing::DropMode>>(); }
	jni::ref<javax::swing::JTable_DropLocation> getDropLocation() { return call_method<"getDropLocation", jni::ref<javax::swing::JTable_DropLocation>>(); }
	void setAutoCreateRowSorter(jboolean p1) { return call_method<"setAutoCreateRowSorter", void>(p1); }
	jboolean getAutoCreateRowSorter() { return call_method<"getAutoCreateRowSorter", jboolean>(); }
	void setUpdateSelectionOnSort(jboolean p1) { return call_method<"setUpdateSelectionOnSort", void>(p1); }
	jboolean getUpdateSelectionOnSort() { return call_method<"getUpdateSelectionOnSort", jboolean>(); }
	void setRowSorter(jni::ref<javax::swing::RowSorter> p1) { return call_method<"setRowSorter", void>(p1); }
	jni::ref<javax::swing::RowSorter> getRowSorter() { return call_method<"getRowSorter", jni::ref<javax::swing::RowSorter>>(); }
	void setSelectionMode(jint p1) { return call_method<"setSelectionMode", void>(p1); }
	void setRowSelectionAllowed(jboolean p1) { return call_method<"setRowSelectionAllowed", void>(p1); }
	jboolean getRowSelectionAllowed() { return call_method<"getRowSelectionAllowed", jboolean>(); }
	void setColumnSelectionAllowed(jboolean p1) { return call_method<"setColumnSelectionAllowed", void>(p1); }
	jboolean getColumnSelectionAllowed() { return call_method<"getColumnSelectionAllowed", jboolean>(); }
	void setCellSelectionEnabled(jboolean p1) { return call_method<"setCellSelectionEnabled", void>(p1); }
	jboolean getCellSelectionEnabled() { return call_method<"getCellSelectionEnabled", jboolean>(); }
	void selectAll() { return call_method<"selectAll", void>(); }
	void clearSelection() { return call_method<"clearSelection", void>(); }
	void setRowSelectionInterval(jint p1, jint p2) { return call_method<"setRowSelectionInterval", void>(p1, p2); }
	void setColumnSelectionInterval(jint p1, jint p2) { return call_method<"setColumnSelectionInterval", void>(p1, p2); }
	void addRowSelectionInterval(jint p1, jint p2) { return call_method<"addRowSelectionInterval", void>(p1, p2); }
	void addColumnSelectionInterval(jint p1, jint p2) { return call_method<"addColumnSelectionInterval", void>(p1, p2); }
	void removeRowSelectionInterval(jint p1, jint p2) { return call_method<"removeRowSelectionInterval", void>(p1, p2); }
	void removeColumnSelectionInterval(jint p1, jint p2) { return call_method<"removeColumnSelectionInterval", void>(p1, p2); }
	jint getSelectedRow() { return call_method<"getSelectedRow", jint>(); }
	jint getSelectedColumn() { return call_method<"getSelectedColumn", jint>(); }
	jni::ref<jni::array<jint>> getSelectedRows() { return call_method<"getSelectedRows", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<jint>> getSelectedColumns() { return call_method<"getSelectedColumns", jni::ref<jni::array<jint>>>(); }
	jint getSelectedRowCount() { return call_method<"getSelectedRowCount", jint>(); }
	jint getSelectedColumnCount() { return call_method<"getSelectedColumnCount", jint>(); }
	jboolean isRowSelected(jint p1) { return call_method<"isRowSelected", jboolean>(p1); }
	jboolean isColumnSelected(jint p1) { return call_method<"isColumnSelected", jboolean>(p1); }
	jboolean isCellSelected(jint p1, jint p2) { return call_method<"isCellSelected", jboolean>(p1, p2); }
	void changeSelection(jint p1, jint p2, jboolean p3, jboolean p4) { return call_method<"changeSelection", void>(p1, p2, p3, p4); }
	jni::ref<java::awt::Color> getSelectionForeground() { return call_method<"getSelectionForeground", jni::ref<java::awt::Color>>(); }
	void setSelectionForeground(jni::ref<java::awt::Color> p1) { return call_method<"setSelectionForeground", void>(p1); }
	jni::ref<java::awt::Color> getSelectionBackground() { return call_method<"getSelectionBackground", jni::ref<java::awt::Color>>(); }
	void setSelectionBackground(jni::ref<java::awt::Color> p1) { return call_method<"setSelectionBackground", void>(p1); }
	jni::ref<javax::swing::table::TableColumn> getColumn(jni::ref<java::lang::Object> p1) { return call_method<"getColumn", jni::ref<javax::swing::table::TableColumn>>(p1); }
	jint convertColumnIndexToModel(jint p1) { return call_method<"convertColumnIndexToModel", jint>(p1); }
	jint convertColumnIndexToView(jint p1) { return call_method<"convertColumnIndexToView", jint>(p1); }
	jint convertRowIndexToView(jint p1) { return call_method<"convertRowIndexToView", jint>(p1); }
	jint convertRowIndexToModel(jint p1) { return call_method<"convertRowIndexToModel", jint>(p1); }
	jint getRowCount() { return call_method<"getRowCount", jint>(); }
	jint getColumnCount() { return call_method<"getColumnCount", jint>(); }
	jni::ref<java::lang::String> getColumnName(jint p1) { return call_method<"getColumnName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Class> getColumnClass(jint p1) { return call_method<"getColumnClass", jni::ref<java::lang::Class>>(p1); }
	jni::ref<java::lang::Object> getValueAt(jint p1, jint p2) { return call_method<"getValueAt", jni::ref<java::lang::Object>>(p1, p2); }
	void setValueAt(jni::ref<java::lang::Object> p1, jint p2, jint p3) { return call_method<"setValueAt", void>(p1, p2, p3); }
	jboolean isCellEditable(jint p1, jint p2) { return call_method<"isCellEditable", jboolean>(p1, p2); }
	void addColumn(jni::ref<javax::swing::table::TableColumn> p1) { return call_method<"addColumn", void>(p1); }
	void removeColumn(jni::ref<javax::swing::table::TableColumn> p1) { return call_method<"removeColumn", void>(p1); }
	void moveColumn(jint p1, jint p2) { return call_method<"moveColumn", void>(p1, p2); }
	jint columnAtPoint(jni::ref<java::awt::Point> p1) { return call_method<"columnAtPoint", jint>(p1); }
	jint rowAtPoint(jni::ref<java::awt::Point> p1) { return call_method<"rowAtPoint", jint>(p1); }
	jni::ref<java::awt::Rectangle> getCellRect(jint p1, jint p2, jboolean p3) { return call_method<"getCellRect", jni::ref<java::awt::Rectangle>>(p1, p2, p3); }
	void doLayout() { return call_method<"doLayout", void>(); }
	void sizeColumnsToFit(jboolean p1) { return call_method<"sizeColumnsToFit", void>(p1); }
	void sizeColumnsToFit(jint p1) { return call_method<"sizeColumnsToFit", void>(p1); }
	jni::ref<java::lang::String> getToolTipText(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"getToolTipText", jni::ref<java::lang::String>>(p1); }
	void setSurrendersFocusOnKeystroke(jboolean p1) { return call_method<"setSurrendersFocusOnKeystroke", void>(p1); }
	jboolean getSurrendersFocusOnKeystroke() { return call_method<"getSurrendersFocusOnKeystroke", jboolean>(); }
	jboolean editCellAt(jint p1, jint p2) { return call_method<"editCellAt", jboolean>(p1, p2); }
	jboolean editCellAt(jint p1, jint p2, jni::ref<java::util::EventObject> p3) { return call_method<"editCellAt", jboolean>(p1, p2, p3); }
	jboolean isEditing() { return call_method<"isEditing", jboolean>(); }
	jni::ref<java::awt::Component> getEditorComponent() { return call_method<"getEditorComponent", jni::ref<java::awt::Component>>(); }
	jint getEditingColumn() { return call_method<"getEditingColumn", jint>(); }
	jint getEditingRow() { return call_method<"getEditingRow", jint>(); }
	jni::ref<javax::swing::plaf::TableUI> getUI() { return call_method<"getUI", jni::ref<javax::swing::plaf::TableUI>>(); }
	void setUI(jni::ref<javax::swing::plaf::TableUI> p1) { return call_method<"setUI", void>(p1); }
	void updateUI() { return call_method<"updateUI", void>(); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	void setModel(jni::ref<javax::swing::table::TableModel> p1) { return call_method<"setModel", void>(p1); }
	jni::ref<javax::swing::table::TableModel> getModel() { return call_method<"getModel", jni::ref<javax::swing::table::TableModel>>(); }
	void setColumnModel(jni::ref<javax::swing::table::TableColumnModel> p1) { return call_method<"setColumnModel", void>(p1); }
	jni::ref<javax::swing::table::TableColumnModel> getColumnModel() { return call_method<"getColumnModel", jni::ref<javax::swing::table::TableColumnModel>>(); }
	void setSelectionModel(jni::ref<javax::swing::ListSelectionModel> p1) { return call_method<"setSelectionModel", void>(p1); }
	jni::ref<javax::swing::ListSelectionModel> getSelectionModel() { return call_method<"getSelectionModel", jni::ref<javax::swing::ListSelectionModel>>(); }
	void sorterChanged(jni::ref<javax::swing::event::RowSorterEvent> p1) { return call_method<"sorterChanged", void>(p1); }
	void tableChanged(jni::ref<javax::swing::event::TableModelEvent> p1) { return call_method<"tableChanged", void>(p1); }
	void columnAdded(jni::ref<javax::swing::event::TableColumnModelEvent> p1) { return call_method<"columnAdded", void>(p1); }
	void columnRemoved(jni::ref<javax::swing::event::TableColumnModelEvent> p1) { return call_method<"columnRemoved", void>(p1); }
	void columnMoved(jni::ref<javax::swing::event::TableColumnModelEvent> p1) { return call_method<"columnMoved", void>(p1); }
	void columnMarginChanged(jni::ref<javax::swing::event::ChangeEvent> p1) { return call_method<"columnMarginChanged", void>(p1); }
	void columnSelectionChanged(jni::ref<javax::swing::event::ListSelectionEvent> p1) { return call_method<"columnSelectionChanged", void>(p1); }
	void valueChanged(jni::ref<javax::swing::event::ListSelectionEvent> p1) { return call_method<"valueChanged", void>(p1); }
	void editingStopped(jni::ref<javax::swing::event::ChangeEvent> p1) { return call_method<"editingStopped", void>(p1); }
	void editingCanceled(jni::ref<javax::swing::event::ChangeEvent> p1) { return call_method<"editingCanceled", void>(p1); }
	void setPreferredScrollableViewportSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setPreferredScrollableViewportSize", void>(p1); }
	jni::ref<java::awt::Dimension> getPreferredScrollableViewportSize() { return call_method<"getPreferredScrollableViewportSize", jni::ref<java::awt::Dimension>>(); }
	jint getScrollableUnitIncrement(jni::ref<java::awt::Rectangle> p1, jint p2, jint p3) { return call_method<"getScrollableUnitIncrement", jint>(p1, p2, p3); }
	jint getScrollableBlockIncrement(jni::ref<java::awt::Rectangle> p1, jint p2, jint p3) { return call_method<"getScrollableBlockIncrement", jint>(p1, p2, p3); }
	jboolean getScrollableTracksViewportWidth() { return call_method<"getScrollableTracksViewportWidth", jboolean>(); }
	jboolean getScrollableTracksViewportHeight() { return call_method<"getScrollableTracksViewportHeight", jboolean>(); }
	void setFillsViewportHeight(jboolean p1) { return call_method<"setFillsViewportHeight", void>(p1); }
	jboolean getFillsViewportHeight() { return call_method<"getFillsViewportHeight", jboolean>(); }
	jni::ref<javax::swing::table::TableCellEditor> getCellEditor() { return call_method<"getCellEditor", jni::ref<javax::swing::table::TableCellEditor>>(); }
	void setCellEditor(jni::ref<javax::swing::table::TableCellEditor> p1) { return call_method<"setCellEditor", void>(p1); }
	void setEditingColumn(jint p1) { return call_method<"setEditingColumn", void>(p1); }
	void setEditingRow(jint p1) { return call_method<"setEditingRow", void>(p1); }
	jni::ref<javax::swing::table::TableCellRenderer> getCellRenderer(jint p1, jint p2) { return call_method<"getCellRenderer", jni::ref<javax::swing::table::TableCellRenderer>>(p1, p2); }
	jni::ref<java::awt::Component> prepareRenderer(jni::ref<javax::swing::table::TableCellRenderer> p1, jint p2, jint p3) { return call_method<"prepareRenderer", jni::ref<java::awt::Component>>(p1, p2, p3); }
	jni::ref<javax::swing::table::TableCellEditor> getCellEditor(jint p1, jint p2) { return call_method<"getCellEditor", jni::ref<javax::swing::table::TableCellEditor>>(p1, p2); }
	jni::ref<java::awt::Component> prepareEditor(jni::ref<javax::swing::table::TableCellEditor> p1, jint p2, jint p3) { return call_method<"prepareEditor", jni::ref<java::awt::Component>>(p1, p2, p3); }
	void removeEditor() { return call_method<"removeEditor", void>(); }
	jboolean print() { return call_method<"print", jboolean>(); }
	jboolean print(jni::ref<javax::swing::JTable_PrintMode> p1) { return call_method<"print", jboolean>(p1); }
	jboolean print(jni::ref<javax::swing::JTable_PrintMode> p1, jni::ref<java::text::MessageFormat> p2, jni::ref<java::text::MessageFormat> p3) { return call_method<"print", jboolean>(p1, p2, p3); }
	jboolean print(jni::ref<javax::swing::JTable_PrintMode> p1, jni::ref<java::text::MessageFormat> p2, jni::ref<java::text::MessageFormat> p3, jboolean p4, jni::ref<javax::print::attribute::PrintRequestAttributeSet> p5, jboolean p6) { return call_method<"print", jboolean>(p1, p2, p3, p4, p5, p6); }
	jboolean print(jni::ref<javax::swing::JTable_PrintMode> p1, jni::ref<java::text::MessageFormat> p2, jni::ref<java::text::MessageFormat> p3, jboolean p4, jni::ref<javax::print::attribute::PrintRequestAttributeSet> p5, jboolean p6, jni::ref<javax::print::PrintService> p7) { return call_method<"print", jboolean>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::awt::print::Printable> getPrintable(jni::ref<javax::swing::JTable_PrintMode> p1, jni::ref<java::text::MessageFormat> p2, jni::ref<java::text::MessageFormat> p3) { return call_method<"getPrintable", jni::ref<java::awt::print::Printable>>(p1, p2, p3); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	JTable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTABLE
