// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_BORDERFACTORY_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_BORDERFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class BorderFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::BorderFactory>
{
	static constexpr fixed_string class_name = "javax/swing/BorderFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_BORDERFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_BORDERFACTORY)
#define SCAPIX_JAVA_API_JAVAX_SWING_BORDERFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/BasicStroke.h>
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Paint.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/border/Border.h>
#include <scapix/java_api/javax/swing/border/CompoundBorder.h>
#include <scapix/java_api/javax/swing/border/MatteBorder.h>
#include <scapix/java_api/javax/swing/border/TitledBorder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::BorderFactory : public jni::object_base<"javax/swing/BorderFactory",
	java::lang::Object>
{
public:

	static jni::ref<javax::swing::border::Border> createLineBorder(jni::ref<java::awt::Color> p1) { return call_static_method<"createLineBorder", jni::ref<javax::swing::border::Border>>(p1); }
	static jni::ref<javax::swing::border::Border> createLineBorder(jni::ref<java::awt::Color> p1, jint p2) { return call_static_method<"createLineBorder", jni::ref<javax::swing::border::Border>>(p1, p2); }
	static jni::ref<javax::swing::border::Border> createLineBorder(jni::ref<java::awt::Color> p1, jint p2, jboolean p3) { return call_static_method<"createLineBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3); }
	static jni::ref<javax::swing::border::Border> createRaisedBevelBorder() { return call_static_method<"createRaisedBevelBorder", jni::ref<javax::swing::border::Border>>(); }
	static jni::ref<javax::swing::border::Border> createLoweredBevelBorder() { return call_static_method<"createLoweredBevelBorder", jni::ref<javax::swing::border::Border>>(); }
	static jni::ref<javax::swing::border::Border> createBevelBorder(jint p1) { return call_static_method<"createBevelBorder", jni::ref<javax::swing::border::Border>>(p1); }
	static jni::ref<javax::swing::border::Border> createBevelBorder(jint p1, jni::ref<java::awt::Color> p2, jni::ref<java::awt::Color> p3) { return call_static_method<"createBevelBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3); }
	static jni::ref<javax::swing::border::Border> createBevelBorder(jint p1, jni::ref<java::awt::Color> p2, jni::ref<java::awt::Color> p3, jni::ref<java::awt::Color> p4, jni::ref<java::awt::Color> p5) { return call_static_method<"createBevelBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3, p4, p5); }
	static jni::ref<javax::swing::border::Border> createRaisedSoftBevelBorder() { return call_static_method<"createRaisedSoftBevelBorder", jni::ref<javax::swing::border::Border>>(); }
	static jni::ref<javax::swing::border::Border> createLoweredSoftBevelBorder() { return call_static_method<"createLoweredSoftBevelBorder", jni::ref<javax::swing::border::Border>>(); }
	static jni::ref<javax::swing::border::Border> createSoftBevelBorder(jint p1) { return call_static_method<"createSoftBevelBorder", jni::ref<javax::swing::border::Border>>(p1); }
	static jni::ref<javax::swing::border::Border> createSoftBevelBorder(jint p1, jni::ref<java::awt::Color> p2, jni::ref<java::awt::Color> p3) { return call_static_method<"createSoftBevelBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3); }
	static jni::ref<javax::swing::border::Border> createSoftBevelBorder(jint p1, jni::ref<java::awt::Color> p2, jni::ref<java::awt::Color> p3, jni::ref<java::awt::Color> p4, jni::ref<java::awt::Color> p5) { return call_static_method<"createSoftBevelBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3, p4, p5); }
	static jni::ref<javax::swing::border::Border> createEtchedBorder() { return call_static_method<"createEtchedBorder", jni::ref<javax::swing::border::Border>>(); }
	static jni::ref<javax::swing::border::Border> createEtchedBorder(jni::ref<java::awt::Color> p1, jni::ref<java::awt::Color> p2) { return call_static_method<"createEtchedBorder", jni::ref<javax::swing::border::Border>>(p1, p2); }
	static jni::ref<javax::swing::border::Border> createEtchedBorder(jint p1) { return call_static_method<"createEtchedBorder", jni::ref<javax::swing::border::Border>>(p1); }
	static jni::ref<javax::swing::border::Border> createEtchedBorder(jint p1, jni::ref<java::awt::Color> p2, jni::ref<java::awt::Color> p3) { return call_static_method<"createEtchedBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3); }
	static jni::ref<javax::swing::border::TitledBorder> createTitledBorder(jni::ref<java::lang::String> p1) { return call_static_method<"createTitledBorder", jni::ref<javax::swing::border::TitledBorder>>(p1); }
	static jni::ref<javax::swing::border::TitledBorder> createTitledBorder(jni::ref<javax::swing::border::Border> p1) { return call_static_method<"createTitledBorder", jni::ref<javax::swing::border::TitledBorder>>(p1); }
	static jni::ref<javax::swing::border::TitledBorder> createTitledBorder(jni::ref<javax::swing::border::Border> p1, jni::ref<java::lang::String> p2) { return call_static_method<"createTitledBorder", jni::ref<javax::swing::border::TitledBorder>>(p1, p2); }
	static jni::ref<javax::swing::border::TitledBorder> createTitledBorder(jni::ref<javax::swing::border::Border> p1, jni::ref<java::lang::String> p2, jint p3, jint p4) { return call_static_method<"createTitledBorder", jni::ref<javax::swing::border::TitledBorder>>(p1, p2, p3, p4); }
	static jni::ref<javax::swing::border::TitledBorder> createTitledBorder(jni::ref<javax::swing::border::Border> p1, jni::ref<java::lang::String> p2, jint p3, jint p4, jni::ref<java::awt::Font> p5) { return call_static_method<"createTitledBorder", jni::ref<javax::swing::border::TitledBorder>>(p1, p2, p3, p4, p5); }
	static jni::ref<javax::swing::border::TitledBorder> createTitledBorder(jni::ref<javax::swing::border::Border> p1, jni::ref<java::lang::String> p2, jint p3, jint p4, jni::ref<java::awt::Font> p5, jni::ref<java::awt::Color> p6) { return call_static_method<"createTitledBorder", jni::ref<javax::swing::border::TitledBorder>>(p1, p2, p3, p4, p5, p6); }
	static jni::ref<javax::swing::border::Border> createEmptyBorder() { return call_static_method<"createEmptyBorder", jni::ref<javax::swing::border::Border>>(); }
	static jni::ref<javax::swing::border::Border> createEmptyBorder(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"createEmptyBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3, p4); }
	static jni::ref<javax::swing::border::CompoundBorder> createCompoundBorder() { return call_static_method<"createCompoundBorder", jni::ref<javax::swing::border::CompoundBorder>>(); }
	static jni::ref<javax::swing::border::CompoundBorder> createCompoundBorder(jni::ref<javax::swing::border::Border> p1, jni::ref<javax::swing::border::Border> p2) { return call_static_method<"createCompoundBorder", jni::ref<javax::swing::border::CompoundBorder>>(p1, p2); }
	static jni::ref<javax::swing::border::MatteBorder> createMatteBorder(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::Color> p5) { return call_static_method<"createMatteBorder", jni::ref<javax::swing::border::MatteBorder>>(p1, p2, p3, p4, p5); }
	static jni::ref<javax::swing::border::MatteBorder> createMatteBorder(jint p1, jint p2, jint p3, jint p4, jni::ref<javax::swing::Icon> p5) { return call_static_method<"createMatteBorder", jni::ref<javax::swing::border::MatteBorder>>(p1, p2, p3, p4, p5); }
	static jni::ref<javax::swing::border::Border> createStrokeBorder(jni::ref<java::awt::BasicStroke> p1) { return call_static_method<"createStrokeBorder", jni::ref<javax::swing::border::Border>>(p1); }
	static jni::ref<javax::swing::border::Border> createStrokeBorder(jni::ref<java::awt::BasicStroke> p1, jni::ref<java::awt::Paint> p2) { return call_static_method<"createStrokeBorder", jni::ref<javax::swing::border::Border>>(p1, p2); }
	static jni::ref<javax::swing::border::Border> createDashedBorder(jni::ref<java::awt::Paint> p1) { return call_static_method<"createDashedBorder", jni::ref<javax::swing::border::Border>>(p1); }
	static jni::ref<javax::swing::border::Border> createDashedBorder(jni::ref<java::awt::Paint> p1, jfloat p2, jfloat p3) { return call_static_method<"createDashedBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3); }
	static jni::ref<javax::swing::border::Border> createDashedBorder(jni::ref<java::awt::Paint> p1, jfloat p2, jfloat p3, jfloat p4, jboolean p5) { return call_static_method<"createDashedBorder", jni::ref<javax::swing::border::Border>>(p1, p2, p3, p4, p5); }

protected:

	BorderFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_BORDERFACTORY
