// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_LOOKANDFEEL_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_LOOKANDFEEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class LookAndFeel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::LookAndFeel>
{
	static constexpr fixed_string class_name = "javax/swing/LookAndFeel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_LOOKANDFEEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_LOOKANDFEEL)
#define SCAPIX_JAVA_API_JAVAX_SWING_LOOKANDFEEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/ComponentInputMap.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/InputMap.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/LayoutStyle.h>
#include <scapix/java_api/javax/swing/UIDefaults.h>
#include <scapix/java_api/javax/swing/text/JTextComponent_KeyBinding.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::LookAndFeel : public jni::object_base<"javax/swing/LookAndFeel",
	java::lang::Object>
{
public:

	static jni::ref<javax::swing::LookAndFeel> new_object() { return base_::new_object(); }
	static void installColors(jni::ref<javax::swing::JComponent> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"installColors", void>(p1, p2, p3); }
	static void installColorsAndFont(jni::ref<javax::swing::JComponent> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_static_method<"installColorsAndFont", void>(p1, p2, p3, p4); }
	static void installBorder(jni::ref<javax::swing::JComponent> p1, jni::ref<java::lang::String> p2) { return call_static_method<"installBorder", void>(p1, p2); }
	static void uninstallBorder(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"uninstallBorder", void>(p1); }
	static void installProperty(jni::ref<javax::swing::JComponent> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3) { return call_static_method<"installProperty", void>(p1, p2, p3); }
	static jni::ref<jni::array<javax::swing::text::JTextComponent_KeyBinding>> makeKeyBindings(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"makeKeyBindings", jni::ref<jni::array<javax::swing::text::JTextComponent_KeyBinding>>>(p1); }
	static jni::ref<javax::swing::InputMap> makeInputMap(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"makeInputMap", jni::ref<javax::swing::InputMap>>(p1); }
	static jni::ref<javax::swing::ComponentInputMap> makeComponentInputMap(jni::ref<javax::swing::JComponent> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_static_method<"makeComponentInputMap", jni::ref<javax::swing::ComponentInputMap>>(p1, p2); }
	static void loadKeyBindings(jni::ref<javax::swing::InputMap> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_static_method<"loadKeyBindings", void>(p1, p2); }
	static jni::ref<java::lang::Object> makeIcon(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2) { return call_static_method<"makeIcon", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<javax::swing::LayoutStyle> getLayoutStyle() { return call_method<"getLayoutStyle", jni::ref<javax::swing::LayoutStyle>>(); }
	void provideErrorFeedback(jni::ref<java::awt::Component> p1) { return call_method<"provideErrorFeedback", void>(p1); }
	static jni::ref<java::lang::Object> getDesktopPropertyValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"getDesktopPropertyValue", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<javax::swing::Icon> getDisabledIcon(jni::ref<javax::swing::JComponent> p1, jni::ref<javax::swing::Icon> p2) { return call_method<"getDisabledIcon", jni::ref<javax::swing::Icon>>(p1, p2); }
	jni::ref<javax::swing::Icon> getDisabledSelectedIcon(jni::ref<javax::swing::JComponent> p1, jni::ref<javax::swing::Icon> p2) { return call_method<"getDisabledSelectedIcon", jni::ref<javax::swing::Icon>>(p1, p2); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getID() { return call_method<"getID", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDescription() { return call_method<"getDescription", jni::ref<java::lang::String>>(); }
	jboolean getSupportsWindowDecorations() { return call_method<"getSupportsWindowDecorations", jboolean>(); }
	jboolean isNativeLookAndFeel() { return call_method<"isNativeLookAndFeel", jboolean>(); }
	jboolean isSupportedLookAndFeel() { return call_method<"isSupportedLookAndFeel", jboolean>(); }
	void initialize() { return call_method<"initialize", void>(); }
	void uninitialize() { return call_method<"uninitialize", void>(); }
	jni::ref<javax::swing::UIDefaults> getDefaults() { return call_method<"getDefaults", jni::ref<javax::swing::UIDefaults>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	LookAndFeel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_LOOKANDFEEL
