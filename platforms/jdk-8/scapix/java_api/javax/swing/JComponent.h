// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/javax/swing/TransferHandler_HasGetTransferHandler.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JComponent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JComponent>
{
	static constexpr fixed_string class_name = "javax/swing/JComponent";
	using base_classes = std::tuple<scapix::java_api::java::awt::Container, scapix::java_api::java::io::Serializable, scapix::java_api::javax::swing::TransferHandler_HasGetTransferHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT)
#define SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Component_BaselineResizeBehavior.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/event/ActionListener.h>
#include <scapix/java_api/java/awt/event/MouseEvent.h>
#include <scapix/java_api/java/beans/VetoableChangeListener.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/EventListener.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/swing/ActionMap.h>
#include <scapix/java_api/javax/swing/InputMap.h>
#include <scapix/java_api/javax/swing/InputVerifier.h>
#include <scapix/java_api/javax/swing/JPopupMenu.h>
#include <scapix/java_api/javax/swing/JRootPane.h>
#include <scapix/java_api/javax/swing/JToolTip.h>
#include <scapix/java_api/javax/swing/KeyStroke.h>
#include <scapix/java_api/javax/swing/TransferHandler.h>
#include <scapix/java_api/javax/swing/border/Border.h>
#include <scapix/java_api/javax/swing/event/AncestorListener.h>
#include <scapix/java_api/javax/swing/JComponent_AccessibleJComponent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JComponent : public jni::object_base<"javax/swing/JComponent",
	java::awt::Container,
	java::io::Serializable,
	javax::swing::TransferHandler_HasGetTransferHandler>
{
public:

	using AccessibleJComponent = JComponent_AccessibleJComponent;

	static jint WHEN_FOCUSED() { return get_static_field<"WHEN_FOCUSED", jint>(); }
	static jint WHEN_ANCESTOR_OF_FOCUSED_COMPONENT() { return get_static_field<"WHEN_ANCESTOR_OF_FOCUSED_COMPONENT", jint>(); }
	static jint WHEN_IN_FOCUSED_WINDOW() { return get_static_field<"WHEN_IN_FOCUSED_WINDOW", jint>(); }
	static jint UNDEFINED_CONDITION() { return get_static_field<"UNDEFINED_CONDITION", jint>(); }
	static jni::ref<java::lang::String> TOOL_TIP_TEXT_KEY() { return get_static_field<"TOOL_TIP_TEXT_KEY", jni::ref<java::lang::String>>(); }

	void setInheritsPopupMenu(jboolean p1) { return call_method<"setInheritsPopupMenu", void>(p1); }
	jboolean getInheritsPopupMenu() { return call_method<"getInheritsPopupMenu", jboolean>(); }
	void setComponentPopupMenu(jni::ref<javax::swing::JPopupMenu> p1) { return call_method<"setComponentPopupMenu", void>(p1); }
	jni::ref<javax::swing::JPopupMenu> getComponentPopupMenu() { return call_method<"getComponentPopupMenu", jni::ref<javax::swing::JPopupMenu>>(); }
	static jni::ref<javax::swing::JComponent> new_object() { return base_::new_object(); }
	void updateUI() { return call_method<"updateUI", void>(); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	void update(jni::ref<java::awt::Graphics> p1) { return call_method<"update", void>(p1); }
	void paint(jni::ref<java::awt::Graphics> p1) { return call_method<"paint", void>(p1); }
	void printAll(jni::ref<java::awt::Graphics> p1) { return call_method<"printAll", void>(p1); }
	void print(jni::ref<java::awt::Graphics> p1) { return call_method<"print", void>(p1); }
	jboolean isPaintingTile() { return call_method<"isPaintingTile", jboolean>(); }
	jboolean isPaintingForPrint() { return call_method<"isPaintingForPrint", jboolean>(); }
	jboolean isManagingFocus() { return call_method<"isManagingFocus", jboolean>(); }
	void setNextFocusableComponent(jni::ref<java::awt::Component> p1) { return call_method<"setNextFocusableComponent", void>(p1); }
	jni::ref<java::awt::Component> getNextFocusableComponent() { return call_method<"getNextFocusableComponent", jni::ref<java::awt::Component>>(); }
	void setRequestFocusEnabled(jboolean p1) { return call_method<"setRequestFocusEnabled", void>(p1); }
	jboolean isRequestFocusEnabled() { return call_method<"isRequestFocusEnabled", jboolean>(); }
	void requestFocus() { return call_method<"requestFocus", void>(); }
	jboolean requestFocus(jboolean p1) { return call_method<"requestFocus", jboolean>(p1); }
	jboolean requestFocusInWindow() { return call_method<"requestFocusInWindow", jboolean>(); }
	void grabFocus() { return call_method<"grabFocus", void>(); }
	void setVerifyInputWhenFocusTarget(jboolean p1) { return call_method<"setVerifyInputWhenFocusTarget", void>(p1); }
	jboolean getVerifyInputWhenFocusTarget() { return call_method<"getVerifyInputWhenFocusTarget", jboolean>(); }
	jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<java::awt::Font> p1) { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1); }
	void setPreferredSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setPreferredSize", void>(p1); }
	jni::ref<java::awt::Dimension> getPreferredSize() { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(); }
	void setMaximumSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setMaximumSize", void>(p1); }
	jni::ref<java::awt::Dimension> getMaximumSize() { return call_method<"getMaximumSize", jni::ref<java::awt::Dimension>>(); }
	void setMinimumSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setMinimumSize", void>(p1); }
	jni::ref<java::awt::Dimension> getMinimumSize() { return call_method<"getMinimumSize", jni::ref<java::awt::Dimension>>(); }
	jboolean contains(jint p1, jint p2) { return call_method<"contains", jboolean>(p1, p2); }
	void setBorder(jni::ref<javax::swing::border::Border> p1) { return call_method<"setBorder", void>(p1); }
	jni::ref<javax::swing::border::Border> getBorder() { return call_method<"getBorder", jni::ref<javax::swing::border::Border>>(); }
	jni::ref<java::awt::Insets> getInsets() { return call_method<"getInsets", jni::ref<java::awt::Insets>>(); }
	jni::ref<java::awt::Insets> getInsets(jni::ref<java::awt::Insets> p1) { return call_method<"getInsets", jni::ref<java::awt::Insets>>(p1); }
	jfloat getAlignmentY() { return call_method<"getAlignmentY", jfloat>(); }
	void setAlignmentY(jfloat p1) { return call_method<"setAlignmentY", void>(p1); }
	jfloat getAlignmentX() { return call_method<"getAlignmentX", jfloat>(); }
	void setAlignmentX(jfloat p1) { return call_method<"setAlignmentX", void>(p1); }
	void setInputVerifier(jni::ref<javax::swing::InputVerifier> p1) { return call_method<"setInputVerifier", void>(p1); }
	jni::ref<javax::swing::InputVerifier> getInputVerifier() { return call_method<"getInputVerifier", jni::ref<javax::swing::InputVerifier>>(); }
	jni::ref<java::awt::Graphics> getGraphics() { return call_method<"getGraphics", jni::ref<java::awt::Graphics>>(); }
	void setDebugGraphicsOptions(jint p1) { return call_method<"setDebugGraphicsOptions", void>(p1); }
	jint getDebugGraphicsOptions() { return call_method<"getDebugGraphicsOptions", jint>(); }
	void registerKeyboardAction(jni::ref<java::awt::event::ActionListener> p1, jni::ref<java::lang::String> p2, jni::ref<javax::swing::KeyStroke> p3, jint p4) { return call_method<"registerKeyboardAction", void>(p1, p2, p3, p4); }
	void registerKeyboardAction(jni::ref<java::awt::event::ActionListener> p1, jni::ref<javax::swing::KeyStroke> p2, jint p3) { return call_method<"registerKeyboardAction", void>(p1, p2, p3); }
	void unregisterKeyboardAction(jni::ref<javax::swing::KeyStroke> p1) { return call_method<"unregisterKeyboardAction", void>(p1); }
	jni::ref<jni::array<javax::swing::KeyStroke>> getRegisteredKeyStrokes() { return call_method<"getRegisteredKeyStrokes", jni::ref<jni::array<javax::swing::KeyStroke>>>(); }
	jint getConditionForKeyStroke(jni::ref<javax::swing::KeyStroke> p1) { return call_method<"getConditionForKeyStroke", jint>(p1); }
	jni::ref<java::awt::event::ActionListener> getActionForKeyStroke(jni::ref<javax::swing::KeyStroke> p1) { return call_method<"getActionForKeyStroke", jni::ref<java::awt::event::ActionListener>>(p1); }
	void resetKeyboardActions() { return call_method<"resetKeyboardActions", void>(); }
	void setInputMap(jint p1, jni::ref<javax::swing::InputMap> p2) { return call_method<"setInputMap", void>(p1, p2); }
	jni::ref<javax::swing::InputMap> getInputMap(jint p1) { return call_method<"getInputMap", jni::ref<javax::swing::InputMap>>(p1); }
	jni::ref<javax::swing::InputMap> getInputMap() { return call_method<"getInputMap", jni::ref<javax::swing::InputMap>>(); }
	void setActionMap(jni::ref<javax::swing::ActionMap> p1) { return call_method<"setActionMap", void>(p1); }
	jni::ref<javax::swing::ActionMap> getActionMap() { return call_method<"getActionMap", jni::ref<javax::swing::ActionMap>>(); }
	jint getBaseline(jint p1, jint p2) { return call_method<"getBaseline", jint>(p1, p2); }
	jni::ref<java::awt::Component_BaselineResizeBehavior> getBaselineResizeBehavior() { return call_method<"getBaselineResizeBehavior", jni::ref<java::awt::Component_BaselineResizeBehavior>>(); }
	jboolean requestDefaultFocus() { return call_method<"requestDefaultFocus", jboolean>(); }
	void setVisible(jboolean p1) { return call_method<"setVisible", void>(p1); }
	void setEnabled(jboolean p1) { return call_method<"setEnabled", void>(p1); }
	void setForeground(jni::ref<java::awt::Color> p1) { return call_method<"setForeground", void>(p1); }
	void setBackground(jni::ref<java::awt::Color> p1) { return call_method<"setBackground", void>(p1); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	static jni::ref<java::util::Locale> getDefaultLocale() { return call_static_method<"getDefaultLocale", jni::ref<java::util::Locale>>(); }
	static void setDefaultLocale(jni::ref<java::util::Locale> p1) { return call_static_method<"setDefaultLocale", void>(p1); }
	void setToolTipText(jni::ref<java::lang::String> p1) { return call_method<"setToolTipText", void>(p1); }
	jni::ref<java::lang::String> getToolTipText() { return call_method<"getToolTipText", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getToolTipText(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"getToolTipText", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::awt::Point> getToolTipLocation(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"getToolTipLocation", jni::ref<java::awt::Point>>(p1); }
	jni::ref<java::awt::Point> getPopupLocation(jni::ref<java::awt::event::MouseEvent> p1) { return call_method<"getPopupLocation", jni::ref<java::awt::Point>>(p1); }
	jni::ref<javax::swing::JToolTip> createToolTip() { return call_method<"createToolTip", jni::ref<javax::swing::JToolTip>>(); }
	void scrollRectToVisible(jni::ref<java::awt::Rectangle> p1) { return call_method<"scrollRectToVisible", void>(p1); }
	void setAutoscrolls(jboolean p1) { return call_method<"setAutoscrolls", void>(p1); }
	jboolean getAutoscrolls() { return call_method<"getAutoscrolls", jboolean>(); }
	void setTransferHandler(jni::ref<javax::swing::TransferHandler> p1) { return call_method<"setTransferHandler", void>(p1); }
	jni::ref<javax::swing::TransferHandler> getTransferHandler() { return call_method<"getTransferHandler", jni::ref<javax::swing::TransferHandler>>(); }
	void enable() { return call_method<"enable", void>(); }
	void disable() { return call_method<"disable", void>(); }
	jni::ref<java::lang::Object> getClientProperty(jni::ref<java::lang::Object> p1) { return call_method<"getClientProperty", jni::ref<java::lang::Object>>(p1); }
	void putClientProperty(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"putClientProperty", void>(p1, p2); }
	void setFocusTraversalKeys(jint p1, jni::ref<java::util::Set> p2) { return call_method<"setFocusTraversalKeys", void>(p1, p2); }
	static jboolean isLightweightComponent(jni::ref<java::awt::Component> p1) { return call_static_method<"isLightweightComponent", jboolean>(p1); }
	void reshape(jint p1, jint p2, jint p3, jint p4) { return call_method<"reshape", void>(p1, p2, p3, p4); }
	jni::ref<java::awt::Rectangle> getBounds(jni::ref<java::awt::Rectangle> p1) { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(p1); }
	jni::ref<java::awt::Dimension> getSize(jni::ref<java::awt::Dimension> p1) { return call_method<"getSize", jni::ref<java::awt::Dimension>>(p1); }
	jni::ref<java::awt::Point> getLocation(jni::ref<java::awt::Point> p1) { return call_method<"getLocation", jni::ref<java::awt::Point>>(p1); }
	jint getX() { return call_method<"getX", jint>(); }
	jint getY() { return call_method<"getY", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jboolean isOpaque() { return call_method<"isOpaque", jboolean>(); }
	void setOpaque(jboolean p1) { return call_method<"setOpaque", void>(p1); }
	void computeVisibleRect(jni::ref<java::awt::Rectangle> p1) { return call_method<"computeVisibleRect", void>(p1); }
	jni::ref<java::awt::Rectangle> getVisibleRect() { return call_method<"getVisibleRect", jni::ref<java::awt::Rectangle>>(); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jboolean p2, jboolean p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void firePropertyChange(jni::ref<java::lang::String> p1, jchar p2, jchar p3) { return call_method<"firePropertyChange", void>(p1, p2, p3); }
	void addVetoableChangeListener(jni::ref<java::beans::VetoableChangeListener> p1) { return call_method<"addVetoableChangeListener", void>(p1); }
	void removeVetoableChangeListener(jni::ref<java::beans::VetoableChangeListener> p1) { return call_method<"removeVetoableChangeListener", void>(p1); }
	jni::ref<jni::array<java::beans::VetoableChangeListener>> getVetoableChangeListeners() { return call_method<"getVetoableChangeListeners", jni::ref<jni::array<java::beans::VetoableChangeListener>>>(); }
	jni::ref<java::awt::Container> getTopLevelAncestor() { return call_method<"getTopLevelAncestor", jni::ref<java::awt::Container>>(); }
	void addAncestorListener(jni::ref<javax::swing::event::AncestorListener> p1) { return call_method<"addAncestorListener", void>(p1); }
	void removeAncestorListener(jni::ref<javax::swing::event::AncestorListener> p1) { return call_method<"removeAncestorListener", void>(p1); }
	jni::ref<jni::array<javax::swing::event::AncestorListener>> getAncestorListeners() { return call_method<"getAncestorListeners", jni::ref<jni::array<javax::swing::event::AncestorListener>>>(); }
	jni::ref<jni::array<java::util::EventListener>> getListeners(jni::ref<java::lang::Class> p1) { return call_method<"getListeners", jni::ref<jni::array<java::util::EventListener>>>(p1); }
	void addNotify() { return call_method<"addNotify", void>(); }
	void removeNotify() { return call_method<"removeNotify", void>(); }
	void repaint(jlong p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"repaint", void>(p1, p2, p3, p4, p5); }
	void repaint(jni::ref<java::awt::Rectangle> p1) { return call_method<"repaint", void>(p1); }
	void revalidate() { return call_method<"revalidate", void>(); }
	jboolean isValidateRoot() { return call_method<"isValidateRoot", jboolean>(); }
	jboolean isOptimizedDrawingEnabled() { return call_method<"isOptimizedDrawingEnabled", jboolean>(); }
	void paintImmediately(jint p1, jint p2, jint p3, jint p4) { return call_method<"paintImmediately", void>(p1, p2, p3, p4); }
	void paintImmediately(jni::ref<java::awt::Rectangle> p1) { return call_method<"paintImmediately", void>(p1); }
	void setDoubleBuffered(jboolean p1) { return call_method<"setDoubleBuffered", void>(p1); }
	jboolean isDoubleBuffered() { return call_method<"isDoubleBuffered", jboolean>(); }
	jni::ref<javax::swing::JRootPane> getRootPane() { return call_method<"getRootPane", jni::ref<javax::swing::JRootPane>>(); }
	void hide() { return call_method<"hide", void>(); }

protected:

	JComponent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JCOMPONENT
