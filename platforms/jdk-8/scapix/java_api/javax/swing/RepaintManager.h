// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_REPAINTMANAGER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_REPAINTMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class RepaintManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::RepaintManager>
{
	static constexpr fixed_string class_name = "javax/swing/RepaintManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_REPAINTMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_REPAINTMANAGER)
#define SCAPIX_JAVA_API_JAVAX_SWING_REPAINTMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/applet/Applet.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/Window.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::RepaintManager : public jni::object_base<"javax/swing/RepaintManager",
	java::lang::Object>
{
public:

	static jni::ref<javax::swing::RepaintManager> currentManager(jni::ref<java::awt::Component> p1) { return call_static_method<"currentManager", jni::ref<javax::swing::RepaintManager>>(p1); }
	static jni::ref<javax::swing::RepaintManager> currentManager(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"currentManager", jni::ref<javax::swing::RepaintManager>>(p1); }
	static void setCurrentManager(jni::ref<javax::swing::RepaintManager> p1) { return call_static_method<"setCurrentManager", void>(p1); }
	static jni::ref<javax::swing::RepaintManager> new_object() { return base_::new_object(); }
	void addInvalidComponent(jni::ref<javax::swing::JComponent> p1) { return call_method<"addInvalidComponent", void>(p1); }
	void removeInvalidComponent(jni::ref<javax::swing::JComponent> p1) { return call_method<"removeInvalidComponent", void>(p1); }
	void addDirtyRegion(jni::ref<javax::swing::JComponent> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"addDirtyRegion", void>(p1, p2, p3, p4, p5); }
	void addDirtyRegion(jni::ref<java::awt::Window> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"addDirtyRegion", void>(p1, p2, p3, p4, p5); }
	void addDirtyRegion(jni::ref<java::applet::Applet> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"addDirtyRegion", void>(p1, p2, p3, p4, p5); }
	jni::ref<java::awt::Rectangle> getDirtyRegion(jni::ref<javax::swing::JComponent> p1) { return call_method<"getDirtyRegion", jni::ref<java::awt::Rectangle>>(p1); }
	void markCompletelyDirty(jni::ref<javax::swing::JComponent> p1) { return call_method<"markCompletelyDirty", void>(p1); }
	void markCompletelyClean(jni::ref<javax::swing::JComponent> p1) { return call_method<"markCompletelyClean", void>(p1); }
	jboolean isCompletelyDirty(jni::ref<javax::swing::JComponent> p1) { return call_method<"isCompletelyDirty", jboolean>(p1); }
	void validateInvalidComponents() { return call_method<"validateInvalidComponents", void>(); }
	void paintDirtyRegions() { return call_method<"paintDirtyRegions", void>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::awt::Image> getOffscreenBuffer(jni::ref<java::awt::Component> p1, jint p2, jint p3) { return call_method<"getOffscreenBuffer", jni::ref<java::awt::Image>>(p1, p2, p3); }
	jni::ref<java::awt::Image> getVolatileOffscreenBuffer(jni::ref<java::awt::Component> p1, jint p2, jint p3) { return call_method<"getVolatileOffscreenBuffer", jni::ref<java::awt::Image>>(p1, p2, p3); }
	void setDoubleBufferMaximumSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setDoubleBufferMaximumSize", void>(p1); }
	jni::ref<java::awt::Dimension> getDoubleBufferMaximumSize() { return call_method<"getDoubleBufferMaximumSize", jni::ref<java::awt::Dimension>>(); }
	void setDoubleBufferingEnabled(jboolean p1) { return call_method<"setDoubleBufferingEnabled", void>(p1); }
	jboolean isDoubleBufferingEnabled() { return call_method<"isDoubleBufferingEnabled", jboolean>(); }

protected:

	RepaintManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_REPAINTMANAGER
