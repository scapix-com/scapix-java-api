// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent_AccessibleJComponent.h>
#include <scapix/java_api/javax/accessibility/AccessibleSelection.h>
#include <scapix/java_api/javax/swing/event/ListSelectionListener.h>
#include <scapix/java_api/javax/swing/event/TableModelListener.h>
#include <scapix/java_api/javax/swing/event/TableColumnModelListener.h>
#include <scapix/java_api/javax/swing/event/CellEditorListener.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/javax/accessibility/AccessibleExtendedTable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_ACCESSIBLEJTABLE_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_ACCESSIBLEJTABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JTable_AccessibleJTable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JTable_AccessibleJTable>
{
	static constexpr fixed_string class_name = "javax/swing/JTable$AccessibleJTable";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent_AccessibleJComponent, scapix::java_api::javax::accessibility::AccessibleSelection, scapix::java_api::javax::swing::event::ListSelectionListener, scapix::java_api::javax::swing::event::TableModelListener, scapix::java_api::javax::swing::event::TableColumnModelListener, scapix::java_api::javax::swing::event::CellEditorListener, scapix::java_api::java::beans::PropertyChangeListener, scapix::java_api::javax::accessibility::AccessibleExtendedTable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_ACCESSIBLEJTABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_ACCESSIBLEJTABLE)
#define SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_ACCESSIBLEJTABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/beans/PropertyChangeEvent.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>
#include <scapix/java_api/javax/accessibility/AccessibleRole.h>
#include <scapix/java_api/javax/accessibility/AccessibleTable.h>
#include <scapix/java_api/javax/swing/event/ChangeEvent.h>
#include <scapix/java_api/javax/swing/event/ListSelectionEvent.h>
#include <scapix/java_api/javax/swing/event/TableColumnModelEvent.h>
#include <scapix/java_api/javax/swing/event/TableModelEvent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JTable_AccessibleJTable : public jni::object_base<"javax/swing/JTable$AccessibleJTable",
	javax::swing::JComponent_AccessibleJComponent,
	javax::accessibility::AccessibleSelection,
	javax::swing::event::ListSelectionListener,
	javax::swing::event::TableModelListener,
	javax::swing::event::TableColumnModelListener,
	javax::swing::event::CellEditorListener,
	java::beans::PropertyChangeListener,
	javax::accessibility::AccessibleExtendedTable>
{
public:

	void propertyChange(jni::ref<java::beans::PropertyChangeEvent> p1) { return call_method<"propertyChange", void>(p1); }
	void tableChanged(jni::ref<javax::swing::event::TableModelEvent> p1) { return call_method<"tableChanged", void>(p1); }
	void tableRowsInserted(jni::ref<javax::swing::event::TableModelEvent> p1) { return call_method<"tableRowsInserted", void>(p1); }
	void tableRowsDeleted(jni::ref<javax::swing::event::TableModelEvent> p1) { return call_method<"tableRowsDeleted", void>(p1); }
	void columnAdded(jni::ref<javax::swing::event::TableColumnModelEvent> p1) { return call_method<"columnAdded", void>(p1); }
	void columnRemoved(jni::ref<javax::swing::event::TableColumnModelEvent> p1) { return call_method<"columnRemoved", void>(p1); }
	void columnMoved(jni::ref<javax::swing::event::TableColumnModelEvent> p1) { return call_method<"columnMoved", void>(p1); }
	void columnMarginChanged(jni::ref<javax::swing::event::ChangeEvent> p1) { return call_method<"columnMarginChanged", void>(p1); }
	void columnSelectionChanged(jni::ref<javax::swing::event::ListSelectionEvent> p1) { return call_method<"columnSelectionChanged", void>(p1); }
	void editingStopped(jni::ref<javax::swing::event::ChangeEvent> p1) { return call_method<"editingStopped", void>(p1); }
	void editingCanceled(jni::ref<javax::swing::event::ChangeEvent> p1) { return call_method<"editingCanceled", void>(p1); }
	void valueChanged(jni::ref<javax::swing::event::ListSelectionEvent> p1) { return call_method<"valueChanged", void>(p1); }
	jni::ref<javax::accessibility::AccessibleSelection> getAccessibleSelection() { return call_method<"getAccessibleSelection", jni::ref<javax::accessibility::AccessibleSelection>>(); }
	jni::ref<javax::accessibility::AccessibleRole> getAccessibleRole() { return call_method<"getAccessibleRole", jni::ref<javax::accessibility::AccessibleRole>>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleAt(jni::ref<java::awt::Point> p1) { return call_method<"getAccessibleAt", jni::ref<javax::accessibility::Accessible>>(p1); }
	jint getAccessibleChildrenCount() { return call_method<"getAccessibleChildrenCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleChild(jint p1) { return call_method<"getAccessibleChild", jni::ref<javax::accessibility::Accessible>>(p1); }
	jint getAccessibleSelectionCount() { return call_method<"getAccessibleSelectionCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleSelection(jint p1) { return call_method<"getAccessibleSelection", jni::ref<javax::accessibility::Accessible>>(p1); }
	jboolean isAccessibleChildSelected(jint p1) { return call_method<"isAccessibleChildSelected", jboolean>(p1); }
	void addAccessibleSelection(jint p1) { return call_method<"addAccessibleSelection", void>(p1); }
	void removeAccessibleSelection(jint p1) { return call_method<"removeAccessibleSelection", void>(p1); }
	void clearAccessibleSelection() { return call_method<"clearAccessibleSelection", void>(); }
	void selectAllAccessibleSelection() { return call_method<"selectAllAccessibleSelection", void>(); }
	jint getAccessibleRow(jint p1) { return call_method<"getAccessibleRow", jint>(p1); }
	jint getAccessibleColumn(jint p1) { return call_method<"getAccessibleColumn", jint>(p1); }
	jint getAccessibleIndex(jint p1, jint p2) { return call_method<"getAccessibleIndex", jint>(p1, p2); }
	jni::ref<javax::accessibility::AccessibleTable> getAccessibleTable() { return call_method<"getAccessibleTable", jni::ref<javax::accessibility::AccessibleTable>>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleCaption() { return call_method<"getAccessibleCaption", jni::ref<javax::accessibility::Accessible>>(); }
	void setAccessibleCaption(jni::ref<javax::accessibility::Accessible> p1) { return call_method<"setAccessibleCaption", void>(p1); }
	jni::ref<javax::accessibility::Accessible> getAccessibleSummary() { return call_method<"getAccessibleSummary", jni::ref<javax::accessibility::Accessible>>(); }
	void setAccessibleSummary(jni::ref<javax::accessibility::Accessible> p1) { return call_method<"setAccessibleSummary", void>(p1); }
	jint getAccessibleRowCount() { return call_method<"getAccessibleRowCount", jint>(); }
	jint getAccessibleColumnCount() { return call_method<"getAccessibleColumnCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleAt(jint p1, jint p2) { return call_method<"getAccessibleAt", jni::ref<javax::accessibility::Accessible>>(p1, p2); }
	jint getAccessibleRowExtentAt(jint p1, jint p2) { return call_method<"getAccessibleRowExtentAt", jint>(p1, p2); }
	jint getAccessibleColumnExtentAt(jint p1, jint p2) { return call_method<"getAccessibleColumnExtentAt", jint>(p1, p2); }
	jni::ref<javax::accessibility::AccessibleTable> getAccessibleRowHeader() { return call_method<"getAccessibleRowHeader", jni::ref<javax::accessibility::AccessibleTable>>(); }
	void setAccessibleRowHeader(jni::ref<javax::accessibility::AccessibleTable> p1) { return call_method<"setAccessibleRowHeader", void>(p1); }
	jni::ref<javax::accessibility::AccessibleTable> getAccessibleColumnHeader() { return call_method<"getAccessibleColumnHeader", jni::ref<javax::accessibility::AccessibleTable>>(); }
	void setAccessibleColumnHeader(jni::ref<javax::accessibility::AccessibleTable> p1) { return call_method<"setAccessibleColumnHeader", void>(p1); }
	jni::ref<javax::accessibility::Accessible> getAccessibleRowDescription(jint p1) { return call_method<"getAccessibleRowDescription", jni::ref<javax::accessibility::Accessible>>(p1); }
	void setAccessibleRowDescription(jint p1, jni::ref<javax::accessibility::Accessible> p2) { return call_method<"setAccessibleRowDescription", void>(p1, p2); }
	jni::ref<javax::accessibility::Accessible> getAccessibleColumnDescription(jint p1) { return call_method<"getAccessibleColumnDescription", jni::ref<javax::accessibility::Accessible>>(p1); }
	void setAccessibleColumnDescription(jint p1, jni::ref<javax::accessibility::Accessible> p2) { return call_method<"setAccessibleColumnDescription", void>(p1, p2); }
	jboolean isAccessibleSelected(jint p1, jint p2) { return call_method<"isAccessibleSelected", jboolean>(p1, p2); }
	jboolean isAccessibleRowSelected(jint p1) { return call_method<"isAccessibleRowSelected", jboolean>(p1); }
	jboolean isAccessibleColumnSelected(jint p1) { return call_method<"isAccessibleColumnSelected", jboolean>(p1); }
	jni::ref<jni::array<jint>> getSelectedAccessibleRows() { return call_method<"getSelectedAccessibleRows", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<jint>> getSelectedAccessibleColumns() { return call_method<"getSelectedAccessibleColumns", jni::ref<jni::array<jint>>>(); }
	jint getAccessibleRowAtIndex(jint p1) { return call_method<"getAccessibleRowAtIndex", jint>(p1); }
	jint getAccessibleColumnAtIndex(jint p1) { return call_method<"getAccessibleColumnAtIndex", jint>(p1); }
	jint getAccessibleIndexAt(jint p1, jint p2) { return call_method<"getAccessibleIndexAt", jint>(p1, p2); }

protected:

	JTable_AccessibleJTable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JTABLE_ACCESSIBLEJTABLE
