// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Hashtable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_UIDEFAULTS_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_UIDEFAULTS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class UIDefaults; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::UIDefaults>
{
	static constexpr fixed_string class_name = "javax/swing/UIDefaults";
	using base_classes = std::tuple<scapix::java_api::java::util::Hashtable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_UIDEFAULTS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_UIDEFAULTS)
#define SCAPIX_JAVA_API_JAVAX_SWING_UIDEFAULTS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/border/Border.h>
#include <scapix/java_api/javax/swing/plaf/ComponentUI.h>
#include <scapix/java_api/javax/swing/UIDefaults_LazyValue.h>
#include <scapix/java_api/javax/swing/UIDefaults_ActiveValue.h>
#include <scapix/java_api/javax/swing/UIDefaults_ProxyLazyValue.h>
#include <scapix/java_api/javax/swing/UIDefaults_LazyInputMap.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::UIDefaults : public jni::object_base<"javax/swing/UIDefaults",
	java::util::Hashtable>
{
public:

	using LazyValue = UIDefaults_LazyValue;
	using ActiveValue = UIDefaults_ActiveValue;
	using ProxyLazyValue = UIDefaults_ProxyLazyValue;
	using LazyInputMap = UIDefaults_LazyInputMap;

	static jni::ref<javax::swing::UIDefaults> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::UIDefaults> new_object(jint p1, jfloat p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::UIDefaults> new_object(jni::ref<jni::array<java::lang::Object>> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"get", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"put", jni::ref<java::lang::Object>>(p1, p2); }
	void putDefaults(jni::ref<jni::array<java::lang::Object>> p1) { return call_method<"putDefaults", void>(p1); }
	jni::ref<java::awt::Font> getFont(jni::ref<java::lang::Object> p1) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	jni::ref<java::awt::Font> getFont(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1, p2); }
	jni::ref<java::awt::Color> getColor(jni::ref<java::lang::Object> p1) { return call_method<"getColor", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getColor(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getColor", jni::ref<java::awt::Color>>(p1, p2); }
	jni::ref<javax::swing::Icon> getIcon(jni::ref<java::lang::Object> p1) { return call_method<"getIcon", jni::ref<javax::swing::Icon>>(p1); }
	jni::ref<javax::swing::Icon> getIcon(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getIcon", jni::ref<javax::swing::Icon>>(p1, p2); }
	jni::ref<javax::swing::border::Border> getBorder(jni::ref<java::lang::Object> p1) { return call_method<"getBorder", jni::ref<javax::swing::border::Border>>(p1); }
	jni::ref<javax::swing::border::Border> getBorder(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getBorder", jni::ref<javax::swing::border::Border>>(p1, p2); }
	jni::ref<java::lang::String> getString(jni::ref<java::lang::Object> p1) { return call_method<"getString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getString(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getString", jni::ref<java::lang::String>>(p1, p2); }
	jint getInt(jni::ref<java::lang::Object> p1) { return call_method<"getInt", jint>(p1); }
	jint getInt(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getInt", jint>(p1, p2); }
	jboolean getBoolean(jni::ref<java::lang::Object> p1) { return call_method<"getBoolean", jboolean>(p1); }
	jboolean getBoolean(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getBoolean", jboolean>(p1, p2); }
	jni::ref<java::awt::Insets> getInsets(jni::ref<java::lang::Object> p1) { return call_method<"getInsets", jni::ref<java::awt::Insets>>(p1); }
	jni::ref<java::awt::Insets> getInsets(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getInsets", jni::ref<java::awt::Insets>>(p1, p2); }
	jni::ref<java::awt::Dimension> getDimension(jni::ref<java::lang::Object> p1) { return call_method<"getDimension", jni::ref<java::awt::Dimension>>(p1); }
	jni::ref<java::awt::Dimension> getDimension(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_method<"getDimension", jni::ref<java::awt::Dimension>>(p1, p2); }
	jni::ref<java::lang::Class> getUIClass(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2) { return call_method<"getUIClass", jni::ref<java::lang::Class>>(p1, p2); }
	jni::ref<java::lang::Class> getUIClass(jni::ref<java::lang::String> p1) { return call_method<"getUIClass", jni::ref<java::lang::Class>>(p1); }
	jni::ref<javax::swing::plaf::ComponentUI> getUI(jni::ref<javax::swing::JComponent> p1) { return call_method<"getUI", jni::ref<javax::swing::plaf::ComponentUI>>(p1); }
	void addPropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_method<"addPropertyChangeListener", void>(p1); }
	void removePropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_method<"removePropertyChangeListener", void>(p1); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners() { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(); }
	void addResourceBundle(jni::ref<java::lang::String> p1) { return call_method<"addResourceBundle", void>(p1); }
	void removeResourceBundle(jni::ref<java::lang::String> p1) { return call_method<"removeResourceBundle", void>(p1); }
	void setDefaultLocale(jni::ref<java::util::Locale> p1) { return call_method<"setDefaultLocale", void>(p1); }
	jni::ref<java::util::Locale> getDefaultLocale() { return call_method<"getDefaultLocale", jni::ref<java::util::Locale>>(); }

protected:

	UIDefaults(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_UIDEFAULTS
