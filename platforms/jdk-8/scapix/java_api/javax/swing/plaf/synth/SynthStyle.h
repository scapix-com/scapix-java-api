// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHSTYLE_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHSTYLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::plaf::synth { class SynthStyle; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::plaf::synth::SynthStyle>
{
	static constexpr fixed_string class_name = "javax/swing/plaf/synth/SynthStyle";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHSTYLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHSTYLE)
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHSTYLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/plaf/synth/ColorType.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthContext.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthGraphicsUtils.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthPainter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::plaf::synth::SynthStyle : public jni::object_base<"javax/swing/plaf/synth/SynthStyle",
	java::lang::Object>
{
public:

	static jni::ref<javax::swing::plaf::synth::SynthStyle> new_object() { return base_::new_object(); }
	jni::ref<javax::swing::plaf::synth::SynthGraphicsUtils> getGraphicsUtils(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"getGraphicsUtils", jni::ref<javax::swing::plaf::synth::SynthGraphicsUtils>>(p1); }
	jni::ref<java::awt::Color> getColor(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<javax::swing::plaf::synth::ColorType> p2) { return call_method<"getColor", jni::ref<java::awt::Color>>(p1, p2); }
	jni::ref<java::awt::Font> getFont(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	jni::ref<java::awt::Insets> getInsets(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::awt::Insets> p2) { return call_method<"getInsets", jni::ref<java::awt::Insets>>(p1, p2); }
	jni::ref<javax::swing::plaf::synth::SynthPainter> getPainter(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"getPainter", jni::ref<javax::swing::plaf::synth::SynthPainter>>(p1); }
	jboolean isOpaque(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"isOpaque", jboolean>(p1); }
	jni::ref<java::lang::Object> get(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::lang::Object> p2) { return call_method<"get", jni::ref<java::lang::Object>>(p1, p2); }
	void installDefaults(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"installDefaults", void>(p1); }
	void uninstallDefaults(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"uninstallDefaults", void>(p1); }
	jint getInt(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"getInt", jint>(p1, p2, p3); }
	jboolean getBoolean(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::lang::Object> p2, jboolean p3) { return call_method<"getBoolean", jboolean>(p1, p2, p3); }
	jni::ref<javax::swing::Icon> getIcon(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::lang::Object> p2) { return call_method<"getIcon", jni::ref<javax::swing::Icon>>(p1, p2); }
	jni::ref<java::lang::String> getString(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::String> p3) { return call_method<"getString", jni::ref<java::lang::String>>(p1, p2, p3); }

protected:

	SynthStyle(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHSTYLE
