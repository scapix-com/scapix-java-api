// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/plaf/basic/BasicLookAndFeel.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHLOOKANDFEEL_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHLOOKANDFEEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::plaf::synth { class SynthLookAndFeel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::plaf::synth::SynthLookAndFeel>
{
	static constexpr fixed_string class_name = "javax/swing/plaf/synth/SynthLookAndFeel";
	using base_classes = std::tuple<scapix::java_api::javax::swing::plaf::basic::BasicLookAndFeel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHLOOKANDFEEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHLOOKANDFEEL)
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHLOOKANDFEEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/UIDefaults.h>
#include <scapix/java_api/javax/swing/plaf/ComponentUI.h>
#include <scapix/java_api/javax/swing/plaf/synth/Region.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthStyle.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthStyleFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::plaf::synth::SynthLookAndFeel : public jni::object_base<"javax/swing/plaf/synth/SynthLookAndFeel",
	javax::swing::plaf::basic::BasicLookAndFeel>
{
public:

	static void setStyleFactory(jni::ref<javax::swing::plaf::synth::SynthStyleFactory> p1) { return call_static_method<"setStyleFactory", void>(p1); }
	static jni::ref<javax::swing::plaf::synth::SynthStyleFactory> getStyleFactory() { return call_static_method<"getStyleFactory", jni::ref<javax::swing::plaf::synth::SynthStyleFactory>>(); }
	static jni::ref<javax::swing::plaf::synth::SynthStyle> getStyle(jni::ref<javax::swing::JComponent> p1, jni::ref<javax::swing::plaf::synth::Region> p2) { return call_static_method<"getStyle", jni::ref<javax::swing::plaf::synth::SynthStyle>>(p1, p2); }
	static void updateStyles(jni::ref<java::awt::Component> p1) { return call_static_method<"updateStyles", void>(p1); }
	static jni::ref<javax::swing::plaf::synth::Region> getRegion(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"getRegion", jni::ref<javax::swing::plaf::synth::Region>>(p1); }
	static jni::ref<javax::swing::plaf::ComponentUI> createUI(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"createUI", jni::ref<javax::swing::plaf::ComponentUI>>(p1); }
	static jni::ref<javax::swing::plaf::synth::SynthLookAndFeel> new_object() { return base_::new_object(); }
	void load(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::Class> p2) { return call_method<"load", void>(p1, p2); }
	void load(jni::ref<java::net::URL> p1) { return call_method<"load", void>(p1); }
	void initialize() { return call_method<"initialize", void>(); }
	void uninitialize() { return call_method<"uninitialize", void>(); }
	jni::ref<javax::swing::UIDefaults> getDefaults() { return call_method<"getDefaults", jni::ref<javax::swing::UIDefaults>>(); }
	jboolean isSupportedLookAndFeel() { return call_method<"isSupportedLookAndFeel", jboolean>(); }
	jboolean isNativeLookAndFeel() { return call_method<"isNativeLookAndFeel", jboolean>(); }
	jni::ref<java::lang::String> getDescription() { return call_method<"getDescription", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getID() { return call_method<"getID", jni::ref<java::lang::String>>(); }
	jboolean shouldUpdateStyleOnAncestorChanged() { return call_method<"shouldUpdateStyleOnAncestorChanged", jboolean>(); }

protected:

	SynthLookAndFeel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_SYNTH_SYNTHLOOKANDFEEL
