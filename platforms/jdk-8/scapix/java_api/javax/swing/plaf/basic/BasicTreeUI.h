// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/plaf/TreeUI.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTREEUI_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTREEUI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::plaf::basic { class BasicTreeUI; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::plaf::basic::BasicTreeUI>
{
	static constexpr fixed_string class_name = "javax/swing/plaf/basic/BasicTreeUI";
	using base_classes = std::tuple<scapix::java_api::javax::swing::plaf::TreeUI>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTREEUI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTREEUI)
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTREEUI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component_BaselineResizeBehavior.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/JTree.h>
#include <scapix/java_api/javax/swing/plaf/ComponentUI.h>
#include <scapix/java_api/javax/swing/tree/TreePath.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreeExpansionHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_ComponentHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreeModelHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreeSelectionHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_CellEditorHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_KeyHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_FocusHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_NodeDimensionsHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_MouseHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_PropertyChangeHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_SelectionModelPropertyChangeHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreeTraverseAction.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreePageAction.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreeIncrementAction.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreeHomeAction.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreeToggleAction.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_TreeCancelEditingAction.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicTreeUI_MouseInputHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::plaf::basic::BasicTreeUI : public jni::object_base<"javax/swing/plaf/basic/BasicTreeUI",
	javax::swing::plaf::TreeUI>
{
public:

	using TreeExpansionHandler = BasicTreeUI_TreeExpansionHandler;
	using ComponentHandler = BasicTreeUI_ComponentHandler;
	using TreeModelHandler = BasicTreeUI_TreeModelHandler;
	using TreeSelectionHandler = BasicTreeUI_TreeSelectionHandler;
	using CellEditorHandler = BasicTreeUI_CellEditorHandler;
	using KeyHandler = BasicTreeUI_KeyHandler;
	using FocusHandler = BasicTreeUI_FocusHandler;
	using NodeDimensionsHandler = BasicTreeUI_NodeDimensionsHandler;
	using MouseHandler = BasicTreeUI_MouseHandler;
	using PropertyChangeHandler = BasicTreeUI_PropertyChangeHandler;
	using SelectionModelPropertyChangeHandler = BasicTreeUI_SelectionModelPropertyChangeHandler;
	using TreeTraverseAction = BasicTreeUI_TreeTraverseAction;
	using TreePageAction = BasicTreeUI_TreePageAction;
	using TreeIncrementAction = BasicTreeUI_TreeIncrementAction;
	using TreeHomeAction = BasicTreeUI_TreeHomeAction;
	using TreeToggleAction = BasicTreeUI_TreeToggleAction;
	using TreeCancelEditingAction = BasicTreeUI_TreeCancelEditingAction;
	using MouseInputHandler = BasicTreeUI_MouseInputHandler;

	static jni::ref<javax::swing::plaf::ComponentUI> createUI(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"createUI", jni::ref<javax::swing::plaf::ComponentUI>>(p1); }
	static jni::ref<javax::swing::plaf::basic::BasicTreeUI> new_object() { return base_::new_object(); }
	void setLeftChildIndent(jint p1) { return call_method<"setLeftChildIndent", void>(p1); }
	jint getLeftChildIndent() { return call_method<"getLeftChildIndent", jint>(); }
	void setRightChildIndent(jint p1) { return call_method<"setRightChildIndent", void>(p1); }
	jint getRightChildIndent() { return call_method<"getRightChildIndent", jint>(); }
	void setExpandedIcon(jni::ref<javax::swing::Icon> p1) { return call_method<"setExpandedIcon", void>(p1); }
	jni::ref<javax::swing::Icon> getExpandedIcon() { return call_method<"getExpandedIcon", jni::ref<javax::swing::Icon>>(); }
	void setCollapsedIcon(jni::ref<javax::swing::Icon> p1) { return call_method<"setCollapsedIcon", void>(p1); }
	jni::ref<javax::swing::Icon> getCollapsedIcon() { return call_method<"getCollapsedIcon", jni::ref<javax::swing::Icon>>(); }
	jni::ref<java::awt::Rectangle> getPathBounds(jni::ref<javax::swing::JTree> p1, jni::ref<javax::swing::tree::TreePath> p2) { return call_method<"getPathBounds", jni::ref<java::awt::Rectangle>>(p1, p2); }
	jni::ref<javax::swing::tree::TreePath> getPathForRow(jni::ref<javax::swing::JTree> p1, jint p2) { return call_method<"getPathForRow", jni::ref<javax::swing::tree::TreePath>>(p1, p2); }
	jint getRowForPath(jni::ref<javax::swing::JTree> p1, jni::ref<javax::swing::tree::TreePath> p2) { return call_method<"getRowForPath", jint>(p1, p2); }
	jint getRowCount(jni::ref<javax::swing::JTree> p1) { return call_method<"getRowCount", jint>(p1); }
	jni::ref<javax::swing::tree::TreePath> getClosestPathForLocation(jni::ref<javax::swing::JTree> p1, jint p2, jint p3) { return call_method<"getClosestPathForLocation", jni::ref<javax::swing::tree::TreePath>>(p1, p2, p3); }
	jboolean isEditing(jni::ref<javax::swing::JTree> p1) { return call_method<"isEditing", jboolean>(p1); }
	jboolean stopEditing(jni::ref<javax::swing::JTree> p1) { return call_method<"stopEditing", jboolean>(p1); }
	void cancelEditing(jni::ref<javax::swing::JTree> p1) { return call_method<"cancelEditing", void>(p1); }
	void startEditingAtPath(jni::ref<javax::swing::JTree> p1, jni::ref<javax::swing::tree::TreePath> p2) { return call_method<"startEditingAtPath", void>(p1, p2); }
	jni::ref<javax::swing::tree::TreePath> getEditingPath(jni::ref<javax::swing::JTree> p1) { return call_method<"getEditingPath", jni::ref<javax::swing::tree::TreePath>>(p1); }
	void installUI(jni::ref<javax::swing::JComponent> p1) { return call_method<"installUI", void>(p1); }
	void uninstallUI(jni::ref<javax::swing::JComponent> p1) { return call_method<"uninstallUI", void>(p1); }
	jint getBaseline(jni::ref<javax::swing::JComponent> p1, jint p2, jint p3) { return call_method<"getBaseline", jint>(p1, p2, p3); }
	jni::ref<java::awt::Component_BaselineResizeBehavior> getBaselineResizeBehavior(jni::ref<javax::swing::JComponent> p1) { return call_method<"getBaselineResizeBehavior", jni::ref<java::awt::Component_BaselineResizeBehavior>>(p1); }
	void paint(jni::ref<java::awt::Graphics> p1, jni::ref<javax::swing::JComponent> p2) { return call_method<"paint", void>(p1, p2); }
	void setPreferredMinSize(jni::ref<java::awt::Dimension> p1) { return call_method<"setPreferredMinSize", void>(p1); }
	jni::ref<java::awt::Dimension> getPreferredMinSize() { return call_method<"getPreferredMinSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getPreferredSize(jni::ref<javax::swing::JComponent> p1) { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(p1); }
	jni::ref<java::awt::Dimension> getPreferredSize(jni::ref<javax::swing::JComponent> p1, jboolean p2) { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(p1, p2); }
	jni::ref<java::awt::Dimension> getMinimumSize(jni::ref<javax::swing::JComponent> p1) { return call_method<"getMinimumSize", jni::ref<java::awt::Dimension>>(p1); }
	jni::ref<java::awt::Dimension> getMaximumSize(jni::ref<javax::swing::JComponent> p1) { return call_method<"getMaximumSize", jni::ref<java::awt::Dimension>>(p1); }

protected:

	BasicTreeUI(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTREEUI
