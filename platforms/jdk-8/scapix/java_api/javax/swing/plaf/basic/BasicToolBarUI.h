// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/plaf/ToolBarUI.h>
#include <scapix/java_api/javax/swing/SwingConstants.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTOOLBARUI_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTOOLBARUI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::plaf::basic { class BasicToolBarUI; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::plaf::basic::BasicToolBarUI>
{
	static constexpr fixed_string class_name = "javax/swing/plaf/basic/BasicToolBarUI";
	using base_classes = std::tuple<scapix::java_api::javax::swing::plaf::ToolBarUI, scapix::java_api::javax::swing::SwingConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTOOLBARUI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTOOLBARUI)
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTOOLBARUI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/plaf/ComponentUI.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicToolBarUI_DockingListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::plaf::basic::BasicToolBarUI : public jni::object_base<"javax/swing/plaf/basic/BasicToolBarUI",
	javax::swing::plaf::ToolBarUI,
	javax::swing::SwingConstants>
{
public:

	using DockingListener = BasicToolBarUI_DockingListener;

	static jni::ref<javax::swing::plaf::basic::BasicToolBarUI> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::plaf::ComponentUI> createUI(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"createUI", jni::ref<javax::swing::plaf::ComponentUI>>(p1); }
	void installUI(jni::ref<javax::swing::JComponent> p1) { return call_method<"installUI", void>(p1); }
	void uninstallUI(jni::ref<javax::swing::JComponent> p1) { return call_method<"uninstallUI", void>(p1); }
	jboolean isRolloverBorders() { return call_method<"isRolloverBorders", jboolean>(); }
	void setRolloverBorders(jboolean p1) { return call_method<"setRolloverBorders", void>(p1); }
	void setFloatingLocation(jint p1, jint p2) { return call_method<"setFloatingLocation", void>(p1, p2); }
	jboolean isFloating() { return call_method<"isFloating", jboolean>(); }
	void setFloating(jboolean p1, jni::ref<java::awt::Point> p2) { return call_method<"setFloating", void>(p1, p2); }
	void setOrientation(jint p1) { return call_method<"setOrientation", void>(p1); }
	jni::ref<java::awt::Color> getDockingColor() { return call_method<"getDockingColor", jni::ref<java::awt::Color>>(); }
	void setDockingColor(jni::ref<java::awt::Color> p1) { return call_method<"setDockingColor", void>(p1); }
	jni::ref<java::awt::Color> getFloatingColor() { return call_method<"getFloatingColor", jni::ref<java::awt::Color>>(); }
	void setFloatingColor(jni::ref<java::awt::Color> p1) { return call_method<"setFloatingColor", void>(p1); }
	jboolean canDock(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Point> p2) { return call_method<"canDock", jboolean>(p1, p2); }

protected:

	BasicToolBarUI(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICTOOLBARUI
