// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/plaf/SliderUI.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICSLIDERUI_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICSLIDERUI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::plaf::basic { class BasicSliderUI; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::plaf::basic::BasicSliderUI>
{
	static constexpr fixed_string class_name = "javax/swing/plaf/basic/BasicSliderUI";
	using base_classes = std::tuple<scapix::java_api::javax::swing::plaf::SliderUI>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICSLIDERUI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICSLIDERUI)
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICSLIDERUI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component_BaselineResizeBehavior.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/JSlider.h>
#include <scapix/java_api/javax/swing/plaf/ComponentUI.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicSliderUI_PropertyChangeHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicSliderUI_ChangeHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicSliderUI_TrackListener.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicSliderUI_ScrollListener.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicSliderUI_ComponentHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicSliderUI_FocusHandler.h>
#include <scapix/java_api/javax/swing/plaf/basic/BasicSliderUI_ActionScroller.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::plaf::basic::BasicSliderUI : public jni::object_base<"javax/swing/plaf/basic/BasicSliderUI",
	javax::swing::plaf::SliderUI>
{
public:

	using PropertyChangeHandler = BasicSliderUI_PropertyChangeHandler;
	using ChangeHandler = BasicSliderUI_ChangeHandler;
	using TrackListener = BasicSliderUI_TrackListener;
	using ScrollListener = BasicSliderUI_ScrollListener;
	using ComponentHandler = BasicSliderUI_ComponentHandler;
	using FocusHandler = BasicSliderUI_FocusHandler;
	using ActionScroller = BasicSliderUI_ActionScroller;

	static jint POSITIVE_SCROLL() { return get_static_field<"POSITIVE_SCROLL", jint>(); }
	static jint NEGATIVE_SCROLL() { return get_static_field<"NEGATIVE_SCROLL", jint>(); }
	static jint MIN_SCROLL() { return get_static_field<"MIN_SCROLL", jint>(); }
	static jint MAX_SCROLL() { return get_static_field<"MAX_SCROLL", jint>(); }

	static jni::ref<javax::swing::plaf::ComponentUI> createUI(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"createUI", jni::ref<javax::swing::plaf::ComponentUI>>(p1); }
	static jni::ref<javax::swing::plaf::basic::BasicSliderUI> new_object(jni::ref<javax::swing::JSlider> p1) { return base_::new_object(p1); }
	void installUI(jni::ref<javax::swing::JComponent> p1) { return call_method<"installUI", void>(p1); }
	void uninstallUI(jni::ref<javax::swing::JComponent> p1) { return call_method<"uninstallUI", void>(p1); }
	jint getBaseline(jni::ref<javax::swing::JComponent> p1, jint p2, jint p3) { return call_method<"getBaseline", jint>(p1, p2, p3); }
	jni::ref<java::awt::Component_BaselineResizeBehavior> getBaselineResizeBehavior(jni::ref<javax::swing::JComponent> p1) { return call_method<"getBaselineResizeBehavior", jni::ref<java::awt::Component_BaselineResizeBehavior>>(p1); }
	jni::ref<java::awt::Dimension> getPreferredHorizontalSize() { return call_method<"getPreferredHorizontalSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getPreferredVerticalSize() { return call_method<"getPreferredVerticalSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getMinimumHorizontalSize() { return call_method<"getMinimumHorizontalSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getMinimumVerticalSize() { return call_method<"getMinimumVerticalSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> getPreferredSize(jni::ref<javax::swing::JComponent> p1) { return call_method<"getPreferredSize", jni::ref<java::awt::Dimension>>(p1); }
	jni::ref<java::awt::Dimension> getMinimumSize(jni::ref<javax::swing::JComponent> p1) { return call_method<"getMinimumSize", jni::ref<java::awt::Dimension>>(p1); }
	jni::ref<java::awt::Dimension> getMaximumSize(jni::ref<javax::swing::JComponent> p1) { return call_method<"getMaximumSize", jni::ref<java::awt::Dimension>>(p1); }
	void paint(jni::ref<java::awt::Graphics> p1, jni::ref<javax::swing::JComponent> p2) { return call_method<"paint", void>(p1, p2); }
	void paintFocus(jni::ref<java::awt::Graphics> p1) { return call_method<"paintFocus", void>(p1); }
	void paintTrack(jni::ref<java::awt::Graphics> p1) { return call_method<"paintTrack", void>(p1); }
	void paintTicks(jni::ref<java::awt::Graphics> p1) { return call_method<"paintTicks", void>(p1); }
	void paintLabels(jni::ref<java::awt::Graphics> p1) { return call_method<"paintLabels", void>(p1); }
	void paintThumb(jni::ref<java::awt::Graphics> p1) { return call_method<"paintThumb", void>(p1); }
	void setThumbLocation(jint p1, jint p2) { return call_method<"setThumbLocation", void>(p1, p2); }
	void scrollByBlock(jint p1) { return call_method<"scrollByBlock", void>(p1); }
	void scrollByUnit(jint p1) { return call_method<"scrollByUnit", void>(p1); }
	jint valueForYPosition(jint p1) { return call_method<"valueForYPosition", jint>(p1); }
	jint valueForXPosition(jint p1) { return call_method<"valueForXPosition", jint>(p1); }

protected:

	BasicSliderUI(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_BASIC_BASICSLIDERUI
