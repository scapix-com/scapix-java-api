// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/plaf/synth/SynthLookAndFeel.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_PLAF_NIMBUS_NIMBUSLOOKANDFEEL_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_NIMBUS_NIMBUSLOOKANDFEEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::plaf::nimbus { class NimbusLookAndFeel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::plaf::nimbus::NimbusLookAndFeel>
{
	static constexpr fixed_string class_name = "javax/swing/plaf/nimbus/NimbusLookAndFeel";
	using base_classes = std::tuple<scapix::java_api::javax::swing::plaf::synth::SynthLookAndFeel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_NIMBUS_NIMBUSLOOKANDFEEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_PLAF_NIMBUS_NIMBUSLOOKANDFEEL)
#define SCAPIX_JAVA_API_JAVAX_SWING_PLAF_NIMBUS_NIMBUSLOOKANDFEEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/UIDefaults.h>
#include <scapix/java_api/javax/swing/plaf/nimbus/NimbusStyle.h>
#include <scapix/java_api/javax/swing/plaf/synth/Region.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::plaf::nimbus::NimbusLookAndFeel : public jni::object_base<"javax/swing/plaf/nimbus/NimbusLookAndFeel",
	javax::swing::plaf::synth::SynthLookAndFeel>
{
public:

	static jni::ref<javax::swing::plaf::nimbus::NimbusLookAndFeel> new_object() { return base_::new_object(); }
	void initialize() { return call_method<"initialize", void>(); }
	void uninitialize() { return call_method<"uninitialize", void>(); }
	jni::ref<javax::swing::UIDefaults> getDefaults() { return call_method<"getDefaults", jni::ref<javax::swing::UIDefaults>>(); }
	static jni::ref<javax::swing::plaf::nimbus::NimbusStyle> getStyle(jni::ref<javax::swing::JComponent> p1, jni::ref<javax::swing::plaf::synth::Region> p2) { return call_static_method<"getStyle", jni::ref<javax::swing::plaf::nimbus::NimbusStyle>>(p1, p2); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getID() { return call_method<"getID", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDescription() { return call_method<"getDescription", jni::ref<java::lang::String>>(); }
	jboolean shouldUpdateStyleOnAncestorChanged() { return call_method<"shouldUpdateStyleOnAncestorChanged", jboolean>(); }
	void register_(jni::ref<javax::swing::plaf::synth::Region> p1, jni::ref<java::lang::String> p2) { return call_method<"register", void>(p1, p2); }
	jni::ref<javax::swing::Icon> getDisabledIcon(jni::ref<javax::swing::JComponent> p1, jni::ref<javax::swing::Icon> p2) { return call_method<"getDisabledIcon", jni::ref<javax::swing::Icon>>(p1, p2); }
	jni::ref<java::awt::Color> getDerivedColor(jni::ref<java::lang::String> p1, jfloat p2, jfloat p3, jfloat p4, jint p5, jboolean p6) { return call_method<"getDerivedColor", jni::ref<java::awt::Color>>(p1, p2, p3, p4, p5, p6); }

protected:

	NimbusLookAndFeel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_PLAF_NIMBUS_NIMBUSLOOKANDFEEL
