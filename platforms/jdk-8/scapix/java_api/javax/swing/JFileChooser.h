// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JFILECHOOSER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JFILECHOOSER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JFileChooser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JFileChooser>
{
	static constexpr fixed_string class_name = "javax/swing/JFileChooser";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent, scapix::java_api::javax::accessibility::Accessible>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JFILECHOOSER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JFILECHOOSER)
#define SCAPIX_JAVA_API_JAVAX_SWING_JFILECHOOSER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/event/ActionListener.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/accessibility/AccessibleContext.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/filechooser/FileFilter.h>
#include <scapix/java_api/javax/swing/filechooser/FileSystemView.h>
#include <scapix/java_api/javax/swing/filechooser/FileView.h>
#include <scapix/java_api/javax/swing/plaf/FileChooserUI.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JFileChooser : public jni::object_base<"javax/swing/JFileChooser",
	javax::swing::JComponent,
	javax::accessibility::Accessible>
{
public:

	static jint OPEN_DIALOG() { return get_static_field<"OPEN_DIALOG", jint>(); }
	static jint SAVE_DIALOG() { return get_static_field<"SAVE_DIALOG", jint>(); }
	static jint CUSTOM_DIALOG() { return get_static_field<"CUSTOM_DIALOG", jint>(); }
	static jint CANCEL_OPTION() { return get_static_field<"CANCEL_OPTION", jint>(); }
	static jint APPROVE_OPTION() { return get_static_field<"APPROVE_OPTION", jint>(); }
	static jint ERROR_OPTION() { return get_static_field<"ERROR_OPTION", jint>(); }
	static jint FILES_ONLY() { return get_static_field<"FILES_ONLY", jint>(); }
	static jint DIRECTORIES_ONLY() { return get_static_field<"DIRECTORIES_ONLY", jint>(); }
	static jint FILES_AND_DIRECTORIES() { return get_static_field<"FILES_AND_DIRECTORIES", jint>(); }
	static jni::ref<java::lang::String> CANCEL_SELECTION() { return get_static_field<"CANCEL_SELECTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> APPROVE_SELECTION() { return get_static_field<"APPROVE_SELECTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> APPROVE_BUTTON_TEXT_CHANGED_PROPERTY() { return get_static_field<"APPROVE_BUTTON_TEXT_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY() { return get_static_field<"APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY() { return get_static_field<"APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY() { return get_static_field<"CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DIRECTORY_CHANGED_PROPERTY() { return get_static_field<"DIRECTORY_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SELECTED_FILE_CHANGED_PROPERTY() { return get_static_field<"SELECTED_FILE_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SELECTED_FILES_CHANGED_PROPERTY() { return get_static_field<"SELECTED_FILES_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MULTI_SELECTION_ENABLED_CHANGED_PROPERTY() { return get_static_field<"MULTI_SELECTION_ENABLED_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_SYSTEM_VIEW_CHANGED_PROPERTY() { return get_static_field<"FILE_SYSTEM_VIEW_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_VIEW_CHANGED_PROPERTY() { return get_static_field<"FILE_VIEW_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_HIDING_CHANGED_PROPERTY() { return get_static_field<"FILE_HIDING_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_FILTER_CHANGED_PROPERTY() { return get_static_field<"FILE_FILTER_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_SELECTION_MODE_CHANGED_PROPERTY() { return get_static_field<"FILE_SELECTION_MODE_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCESSORY_CHANGED_PROPERTY() { return get_static_field<"ACCESSORY_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY() { return get_static_field<"ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DIALOG_TITLE_CHANGED_PROPERTY() { return get_static_field<"DIALOG_TITLE_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DIALOG_TYPE_CHANGED_PROPERTY() { return get_static_field<"DIALOG_TYPE_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY() { return get_static_field<"CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::swing::JFileChooser> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::JFileChooser> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JFileChooser> new_object(jni::ref<java::io::File> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JFileChooser> new_object(jni::ref<javax::swing::filechooser::FileSystemView> p1) { return base_::new_object(p1); }
	static jni::ref<javax::swing::JFileChooser> new_object(jni::ref<java::io::File> p1, jni::ref<javax::swing::filechooser::FileSystemView> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::JFileChooser> new_object(jni::ref<java::lang::String> p1, jni::ref<javax::swing::filechooser::FileSystemView> p2) { return base_::new_object(p1, p2); }
	void setDragEnabled(jboolean p1) { return call_method<"setDragEnabled", void>(p1); }
	jboolean getDragEnabled() { return call_method<"getDragEnabled", jboolean>(); }
	jni::ref<java::io::File> getSelectedFile() { return call_method<"getSelectedFile", jni::ref<java::io::File>>(); }
	void setSelectedFile(jni::ref<java::io::File> p1) { return call_method<"setSelectedFile", void>(p1); }
	jni::ref<jni::array<java::io::File>> getSelectedFiles() { return call_method<"getSelectedFiles", jni::ref<jni::array<java::io::File>>>(); }
	void setSelectedFiles(jni::ref<jni::array<java::io::File>> p1) { return call_method<"setSelectedFiles", void>(p1); }
	jni::ref<java::io::File> getCurrentDirectory() { return call_method<"getCurrentDirectory", jni::ref<java::io::File>>(); }
	void setCurrentDirectory(jni::ref<java::io::File> p1) { return call_method<"setCurrentDirectory", void>(p1); }
	void changeToParentDirectory() { return call_method<"changeToParentDirectory", void>(); }
	void rescanCurrentDirectory() { return call_method<"rescanCurrentDirectory", void>(); }
	void ensureFileIsVisible(jni::ref<java::io::File> p1) { return call_method<"ensureFileIsVisible", void>(p1); }
	jint showOpenDialog(jni::ref<java::awt::Component> p1) { return call_method<"showOpenDialog", jint>(p1); }
	jint showSaveDialog(jni::ref<java::awt::Component> p1) { return call_method<"showSaveDialog", jint>(p1); }
	jint showDialog(jni::ref<java::awt::Component> p1, jni::ref<java::lang::String> p2) { return call_method<"showDialog", jint>(p1, p2); }
	jboolean getControlButtonsAreShown() { return call_method<"getControlButtonsAreShown", jboolean>(); }
	void setControlButtonsAreShown(jboolean p1) { return call_method<"setControlButtonsAreShown", void>(p1); }
	jint getDialogType() { return call_method<"getDialogType", jint>(); }
	void setDialogType(jint p1) { return call_method<"setDialogType", void>(p1); }
	void setDialogTitle(jni::ref<java::lang::String> p1) { return call_method<"setDialogTitle", void>(p1); }
	jni::ref<java::lang::String> getDialogTitle() { return call_method<"getDialogTitle", jni::ref<java::lang::String>>(); }
	void setApproveButtonToolTipText(jni::ref<java::lang::String> p1) { return call_method<"setApproveButtonToolTipText", void>(p1); }
	jni::ref<java::lang::String> getApproveButtonToolTipText() { return call_method<"getApproveButtonToolTipText", jni::ref<java::lang::String>>(); }
	jint getApproveButtonMnemonic() { return call_method<"getApproveButtonMnemonic", jint>(); }
	void setApproveButtonMnemonic(jint p1) { return call_method<"setApproveButtonMnemonic", void>(p1); }
	void setApproveButtonMnemonic(jchar p1) { return call_method<"setApproveButtonMnemonic", void>(p1); }
	void setApproveButtonText(jni::ref<java::lang::String> p1) { return call_method<"setApproveButtonText", void>(p1); }
	jni::ref<java::lang::String> getApproveButtonText() { return call_method<"getApproveButtonText", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<javax::swing::filechooser::FileFilter>> getChoosableFileFilters() { return call_method<"getChoosableFileFilters", jni::ref<jni::array<javax::swing::filechooser::FileFilter>>>(); }
	void addChoosableFileFilter(jni::ref<javax::swing::filechooser::FileFilter> p1) { return call_method<"addChoosableFileFilter", void>(p1); }
	jboolean removeChoosableFileFilter(jni::ref<javax::swing::filechooser::FileFilter> p1) { return call_method<"removeChoosableFileFilter", jboolean>(p1); }
	void resetChoosableFileFilters() { return call_method<"resetChoosableFileFilters", void>(); }
	jni::ref<javax::swing::filechooser::FileFilter> getAcceptAllFileFilter() { return call_method<"getAcceptAllFileFilter", jni::ref<javax::swing::filechooser::FileFilter>>(); }
	jboolean isAcceptAllFileFilterUsed() { return call_method<"isAcceptAllFileFilterUsed", jboolean>(); }
	void setAcceptAllFileFilterUsed(jboolean p1) { return call_method<"setAcceptAllFileFilterUsed", void>(p1); }
	jni::ref<javax::swing::JComponent> getAccessory() { return call_method<"getAccessory", jni::ref<javax::swing::JComponent>>(); }
	void setAccessory(jni::ref<javax::swing::JComponent> p1) { return call_method<"setAccessory", void>(p1); }
	void setFileSelectionMode(jint p1) { return call_method<"setFileSelectionMode", void>(p1); }
	jint getFileSelectionMode() { return call_method<"getFileSelectionMode", jint>(); }
	jboolean isFileSelectionEnabled() { return call_method<"isFileSelectionEnabled", jboolean>(); }
	jboolean isDirectorySelectionEnabled() { return call_method<"isDirectorySelectionEnabled", jboolean>(); }
	void setMultiSelectionEnabled(jboolean p1) { return call_method<"setMultiSelectionEnabled", void>(p1); }
	jboolean isMultiSelectionEnabled() { return call_method<"isMultiSelectionEnabled", jboolean>(); }
	jboolean isFileHidingEnabled() { return call_method<"isFileHidingEnabled", jboolean>(); }
	void setFileHidingEnabled(jboolean p1) { return call_method<"setFileHidingEnabled", void>(p1); }
	void setFileFilter(jni::ref<javax::swing::filechooser::FileFilter> p1) { return call_method<"setFileFilter", void>(p1); }
	jni::ref<javax::swing::filechooser::FileFilter> getFileFilter() { return call_method<"getFileFilter", jni::ref<javax::swing::filechooser::FileFilter>>(); }
	void setFileView(jni::ref<javax::swing::filechooser::FileView> p1) { return call_method<"setFileView", void>(p1); }
	jni::ref<javax::swing::filechooser::FileView> getFileView() { return call_method<"getFileView", jni::ref<javax::swing::filechooser::FileView>>(); }
	jni::ref<java::lang::String> getName(jni::ref<java::io::File> p1) { return call_method<"getName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getDescription(jni::ref<java::io::File> p1) { return call_method<"getDescription", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getTypeDescription(jni::ref<java::io::File> p1) { return call_method<"getTypeDescription", jni::ref<java::lang::String>>(p1); }
	jni::ref<javax::swing::Icon> getIcon(jni::ref<java::io::File> p1) { return call_method<"getIcon", jni::ref<javax::swing::Icon>>(p1); }
	jboolean isTraversable(jni::ref<java::io::File> p1) { return call_method<"isTraversable", jboolean>(p1); }
	jboolean accept(jni::ref<java::io::File> p1) { return call_method<"accept", jboolean>(p1); }
	void setFileSystemView(jni::ref<javax::swing::filechooser::FileSystemView> p1) { return call_method<"setFileSystemView", void>(p1); }
	jni::ref<javax::swing::filechooser::FileSystemView> getFileSystemView() { return call_method<"getFileSystemView", jni::ref<javax::swing::filechooser::FileSystemView>>(); }
	void approveSelection() { return call_method<"approveSelection", void>(); }
	void cancelSelection() { return call_method<"cancelSelection", void>(); }
	void addActionListener(jni::ref<java::awt::event::ActionListener> p1) { return call_method<"addActionListener", void>(p1); }
	void removeActionListener(jni::ref<java::awt::event::ActionListener> p1) { return call_method<"removeActionListener", void>(p1); }
	jni::ref<jni::array<java::awt::event::ActionListener>> getActionListeners() { return call_method<"getActionListeners", jni::ref<jni::array<java::awt::event::ActionListener>>>(); }
	void updateUI() { return call_method<"updateUI", void>(); }
	jni::ref<java::lang::String> getUIClassID() { return call_method<"getUIClassID", jni::ref<java::lang::String>>(); }
	jni::ref<javax::swing::plaf::FileChooserUI> getUI() { return call_method<"getUI", jni::ref<javax::swing::plaf::FileChooserUI>>(); }
	jni::ref<javax::accessibility::AccessibleContext> getAccessibleContext() { return call_method<"getAccessibleContext", jni::ref<javax::accessibility::AccessibleContext>>(); }

protected:

	JFileChooser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JFILECHOOSER
