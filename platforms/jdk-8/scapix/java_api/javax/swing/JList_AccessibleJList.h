// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JComponent_AccessibleJComponent.h>
#include <scapix/java_api/javax/accessibility/AccessibleSelection.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/javax/swing/event/ListSelectionListener.h>
#include <scapix/java_api/javax/swing/event/ListDataListener.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_JLIST_ACCESSIBLEJLIST_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_JLIST_ACCESSIBLEJLIST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class JList_AccessibleJList; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::JList_AccessibleJList>
{
	static constexpr fixed_string class_name = "javax/swing/JList$AccessibleJList";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JComponent_AccessibleJComponent, scapix::java_api::javax::accessibility::AccessibleSelection, scapix::java_api::java::beans::PropertyChangeListener, scapix::java_api::javax::swing::event::ListSelectionListener, scapix::java_api::javax::swing::event::ListDataListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JLIST_ACCESSIBLEJLIST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_JLIST_ACCESSIBLEJLIST)
#define SCAPIX_JAVA_API_JAVAX_SWING_JLIST_ACCESSIBLEJLIST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/beans/PropertyChangeEvent.h>
#include <scapix/java_api/javax/accessibility/Accessible.h>
#include <scapix/java_api/javax/accessibility/AccessibleRole.h>
#include <scapix/java_api/javax/accessibility/AccessibleStateSet.h>
#include <scapix/java_api/javax/swing/JList.h>
#include <scapix/java_api/javax/swing/event/ListDataEvent.h>
#include <scapix/java_api/javax/swing/event/ListSelectionEvent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::JList_AccessibleJList : public jni::object_base<"javax/swing/JList$AccessibleJList",
	javax::swing::JComponent_AccessibleJComponent,
	javax::accessibility::AccessibleSelection,
	java::beans::PropertyChangeListener,
	javax::swing::event::ListSelectionListener,
	javax::swing::event::ListDataListener>
{
public:

	static jni::ref<javax::swing::JList_AccessibleJList> new_object(jni::ref<javax::swing::JList> p1) { return base_::new_object(p1); }
	void propertyChange(jni::ref<java::beans::PropertyChangeEvent> p1) { return call_method<"propertyChange", void>(p1); }
	void valueChanged(jni::ref<javax::swing::event::ListSelectionEvent> p1) { return call_method<"valueChanged", void>(p1); }
	void intervalAdded(jni::ref<javax::swing::event::ListDataEvent> p1) { return call_method<"intervalAdded", void>(p1); }
	void intervalRemoved(jni::ref<javax::swing::event::ListDataEvent> p1) { return call_method<"intervalRemoved", void>(p1); }
	void contentsChanged(jni::ref<javax::swing::event::ListDataEvent> p1) { return call_method<"contentsChanged", void>(p1); }
	jni::ref<javax::accessibility::AccessibleStateSet> getAccessibleStateSet() { return call_method<"getAccessibleStateSet", jni::ref<javax::accessibility::AccessibleStateSet>>(); }
	jni::ref<javax::accessibility::AccessibleRole> getAccessibleRole() { return call_method<"getAccessibleRole", jni::ref<javax::accessibility::AccessibleRole>>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleAt(jni::ref<java::awt::Point> p1) { return call_method<"getAccessibleAt", jni::ref<javax::accessibility::Accessible>>(p1); }
	jint getAccessibleChildrenCount() { return call_method<"getAccessibleChildrenCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleChild(jint p1) { return call_method<"getAccessibleChild", jni::ref<javax::accessibility::Accessible>>(p1); }
	jni::ref<javax::accessibility::AccessibleSelection> getAccessibleSelection() { return call_method<"getAccessibleSelection", jni::ref<javax::accessibility::AccessibleSelection>>(); }
	jint getAccessibleSelectionCount() { return call_method<"getAccessibleSelectionCount", jint>(); }
	jni::ref<javax::accessibility::Accessible> getAccessibleSelection(jint p1) { return call_method<"getAccessibleSelection", jni::ref<javax::accessibility::Accessible>>(p1); }
	jboolean isAccessibleChildSelected(jint p1) { return call_method<"isAccessibleChildSelected", jboolean>(p1); }
	void addAccessibleSelection(jint p1) { return call_method<"addAccessibleSelection", void>(p1); }
	void removeAccessibleSelection(jint p1) { return call_method<"removeAccessibleSelection", void>(p1); }
	void clearAccessibleSelection() { return call_method<"clearAccessibleSelection", void>(); }
	void selectAllAccessibleSelection() { return call_method<"selectAllAccessibleSelection", void>(); }

protected:

	JList_AccessibleJList(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_JLIST_ACCESSIBLEJLIST
