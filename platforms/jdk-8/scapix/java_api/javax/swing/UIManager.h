// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_UIMANAGER_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_UIMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing { class UIManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::UIManager>
{
	static constexpr fixed_string class_name = "javax/swing/UIManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_UIMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_UIMANAGER)
#define SCAPIX_JAVA_API_JAVAX_SWING_UIMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/javax/swing/Icon.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/LookAndFeel.h>
#include <scapix/java_api/javax/swing/UIDefaults.h>
#include <scapix/java_api/javax/swing/UIManager_LookAndFeelInfo.h>
#include <scapix/java_api/javax/swing/border/Border.h>
#include <scapix/java_api/javax/swing/plaf/ComponentUI.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::UIManager : public jni::object_base<"javax/swing/UIManager",
	java::lang::Object,
	java::io::Serializable>
{
public:

	using LookAndFeelInfo = UIManager_LookAndFeelInfo;

	static jni::ref<javax::swing::UIManager> new_object() { return base_::new_object(); }
	static jni::ref<jni::array<javax::swing::UIManager_LookAndFeelInfo>> getInstalledLookAndFeels() { return call_static_method<"getInstalledLookAndFeels", jni::ref<jni::array<javax::swing::UIManager_LookAndFeelInfo>>>(); }
	static void setInstalledLookAndFeels(jni::ref<jni::array<javax::swing::UIManager_LookAndFeelInfo>> p1) { return call_static_method<"setInstalledLookAndFeels", void>(p1); }
	static void installLookAndFeel(jni::ref<javax::swing::UIManager_LookAndFeelInfo> p1) { return call_static_method<"installLookAndFeel", void>(p1); }
	static void installLookAndFeel(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"installLookAndFeel", void>(p1, p2); }
	static jni::ref<javax::swing::LookAndFeel> getLookAndFeel() { return call_static_method<"getLookAndFeel", jni::ref<javax::swing::LookAndFeel>>(); }
	static void setLookAndFeel(jni::ref<javax::swing::LookAndFeel> p1) { return call_static_method<"setLookAndFeel", void>(p1); }
	static void setLookAndFeel(jni::ref<java::lang::String> p1) { return call_static_method<"setLookAndFeel", void>(p1); }
	static jni::ref<java::lang::String> getSystemLookAndFeelClassName() { return call_static_method<"getSystemLookAndFeelClassName", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> getCrossPlatformLookAndFeelClassName() { return call_static_method<"getCrossPlatformLookAndFeelClassName", jni::ref<java::lang::String>>(); }
	static jni::ref<javax::swing::UIDefaults> getDefaults() { return call_static_method<"getDefaults", jni::ref<javax::swing::UIDefaults>>(); }
	static jni::ref<java::awt::Font> getFont(jni::ref<java::lang::Object> p1) { return call_static_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	static jni::ref<java::awt::Font> getFont(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getFont", jni::ref<java::awt::Font>>(p1, p2); }
	static jni::ref<java::awt::Color> getColor(jni::ref<java::lang::Object> p1) { return call_static_method<"getColor", jni::ref<java::awt::Color>>(p1); }
	static jni::ref<java::awt::Color> getColor(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getColor", jni::ref<java::awt::Color>>(p1, p2); }
	static jni::ref<javax::swing::Icon> getIcon(jni::ref<java::lang::Object> p1) { return call_static_method<"getIcon", jni::ref<javax::swing::Icon>>(p1); }
	static jni::ref<javax::swing::Icon> getIcon(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getIcon", jni::ref<javax::swing::Icon>>(p1, p2); }
	static jni::ref<javax::swing::border::Border> getBorder(jni::ref<java::lang::Object> p1) { return call_static_method<"getBorder", jni::ref<javax::swing::border::Border>>(p1); }
	static jni::ref<javax::swing::border::Border> getBorder(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getBorder", jni::ref<javax::swing::border::Border>>(p1, p2); }
	static jni::ref<java::lang::String> getString(jni::ref<java::lang::Object> p1) { return call_static_method<"getString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> getString(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getString", jni::ref<java::lang::String>>(p1, p2); }
	static jint getInt(jni::ref<java::lang::Object> p1) { return call_static_method<"getInt", jint>(p1); }
	static jint getInt(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getInt", jint>(p1, p2); }
	static jboolean getBoolean(jni::ref<java::lang::Object> p1) { return call_static_method<"getBoolean", jboolean>(p1); }
	static jboolean getBoolean(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getBoolean", jboolean>(p1, p2); }
	static jni::ref<java::awt::Insets> getInsets(jni::ref<java::lang::Object> p1) { return call_static_method<"getInsets", jni::ref<java::awt::Insets>>(p1); }
	static jni::ref<java::awt::Insets> getInsets(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getInsets", jni::ref<java::awt::Insets>>(p1, p2); }
	static jni::ref<java::awt::Dimension> getDimension(jni::ref<java::lang::Object> p1) { return call_static_method<"getDimension", jni::ref<java::awt::Dimension>>(p1); }
	static jni::ref<java::awt::Dimension> getDimension(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getDimension", jni::ref<java::awt::Dimension>>(p1, p2); }
	static jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1) { return call_static_method<"get", jni::ref<java::lang::Object>>(p1); }
	static jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"get", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"put", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<javax::swing::plaf::ComponentUI> getUI(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"getUI", jni::ref<javax::swing::plaf::ComponentUI>>(p1); }
	static jni::ref<javax::swing::UIDefaults> getLookAndFeelDefaults() { return call_static_method<"getLookAndFeelDefaults", jni::ref<javax::swing::UIDefaults>>(); }
	static void addAuxiliaryLookAndFeel(jni::ref<javax::swing::LookAndFeel> p1) { return call_static_method<"addAuxiliaryLookAndFeel", void>(p1); }
	static jboolean removeAuxiliaryLookAndFeel(jni::ref<javax::swing::LookAndFeel> p1) { return call_static_method<"removeAuxiliaryLookAndFeel", jboolean>(p1); }
	static jni::ref<jni::array<javax::swing::LookAndFeel>> getAuxiliaryLookAndFeels() { return call_static_method<"getAuxiliaryLookAndFeels", jni::ref<jni::array<javax::swing::LookAndFeel>>>(); }
	static void addPropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_static_method<"addPropertyChangeListener", void>(p1); }
	static void removePropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> p1) { return call_static_method<"removePropertyChangeListener", void>(p1); }
	static jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners() { return call_static_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(); }

protected:

	UIManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_UIMANAGER
