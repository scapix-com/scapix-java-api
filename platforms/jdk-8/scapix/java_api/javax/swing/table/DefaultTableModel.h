// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/table/AbstractTableModel.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SWING_TABLE_DEFAULTTABLEMODEL_FWD
#define SCAPIX_JAVA_API_JAVAX_SWING_TABLE_DEFAULTTABLEMODEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::swing::table { class DefaultTableModel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::swing::table::DefaultTableModel>
{
	static constexpr fixed_string class_name = "javax/swing/table/DefaultTableModel";
	using base_classes = std::tuple<scapix::java_api::javax::swing::table::AbstractTableModel, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TABLE_DEFAULTTABLEMODEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SWING_TABLE_DEFAULTTABLEMODEL)
#define SCAPIX_JAVA_API_JAVAX_SWING_TABLE_DEFAULTTABLEMODEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/swing/event/TableModelEvent.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::swing::table::DefaultTableModel : public jni::object_base<"javax/swing/table/DefaultTableModel",
	javax::swing::table::AbstractTableModel,
	java::io::Serializable>
{
public:

	static jni::ref<javax::swing::table::DefaultTableModel> new_object() { return base_::new_object(); }
	static jni::ref<javax::swing::table::DefaultTableModel> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::table::DefaultTableModel> new_object(jni::ref<java::util::Vector> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::table::DefaultTableModel> new_object(jni::ref<jni::array<java::lang::Object>> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::table::DefaultTableModel> new_object(jni::ref<java::util::Vector> p1, jni::ref<java::util::Vector> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::swing::table::DefaultTableModel> new_object(jni::ref<jni::array<jni::array<java::lang::Object>>> p1, jni::ref<jni::array<java::lang::Object>> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::util::Vector> getDataVector() { return call_method<"getDataVector", jni::ref<java::util::Vector>>(); }
	void setDataVector(jni::ref<java::util::Vector> p1, jni::ref<java::util::Vector> p2) { return call_method<"setDataVector", void>(p1, p2); }
	void setDataVector(jni::ref<jni::array<jni::array<java::lang::Object>>> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_method<"setDataVector", void>(p1, p2); }
	void newDataAvailable(jni::ref<javax::swing::event::TableModelEvent> p1) { return call_method<"newDataAvailable", void>(p1); }
	void newRowsAdded(jni::ref<javax::swing::event::TableModelEvent> p1) { return call_method<"newRowsAdded", void>(p1); }
	void rowsRemoved(jni::ref<javax::swing::event::TableModelEvent> p1) { return call_method<"rowsRemoved", void>(p1); }
	void setNumRows(jint p1) { return call_method<"setNumRows", void>(p1); }
	void setRowCount(jint p1) { return call_method<"setRowCount", void>(p1); }
	void addRow(jni::ref<java::util::Vector> p1) { return call_method<"addRow", void>(p1); }
	void addRow(jni::ref<jni::array<java::lang::Object>> p1) { return call_method<"addRow", void>(p1); }
	void insertRow(jint p1, jni::ref<java::util::Vector> p2) { return call_method<"insertRow", void>(p1, p2); }
	void insertRow(jint p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_method<"insertRow", void>(p1, p2); }
	void moveRow(jint p1, jint p2, jint p3) { return call_method<"moveRow", void>(p1, p2, p3); }
	void removeRow(jint p1) { return call_method<"removeRow", void>(p1); }
	void setColumnIdentifiers(jni::ref<java::util::Vector> p1) { return call_method<"setColumnIdentifiers", void>(p1); }
	void setColumnIdentifiers(jni::ref<jni::array<java::lang::Object>> p1) { return call_method<"setColumnIdentifiers", void>(p1); }
	void setColumnCount(jint p1) { return call_method<"setColumnCount", void>(p1); }
	void addColumn(jni::ref<java::lang::Object> p1) { return call_method<"addColumn", void>(p1); }
	void addColumn(jni::ref<java::lang::Object> p1, jni::ref<java::util::Vector> p2) { return call_method<"addColumn", void>(p1, p2); }
	void addColumn(jni::ref<java::lang::Object> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_method<"addColumn", void>(p1, p2); }
	jint getRowCount() { return call_method<"getRowCount", jint>(); }
	jint getColumnCount() { return call_method<"getColumnCount", jint>(); }
	jni::ref<java::lang::String> getColumnName(jint p1) { return call_method<"getColumnName", jni::ref<java::lang::String>>(p1); }
	jboolean isCellEditable(jint p1, jint p2) { return call_method<"isCellEditable", jboolean>(p1, p2); }
	jni::ref<java::lang::Object> getValueAt(jint p1, jint p2) { return call_method<"getValueAt", jni::ref<java::lang::Object>>(p1, p2); }
	void setValueAt(jni::ref<java::lang::Object> p1, jint p2, jint p3) { return call_method<"setValueAt", void>(p1, p2, p3); }

protected:

	DefaultTableModel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SWING_TABLE_DEFAULTTABLEMODEL
