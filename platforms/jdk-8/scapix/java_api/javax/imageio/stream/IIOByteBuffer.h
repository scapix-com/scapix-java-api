// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IIOBYTEBUFFER_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IIOBYTEBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::stream { class IIOByteBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::stream::IIOByteBuffer>
{
	static constexpr fixed_string class_name = "javax/imageio/stream/IIOByteBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IIOBYTEBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IIOBYTEBUFFER)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IIOBYTEBUFFER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::stream::IIOByteBuffer : public jni::object_base<"javax/imageio/stream/IIOByteBuffer",
	java::lang::Object>
{
public:

	static jni::ref<javax::imageio::stream::IIOByteBuffer> new_object(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> getData() { return call_method<"getData", jni::ref<jni::array<jbyte>>>(); }
	void setData(jni::ref<jni::array<jbyte>> p1) { return call_method<"setData", void>(p1); }
	jint getOffset() { return call_method<"getOffset", jint>(); }
	void setOffset(jint p1) { return call_method<"setOffset", void>(p1); }
	jint getLength() { return call_method<"getLength", jint>(); }
	void setLength(jint p1) { return call_method<"setLength", void>(p1); }

protected:

	IIOByteBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IIOBYTEBUFFER
