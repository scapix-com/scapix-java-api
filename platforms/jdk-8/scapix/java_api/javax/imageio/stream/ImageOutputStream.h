// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/imageio/stream/ImageInputStream.h>
#include <scapix/java_api/java/io/DataOutput.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::stream { class ImageOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::stream::ImageOutputStream>
{
	static constexpr fixed_string class_name = "javax/imageio/stream/ImageOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::imageio::stream::ImageInputStream, scapix::java_api::java::io::DataOutput>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEOUTPUTSTREAM)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEOUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::stream::ImageOutputStream : public jni::object_base<"javax/imageio/stream/ImageOutputStream",
	java::lang::Object,
	javax::imageio::stream::ImageInputStream,
	java::io::DataOutput>
{
public:

	void write(jint p1) { return call_method<"write", void>(p1); }
	void write(jni::ref<jni::array<jbyte>> p1) { return call_method<"write", void>(p1); }
	void write(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"write", void>(p1, p2, p3); }
	void writeBoolean(jboolean p1) { return call_method<"writeBoolean", void>(p1); }
	void writeByte(jint p1) { return call_method<"writeByte", void>(p1); }
	void writeShort(jint p1) { return call_method<"writeShort", void>(p1); }
	void writeChar(jint p1) { return call_method<"writeChar", void>(p1); }
	void writeInt(jint p1) { return call_method<"writeInt", void>(p1); }
	void writeLong(jlong p1) { return call_method<"writeLong", void>(p1); }
	void writeFloat(jfloat p1) { return call_method<"writeFloat", void>(p1); }
	void writeDouble(jdouble p1) { return call_method<"writeDouble", void>(p1); }
	void writeBytes(jni::ref<java::lang::String> p1) { return call_method<"writeBytes", void>(p1); }
	void writeChars(jni::ref<java::lang::String> p1) { return call_method<"writeChars", void>(p1); }
	void writeUTF(jni::ref<java::lang::String> p1) { return call_method<"writeUTF", void>(p1); }
	void writeShorts(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_method<"writeShorts", void>(p1, p2, p3); }
	void writeChars(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"writeChars", void>(p1, p2, p3); }
	void writeInts(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_method<"writeInts", void>(p1, p2, p3); }
	void writeLongs(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_method<"writeLongs", void>(p1, p2, p3); }
	void writeFloats(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3) { return call_method<"writeFloats", void>(p1, p2, p3); }
	void writeDoubles(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_method<"writeDoubles", void>(p1, p2, p3); }
	void writeBit(jint p1) { return call_method<"writeBit", void>(p1); }
	void writeBits(jlong p1, jint p2) { return call_method<"writeBits", void>(p1, p2); }
	void flushBefore(jlong p1) { return call_method<"flushBefore", void>(p1); }

protected:

	ImageOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEOUTPUTSTREAM
