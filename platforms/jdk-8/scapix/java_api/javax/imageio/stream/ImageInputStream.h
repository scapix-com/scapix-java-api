// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/DataInput.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::stream { class ImageInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::stream::ImageInputStream>
{
	static constexpr fixed_string class_name = "javax/imageio/stream/ImageInputStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::DataInput, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEINPUTSTREAM)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/javax/imageio/stream/IIOByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::stream::ImageInputStream : public jni::object_base<"javax/imageio/stream/ImageInputStream",
	java::lang::Object,
	java::io::DataInput,
	java::io::Closeable>
{
public:

	void setByteOrder(jni::ref<java::nio::ByteOrder> p1) { return call_method<"setByteOrder", void>(p1); }
	jni::ref<java::nio::ByteOrder> getByteOrder() { return call_method<"getByteOrder", jni::ref<java::nio::ByteOrder>>(); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> p1) { return call_method<"read", jint>(p1); }
	jint read(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	void readBytes(jni::ref<javax::imageio::stream::IIOByteBuffer> p1, jint p2) { return call_method<"readBytes", void>(p1, p2); }
	jboolean readBoolean() { return call_method<"readBoolean", jboolean>(); }
	jbyte readByte() { return call_method<"readByte", jbyte>(); }
	jint readUnsignedByte() { return call_method<"readUnsignedByte", jint>(); }
	jshort readShort() { return call_method<"readShort", jshort>(); }
	jint readUnsignedShort() { return call_method<"readUnsignedShort", jint>(); }
	jchar readChar() { return call_method<"readChar", jchar>(); }
	jint readInt() { return call_method<"readInt", jint>(); }
	jlong readUnsignedInt() { return call_method<"readUnsignedInt", jlong>(); }
	jlong readLong() { return call_method<"readLong", jlong>(); }
	jfloat readFloat() { return call_method<"readFloat", jfloat>(); }
	jdouble readDouble() { return call_method<"readDouble", jdouble>(); }
	jni::ref<java::lang::String> readLine() { return call_method<"readLine", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> readUTF() { return call_method<"readUTF", jni::ref<java::lang::String>>(); }
	void readFully(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"readFully", void>(p1, p2, p3); }
	void readFully(jni::ref<jni::array<jbyte>> p1) { return call_method<"readFully", void>(p1); }
	void readFully(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_method<"readFully", void>(p1, p2, p3); }
	void readFully(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"readFully", void>(p1, p2, p3); }
	void readFully(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_method<"readFully", void>(p1, p2, p3); }
	void readFully(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_method<"readFully", void>(p1, p2, p3); }
	void readFully(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3) { return call_method<"readFully", void>(p1, p2, p3); }
	void readFully(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_method<"readFully", void>(p1, p2, p3); }
	jlong getStreamPosition() { return call_method<"getStreamPosition", jlong>(); }
	jint getBitOffset() { return call_method<"getBitOffset", jint>(); }
	void setBitOffset(jint p1) { return call_method<"setBitOffset", void>(p1); }
	jint readBit() { return call_method<"readBit", jint>(); }
	jlong readBits(jint p1) { return call_method<"readBits", jlong>(p1); }
	jlong length() { return call_method<"length", jlong>(); }
	jint skipBytes(jint p1) { return call_method<"skipBytes", jint>(p1); }
	jlong skipBytes(jlong p1) { return call_method<"skipBytes", jlong>(p1); }
	void seek(jlong p1) { return call_method<"seek", void>(p1); }
	void mark() { return call_method<"mark", void>(); }
	void reset() { return call_method<"reset", void>(); }
	void flushBefore(jlong p1) { return call_method<"flushBefore", void>(p1); }
	void flush() { return call_method<"flush", void>(); }
	jlong getFlushedPosition() { return call_method<"getFlushedPosition", jlong>(); }
	jboolean isCached() { return call_method<"isCached", jboolean>(); }
	jboolean isCachedMemory() { return call_method<"isCachedMemory", jboolean>(); }
	jboolean isCachedFile() { return call_method<"isCachedFile", jboolean>(); }
	void close() { return call_method<"close", void>(); }

protected:

	ImageInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_STREAM_IMAGEINPUTSTREAM
