// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/w3c/dom/Element.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATANODE_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATANODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::metadata { class IIOMetadataNode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::metadata::IIOMetadataNode>
{
	static constexpr fixed_string class_name = "javax/imageio/metadata/IIOMetadataNode";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::w3c::dom::Element, scapix::java_api::org::w3c::dom::NodeList>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATANODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATANODE)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATANODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/Attr.h>
#include <scapix/java_api/org/w3c/dom/Document.h>
#include <scapix/java_api/org/w3c/dom/NamedNodeMap.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/w3c/dom/TypeInfo.h>
#include <scapix/java_api/org/w3c/dom/UserDataHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::metadata::IIOMetadataNode : public jni::object_base<"javax/imageio/metadata/IIOMetadataNode",
	java::lang::Object,
	org::w3c::dom::Element,
	org::w3c::dom::NodeList>
{
public:

	static jni::ref<javax::imageio::metadata::IIOMetadataNode> new_object() { return base_::new_object(); }
	static jni::ref<javax::imageio::metadata::IIOMetadataNode> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::String> getNodeName() { return call_method<"getNodeName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getNodeValue() { return call_method<"getNodeValue", jni::ref<java::lang::String>>(); }
	void setNodeValue(jni::ref<java::lang::String> p1) { return call_method<"setNodeValue", void>(p1); }
	jshort getNodeType() { return call_method<"getNodeType", jshort>(); }
	jni::ref<org::w3c::dom::Node> getParentNode() { return call_method<"getParentNode", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::NodeList> getChildNodes() { return call_method<"getChildNodes", jni::ref<org::w3c::dom::NodeList>>(); }
	jni::ref<org::w3c::dom::Node> getFirstChild() { return call_method<"getFirstChild", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> getLastChild() { return call_method<"getLastChild", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> getPreviousSibling() { return call_method<"getPreviousSibling", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> getNextSibling() { return call_method<"getNextSibling", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::NamedNodeMap> getAttributes() { return call_method<"getAttributes", jni::ref<org::w3c::dom::NamedNodeMap>>(); }
	jni::ref<org::w3c::dom::Document> getOwnerDocument() { return call_method<"getOwnerDocument", jni::ref<org::w3c::dom::Document>>(); }
	jni::ref<org::w3c::dom::Node> insertBefore(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"insertBefore", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<org::w3c::dom::Node> replaceChild(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"replaceChild", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<org::w3c::dom::Node> removeChild(jni::ref<org::w3c::dom::Node> p1) { return call_method<"removeChild", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::Node> appendChild(jni::ref<org::w3c::dom::Node> p1) { return call_method<"appendChild", jni::ref<org::w3c::dom::Node>>(p1); }
	jboolean hasChildNodes() { return call_method<"hasChildNodes", jboolean>(); }
	jni::ref<org::w3c::dom::Node> cloneNode(jboolean p1) { return call_method<"cloneNode", jni::ref<org::w3c::dom::Node>>(p1); }
	void normalize() { return call_method<"normalize", void>(); }
	jboolean isSupported(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"isSupported", jboolean>(p1, p2); }
	jni::ref<java::lang::String> getNamespaceURI() { return call_method<"getNamespaceURI", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPrefix() { return call_method<"getPrefix", jni::ref<java::lang::String>>(); }
	void setPrefix(jni::ref<java::lang::String> p1) { return call_method<"setPrefix", void>(p1); }
	jni::ref<java::lang::String> getLocalName() { return call_method<"getLocalName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getTagName() { return call_method<"getTagName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAttribute(jni::ref<java::lang::String> p1) { return call_method<"getAttribute", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeNS", jni::ref<java::lang::String>>(p1, p2); }
	void setAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setAttribute", void>(p1, p2); }
	void setAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"setAttributeNS", void>(p1, p2, p3); }
	void removeAttribute(jni::ref<java::lang::String> p1) { return call_method<"removeAttribute", void>(p1); }
	void removeAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"removeAttributeNS", void>(p1, p2); }
	jni::ref<org::w3c::dom::Attr> getAttributeNode(jni::ref<java::lang::String> p1) { return call_method<"getAttributeNode", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<org::w3c::dom::Attr> getAttributeNodeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeNodeNS", jni::ref<org::w3c::dom::Attr>>(p1, p2); }
	jni::ref<org::w3c::dom::Attr> setAttributeNode(jni::ref<org::w3c::dom::Attr> p1) { return call_method<"setAttributeNode", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<org::w3c::dom::Attr> setAttributeNodeNS(jni::ref<org::w3c::dom::Attr> p1) { return call_method<"setAttributeNodeNS", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<org::w3c::dom::Attr> removeAttributeNode(jni::ref<org::w3c::dom::Attr> p1) { return call_method<"removeAttributeNode", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<org::w3c::dom::NodeList> getElementsByTagName(jni::ref<java::lang::String> p1) { return call_method<"getElementsByTagName", jni::ref<org::w3c::dom::NodeList>>(p1); }
	jni::ref<org::w3c::dom::NodeList> getElementsByTagNameNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getElementsByTagNameNS", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	jboolean hasAttributes() { return call_method<"hasAttributes", jboolean>(); }
	jboolean hasAttribute(jni::ref<java::lang::String> p1) { return call_method<"hasAttribute", jboolean>(p1); }
	jboolean hasAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"hasAttributeNS", jboolean>(p1, p2); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<org::w3c::dom::Node> item(jint p1) { return call_method<"item", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<java::lang::Object> getUserObject() { return call_method<"getUserObject", jni::ref<java::lang::Object>>(); }
	void setUserObject(jni::ref<java::lang::Object> p1) { return call_method<"setUserObject", void>(p1); }
	void setIdAttribute(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setIdAttribute", void>(p1, p2); }
	void setIdAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"setIdAttributeNS", void>(p1, p2, p3); }
	void setIdAttributeNode(jni::ref<org::w3c::dom::Attr> p1, jboolean p2) { return call_method<"setIdAttributeNode", void>(p1, p2); }
	jni::ref<org::w3c::dom::TypeInfo> getSchemaTypeInfo() { return call_method<"getSchemaTypeInfo", jni::ref<org::w3c::dom::TypeInfo>>(); }
	jni::ref<java::lang::Object> setUserData(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<org::w3c::dom::UserDataHandler> p3) { return call_method<"setUserData", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::lang::Object> getUserData(jni::ref<java::lang::String> p1) { return call_method<"getUserData", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> getFeature(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getFeature", jni::ref<java::lang::Object>>(p1, p2); }
	jboolean isSameNode(jni::ref<org::w3c::dom::Node> p1) { return call_method<"isSameNode", jboolean>(p1); }
	jboolean isEqualNode(jni::ref<org::w3c::dom::Node> p1) { return call_method<"isEqualNode", jboolean>(p1); }
	jni::ref<java::lang::String> lookupNamespaceURI(jni::ref<java::lang::String> p1) { return call_method<"lookupNamespaceURI", jni::ref<java::lang::String>>(p1); }
	jboolean isDefaultNamespace(jni::ref<java::lang::String> p1) { return call_method<"isDefaultNamespace", jboolean>(p1); }
	jni::ref<java::lang::String> lookupPrefix(jni::ref<java::lang::String> p1) { return call_method<"lookupPrefix", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getTextContent() { return call_method<"getTextContent", jni::ref<java::lang::String>>(); }
	void setTextContent(jni::ref<java::lang::String> p1) { return call_method<"setTextContent", void>(p1); }
	jshort compareDocumentPosition(jni::ref<org::w3c::dom::Node> p1) { return call_method<"compareDocumentPosition", jshort>(p1); }
	jni::ref<java::lang::String> getBaseURI() { return call_method<"getBaseURI", jni::ref<java::lang::String>>(); }

protected:

	IIOMetadataNode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATANODE
