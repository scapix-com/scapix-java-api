// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATAFORMAT_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATAFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::metadata { class IIOMetadataFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::metadata::IIOMetadataFormat>
{
	static constexpr fixed_string class_name = "javax/imageio/metadata/IIOMetadataFormat";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATAFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATAFORMAT)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATAFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/javax/imageio/ImageTypeSpecifier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::metadata::IIOMetadataFormat : public jni::object_base<"javax/imageio/metadata/IIOMetadataFormat",
	java::lang::Object>
{
public:

	static jint CHILD_POLICY_EMPTY() { return get_static_field<"CHILD_POLICY_EMPTY", jint>(); }
	static jint CHILD_POLICY_ALL() { return get_static_field<"CHILD_POLICY_ALL", jint>(); }
	static jint CHILD_POLICY_SOME() { return get_static_field<"CHILD_POLICY_SOME", jint>(); }
	static jint CHILD_POLICY_CHOICE() { return get_static_field<"CHILD_POLICY_CHOICE", jint>(); }
	static jint CHILD_POLICY_SEQUENCE() { return get_static_field<"CHILD_POLICY_SEQUENCE", jint>(); }
	static jint CHILD_POLICY_REPEAT() { return get_static_field<"CHILD_POLICY_REPEAT", jint>(); }
	static jint CHILD_POLICY_MAX() { return get_static_field<"CHILD_POLICY_MAX", jint>(); }
	static jint VALUE_NONE() { return get_static_field<"VALUE_NONE", jint>(); }
	static jint VALUE_ARBITRARY() { return get_static_field<"VALUE_ARBITRARY", jint>(); }
	static jint VALUE_RANGE() { return get_static_field<"VALUE_RANGE", jint>(); }
	static jint VALUE_RANGE_MIN_INCLUSIVE_MASK() { return get_static_field<"VALUE_RANGE_MIN_INCLUSIVE_MASK", jint>(); }
	static jint VALUE_RANGE_MAX_INCLUSIVE_MASK() { return get_static_field<"VALUE_RANGE_MAX_INCLUSIVE_MASK", jint>(); }
	static jint VALUE_RANGE_MIN_INCLUSIVE() { return get_static_field<"VALUE_RANGE_MIN_INCLUSIVE", jint>(); }
	static jint VALUE_RANGE_MAX_INCLUSIVE() { return get_static_field<"VALUE_RANGE_MAX_INCLUSIVE", jint>(); }
	static jint VALUE_RANGE_MIN_MAX_INCLUSIVE() { return get_static_field<"VALUE_RANGE_MIN_MAX_INCLUSIVE", jint>(); }
	static jint VALUE_ENUMERATION() { return get_static_field<"VALUE_ENUMERATION", jint>(); }
	static jint VALUE_LIST() { return get_static_field<"VALUE_LIST", jint>(); }
	static jint DATATYPE_STRING() { return get_static_field<"DATATYPE_STRING", jint>(); }
	static jint DATATYPE_BOOLEAN() { return get_static_field<"DATATYPE_BOOLEAN", jint>(); }
	static jint DATATYPE_INTEGER() { return get_static_field<"DATATYPE_INTEGER", jint>(); }
	static jint DATATYPE_FLOAT() { return get_static_field<"DATATYPE_FLOAT", jint>(); }
	static jint DATATYPE_DOUBLE() { return get_static_field<"DATATYPE_DOUBLE", jint>(); }

	jni::ref<java::lang::String> getRootName() { return call_method<"getRootName", jni::ref<java::lang::String>>(); }
	jboolean canNodeAppear(jni::ref<java::lang::String> p1, jni::ref<javax::imageio::ImageTypeSpecifier> p2) { return call_method<"canNodeAppear", jboolean>(p1, p2); }
	jint getElementMinChildren(jni::ref<java::lang::String> p1) { return call_method<"getElementMinChildren", jint>(p1); }
	jint getElementMaxChildren(jni::ref<java::lang::String> p1) { return call_method<"getElementMaxChildren", jint>(p1); }
	jni::ref<java::lang::String> getElementDescription(jni::ref<java::lang::String> p1, jni::ref<java::util::Locale> p2) { return call_method<"getElementDescription", jni::ref<java::lang::String>>(p1, p2); }
	jint getChildPolicy(jni::ref<java::lang::String> p1) { return call_method<"getChildPolicy", jint>(p1); }
	jni::ref<jni::array<java::lang::String>> getChildNames(jni::ref<java::lang::String> p1) { return call_method<"getChildNames", jni::ref<jni::array<java::lang::String>>>(p1); }
	jni::ref<jni::array<java::lang::String>> getAttributeNames(jni::ref<java::lang::String> p1) { return call_method<"getAttributeNames", jni::ref<jni::array<java::lang::String>>>(p1); }
	jint getAttributeValueType(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeValueType", jint>(p1, p2); }
	jint getAttributeDataType(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeDataType", jint>(p1, p2); }
	jboolean isAttributeRequired(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"isAttributeRequired", jboolean>(p1, p2); }
	jni::ref<java::lang::String> getAttributeDefaultValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeDefaultValue", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<jni::array<java::lang::String>> getAttributeEnumerations(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeEnumerations", jni::ref<jni::array<java::lang::String>>>(p1, p2); }
	jni::ref<java::lang::String> getAttributeMinValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeMinValue", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getAttributeMaxValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeMaxValue", jni::ref<java::lang::String>>(p1, p2); }
	jint getAttributeListMinLength(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeListMinLength", jint>(p1, p2); }
	jint getAttributeListMaxLength(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeListMaxLength", jint>(p1, p2); }
	jni::ref<java::lang::String> getAttributeDescription(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Locale> p3) { return call_method<"getAttributeDescription", jni::ref<java::lang::String>>(p1, p2, p3); }
	jint getObjectValueType(jni::ref<java::lang::String> p1) { return call_method<"getObjectValueType", jint>(p1); }
	jni::ref<java::lang::Class> getObjectClass(jni::ref<java::lang::String> p1) { return call_method<"getObjectClass", jni::ref<java::lang::Class>>(p1); }
	jni::ref<java::lang::Object> getObjectDefaultValue(jni::ref<java::lang::String> p1) { return call_method<"getObjectDefaultValue", jni::ref<java::lang::Object>>(p1); }
	jni::ref<jni::array<java::lang::Object>> getObjectEnumerations(jni::ref<java::lang::String> p1) { return call_method<"getObjectEnumerations", jni::ref<jni::array<java::lang::Object>>>(p1); }
	jni::ref<java::lang::Comparable> getObjectMinValue(jni::ref<java::lang::String> p1) { return call_method<"getObjectMinValue", jni::ref<java::lang::Comparable>>(p1); }
	jni::ref<java::lang::Comparable> getObjectMaxValue(jni::ref<java::lang::String> p1) { return call_method<"getObjectMaxValue", jni::ref<java::lang::Comparable>>(p1); }
	jint getObjectArrayMinLength(jni::ref<java::lang::String> p1) { return call_method<"getObjectArrayMinLength", jint>(p1); }
	jint getObjectArrayMaxLength(jni::ref<java::lang::String> p1) { return call_method<"getObjectArrayMaxLength", jint>(p1); }

protected:

	IIOMetadataFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_METADATA_IIOMETADATAFORMAT
