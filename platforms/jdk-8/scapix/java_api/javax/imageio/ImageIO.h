// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEIO_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEIO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio { class ImageIO; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::ImageIO>
{
	static constexpr fixed_string class_name = "javax/imageio/ImageIO";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEIO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEIO)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEIO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/RenderedImage.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/javax/imageio/ImageReader.h>
#include <scapix/java_api/javax/imageio/ImageTypeSpecifier.h>
#include <scapix/java_api/javax/imageio/ImageWriter.h>
#include <scapix/java_api/javax/imageio/stream/ImageInputStream.h>
#include <scapix/java_api/javax/imageio/stream/ImageOutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::ImageIO : public jni::object_base<"javax/imageio/ImageIO",
	java::lang::Object>
{
public:

	static void scanForPlugins() { return call_static_method<"scanForPlugins", void>(); }
	static void setUseCache(jboolean p1) { return call_static_method<"setUseCache", void>(p1); }
	static jboolean getUseCache() { return call_static_method<"getUseCache", jboolean>(); }
	static void setCacheDirectory(jni::ref<java::io::File> p1) { return call_static_method<"setCacheDirectory", void>(p1); }
	static jni::ref<java::io::File> getCacheDirectory() { return call_static_method<"getCacheDirectory", jni::ref<java::io::File>>(); }
	static jni::ref<javax::imageio::stream::ImageInputStream> createImageInputStream(jni::ref<java::lang::Object> p1) { return call_static_method<"createImageInputStream", jni::ref<javax::imageio::stream::ImageInputStream>>(p1); }
	static jni::ref<javax::imageio::stream::ImageOutputStream> createImageOutputStream(jni::ref<java::lang::Object> p1) { return call_static_method<"createImageOutputStream", jni::ref<javax::imageio::stream::ImageOutputStream>>(p1); }
	static jni::ref<jni::array<java::lang::String>> getReaderFormatNames() { return call_static_method<"getReaderFormatNames", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<jni::array<java::lang::String>> getReaderMIMETypes() { return call_static_method<"getReaderMIMETypes", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<jni::array<java::lang::String>> getReaderFileSuffixes() { return call_static_method<"getReaderFileSuffixes", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<java::util::Iterator> getImageReaders(jni::ref<java::lang::Object> p1) { return call_static_method<"getImageReaders", jni::ref<java::util::Iterator>>(p1); }
	static jni::ref<java::util::Iterator> getImageReadersByFormatName(jni::ref<java::lang::String> p1) { return call_static_method<"getImageReadersByFormatName", jni::ref<java::util::Iterator>>(p1); }
	static jni::ref<java::util::Iterator> getImageReadersBySuffix(jni::ref<java::lang::String> p1) { return call_static_method<"getImageReadersBySuffix", jni::ref<java::util::Iterator>>(p1); }
	static jni::ref<java::util::Iterator> getImageReadersByMIMEType(jni::ref<java::lang::String> p1) { return call_static_method<"getImageReadersByMIMEType", jni::ref<java::util::Iterator>>(p1); }
	static jni::ref<jni::array<java::lang::String>> getWriterFormatNames() { return call_static_method<"getWriterFormatNames", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<jni::array<java::lang::String>> getWriterMIMETypes() { return call_static_method<"getWriterMIMETypes", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<jni::array<java::lang::String>> getWriterFileSuffixes() { return call_static_method<"getWriterFileSuffixes", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<java::util::Iterator> getImageWritersByFormatName(jni::ref<java::lang::String> p1) { return call_static_method<"getImageWritersByFormatName", jni::ref<java::util::Iterator>>(p1); }
	static jni::ref<java::util::Iterator> getImageWritersBySuffix(jni::ref<java::lang::String> p1) { return call_static_method<"getImageWritersBySuffix", jni::ref<java::util::Iterator>>(p1); }
	static jni::ref<java::util::Iterator> getImageWritersByMIMEType(jni::ref<java::lang::String> p1) { return call_static_method<"getImageWritersByMIMEType", jni::ref<java::util::Iterator>>(p1); }
	static jni::ref<javax::imageio::ImageWriter> getImageWriter(jni::ref<javax::imageio::ImageReader> p1) { return call_static_method<"getImageWriter", jni::ref<javax::imageio::ImageWriter>>(p1); }
	static jni::ref<javax::imageio::ImageReader> getImageReader(jni::ref<javax::imageio::ImageWriter> p1) { return call_static_method<"getImageReader", jni::ref<javax::imageio::ImageReader>>(p1); }
	static jni::ref<java::util::Iterator> getImageWriters(jni::ref<javax::imageio::ImageTypeSpecifier> p1, jni::ref<java::lang::String> p2) { return call_static_method<"getImageWriters", jni::ref<java::util::Iterator>>(p1, p2); }
	static jni::ref<java::util::Iterator> getImageTranscoders(jni::ref<javax::imageio::ImageReader> p1, jni::ref<javax::imageio::ImageWriter> p2) { return call_static_method<"getImageTranscoders", jni::ref<java::util::Iterator>>(p1, p2); }
	static jni::ref<java::awt::image::BufferedImage> read(jni::ref<java::io::File> p1) { return call_static_method<"read", jni::ref<java::awt::image::BufferedImage>>(p1); }
	static jni::ref<java::awt::image::BufferedImage> read(jni::ref<java::io::InputStream> p1) { return call_static_method<"read", jni::ref<java::awt::image::BufferedImage>>(p1); }
	static jni::ref<java::awt::image::BufferedImage> read(jni::ref<java::net::URL> p1) { return call_static_method<"read", jni::ref<java::awt::image::BufferedImage>>(p1); }
	static jni::ref<java::awt::image::BufferedImage> read(jni::ref<javax::imageio::stream::ImageInputStream> p1) { return call_static_method<"read", jni::ref<java::awt::image::BufferedImage>>(p1); }
	static jboolean write(jni::ref<java::awt::image::RenderedImage> p1, jni::ref<java::lang::String> p2, jni::ref<javax::imageio::stream::ImageOutputStream> p3) { return call_static_method<"write", jboolean>(p1, p2, p3); }
	static jboolean write(jni::ref<java::awt::image::RenderedImage> p1, jni::ref<java::lang::String> p2, jni::ref<java::io::File> p3) { return call_static_method<"write", jboolean>(p1, p2, p3); }
	static jboolean write(jni::ref<java::awt::image::RenderedImage> p1, jni::ref<java::lang::String> p2, jni::ref<java::io::OutputStream> p3) { return call_static_method<"write", jboolean>(p1, p2, p3); }

protected:

	ImageIO(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEIO
