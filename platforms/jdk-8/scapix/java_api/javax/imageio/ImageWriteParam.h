// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/imageio/IIOParam.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITEPARAM_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITEPARAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio { class ImageWriteParam; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::ImageWriteParam>
{
	static constexpr fixed_string class_name = "javax/imageio/ImageWriteParam";
	using base_classes = std::tuple<scapix::java_api::javax::imageio::IIOParam>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITEPARAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITEPARAM)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITEPARAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::ImageWriteParam : public jni::object_base<"javax/imageio/ImageWriteParam",
	javax::imageio::IIOParam>
{
public:

	static jint MODE_DISABLED() { return get_static_field<"MODE_DISABLED", jint>(); }
	static jint MODE_DEFAULT() { return get_static_field<"MODE_DEFAULT", jint>(); }
	static jint MODE_EXPLICIT() { return get_static_field<"MODE_EXPLICIT", jint>(); }
	static jint MODE_COPY_FROM_METADATA() { return get_static_field<"MODE_COPY_FROM_METADATA", jint>(); }

	static jni::ref<javax::imageio::ImageWriteParam> new_object(jni::ref<java::util::Locale> p1) { return base_::new_object(p1); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	jboolean canWriteTiles() { return call_method<"canWriteTiles", jboolean>(); }
	jboolean canOffsetTiles() { return call_method<"canOffsetTiles", jboolean>(); }
	void setTilingMode(jint p1) { return call_method<"setTilingMode", void>(p1); }
	jint getTilingMode() { return call_method<"getTilingMode", jint>(); }
	jni::ref<jni::array<java::awt::Dimension>> getPreferredTileSizes() { return call_method<"getPreferredTileSizes", jni::ref<jni::array<java::awt::Dimension>>>(); }
	void setTiling(jint p1, jint p2, jint p3, jint p4) { return call_method<"setTiling", void>(p1, p2, p3, p4); }
	void unsetTiling() { return call_method<"unsetTiling", void>(); }
	jint getTileWidth() { return call_method<"getTileWidth", jint>(); }
	jint getTileHeight() { return call_method<"getTileHeight", jint>(); }
	jint getTileGridXOffset() { return call_method<"getTileGridXOffset", jint>(); }
	jint getTileGridYOffset() { return call_method<"getTileGridYOffset", jint>(); }
	jboolean canWriteProgressive() { return call_method<"canWriteProgressive", jboolean>(); }
	void setProgressiveMode(jint p1) { return call_method<"setProgressiveMode", void>(p1); }
	jint getProgressiveMode() { return call_method<"getProgressiveMode", jint>(); }
	jboolean canWriteCompressed() { return call_method<"canWriteCompressed", jboolean>(); }
	void setCompressionMode(jint p1) { return call_method<"setCompressionMode", void>(p1); }
	jint getCompressionMode() { return call_method<"getCompressionMode", jint>(); }
	jni::ref<jni::array<java::lang::String>> getCompressionTypes() { return call_method<"getCompressionTypes", jni::ref<jni::array<java::lang::String>>>(); }
	void setCompressionType(jni::ref<java::lang::String> p1) { return call_method<"setCompressionType", void>(p1); }
	jni::ref<java::lang::String> getCompressionType() { return call_method<"getCompressionType", jni::ref<java::lang::String>>(); }
	void unsetCompression() { return call_method<"unsetCompression", void>(); }
	jni::ref<java::lang::String> getLocalizedCompressionTypeName() { return call_method<"getLocalizedCompressionTypeName", jni::ref<java::lang::String>>(); }
	jboolean isCompressionLossless() { return call_method<"isCompressionLossless", jboolean>(); }
	void setCompressionQuality(jfloat p1) { return call_method<"setCompressionQuality", void>(p1); }
	jfloat getCompressionQuality() { return call_method<"getCompressionQuality", jfloat>(); }
	jfloat getBitRate(jfloat p1) { return call_method<"getBitRate", jfloat>(p1); }
	jni::ref<jni::array<java::lang::String>> getCompressionQualityDescriptions() { return call_method<"getCompressionQualityDescriptions", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<jfloat>> getCompressionQualityValues() { return call_method<"getCompressionQualityValues", jni::ref<jni::array<jfloat>>>(); }

protected:

	ImageWriteParam(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITEPARAM
