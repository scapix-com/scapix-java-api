// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/imageio/ImageWriteParam.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_PLUGINS_JPEG_JPEGIMAGEWRITEPARAM_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_PLUGINS_JPEG_JPEGIMAGEWRITEPARAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::plugins::jpeg { class JPEGImageWriteParam; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::plugins::jpeg::JPEGImageWriteParam>
{
	static constexpr fixed_string class_name = "javax/imageio/plugins/jpeg/JPEGImageWriteParam";
	using base_classes = std::tuple<scapix::java_api::javax::imageio::ImageWriteParam>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_PLUGINS_JPEG_JPEGIMAGEWRITEPARAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_PLUGINS_JPEG_JPEGIMAGEWRITEPARAM)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_PLUGINS_JPEG_JPEGIMAGEWRITEPARAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/javax/imageio/plugins/jpeg/JPEGHuffmanTable.h>
#include <scapix/java_api/javax/imageio/plugins/jpeg/JPEGQTable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::plugins::jpeg::JPEGImageWriteParam : public jni::object_base<"javax/imageio/plugins/jpeg/JPEGImageWriteParam",
	javax::imageio::ImageWriteParam>
{
public:

	static jni::ref<javax::imageio::plugins::jpeg::JPEGImageWriteParam> new_object(jni::ref<java::util::Locale> p1) { return base_::new_object(p1); }
	void unsetCompression() { return call_method<"unsetCompression", void>(); }
	jboolean isCompressionLossless() { return call_method<"isCompressionLossless", jboolean>(); }
	jni::ref<jni::array<java::lang::String>> getCompressionQualityDescriptions() { return call_method<"getCompressionQualityDescriptions", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<jfloat>> getCompressionQualityValues() { return call_method<"getCompressionQualityValues", jni::ref<jni::array<jfloat>>>(); }
	jboolean areTablesSet() { return call_method<"areTablesSet", jboolean>(); }
	void setEncodeTables(jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGQTable>> p1, jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGHuffmanTable>> p2, jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGHuffmanTable>> p3) { return call_method<"setEncodeTables", void>(p1, p2, p3); }
	void unsetEncodeTables() { return call_method<"unsetEncodeTables", void>(); }
	jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGQTable>> getQTables() { return call_method<"getQTables", jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGQTable>>>(); }
	jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGHuffmanTable>> getDCHuffmanTables() { return call_method<"getDCHuffmanTables", jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGHuffmanTable>>>(); }
	jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGHuffmanTable>> getACHuffmanTables() { return call_method<"getACHuffmanTables", jni::ref<jni::array<javax::imageio::plugins::jpeg::JPEGHuffmanTable>>>(); }
	void setOptimizeHuffmanTables(jboolean p1) { return call_method<"setOptimizeHuffmanTables", void>(p1); }
	jboolean getOptimizeHuffmanTables() { return call_method<"getOptimizeHuffmanTables", jboolean>(); }

protected:

	JPEGImageWriteParam(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_PLUGINS_JPEG_JPEGIMAGEWRITEPARAM
