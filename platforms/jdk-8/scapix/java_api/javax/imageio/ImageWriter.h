// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/imageio/ImageTranscoder.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITER_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio { class ImageWriter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::ImageWriter>
{
	static constexpr fixed_string class_name = "javax/imageio/ImageWriter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::imageio::ImageTranscoder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITER)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/image/Raster.h>
#include <scapix/java_api/java/awt/image/RenderedImage.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/javax/imageio/IIOImage.h>
#include <scapix/java_api/javax/imageio/ImageTypeSpecifier.h>
#include <scapix/java_api/javax/imageio/ImageWriteParam.h>
#include <scapix/java_api/javax/imageio/event/IIOWriteProgressListener.h>
#include <scapix/java_api/javax/imageio/event/IIOWriteWarningListener.h>
#include <scapix/java_api/javax/imageio/metadata/IIOMetadata.h>
#include <scapix/java_api/javax/imageio/spi/ImageWriterSpi.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::ImageWriter : public jni::object_base<"javax/imageio/ImageWriter",
	java::lang::Object,
	javax::imageio::ImageTranscoder>
{
public:

	jni::ref<javax::imageio::spi::ImageWriterSpi> getOriginatingProvider() { return call_method<"getOriginatingProvider", jni::ref<javax::imageio::spi::ImageWriterSpi>>(); }
	void setOutput(jni::ref<java::lang::Object> p1) { return call_method<"setOutput", void>(p1); }
	jni::ref<java::lang::Object> getOutput() { return call_method<"getOutput", jni::ref<java::lang::Object>>(); }
	jni::ref<jni::array<java::util::Locale>> getAvailableLocales() { return call_method<"getAvailableLocales", jni::ref<jni::array<java::util::Locale>>>(); }
	void setLocale(jni::ref<java::util::Locale> p1) { return call_method<"setLocale", void>(p1); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	jni::ref<javax::imageio::ImageWriteParam> getDefaultWriteParam() { return call_method<"getDefaultWriteParam", jni::ref<javax::imageio::ImageWriteParam>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadata> getDefaultStreamMetadata(jni::ref<javax::imageio::ImageWriteParam> p1) { return call_method<"getDefaultStreamMetadata", jni::ref<javax::imageio::metadata::IIOMetadata>>(p1); }
	jni::ref<javax::imageio::metadata::IIOMetadata> getDefaultImageMetadata(jni::ref<javax::imageio::ImageTypeSpecifier> p1, jni::ref<javax::imageio::ImageWriteParam> p2) { return call_method<"getDefaultImageMetadata", jni::ref<javax::imageio::metadata::IIOMetadata>>(p1, p2); }
	jni::ref<javax::imageio::metadata::IIOMetadata> convertStreamMetadata(jni::ref<javax::imageio::metadata::IIOMetadata> p1, jni::ref<javax::imageio::ImageWriteParam> p2) { return call_method<"convertStreamMetadata", jni::ref<javax::imageio::metadata::IIOMetadata>>(p1, p2); }
	jni::ref<javax::imageio::metadata::IIOMetadata> convertImageMetadata(jni::ref<javax::imageio::metadata::IIOMetadata> p1, jni::ref<javax::imageio::ImageTypeSpecifier> p2, jni::ref<javax::imageio::ImageWriteParam> p3) { return call_method<"convertImageMetadata", jni::ref<javax::imageio::metadata::IIOMetadata>>(p1, p2, p3); }
	jint getNumThumbnailsSupported(jni::ref<javax::imageio::ImageTypeSpecifier> p1, jni::ref<javax::imageio::ImageWriteParam> p2, jni::ref<javax::imageio::metadata::IIOMetadata> p3, jni::ref<javax::imageio::metadata::IIOMetadata> p4) { return call_method<"getNumThumbnailsSupported", jint>(p1, p2, p3, p4); }
	jni::ref<jni::array<java::awt::Dimension>> getPreferredThumbnailSizes(jni::ref<javax::imageio::ImageTypeSpecifier> p1, jni::ref<javax::imageio::ImageWriteParam> p2, jni::ref<javax::imageio::metadata::IIOMetadata> p3, jni::ref<javax::imageio::metadata::IIOMetadata> p4) { return call_method<"getPreferredThumbnailSizes", jni::ref<jni::array<java::awt::Dimension>>>(p1, p2, p3, p4); }
	jboolean canWriteRasters() { return call_method<"canWriteRasters", jboolean>(); }
	void write(jni::ref<javax::imageio::metadata::IIOMetadata> p1, jni::ref<javax::imageio::IIOImage> p2, jni::ref<javax::imageio::ImageWriteParam> p3) { return call_method<"write", void>(p1, p2, p3); }
	void write(jni::ref<javax::imageio::IIOImage> p1) { return call_method<"write", void>(p1); }
	void write(jni::ref<java::awt::image::RenderedImage> p1) { return call_method<"write", void>(p1); }
	jboolean canWriteSequence() { return call_method<"canWriteSequence", jboolean>(); }
	void prepareWriteSequence(jni::ref<javax::imageio::metadata::IIOMetadata> p1) { return call_method<"prepareWriteSequence", void>(p1); }
	void writeToSequence(jni::ref<javax::imageio::IIOImage> p1, jni::ref<javax::imageio::ImageWriteParam> p2) { return call_method<"writeToSequence", void>(p1, p2); }
	void endWriteSequence() { return call_method<"endWriteSequence", void>(); }
	jboolean canReplaceStreamMetadata() { return call_method<"canReplaceStreamMetadata", jboolean>(); }
	void replaceStreamMetadata(jni::ref<javax::imageio::metadata::IIOMetadata> p1) { return call_method<"replaceStreamMetadata", void>(p1); }
	jboolean canReplaceImageMetadata(jint p1) { return call_method<"canReplaceImageMetadata", jboolean>(p1); }
	void replaceImageMetadata(jint p1, jni::ref<javax::imageio::metadata::IIOMetadata> p2) { return call_method<"replaceImageMetadata", void>(p1, p2); }
	jboolean canInsertImage(jint p1) { return call_method<"canInsertImage", jboolean>(p1); }
	void writeInsert(jint p1, jni::ref<javax::imageio::IIOImage> p2, jni::ref<javax::imageio::ImageWriteParam> p3) { return call_method<"writeInsert", void>(p1, p2, p3); }
	jboolean canRemoveImage(jint p1) { return call_method<"canRemoveImage", jboolean>(p1); }
	void removeImage(jint p1) { return call_method<"removeImage", void>(p1); }
	jboolean canWriteEmpty() { return call_method<"canWriteEmpty", jboolean>(); }
	void prepareWriteEmpty(jni::ref<javax::imageio::metadata::IIOMetadata> p1, jni::ref<javax::imageio::ImageTypeSpecifier> p2, jint p3, jint p4, jni::ref<javax::imageio::metadata::IIOMetadata> p5, jni::ref<java::util::List> p6, jni::ref<javax::imageio::ImageWriteParam> p7) { return call_method<"prepareWriteEmpty", void>(p1, p2, p3, p4, p5, p6, p7); }
	void endWriteEmpty() { return call_method<"endWriteEmpty", void>(); }
	jboolean canInsertEmpty(jint p1) { return call_method<"canInsertEmpty", jboolean>(p1); }
	void prepareInsertEmpty(jint p1, jni::ref<javax::imageio::ImageTypeSpecifier> p2, jint p3, jint p4, jni::ref<javax::imageio::metadata::IIOMetadata> p5, jni::ref<java::util::List> p6, jni::ref<javax::imageio::ImageWriteParam> p7) { return call_method<"prepareInsertEmpty", void>(p1, p2, p3, p4, p5, p6, p7); }
	void endInsertEmpty() { return call_method<"endInsertEmpty", void>(); }
	jboolean canReplacePixels(jint p1) { return call_method<"canReplacePixels", jboolean>(p1); }
	void prepareReplacePixels(jint p1, jni::ref<java::awt::Rectangle> p2) { return call_method<"prepareReplacePixels", void>(p1, p2); }
	void replacePixels(jni::ref<java::awt::image::RenderedImage> p1, jni::ref<javax::imageio::ImageWriteParam> p2) { return call_method<"replacePixels", void>(p1, p2); }
	void replacePixels(jni::ref<java::awt::image::Raster> p1, jni::ref<javax::imageio::ImageWriteParam> p2) { return call_method<"replacePixels", void>(p1, p2); }
	void endReplacePixels() { return call_method<"endReplacePixels", void>(); }
	void abort() { return call_method<"abort", void>(); }
	void addIIOWriteWarningListener(jni::ref<javax::imageio::event::IIOWriteWarningListener> p1) { return call_method<"addIIOWriteWarningListener", void>(p1); }
	void removeIIOWriteWarningListener(jni::ref<javax::imageio::event::IIOWriteWarningListener> p1) { return call_method<"removeIIOWriteWarningListener", void>(p1); }
	void removeAllIIOWriteWarningListeners() { return call_method<"removeAllIIOWriteWarningListeners", void>(); }
	void addIIOWriteProgressListener(jni::ref<javax::imageio::event::IIOWriteProgressListener> p1) { return call_method<"addIIOWriteProgressListener", void>(p1); }
	void removeIIOWriteProgressListener(jni::ref<javax::imageio::event::IIOWriteProgressListener> p1) { return call_method<"removeIIOWriteProgressListener", void>(p1); }
	void removeAllIIOWriteProgressListeners() { return call_method<"removeAllIIOWriteProgressListeners", void>(); }
	void reset() { return call_method<"reset", void>(); }
	void dispose() { return call_method<"dispose", void>(); }

protected:

	ImageWriter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGEWRITER
