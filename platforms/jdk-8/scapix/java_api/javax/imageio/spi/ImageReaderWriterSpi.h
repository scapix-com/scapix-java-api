// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/imageio/spi/IIOServiceProvider.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_IMAGEREADERWRITERSPI_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_IMAGEREADERWRITERSPI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::spi { class ImageReaderWriterSpi; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::spi::ImageReaderWriterSpi>
{
	static constexpr fixed_string class_name = "javax/imageio/spi/ImageReaderWriterSpi";
	using base_classes = std::tuple<scapix::java_api::javax::imageio::spi::IIOServiceProvider>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_IMAGEREADERWRITERSPI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_IMAGEREADERWRITERSPI)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_IMAGEREADERWRITERSPI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/imageio/metadata/IIOMetadataFormat.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::spi::ImageReaderWriterSpi : public jni::object_base<"javax/imageio/spi/ImageReaderWriterSpi",
	javax::imageio::spi::IIOServiceProvider>
{
public:

	static jni::ref<javax::imageio::spi::ImageReaderWriterSpi> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::String>> p3, jni::ref<jni::array<java::lang::String>> p4, jni::ref<jni::array<java::lang::String>> p5, jni::ref<java::lang::String> p6, jboolean p7, jni::ref<java::lang::String> p8, jni::ref<java::lang::String> p9, jni::ref<jni::array<java::lang::String>> p10, jni::ref<jni::array<java::lang::String>> p11, jboolean p12, jni::ref<java::lang::String> p13, jni::ref<java::lang::String> p14, jni::ref<jni::array<java::lang::String>> p15, jni::ref<jni::array<java::lang::String>> p16) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16); }
	static jni::ref<javax::imageio::spi::ImageReaderWriterSpi> new_object() { return base_::new_object(); }
	jni::ref<jni::array<java::lang::String>> getFormatNames() { return call_method<"getFormatNames", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getFileSuffixes() { return call_method<"getFileSuffixes", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getMIMETypes() { return call_method<"getMIMETypes", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::lang::String> getPluginClassName() { return call_method<"getPluginClassName", jni::ref<java::lang::String>>(); }
	jboolean isStandardStreamMetadataFormatSupported() { return call_method<"isStandardStreamMetadataFormatSupported", jboolean>(); }
	jni::ref<java::lang::String> getNativeStreamMetadataFormatName() { return call_method<"getNativeStreamMetadataFormatName", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::lang::String>> getExtraStreamMetadataFormatNames() { return call_method<"getExtraStreamMetadataFormatNames", jni::ref<jni::array<java::lang::String>>>(); }
	jboolean isStandardImageMetadataFormatSupported() { return call_method<"isStandardImageMetadataFormatSupported", jboolean>(); }
	jni::ref<java::lang::String> getNativeImageMetadataFormatName() { return call_method<"getNativeImageMetadataFormatName", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::lang::String>> getExtraImageMetadataFormatNames() { return call_method<"getExtraImageMetadataFormatNames", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataFormat> getStreamMetadataFormat(jni::ref<java::lang::String> p1) { return call_method<"getStreamMetadataFormat", jni::ref<javax::imageio::metadata::IIOMetadataFormat>>(p1); }
	jni::ref<javax::imageio::metadata::IIOMetadataFormat> getImageMetadataFormat(jni::ref<java::lang::String> p1) { return call_method<"getImageMetadataFormat", jni::ref<javax::imageio::metadata::IIOMetadataFormat>>(p1); }

protected:

	ImageReaderWriterSpi(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_IMAGEREADERWRITERSPI
