// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_DIGRAPHNODE_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_DIGRAPHNODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::spi { class DigraphNode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::spi::DigraphNode>
{
	static constexpr fixed_string class_name = "javax/imageio/spi/DigraphNode";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_DIGRAPHNODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_DIGRAPHNODE)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_DIGRAPHNODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class javax::imageio::spi::DigraphNode : public jni::object_base<"javax/imageio/spi/DigraphNode",
	java::lang::Object,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static jni::ref<javax::imageio::spi::DigraphNode> new_object(jni::ref<java::lang::Object> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::Object> getData() { return call_method<"getData", jni::ref<java::lang::Object>>(); }
	jni::ref<java::util::Iterator> getOutNodes() { return call_method<"getOutNodes", jni::ref<java::util::Iterator>>(); }
	jboolean addEdge(jni::ref<javax::imageio::spi::DigraphNode> p1) { return call_method<"addEdge", jboolean>(p1); }
	jboolean hasEdge(jni::ref<javax::imageio::spi::DigraphNode> p1) { return call_method<"hasEdge", jboolean>(p1); }
	jboolean removeEdge(jni::ref<javax::imageio::spi::DigraphNode> p1) { return call_method<"removeEdge", jboolean>(p1); }
	void dispose() { return call_method<"dispose", void>(); }
	jint getInDegree() { return call_method<"getInDegree", jint>(); }

protected:

	DigraphNode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_DIGRAPHNODE
