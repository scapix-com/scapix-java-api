// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractSet.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_PARTIALLYORDEREDSET_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_PARTIALLYORDEREDSET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio::spi { class PartiallyOrderedSet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::spi::PartiallyOrderedSet>
{
	static constexpr fixed_string class_name = "javax/imageio/spi/PartiallyOrderedSet";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractSet>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_PARTIALLYORDEREDSET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_PARTIALLYORDEREDSET)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_PARTIALLYORDEREDSET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class javax::imageio::spi::PartiallyOrderedSet : public jni::object_base<"javax/imageio/spi/PartiallyOrderedSet",
	java::util::AbstractSet>
{
public:

	static jni::ref<javax::imageio::spi::PartiallyOrderedSet> new_object() { return base_::new_object(); }
	jint size() { return call_method<"size", jint>(); }
	jboolean contains(jni::ref<java::lang::Object> p1) { return call_method<"contains", jboolean>(p1); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jboolean add(jni::ref<java::lang::Object> p1) { return call_method<"add", jboolean>(p1); }
	jboolean remove(jni::ref<java::lang::Object> p1) { return call_method<"remove", jboolean>(p1); }
	void clear() { return call_method<"clear", void>(); }
	jboolean setOrdering(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"setOrdering", jboolean>(p1, p2); }
	jboolean unsetOrdering(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"unsetOrdering", jboolean>(p1, p2); }
	jboolean hasOrdering(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"hasOrdering", jboolean>(p1, p2); }

protected:

	PartiallyOrderedSet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_SPI_PARTIALLYORDEREDSET
