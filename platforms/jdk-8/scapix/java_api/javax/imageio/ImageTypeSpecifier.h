// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGETYPESPECIFIER_FWD
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGETYPESPECIFIER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::imageio { class ImageTypeSpecifier; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::imageio::ImageTypeSpecifier>
{
	static constexpr fixed_string class_name = "javax/imageio/ImageTypeSpecifier";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGETYPESPECIFIER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGETYPESPECIFIER)
#define SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGETYPESPECIFIER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/color/ColorSpace.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/RenderedImage.h>
#include <scapix/java_api/java/awt/image/SampleModel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::imageio::ImageTypeSpecifier : public jni::object_base<"javax/imageio/ImageTypeSpecifier",
	java::lang::Object>
{
public:

	static jni::ref<javax::imageio::ImageTypeSpecifier> new_object(jni::ref<java::awt::image::ColorModel> p1, jni::ref<java::awt::image::SampleModel> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> new_object(jni::ref<java::awt::image::RenderedImage> p1) { return base_::new_object(p1); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> createPacked(jni::ref<java::awt::color::ColorSpace> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jboolean p7) { return call_static_method<"createPacked", jni::ref<javax::imageio::ImageTypeSpecifier>>(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> createInterleaved(jni::ref<java::awt::color::ColorSpace> p1, jni::ref<jni::array<jint>> p2, jint p3, jboolean p4, jboolean p5) { return call_static_method<"createInterleaved", jni::ref<javax::imageio::ImageTypeSpecifier>>(p1, p2, p3, p4, p5); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> createBanded(jni::ref<java::awt::color::ColorSpace> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4, jboolean p5, jboolean p6) { return call_static_method<"createBanded", jni::ref<javax::imageio::ImageTypeSpecifier>>(p1, p2, p3, p4, p5, p6); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> createGrayscale(jint p1, jint p2, jboolean p3) { return call_static_method<"createGrayscale", jni::ref<javax::imageio::ImageTypeSpecifier>>(p1, p2, p3); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> createGrayscale(jint p1, jint p2, jboolean p3, jboolean p4) { return call_static_method<"createGrayscale", jni::ref<javax::imageio::ImageTypeSpecifier>>(p1, p2, p3, p4); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> createIndexed(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<jbyte>> p3, jni::ref<jni::array<jbyte>> p4, jint p5, jint p6) { return call_static_method<"createIndexed", jni::ref<javax::imageio::ImageTypeSpecifier>>(p1, p2, p3, p4, p5, p6); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> createFromBufferedImageType(jint p1) { return call_static_method<"createFromBufferedImageType", jni::ref<javax::imageio::ImageTypeSpecifier>>(p1); }
	static jni::ref<javax::imageio::ImageTypeSpecifier> createFromRenderedImage(jni::ref<java::awt::image::RenderedImage> p1) { return call_static_method<"createFromRenderedImage", jni::ref<javax::imageio::ImageTypeSpecifier>>(p1); }
	jint getBufferedImageType() { return call_method<"getBufferedImageType", jint>(); }
	jint getNumComponents() { return call_method<"getNumComponents", jint>(); }
	jint getNumBands() { return call_method<"getNumBands", jint>(); }
	jint getBitsPerBand(jint p1) { return call_method<"getBitsPerBand", jint>(p1); }
	jni::ref<java::awt::image::SampleModel> getSampleModel() { return call_method<"getSampleModel", jni::ref<java::awt::image::SampleModel>>(); }
	jni::ref<java::awt::image::SampleModel> getSampleModel(jint p1, jint p2) { return call_method<"getSampleModel", jni::ref<java::awt::image::SampleModel>>(p1, p2); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::image::BufferedImage> createBufferedImage(jint p1, jint p2) { return call_method<"createBufferedImage", jni::ref<java::awt::image::BufferedImage>>(p1, p2); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	ImageTypeSpecifier(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_IMAGEIO_IMAGETYPESPECIFIER
