// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KEYTAB_FWD
#define SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KEYTAB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::security::auth::kerberos { class KeyTab; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::security::auth::kerberos::KeyTab>
{
	static constexpr fixed_string class_name = "javax/security/auth/kerberos/KeyTab";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KEYTAB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KEYTAB)
#define SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KEYTAB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/security/auth/kerberos/KerberosKey.h>
#include <scapix/java_api/javax/security/auth/kerberos/KerberosPrincipal.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::security::auth::kerberos::KeyTab : public jni::object_base<"javax/security/auth/kerberos/KeyTab",
	java::lang::Object>
{
public:

	static jni::ref<javax::security::auth::kerberos::KeyTab> getInstance(jni::ref<java::io::File> p1) { return call_static_method<"getInstance", jni::ref<javax::security::auth::kerberos::KeyTab>>(p1); }
	static jni::ref<javax::security::auth::kerberos::KeyTab> getUnboundInstance(jni::ref<java::io::File> p1) { return call_static_method<"getUnboundInstance", jni::ref<javax::security::auth::kerberos::KeyTab>>(p1); }
	static jni::ref<javax::security::auth::kerberos::KeyTab> getInstance(jni::ref<javax::security::auth::kerberos::KerberosPrincipal> p1, jni::ref<java::io::File> p2) { return call_static_method<"getInstance", jni::ref<javax::security::auth::kerberos::KeyTab>>(p1, p2); }
	static jni::ref<javax::security::auth::kerberos::KeyTab> getInstance() { return call_static_method<"getInstance", jni::ref<javax::security::auth::kerberos::KeyTab>>(); }
	static jni::ref<javax::security::auth::kerberos::KeyTab> getUnboundInstance() { return call_static_method<"getUnboundInstance", jni::ref<javax::security::auth::kerberos::KeyTab>>(); }
	static jni::ref<javax::security::auth::kerberos::KeyTab> getInstance(jni::ref<javax::security::auth::kerberos::KerberosPrincipal> p1) { return call_static_method<"getInstance", jni::ref<javax::security::auth::kerberos::KeyTab>>(p1); }
	jni::ref<jni::array<javax::security::auth::kerberos::KerberosKey>> getKeys(jni::ref<javax::security::auth::kerberos::KerberosPrincipal> p1) { return call_method<"getKeys", jni::ref<jni::array<javax::security::auth::kerberos::KerberosKey>>>(p1); }
	jboolean exists() { return call_method<"exists", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<javax::security::auth::kerberos::KerberosPrincipal> getPrincipal() { return call_method<"getPrincipal", jni::ref<javax::security::auth::kerberos::KerberosPrincipal>>(); }
	jboolean isBound() { return call_method<"isBound", jboolean>(); }

protected:

	KeyTab(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KEYTAB
