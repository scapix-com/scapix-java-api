// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/security/auth/Destroyable.h>
#include <scapix/java_api/javax/security/auth/Refreshable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KERBEROSTICKET_FWD
#define SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KERBEROSTICKET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::security::auth::kerberos { class KerberosTicket; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::security::auth::kerberos::KerberosTicket>
{
	static constexpr fixed_string class_name = "javax/security/auth/kerberos/KerberosTicket";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::security::auth::Destroyable, scapix::java_api::javax::security::auth::Refreshable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KERBEROSTICKET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KERBEROSTICKET)
#define SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KERBEROSTICKET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/javax/crypto/SecretKey.h>
#include <scapix/java_api/javax/security/auth/kerberos/KerberosPrincipal.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::security::auth::kerberos::KerberosTicket : public jni::object_base<"javax/security/auth/kerberos/KerberosTicket",
	java::lang::Object,
	javax::security::auth::Destroyable,
	javax::security::auth::Refreshable,
	java::io::Serializable>
{
public:

	static jni::ref<javax::security::auth::kerberos::KerberosTicket> new_object(jni::ref<jni::array<jbyte>> p1, jni::ref<javax::security::auth::kerberos::KerberosPrincipal> p2, jni::ref<javax::security::auth::kerberos::KerberosPrincipal> p3, jni::ref<jni::array<jbyte>> p4, jint p5, jni::ref<jni::array<jboolean>> p6, jni::ref<java::util::Date> p7, jni::ref<java::util::Date> p8, jni::ref<java::util::Date> p9, jni::ref<java::util::Date> p10, jni::ref<jni::array<java::net::InetAddress>> p11) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	jni::ref<javax::security::auth::kerberos::KerberosPrincipal> getClient() { return call_method<"getClient", jni::ref<javax::security::auth::kerberos::KerberosPrincipal>>(); }
	jni::ref<javax::security::auth::kerberos::KerberosPrincipal> getServer() { return call_method<"getServer", jni::ref<javax::security::auth::kerberos::KerberosPrincipal>>(); }
	jni::ref<javax::crypto::SecretKey> getSessionKey() { return call_method<"getSessionKey", jni::ref<javax::crypto::SecretKey>>(); }
	jint getSessionKeyType() { return call_method<"getSessionKeyType", jint>(); }
	jboolean isForwardable() { return call_method<"isForwardable", jboolean>(); }
	jboolean isForwarded() { return call_method<"isForwarded", jboolean>(); }
	jboolean isProxiable() { return call_method<"isProxiable", jboolean>(); }
	jboolean isProxy() { return call_method<"isProxy", jboolean>(); }
	jboolean isPostdated() { return call_method<"isPostdated", jboolean>(); }
	jboolean isRenewable() { return call_method<"isRenewable", jboolean>(); }
	jboolean isInitial() { return call_method<"isInitial", jboolean>(); }
	jni::ref<jni::array<jboolean>> getFlags() { return call_method<"getFlags", jni::ref<jni::array<jboolean>>>(); }
	jni::ref<java::util::Date> getAuthTime() { return call_method<"getAuthTime", jni::ref<java::util::Date>>(); }
	jni::ref<java::util::Date> getStartTime() { return call_method<"getStartTime", jni::ref<java::util::Date>>(); }
	jni::ref<java::util::Date> getEndTime() { return call_method<"getEndTime", jni::ref<java::util::Date>>(); }
	jni::ref<java::util::Date> getRenewTill() { return call_method<"getRenewTill", jni::ref<java::util::Date>>(); }
	jni::ref<jni::array<java::net::InetAddress>> getClientAddresses() { return call_method<"getClientAddresses", jni::ref<jni::array<java::net::InetAddress>>>(); }
	jni::ref<jni::array<jbyte>> getEncoded() { return call_method<"getEncoded", jni::ref<jni::array<jbyte>>>(); }
	jboolean isCurrent() { return call_method<"isCurrent", jboolean>(); }
	void refresh() { return call_method<"refresh", void>(); }
	void destroy() { return call_method<"destroy", void>(); }
	jboolean isDestroyed() { return call_method<"isDestroyed", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	KerberosTicket(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SECURITY_AUTH_KERBEROS_KERBEROSTICKET
