// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/datatransfer/DataFlavor.h>

#ifndef SCAPIX_JAVA_API_JAVAX_ACTIVATION_ACTIVATIONDATAFLAVOR_FWD
#define SCAPIX_JAVA_API_JAVAX_ACTIVATION_ACTIVATIONDATAFLAVOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::activation { class ActivationDataFlavor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::activation::ActivationDataFlavor>
{
	static constexpr fixed_string class_name = "javax/activation/ActivationDataFlavor";
	using base_classes = std::tuple<scapix::java_api::java::awt::datatransfer::DataFlavor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_ACTIVATION_ACTIVATIONDATAFLAVOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_ACTIVATION_ACTIVATIONDATAFLAVOR)
#define SCAPIX_JAVA_API_JAVAX_ACTIVATION_ACTIVATIONDATAFLAVOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::activation::ActivationDataFlavor : public jni::object_base<"javax/activation/ActivationDataFlavor",
	java::awt::datatransfer::DataFlavor>
{
public:

	static jni::ref<javax::activation::ActivationDataFlavor> new_object(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::activation::ActivationDataFlavor> new_object(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::activation::ActivationDataFlavor> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::String> getMimeType() { return call_method<"getMimeType", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Class> getRepresentationClass() { return call_method<"getRepresentationClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::String> getHumanPresentableName() { return call_method<"getHumanPresentableName", jni::ref<java::lang::String>>(); }
	void setHumanPresentableName(jni::ref<java::lang::String> p1) { return call_method<"setHumanPresentableName", void>(p1); }
	jboolean equals(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_method<"equals", jboolean>(p1); }
	jboolean isMimeTypeEqual(jni::ref<java::lang::String> p1) { return call_method<"isMimeTypeEqual", jboolean>(p1); }

protected:

	ActivationDataFlavor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_ACTIVATION_ACTIVATIONDATAFLAVOR
