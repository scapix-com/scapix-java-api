// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>
#include <scapix/java_api/java/io/Flushable.h>
#include <scapix/java_api/javax/tools/OptionChecker.h>

#ifndef SCAPIX_JAVA_API_JAVAX_TOOLS_JAVAFILEMANAGER_FWD
#define SCAPIX_JAVA_API_JAVAX_TOOLS_JAVAFILEMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::tools { class JavaFileManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::tools::JavaFileManager>
{
	static constexpr fixed_string class_name = "javax/tools/JavaFileManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable, scapix::java_api::java::io::Flushable, scapix::java_api::javax::tools::OptionChecker>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_TOOLS_JAVAFILEMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_TOOLS_JAVAFILEMANAGER)
#define SCAPIX_JAVA_API_JAVAX_TOOLS_JAVAFILEMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/tools/FileObject.h>
#include <scapix/java_api/javax/tools/JavaFileManager_Location.h>
#include <scapix/java_api/javax/tools/JavaFileObject.h>
#include <scapix/java_api/javax/tools/JavaFileObject_Kind.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::tools::JavaFileManager : public jni::object_base<"javax/tools/JavaFileManager",
	java::lang::Object,
	java::io::Closeable,
	java::io::Flushable,
	javax::tools::OptionChecker>
{
public:

	using Location = JavaFileManager_Location;

	jni::ref<java::lang::ClassLoader> getClassLoader(jni::ref<javax::tools::JavaFileManager_Location> p1) { return call_method<"getClassLoader", jni::ref<java::lang::ClassLoader>>(p1); }
	jni::ref<java::lang::Iterable> list(jni::ref<javax::tools::JavaFileManager_Location> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Set> p3, jboolean p4) { return call_method<"list", jni::ref<java::lang::Iterable>>(p1, p2, p3, p4); }
	jni::ref<java::lang::String> inferBinaryName(jni::ref<javax::tools::JavaFileManager_Location> p1, jni::ref<javax::tools::JavaFileObject> p2) { return call_method<"inferBinaryName", jni::ref<java::lang::String>>(p1, p2); }
	jboolean isSameFile(jni::ref<javax::tools::FileObject> p1, jni::ref<javax::tools::FileObject> p2) { return call_method<"isSameFile", jboolean>(p1, p2); }
	jboolean handleOption(jni::ref<java::lang::String> p1, jni::ref<java::util::Iterator> p2) { return call_method<"handleOption", jboolean>(p1, p2); }
	jboolean hasLocation(jni::ref<javax::tools::JavaFileManager_Location> p1) { return call_method<"hasLocation", jboolean>(p1); }
	jni::ref<javax::tools::JavaFileObject> getJavaFileForInput(jni::ref<javax::tools::JavaFileManager_Location> p1, jni::ref<java::lang::String> p2, jni::ref<javax::tools::JavaFileObject_Kind> p3) { return call_method<"getJavaFileForInput", jni::ref<javax::tools::JavaFileObject>>(p1, p2, p3); }
	jni::ref<javax::tools::JavaFileObject> getJavaFileForOutput(jni::ref<javax::tools::JavaFileManager_Location> p1, jni::ref<java::lang::String> p2, jni::ref<javax::tools::JavaFileObject_Kind> p3, jni::ref<javax::tools::FileObject> p4) { return call_method<"getJavaFileForOutput", jni::ref<javax::tools::JavaFileObject>>(p1, p2, p3, p4); }
	jni::ref<javax::tools::FileObject> getFileForInput(jni::ref<javax::tools::JavaFileManager_Location> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getFileForInput", jni::ref<javax::tools::FileObject>>(p1, p2, p3); }
	jni::ref<javax::tools::FileObject> getFileForOutput(jni::ref<javax::tools::JavaFileManager_Location> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<javax::tools::FileObject> p4) { return call_method<"getFileForOutput", jni::ref<javax::tools::FileObject>>(p1, p2, p3, p4); }
	void flush() { return call_method<"flush", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	JavaFileManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_TOOLS_JAVAFILEMANAGER
