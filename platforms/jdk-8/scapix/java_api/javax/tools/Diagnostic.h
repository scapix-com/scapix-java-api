// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_TOOLS_DIAGNOSTIC_FWD
#define SCAPIX_JAVA_API_JAVAX_TOOLS_DIAGNOSTIC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::tools { class Diagnostic; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::tools::Diagnostic>
{
	static constexpr fixed_string class_name = "javax/tools/Diagnostic";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_TOOLS_DIAGNOSTIC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_TOOLS_DIAGNOSTIC)
#define SCAPIX_JAVA_API_JAVAX_TOOLS_DIAGNOSTIC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/javax/tools/Diagnostic_Kind.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::tools::Diagnostic : public jni::object_base<"javax/tools/Diagnostic",
	java::lang::Object>
{
public:

	using Kind = Diagnostic_Kind;

	static jlong NOPOS() { return get_static_field<"NOPOS", jlong>(); }

	jni::ref<javax::tools::Diagnostic_Kind> getKind() { return call_method<"getKind", jni::ref<javax::tools::Diagnostic_Kind>>(); }
	jni::ref<java::lang::Object> getSource() { return call_method<"getSource", jni::ref<java::lang::Object>>(); }
	jlong getPosition() { return call_method<"getPosition", jlong>(); }
	jlong getStartPosition() { return call_method<"getStartPosition", jlong>(); }
	jlong getEndPosition() { return call_method<"getEndPosition", jlong>(); }
	jlong getLineNumber() { return call_method<"getLineNumber", jlong>(); }
	jlong getColumnNumber() { return call_method<"getColumnNumber", jlong>(); }
	jni::ref<java::lang::String> getCode() { return call_method<"getCode", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getMessage(jni::ref<java::util::Locale> p1) { return call_method<"getMessage", jni::ref<java::lang::String>>(p1); }

protected:

	Diagnostic(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_TOOLS_DIAGNOSTIC
