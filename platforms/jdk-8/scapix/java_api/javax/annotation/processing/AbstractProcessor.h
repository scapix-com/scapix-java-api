// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/annotation/processing/Processor.h>

#ifndef SCAPIX_JAVA_API_JAVAX_ANNOTATION_PROCESSING_ABSTRACTPROCESSOR_FWD
#define SCAPIX_JAVA_API_JAVAX_ANNOTATION_PROCESSING_ABSTRACTPROCESSOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::annotation::processing { class AbstractProcessor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::annotation::processing::AbstractProcessor>
{
	static constexpr fixed_string class_name = "javax/annotation/processing/AbstractProcessor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::annotation::processing::Processor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_ANNOTATION_PROCESSING_ABSTRACTPROCESSOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_ANNOTATION_PROCESSING_ABSTRACTPROCESSOR)
#define SCAPIX_JAVA_API_JAVAX_ANNOTATION_PROCESSING_ABSTRACTPROCESSOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Iterable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/annotation/processing/ProcessingEnvironment.h>
#include <scapix/java_api/javax/annotation/processing/RoundEnvironment.h>
#include <scapix/java_api/javax/lang/model/SourceVersion.h>
#include <scapix/java_api/javax/lang/model/element/AnnotationMirror.h>
#include <scapix/java_api/javax/lang/model/element/Element.h>
#include <scapix/java_api/javax/lang/model/element/ExecutableElement.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::annotation::processing::AbstractProcessor : public jni::object_base<"javax/annotation/processing/AbstractProcessor",
	java::lang::Object,
	javax::annotation::processing::Processor>
{
public:

	jni::ref<java::util::Set> getSupportedOptions() { return call_method<"getSupportedOptions", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> getSupportedAnnotationTypes() { return call_method<"getSupportedAnnotationTypes", jni::ref<java::util::Set>>(); }
	jni::ref<javax::lang::model::SourceVersion> getSupportedSourceVersion() { return call_method<"getSupportedSourceVersion", jni::ref<javax::lang::model::SourceVersion>>(); }
	void init(jni::ref<javax::annotation::processing::ProcessingEnvironment> p1) { return call_method<"init", void>(p1); }
	jboolean process(jni::ref<java::util::Set> p1, jni::ref<javax::annotation::processing::RoundEnvironment> p2) { return call_method<"process", jboolean>(p1, p2); }
	jni::ref<java::lang::Iterable> getCompletions(jni::ref<javax::lang::model::element::Element> p1, jni::ref<javax::lang::model::element::AnnotationMirror> p2, jni::ref<javax::lang::model::element::ExecutableElement> p3, jni::ref<java::lang::String> p4) { return call_method<"getCompletions", jni::ref<java::lang::Iterable>>(p1, p2, p3, p4); }

protected:

	AbstractProcessor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_ANNOTATION_PROCESSING_ABSTRACTPROCESSOR
