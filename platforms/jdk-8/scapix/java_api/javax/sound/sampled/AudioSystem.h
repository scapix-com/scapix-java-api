// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOSYSTEM_FWD
#define SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOSYSTEM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sound::sampled { class AudioSystem; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sound::sampled::AudioSystem>
{
	static constexpr fixed_string class_name = "javax/sound/sampled/AudioSystem";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOSYSTEM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOSYSTEM)
#define SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOSYSTEM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/javax/sound/sampled/AudioFileFormat.h>
#include <scapix/java_api/javax/sound/sampled/AudioFileFormat_Type.h>
#include <scapix/java_api/javax/sound/sampled/AudioFormat.h>
#include <scapix/java_api/javax/sound/sampled/AudioFormat_Encoding.h>
#include <scapix/java_api/javax/sound/sampled/AudioInputStream.h>
#include <scapix/java_api/javax/sound/sampled/Clip.h>
#include <scapix/java_api/javax/sound/sampled/Line.h>
#include <scapix/java_api/javax/sound/sampled/Line_Info.h>
#include <scapix/java_api/javax/sound/sampled/Mixer.h>
#include <scapix/java_api/javax/sound/sampled/Mixer_Info.h>
#include <scapix/java_api/javax/sound/sampled/SourceDataLine.h>
#include <scapix/java_api/javax/sound/sampled/TargetDataLine.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sound::sampled::AudioSystem : public jni::object_base<"javax/sound/sampled/AudioSystem",
	java::lang::Object>
{
public:

	static jint NOT_SPECIFIED() { return get_static_field<"NOT_SPECIFIED", jint>(); }

	static jni::ref<jni::array<javax::sound::sampled::Mixer_Info>> getMixerInfo() { return call_static_method<"getMixerInfo", jni::ref<jni::array<javax::sound::sampled::Mixer_Info>>>(); }
	static jni::ref<javax::sound::sampled::Mixer> getMixer(jni::ref<javax::sound::sampled::Mixer_Info> p1) { return call_static_method<"getMixer", jni::ref<javax::sound::sampled::Mixer>>(p1); }
	static jni::ref<jni::array<javax::sound::sampled::Line_Info>> getSourceLineInfo(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_static_method<"getSourceLineInfo", jni::ref<jni::array<javax::sound::sampled::Line_Info>>>(p1); }
	static jni::ref<jni::array<javax::sound::sampled::Line_Info>> getTargetLineInfo(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_static_method<"getTargetLineInfo", jni::ref<jni::array<javax::sound::sampled::Line_Info>>>(p1); }
	static jboolean isLineSupported(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_static_method<"isLineSupported", jboolean>(p1); }
	static jni::ref<javax::sound::sampled::Line> getLine(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_static_method<"getLine", jni::ref<javax::sound::sampled::Line>>(p1); }
	static jni::ref<javax::sound::sampled::Clip> getClip() { return call_static_method<"getClip", jni::ref<javax::sound::sampled::Clip>>(); }
	static jni::ref<javax::sound::sampled::Clip> getClip(jni::ref<javax::sound::sampled::Mixer_Info> p1) { return call_static_method<"getClip", jni::ref<javax::sound::sampled::Clip>>(p1); }
	static jni::ref<javax::sound::sampled::SourceDataLine> getSourceDataLine(jni::ref<javax::sound::sampled::AudioFormat> p1) { return call_static_method<"getSourceDataLine", jni::ref<javax::sound::sampled::SourceDataLine>>(p1); }
	static jni::ref<javax::sound::sampled::SourceDataLine> getSourceDataLine(jni::ref<javax::sound::sampled::AudioFormat> p1, jni::ref<javax::sound::sampled::Mixer_Info> p2) { return call_static_method<"getSourceDataLine", jni::ref<javax::sound::sampled::SourceDataLine>>(p1, p2); }
	static jni::ref<javax::sound::sampled::TargetDataLine> getTargetDataLine(jni::ref<javax::sound::sampled::AudioFormat> p1) { return call_static_method<"getTargetDataLine", jni::ref<javax::sound::sampled::TargetDataLine>>(p1); }
	static jni::ref<javax::sound::sampled::TargetDataLine> getTargetDataLine(jni::ref<javax::sound::sampled::AudioFormat> p1, jni::ref<javax::sound::sampled::Mixer_Info> p2) { return call_static_method<"getTargetDataLine", jni::ref<javax::sound::sampled::TargetDataLine>>(p1, p2); }
	static jni::ref<jni::array<javax::sound::sampled::AudioFormat_Encoding>> getTargetEncodings(jni::ref<javax::sound::sampled::AudioFormat_Encoding> p1) { return call_static_method<"getTargetEncodings", jni::ref<jni::array<javax::sound::sampled::AudioFormat_Encoding>>>(p1); }
	static jni::ref<jni::array<javax::sound::sampled::AudioFormat_Encoding>> getTargetEncodings(jni::ref<javax::sound::sampled::AudioFormat> p1) { return call_static_method<"getTargetEncodings", jni::ref<jni::array<javax::sound::sampled::AudioFormat_Encoding>>>(p1); }
	static jboolean isConversionSupported(jni::ref<javax::sound::sampled::AudioFormat_Encoding> p1, jni::ref<javax::sound::sampled::AudioFormat> p2) { return call_static_method<"isConversionSupported", jboolean>(p1, p2); }
	static jni::ref<javax::sound::sampled::AudioInputStream> getAudioInputStream(jni::ref<javax::sound::sampled::AudioFormat_Encoding> p1, jni::ref<javax::sound::sampled::AudioInputStream> p2) { return call_static_method<"getAudioInputStream", jni::ref<javax::sound::sampled::AudioInputStream>>(p1, p2); }
	static jni::ref<jni::array<javax::sound::sampled::AudioFormat>> getTargetFormats(jni::ref<javax::sound::sampled::AudioFormat_Encoding> p1, jni::ref<javax::sound::sampled::AudioFormat> p2) { return call_static_method<"getTargetFormats", jni::ref<jni::array<javax::sound::sampled::AudioFormat>>>(p1, p2); }
	static jboolean isConversionSupported(jni::ref<javax::sound::sampled::AudioFormat> p1, jni::ref<javax::sound::sampled::AudioFormat> p2) { return call_static_method<"isConversionSupported", jboolean>(p1, p2); }
	static jni::ref<javax::sound::sampled::AudioInputStream> getAudioInputStream(jni::ref<javax::sound::sampled::AudioFormat> p1, jni::ref<javax::sound::sampled::AudioInputStream> p2) { return call_static_method<"getAudioInputStream", jni::ref<javax::sound::sampled::AudioInputStream>>(p1, p2); }
	static jni::ref<javax::sound::sampled::AudioFileFormat> getAudioFileFormat(jni::ref<java::io::InputStream> p1) { return call_static_method<"getAudioFileFormat", jni::ref<javax::sound::sampled::AudioFileFormat>>(p1); }
	static jni::ref<javax::sound::sampled::AudioFileFormat> getAudioFileFormat(jni::ref<java::net::URL> p1) { return call_static_method<"getAudioFileFormat", jni::ref<javax::sound::sampled::AudioFileFormat>>(p1); }
	static jni::ref<javax::sound::sampled::AudioFileFormat> getAudioFileFormat(jni::ref<java::io::File> p1) { return call_static_method<"getAudioFileFormat", jni::ref<javax::sound::sampled::AudioFileFormat>>(p1); }
	static jni::ref<javax::sound::sampled::AudioInputStream> getAudioInputStream(jni::ref<java::io::InputStream> p1) { return call_static_method<"getAudioInputStream", jni::ref<javax::sound::sampled::AudioInputStream>>(p1); }
	static jni::ref<javax::sound::sampled::AudioInputStream> getAudioInputStream(jni::ref<java::net::URL> p1) { return call_static_method<"getAudioInputStream", jni::ref<javax::sound::sampled::AudioInputStream>>(p1); }
	static jni::ref<javax::sound::sampled::AudioInputStream> getAudioInputStream(jni::ref<java::io::File> p1) { return call_static_method<"getAudioInputStream", jni::ref<javax::sound::sampled::AudioInputStream>>(p1); }
	static jni::ref<jni::array<javax::sound::sampled::AudioFileFormat_Type>> getAudioFileTypes() { return call_static_method<"getAudioFileTypes", jni::ref<jni::array<javax::sound::sampled::AudioFileFormat_Type>>>(); }
	static jboolean isFileTypeSupported(jni::ref<javax::sound::sampled::AudioFileFormat_Type> p1) { return call_static_method<"isFileTypeSupported", jboolean>(p1); }
	static jni::ref<jni::array<javax::sound::sampled::AudioFileFormat_Type>> getAudioFileTypes(jni::ref<javax::sound::sampled::AudioInputStream> p1) { return call_static_method<"getAudioFileTypes", jni::ref<jni::array<javax::sound::sampled::AudioFileFormat_Type>>>(p1); }
	static jboolean isFileTypeSupported(jni::ref<javax::sound::sampled::AudioFileFormat_Type> p1, jni::ref<javax::sound::sampled::AudioInputStream> p2) { return call_static_method<"isFileTypeSupported", jboolean>(p1, p2); }
	static jint write(jni::ref<javax::sound::sampled::AudioInputStream> p1, jni::ref<javax::sound::sampled::AudioFileFormat_Type> p2, jni::ref<java::io::OutputStream> p3) { return call_static_method<"write", jint>(p1, p2, p3); }
	static jint write(jni::ref<javax::sound::sampled::AudioInputStream> p1, jni::ref<javax::sound::sampled::AudioFileFormat_Type> p2, jni::ref<java::io::File> p3) { return call_static_method<"write", jint>(p1, p2, p3); }

protected:

	AudioSystem(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOSYSTEM
