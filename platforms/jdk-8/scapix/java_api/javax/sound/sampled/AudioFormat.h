// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOFORMAT_FWD
#define SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sound::sampled { class AudioFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sound::sampled::AudioFormat>
{
	static constexpr fixed_string class_name = "javax/sound/sampled/AudioFormat";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOFORMAT)
#define SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/sound/sampled/AudioFormat_Encoding.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sound::sampled::AudioFormat : public jni::object_base<"javax/sound/sampled/AudioFormat",
	java::lang::Object>
{
public:

	using Encoding = AudioFormat_Encoding;

	static jni::ref<javax::sound::sampled::AudioFormat> new_object(jni::ref<javax::sound::sampled::AudioFormat_Encoding> p1, jfloat p2, jint p3, jint p4, jint p5, jfloat p6, jboolean p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<javax::sound::sampled::AudioFormat> new_object(jni::ref<javax::sound::sampled::AudioFormat_Encoding> p1, jfloat p2, jint p3, jint p4, jint p5, jfloat p6, jboolean p7, jni::ref<java::util::Map> p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jni::ref<javax::sound::sampled::AudioFormat> new_object(jfloat p1, jint p2, jint p3, jboolean p4, jboolean p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	jni::ref<javax::sound::sampled::AudioFormat_Encoding> getEncoding() { return call_method<"getEncoding", jni::ref<javax::sound::sampled::AudioFormat_Encoding>>(); }
	jfloat getSampleRate() { return call_method<"getSampleRate", jfloat>(); }
	jint getSampleSizeInBits() { return call_method<"getSampleSizeInBits", jint>(); }
	jint getChannels() { return call_method<"getChannels", jint>(); }
	jint getFrameSize() { return call_method<"getFrameSize", jint>(); }
	jfloat getFrameRate() { return call_method<"getFrameRate", jfloat>(); }
	jboolean isBigEndian() { return call_method<"isBigEndian", jboolean>(); }
	jni::ref<java::util::Map> properties() { return call_method<"properties", jni::ref<java::util::Map>>(); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	jboolean matches(jni::ref<javax::sound::sampled::AudioFormat> p1) { return call_method<"matches", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AudioFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_AUDIOFORMAT
