// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/sound/sampled/Line.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_MIXER_FWD
#define SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_MIXER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sound::sampled { class Mixer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sound::sampled::Mixer>
{
	static constexpr fixed_string class_name = "javax/sound/sampled/Mixer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::sound::sampled::Line>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_MIXER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_MIXER)
#define SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_MIXER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/javax/sound/sampled/Line_Info.h>
#include <scapix/java_api/javax/sound/sampled/Mixer_Info.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sound::sampled::Mixer : public jni::object_base<"javax/sound/sampled/Mixer",
	java::lang::Object,
	javax::sound::sampled::Line>
{
public:

	using Info = Mixer_Info;

	jni::ref<javax::sound::sampled::Mixer_Info> getMixerInfo() { return call_method<"getMixerInfo", jni::ref<javax::sound::sampled::Mixer_Info>>(); }
	jni::ref<jni::array<javax::sound::sampled::Line_Info>> getSourceLineInfo() { return call_method<"getSourceLineInfo", jni::ref<jni::array<javax::sound::sampled::Line_Info>>>(); }
	jni::ref<jni::array<javax::sound::sampled::Line_Info>> getTargetLineInfo() { return call_method<"getTargetLineInfo", jni::ref<jni::array<javax::sound::sampled::Line_Info>>>(); }
	jni::ref<jni::array<javax::sound::sampled::Line_Info>> getSourceLineInfo(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_method<"getSourceLineInfo", jni::ref<jni::array<javax::sound::sampled::Line_Info>>>(p1); }
	jni::ref<jni::array<javax::sound::sampled::Line_Info>> getTargetLineInfo(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_method<"getTargetLineInfo", jni::ref<jni::array<javax::sound::sampled::Line_Info>>>(p1); }
	jboolean isLineSupported(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_method<"isLineSupported", jboolean>(p1); }
	jni::ref<javax::sound::sampled::Line> getLine(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_method<"getLine", jni::ref<javax::sound::sampled::Line>>(p1); }
	jint getMaxLines(jni::ref<javax::sound::sampled::Line_Info> p1) { return call_method<"getMaxLines", jint>(p1); }
	jni::ref<jni::array<javax::sound::sampled::Line>> getSourceLines() { return call_method<"getSourceLines", jni::ref<jni::array<javax::sound::sampled::Line>>>(); }
	jni::ref<jni::array<javax::sound::sampled::Line>> getTargetLines() { return call_method<"getTargetLines", jni::ref<jni::array<javax::sound::sampled::Line>>>(); }
	void synchronize(jni::ref<jni::array<javax::sound::sampled::Line>> p1, jboolean p2) { return call_method<"synchronize", void>(p1, p2); }
	void unsynchronize(jni::ref<jni::array<javax::sound::sampled::Line>> p1) { return call_method<"unsynchronize", void>(p1); }
	jboolean isSynchronizationSupported(jni::ref<jni::array<javax::sound::sampled::Line>> p1, jboolean p2) { return call_method<"isSynchronizationSupported", jboolean>(p1, p2); }

protected:

	Mixer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_MIXER
