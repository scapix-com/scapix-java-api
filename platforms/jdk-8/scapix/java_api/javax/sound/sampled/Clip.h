// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/sound/sampled/DataLine.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_CLIP_FWD
#define SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_CLIP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sound::sampled { class Clip; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sound::sampled::Clip>
{
	static constexpr fixed_string class_name = "javax/sound/sampled/Clip";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::sound::sampled::DataLine>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_CLIP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_CLIP)
#define SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_CLIP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/javax/sound/sampled/AudioFormat.h>
#include <scapix/java_api/javax/sound/sampled/AudioInputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sound::sampled::Clip : public jni::object_base<"javax/sound/sampled/Clip",
	java::lang::Object,
	javax::sound::sampled::DataLine>
{
public:

	static jint LOOP_CONTINUOUSLY() { return get_static_field<"LOOP_CONTINUOUSLY", jint>(); }

	void open(jni::ref<javax::sound::sampled::AudioFormat> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jint p4) { return call_method<"open", void>(p1, p2, p3, p4); }
	void open(jni::ref<javax::sound::sampled::AudioInputStream> p1) { return call_method<"open", void>(p1); }
	jint getFrameLength() { return call_method<"getFrameLength", jint>(); }
	jlong getMicrosecondLength() { return call_method<"getMicrosecondLength", jlong>(); }
	void setFramePosition(jint p1) { return call_method<"setFramePosition", void>(p1); }
	void setMicrosecondPosition(jlong p1) { return call_method<"setMicrosecondPosition", void>(p1); }
	void setLoopPoints(jint p1, jint p2) { return call_method<"setLoopPoints", void>(p1, p2); }
	void loop(jint p1) { return call_method<"loop", void>(p1); }

protected:

	Clip(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_SAMPLED_CLIP
