// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_SEQUENCE_FWD
#define SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_SEQUENCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sound::midi { class Sequence; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sound::midi::Sequence>
{
	static constexpr fixed_string class_name = "javax/sound/midi/Sequence";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_SEQUENCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_SEQUENCE)
#define SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_SEQUENCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/javax/sound/midi/Patch.h>
#include <scapix/java_api/javax/sound/midi/Track.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sound::midi::Sequence : public jni::object_base<"javax/sound/midi/Sequence",
	java::lang::Object>
{
public:

	static jfloat PPQ() { return get_static_field<"PPQ", jfloat>(); }
	static jfloat SMPTE_24() { return get_static_field<"SMPTE_24", jfloat>(); }
	static jfloat SMPTE_25() { return get_static_field<"SMPTE_25", jfloat>(); }
	static jfloat SMPTE_30DROP() { return get_static_field<"SMPTE_30DROP", jfloat>(); }
	static jfloat SMPTE_30() { return get_static_field<"SMPTE_30", jfloat>(); }

	static jni::ref<javax::sound::midi::Sequence> new_object(jfloat p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::sound::midi::Sequence> new_object(jfloat p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	jfloat getDivisionType() { return call_method<"getDivisionType", jfloat>(); }
	jint getResolution() { return call_method<"getResolution", jint>(); }
	jni::ref<javax::sound::midi::Track> createTrack() { return call_method<"createTrack", jni::ref<javax::sound::midi::Track>>(); }
	jboolean deleteTrack(jni::ref<javax::sound::midi::Track> p1) { return call_method<"deleteTrack", jboolean>(p1); }
	jni::ref<jni::array<javax::sound::midi::Track>> getTracks() { return call_method<"getTracks", jni::ref<jni::array<javax::sound::midi::Track>>>(); }
	jlong getMicrosecondLength() { return call_method<"getMicrosecondLength", jlong>(); }
	jlong getTickLength() { return call_method<"getTickLength", jlong>(); }
	jni::ref<jni::array<javax::sound::midi::Patch>> getPatchList() { return call_method<"getPatchList", jni::ref<jni::array<javax::sound::midi::Patch>>>(); }

protected:

	Sequence(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_SEQUENCE
