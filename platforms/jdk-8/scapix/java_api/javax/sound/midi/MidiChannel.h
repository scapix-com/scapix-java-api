// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDICHANNEL_FWD
#define SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDICHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sound::midi { class MidiChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sound::midi::MidiChannel>
{
	static constexpr fixed_string class_name = "javax/sound/midi/MidiChannel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDICHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDICHANNEL)
#define SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDICHANNEL

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sound::midi::MidiChannel : public jni::object_base<"javax/sound/midi/MidiChannel",
	java::lang::Object>
{
public:

	void noteOn(jint p1, jint p2) { return call_method<"noteOn", void>(p1, p2); }
	void noteOff(jint p1, jint p2) { return call_method<"noteOff", void>(p1, p2); }
	void noteOff(jint p1) { return call_method<"noteOff", void>(p1); }
	void setPolyPressure(jint p1, jint p2) { return call_method<"setPolyPressure", void>(p1, p2); }
	jint getPolyPressure(jint p1) { return call_method<"getPolyPressure", jint>(p1); }
	void setChannelPressure(jint p1) { return call_method<"setChannelPressure", void>(p1); }
	jint getChannelPressure() { return call_method<"getChannelPressure", jint>(); }
	void controlChange(jint p1, jint p2) { return call_method<"controlChange", void>(p1, p2); }
	jint getController(jint p1) { return call_method<"getController", jint>(p1); }
	void programChange(jint p1) { return call_method<"programChange", void>(p1); }
	void programChange(jint p1, jint p2) { return call_method<"programChange", void>(p1, p2); }
	jint getProgram() { return call_method<"getProgram", jint>(); }
	void setPitchBend(jint p1) { return call_method<"setPitchBend", void>(p1); }
	jint getPitchBend() { return call_method<"getPitchBend", jint>(); }
	void resetAllControllers() { return call_method<"resetAllControllers", void>(); }
	void allNotesOff() { return call_method<"allNotesOff", void>(); }
	void allSoundOff() { return call_method<"allSoundOff", void>(); }
	jboolean localControl(jboolean p1) { return call_method<"localControl", jboolean>(p1); }
	void setMono(jboolean p1) { return call_method<"setMono", void>(p1); }
	jboolean getMono() { return call_method<"getMono", jboolean>(); }
	void setOmni(jboolean p1) { return call_method<"setOmni", void>(p1); }
	jboolean getOmni() { return call_method<"getOmni", jboolean>(); }
	void setMute(jboolean p1) { return call_method<"setMute", void>(p1); }
	jboolean getMute() { return call_method<"getMute", jboolean>(); }
	void setSolo(jboolean p1) { return call_method<"setSolo", void>(p1); }
	jboolean getSolo() { return call_method<"getSolo", jboolean>(); }

protected:

	MidiChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDICHANNEL
