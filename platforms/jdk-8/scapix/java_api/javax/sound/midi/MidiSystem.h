// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDISYSTEM_FWD
#define SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDISYSTEM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sound::midi { class MidiSystem; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sound::midi::MidiSystem>
{
	static constexpr fixed_string class_name = "javax/sound/midi/MidiSystem";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDISYSTEM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDISYSTEM)
#define SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDISYSTEM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/javax/sound/midi/MidiDevice.h>
#include <scapix/java_api/javax/sound/midi/MidiDevice_Info.h>
#include <scapix/java_api/javax/sound/midi/MidiFileFormat.h>
#include <scapix/java_api/javax/sound/midi/Receiver.h>
#include <scapix/java_api/javax/sound/midi/Sequence.h>
#include <scapix/java_api/javax/sound/midi/Sequencer.h>
#include <scapix/java_api/javax/sound/midi/Soundbank.h>
#include <scapix/java_api/javax/sound/midi/Synthesizer.h>
#include <scapix/java_api/javax/sound/midi/Transmitter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sound::midi::MidiSystem : public jni::object_base<"javax/sound/midi/MidiSystem",
	java::lang::Object>
{
public:

	static jni::ref<jni::array<javax::sound::midi::MidiDevice_Info>> getMidiDeviceInfo() { return call_static_method<"getMidiDeviceInfo", jni::ref<jni::array<javax::sound::midi::MidiDevice_Info>>>(); }
	static jni::ref<javax::sound::midi::MidiDevice> getMidiDevice(jni::ref<javax::sound::midi::MidiDevice_Info> p1) { return call_static_method<"getMidiDevice", jni::ref<javax::sound::midi::MidiDevice>>(p1); }
	static jni::ref<javax::sound::midi::Receiver> getReceiver() { return call_static_method<"getReceiver", jni::ref<javax::sound::midi::Receiver>>(); }
	static jni::ref<javax::sound::midi::Transmitter> getTransmitter() { return call_static_method<"getTransmitter", jni::ref<javax::sound::midi::Transmitter>>(); }
	static jni::ref<javax::sound::midi::Synthesizer> getSynthesizer() { return call_static_method<"getSynthesizer", jni::ref<javax::sound::midi::Synthesizer>>(); }
	static jni::ref<javax::sound::midi::Sequencer> getSequencer() { return call_static_method<"getSequencer", jni::ref<javax::sound::midi::Sequencer>>(); }
	static jni::ref<javax::sound::midi::Sequencer> getSequencer(jboolean p1) { return call_static_method<"getSequencer", jni::ref<javax::sound::midi::Sequencer>>(p1); }
	static jni::ref<javax::sound::midi::Soundbank> getSoundbank(jni::ref<java::io::InputStream> p1) { return call_static_method<"getSoundbank", jni::ref<javax::sound::midi::Soundbank>>(p1); }
	static jni::ref<javax::sound::midi::Soundbank> getSoundbank(jni::ref<java::net::URL> p1) { return call_static_method<"getSoundbank", jni::ref<javax::sound::midi::Soundbank>>(p1); }
	static jni::ref<javax::sound::midi::Soundbank> getSoundbank(jni::ref<java::io::File> p1) { return call_static_method<"getSoundbank", jni::ref<javax::sound::midi::Soundbank>>(p1); }
	static jni::ref<javax::sound::midi::MidiFileFormat> getMidiFileFormat(jni::ref<java::io::InputStream> p1) { return call_static_method<"getMidiFileFormat", jni::ref<javax::sound::midi::MidiFileFormat>>(p1); }
	static jni::ref<javax::sound::midi::MidiFileFormat> getMidiFileFormat(jni::ref<java::net::URL> p1) { return call_static_method<"getMidiFileFormat", jni::ref<javax::sound::midi::MidiFileFormat>>(p1); }
	static jni::ref<javax::sound::midi::MidiFileFormat> getMidiFileFormat(jni::ref<java::io::File> p1) { return call_static_method<"getMidiFileFormat", jni::ref<javax::sound::midi::MidiFileFormat>>(p1); }
	static jni::ref<javax::sound::midi::Sequence> getSequence(jni::ref<java::io::InputStream> p1) { return call_static_method<"getSequence", jni::ref<javax::sound::midi::Sequence>>(p1); }
	static jni::ref<javax::sound::midi::Sequence> getSequence(jni::ref<java::net::URL> p1) { return call_static_method<"getSequence", jni::ref<javax::sound::midi::Sequence>>(p1); }
	static jni::ref<javax::sound::midi::Sequence> getSequence(jni::ref<java::io::File> p1) { return call_static_method<"getSequence", jni::ref<javax::sound::midi::Sequence>>(p1); }
	static jni::ref<jni::array<jint>> getMidiFileTypes() { return call_static_method<"getMidiFileTypes", jni::ref<jni::array<jint>>>(); }
	static jboolean isFileTypeSupported(jint p1) { return call_static_method<"isFileTypeSupported", jboolean>(p1); }
	static jni::ref<jni::array<jint>> getMidiFileTypes(jni::ref<javax::sound::midi::Sequence> p1) { return call_static_method<"getMidiFileTypes", jni::ref<jni::array<jint>>>(p1); }
	static jboolean isFileTypeSupported(jint p1, jni::ref<javax::sound::midi::Sequence> p2) { return call_static_method<"isFileTypeSupported", jboolean>(p1, p2); }
	static jint write(jni::ref<javax::sound::midi::Sequence> p1, jint p2, jni::ref<java::io::OutputStream> p3) { return call_static_method<"write", jint>(p1, p2, p3); }
	static jint write(jni::ref<javax::sound::midi::Sequence> p1, jint p2, jni::ref<java::io::File> p3) { return call_static_method<"write", jint>(p1, p2, p3); }

protected:

	MidiSystem(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDISYSTEM
