// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDIFILEFORMAT_FWD
#define SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDIFILEFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::sound::midi { class MidiFileFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::sound::midi::MidiFileFormat>
{
	static constexpr fixed_string class_name = "javax/sound/midi/MidiFileFormat";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDIFILEFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDIFILEFORMAT)
#define SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDIFILEFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::sound::midi::MidiFileFormat : public jni::object_base<"javax/sound/midi/MidiFileFormat",
	java::lang::Object>
{
public:

	static jint UNKNOWN_LENGTH() { return get_static_field<"UNKNOWN_LENGTH", jint>(); }

	static jni::ref<javax::sound::midi::MidiFileFormat> new_object(jint p1, jfloat p2, jint p3, jint p4, jlong p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<javax::sound::midi::MidiFileFormat> new_object(jint p1, jfloat p2, jint p3, jint p4, jlong p5, jni::ref<java::util::Map> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	jint getType() { return call_method<"getType", jint>(); }
	jfloat getDivisionType() { return call_method<"getDivisionType", jfloat>(); }
	jint getResolution() { return call_method<"getResolution", jint>(); }
	jint getByteLength() { return call_method<"getByteLength", jint>(); }
	jlong getMicrosecondLength() { return call_method<"getMicrosecondLength", jlong>(); }
	jni::ref<java::util::Map> properties() { return call_method<"properties", jni::ref<java::util::Map>>(); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }

protected:

	MidiFileFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SOUND_MIDI_MIDIFILEFORMAT
