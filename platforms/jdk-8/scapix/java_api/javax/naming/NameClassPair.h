// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_NAMING_NAMECLASSPAIR_FWD
#define SCAPIX_JAVA_API_JAVAX_NAMING_NAMECLASSPAIR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::naming { class NameClassPair; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::naming::NameClassPair>
{
	static constexpr fixed_string class_name = "javax/naming/NameClassPair";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_NAMING_NAMECLASSPAIR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_NAMING_NAMECLASSPAIR)
#define SCAPIX_JAVA_API_JAVAX_NAMING_NAMECLASSPAIR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::naming::NameClassPair : public jni::object_base<"javax/naming/NameClassPair",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<javax::naming::NameClassPair> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::naming::NameClassPair> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void setName(jni::ref<java::lang::String> p1) { return call_method<"setName", void>(p1); }
	void setClassName(jni::ref<java::lang::String> p1) { return call_method<"setClassName", void>(p1); }
	jboolean isRelative() { return call_method<"isRelative", jboolean>(); }
	void setRelative(jboolean p1) { return call_method<"setRelative", void>(p1); }
	jni::ref<java::lang::String> getNameInNamespace() { return call_method<"getNameInNamespace", jni::ref<java::lang::String>>(); }
	void setNameInNamespace(jni::ref<java::lang::String> p1) { return call_method<"setNameInNamespace", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	NameClassPair(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_NAMING_NAMECLASSPAIR
