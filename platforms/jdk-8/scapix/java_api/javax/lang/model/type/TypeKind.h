// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEKIND_FWD
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEKIND_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::lang::model::type { class TypeKind; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::lang::model::type::TypeKind>
{
	static constexpr fixed_string class_name = "javax/lang/model/type/TypeKind";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEKIND_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEKIND)
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEKIND

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::lang::model::type::TypeKind : public jni::object_base<"javax/lang/model/type/TypeKind",
	java::lang::Enum>
{
public:

	static jni::ref<javax::lang::model::type::TypeKind> BOOLEAN() { return get_static_field<"BOOLEAN", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> BYTE() { return get_static_field<"BYTE", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> SHORT() { return get_static_field<"SHORT", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> INT() { return get_static_field<"INT", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> LONG() { return get_static_field<"LONG", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> CHAR() { return get_static_field<"CHAR", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> FLOAT() { return get_static_field<"FLOAT", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> DOUBLE() { return get_static_field<"DOUBLE", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> VOID() { return get_static_field<"VOID", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> NONE() { return get_static_field<"NONE", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> NULL() { return get_static_field<"NULL", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> ARRAY() { return get_static_field<"ARRAY", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> DECLARED() { return get_static_field<"DECLARED", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> ERROR() { return get_static_field<"ERROR", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> TYPEVAR() { return get_static_field<"TYPEVAR", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> WILDCARD() { return get_static_field<"WILDCARD", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> PACKAGE() { return get_static_field<"PACKAGE", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> EXECUTABLE() { return get_static_field<"EXECUTABLE", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> OTHER() { return get_static_field<"OTHER", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> UNION() { return get_static_field<"UNION", jni::ref<javax::lang::model::type::TypeKind>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> INTERSECTION() { return get_static_field<"INTERSECTION", jni::ref<javax::lang::model::type::TypeKind>>(); }

	static jni::ref<jni::array<javax::lang::model::type::TypeKind>> values() { return call_static_method<"values", jni::ref<jni::array<javax::lang::model::type::TypeKind>>>(); }
	static jni::ref<javax::lang::model::type::TypeKind> valueOf(jni::ref<java::lang::String> p1) { return call_static_method<"valueOf", jni::ref<javax::lang::model::type::TypeKind>>(p1); }
	jboolean isPrimitive() { return call_method<"isPrimitive", jboolean>(); }

protected:

	TypeKind(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEKIND
