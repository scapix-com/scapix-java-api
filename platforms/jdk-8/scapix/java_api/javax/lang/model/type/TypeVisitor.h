// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEVISITOR_FWD
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEVISITOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::lang::model::type { class TypeVisitor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::lang::model::type::TypeVisitor>
{
	static constexpr fixed_string class_name = "javax/lang/model/type/TypeVisitor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEVISITOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEVISITOR)
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEVISITOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/javax/lang/model/type/ArrayType.h>
#include <scapix/java_api/javax/lang/model/type/DeclaredType.h>
#include <scapix/java_api/javax/lang/model/type/ErrorType.h>
#include <scapix/java_api/javax/lang/model/type/ExecutableType.h>
#include <scapix/java_api/javax/lang/model/type/IntersectionType.h>
#include <scapix/java_api/javax/lang/model/type/NoType.h>
#include <scapix/java_api/javax/lang/model/type/NullType.h>
#include <scapix/java_api/javax/lang/model/type/PrimitiveType.h>
#include <scapix/java_api/javax/lang/model/type/TypeMirror.h>
#include <scapix/java_api/javax/lang/model/type/TypeVariable.h>
#include <scapix/java_api/javax/lang/model/type/UnionType.h>
#include <scapix/java_api/javax/lang/model/type/WildcardType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::lang::model::type::TypeVisitor : public jni::object_base<"javax/lang/model/type/TypeVisitor",
	java::lang::Object>
{
public:

	jni::ref<java::lang::Object> visit(jni::ref<javax::lang::model::type::TypeMirror> p1, jni::ref<java::lang::Object> p2) { return call_method<"visit", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visit(jni::ref<javax::lang::model::type::TypeMirror> p1) { return call_method<"visit", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> visitPrimitive(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitive", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitNull(jni::ref<javax::lang::model::type::NullType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitNull", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitArray(jni::ref<javax::lang::model::type::ArrayType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitArray", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitDeclared(jni::ref<javax::lang::model::type::DeclaredType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitDeclared", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitError(jni::ref<javax::lang::model::type::ErrorType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitError", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitTypeVariable(jni::ref<javax::lang::model::type::TypeVariable> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitTypeVariable", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitWildcard(jni::ref<javax::lang::model::type::WildcardType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitWildcard", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitExecutable(jni::ref<javax::lang::model::type::ExecutableType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitExecutable", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitNoType(jni::ref<javax::lang::model::type::NoType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitNoType", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitUnknown(jni::ref<javax::lang::model::type::TypeMirror> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitUnknown", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitUnion(jni::ref<javax::lang::model::type::UnionType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitUnion", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitIntersection(jni::ref<javax::lang::model::type::IntersectionType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitIntersection", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	TypeVisitor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_TYPE_TYPEVISITOR
