// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/lang/model/util/SimpleTypeVisitor6.h>

#ifndef SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPEKINDVISITOR6_FWD
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPEKINDVISITOR6_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::lang::model::util { class TypeKindVisitor6; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::lang::model::util::TypeKindVisitor6>
{
	static constexpr fixed_string class_name = "javax/lang/model/util/TypeKindVisitor6";
	using base_classes = std::tuple<scapix::java_api::javax::lang::model::util::SimpleTypeVisitor6>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPEKINDVISITOR6_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPEKINDVISITOR6)
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPEKINDVISITOR6

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/lang/model/type/NoType.h>
#include <scapix/java_api/javax/lang/model/type/PrimitiveType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::lang::model::util::TypeKindVisitor6 : public jni::object_base<"javax/lang/model/util/TypeKindVisitor6",
	javax::lang::model::util::SimpleTypeVisitor6>
{
public:

	jni::ref<java::lang::Object> visitPrimitive(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitive", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitPrimitiveAsBoolean(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitiveAsBoolean", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitPrimitiveAsByte(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitiveAsByte", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitPrimitiveAsShort(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitiveAsShort", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitPrimitiveAsInt(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitiveAsInt", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitPrimitiveAsLong(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitiveAsLong", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitPrimitiveAsChar(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitiveAsChar", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitPrimitiveAsFloat(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitiveAsFloat", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitPrimitiveAsDouble(jni::ref<javax::lang::model::type::PrimitiveType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitPrimitiveAsDouble", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitNoType(jni::ref<javax::lang::model::type::NoType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitNoType", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitNoTypeAsVoid(jni::ref<javax::lang::model::type::NoType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitNoTypeAsVoid", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitNoTypeAsPackage(jni::ref<javax::lang::model::type::NoType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitNoTypeAsPackage", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitNoTypeAsNone(jni::ref<javax::lang::model::type::NoType> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitNoTypeAsNone", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	TypeKindVisitor6(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPEKINDVISITOR6
