// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPES_FWD
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::lang::model::util { class Types; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::lang::model::util::Types>
{
	static constexpr fixed_string class_name = "javax/lang/model/util/Types";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPES)
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/javax/lang/model/element/Element.h>
#include <scapix/java_api/javax/lang/model/element/TypeElement.h>
#include <scapix/java_api/javax/lang/model/type/ArrayType.h>
#include <scapix/java_api/javax/lang/model/type/DeclaredType.h>
#include <scapix/java_api/javax/lang/model/type/ExecutableType.h>
#include <scapix/java_api/javax/lang/model/type/NoType.h>
#include <scapix/java_api/javax/lang/model/type/NullType.h>
#include <scapix/java_api/javax/lang/model/type/PrimitiveType.h>
#include <scapix/java_api/javax/lang/model/type/TypeKind.h>
#include <scapix/java_api/javax/lang/model/type/TypeMirror.h>
#include <scapix/java_api/javax/lang/model/type/WildcardType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::lang::model::util::Types : public jni::object_base<"javax/lang/model/util/Types",
	java::lang::Object>
{
public:

	jni::ref<javax::lang::model::element::Element> asElement(jni::ref<javax::lang::model::type::TypeMirror> p1) { return call_method<"asElement", jni::ref<javax::lang::model::element::Element>>(p1); }
	jboolean isSameType(jni::ref<javax::lang::model::type::TypeMirror> p1, jni::ref<javax::lang::model::type::TypeMirror> p2) { return call_method<"isSameType", jboolean>(p1, p2); }
	jboolean isSubtype(jni::ref<javax::lang::model::type::TypeMirror> p1, jni::ref<javax::lang::model::type::TypeMirror> p2) { return call_method<"isSubtype", jboolean>(p1, p2); }
	jboolean isAssignable(jni::ref<javax::lang::model::type::TypeMirror> p1, jni::ref<javax::lang::model::type::TypeMirror> p2) { return call_method<"isAssignable", jboolean>(p1, p2); }
	jboolean contains(jni::ref<javax::lang::model::type::TypeMirror> p1, jni::ref<javax::lang::model::type::TypeMirror> p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean isSubsignature(jni::ref<javax::lang::model::type::ExecutableType> p1, jni::ref<javax::lang::model::type::ExecutableType> p2) { return call_method<"isSubsignature", jboolean>(p1, p2); }
	jni::ref<java::util::List> directSupertypes(jni::ref<javax::lang::model::type::TypeMirror> p1) { return call_method<"directSupertypes", jni::ref<java::util::List>>(p1); }
	jni::ref<javax::lang::model::type::TypeMirror> erasure(jni::ref<javax::lang::model::type::TypeMirror> p1) { return call_method<"erasure", jni::ref<javax::lang::model::type::TypeMirror>>(p1); }
	jni::ref<javax::lang::model::element::TypeElement> boxedClass(jni::ref<javax::lang::model::type::PrimitiveType> p1) { return call_method<"boxedClass", jni::ref<javax::lang::model::element::TypeElement>>(p1); }
	jni::ref<javax::lang::model::type::PrimitiveType> unboxedType(jni::ref<javax::lang::model::type::TypeMirror> p1) { return call_method<"unboxedType", jni::ref<javax::lang::model::type::PrimitiveType>>(p1); }
	jni::ref<javax::lang::model::type::TypeMirror> capture(jni::ref<javax::lang::model::type::TypeMirror> p1) { return call_method<"capture", jni::ref<javax::lang::model::type::TypeMirror>>(p1); }
	jni::ref<javax::lang::model::type::PrimitiveType> getPrimitiveType(jni::ref<javax::lang::model::type::TypeKind> p1) { return call_method<"getPrimitiveType", jni::ref<javax::lang::model::type::PrimitiveType>>(p1); }
	jni::ref<javax::lang::model::type::NullType> getNullType() { return call_method<"getNullType", jni::ref<javax::lang::model::type::NullType>>(); }
	jni::ref<javax::lang::model::type::NoType> getNoType(jni::ref<javax::lang::model::type::TypeKind> p1) { return call_method<"getNoType", jni::ref<javax::lang::model::type::NoType>>(p1); }
	jni::ref<javax::lang::model::type::ArrayType> getArrayType(jni::ref<javax::lang::model::type::TypeMirror> p1) { return call_method<"getArrayType", jni::ref<javax::lang::model::type::ArrayType>>(p1); }
	jni::ref<javax::lang::model::type::WildcardType> getWildcardType(jni::ref<javax::lang::model::type::TypeMirror> p1, jni::ref<javax::lang::model::type::TypeMirror> p2) { return call_method<"getWildcardType", jni::ref<javax::lang::model::type::WildcardType>>(p1, p2); }
	jni::ref<javax::lang::model::type::DeclaredType> getDeclaredType(jni::ref<javax::lang::model::element::TypeElement> p1, jni::ref<jni::array<javax::lang::model::type::TypeMirror>> p2) { return call_method<"getDeclaredType", jni::ref<javax::lang::model::type::DeclaredType>>(p1, p2); }
	jni::ref<javax::lang::model::type::DeclaredType> getDeclaredType(jni::ref<javax::lang::model::type::DeclaredType> p1, jni::ref<javax::lang::model::element::TypeElement> p2, jni::ref<jni::array<javax::lang::model::type::TypeMirror>> p3) { return call_method<"getDeclaredType", jni::ref<javax::lang::model::type::DeclaredType>>(p1, p2, p3); }
	jni::ref<javax::lang::model::type::TypeMirror> asMemberOf(jni::ref<javax::lang::model::type::DeclaredType> p1, jni::ref<javax::lang::model::element::Element> p2) { return call_method<"asMemberOf", jni::ref<javax::lang::model::type::TypeMirror>>(p1, p2); }

protected:

	Types(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_TYPES
