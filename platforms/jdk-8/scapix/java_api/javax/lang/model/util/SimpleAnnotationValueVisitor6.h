// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/lang/model/util/AbstractAnnotationValueVisitor6.h>

#ifndef SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_SIMPLEANNOTATIONVALUEVISITOR6_FWD
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_SIMPLEANNOTATIONVALUEVISITOR6_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::lang::model::util { class SimpleAnnotationValueVisitor6; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::lang::model::util::SimpleAnnotationValueVisitor6>
{
	static constexpr fixed_string class_name = "javax/lang/model/util/SimpleAnnotationValueVisitor6";
	using base_classes = std::tuple<scapix::java_api::javax::lang::model::util::AbstractAnnotationValueVisitor6>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_SIMPLEANNOTATIONVALUEVISITOR6_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_SIMPLEANNOTATIONVALUEVISITOR6)
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_SIMPLEANNOTATIONVALUEVISITOR6

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/javax/lang/model/element/AnnotationMirror.h>
#include <scapix/java_api/javax/lang/model/element/VariableElement.h>
#include <scapix/java_api/javax/lang/model/type/TypeMirror.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::lang::model::util::SimpleAnnotationValueVisitor6 : public jni::object_base<"javax/lang/model/util/SimpleAnnotationValueVisitor6",
	javax::lang::model::util::AbstractAnnotationValueVisitor6>
{
public:

	jni::ref<java::lang::Object> visitBoolean(jboolean p1, jni::ref<java::lang::Object> p2) { return call_method<"visitBoolean", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitByte(jbyte p1, jni::ref<java::lang::Object> p2) { return call_method<"visitByte", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitChar(jchar p1, jni::ref<java::lang::Object> p2) { return call_method<"visitChar", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitDouble(jdouble p1, jni::ref<java::lang::Object> p2) { return call_method<"visitDouble", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitFloat(jfloat p1, jni::ref<java::lang::Object> p2) { return call_method<"visitFloat", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitInt(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"visitInt", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitLong(jlong p1, jni::ref<java::lang::Object> p2) { return call_method<"visitLong", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitShort(jshort p1, jni::ref<java::lang::Object> p2) { return call_method<"visitShort", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitString(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitString", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitType(jni::ref<javax::lang::model::type::TypeMirror> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitType", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitEnumConstant(jni::ref<javax::lang::model::element::VariableElement> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitEnumConstant", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitAnnotation(jni::ref<javax::lang::model::element::AnnotationMirror> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitAnnotation", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> visitArray(jni::ref<java::util::List> p1, jni::ref<java::lang::Object> p2) { return call_method<"visitArray", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	SimpleAnnotationValueVisitor6(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_UTIL_SIMPLEANNOTATIONVALUEVISITOR6
