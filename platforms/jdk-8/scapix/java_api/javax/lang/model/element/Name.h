// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/CharSequence.h>

#ifndef SCAPIX_JAVA_API_JAVAX_LANG_MODEL_ELEMENT_NAME_FWD
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_ELEMENT_NAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::lang::model::element { class Name; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::lang::model::element::Name>
{
	static constexpr fixed_string class_name = "javax/lang/model/element/Name";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::CharSequence>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_ELEMENT_NAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_LANG_MODEL_ELEMENT_NAME)
#define SCAPIX_JAVA_API_JAVAX_LANG_MODEL_ELEMENT_NAME

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::lang::model::element::Name : public jni::object_base<"javax/lang/model/element/Name",
	java::lang::Object,
	java::lang::CharSequence>
{
public:

	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean contentEquals(jni::ref<java::lang::CharSequence> p1) { return call_method<"contentEquals", jboolean>(p1); }

protected:

	Name(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_LANG_MODEL_ELEMENT_NAME
