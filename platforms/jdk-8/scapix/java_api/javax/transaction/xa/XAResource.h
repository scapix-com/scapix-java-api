// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_TRANSACTION_XA_XARESOURCE_FWD
#define SCAPIX_JAVA_API_JAVAX_TRANSACTION_XA_XARESOURCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::transaction::xa { class XAResource; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::transaction::xa::XAResource>
{
	static constexpr fixed_string class_name = "javax/transaction/xa/XAResource";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_TRANSACTION_XA_XARESOURCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_TRANSACTION_XA_XARESOURCE)
#define SCAPIX_JAVA_API_JAVAX_TRANSACTION_XA_XARESOURCE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/javax/transaction/xa/Xid.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::transaction::xa::XAResource : public jni::object_base<"javax/transaction/xa/XAResource",
	java::lang::Object>
{
public:

	static jint TMENDRSCAN() { return get_static_field<"TMENDRSCAN", jint>(); }
	static jint TMFAIL() { return get_static_field<"TMFAIL", jint>(); }
	static jint TMJOIN() { return get_static_field<"TMJOIN", jint>(); }
	static jint TMNOFLAGS() { return get_static_field<"TMNOFLAGS", jint>(); }
	static jint TMONEPHASE() { return get_static_field<"TMONEPHASE", jint>(); }
	static jint TMRESUME() { return get_static_field<"TMRESUME", jint>(); }
	static jint TMSTARTRSCAN() { return get_static_field<"TMSTARTRSCAN", jint>(); }
	static jint TMSUCCESS() { return get_static_field<"TMSUCCESS", jint>(); }
	static jint TMSUSPEND() { return get_static_field<"TMSUSPEND", jint>(); }
	static jint XA_RDONLY() { return get_static_field<"XA_RDONLY", jint>(); }
	static jint XA_OK() { return get_static_field<"XA_OK", jint>(); }

	void commit(jni::ref<javax::transaction::xa::Xid> p1, jboolean p2) { return call_method<"commit", void>(p1, p2); }
	void end(jni::ref<javax::transaction::xa::Xid> p1, jint p2) { return call_method<"end", void>(p1, p2); }
	void forget(jni::ref<javax::transaction::xa::Xid> p1) { return call_method<"forget", void>(p1); }
	jint getTransactionTimeout() { return call_method<"getTransactionTimeout", jint>(); }
	jboolean isSameRM(jni::ref<javax::transaction::xa::XAResource> p1) { return call_method<"isSameRM", jboolean>(p1); }
	jint prepare(jni::ref<javax::transaction::xa::Xid> p1) { return call_method<"prepare", jint>(p1); }
	jni::ref<jni::array<javax::transaction::xa::Xid>> recover(jint p1) { return call_method<"recover", jni::ref<jni::array<javax::transaction::xa::Xid>>>(p1); }
	void rollback(jni::ref<javax::transaction::xa::Xid> p1) { return call_method<"rollback", void>(p1); }
	jboolean setTransactionTimeout(jint p1) { return call_method<"setTransactionTimeout", jboolean>(p1); }
	void start(jni::ref<javax::transaction::xa::Xid> p1, jint p2) { return call_method<"start", void>(p1, p2); }

protected:

	XAResource(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_TRANSACTION_XA_XARESOURCE
