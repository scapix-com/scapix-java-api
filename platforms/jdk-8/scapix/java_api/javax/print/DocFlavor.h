// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_PRINT_DOCFLAVOR_FWD
#define SCAPIX_JAVA_API_JAVAX_PRINT_DOCFLAVOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::print { class DocFlavor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::print::DocFlavor>
{
	static constexpr fixed_string class_name = "javax/print/DocFlavor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_PRINT_DOCFLAVOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_PRINT_DOCFLAVOR)
#define SCAPIX_JAVA_API_JAVAX_PRINT_DOCFLAVOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/print/DocFlavor_BYTE_ARRAY.h>
#include <scapix/java_api/javax/print/DocFlavor_INPUT_STREAM.h>
#include <scapix/java_api/javax/print/DocFlavor_URL.h>
#include <scapix/java_api/javax/print/DocFlavor_CHAR_ARRAY.h>
#include <scapix/java_api/javax/print/DocFlavor_STRING.h>
#include <scapix/java_api/javax/print/DocFlavor_READER.h>
#include <scapix/java_api/javax/print/DocFlavor_SERVICE_FORMATTED.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::print::DocFlavor : public jni::object_base<"javax/print/DocFlavor",
	java::lang::Object,
	java::io::Serializable,
	java::lang::Cloneable>
{
public:

	using BYTE_ARRAY = DocFlavor_BYTE_ARRAY;
	using INPUT_STREAM = DocFlavor_INPUT_STREAM;
	using URL = DocFlavor_URL;
	using CHAR_ARRAY = DocFlavor_CHAR_ARRAY;
	using STRING = DocFlavor_STRING;
	using READER = DocFlavor_READER;
	using SERVICE_FORMATTED = DocFlavor_SERVICE_FORMATTED;

	static jni::ref<java::lang::String> hostEncoding() { return get_static_field<"hostEncoding", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::print::DocFlavor> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::String> getMimeType() { return call_method<"getMimeType", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getMediaType() { return call_method<"getMediaType", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getMediaSubtype() { return call_method<"getMediaSubtype", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getParameter(jni::ref<java::lang::String> p1) { return call_method<"getParameter", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getRepresentationClassName() { return call_method<"getRepresentationClassName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	DocFlavor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_PRINT_DOCFLAVOR
