// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLEVENTFACTORY_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLEVENTFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::stream { class XMLEventFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::stream::XMLEventFactory>
{
	static constexpr fixed_string class_name = "javax/xml/stream/XMLEventFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLEVENTFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLEVENTFACTORY)
#define SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLEVENTFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/javax/xml/namespace/NamespaceContext.h>
#include <scapix/java_api/javax/xml/namespace/QName.h>
#include <scapix/java_api/javax/xml/stream/Location.h>
#include <scapix/java_api/javax/xml/stream/events/Attribute.h>
#include <scapix/java_api/javax/xml/stream/events/Characters.h>
#include <scapix/java_api/javax/xml/stream/events/Comment.h>
#include <scapix/java_api/javax/xml/stream/events/DTD.h>
#include <scapix/java_api/javax/xml/stream/events/EndDocument.h>
#include <scapix/java_api/javax/xml/stream/events/EndElement.h>
#include <scapix/java_api/javax/xml/stream/events/EntityDeclaration.h>
#include <scapix/java_api/javax/xml/stream/events/EntityReference.h>
#include <scapix/java_api/javax/xml/stream/events/Namespace.h>
#include <scapix/java_api/javax/xml/stream/events/ProcessingInstruction.h>
#include <scapix/java_api/javax/xml/stream/events/StartDocument.h>
#include <scapix/java_api/javax/xml/stream/events/StartElement.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::stream::XMLEventFactory : public jni::object_base<"javax/xml/stream/XMLEventFactory",
	java::lang::Object>
{
public:

	static jni::ref<javax::xml::stream::XMLEventFactory> newInstance() { return call_static_method<"newInstance", jni::ref<javax::xml::stream::XMLEventFactory>>(); }
	static jni::ref<javax::xml::stream::XMLEventFactory> newFactory() { return call_static_method<"newFactory", jni::ref<javax::xml::stream::XMLEventFactory>>(); }
	static jni::ref<javax::xml::stream::XMLEventFactory> newInstance(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2) { return call_static_method<"newInstance", jni::ref<javax::xml::stream::XMLEventFactory>>(p1, p2); }
	static jni::ref<javax::xml::stream::XMLEventFactory> newFactory(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2) { return call_static_method<"newFactory", jni::ref<javax::xml::stream::XMLEventFactory>>(p1, p2); }
	void setLocation(jni::ref<javax::xml::stream::Location> p1) { return call_method<"setLocation", void>(p1); }
	jni::ref<javax::xml::stream::events::Attribute> createAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"createAttribute", jni::ref<javax::xml::stream::events::Attribute>>(p1, p2, p3, p4); }
	jni::ref<javax::xml::stream::events::Attribute> createAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createAttribute", jni::ref<javax::xml::stream::events::Attribute>>(p1, p2); }
	jni::ref<javax::xml::stream::events::Attribute> createAttribute(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::lang::String> p2) { return call_method<"createAttribute", jni::ref<javax::xml::stream::events::Attribute>>(p1, p2); }
	jni::ref<javax::xml::stream::events::Namespace> createNamespace(jni::ref<java::lang::String> p1) { return call_method<"createNamespace", jni::ref<javax::xml::stream::events::Namespace>>(p1); }
	jni::ref<javax::xml::stream::events::Namespace> createNamespace(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createNamespace", jni::ref<javax::xml::stream::events::Namespace>>(p1, p2); }
	jni::ref<javax::xml::stream::events::StartElement> createStartElement(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::util::Iterator> p2, jni::ref<java::util::Iterator> p3) { return call_method<"createStartElement", jni::ref<javax::xml::stream::events::StartElement>>(p1, p2, p3); }
	jni::ref<javax::xml::stream::events::StartElement> createStartElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"createStartElement", jni::ref<javax::xml::stream::events::StartElement>>(p1, p2, p3); }
	jni::ref<javax::xml::stream::events::StartElement> createStartElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::Iterator> p4, jni::ref<java::util::Iterator> p5) { return call_method<"createStartElement", jni::ref<javax::xml::stream::events::StartElement>>(p1, p2, p3, p4, p5); }
	jni::ref<javax::xml::stream::events::StartElement> createStartElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::Iterator> p4, jni::ref<java::util::Iterator> p5, jni::ref<javax::xml::namespace_::NamespaceContext> p6) { return call_method<"createStartElement", jni::ref<javax::xml::stream::events::StartElement>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<javax::xml::stream::events::EndElement> createEndElement(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::util::Iterator> p2) { return call_method<"createEndElement", jni::ref<javax::xml::stream::events::EndElement>>(p1, p2); }
	jni::ref<javax::xml::stream::events::EndElement> createEndElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"createEndElement", jni::ref<javax::xml::stream::events::EndElement>>(p1, p2, p3); }
	jni::ref<javax::xml::stream::events::EndElement> createEndElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::util::Iterator> p4) { return call_method<"createEndElement", jni::ref<javax::xml::stream::events::EndElement>>(p1, p2, p3, p4); }
	jni::ref<javax::xml::stream::events::Characters> createCharacters(jni::ref<java::lang::String> p1) { return call_method<"createCharacters", jni::ref<javax::xml::stream::events::Characters>>(p1); }
	jni::ref<javax::xml::stream::events::Characters> createCData(jni::ref<java::lang::String> p1) { return call_method<"createCData", jni::ref<javax::xml::stream::events::Characters>>(p1); }
	jni::ref<javax::xml::stream::events::Characters> createSpace(jni::ref<java::lang::String> p1) { return call_method<"createSpace", jni::ref<javax::xml::stream::events::Characters>>(p1); }
	jni::ref<javax::xml::stream::events::Characters> createIgnorableSpace(jni::ref<java::lang::String> p1) { return call_method<"createIgnorableSpace", jni::ref<javax::xml::stream::events::Characters>>(p1); }
	jni::ref<javax::xml::stream::events::StartDocument> createStartDocument() { return call_method<"createStartDocument", jni::ref<javax::xml::stream::events::StartDocument>>(); }
	jni::ref<javax::xml::stream::events::StartDocument> createStartDocument(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"createStartDocument", jni::ref<javax::xml::stream::events::StartDocument>>(p1, p2, p3); }
	jni::ref<javax::xml::stream::events::StartDocument> createStartDocument(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createStartDocument", jni::ref<javax::xml::stream::events::StartDocument>>(p1, p2); }
	jni::ref<javax::xml::stream::events::StartDocument> createStartDocument(jni::ref<java::lang::String> p1) { return call_method<"createStartDocument", jni::ref<javax::xml::stream::events::StartDocument>>(p1); }
	jni::ref<javax::xml::stream::events::EndDocument> createEndDocument() { return call_method<"createEndDocument", jni::ref<javax::xml::stream::events::EndDocument>>(); }
	jni::ref<javax::xml::stream::events::EntityReference> createEntityReference(jni::ref<java::lang::String> p1, jni::ref<javax::xml::stream::events::EntityDeclaration> p2) { return call_method<"createEntityReference", jni::ref<javax::xml::stream::events::EntityReference>>(p1, p2); }
	jni::ref<javax::xml::stream::events::Comment> createComment(jni::ref<java::lang::String> p1) { return call_method<"createComment", jni::ref<javax::xml::stream::events::Comment>>(p1); }
	jni::ref<javax::xml::stream::events::ProcessingInstruction> createProcessingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createProcessingInstruction", jni::ref<javax::xml::stream::events::ProcessingInstruction>>(p1, p2); }
	jni::ref<javax::xml::stream::events::DTD> createDTD(jni::ref<java::lang::String> p1) { return call_method<"createDTD", jni::ref<javax::xml::stream::events::DTD>>(p1); }

protected:

	XMLEventFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLEVENTFACTORY
