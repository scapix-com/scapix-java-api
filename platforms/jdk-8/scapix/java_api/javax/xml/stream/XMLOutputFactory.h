// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLOUTPUTFACTORY_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLOUTPUTFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::stream { class XMLOutputFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::stream::XMLOutputFactory>
{
	static constexpr fixed_string class_name = "javax/xml/stream/XMLOutputFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLOUTPUTFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLOUTPUTFACTORY)
#define SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLOUTPUTFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/stream/XMLEventWriter.h>
#include <scapix/java_api/javax/xml/stream/XMLInputFactory.h>
#include <scapix/java_api/javax/xml/stream/XMLStreamWriter.h>
#include <scapix/java_api/javax/xml/transform/Result.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::stream::XMLOutputFactory : public jni::object_base<"javax/xml/stream/XMLOutputFactory",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> IS_REPAIRING_NAMESPACES() { return get_static_field<"IS_REPAIRING_NAMESPACES", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::xml::stream::XMLOutputFactory> newInstance() { return call_static_method<"newInstance", jni::ref<javax::xml::stream::XMLOutputFactory>>(); }
	static jni::ref<javax::xml::stream::XMLOutputFactory> newFactory() { return call_static_method<"newFactory", jni::ref<javax::xml::stream::XMLOutputFactory>>(); }
	static jni::ref<javax::xml::stream::XMLInputFactory> newInstance(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2) { return call_static_method<"newInstance", jni::ref<javax::xml::stream::XMLInputFactory>>(p1, p2); }
	static jni::ref<javax::xml::stream::XMLOutputFactory> newFactory(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2) { return call_static_method<"newFactory", jni::ref<javax::xml::stream::XMLOutputFactory>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLStreamWriter> createXMLStreamWriter(jni::ref<java::io::Writer> p1) { return call_method<"createXMLStreamWriter", jni::ref<javax::xml::stream::XMLStreamWriter>>(p1); }
	jni::ref<javax::xml::stream::XMLStreamWriter> createXMLStreamWriter(jni::ref<java::io::OutputStream> p1) { return call_method<"createXMLStreamWriter", jni::ref<javax::xml::stream::XMLStreamWriter>>(p1); }
	jni::ref<javax::xml::stream::XMLStreamWriter> createXMLStreamWriter(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"createXMLStreamWriter", jni::ref<javax::xml::stream::XMLStreamWriter>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLStreamWriter> createXMLStreamWriter(jni::ref<javax::xml::transform::Result> p1) { return call_method<"createXMLStreamWriter", jni::ref<javax::xml::stream::XMLStreamWriter>>(p1); }
	jni::ref<javax::xml::stream::XMLEventWriter> createXMLEventWriter(jni::ref<javax::xml::transform::Result> p1) { return call_method<"createXMLEventWriter", jni::ref<javax::xml::stream::XMLEventWriter>>(p1); }
	jni::ref<javax::xml::stream::XMLEventWriter> createXMLEventWriter(jni::ref<java::io::OutputStream> p1) { return call_method<"createXMLEventWriter", jni::ref<javax::xml::stream::XMLEventWriter>>(p1); }
	jni::ref<javax::xml::stream::XMLEventWriter> createXMLEventWriter(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"createXMLEventWriter", jni::ref<javax::xml::stream::XMLEventWriter>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLEventWriter> createXMLEventWriter(jni::ref<java::io::Writer> p1) { return call_method<"createXMLEventWriter", jni::ref<javax::xml::stream::XMLEventWriter>>(p1); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	jboolean isPropertySupported(jni::ref<java::lang::String> p1) { return call_method<"isPropertySupported", jboolean>(p1); }

protected:

	XMLOutputFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLOUTPUTFACTORY
