// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLINPUTFACTORY_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLINPUTFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::stream { class XMLInputFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::stream::XMLInputFactory>
{
	static constexpr fixed_string class_name = "javax/xml/stream/XMLInputFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLINPUTFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLINPUTFACTORY)
#define SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLINPUTFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/stream/EventFilter.h>
#include <scapix/java_api/javax/xml/stream/StreamFilter.h>
#include <scapix/java_api/javax/xml/stream/XMLEventReader.h>
#include <scapix/java_api/javax/xml/stream/XMLReporter.h>
#include <scapix/java_api/javax/xml/stream/XMLResolver.h>
#include <scapix/java_api/javax/xml/stream/XMLStreamReader.h>
#include <scapix/java_api/javax/xml/stream/util/XMLEventAllocator.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::stream::XMLInputFactory : public jni::object_base<"javax/xml/stream/XMLInputFactory",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> IS_NAMESPACE_AWARE() { return get_static_field<"IS_NAMESPACE_AWARE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IS_VALIDATING() { return get_static_field<"IS_VALIDATING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IS_COALESCING() { return get_static_field<"IS_COALESCING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IS_REPLACING_ENTITY_REFERENCES() { return get_static_field<"IS_REPLACING_ENTITY_REFERENCES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IS_SUPPORTING_EXTERNAL_ENTITIES() { return get_static_field<"IS_SUPPORTING_EXTERNAL_ENTITIES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SUPPORT_DTD() { return get_static_field<"SUPPORT_DTD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> REPORTER() { return get_static_field<"REPORTER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RESOLVER() { return get_static_field<"RESOLVER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ALLOCATOR() { return get_static_field<"ALLOCATOR", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::xml::stream::XMLInputFactory> newInstance() { return call_static_method<"newInstance", jni::ref<javax::xml::stream::XMLInputFactory>>(); }
	static jni::ref<javax::xml::stream::XMLInputFactory> newFactory() { return call_static_method<"newFactory", jni::ref<javax::xml::stream::XMLInputFactory>>(); }
	static jni::ref<javax::xml::stream::XMLInputFactory> newInstance(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2) { return call_static_method<"newInstance", jni::ref<javax::xml::stream::XMLInputFactory>>(p1, p2); }
	static jni::ref<javax::xml::stream::XMLInputFactory> newFactory(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2) { return call_static_method<"newFactory", jni::ref<javax::xml::stream::XMLInputFactory>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLStreamReader> createXMLStreamReader(jni::ref<java::io::Reader> p1) { return call_method<"createXMLStreamReader", jni::ref<javax::xml::stream::XMLStreamReader>>(p1); }
	jni::ref<javax::xml::stream::XMLStreamReader> createXMLStreamReader(jni::ref<javax::xml::transform::Source> p1) { return call_method<"createXMLStreamReader", jni::ref<javax::xml::stream::XMLStreamReader>>(p1); }
	jni::ref<javax::xml::stream::XMLStreamReader> createXMLStreamReader(jni::ref<java::io::InputStream> p1) { return call_method<"createXMLStreamReader", jni::ref<javax::xml::stream::XMLStreamReader>>(p1); }
	jni::ref<javax::xml::stream::XMLStreamReader> createXMLStreamReader(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"createXMLStreamReader", jni::ref<javax::xml::stream::XMLStreamReader>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLStreamReader> createXMLStreamReader(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"createXMLStreamReader", jni::ref<javax::xml::stream::XMLStreamReader>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLStreamReader> createXMLStreamReader(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"createXMLStreamReader", jni::ref<javax::xml::stream::XMLStreamReader>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLEventReader> createXMLEventReader(jni::ref<java::io::Reader> p1) { return call_method<"createXMLEventReader", jni::ref<javax::xml::stream::XMLEventReader>>(p1); }
	jni::ref<javax::xml::stream::XMLEventReader> createXMLEventReader(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2) { return call_method<"createXMLEventReader", jni::ref<javax::xml::stream::XMLEventReader>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLEventReader> createXMLEventReader(jni::ref<javax::xml::stream::XMLStreamReader> p1) { return call_method<"createXMLEventReader", jni::ref<javax::xml::stream::XMLEventReader>>(p1); }
	jni::ref<javax::xml::stream::XMLEventReader> createXMLEventReader(jni::ref<javax::xml::transform::Source> p1) { return call_method<"createXMLEventReader", jni::ref<javax::xml::stream::XMLEventReader>>(p1); }
	jni::ref<javax::xml::stream::XMLEventReader> createXMLEventReader(jni::ref<java::io::InputStream> p1) { return call_method<"createXMLEventReader", jni::ref<javax::xml::stream::XMLEventReader>>(p1); }
	jni::ref<javax::xml::stream::XMLEventReader> createXMLEventReader(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"createXMLEventReader", jni::ref<javax::xml::stream::XMLEventReader>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLEventReader> createXMLEventReader(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2) { return call_method<"createXMLEventReader", jni::ref<javax::xml::stream::XMLEventReader>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLStreamReader> createFilteredReader(jni::ref<javax::xml::stream::XMLStreamReader> p1, jni::ref<javax::xml::stream::StreamFilter> p2) { return call_method<"createFilteredReader", jni::ref<javax::xml::stream::XMLStreamReader>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLEventReader> createFilteredReader(jni::ref<javax::xml::stream::XMLEventReader> p1, jni::ref<javax::xml::stream::EventFilter> p2) { return call_method<"createFilteredReader", jni::ref<javax::xml::stream::XMLEventReader>>(p1, p2); }
	jni::ref<javax::xml::stream::XMLResolver> getXMLResolver() { return call_method<"getXMLResolver", jni::ref<javax::xml::stream::XMLResolver>>(); }
	void setXMLResolver(jni::ref<javax::xml::stream::XMLResolver> p1) { return call_method<"setXMLResolver", void>(p1); }
	jni::ref<javax::xml::stream::XMLReporter> getXMLReporter() { return call_method<"getXMLReporter", jni::ref<javax::xml::stream::XMLReporter>>(); }
	void setXMLReporter(jni::ref<javax::xml::stream::XMLReporter> p1) { return call_method<"setXMLReporter", void>(p1); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	jboolean isPropertySupported(jni::ref<java::lang::String> p1) { return call_method<"isPropertySupported", jboolean>(p1); }
	void setEventAllocator(jni::ref<javax::xml::stream::util::XMLEventAllocator> p1) { return call_method<"setEventAllocator", void>(p1); }
	jni::ref<javax::xml::stream::util::XMLEventAllocator> getEventAllocator() { return call_method<"getEventAllocator", jni::ref<javax::xml::stream::util::XMLEventAllocator>>(); }

protected:

	XMLInputFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_STREAM_XMLINPUTFACTORY
