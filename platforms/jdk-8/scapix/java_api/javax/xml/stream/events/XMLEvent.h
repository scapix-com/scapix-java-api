// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/xml/stream/XMLStreamConstants.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_STREAM_EVENTS_XMLEVENT_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_STREAM_EVENTS_XMLEVENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::stream::events { class XMLEvent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::stream::events::XMLEvent>
{
	static constexpr fixed_string class_name = "javax/xml/stream/events/XMLEvent";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::xml::stream::XMLStreamConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_STREAM_EVENTS_XMLEVENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_STREAM_EVENTS_XMLEVENT)
#define SCAPIX_JAVA_API_JAVAX_XML_STREAM_EVENTS_XMLEVENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/javax/xml/namespace/QName.h>
#include <scapix/java_api/javax/xml/stream/Location.h>
#include <scapix/java_api/javax/xml/stream/events/Characters.h>
#include <scapix/java_api/javax/xml/stream/events/EndElement.h>
#include <scapix/java_api/javax/xml/stream/events/StartElement.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::stream::events::XMLEvent : public jni::object_base<"javax/xml/stream/events/XMLEvent",
	java::lang::Object,
	javax::xml::stream::XMLStreamConstants>
{
public:

	jint getEventType() { return call_method<"getEventType", jint>(); }
	jni::ref<javax::xml::stream::Location> getLocation() { return call_method<"getLocation", jni::ref<javax::xml::stream::Location>>(); }
	jboolean isStartElement() { return call_method<"isStartElement", jboolean>(); }
	jboolean isAttribute() { return call_method<"isAttribute", jboolean>(); }
	jboolean isNamespace() { return call_method<"isNamespace", jboolean>(); }
	jboolean isEndElement() { return call_method<"isEndElement", jboolean>(); }
	jboolean isEntityReference() { return call_method<"isEntityReference", jboolean>(); }
	jboolean isProcessingInstruction() { return call_method<"isProcessingInstruction", jboolean>(); }
	jboolean isCharacters() { return call_method<"isCharacters", jboolean>(); }
	jboolean isStartDocument() { return call_method<"isStartDocument", jboolean>(); }
	jboolean isEndDocument() { return call_method<"isEndDocument", jboolean>(); }
	jni::ref<javax::xml::stream::events::StartElement> asStartElement() { return call_method<"asStartElement", jni::ref<javax::xml::stream::events::StartElement>>(); }
	jni::ref<javax::xml::stream::events::EndElement> asEndElement() { return call_method<"asEndElement", jni::ref<javax::xml::stream::events::EndElement>>(); }
	jni::ref<javax::xml::stream::events::Characters> asCharacters() { return call_method<"asCharacters", jni::ref<javax::xml::stream::events::Characters>>(); }
	jni::ref<javax::xml::namespace_::QName> getSchemaType() { return call_method<"getSchemaType", jni::ref<javax::xml::namespace_::QName>>(); }
	void writeAsEncodedUnicode(jni::ref<java::io::Writer> p1) { return call_method<"writeAsEncodedUnicode", void>(p1); }

protected:

	XMLEvent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_STREAM_EVENTS_XMLEVENT
