// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_SOAP_ATTACHMENTPART_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_SOAP_ATTACHMENTPART_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::soap { class AttachmentPart; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::soap::AttachmentPart>
{
	static constexpr fixed_string class_name = "javax/xml/soap/AttachmentPart";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_SOAP_ATTACHMENTPART_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_SOAP_ATTACHMENTPART)
#define SCAPIX_JAVA_API_JAVAX_XML_SOAP_ATTACHMENTPART

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/javax/activation/DataHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::soap::AttachmentPart : public jni::object_base<"javax/xml/soap/AttachmentPart",
	java::lang::Object>
{
public:

	static jni::ref<javax::xml::soap::AttachmentPart> new_object() { return base_::new_object(); }
	jint getSize() { return call_method<"getSize", jint>(); }
	void clearContent() { return call_method<"clearContent", void>(); }
	jni::ref<java::lang::Object> getContent() { return call_method<"getContent", jni::ref<java::lang::Object>>(); }
	jni::ref<java::io::InputStream> getRawContent() { return call_method<"getRawContent", jni::ref<java::io::InputStream>>(); }
	jni::ref<jni::array<jbyte>> getRawContentBytes() { return call_method<"getRawContentBytes", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::io::InputStream> getBase64Content() { return call_method<"getBase64Content", jni::ref<java::io::InputStream>>(); }
	void setContent(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2) { return call_method<"setContent", void>(p1, p2); }
	void setRawContent(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"setRawContent", void>(p1, p2); }
	void setRawContentBytes(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jni::ref<java::lang::String> p4) { return call_method<"setRawContentBytes", void>(p1, p2, p3, p4); }
	void setBase64Content(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"setBase64Content", void>(p1, p2); }
	jni::ref<javax::activation::DataHandler> getDataHandler() { return call_method<"getDataHandler", jni::ref<javax::activation::DataHandler>>(); }
	void setDataHandler(jni::ref<javax::activation::DataHandler> p1) { return call_method<"setDataHandler", void>(p1); }
	jni::ref<java::lang::String> getContentId() { return call_method<"getContentId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getContentLocation() { return call_method<"getContentLocation", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getContentType() { return call_method<"getContentType", jni::ref<java::lang::String>>(); }
	void setContentId(jni::ref<java::lang::String> p1) { return call_method<"setContentId", void>(p1); }
	void setContentLocation(jni::ref<java::lang::String> p1) { return call_method<"setContentLocation", void>(p1); }
	void setContentType(jni::ref<java::lang::String> p1) { return call_method<"setContentType", void>(p1); }
	void removeMimeHeader(jni::ref<java::lang::String> p1) { return call_method<"removeMimeHeader", void>(p1); }
	void removeAllMimeHeaders() { return call_method<"removeAllMimeHeaders", void>(); }
	jni::ref<jni::array<java::lang::String>> getMimeHeader(jni::ref<java::lang::String> p1) { return call_method<"getMimeHeader", jni::ref<jni::array<java::lang::String>>>(p1); }
	void setMimeHeader(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setMimeHeader", void>(p1, p2); }
	void addMimeHeader(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"addMimeHeader", void>(p1, p2); }
	jni::ref<java::util::Iterator> getAllMimeHeaders() { return call_method<"getAllMimeHeaders", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::util::Iterator> getMatchingMimeHeaders(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"getMatchingMimeHeaders", jni::ref<java::util::Iterator>>(p1); }
	jni::ref<java::util::Iterator> getNonMatchingMimeHeaders(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"getNonMatchingMimeHeaders", jni::ref<java::util::Iterator>>(p1); }

protected:

	AttachmentPart(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_SOAP_ATTACHMENTPART
