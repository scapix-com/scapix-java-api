// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/xml/soap/Node.h>
#include <scapix/java_api/org/w3c/dom/Element.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_SOAP_SOAPELEMENT_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_SOAP_SOAPELEMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::soap { class SOAPElement; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::soap::SOAPElement>
{
	static constexpr fixed_string class_name = "javax/xml/soap/SOAPElement";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::xml::soap::Node, scapix::java_api::org::w3c::dom::Element>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_SOAP_SOAPELEMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_SOAP_SOAPELEMENT)
#define SCAPIX_JAVA_API_JAVAX_XML_SOAP_SOAPELEMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/javax/xml/namespace/QName.h>
#include <scapix/java_api/javax/xml/soap/Name.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::soap::SOAPElement : public jni::object_base<"javax/xml/soap/SOAPElement",
	java::lang::Object,
	javax::xml::soap::Node,
	org::w3c::dom::Element>
{
public:

	jni::ref<javax::xml::soap::SOAPElement> addChildElement(jni::ref<javax::xml::soap::Name> p1) { return call_method<"addChildElement", jni::ref<javax::xml::soap::SOAPElement>>(p1); }
	jni::ref<javax::xml::soap::SOAPElement> addChildElement(jni::ref<javax::xml::namespace_::QName> p1) { return call_method<"addChildElement", jni::ref<javax::xml::soap::SOAPElement>>(p1); }
	jni::ref<javax::xml::soap::SOAPElement> addChildElement(jni::ref<java::lang::String> p1) { return call_method<"addChildElement", jni::ref<javax::xml::soap::SOAPElement>>(p1); }
	jni::ref<javax::xml::soap::SOAPElement> addChildElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"addChildElement", jni::ref<javax::xml::soap::SOAPElement>>(p1, p2); }
	jni::ref<javax::xml::soap::SOAPElement> addChildElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"addChildElement", jni::ref<javax::xml::soap::SOAPElement>>(p1, p2, p3); }
	jni::ref<javax::xml::soap::SOAPElement> addChildElement(jni::ref<javax::xml::soap::SOAPElement> p1) { return call_method<"addChildElement", jni::ref<javax::xml::soap::SOAPElement>>(p1); }
	void removeContents() { return call_method<"removeContents", void>(); }
	jni::ref<javax::xml::soap::SOAPElement> addTextNode(jni::ref<java::lang::String> p1) { return call_method<"addTextNode", jni::ref<javax::xml::soap::SOAPElement>>(p1); }
	jni::ref<javax::xml::soap::SOAPElement> addAttribute(jni::ref<javax::xml::soap::Name> p1, jni::ref<java::lang::String> p2) { return call_method<"addAttribute", jni::ref<javax::xml::soap::SOAPElement>>(p1, p2); }
	jni::ref<javax::xml::soap::SOAPElement> addAttribute(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::lang::String> p2) { return call_method<"addAttribute", jni::ref<javax::xml::soap::SOAPElement>>(p1, p2); }
	jni::ref<javax::xml::soap::SOAPElement> addNamespaceDeclaration(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"addNamespaceDeclaration", jni::ref<javax::xml::soap::SOAPElement>>(p1, p2); }
	jni::ref<java::lang::String> getAttributeValue(jni::ref<javax::xml::soap::Name> p1) { return call_method<"getAttributeValue", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getAttributeValue(jni::ref<javax::xml::namespace_::QName> p1) { return call_method<"getAttributeValue", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::util::Iterator> getAllAttributes() { return call_method<"getAllAttributes", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::util::Iterator> getAllAttributesAsQNames() { return call_method<"getAllAttributesAsQNames", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::lang::String> getNamespaceURI(jni::ref<java::lang::String> p1) { return call_method<"getNamespaceURI", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::util::Iterator> getNamespacePrefixes() { return call_method<"getNamespacePrefixes", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::util::Iterator> getVisibleNamespacePrefixes() { return call_method<"getVisibleNamespacePrefixes", jni::ref<java::util::Iterator>>(); }
	jni::ref<javax::xml::namespace_::QName> createQName(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createQName", jni::ref<javax::xml::namespace_::QName>>(p1, p2); }
	jni::ref<javax::xml::soap::Name> getElementName() { return call_method<"getElementName", jni::ref<javax::xml::soap::Name>>(); }
	jni::ref<javax::xml::namespace_::QName> getElementQName() { return call_method<"getElementQName", jni::ref<javax::xml::namespace_::QName>>(); }
	jni::ref<javax::xml::soap::SOAPElement> setElementQName(jni::ref<javax::xml::namespace_::QName> p1) { return call_method<"setElementQName", jni::ref<javax::xml::soap::SOAPElement>>(p1); }
	jboolean removeAttribute(jni::ref<javax::xml::soap::Name> p1) { return call_method<"removeAttribute", jboolean>(p1); }
	jboolean removeAttribute(jni::ref<javax::xml::namespace_::QName> p1) { return call_method<"removeAttribute", jboolean>(p1); }
	jboolean removeNamespaceDeclaration(jni::ref<java::lang::String> p1) { return call_method<"removeNamespaceDeclaration", jboolean>(p1); }
	jni::ref<java::util::Iterator> getChildElements() { return call_method<"getChildElements", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::util::Iterator> getChildElements(jni::ref<javax::xml::soap::Name> p1) { return call_method<"getChildElements", jni::ref<java::util::Iterator>>(p1); }
	jni::ref<java::util::Iterator> getChildElements(jni::ref<javax::xml::namespace_::QName> p1) { return call_method<"getChildElements", jni::ref<java::util::Iterator>>(p1); }
	void setEncodingStyle(jni::ref<java::lang::String> p1) { return call_method<"setEncodingStyle", void>(p1); }
	jni::ref<java::lang::String> getEncodingStyle() { return call_method<"getEncodingStyle", jni::ref<java::lang::String>>(); }

protected:

	SOAPElement(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_SOAP_SOAPELEMENT
