// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/xml/crypto/XMLStructure.h>
#include <scapix/java_api/javax/xml/crypto/AlgorithmMethod.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DSIG_TRANSFORM_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DSIG_TRANSFORM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::crypto::dsig { class Transform; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::crypto::dsig::Transform>
{
	static constexpr fixed_string class_name = "javax/xml/crypto/dsig/Transform";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::xml::crypto::XMLStructure, scapix::java_api::javax::xml::crypto::AlgorithmMethod>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DSIG_TRANSFORM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DSIG_TRANSFORM)
#define SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DSIG_TRANSFORM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#include <scapix/java_api/javax/xml/crypto/Data.h>
#include <scapix/java_api/javax/xml/crypto/XMLCryptoContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::crypto::dsig::Transform : public jni::object_base<"javax/xml/crypto/dsig/Transform",
	java::lang::Object,
	javax::xml::crypto::XMLStructure,
	javax::xml::crypto::AlgorithmMethod>
{
public:

	static jni::ref<java::lang::String> BASE64() { return get_static_field<"BASE64", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ENVELOPED() { return get_static_field<"ENVELOPED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XPATH() { return get_static_field<"XPATH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XPATH2() { return get_static_field<"XPATH2", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XSLT() { return get_static_field<"XSLT", jni::ref<java::lang::String>>(); }

	jni::ref<java::security::spec::AlgorithmParameterSpec> getParameterSpec() { return call_method<"getParameterSpec", jni::ref<java::security::spec::AlgorithmParameterSpec>>(); }
	jni::ref<javax::xml::crypto::Data> transform(jni::ref<javax::xml::crypto::Data> p1, jni::ref<javax::xml::crypto::XMLCryptoContext> p2) { return call_method<"transform", jni::ref<javax::xml::crypto::Data>>(p1, p2); }
	jni::ref<javax::xml::crypto::Data> transform(jni::ref<javax::xml::crypto::Data> p1, jni::ref<javax::xml::crypto::XMLCryptoContext> p2, jni::ref<java::io::OutputStream> p3) { return call_method<"transform", jni::ref<javax::xml::crypto::Data>>(p1, p2, p3); }

protected:

	Transform(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DSIG_TRANSFORM
