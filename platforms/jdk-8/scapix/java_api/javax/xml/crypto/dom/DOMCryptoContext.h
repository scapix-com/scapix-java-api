// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/xml/crypto/XMLCryptoContext.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DOM_DOMCRYPTOCONTEXT_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DOM_DOMCRYPTOCONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::crypto::dom { class DOMCryptoContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::crypto::dom::DOMCryptoContext>
{
	static constexpr fixed_string class_name = "javax/xml/crypto/dom/DOMCryptoContext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::xml::crypto::XMLCryptoContext>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DOM_DOMCRYPTOCONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DOM_DOMCRYPTOCONTEXT)
#define SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DOM_DOMCRYPTOCONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/javax/xml/crypto/KeySelector.h>
#include <scapix/java_api/javax/xml/crypto/URIDereferencer.h>
#include <scapix/java_api/org/w3c/dom/Element.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::crypto::dom::DOMCryptoContext : public jni::object_base<"javax/xml/crypto/dom/DOMCryptoContext",
	java::lang::Object,
	javax::xml::crypto::XMLCryptoContext>
{
public:

	jni::ref<java::lang::String> getNamespacePrefix(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getNamespacePrefix", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> putNamespacePrefix(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"putNamespacePrefix", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getDefaultNamespacePrefix() { return call_method<"getDefaultNamespacePrefix", jni::ref<java::lang::String>>(); }
	void setDefaultNamespacePrefix(jni::ref<java::lang::String> p1) { return call_method<"setDefaultNamespacePrefix", void>(p1); }
	jni::ref<java::lang::String> getBaseURI() { return call_method<"getBaseURI", jni::ref<java::lang::String>>(); }
	void setBaseURI(jni::ref<java::lang::String> p1) { return call_method<"setBaseURI", void>(p1); }
	jni::ref<javax::xml::crypto::URIDereferencer> getURIDereferencer() { return call_method<"getURIDereferencer", jni::ref<javax::xml::crypto::URIDereferencer>>(); }
	void setURIDereferencer(jni::ref<javax::xml::crypto::URIDereferencer> p1) { return call_method<"setURIDereferencer", void>(p1); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<javax::xml::crypto::KeySelector> getKeySelector() { return call_method<"getKeySelector", jni::ref<javax::xml::crypto::KeySelector>>(); }
	void setKeySelector(jni::ref<javax::xml::crypto::KeySelector> p1) { return call_method<"setKeySelector", void>(p1); }
	jni::ref<org::w3c::dom::Element> getElementById(jni::ref<java::lang::String> p1) { return call_method<"getElementById", jni::ref<org::w3c::dom::Element>>(p1); }
	void setIdAttributeNS(jni::ref<org::w3c::dom::Element> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"setIdAttributeNS", void>(p1, p2, p3); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"put", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	DOMCryptoContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_CRYPTO_DOM_DOMCRYPTOCONTEXT
