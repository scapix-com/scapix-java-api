// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_BIND_DATATYPECONVERTER_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_BIND_DATATYPECONVERTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::bind { class DatatypeConverter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::bind::DatatypeConverter>
{
	static constexpr fixed_string class_name = "javax/xml/bind/DatatypeConverter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_BIND_DATATYPECONVERTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_BIND_DATATYPECONVERTER)
#define SCAPIX_JAVA_API_JAVAX_XML_BIND_DATATYPECONVERTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/util/Calendar.h>
#include <scapix/java_api/javax/xml/bind/DatatypeConverterInterface.h>
#include <scapix/java_api/javax/xml/namespace/NamespaceContext.h>
#include <scapix/java_api/javax/xml/namespace/QName.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::bind::DatatypeConverter : public jni::object_base<"javax/xml/bind/DatatypeConverter",
	java::lang::Object>
{
public:

	static void setDatatypeConverter(jni::ref<javax::xml::bind::DatatypeConverterInterface> p1) { return call_static_method<"setDatatypeConverter", void>(p1); }
	static jni::ref<java::lang::String> parseString(jni::ref<java::lang::String> p1) { return call_static_method<"parseString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::math::BigInteger> parseInteger(jni::ref<java::lang::String> p1) { return call_static_method<"parseInteger", jni::ref<java::math::BigInteger>>(p1); }
	static jint parseInt(jni::ref<java::lang::String> p1) { return call_static_method<"parseInt", jint>(p1); }
	static jlong parseLong(jni::ref<java::lang::String> p1) { return call_static_method<"parseLong", jlong>(p1); }
	static jshort parseShort(jni::ref<java::lang::String> p1) { return call_static_method<"parseShort", jshort>(p1); }
	static jni::ref<java::math::BigDecimal> parseDecimal(jni::ref<java::lang::String> p1) { return call_static_method<"parseDecimal", jni::ref<java::math::BigDecimal>>(p1); }
	static jfloat parseFloat(jni::ref<java::lang::String> p1) { return call_static_method<"parseFloat", jfloat>(p1); }
	static jdouble parseDouble(jni::ref<java::lang::String> p1) { return call_static_method<"parseDouble", jdouble>(p1); }
	static jboolean parseBoolean(jni::ref<java::lang::String> p1) { return call_static_method<"parseBoolean", jboolean>(p1); }
	static jbyte parseByte(jni::ref<java::lang::String> p1) { return call_static_method<"parseByte", jbyte>(p1); }
	static jni::ref<javax::xml::namespace_::QName> parseQName(jni::ref<java::lang::String> p1, jni::ref<javax::xml::namespace_::NamespaceContext> p2) { return call_static_method<"parseQName", jni::ref<javax::xml::namespace_::QName>>(p1, p2); }
	static jni::ref<java::util::Calendar> parseDateTime(jni::ref<java::lang::String> p1) { return call_static_method<"parseDateTime", jni::ref<java::util::Calendar>>(p1); }
	static jni::ref<jni::array<jbyte>> parseBase64Binary(jni::ref<java::lang::String> p1) { return call_static_method<"parseBase64Binary", jni::ref<jni::array<jbyte>>>(p1); }
	static jni::ref<jni::array<jbyte>> parseHexBinary(jni::ref<java::lang::String> p1) { return call_static_method<"parseHexBinary", jni::ref<jni::array<jbyte>>>(p1); }
	static jlong parseUnsignedInt(jni::ref<java::lang::String> p1) { return call_static_method<"parseUnsignedInt", jlong>(p1); }
	static jint parseUnsignedShort(jni::ref<java::lang::String> p1) { return call_static_method<"parseUnsignedShort", jint>(p1); }
	static jni::ref<java::util::Calendar> parseTime(jni::ref<java::lang::String> p1) { return call_static_method<"parseTime", jni::ref<java::util::Calendar>>(p1); }
	static jni::ref<java::util::Calendar> parseDate(jni::ref<java::lang::String> p1) { return call_static_method<"parseDate", jni::ref<java::util::Calendar>>(p1); }
	static jni::ref<java::lang::String> parseAnySimpleType(jni::ref<java::lang::String> p1) { return call_static_method<"parseAnySimpleType", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printString(jni::ref<java::lang::String> p1) { return call_static_method<"printString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printInteger(jni::ref<java::math::BigInteger> p1) { return call_static_method<"printInteger", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printInt(jint p1) { return call_static_method<"printInt", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printLong(jlong p1) { return call_static_method<"printLong", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printShort(jshort p1) { return call_static_method<"printShort", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printDecimal(jni::ref<java::math::BigDecimal> p1) { return call_static_method<"printDecimal", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printFloat(jfloat p1) { return call_static_method<"printFloat", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printDouble(jdouble p1) { return call_static_method<"printDouble", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printBoolean(jboolean p1) { return call_static_method<"printBoolean", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printByte(jbyte p1) { return call_static_method<"printByte", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printQName(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<javax::xml::namespace_::NamespaceContext> p2) { return call_static_method<"printQName", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> printDateTime(jni::ref<java::util::Calendar> p1) { return call_static_method<"printDateTime", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printBase64Binary(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"printBase64Binary", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printHexBinary(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"printHexBinary", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printUnsignedInt(jlong p1) { return call_static_method<"printUnsignedInt", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printUnsignedShort(jint p1) { return call_static_method<"printUnsignedShort", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printTime(jni::ref<java::util::Calendar> p1) { return call_static_method<"printTime", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printDate(jni::ref<java::util::Calendar> p1) { return call_static_method<"printDate", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printAnySimpleType(jni::ref<java::lang::String> p1) { return call_static_method<"printAnySimpleType", jni::ref<java::lang::String>>(p1); }

protected:

	DatatypeConverter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_BIND_DATATYPECONVERTER
