// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXB_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::bind { class JAXB; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::bind::JAXB>
{
	static constexpr fixed_string class_name = "javax/xml/bind/JAXB";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXB)
#define SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/javax/xml/transform/Result.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::bind::JAXB : public jni::object_base<"javax/xml/bind/JAXB",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::Object> unmarshal(jni::ref<java::io::File> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"unmarshal", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> unmarshal(jni::ref<java::net::URL> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"unmarshal", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> unmarshal(jni::ref<java::net::URI> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"unmarshal", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> unmarshal(jni::ref<java::lang::String> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"unmarshal", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> unmarshal(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"unmarshal", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> unmarshal(jni::ref<java::io::Reader> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"unmarshal", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> unmarshal(jni::ref<javax::xml::transform::Source> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"unmarshal", jni::ref<java::lang::Object>>(p1, p2); }
	static void marshal(jni::ref<java::lang::Object> p1, jni::ref<java::io::File> p2) { return call_static_method<"marshal", void>(p1, p2); }
	static void marshal(jni::ref<java::lang::Object> p1, jni::ref<java::net::URL> p2) { return call_static_method<"marshal", void>(p1, p2); }
	static void marshal(jni::ref<java::lang::Object> p1, jni::ref<java::net::URI> p2) { return call_static_method<"marshal", void>(p1, p2); }
	static void marshal(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2) { return call_static_method<"marshal", void>(p1, p2); }
	static void marshal(jni::ref<java::lang::Object> p1, jni::ref<java::io::OutputStream> p2) { return call_static_method<"marshal", void>(p1, p2); }
	static void marshal(jni::ref<java::lang::Object> p1, jni::ref<java::io::Writer> p2) { return call_static_method<"marshal", void>(p1, p2); }
	static void marshal(jni::ref<java::lang::Object> p1, jni::ref<javax::xml::transform::Result> p2) { return call_static_method<"marshal", void>(p1, p2); }

protected:

	JAXB(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXB
