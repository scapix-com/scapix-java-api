// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_BIND_BINDER_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_BIND_BINDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::bind { class Binder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::bind::Binder>
{
	static constexpr fixed_string class_name = "javax/xml/bind/Binder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_BIND_BINDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_BIND_BINDER)
#define SCAPIX_JAVA_API_JAVAX_XML_BIND_BINDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/bind/JAXBElement.h>
#include <scapix/java_api/javax/xml/bind/ValidationEventHandler.h>
#include <scapix/java_api/javax/xml/validation/Schema.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::bind::Binder : public jni::object_base<"javax/xml/bind/Binder",
	java::lang::Object>
{
public:

	static jni::ref<javax::xml::bind::Binder> new_object() { return base_::new_object(); }
	jni::ref<java::lang::Object> unmarshal(jni::ref<java::lang::Object> p1) { return call_method<"unmarshal", jni::ref<java::lang::Object>>(p1); }
	jni::ref<javax::xml::bind::JAXBElement> unmarshal(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Class> p2) { return call_method<"unmarshal", jni::ref<javax::xml::bind::JAXBElement>>(p1, p2); }
	void marshal(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"marshal", void>(p1, p2); }
	jni::ref<java::lang::Object> getXMLNode(jni::ref<java::lang::Object> p1) { return call_method<"getXMLNode", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> getJAXBNode(jni::ref<java::lang::Object> p1) { return call_method<"getJAXBNode", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> updateXML(jni::ref<java::lang::Object> p1) { return call_method<"updateXML", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> updateXML(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"updateXML", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> updateJAXB(jni::ref<java::lang::Object> p1) { return call_method<"updateJAXB", jni::ref<java::lang::Object>>(p1); }
	void setSchema(jni::ref<javax::xml::validation::Schema> p1) { return call_method<"setSchema", void>(p1); }
	jni::ref<javax::xml::validation::Schema> getSchema() { return call_method<"getSchema", jni::ref<javax::xml::validation::Schema>>(); }
	void setEventHandler(jni::ref<javax::xml::bind::ValidationEventHandler> p1) { return call_method<"setEventHandler", void>(p1); }
	jni::ref<javax::xml::bind::ValidationEventHandler> getEventHandler() { return call_method<"getEventHandler", jni::ref<javax::xml::bind::ValidationEventHandler>>(); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }

protected:

	Binder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_BIND_BINDER
