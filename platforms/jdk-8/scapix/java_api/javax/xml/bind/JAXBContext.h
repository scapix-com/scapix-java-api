// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXBCONTEXT_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXBCONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::bind { class JAXBContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::bind::JAXBContext>
{
	static constexpr fixed_string class_name = "javax/xml/bind/JAXBContext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXBCONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXBCONTEXT)
#define SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXBCONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/xml/bind/Binder.h>
#include <scapix/java_api/javax/xml/bind/JAXBIntrospector.h>
#include <scapix/java_api/javax/xml/bind/Marshaller.h>
#include <scapix/java_api/javax/xml/bind/SchemaOutputResolver.h>
#include <scapix/java_api/javax/xml/bind/Unmarshaller.h>
#include <scapix/java_api/javax/xml/bind/Validator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::bind::JAXBContext : public jni::object_base<"javax/xml/bind/JAXBContext",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> JAXB_CONTEXT_FACTORY() { return get_static_field<"JAXB_CONTEXT_FACTORY", jni::ref<java::lang::String>>(); }

	static jni::ref<javax::xml::bind::JAXBContext> newInstance(jni::ref<java::lang::String> p1) { return call_static_method<"newInstance", jni::ref<javax::xml::bind::JAXBContext>>(p1); }
	static jni::ref<javax::xml::bind::JAXBContext> newInstance(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2) { return call_static_method<"newInstance", jni::ref<javax::xml::bind::JAXBContext>>(p1, p2); }
	static jni::ref<javax::xml::bind::JAXBContext> newInstance(jni::ref<java::lang::String> p1, jni::ref<java::lang::ClassLoader> p2, jni::ref<java::util::Map> p3) { return call_static_method<"newInstance", jni::ref<javax::xml::bind::JAXBContext>>(p1, p2, p3); }
	static jni::ref<javax::xml::bind::JAXBContext> newInstance(jni::ref<jni::array<java::lang::Class>> p1) { return call_static_method<"newInstance", jni::ref<javax::xml::bind::JAXBContext>>(p1); }
	static jni::ref<javax::xml::bind::JAXBContext> newInstance(jni::ref<jni::array<java::lang::Class>> p1, jni::ref<java::util::Map> p2) { return call_static_method<"newInstance", jni::ref<javax::xml::bind::JAXBContext>>(p1, p2); }
	jni::ref<javax::xml::bind::Unmarshaller> createUnmarshaller() { return call_method<"createUnmarshaller", jni::ref<javax::xml::bind::Unmarshaller>>(); }
	jni::ref<javax::xml::bind::Marshaller> createMarshaller() { return call_method<"createMarshaller", jni::ref<javax::xml::bind::Marshaller>>(); }
	jni::ref<javax::xml::bind::Validator> createValidator() { return call_method<"createValidator", jni::ref<javax::xml::bind::Validator>>(); }
	jni::ref<javax::xml::bind::Binder> createBinder(jni::ref<java::lang::Class> p1) { return call_method<"createBinder", jni::ref<javax::xml::bind::Binder>>(p1); }
	jni::ref<javax::xml::bind::Binder> createBinder() { return call_method<"createBinder", jni::ref<javax::xml::bind::Binder>>(); }
	jni::ref<javax::xml::bind::JAXBIntrospector> createJAXBIntrospector() { return call_method<"createJAXBIntrospector", jni::ref<javax::xml::bind::JAXBIntrospector>>(); }
	void generateSchema(jni::ref<javax::xml::bind::SchemaOutputResolver> p1) { return call_method<"generateSchema", void>(p1); }

protected:

	JAXBContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_BIND_JAXBCONTEXT
