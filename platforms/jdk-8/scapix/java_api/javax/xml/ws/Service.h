// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_WS_SERVICE_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_WS_SERVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::ws { class Service; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::ws::Service>
{
	static constexpr fixed_string class_name = "javax/xml/ws/Service";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_WS_SERVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_WS_SERVICE)
#define SCAPIX_JAVA_API_JAVAX_XML_WS_SERVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/javax/xml/bind/JAXBContext.h>
#include <scapix/java_api/javax/xml/namespace/QName.h>
#include <scapix/java_api/javax/xml/ws/Dispatch.h>
#include <scapix/java_api/javax/xml/ws/EndpointReference.h>
#include <scapix/java_api/javax/xml/ws/Service_Mode.h>
#include <scapix/java_api/javax/xml/ws/WebServiceFeature.h>
#include <scapix/java_api/javax/xml/ws/handler/HandlerResolver.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::ws::Service : public jni::object_base<"javax/xml/ws/Service",
	java::lang::Object>
{
public:

	using Mode = Service_Mode;

	jni::ref<java::lang::Object> getPort(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::lang::Class> p2) { return call_method<"getPort", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> getPort(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::lang::Class> p2, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p3) { return call_method<"getPort", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::lang::Object> getPort(jni::ref<java::lang::Class> p1) { return call_method<"getPort", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> getPort(jni::ref<java::lang::Class> p1, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p2) { return call_method<"getPort", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> getPort(jni::ref<javax::xml::ws::EndpointReference> p1, jni::ref<java::lang::Class> p2, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p3) { return call_method<"getPort", jni::ref<java::lang::Object>>(p1, p2, p3); }
	void addPort(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"addPort", void>(p1, p2, p3); }
	jni::ref<javax::xml::ws::Dispatch> createDispatch(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::lang::Class> p2, jni::ref<javax::xml::ws::Service_Mode> p3) { return call_method<"createDispatch", jni::ref<javax::xml::ws::Dispatch>>(p1, p2, p3); }
	jni::ref<javax::xml::ws::Dispatch> createDispatch(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<java::lang::Class> p2, jni::ref<javax::xml::ws::Service_Mode> p3, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p4) { return call_method<"createDispatch", jni::ref<javax::xml::ws::Dispatch>>(p1, p2, p3, p4); }
	jni::ref<javax::xml::ws::Dispatch> createDispatch(jni::ref<javax::xml::ws::EndpointReference> p1, jni::ref<java::lang::Class> p2, jni::ref<javax::xml::ws::Service_Mode> p3, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p4) { return call_method<"createDispatch", jni::ref<javax::xml::ws::Dispatch>>(p1, p2, p3, p4); }
	jni::ref<javax::xml::ws::Dispatch> createDispatch(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<javax::xml::bind::JAXBContext> p2, jni::ref<javax::xml::ws::Service_Mode> p3) { return call_method<"createDispatch", jni::ref<javax::xml::ws::Dispatch>>(p1, p2, p3); }
	jni::ref<javax::xml::ws::Dispatch> createDispatch(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<javax::xml::bind::JAXBContext> p2, jni::ref<javax::xml::ws::Service_Mode> p3, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p4) { return call_method<"createDispatch", jni::ref<javax::xml::ws::Dispatch>>(p1, p2, p3, p4); }
	jni::ref<javax::xml::ws::Dispatch> createDispatch(jni::ref<javax::xml::ws::EndpointReference> p1, jni::ref<javax::xml::bind::JAXBContext> p2, jni::ref<javax::xml::ws::Service_Mode> p3, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p4) { return call_method<"createDispatch", jni::ref<javax::xml::ws::Dispatch>>(p1, p2, p3, p4); }
	jni::ref<javax::xml::namespace_::QName> getServiceName() { return call_method<"getServiceName", jni::ref<javax::xml::namespace_::QName>>(); }
	jni::ref<java::util::Iterator> getPorts() { return call_method<"getPorts", jni::ref<java::util::Iterator>>(); }
	jni::ref<java::net::URL> getWSDLDocumentLocation() { return call_method<"getWSDLDocumentLocation", jni::ref<java::net::URL>>(); }
	jni::ref<javax::xml::ws::handler::HandlerResolver> getHandlerResolver() { return call_method<"getHandlerResolver", jni::ref<javax::xml::ws::handler::HandlerResolver>>(); }
	void setHandlerResolver(jni::ref<javax::xml::ws::handler::HandlerResolver> p1) { return call_method<"setHandlerResolver", void>(p1); }
	jni::ref<java::util::concurrent::Executor> getExecutor() { return call_method<"getExecutor", jni::ref<java::util::concurrent::Executor>>(); }
	void setExecutor(jni::ref<java::util::concurrent::Executor> p1) { return call_method<"setExecutor", void>(p1); }
	static jni::ref<javax::xml::ws::Service> create(jni::ref<java::net::URL> p1, jni::ref<javax::xml::namespace_::QName> p2) { return call_static_method<"create", jni::ref<javax::xml::ws::Service>>(p1, p2); }
	static jni::ref<javax::xml::ws::Service> create(jni::ref<java::net::URL> p1, jni::ref<javax::xml::namespace_::QName> p2, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p3) { return call_static_method<"create", jni::ref<javax::xml::ws::Service>>(p1, p2, p3); }
	static jni::ref<javax::xml::ws::Service> create(jni::ref<javax::xml::namespace_::QName> p1) { return call_static_method<"create", jni::ref<javax::xml::ws::Service>>(p1); }
	static jni::ref<javax::xml::ws::Service> create(jni::ref<javax::xml::namespace_::QName> p1, jni::ref<jni::array<javax::xml::ws::WebServiceFeature>> p2) { return call_static_method<"create", jni::ref<javax::xml::ws::Service>>(p1, p2); }

protected:

	Service(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_WS_SERVICE
