// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_XML_VALIDATION_SCHEMAFACTORY_FWD
#define SCAPIX_JAVA_API_JAVAX_XML_VALIDATION_SCHEMAFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::xml::validation { class SchemaFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::xml::validation::SchemaFactory>
{
	static constexpr fixed_string class_name = "javax/xml/validation/SchemaFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_VALIDATION_SCHEMAFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_XML_VALIDATION_SCHEMAFACTORY)
#define SCAPIX_JAVA_API_JAVAX_XML_VALIDATION_SCHEMAFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/validation/Schema.h>
#include <scapix/java_api/org/w3c/dom/ls/LSResourceResolver.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::xml::validation::SchemaFactory : public jni::object_base<"javax/xml/validation/SchemaFactory",
	java::lang::Object>
{
public:

	static jni::ref<javax::xml::validation::SchemaFactory> newInstance(jni::ref<java::lang::String> p1) { return call_static_method<"newInstance", jni::ref<javax::xml::validation::SchemaFactory>>(p1); }
	static jni::ref<javax::xml::validation::SchemaFactory> newInstance(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::ClassLoader> p3) { return call_static_method<"newInstance", jni::ref<javax::xml::validation::SchemaFactory>>(p1, p2, p3); }
	jboolean isSchemaLanguageSupported(jni::ref<java::lang::String> p1) { return call_method<"isSchemaLanguageSupported", jboolean>(p1); }
	jboolean getFeature(jni::ref<java::lang::String> p1) { return call_method<"getFeature", jboolean>(p1); }
	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	void setErrorHandler(jni::ref<org::xml::sax::ErrorHandler> p1) { return call_method<"setErrorHandler", void>(p1); }
	jni::ref<org::xml::sax::ErrorHandler> getErrorHandler() { return call_method<"getErrorHandler", jni::ref<org::xml::sax::ErrorHandler>>(); }
	void setResourceResolver(jni::ref<org::w3c::dom::ls::LSResourceResolver> p1) { return call_method<"setResourceResolver", void>(p1); }
	jni::ref<org::w3c::dom::ls::LSResourceResolver> getResourceResolver() { return call_method<"getResourceResolver", jni::ref<org::w3c::dom::ls::LSResourceResolver>>(); }
	jni::ref<javax::xml::validation::Schema> newSchema(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newSchema", jni::ref<javax::xml::validation::Schema>>(p1); }
	jni::ref<javax::xml::validation::Schema> newSchema(jni::ref<java::io::File> p1) { return call_method<"newSchema", jni::ref<javax::xml::validation::Schema>>(p1); }
	jni::ref<javax::xml::validation::Schema> newSchema(jni::ref<java::net::URL> p1) { return call_method<"newSchema", jni::ref<javax::xml::validation::Schema>>(p1); }
	jni::ref<javax::xml::validation::Schema> newSchema(jni::ref<jni::array<javax::xml::transform::Source>> p1) { return call_method<"newSchema", jni::ref<javax::xml::validation::Schema>>(p1); }
	jni::ref<javax::xml::validation::Schema> newSchema() { return call_method<"newSchema", jni::ref<javax::xml::validation::Schema>>(); }

protected:

	SchemaFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_XML_VALIDATION_SCHEMAFACTORY
