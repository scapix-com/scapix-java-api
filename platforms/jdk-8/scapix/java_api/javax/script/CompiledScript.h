// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_SCRIPT_COMPILEDSCRIPT_FWD
#define SCAPIX_JAVA_API_JAVAX_SCRIPT_COMPILEDSCRIPT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::script { class CompiledScript; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::script::CompiledScript>
{
	static constexpr fixed_string class_name = "javax/script/CompiledScript";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SCRIPT_COMPILEDSCRIPT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_SCRIPT_COMPILEDSCRIPT)
#define SCAPIX_JAVA_API_JAVAX_SCRIPT_COMPILEDSCRIPT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/javax/script/Bindings.h>
#include <scapix/java_api/javax/script/ScriptContext.h>
#include <scapix/java_api/javax/script/ScriptEngine.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::script::CompiledScript : public jni::object_base<"javax/script/CompiledScript",
	java::lang::Object>
{
public:

	static jni::ref<javax::script::CompiledScript> new_object() { return base_::new_object(); }
	jni::ref<java::lang::Object> eval(jni::ref<javax::script::ScriptContext> p1) { return call_method<"eval", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> eval(jni::ref<javax::script::Bindings> p1) { return call_method<"eval", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> eval() { return call_method<"eval", jni::ref<java::lang::Object>>(); }
	jni::ref<javax::script::ScriptEngine> getEngine() { return call_method<"getEngine", jni::ref<javax::script::ScriptEngine>>(); }

protected:

	CompiledScript(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_SCRIPT_COMPILEDSCRIPT
