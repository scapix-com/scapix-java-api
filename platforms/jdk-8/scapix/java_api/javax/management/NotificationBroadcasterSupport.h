// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/management/NotificationEmitter.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_NOTIFICATIONBROADCASTERSUPPORT_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_NOTIFICATIONBROADCASTERSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management { class NotificationBroadcasterSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::NotificationBroadcasterSupport>
{
	static constexpr fixed_string class_name = "javax/management/NotificationBroadcasterSupport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::management::NotificationEmitter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_NOTIFICATIONBROADCASTERSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_NOTIFICATIONBROADCASTERSUPPORT)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_NOTIFICATIONBROADCASTERSUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/Executor.h>
#include <scapix/java_api/javax/management/MBeanNotificationInfo.h>
#include <scapix/java_api/javax/management/Notification.h>
#include <scapix/java_api/javax/management/NotificationFilter.h>
#include <scapix/java_api/javax/management/NotificationListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::NotificationBroadcasterSupport : public jni::object_base<"javax/management/NotificationBroadcasterSupport",
	java::lang::Object,
	javax::management::NotificationEmitter>
{
public:

	static jni::ref<javax::management::NotificationBroadcasterSupport> new_object() { return base_::new_object(); }
	static jni::ref<javax::management::NotificationBroadcasterSupport> new_object(jni::ref<java::util::concurrent::Executor> p1) { return base_::new_object(p1); }
	static jni::ref<javax::management::NotificationBroadcasterSupport> new_object(jni::ref<jni::array<javax::management::MBeanNotificationInfo>> p1) { return base_::new_object(p1); }
	static jni::ref<javax::management::NotificationBroadcasterSupport> new_object(jni::ref<java::util::concurrent::Executor> p1, jni::ref<jni::array<javax::management::MBeanNotificationInfo>> p2) { return base_::new_object(p1, p2); }
	void addNotificationListener(jni::ref<javax::management::NotificationListener> p1, jni::ref<javax::management::NotificationFilter> p2, jni::ref<java::lang::Object> p3) { return call_method<"addNotificationListener", void>(p1, p2, p3); }
	void removeNotificationListener(jni::ref<javax::management::NotificationListener> p1) { return call_method<"removeNotificationListener", void>(p1); }
	void removeNotificationListener(jni::ref<javax::management::NotificationListener> p1, jni::ref<javax::management::NotificationFilter> p2, jni::ref<java::lang::Object> p3) { return call_method<"removeNotificationListener", void>(p1, p2, p3); }
	jni::ref<jni::array<javax::management::MBeanNotificationInfo>> getNotificationInfo() { return call_method<"getNotificationInfo", jni::ref<jni::array<javax::management::MBeanNotificationInfo>>>(); }
	void sendNotification(jni::ref<javax::management::Notification> p1) { return call_method<"sendNotification", void>(p1); }

protected:

	NotificationBroadcasterSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_NOTIFICATIONBROADCASTERSUPPORT
