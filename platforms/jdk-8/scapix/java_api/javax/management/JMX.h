// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_JMX_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_JMX_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management { class JMX; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::JMX>
{
	static constexpr fixed_string class_name = "javax/management/JMX";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_JMX_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_JMX)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_JMX

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/management/MBeanServerConnection.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::JMX : public jni::object_base<"javax/management/JMX",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> DEFAULT_VALUE_FIELD() { return get_static_field<"DEFAULT_VALUE_FIELD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IMMUTABLE_INFO_FIELD() { return get_static_field<"IMMUTABLE_INFO_FIELD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTERFACE_CLASS_NAME_FIELD() { return get_static_field<"INTERFACE_CLASS_NAME_FIELD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LEGAL_VALUES_FIELD() { return get_static_field<"LEGAL_VALUES_FIELD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MAX_VALUE_FIELD() { return get_static_field<"MAX_VALUE_FIELD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MIN_VALUE_FIELD() { return get_static_field<"MIN_VALUE_FIELD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MXBEAN_FIELD() { return get_static_field<"MXBEAN_FIELD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> OPEN_TYPE_FIELD() { return get_static_field<"OPEN_TYPE_FIELD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORIGINAL_TYPE_FIELD() { return get_static_field<"ORIGINAL_TYPE_FIELD", jni::ref<java::lang::String>>(); }

	static jni::ref<java::lang::Object> newMBeanProxy(jni::ref<javax::management::MBeanServerConnection> p1, jni::ref<javax::management::ObjectName> p2, jni::ref<java::lang::Class> p3) { return call_static_method<"newMBeanProxy", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jni::ref<java::lang::Object> newMBeanProxy(jni::ref<javax::management::MBeanServerConnection> p1, jni::ref<javax::management::ObjectName> p2, jni::ref<java::lang::Class> p3, jboolean p4) { return call_static_method<"newMBeanProxy", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::Object> newMXBeanProxy(jni::ref<javax::management::MBeanServerConnection> p1, jni::ref<javax::management::ObjectName> p2, jni::ref<java::lang::Class> p3) { return call_static_method<"newMXBeanProxy", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jni::ref<java::lang::Object> newMXBeanProxy(jni::ref<javax::management::MBeanServerConnection> p1, jni::ref<javax::management::ObjectName> p2, jni::ref<java::lang::Class> p3, jboolean p4) { return call_static_method<"newMXBeanProxy", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	static jboolean isMXBeanInterface(jni::ref<java::lang::Class> p1) { return call_static_method<"isMXBeanInterface", jboolean>(p1); }

protected:

	JMX(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_JMX
