// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_QUERY_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_QUERY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management { class Query; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::Query>
{
	static constexpr fixed_string class_name = "javax/management/Query";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_QUERY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_QUERY)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_QUERY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/management/AttributeValueExp.h>
#include <scapix/java_api/javax/management/QueryExp.h>
#include <scapix/java_api/javax/management/StringValueExp.h>
#include <scapix/java_api/javax/management/ValueExp.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::Query : public jni::object_base<"javax/management/Query",
	java::lang::Object>
{
public:

	static jint GT() { return get_static_field<"GT", jint>(); }
	static jint LT() { return get_static_field<"LT", jint>(); }
	static jint GE() { return get_static_field<"GE", jint>(); }
	static jint LE() { return get_static_field<"LE", jint>(); }
	static jint EQ() { return get_static_field<"EQ", jint>(); }
	static jint PLUS() { return get_static_field<"PLUS", jint>(); }
	static jint MINUS() { return get_static_field<"MINUS", jint>(); }
	static jint TIMES() { return get_static_field<"TIMES", jint>(); }
	static jint DIV() { return get_static_field<"DIV", jint>(); }

	static jni::ref<javax::management::Query> new_object() { return base_::new_object(); }
	static jni::ref<javax::management::QueryExp> and_(jni::ref<javax::management::QueryExp> p1, jni::ref<javax::management::QueryExp> p2) { return call_static_method<"and", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> or_(jni::ref<javax::management::QueryExp> p1, jni::ref<javax::management::QueryExp> p2) { return call_static_method<"or", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> gt(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"gt", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> geq(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"geq", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> leq(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"leq", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> lt(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"lt", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> eq(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"eq", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> between(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2, jni::ref<javax::management::ValueExp> p3) { return call_static_method<"between", jni::ref<javax::management::QueryExp>>(p1, p2, p3); }
	static jni::ref<javax::management::QueryExp> match(jni::ref<javax::management::AttributeValueExp> p1, jni::ref<javax::management::StringValueExp> p2) { return call_static_method<"match", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::AttributeValueExp> attr(jni::ref<java::lang::String> p1) { return call_static_method<"attr", jni::ref<javax::management::AttributeValueExp>>(p1); }
	static jni::ref<javax::management::AttributeValueExp> attr(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"attr", jni::ref<javax::management::AttributeValueExp>>(p1, p2); }
	static jni::ref<javax::management::AttributeValueExp> classattr() { return call_static_method<"classattr", jni::ref<javax::management::AttributeValueExp>>(); }
	static jni::ref<javax::management::QueryExp> not_(jni::ref<javax::management::QueryExp> p1) { return call_static_method<"not", jni::ref<javax::management::QueryExp>>(p1); }
	static jni::ref<javax::management::QueryExp> in(jni::ref<javax::management::ValueExp> p1, jni::ref<jni::array<javax::management::ValueExp>> p2) { return call_static_method<"in", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::StringValueExp> value(jni::ref<java::lang::String> p1) { return call_static_method<"value", jni::ref<javax::management::StringValueExp>>(p1); }
	static jni::ref<javax::management::ValueExp> value(jni::ref<java::lang::Number> p1) { return call_static_method<"value", jni::ref<javax::management::ValueExp>>(p1); }
	static jni::ref<javax::management::ValueExp> value(jint p1) { return call_static_method<"value", jni::ref<javax::management::ValueExp>>(p1); }
	static jni::ref<javax::management::ValueExp> value(jlong p1) { return call_static_method<"value", jni::ref<javax::management::ValueExp>>(p1); }
	static jni::ref<javax::management::ValueExp> value(jfloat p1) { return call_static_method<"value", jni::ref<javax::management::ValueExp>>(p1); }
	static jni::ref<javax::management::ValueExp> value(jdouble p1) { return call_static_method<"value", jni::ref<javax::management::ValueExp>>(p1); }
	static jni::ref<javax::management::ValueExp> value(jboolean p1) { return call_static_method<"value", jni::ref<javax::management::ValueExp>>(p1); }
	static jni::ref<javax::management::ValueExp> plus(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"plus", jni::ref<javax::management::ValueExp>>(p1, p2); }
	static jni::ref<javax::management::ValueExp> times(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"times", jni::ref<javax::management::ValueExp>>(p1, p2); }
	static jni::ref<javax::management::ValueExp> minus(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"minus", jni::ref<javax::management::ValueExp>>(p1, p2); }
	static jni::ref<javax::management::ValueExp> div(jni::ref<javax::management::ValueExp> p1, jni::ref<javax::management::ValueExp> p2) { return call_static_method<"div", jni::ref<javax::management::ValueExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> initialSubString(jni::ref<javax::management::AttributeValueExp> p1, jni::ref<javax::management::StringValueExp> p2) { return call_static_method<"initialSubString", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> anySubString(jni::ref<javax::management::AttributeValueExp> p1, jni::ref<javax::management::StringValueExp> p2) { return call_static_method<"anySubString", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> finalSubString(jni::ref<javax::management::AttributeValueExp> p1, jni::ref<javax::management::StringValueExp> p2) { return call_static_method<"finalSubString", jni::ref<javax::management::QueryExp>>(p1, p2); }
	static jni::ref<javax::management::QueryExp> isInstanceOf(jni::ref<javax::management::StringValueExp> p1) { return call_static_method<"isInstanceOf", jni::ref<javax::management::QueryExp>>(p1); }

protected:

	Query(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_QUERY
