// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/management/DynamicMBean.h>
#include <scapix/java_api/javax/management/MBeanRegistration.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_STANDARDMBEAN_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_STANDARDMBEAN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management { class StandardMBean; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::StandardMBean>
{
	static constexpr fixed_string class_name = "javax/management/StandardMBean";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::management::DynamicMBean, scapix::java_api::javax::management::MBeanRegistration>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_STANDARDMBEAN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_STANDARDMBEAN)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_STANDARDMBEAN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/management/Attribute.h>
#include <scapix/java_api/javax/management/AttributeList.h>
#include <scapix/java_api/javax/management/MBeanInfo.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::StandardMBean : public jni::object_base<"javax/management/StandardMBean",
	java::lang::Object,
	javax::management::DynamicMBean,
	javax::management::MBeanRegistration>
{
public:

	static jni::ref<javax::management::StandardMBean> new_object(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Class> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::management::StandardMBean> new_object(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Class> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	void setImplementation(jni::ref<java::lang::Object> p1) { return call_method<"setImplementation", void>(p1); }
	jni::ref<java::lang::Object> getImplementation() { return call_method<"getImplementation", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Class> getMBeanInterface() { return call_method<"getMBeanInterface", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> getImplementationClass() { return call_method<"getImplementationClass", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Object> getAttribute(jni::ref<java::lang::String> p1) { return call_method<"getAttribute", jni::ref<java::lang::Object>>(p1); }
	void setAttribute(jni::ref<javax::management::Attribute> p1) { return call_method<"setAttribute", void>(p1); }
	jni::ref<javax::management::AttributeList> getAttributes(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"getAttributes", jni::ref<javax::management::AttributeList>>(p1); }
	jni::ref<javax::management::AttributeList> setAttributes(jni::ref<javax::management::AttributeList> p1) { return call_method<"setAttributes", jni::ref<javax::management::AttributeList>>(p1); }
	jni::ref<java::lang::Object> invoke(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::Object>> p2, jni::ref<jni::array<java::lang::String>> p3) { return call_method<"invoke", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<javax::management::MBeanInfo> getMBeanInfo() { return call_method<"getMBeanInfo", jni::ref<javax::management::MBeanInfo>>(); }
	jni::ref<javax::management::ObjectName> preRegister(jni::ref<javax::management::MBeanServer> p1, jni::ref<javax::management::ObjectName> p2) { return call_method<"preRegister", jni::ref<javax::management::ObjectName>>(p1, p2); }
	void postRegister(jni::ref<java::lang::Boolean> p1) { return call_method<"postRegister", void>(p1); }
	void preDeregister() { return call_method<"preDeregister", void>(); }
	void postDeregister() { return call_method<"postDeregister", void>(); }

protected:

	StandardMBean(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_STANDARDMBEAN
