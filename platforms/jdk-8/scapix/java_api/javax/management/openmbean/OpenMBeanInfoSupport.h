// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/management/MBeanInfo.h>
#include <scapix/java_api/javax/management/openmbean/OpenMBeanInfo.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANINFOSUPPORT_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANINFOSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management::openmbean { class OpenMBeanInfoSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::openmbean::OpenMBeanInfoSupport>
{
	static constexpr fixed_string class_name = "javax/management/openmbean/OpenMBeanInfoSupport";
	using base_classes = std::tuple<scapix::java_api::javax::management::MBeanInfo, scapix::java_api::javax::management::openmbean::OpenMBeanInfo>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANINFOSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANINFOSUPPORT)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANINFOSUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/management/Descriptor.h>
#include <scapix/java_api/javax/management/MBeanNotificationInfo.h>
#include <scapix/java_api/javax/management/openmbean/OpenMBeanAttributeInfo.h>
#include <scapix/java_api/javax/management/openmbean/OpenMBeanConstructorInfo.h>
#include <scapix/java_api/javax/management/openmbean/OpenMBeanOperationInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::openmbean::OpenMBeanInfoSupport : public jni::object_base<"javax/management/openmbean/OpenMBeanInfoSupport",
	javax::management::MBeanInfo,
	javax::management::openmbean::OpenMBeanInfo>
{
public:

	static jni::ref<javax::management::openmbean::OpenMBeanInfoSupport> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<javax::management::openmbean::OpenMBeanAttributeInfo>> p3, jni::ref<jni::array<javax::management::openmbean::OpenMBeanConstructorInfo>> p4, jni::ref<jni::array<javax::management::openmbean::OpenMBeanOperationInfo>> p5, jni::ref<jni::array<javax::management::MBeanNotificationInfo>> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<javax::management::openmbean::OpenMBeanInfoSupport> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<javax::management::openmbean::OpenMBeanAttributeInfo>> p3, jni::ref<jni::array<javax::management::openmbean::OpenMBeanConstructorInfo>> p4, jni::ref<jni::array<javax::management::openmbean::OpenMBeanOperationInfo>> p5, jni::ref<jni::array<javax::management::MBeanNotificationInfo>> p6, jni::ref<javax::management::Descriptor> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	OpenMBeanInfoSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANINFOSUPPORT
