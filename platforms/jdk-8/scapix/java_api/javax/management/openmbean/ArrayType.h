// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/management/openmbean/OpenType.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_ARRAYTYPE_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_ARRAYTYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management::openmbean { class ArrayType; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::openmbean::ArrayType>
{
	static constexpr fixed_string class_name = "javax/management/openmbean/ArrayType";
	using base_classes = std::tuple<scapix::java_api::javax::management::openmbean::OpenType>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_ARRAYTYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_ARRAYTYPE)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_ARRAYTYPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/management/openmbean/SimpleType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::openmbean::ArrayType : public jni::object_base<"javax/management/openmbean/ArrayType",
	javax::management::openmbean::OpenType>
{
public:

	static jni::ref<javax::management::openmbean::ArrayType> new_object(jint p1, jni::ref<javax::management::openmbean::OpenType> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::management::openmbean::ArrayType> new_object(jni::ref<javax::management::openmbean::SimpleType> p1, jboolean p2) { return base_::new_object(p1, p2); }
	jint getDimension() { return call_method<"getDimension", jint>(); }
	jni::ref<javax::management::openmbean::OpenType> getElementOpenType() { return call_method<"getElementOpenType", jni::ref<javax::management::openmbean::OpenType>>(); }
	jboolean isPrimitiveArray() { return call_method<"isPrimitiveArray", jboolean>(); }
	jboolean isValue(jni::ref<java::lang::Object> p1) { return call_method<"isValue", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<javax::management::openmbean::ArrayType> getArrayType(jni::ref<javax::management::openmbean::OpenType> p1) { return call_static_method<"getArrayType", jni::ref<javax::management::openmbean::ArrayType>>(p1); }
	static jni::ref<javax::management::openmbean::ArrayType> getPrimitiveArrayType(jni::ref<java::lang::Class> p1) { return call_static_method<"getPrimitiveArrayType", jni::ref<javax::management::openmbean::ArrayType>>(p1); }

protected:

	ArrayType(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_ARRAYTYPE
