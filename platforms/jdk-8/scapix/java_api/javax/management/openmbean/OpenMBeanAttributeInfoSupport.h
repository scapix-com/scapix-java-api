// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/management/MBeanAttributeInfo.h>
#include <scapix/java_api/javax/management/openmbean/OpenMBeanAttributeInfo.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANATTRIBUTEINFOSUPPORT_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANATTRIBUTEINFOSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management::openmbean { class OpenMBeanAttributeInfoSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::openmbean::OpenMBeanAttributeInfoSupport>
{
	static constexpr fixed_string class_name = "javax/management/openmbean/OpenMBeanAttributeInfoSupport";
	using base_classes = std::tuple<scapix::java_api::javax::management::MBeanAttributeInfo, scapix::java_api::javax::management::openmbean::OpenMBeanAttributeInfo>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANATTRIBUTEINFOSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANATTRIBUTEINFOSUPPORT)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANATTRIBUTEINFOSUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/management/Descriptor.h>
#include <scapix/java_api/javax/management/openmbean/OpenType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::openmbean::OpenMBeanAttributeInfoSupport : public jni::object_base<"javax/management/openmbean/OpenMBeanAttributeInfoSupport",
	javax::management::MBeanAttributeInfo,
	javax::management::openmbean::OpenMBeanAttributeInfo>
{
public:

	static jni::ref<javax::management::openmbean::OpenMBeanAttributeInfoSupport> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<javax::management::openmbean::OpenType> p3, jboolean p4, jboolean p5, jboolean p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<javax::management::openmbean::OpenMBeanAttributeInfoSupport> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<javax::management::openmbean::OpenType> p3, jboolean p4, jboolean p5, jboolean p6, jni::ref<javax::management::Descriptor> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<javax::management::openmbean::OpenMBeanAttributeInfoSupport> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<javax::management::openmbean::OpenType> p3, jboolean p4, jboolean p5, jboolean p6, jni::ref<java::lang::Object> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<javax::management::openmbean::OpenMBeanAttributeInfoSupport> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<javax::management::openmbean::OpenType> p3, jboolean p4, jboolean p5, jboolean p6, jni::ref<java::lang::Object> p7, jni::ref<jni::array<java::lang::Object>> p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jni::ref<javax::management::openmbean::OpenMBeanAttributeInfoSupport> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<javax::management::openmbean::OpenType> p3, jboolean p4, jboolean p5, jboolean p6, jni::ref<java::lang::Object> p7, jni::ref<java::lang::Comparable> p8, jni::ref<java::lang::Comparable> p9) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
	jni::ref<javax::management::openmbean::OpenType> getOpenType() { return call_method<"getOpenType", jni::ref<javax::management::openmbean::OpenType>>(); }
	jni::ref<java::lang::Object> getDefaultValue() { return call_method<"getDefaultValue", jni::ref<java::lang::Object>>(); }
	jni::ref<java::util::Set> getLegalValues() { return call_method<"getLegalValues", jni::ref<java::util::Set>>(); }
	jni::ref<java::lang::Comparable> getMinValue() { return call_method<"getMinValue", jni::ref<java::lang::Comparable>>(); }
	jni::ref<java::lang::Comparable> getMaxValue() { return call_method<"getMaxValue", jni::ref<java::lang::Comparable>>(); }
	jboolean hasDefaultValue() { return call_method<"hasDefaultValue", jboolean>(); }
	jboolean hasLegalValues() { return call_method<"hasLegalValues", jboolean>(); }
	jboolean hasMinValue() { return call_method<"hasMinValue", jboolean>(); }
	jboolean hasMaxValue() { return call_method<"hasMaxValue", jboolean>(); }
	jboolean isValue(jni::ref<java::lang::Object> p1) { return call_method<"isValue", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	OpenMBeanAttributeInfoSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_OPENMBEAN_OPENMBEANATTRIBUTEINFOSUPPORT
