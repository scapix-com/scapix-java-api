// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/net/URLClassLoader.h>
#include <scapix/java_api/javax/management/loading/MLetMBean.h>
#include <scapix/java_api/javax/management/MBeanRegistration.h>
#include <scapix/java_api/java/io/Externalizable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_LOADING_MLET_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_LOADING_MLET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management::loading { class MLet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::loading::MLet>
{
	static constexpr fixed_string class_name = "javax/management/loading/MLet";
	using base_classes = std::tuple<scapix::java_api::java::net::URLClassLoader, scapix::java_api::javax::management::loading::MLetMBean, scapix::java_api::javax::management::MBeanRegistration, scapix::java_api::java::io::Externalizable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_LOADING_MLET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_LOADING_MLET)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_LOADING_MLET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/ObjectInput.h>
#include <scapix/java_api/java/io/ObjectOutput.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/net/URLStreamHandlerFactory.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#include <scapix/java_api/javax/management/loading/ClassLoaderRepository.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::loading::MLet : public jni::object_base<"javax/management/loading/MLet",
	java::net::URLClassLoader,
	javax::management::loading::MLetMBean,
	javax::management::MBeanRegistration,
	java::io::Externalizable>
{
public:

	static jni::ref<javax::management::loading::MLet> new_object() { return base_::new_object(); }
	static jni::ref<javax::management::loading::MLet> new_object(jni::ref<jni::array<java::net::URL>> p1) { return base_::new_object(p1); }
	static jni::ref<javax::management::loading::MLet> new_object(jni::ref<jni::array<java::net::URL>> p1, jni::ref<java::lang::ClassLoader> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::management::loading::MLet> new_object(jni::ref<jni::array<java::net::URL>> p1, jni::ref<java::lang::ClassLoader> p2, jni::ref<java::net::URLStreamHandlerFactory> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::management::loading::MLet> new_object(jni::ref<jni::array<java::net::URL>> p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::management::loading::MLet> new_object(jni::ref<jni::array<java::net::URL>> p1, jni::ref<java::lang::ClassLoader> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<javax::management::loading::MLet> new_object(jni::ref<jni::array<java::net::URL>> p1, jni::ref<java::lang::ClassLoader> p2, jni::ref<java::net::URLStreamHandlerFactory> p3, jboolean p4) { return base_::new_object(p1, p2, p3, p4); }
	void addURL(jni::ref<java::net::URL> p1) { return call_method<"addURL", void>(p1); }
	void addURL(jni::ref<java::lang::String> p1) { return call_method<"addURL", void>(p1); }
	jni::ref<jni::array<java::net::URL>> getURLs() { return call_method<"getURLs", jni::ref<jni::array<java::net::URL>>>(); }
	jni::ref<java::util::Set> getMBeansFromURL(jni::ref<java::net::URL> p1) { return call_method<"getMBeansFromURL", jni::ref<java::util::Set>>(p1); }
	jni::ref<java::util::Set> getMBeansFromURL(jni::ref<java::lang::String> p1) { return call_method<"getMBeansFromURL", jni::ref<java::util::Set>>(p1); }
	jni::ref<java::lang::String> getLibraryDirectory() { return call_method<"getLibraryDirectory", jni::ref<java::lang::String>>(); }
	void setLibraryDirectory(jni::ref<java::lang::String> p1) { return call_method<"setLibraryDirectory", void>(p1); }
	jni::ref<javax::management::ObjectName> preRegister(jni::ref<javax::management::MBeanServer> p1, jni::ref<javax::management::ObjectName> p2) { return call_method<"preRegister", jni::ref<javax::management::ObjectName>>(p1, p2); }
	void postRegister(jni::ref<java::lang::Boolean> p1) { return call_method<"postRegister", void>(p1); }
	void preDeregister() { return call_method<"preDeregister", void>(); }
	void postDeregister() { return call_method<"postDeregister", void>(); }
	void writeExternal(jni::ref<java::io::ObjectOutput> p1) { return call_method<"writeExternal", void>(p1); }
	void readExternal(jni::ref<java::io::ObjectInput> p1) { return call_method<"readExternal", void>(p1); }
	jni::ref<java::lang::Class> loadClass(jni::ref<java::lang::String> p1, jni::ref<javax::management::loading::ClassLoaderRepository> p2) { return call_method<"loadClass", jni::ref<java::lang::Class>>(p1, p2); }

protected:

	MLet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_LOADING_MLET
