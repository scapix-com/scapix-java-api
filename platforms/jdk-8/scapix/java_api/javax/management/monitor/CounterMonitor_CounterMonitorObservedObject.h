// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/management/monitor/Monitor_ObservedObject.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_MONITOR_COUNTERMONITOR_COUNTERMONITOROBSERVEDOBJECT_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_MONITOR_COUNTERMONITOR_COUNTERMONITOROBSERVEDOBJECT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management::monitor { class CounterMonitor_CounterMonitorObservedObject; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::monitor::CounterMonitor_CounterMonitorObservedObject>
{
	static constexpr fixed_string class_name = "javax/management/monitor/CounterMonitor$CounterMonitorObservedObject";
	using base_classes = std::tuple<scapix::java_api::javax::management::monitor::Monitor_ObservedObject>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_MONITOR_COUNTERMONITOR_COUNTERMONITOROBSERVEDOBJECT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_MONITOR_COUNTERMONITOR_COUNTERMONITOROBSERVEDOBJECT)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_MONITOR_COUNTERMONITOR_COUNTERMONITOROBSERVEDOBJECT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#include <scapix/java_api/javax/management/monitor/Monitor_NumericalType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class javax::management::monitor::CounterMonitor_CounterMonitorObservedObject : public jni::object_base<"javax/management/monitor/CounterMonitor$CounterMonitorObservedObject",
	javax::management::monitor::Monitor_ObservedObject>
{
public:

	static jni::ref<javax::management::monitor::CounterMonitor_CounterMonitorObservedObject> new_object(jni::ref<javax::management::ObjectName> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::Number> getThreshold() { return call_method<"getThreshold", jni::ref<java::lang::Number>>(); }
	void setThreshold(jni::ref<java::lang::Number> p1) { return call_method<"setThreshold", void>(p1); }
	jni::ref<java::lang::Number> getPreviousScanCounter() { return call_method<"getPreviousScanCounter", jni::ref<java::lang::Number>>(); }
	void setPreviousScanCounter(jni::ref<java::lang::Number> p1) { return call_method<"setPreviousScanCounter", void>(p1); }
	jboolean getModulusExceeded() { return call_method<"getModulusExceeded", jboolean>(); }
	void setModulusExceeded(jboolean p1) { return call_method<"setModulusExceeded", void>(p1); }
	jni::ref<java::lang::Number> getDerivedGaugeExceeded() { return call_method<"getDerivedGaugeExceeded", jni::ref<java::lang::Number>>(); }
	void setDerivedGaugeExceeded(jni::ref<java::lang::Number> p1) { return call_method<"setDerivedGaugeExceeded", void>(p1); }
	jboolean getDerivedGaugeValid() { return call_method<"getDerivedGaugeValid", jboolean>(); }
	void setDerivedGaugeValid(jboolean p1) { return call_method<"setDerivedGaugeValid", void>(p1); }
	jboolean getEventAlreadyNotified() { return call_method<"getEventAlreadyNotified", jboolean>(); }
	void setEventAlreadyNotified(jboolean p1) { return call_method<"setEventAlreadyNotified", void>(p1); }
	jni::ref<javax::management::monitor::Monitor_NumericalType> getType() { return call_method<"getType", jni::ref<javax::management::monitor::Monitor_NumericalType>>(); }
	void setType(jni::ref<javax::management::monitor::Monitor_NumericalType> p1) { return call_method<"setType", void>(p1); }

protected:

	CounterMonitor_CounterMonitorObservedObject(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_MONITOR_COUNTERMONITOR_COUNTERMONITOROBSERVEDOBJECT
