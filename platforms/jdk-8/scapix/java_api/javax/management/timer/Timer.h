// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/management/NotificationBroadcasterSupport.h>
#include <scapix/java_api/javax/management/timer/TimerMBean.h>
#include <scapix/java_api/javax/management/MBeanRegistration.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_TIMER_TIMER_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_TIMER_TIMER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management::timer { class Timer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::timer::Timer>
{
	static constexpr fixed_string class_name = "javax/management/timer/Timer";
	using base_classes = std::tuple<scapix::java_api::javax::management::NotificationBroadcasterSupport, scapix::java_api::javax::management::timer::TimerMBean, scapix::java_api::javax::management::MBeanRegistration>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_TIMER_TIMER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_TIMER_TIMER)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_TIMER_TIMER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/Long.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/management/MBeanNotificationInfo.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::timer::Timer : public jni::object_base<"javax/management/timer/Timer",
	javax::management::NotificationBroadcasterSupport,
	javax::management::timer::TimerMBean,
	javax::management::MBeanRegistration>
{
public:

	static jlong ONE_SECOND() { return get_static_field<"ONE_SECOND", jlong>(); }
	static jlong ONE_MINUTE() { return get_static_field<"ONE_MINUTE", jlong>(); }
	static jlong ONE_HOUR() { return get_static_field<"ONE_HOUR", jlong>(); }
	static jlong ONE_DAY() { return get_static_field<"ONE_DAY", jlong>(); }
	static jlong ONE_WEEK() { return get_static_field<"ONE_WEEK", jlong>(); }

	static jni::ref<javax::management::timer::Timer> new_object() { return base_::new_object(); }
	jni::ref<javax::management::ObjectName> preRegister(jni::ref<javax::management::MBeanServer> p1, jni::ref<javax::management::ObjectName> p2) { return call_method<"preRegister", jni::ref<javax::management::ObjectName>>(p1, p2); }
	void postRegister(jni::ref<java::lang::Boolean> p1) { return call_method<"postRegister", void>(p1); }
	void preDeregister() { return call_method<"preDeregister", void>(); }
	void postDeregister() { return call_method<"postDeregister", void>(); }
	jni::ref<jni::array<javax::management::MBeanNotificationInfo>> getNotificationInfo() { return call_method<"getNotificationInfo", jni::ref<jni::array<javax::management::MBeanNotificationInfo>>>(); }
	void start() { return call_method<"start", void>(); }
	void stop() { return call_method<"stop", void>(); }
	jni::ref<java::lang::Integer> addNotification(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3, jni::ref<java::util::Date> p4, jlong p5, jlong p6, jboolean p7) { return call_method<"addNotification", jni::ref<java::lang::Integer>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::lang::Integer> addNotification(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3, jni::ref<java::util::Date> p4, jlong p5, jlong p6) { return call_method<"addNotification", jni::ref<java::lang::Integer>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::lang::Integer> addNotification(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3, jni::ref<java::util::Date> p4, jlong p5) { return call_method<"addNotification", jni::ref<java::lang::Integer>>(p1, p2, p3, p4, p5); }
	jni::ref<java::lang::Integer> addNotification(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3, jni::ref<java::util::Date> p4) { return call_method<"addNotification", jni::ref<java::lang::Integer>>(p1, p2, p3, p4); }
	void removeNotification(jni::ref<java::lang::Integer> p1) { return call_method<"removeNotification", void>(p1); }
	void removeNotifications(jni::ref<java::lang::String> p1) { return call_method<"removeNotifications", void>(p1); }
	void removeAllNotifications() { return call_method<"removeAllNotifications", void>(); }
	jint getNbNotifications() { return call_method<"getNbNotifications", jint>(); }
	jni::ref<java::util::Vector> getAllNotificationIDs() { return call_method<"getAllNotificationIDs", jni::ref<java::util::Vector>>(); }
	jni::ref<java::util::Vector> getNotificationIDs(jni::ref<java::lang::String> p1) { return call_method<"getNotificationIDs", jni::ref<java::util::Vector>>(p1); }
	jni::ref<java::lang::String> getNotificationType(jni::ref<java::lang::Integer> p1) { return call_method<"getNotificationType", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNotificationMessage(jni::ref<java::lang::Integer> p1) { return call_method<"getNotificationMessage", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Object> getNotificationUserData(jni::ref<java::lang::Integer> p1) { return call_method<"getNotificationUserData", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::util::Date> getDate(jni::ref<java::lang::Integer> p1) { return call_method<"getDate", jni::ref<java::util::Date>>(p1); }
	jni::ref<java::lang::Long> getPeriod(jni::ref<java::lang::Integer> p1) { return call_method<"getPeriod", jni::ref<java::lang::Long>>(p1); }
	jni::ref<java::lang::Long> getNbOccurences(jni::ref<java::lang::Integer> p1) { return call_method<"getNbOccurences", jni::ref<java::lang::Long>>(p1); }
	jni::ref<java::lang::Boolean> getFixedRate(jni::ref<java::lang::Integer> p1) { return call_method<"getFixedRate", jni::ref<java::lang::Boolean>>(p1); }
	jboolean getSendPastNotifications() { return call_method<"getSendPastNotifications", jboolean>(); }
	void setSendPastNotifications(jboolean p1) { return call_method<"setSendPastNotifications", void>(p1); }
	jboolean isActive() { return call_method<"isActive", jboolean>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }

protected:

	Timer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_TIMER_TIMER
