// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/management/remote/JMXConnector.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/javax/management/remote/JMXAddressable.h>

#ifndef SCAPIX_JAVA_API_JAVAX_MANAGEMENT_REMOTE_RMI_RMICONNECTOR_FWD
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_REMOTE_RMI_RMICONNECTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::management::remote::rmi { class RMIConnector; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::management::remote::rmi::RMIConnector>
{
	static constexpr fixed_string class_name = "javax/management/remote/rmi/RMIConnector";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::management::remote::JMXConnector, scapix::java_api::java::io::Serializable, scapix::java_api::javax::management::remote::JMXAddressable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_REMOTE_RMI_RMICONNECTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_MANAGEMENT_REMOTE_RMI_RMICONNECTOR)
#define SCAPIX_JAVA_API_JAVAX_MANAGEMENT_REMOTE_RMI_RMICONNECTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/management/MBeanServerConnection.h>
#include <scapix/java_api/javax/management/NotificationFilter.h>
#include <scapix/java_api/javax/management/NotificationListener.h>
#include <scapix/java_api/javax/management/remote/JMXServiceURL.h>
#include <scapix/java_api/javax/management/remote/rmi/RMIServer.h>
#include <scapix/java_api/javax/security/auth/Subject.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::management::remote::rmi::RMIConnector : public jni::object_base<"javax/management/remote/rmi/RMIConnector",
	java::lang::Object,
	javax::management::remote::JMXConnector,
	java::io::Serializable,
	javax::management::remote::JMXAddressable>
{
public:

	static jni::ref<javax::management::remote::rmi::RMIConnector> new_object(jni::ref<javax::management::remote::JMXServiceURL> p1, jni::ref<java::util::Map> p2) { return base_::new_object(p1, p2); }
	static jni::ref<javax::management::remote::rmi::RMIConnector> new_object(jni::ref<javax::management::remote::rmi::RMIServer> p1, jni::ref<java::util::Map> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<javax::management::remote::JMXServiceURL> getAddress() { return call_method<"getAddress", jni::ref<javax::management::remote::JMXServiceURL>>(); }
	void connect() { return call_method<"connect", void>(); }
	void connect(jni::ref<java::util::Map> p1) { return call_method<"connect", void>(p1); }
	jni::ref<java::lang::String> getConnectionId() { return call_method<"getConnectionId", jni::ref<java::lang::String>>(); }
	jni::ref<javax::management::MBeanServerConnection> getMBeanServerConnection() { return call_method<"getMBeanServerConnection", jni::ref<javax::management::MBeanServerConnection>>(); }
	jni::ref<javax::management::MBeanServerConnection> getMBeanServerConnection(jni::ref<javax::security::auth::Subject> p1) { return call_method<"getMBeanServerConnection", jni::ref<javax::management::MBeanServerConnection>>(p1); }
	void addConnectionNotificationListener(jni::ref<javax::management::NotificationListener> p1, jni::ref<javax::management::NotificationFilter> p2, jni::ref<java::lang::Object> p3) { return call_method<"addConnectionNotificationListener", void>(p1, p2, p3); }
	void removeConnectionNotificationListener(jni::ref<javax::management::NotificationListener> p1) { return call_method<"removeConnectionNotificationListener", void>(p1); }
	void removeConnectionNotificationListener(jni::ref<javax::management::NotificationListener> p1, jni::ref<javax::management::NotificationFilter> p2, jni::ref<java::lang::Object> p3) { return call_method<"removeConnectionNotificationListener", void>(p1, p2, p3); }
	void close() { return call_method<"close", void>(); }

protected:

	RMIConnector(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_MANAGEMENT_REMOTE_RMI_RMICONNECTOR
