// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_UTIL_LOCALE_LANGUAGETAG_FWD
#define SCAPIX_JAVA_API_SUN_UTIL_LOCALE_LANGUAGETAG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::util::locale { class LanguageTag; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::util::locale::LanguageTag>
{
	static constexpr fixed_string class_name = "sun/util/locale/LanguageTag";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOCALE_LANGUAGETAG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_UTIL_LOCALE_LANGUAGETAG)
#define SCAPIX_JAVA_API_SUN_UTIL_LOCALE_LANGUAGETAG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/sun/util/locale/BaseLocale.h>
#include <scapix/java_api/sun/util/locale/LocaleExtensions.h>
#include <scapix/java_api/sun/util/locale/ParseStatus.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::util::locale::LanguageTag : public jni::object_base<"sun/util/locale/LanguageTag",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> SEP() { return get_static_field<"SEP", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PRIVATEUSE() { return get_static_field<"PRIVATEUSE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNDETERMINED() { return get_static_field<"UNDETERMINED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PRIVUSE_VARIANT_PREFIX() { return get_static_field<"PRIVUSE_VARIANT_PREFIX", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::util::locale::LanguageTag> parse(jni::ref<java::lang::String> p1, jni::ref<sun::util::locale::ParseStatus> p2) { return call_static_method<"parse", jni::ref<sun::util::locale::LanguageTag>>(p1, p2); }
	static jni::ref<sun::util::locale::LanguageTag> parseLocale(jni::ref<sun::util::locale::BaseLocale> p1, jni::ref<sun::util::locale::LocaleExtensions> p2) { return call_static_method<"parseLocale", jni::ref<sun::util::locale::LanguageTag>>(p1, p2); }
	jni::ref<java::lang::String> getLanguage() { return call_method<"getLanguage", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::List> getExtlangs() { return call_method<"getExtlangs", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> getScript() { return call_method<"getScript", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getRegion() { return call_method<"getRegion", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::List> getVariants() { return call_method<"getVariants", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getExtensions() { return call_method<"getExtensions", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> getPrivateuse() { return call_method<"getPrivateuse", jni::ref<java::lang::String>>(); }
	static jboolean isLanguage(jni::ref<java::lang::String> p1) { return call_static_method<"isLanguage", jboolean>(p1); }
	static jboolean isExtlang(jni::ref<java::lang::String> p1) { return call_static_method<"isExtlang", jboolean>(p1); }
	static jboolean isScript(jni::ref<java::lang::String> p1) { return call_static_method<"isScript", jboolean>(p1); }
	static jboolean isRegion(jni::ref<java::lang::String> p1) { return call_static_method<"isRegion", jboolean>(p1); }
	static jboolean isVariant(jni::ref<java::lang::String> p1) { return call_static_method<"isVariant", jboolean>(p1); }
	static jboolean isExtensionSingleton(jni::ref<java::lang::String> p1) { return call_static_method<"isExtensionSingleton", jboolean>(p1); }
	static jboolean isExtensionSingletonChar(jchar p1) { return call_static_method<"isExtensionSingletonChar", jboolean>(p1); }
	static jboolean isExtensionSubtag(jni::ref<java::lang::String> p1) { return call_static_method<"isExtensionSubtag", jboolean>(p1); }
	static jboolean isPrivateusePrefix(jni::ref<java::lang::String> p1) { return call_static_method<"isPrivateusePrefix", jboolean>(p1); }
	static jboolean isPrivateusePrefixChar(jchar p1) { return call_static_method<"isPrivateusePrefixChar", jboolean>(p1); }
	static jboolean isPrivateuseSubtag(jni::ref<java::lang::String> p1) { return call_static_method<"isPrivateuseSubtag", jboolean>(p1); }
	static jni::ref<java::lang::String> canonicalizeLanguage(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizeLanguage", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizeExtlang(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizeExtlang", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizeScript(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizeScript", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizeRegion(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizeRegion", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizeVariant(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizeVariant", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizeExtension(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizeExtension", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizeExtensionSingleton(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizeExtensionSingleton", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizeExtensionSubtag(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizeExtensionSubtag", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizePrivateuse(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizePrivateuse", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> canonicalizePrivateuseSubtag(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalizePrivateuseSubtag", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	LanguageTag(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_UTIL_LOCALE_LANGUAGETAG
