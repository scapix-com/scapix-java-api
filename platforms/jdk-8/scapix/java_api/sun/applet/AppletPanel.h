// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Panel.h>
#include <scapix/java_api/java/applet/AppletStub.h>
#include <scapix/java_api/java/lang/Runnable.h>

#ifndef SCAPIX_JAVA_API_SUN_APPLET_APPLETPANEL_FWD
#define SCAPIX_JAVA_API_SUN_APPLET_APPLETPANEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::applet { class AppletPanel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::applet::AppletPanel>
{
	static constexpr fixed_string class_name = "sun/applet/AppletPanel";
	using base_classes = std::tuple<scapix::java_api::java::awt::Panel, scapix::java_api::java::applet::AppletStub, scapix::java_api::java::lang::Runnable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_APPLET_APPLETPANEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_APPLET_APPLETPANEL)
#define SCAPIX_JAVA_API_SUN_APPLET_APPLETPANEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/applet/Applet.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/Frame.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/sun/applet/AppletListener.h>
#include <scapix/java_api/sun/awt/AppContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::applet::AppletPanel : public jni::object_base<"sun/applet/AppletPanel",
	java::awt::Panel,
	java::applet::AppletStub,
	java::lang::Runnable>
{
public:

	static jint APPLET_DISPOSE() { return get_static_field<"APPLET_DISPOSE", jint>(); }
	static jint APPLET_LOAD() { return get_static_field<"APPLET_LOAD", jint>(); }
	static jint APPLET_INIT() { return get_static_field<"APPLET_INIT", jint>(); }
	static jint APPLET_START() { return get_static_field<"APPLET_START", jint>(); }
	static jint APPLET_STOP() { return get_static_field<"APPLET_STOP", jint>(); }
	static jint APPLET_DESTROY() { return get_static_field<"APPLET_DESTROY", jint>(); }
	static jint APPLET_QUIT() { return get_static_field<"APPLET_QUIT", jint>(); }
	static jint APPLET_ERROR() { return get_static_field<"APPLET_ERROR", jint>(); }
	static jint APPLET_RESIZE() { return get_static_field<"APPLET_RESIZE", jint>(); }
	static jint APPLET_LOADING() { return get_static_field<"APPLET_LOADING", jint>(); }
	static jint APPLET_LOADING_COMPLETED() { return get_static_field<"APPLET_LOADING_COMPLETED", jint>(); }

	static jni::ref<sun::applet::AppletPanel> new_object() { return base_::new_object(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jboolean hasInitialFocus() { return call_method<"hasInitialFocus", jboolean>(); }
	void init() { return call_method<"init", void>(); }
	jni::ref<java::awt::Dimension> minimumSize() { return call_method<"minimumSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::Dimension> preferredSize() { return call_method<"preferredSize", jni::ref<java::awt::Dimension>>(); }
	void addAppletListener(jni::ref<sun::applet::AppletListener> p1) { return call_method<"addAppletListener", void>(p1); }
	void removeAppletListener(jni::ref<sun::applet::AppletListener> p1) { return call_method<"removeAppletListener", void>(p1); }
	void dispatchAppletEvent(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"dispatchAppletEvent", void>(p1, p2); }
	void sendEvent(jint p1) { return call_method<"sendEvent", void>(p1); }
	void run() { return call_method<"run", void>(); }
	jboolean isActive() { return call_method<"isActive", jboolean>(); }
	void appletResize(jint p1, jint p2) { return call_method<"appletResize", void>(p1, p2); }
	void setBounds(jint p1, jint p2, jint p3, jint p4) { return call_method<"setBounds", void>(p1, p2, p3, p4); }
	jni::ref<java::applet::Applet> getApplet() { return call_method<"getApplet", jni::ref<java::applet::Applet>>(); }
	jni::ref<java::lang::String> getClassLoaderCacheKey() { return call_method<"getClassLoaderCacheKey", jni::ref<java::lang::String>>(); }
	static void flushClassLoader(jni::ref<java::lang::String> p1) { return call_static_method<"flushClassLoader", void>(p1); }
	static void flushClassLoaders() { return call_static_method<"flushClassLoaders", void>(); }
	jni::ref<java::lang::Thread> getAppletHandlerThread() { return call_method<"getAppletHandlerThread", jni::ref<java::lang::Thread>>(); }
	jint getAppletWidth() { return call_method<"getAppletWidth", jint>(); }
	jint getAppletHeight() { return call_method<"getAppletHeight", jint>(); }
	static void changeFrameAppContext(jni::ref<java::awt::Frame> p1, jni::ref<sun::awt::AppContext> p2) { return call_static_method<"changeFrameAppContext", void>(p1, p2); }

protected:

	AppletPanel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_APPLET_APPLETPANEL
