// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_PROXYGENERATOR_METHODINFO_FWD
#define SCAPIX_JAVA_API_SUN_MISC_PROXYGENERATOR_METHODINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class ProxyGenerator_MethodInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::ProxyGenerator_MethodInfo>
{
	static constexpr fixed_string class_name = "sun/misc/ProxyGenerator$MethodInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_PROXYGENERATOR_METHODINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_PROXYGENERATOR_METHODINFO)
#define SCAPIX_JAVA_API_SUN_MISC_PROXYGENERATOR_METHODINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/ByteArrayOutputStream.h>
#include <scapix/java_api/java/io/DataOutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/sun/misc/ProxyGenerator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::misc::ProxyGenerator_MethodInfo : public jni::object_base<"sun/misc/ProxyGenerator$MethodInfo",
	java::lang::Object>
{
public:

	jint accessFlags() { return get_field<"accessFlags", jint>(); }
	void accessFlags(jint v) { set_field<"accessFlags", jint>(v); }
	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> descriptor() { return get_field<"descriptor", jni::ref<java::lang::String>>(); }
	void descriptor(jni::ref<java::lang::String> v) { set_field<"descriptor", jni::ref<java::lang::String>>(v); }
	jshort maxStack() { return get_field<"maxStack", jshort>(); }
	void maxStack(jshort v) { set_field<"maxStack", jshort>(v); }
	jshort maxLocals() { return get_field<"maxLocals", jshort>(); }
	void maxLocals(jshort v) { set_field<"maxLocals", jshort>(v); }
	jni::ref<java::io::ByteArrayOutputStream> code() { return get_field<"code", jni::ref<java::io::ByteArrayOutputStream>>(); }
	void code(jni::ref<java::io::ByteArrayOutputStream> v) { set_field<"code", jni::ref<java::io::ByteArrayOutputStream>>(v); }
	jni::ref<java::util::List> exceptionTable() { return get_field<"exceptionTable", jni::ref<java::util::List>>(); }
	void exceptionTable(jni::ref<java::util::List> v) { set_field<"exceptionTable", jni::ref<java::util::List>>(v); }
	jni::ref<jni::array<jshort>> declaredExceptions() { return get_field<"declaredExceptions", jni::ref<jni::array<jshort>>>(); }
	void declaredExceptions(jni::ref<jni::array<jshort>> v) { set_field<"declaredExceptions", jni::ref<jni::array<jshort>>>(v); }

	static jni::ref<sun::misc::ProxyGenerator_MethodInfo> new_object(jni::ref<sun::misc::ProxyGenerator> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	void write(jni::ref<java::io::DataOutputStream> p1) { return call_method<"write", void>(p1); }

protected:

	ProxyGenerator_MethodInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_PROXYGENERATOR_METHODINFO
