// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_UNSAFE_FWD
#define SCAPIX_JAVA_API_SUN_MISC_UNSAFE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class Unsafe; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::Unsafe>
{
	static constexpr fixed_string class_name = "sun/misc/Unsafe";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_UNSAFE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_UNSAFE)
#define SCAPIX_JAVA_API_SUN_MISC_UNSAFE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/java/security/ProtectionDomain.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::Unsafe : public jni::object_base<"sun/misc/Unsafe",
	java::lang::Object>
{
public:

	static jint INVALID_FIELD_OFFSET() { return get_static_field<"INVALID_FIELD_OFFSET", jint>(); }
	static jint ARRAY_BOOLEAN_BASE_OFFSET() { return get_static_field<"ARRAY_BOOLEAN_BASE_OFFSET", jint>(); }
	static jint ARRAY_BYTE_BASE_OFFSET() { return get_static_field<"ARRAY_BYTE_BASE_OFFSET", jint>(); }
	static jint ARRAY_SHORT_BASE_OFFSET() { return get_static_field<"ARRAY_SHORT_BASE_OFFSET", jint>(); }
	static jint ARRAY_CHAR_BASE_OFFSET() { return get_static_field<"ARRAY_CHAR_BASE_OFFSET", jint>(); }
	static jint ARRAY_INT_BASE_OFFSET() { return get_static_field<"ARRAY_INT_BASE_OFFSET", jint>(); }
	static jint ARRAY_LONG_BASE_OFFSET() { return get_static_field<"ARRAY_LONG_BASE_OFFSET", jint>(); }
	static jint ARRAY_FLOAT_BASE_OFFSET() { return get_static_field<"ARRAY_FLOAT_BASE_OFFSET", jint>(); }
	static jint ARRAY_DOUBLE_BASE_OFFSET() { return get_static_field<"ARRAY_DOUBLE_BASE_OFFSET", jint>(); }
	static jint ARRAY_OBJECT_BASE_OFFSET() { return get_static_field<"ARRAY_OBJECT_BASE_OFFSET", jint>(); }
	static jint ARRAY_BOOLEAN_INDEX_SCALE() { return get_static_field<"ARRAY_BOOLEAN_INDEX_SCALE", jint>(); }
	static jint ARRAY_BYTE_INDEX_SCALE() { return get_static_field<"ARRAY_BYTE_INDEX_SCALE", jint>(); }
	static jint ARRAY_SHORT_INDEX_SCALE() { return get_static_field<"ARRAY_SHORT_INDEX_SCALE", jint>(); }
	static jint ARRAY_CHAR_INDEX_SCALE() { return get_static_field<"ARRAY_CHAR_INDEX_SCALE", jint>(); }
	static jint ARRAY_INT_INDEX_SCALE() { return get_static_field<"ARRAY_INT_INDEX_SCALE", jint>(); }
	static jint ARRAY_LONG_INDEX_SCALE() { return get_static_field<"ARRAY_LONG_INDEX_SCALE", jint>(); }
	static jint ARRAY_FLOAT_INDEX_SCALE() { return get_static_field<"ARRAY_FLOAT_INDEX_SCALE", jint>(); }
	static jint ARRAY_DOUBLE_INDEX_SCALE() { return get_static_field<"ARRAY_DOUBLE_INDEX_SCALE", jint>(); }
	static jint ARRAY_OBJECT_INDEX_SCALE() { return get_static_field<"ARRAY_OBJECT_INDEX_SCALE", jint>(); }
	static jint ADDRESS_SIZE() { return get_static_field<"ADDRESS_SIZE", jint>(); }

	static jni::ref<sun::misc::Unsafe> getUnsafe() { return call_static_method<"getUnsafe", jni::ref<sun::misc::Unsafe>>(); }
	jint getInt(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getInt", jint>(p1, p2); }
	void putInt(jni::ref<java::lang::Object> p1, jlong p2, jint p3) { return call_method<"putInt", void>(p1, p2, p3); }
	jni::ref<java::lang::Object> getObject(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	void putObject(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3) { return call_method<"putObject", void>(p1, p2, p3); }
	jboolean getBoolean(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getBoolean", jboolean>(p1, p2); }
	void putBoolean(jni::ref<java::lang::Object> p1, jlong p2, jboolean p3) { return call_method<"putBoolean", void>(p1, p2, p3); }
	jbyte getByte(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getByte", jbyte>(p1, p2); }
	void putByte(jni::ref<java::lang::Object> p1, jlong p2, jbyte p3) { return call_method<"putByte", void>(p1, p2, p3); }
	jshort getShort(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getShort", jshort>(p1, p2); }
	void putShort(jni::ref<java::lang::Object> p1, jlong p2, jshort p3) { return call_method<"putShort", void>(p1, p2, p3); }
	jchar getChar(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getChar", jchar>(p1, p2); }
	void putChar(jni::ref<java::lang::Object> p1, jlong p2, jchar p3) { return call_method<"putChar", void>(p1, p2, p3); }
	jlong getLong(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getLong", jlong>(p1, p2); }
	void putLong(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"putLong", void>(p1, p2, p3); }
	jfloat getFloat(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getFloat", jfloat>(p1, p2); }
	void putFloat(jni::ref<java::lang::Object> p1, jlong p2, jfloat p3) { return call_method<"putFloat", void>(p1, p2, p3); }
	jdouble getDouble(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getDouble", jdouble>(p1, p2); }
	void putDouble(jni::ref<java::lang::Object> p1, jlong p2, jdouble p3) { return call_method<"putDouble", void>(p1, p2, p3); }
	jint getInt(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getInt", jint>(p1, p2); }
	void putInt(jni::ref<java::lang::Object> p1, jint p2, jint p3) { return call_method<"putInt", void>(p1, p2, p3); }
	jni::ref<java::lang::Object> getObject(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getObject", jni::ref<java::lang::Object>>(p1, p2); }
	void putObject(jni::ref<java::lang::Object> p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"putObject", void>(p1, p2, p3); }
	jboolean getBoolean(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getBoolean", jboolean>(p1, p2); }
	void putBoolean(jni::ref<java::lang::Object> p1, jint p2, jboolean p3) { return call_method<"putBoolean", void>(p1, p2, p3); }
	jbyte getByte(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getByte", jbyte>(p1, p2); }
	void putByte(jni::ref<java::lang::Object> p1, jint p2, jbyte p3) { return call_method<"putByte", void>(p1, p2, p3); }
	jshort getShort(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getShort", jshort>(p1, p2); }
	void putShort(jni::ref<java::lang::Object> p1, jint p2, jshort p3) { return call_method<"putShort", void>(p1, p2, p3); }
	jchar getChar(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getChar", jchar>(p1, p2); }
	void putChar(jni::ref<java::lang::Object> p1, jint p2, jchar p3) { return call_method<"putChar", void>(p1, p2, p3); }
	jlong getLong(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getLong", jlong>(p1, p2); }
	void putLong(jni::ref<java::lang::Object> p1, jint p2, jlong p3) { return call_method<"putLong", void>(p1, p2, p3); }
	jfloat getFloat(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getFloat", jfloat>(p1, p2); }
	void putFloat(jni::ref<java::lang::Object> p1, jint p2, jfloat p3) { return call_method<"putFloat", void>(p1, p2, p3); }
	jdouble getDouble(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"getDouble", jdouble>(p1, p2); }
	void putDouble(jni::ref<java::lang::Object> p1, jint p2, jdouble p3) { return call_method<"putDouble", void>(p1, p2, p3); }
	jbyte getByte(jlong p1) { return call_method<"getByte", jbyte>(p1); }
	void putByte(jlong p1, jbyte p2) { return call_method<"putByte", void>(p1, p2); }
	jshort getShort(jlong p1) { return call_method<"getShort", jshort>(p1); }
	void putShort(jlong p1, jshort p2) { return call_method<"putShort", void>(p1, p2); }
	jchar getChar(jlong p1) { return call_method<"getChar", jchar>(p1); }
	void putChar(jlong p1, jchar p2) { return call_method<"putChar", void>(p1, p2); }
	jint getInt(jlong p1) { return call_method<"getInt", jint>(p1); }
	void putInt(jlong p1, jint p2) { return call_method<"putInt", void>(p1, p2); }
	jlong getLong(jlong p1) { return call_method<"getLong", jlong>(p1); }
	void putLong(jlong p1, jlong p2) { return call_method<"putLong", void>(p1, p2); }
	jfloat getFloat(jlong p1) { return call_method<"getFloat", jfloat>(p1); }
	void putFloat(jlong p1, jfloat p2) { return call_method<"putFloat", void>(p1, p2); }
	jdouble getDouble(jlong p1) { return call_method<"getDouble", jdouble>(p1); }
	void putDouble(jlong p1, jdouble p2) { return call_method<"putDouble", void>(p1, p2); }
	jlong getAddress(jlong p1) { return call_method<"getAddress", jlong>(p1); }
	void putAddress(jlong p1, jlong p2) { return call_method<"putAddress", void>(p1, p2); }
	jlong allocateMemory(jlong p1) { return call_method<"allocateMemory", jlong>(p1); }
	jlong reallocateMemory(jlong p1, jlong p2) { return call_method<"reallocateMemory", jlong>(p1, p2); }
	void setMemory(jni::ref<java::lang::Object> p1, jlong p2, jlong p3, jbyte p4) { return call_method<"setMemory", void>(p1, p2, p3, p4); }
	void setMemory(jlong p1, jlong p2, jbyte p3) { return call_method<"setMemory", void>(p1, p2, p3); }
	void copyMemory(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3, jlong p4, jlong p5) { return call_method<"copyMemory", void>(p1, p2, p3, p4, p5); }
	void copyMemory(jlong p1, jlong p2, jlong p3) { return call_method<"copyMemory", void>(p1, p2, p3); }
	void freeMemory(jlong p1) { return call_method<"freeMemory", void>(p1); }
	jint fieldOffset(jni::ref<java::lang::reflect::Field> p1) { return call_method<"fieldOffset", jint>(p1); }
	jni::ref<java::lang::Object> staticFieldBase(jni::ref<java::lang::Class> p1) { return call_method<"staticFieldBase", jni::ref<java::lang::Object>>(p1); }
	jlong staticFieldOffset(jni::ref<java::lang::reflect::Field> p1) { return call_method<"staticFieldOffset", jlong>(p1); }
	jlong objectFieldOffset(jni::ref<java::lang::reflect::Field> p1) { return call_method<"objectFieldOffset", jlong>(p1); }
	jni::ref<java::lang::Object> staticFieldBase(jni::ref<java::lang::reflect::Field> p1) { return call_method<"staticFieldBase", jni::ref<java::lang::Object>>(p1); }
	jboolean shouldBeInitialized(jni::ref<java::lang::Class> p1) { return call_method<"shouldBeInitialized", jboolean>(p1); }
	void ensureClassInitialized(jni::ref<java::lang::Class> p1) { return call_method<"ensureClassInitialized", void>(p1); }
	jint arrayBaseOffset(jni::ref<java::lang::Class> p1) { return call_method<"arrayBaseOffset", jint>(p1); }
	jint arrayIndexScale(jni::ref<java::lang::Class> p1) { return call_method<"arrayIndexScale", jint>(p1); }
	jint addressSize() { return call_method<"addressSize", jint>(); }
	jint pageSize() { return call_method<"pageSize", jint>(); }
	jni::ref<java::lang::Class> defineClass(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jint p4, jni::ref<java::lang::ClassLoader> p5, jni::ref<java::security::ProtectionDomain> p6) { return call_method<"defineClass", jni::ref<java::lang::Class>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::lang::Class> defineAnonymousClass(jni::ref<java::lang::Class> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<java::lang::Object>> p3) { return call_method<"defineAnonymousClass", jni::ref<java::lang::Class>>(p1, p2, p3); }
	jni::ref<java::lang::Object> allocateInstance(jni::ref<java::lang::Class> p1) { return call_method<"allocateInstance", jni::ref<java::lang::Object>>(p1); }
	void monitorEnter(jni::ref<java::lang::Object> p1) { return call_method<"monitorEnter", void>(p1); }
	void monitorExit(jni::ref<java::lang::Object> p1) { return call_method<"monitorExit", void>(p1); }
	jboolean tryMonitorEnter(jni::ref<java::lang::Object> p1) { return call_method<"tryMonitorEnter", jboolean>(p1); }
	void throwException(jni::ref<java::lang::Throwable> p1) { return call_method<"throwException", void>(p1); }
	jboolean compareAndSwapObject(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> p4) { return call_method<"compareAndSwapObject", jboolean>(p1, p2, p3, p4); }
	jboolean compareAndSwapInt(jni::ref<java::lang::Object> p1, jlong p2, jint p3, jint p4) { return call_method<"compareAndSwapInt", jboolean>(p1, p2, p3, p4); }
	jboolean compareAndSwapLong(jni::ref<java::lang::Object> p1, jlong p2, jlong p3, jlong p4) { return call_method<"compareAndSwapLong", jboolean>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> getObjectVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getObjectVolatile", jni::ref<java::lang::Object>>(p1, p2); }
	void putObjectVolatile(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3) { return call_method<"putObjectVolatile", void>(p1, p2, p3); }
	jint getIntVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getIntVolatile", jint>(p1, p2); }
	void putIntVolatile(jni::ref<java::lang::Object> p1, jlong p2, jint p3) { return call_method<"putIntVolatile", void>(p1, p2, p3); }
	jboolean getBooleanVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getBooleanVolatile", jboolean>(p1, p2); }
	void putBooleanVolatile(jni::ref<java::lang::Object> p1, jlong p2, jboolean p3) { return call_method<"putBooleanVolatile", void>(p1, p2, p3); }
	jbyte getByteVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getByteVolatile", jbyte>(p1, p2); }
	void putByteVolatile(jni::ref<java::lang::Object> p1, jlong p2, jbyte p3) { return call_method<"putByteVolatile", void>(p1, p2, p3); }
	jshort getShortVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getShortVolatile", jshort>(p1, p2); }
	void putShortVolatile(jni::ref<java::lang::Object> p1, jlong p2, jshort p3) { return call_method<"putShortVolatile", void>(p1, p2, p3); }
	jchar getCharVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getCharVolatile", jchar>(p1, p2); }
	void putCharVolatile(jni::ref<java::lang::Object> p1, jlong p2, jchar p3) { return call_method<"putCharVolatile", void>(p1, p2, p3); }
	jlong getLongVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getLongVolatile", jlong>(p1, p2); }
	void putLongVolatile(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"putLongVolatile", void>(p1, p2, p3); }
	jfloat getFloatVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getFloatVolatile", jfloat>(p1, p2); }
	void putFloatVolatile(jni::ref<java::lang::Object> p1, jlong p2, jfloat p3) { return call_method<"putFloatVolatile", void>(p1, p2, p3); }
	jdouble getDoubleVolatile(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"getDoubleVolatile", jdouble>(p1, p2); }
	void putDoubleVolatile(jni::ref<java::lang::Object> p1, jlong p2, jdouble p3) { return call_method<"putDoubleVolatile", void>(p1, p2, p3); }
	void putOrderedObject(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3) { return call_method<"putOrderedObject", void>(p1, p2, p3); }
	void putOrderedInt(jni::ref<java::lang::Object> p1, jlong p2, jint p3) { return call_method<"putOrderedInt", void>(p1, p2, p3); }
	void putOrderedLong(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"putOrderedLong", void>(p1, p2, p3); }
	void unpark(jni::ref<java::lang::Object> p1) { return call_method<"unpark", void>(p1); }
	void park(jboolean p1, jlong p2) { return call_method<"park", void>(p1, p2); }
	jint getLoadAverage(jni::ref<jni::array<jdouble>> p1, jint p2) { return call_method<"getLoadAverage", jint>(p1, p2); }
	jint getAndAddInt(jni::ref<java::lang::Object> p1, jlong p2, jint p3) { return call_method<"getAndAddInt", jint>(p1, p2, p3); }
	jlong getAndAddLong(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"getAndAddLong", jlong>(p1, p2, p3); }
	jint getAndSetInt(jni::ref<java::lang::Object> p1, jlong p2, jint p3) { return call_method<"getAndSetInt", jint>(p1, p2, p3); }
	jlong getAndSetLong(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"getAndSetLong", jlong>(p1, p2, p3); }
	jni::ref<java::lang::Object> getAndSetObject(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::lang::Object> p3) { return call_method<"getAndSetObject", jni::ref<java::lang::Object>>(p1, p2, p3); }
	void loadFence() { return call_method<"loadFence", void>(); }
	void storeFence() { return call_method<"storeFence", void>(); }
	void fullFence() { return call_method<"fullFence", void>(); }

protected:

	Unsafe(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_UNSAFE
