// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Dictionary.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_CACHE_FWD
#define SCAPIX_JAVA_API_SUN_MISC_CACHE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class Cache; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::Cache>
{
	static constexpr fixed_string class_name = "sun/misc/Cache";
	using base_classes = std::tuple<scapix::java_api::java::util::Dictionary>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_CACHE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_CACHE)
#define SCAPIX_JAVA_API_SUN_MISC_CACHE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Enumeration.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::Cache : public jni::object_base<"sun/misc/Cache",
	java::util::Dictionary>
{
public:

	static jni::ref<sun::misc::Cache> new_object(jint p1, jfloat p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::misc::Cache> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<sun::misc::Cache> new_object() { return base_::new_object(); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<java::util::Enumeration> keys() { return call_method<"keys", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::util::Enumeration> elements() { return call_method<"elements", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"put", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> remove(jni::ref<java::lang::Object> p1) { return call_method<"remove", jni::ref<java::lang::Object>>(p1); }

protected:

	Cache(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_CACHE
