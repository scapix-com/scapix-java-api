// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_MESSAGEUTILS_FWD
#define SCAPIX_JAVA_API_SUN_MISC_MESSAGEUTILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class MessageUtils; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::MessageUtils>
{
	static constexpr fixed_string class_name = "sun/misc/MessageUtils";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_MESSAGEUTILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_MESSAGEUTILS)
#define SCAPIX_JAVA_API_SUN_MISC_MESSAGEUTILS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::MessageUtils : public jni::object_base<"sun/misc/MessageUtils",
	java::lang::Object>
{
public:

	static jni::ref<sun::misc::MessageUtils> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> subst(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"subst", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> subst(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"subst", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> subst(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_static_method<"subst", jni::ref<java::lang::String>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> subst(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_static_method<"subst", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> substProp(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"substProp", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> substProp(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"substProp", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> substProp(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_static_method<"substProp", jni::ref<java::lang::String>>(p1, p2, p3, p4); }
	static void toStderr(jni::ref<java::lang::String> p1) { return call_static_method<"toStderr", void>(p1); }
	static void toStdout(jni::ref<java::lang::String> p1) { return call_static_method<"toStdout", void>(p1); }
	static void err(jni::ref<java::lang::String> p1) { return call_static_method<"err", void>(p1); }
	static void out(jni::ref<java::lang::String> p1) { return call_static_method<"out", void>(p1); }
	static void where() { return call_static_method<"where", void>(); }

protected:

	MessageUtils(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_MESSAGEUTILS
