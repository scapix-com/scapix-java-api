// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_JAVAUTILJARACCESS_FWD
#define SCAPIX_JAVA_API_SUN_MISC_JAVAUTILJARACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class JavaUtilJarAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::JavaUtilJarAccess>
{
	static constexpr fixed_string class_name = "sun/misc/JavaUtilJarAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_JAVAUTILJARACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_JAVAUTILJARACCESS)
#define SCAPIX_JAVA_API_SUN_MISC_JAVAUTILJARACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/security/CodeSource.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/jar/Attributes.h>
#include <scapix/java_api/java/util/jar/JarFile.h>
#include <scapix/java_api/java/util/jar/Manifest.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::JavaUtilJarAccess : public jni::object_base<"sun/misc/JavaUtilJarAccess",
	java::lang::Object>
{
public:

	jboolean jarFileHasClassPathAttribute(jni::ref<java::util::jar::JarFile> p1) { return call_method<"jarFileHasClassPathAttribute", jboolean>(p1); }
	jni::ref<jni::array<java::security::CodeSource>> getCodeSources(jni::ref<java::util::jar::JarFile> p1, jni::ref<java::net::URL> p2) { return call_method<"getCodeSources", jni::ref<jni::array<java::security::CodeSource>>>(p1, p2); }
	jni::ref<java::security::CodeSource> getCodeSource(jni::ref<java::util::jar::JarFile> p1, jni::ref<java::net::URL> p2, jni::ref<java::lang::String> p3) { return call_method<"getCodeSource", jni::ref<java::security::CodeSource>>(p1, p2, p3); }
	jni::ref<java::util::Enumeration> entryNames(jni::ref<java::util::jar::JarFile> p1, jni::ref<jni::array<java::security::CodeSource>> p2) { return call_method<"entryNames", jni::ref<java::util::Enumeration>>(p1, p2); }
	jni::ref<java::util::Enumeration> entries2(jni::ref<java::util::jar::JarFile> p1) { return call_method<"entries2", jni::ref<java::util::Enumeration>>(p1); }
	void setEagerValidation(jni::ref<java::util::jar::JarFile> p1, jboolean p2) { return call_method<"setEagerValidation", void>(p1, p2); }
	jni::ref<java::util::List> getManifestDigests(jni::ref<java::util::jar::JarFile> p1) { return call_method<"getManifestDigests", jni::ref<java::util::List>>(p1); }
	jni::ref<java::util::jar::Attributes> getTrustedAttributes(jni::ref<java::util::jar::Manifest> p1, jni::ref<java::lang::String> p2) { return call_method<"getTrustedAttributes", jni::ref<java::util::jar::Attributes>>(p1, p2); }
	void ensureInitialization(jni::ref<java::util::jar::JarFile> p1) { return call_method<"ensureInitialization", void>(p1); }
	jboolean isInitializing() { return call_method<"isInitializing", jboolean>(); }

protected:

	JavaUtilJarAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_JAVAUTILJARACCESS
