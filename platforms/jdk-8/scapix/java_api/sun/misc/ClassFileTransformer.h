// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_CLASSFILETRANSFORMER_FWD
#define SCAPIX_JAVA_API_SUN_MISC_CLASSFILETRANSFORMER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class ClassFileTransformer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::ClassFileTransformer>
{
	static constexpr fixed_string class_name = "sun/misc/ClassFileTransformer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_CLASSFILETRANSFORMER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_CLASSFILETRANSFORMER)
#define SCAPIX_JAVA_API_SUN_MISC_CLASSFILETRANSFORMER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::ClassFileTransformer : public jni::object_base<"sun/misc/ClassFileTransformer",
	java::lang::Object>
{
public:

	static jni::ref<sun::misc::ClassFileTransformer> new_object() { return base_::new_object(); }
	static void add(jni::ref<sun::misc::ClassFileTransformer> p1) { return call_static_method<"add", void>(p1); }
	static jni::ref<jni::array<sun::misc::ClassFileTransformer>> getTransformers() { return call_static_method<"getTransformers", jni::ref<jni::array<sun::misc::ClassFileTransformer>>>(); }
	jni::ref<jni::array<jbyte>> transform(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"transform", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }

protected:

	ClassFileTransformer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_CLASSFILETRANSFORMER
