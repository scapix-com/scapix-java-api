// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_FDBIGINTEGER_FWD
#define SCAPIX_JAVA_API_SUN_MISC_FDBIGINTEGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class FDBigInteger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::FDBigInteger>
{
	static constexpr fixed_string class_name = "sun/misc/FDBigInteger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_FDBIGINTEGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_FDBIGINTEGER)
#define SCAPIX_JAVA_API_SUN_MISC_FDBIGINTEGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::FDBigInteger : public jni::object_base<"sun/misc/FDBigInteger",
	java::lang::Object>
{
public:

	static jni::ref<sun::misc::FDBigInteger> ZERO() { return get_static_field<"ZERO", jni::ref<sun::misc::FDBigInteger>>(); }

	static jni::ref<sun::misc::FDBigInteger> new_object(jlong p1, jni::ref<jni::array<jchar>> p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<sun::misc::FDBigInteger> valueOfPow52(jint p1, jint p2) { return call_static_method<"valueOfPow52", jni::ref<sun::misc::FDBigInteger>>(p1, p2); }
	static jni::ref<sun::misc::FDBigInteger> valueOfMulPow52(jlong p1, jint p2, jint p3) { return call_static_method<"valueOfMulPow52", jni::ref<sun::misc::FDBigInteger>>(p1, p2, p3); }
	jint getNormalizationBias() { return call_method<"getNormalizationBias", jint>(); }
	jni::ref<sun::misc::FDBigInteger> leftShift(jint p1) { return call_method<"leftShift", jni::ref<sun::misc::FDBigInteger>>(p1); }
	jint quoRemIteration(jni::ref<sun::misc::FDBigInteger> p1) { return call_method<"quoRemIteration", jint>(p1); }
	jni::ref<sun::misc::FDBigInteger> multBy10() { return call_method<"multBy10", jni::ref<sun::misc::FDBigInteger>>(); }
	jni::ref<sun::misc::FDBigInteger> multByPow52(jint p1, jint p2) { return call_method<"multByPow52", jni::ref<sun::misc::FDBigInteger>>(p1, p2); }
	jni::ref<sun::misc::FDBigInteger> leftInplaceSub(jni::ref<sun::misc::FDBigInteger> p1) { return call_method<"leftInplaceSub", jni::ref<sun::misc::FDBigInteger>>(p1); }
	jni::ref<sun::misc::FDBigInteger> rightInplaceSub(jni::ref<sun::misc::FDBigInteger> p1) { return call_method<"rightInplaceSub", jni::ref<sun::misc::FDBigInteger>>(p1); }
	jint cmp(jni::ref<sun::misc::FDBigInteger> p1) { return call_method<"cmp", jint>(p1); }
	jint cmpPow52(jint p1, jint p2) { return call_method<"cmpPow52", jint>(p1, p2); }
	jint addAndCmp(jni::ref<sun::misc::FDBigInteger> p1, jni::ref<sun::misc::FDBigInteger> p2) { return call_method<"addAndCmp", jint>(p1, p2); }
	void makeImmutable() { return call_method<"makeImmutable", void>(); }
	jni::ref<java::lang::String> toHexString() { return call_method<"toHexString", jni::ref<java::lang::String>>(); }
	jni::ref<java::math::BigInteger> toBigInteger() { return call_method<"toBigInteger", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	FDBigInteger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_FDBIGINTEGER
