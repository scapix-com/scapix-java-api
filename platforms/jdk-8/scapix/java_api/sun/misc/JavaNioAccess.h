// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_JAVANIOACCESS_FWD
#define SCAPIX_JAVA_API_SUN_MISC_JAVANIOACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class JavaNioAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::JavaNioAccess>
{
	static constexpr fixed_string class_name = "sun/misc/JavaNioAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_JAVANIOACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_JAVANIOACCESS)
#define SCAPIX_JAVA_API_SUN_MISC_JAVANIOACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/sun/misc/JavaNioAccess_BufferPool.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::JavaNioAccess : public jni::object_base<"sun/misc/JavaNioAccess",
	java::lang::Object>
{
public:

	using BufferPool = JavaNioAccess_BufferPool;

	jni::ref<sun::misc::JavaNioAccess_BufferPool> getDirectBufferPool() { return call_method<"getDirectBufferPool", jni::ref<sun::misc::JavaNioAccess_BufferPool>>(); }
	jni::ref<java::nio::ByteBuffer> newDirectByteBuffer(jlong p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"newDirectByteBuffer", jni::ref<java::nio::ByteBuffer>>(p1, p2, p3); }
	void truncate(jni::ref<java::nio::Buffer> p1) { return call_method<"truncate", void>(p1); }

protected:

	JavaNioAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_JAVANIOACCESS
