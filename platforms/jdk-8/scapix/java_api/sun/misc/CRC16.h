// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_CRC16_FWD
#define SCAPIX_JAVA_API_SUN_MISC_CRC16_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class CRC16; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::CRC16>
{
	static constexpr fixed_string class_name = "sun/misc/CRC16";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_CRC16_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_CRC16)
#define SCAPIX_JAVA_API_SUN_MISC_CRC16

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::CRC16 : public jni::object_base<"sun/misc/CRC16",
	java::lang::Object>
{
public:

	jint value() { return get_field<"value", jint>(); }
	void value(jint v) { set_field<"value", jint>(v); }

	static jni::ref<sun::misc::CRC16> new_object() { return base_::new_object(); }
	void update(jbyte p1) { return call_method<"update", void>(p1); }
	void reset() { return call_method<"reset", void>(); }

protected:

	CRC16(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_CRC16
