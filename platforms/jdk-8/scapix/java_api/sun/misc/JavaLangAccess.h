// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_JAVALANGACCESS_FWD
#define SCAPIX_JAVA_API_SUN_MISC_JAVALANGACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class JavaLangAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::JavaLangAccess>
{
	static constexpr fixed_string class_name = "sun/misc/JavaLangAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_JAVALANGACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_JAVALANGACCESS)
#define SCAPIX_JAVA_API_SUN_MISC_JAVALANGACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Enum.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/StackTraceElement.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/lang/reflect/Executable.h>
#include <scapix/java_api/java/security/AccessControlContext.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/sun/nio/ch/Interruptible.h>
#include <scapix/java_api/sun/reflect/ConstantPool.h>
#include <scapix/java_api/sun/reflect/annotation/AnnotationType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::JavaLangAccess : public jni::object_base<"sun/misc/JavaLangAccess",
	java::lang::Object>
{
public:

	jni::ref<sun::reflect::ConstantPool> getConstantPool(jni::ref<java::lang::Class> p1) { return call_method<"getConstantPool", jni::ref<sun::reflect::ConstantPool>>(p1); }
	jboolean casAnnotationType(jni::ref<java::lang::Class> p1, jni::ref<sun::reflect::annotation::AnnotationType> p2, jni::ref<sun::reflect::annotation::AnnotationType> p3) { return call_method<"casAnnotationType", jboolean>(p1, p2, p3); }
	jni::ref<sun::reflect::annotation::AnnotationType> getAnnotationType(jni::ref<java::lang::Class> p1) { return call_method<"getAnnotationType", jni::ref<sun::reflect::annotation::AnnotationType>>(p1); }
	jni::ref<java::util::Map> getDeclaredAnnotationMap(jni::ref<java::lang::Class> p1) { return call_method<"getDeclaredAnnotationMap", jni::ref<java::util::Map>>(p1); }
	jni::ref<jni::array<jbyte>> getRawClassAnnotations(jni::ref<java::lang::Class> p1) { return call_method<"getRawClassAnnotations", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jbyte>> getRawClassTypeAnnotations(jni::ref<java::lang::Class> p1) { return call_method<"getRawClassTypeAnnotations", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jbyte>> getRawExecutableTypeAnnotations(jni::ref<java::lang::reflect::Executable> p1) { return call_method<"getRawExecutableTypeAnnotations", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<java::lang::Enum>> getEnumConstantsShared(jni::ref<java::lang::Class> p1) { return call_method<"getEnumConstantsShared", jni::ref<jni::array<java::lang::Enum>>>(p1); }
	void blockedOn(jni::ref<java::lang::Thread> p1, jni::ref<sun::nio::ch::Interruptible> p2) { return call_method<"blockedOn", void>(p1, p2); }
	void registerShutdownHook(jint p1, jboolean p2, jni::ref<java::lang::Runnable> p3) { return call_method<"registerShutdownHook", void>(p1, p2, p3); }
	jint getStackTraceDepth(jni::ref<java::lang::Throwable> p1) { return call_method<"getStackTraceDepth", jint>(p1); }
	jni::ref<java::lang::StackTraceElement> getStackTraceElement(jni::ref<java::lang::Throwable> p1, jint p2) { return call_method<"getStackTraceElement", jni::ref<java::lang::StackTraceElement>>(p1, p2); }
	jni::ref<java::lang::String> newStringUnsafe(jni::ref<jni::array<jchar>> p1) { return call_method<"newStringUnsafe", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Thread> newThreadWithAcc(jni::ref<java::lang::Runnable> p1, jni::ref<java::security::AccessControlContext> p2) { return call_method<"newThreadWithAcc", jni::ref<java::lang::Thread>>(p1, p2); }
	void invokeFinalize(jni::ref<java::lang::Object> p1) { return call_method<"invokeFinalize", void>(p1); }

protected:

	JavaLangAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_JAVALANGACCESS
