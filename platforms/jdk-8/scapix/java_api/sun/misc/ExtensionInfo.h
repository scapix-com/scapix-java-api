// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_EXTENSIONINFO_FWD
#define SCAPIX_JAVA_API_SUN_MISC_EXTENSIONINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class ExtensionInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::ExtensionInfo>
{
	static constexpr fixed_string class_name = "sun/misc/ExtensionInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_EXTENSIONINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_EXTENSIONINFO)
#define SCAPIX_JAVA_API_SUN_MISC_EXTENSIONINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/jar/Attributes.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::ExtensionInfo : public jni::object_base<"sun/misc/ExtensionInfo",
	java::lang::Object>
{
public:

	static jint COMPATIBLE() { return get_static_field<"COMPATIBLE", jint>(); }
	static jint REQUIRE_SPECIFICATION_UPGRADE() { return get_static_field<"REQUIRE_SPECIFICATION_UPGRADE", jint>(); }
	static jint REQUIRE_IMPLEMENTATION_UPGRADE() { return get_static_field<"REQUIRE_IMPLEMENTATION_UPGRADE", jint>(); }
	static jint REQUIRE_VENDOR_SWITCH() { return get_static_field<"REQUIRE_VENDOR_SWITCH", jint>(); }
	static jint INCOMPATIBLE() { return get_static_field<"INCOMPATIBLE", jint>(); }
	jni::ref<java::lang::String> title() { return get_field<"title", jni::ref<java::lang::String>>(); }
	void title(jni::ref<java::lang::String> v) { set_field<"title", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> specVersion() { return get_field<"specVersion", jni::ref<java::lang::String>>(); }
	void specVersion(jni::ref<java::lang::String> v) { set_field<"specVersion", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> specVendor() { return get_field<"specVendor", jni::ref<java::lang::String>>(); }
	void specVendor(jni::ref<java::lang::String> v) { set_field<"specVendor", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> implementationVersion() { return get_field<"implementationVersion", jni::ref<java::lang::String>>(); }
	void implementationVersion(jni::ref<java::lang::String> v) { set_field<"implementationVersion", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> vendor() { return get_field<"vendor", jni::ref<java::lang::String>>(); }
	void vendor(jni::ref<java::lang::String> v) { set_field<"vendor", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> vendorId() { return get_field<"vendorId", jni::ref<java::lang::String>>(); }
	void vendorId(jni::ref<java::lang::String> v) { set_field<"vendorId", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> url() { return get_field<"url", jni::ref<java::lang::String>>(); }
	void url(jni::ref<java::lang::String> v) { set_field<"url", jni::ref<java::lang::String>>(v); }

	static jni::ref<sun::misc::ExtensionInfo> new_object() { return base_::new_object(); }
	static jni::ref<sun::misc::ExtensionInfo> new_object(jni::ref<java::lang::String> p1, jni::ref<java::util::jar::Attributes> p2) { return base_::new_object(p1, p2); }
	jint isCompatibleWith(jni::ref<sun::misc::ExtensionInfo> p1) { return call_method<"isCompatibleWith", jint>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ExtensionInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_EXTENSIONINFO
