// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_FPUTILS_FWD
#define SCAPIX_JAVA_API_SUN_MISC_FPUTILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class FpUtils; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::FpUtils>
{
	static constexpr fixed_string class_name = "sun/misc/FpUtils";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_FPUTILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_FPUTILS)
#define SCAPIX_JAVA_API_SUN_MISC_FPUTILS

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::FpUtils : public jni::object_base<"sun/misc/FpUtils",
	java::lang::Object>
{
public:

	static jint getExponent(jdouble p1) { return call_static_method<"getExponent", jint>(p1); }
	static jint getExponent(jfloat p1) { return call_static_method<"getExponent", jint>(p1); }
	static jdouble rawCopySign(jdouble p1, jdouble p2) { return call_static_method<"rawCopySign", jdouble>(p1, p2); }
	static jfloat rawCopySign(jfloat p1, jfloat p2) { return call_static_method<"rawCopySign", jfloat>(p1, p2); }
	static jboolean isFinite(jdouble p1) { return call_static_method<"isFinite", jboolean>(p1); }
	static jboolean isFinite(jfloat p1) { return call_static_method<"isFinite", jboolean>(p1); }
	static jboolean isInfinite(jdouble p1) { return call_static_method<"isInfinite", jboolean>(p1); }
	static jboolean isInfinite(jfloat p1) { return call_static_method<"isInfinite", jboolean>(p1); }
	static jboolean isNaN(jdouble p1) { return call_static_method<"isNaN", jboolean>(p1); }
	static jboolean isNaN(jfloat p1) { return call_static_method<"isNaN", jboolean>(p1); }
	static jboolean isUnordered(jdouble p1, jdouble p2) { return call_static_method<"isUnordered", jboolean>(p1, p2); }
	static jboolean isUnordered(jfloat p1, jfloat p2) { return call_static_method<"isUnordered", jboolean>(p1, p2); }
	static jint ilogb(jdouble p1) { return call_static_method<"ilogb", jint>(p1); }
	static jint ilogb(jfloat p1) { return call_static_method<"ilogb", jint>(p1); }
	static jdouble scalb(jdouble p1, jint p2) { return call_static_method<"scalb", jdouble>(p1, p2); }
	static jfloat scalb(jfloat p1, jint p2) { return call_static_method<"scalb", jfloat>(p1, p2); }
	static jdouble nextAfter(jdouble p1, jdouble p2) { return call_static_method<"nextAfter", jdouble>(p1, p2); }
	static jfloat nextAfter(jfloat p1, jdouble p2) { return call_static_method<"nextAfter", jfloat>(p1, p2); }
	static jdouble nextUp(jdouble p1) { return call_static_method<"nextUp", jdouble>(p1); }
	static jfloat nextUp(jfloat p1) { return call_static_method<"nextUp", jfloat>(p1); }
	static jdouble nextDown(jdouble p1) { return call_static_method<"nextDown", jdouble>(p1); }
	static jdouble nextDown(jfloat p1) { return call_static_method<"nextDown", jdouble>(p1); }
	static jdouble copySign(jdouble p1, jdouble p2) { return call_static_method<"copySign", jdouble>(p1, p2); }
	static jfloat copySign(jfloat p1, jfloat p2) { return call_static_method<"copySign", jfloat>(p1, p2); }
	static jdouble ulp(jdouble p1) { return call_static_method<"ulp", jdouble>(p1); }
	static jfloat ulp(jfloat p1) { return call_static_method<"ulp", jfloat>(p1); }
	static jdouble signum(jdouble p1) { return call_static_method<"signum", jdouble>(p1); }
	static jfloat signum(jfloat p1) { return call_static_method<"signum", jfloat>(p1); }

protected:

	FpUtils(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_FPUTILS
