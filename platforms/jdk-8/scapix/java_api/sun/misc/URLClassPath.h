// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_URLCLASSPATH_FWD
#define SCAPIX_JAVA_API_SUN_MISC_URLCLASSPATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class URLClassPath; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::URLClassPath>
{
	static constexpr fixed_string class_name = "sun/misc/URLClassPath";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_URLCLASSPATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_URLCLASSPATH)
#define SCAPIX_JAVA_API_SUN_MISC_URLCLASSPATH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/net/URLStreamHandlerFactory.h>
#include <scapix/java_api/java/security/AccessControlContext.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/sun/misc/Resource.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::URLClassPath : public jni::object_base<"sun/misc/URLClassPath",
	java::lang::Object>
{
public:

	static jni::ref<sun::misc::URLClassPath> new_object(jni::ref<jni::array<java::net::URL>> p1, jni::ref<java::net::URLStreamHandlerFactory> p2, jni::ref<java::security::AccessControlContext> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::misc::URLClassPath> new_object(jni::ref<jni::array<java::net::URL>> p1) { return base_::new_object(p1); }
	static jni::ref<sun::misc::URLClassPath> new_object(jni::ref<jni::array<java::net::URL>> p1, jni::ref<java::security::AccessControlContext> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::util::List> closeLoaders() { return call_method<"closeLoaders", jni::ref<java::util::List>>(); }
	void addURL(jni::ref<java::net::URL> p1) { return call_method<"addURL", void>(p1); }
	jni::ref<jni::array<java::net::URL>> getURLs() { return call_method<"getURLs", jni::ref<jni::array<java::net::URL>>>(); }
	jni::ref<java::net::URL> findResource(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"findResource", jni::ref<java::net::URL>>(p1, p2); }
	jni::ref<sun::misc::Resource> getResource(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"getResource", jni::ref<sun::misc::Resource>>(p1, p2); }
	jni::ref<java::util::Enumeration> findResources(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"findResources", jni::ref<java::util::Enumeration>>(p1, p2); }
	jni::ref<sun::misc::Resource> getResource(jni::ref<java::lang::String> p1) { return call_method<"getResource", jni::ref<sun::misc::Resource>>(p1); }
	jni::ref<java::util::Enumeration> getResources(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"getResources", jni::ref<java::util::Enumeration>>(p1, p2); }
	jni::ref<java::util::Enumeration> getResources(jni::ref<java::lang::String> p1) { return call_method<"getResources", jni::ref<java::util::Enumeration>>(p1); }
	jni::ref<java::net::URL> checkURL(jni::ref<java::net::URL> p1) { return call_method<"checkURL", jni::ref<java::net::URL>>(p1); }

protected:

	URLClassPath(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_URLCLASSPATH
