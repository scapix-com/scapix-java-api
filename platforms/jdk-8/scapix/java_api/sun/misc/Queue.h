// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_QUEUE_FWD
#define SCAPIX_JAVA_API_SUN_MISC_QUEUE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class Queue; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::Queue>
{
	static constexpr fixed_string class_name = "sun/misc/Queue";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_QUEUE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_QUEUE)
#define SCAPIX_JAVA_API_SUN_MISC_QUEUE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Enumeration.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::Queue : public jni::object_base<"sun/misc/Queue",
	java::lang::Object>
{
public:

	static jni::ref<sun::misc::Queue> new_object() { return base_::new_object(); }
	void enqueue(jni::ref<java::lang::Object> p1) { return call_method<"enqueue", void>(p1); }
	jni::ref<java::lang::Object> dequeue() { return call_method<"dequeue", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> dequeue(jlong p1) { return call_method<"dequeue", jni::ref<java::lang::Object>>(p1); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<java::util::Enumeration> elements() { return call_method<"elements", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::util::Enumeration> reverseElements() { return call_method<"reverseElements", jni::ref<java::util::Enumeration>>(); }
	void dump(jni::ref<java::lang::String> p1) { return call_method<"dump", void>(p1); }

protected:

	Queue(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_QUEUE
