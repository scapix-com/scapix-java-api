// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MISC_VM_FWD
#define SCAPIX_JAVA_API_SUN_MISC_VM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::misc { class VM; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::misc::VM>
{
	static constexpr fixed_string class_name = "sun/misc/VM";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_VM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MISC_VM)
#define SCAPIX_JAVA_API_SUN_MISC_VM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread_State.h>
#include <scapix/java_api/java/lang/ThreadGroup.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/sun/misc/VMNotification.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::misc::VM : public jni::object_base<"sun/misc/VM",
	java::lang::Object>
{
public:

	static jint STATE_GREEN() { return get_static_field<"STATE_GREEN", jint>(); }
	static jint STATE_YELLOW() { return get_static_field<"STATE_YELLOW", jint>(); }
	static jint STATE_RED() { return get_static_field<"STATE_RED", jint>(); }

	static jni::ref<sun::misc::VM> new_object() { return base_::new_object(); }
	static jboolean threadsSuspended() { return call_static_method<"threadsSuspended", jboolean>(); }
	static jboolean allowThreadSuspension(jni::ref<java::lang::ThreadGroup> p1, jboolean p2) { return call_static_method<"allowThreadSuspension", jboolean>(p1, p2); }
	static jboolean suspendThreads() { return call_static_method<"suspendThreads", jboolean>(); }
	static void unsuspendThreads() { return call_static_method<"unsuspendThreads", void>(); }
	static void unsuspendSomeThreads() { return call_static_method<"unsuspendSomeThreads", void>(); }
	static jint getState() { return call_static_method<"getState", jint>(); }
	static void registerVMNotification(jni::ref<sun::misc::VMNotification> p1) { return call_static_method<"registerVMNotification", void>(p1); }
	static void asChange(jint p1, jint p2) { return call_static_method<"asChange", void>(p1, p2); }
	static void asChange_otherthread(jint p1, jint p2) { return call_static_method<"asChange_otherthread", void>(p1, p2); }
	static void booted() { return call_static_method<"booted", void>(); }
	static jboolean isBooted() { return call_static_method<"isBooted", jboolean>(); }
	static void awaitBooted() { return call_static_method<"awaitBooted", void>(); }
	static jlong maxDirectMemory() { return call_static_method<"maxDirectMemory", jlong>(); }
	static jboolean isDirectMemoryPageAligned() { return call_static_method<"isDirectMemoryPageAligned", jboolean>(); }
	static jboolean allowArraySyntax() { return call_static_method<"allowArraySyntax", jboolean>(); }
	static jboolean isSystemDomainLoader(jni::ref<java::lang::ClassLoader> p1) { return call_static_method<"isSystemDomainLoader", jboolean>(p1); }
	static jni::ref<java::lang::String> getSavedProperty(jni::ref<java::lang::String> p1) { return call_static_method<"getSavedProperty", jni::ref<java::lang::String>>(p1); }
	static void saveAndRemoveProperties(jni::ref<java::util::Properties> p1) { return call_static_method<"saveAndRemoveProperties", void>(p1); }
	static void initializeOSEnvironment() { return call_static_method<"initializeOSEnvironment", void>(); }
	static jint getFinalRefCount() { return call_static_method<"getFinalRefCount", jint>(); }
	static jint getPeakFinalRefCount() { return call_static_method<"getPeakFinalRefCount", jint>(); }
	static void addFinalRefCount(jint p1) { return call_static_method<"addFinalRefCount", void>(p1); }
	static jni::ref<java::lang::Thread_State> toThreadState(jint p1) { return call_static_method<"toThreadState", jni::ref<java::lang::Thread_State>>(p1); }
	static jni::ref<java::lang::ClassLoader> latestUserDefinedLoader0() { return call_static_method<"latestUserDefinedLoader0", jni::ref<java::lang::ClassLoader>>(); }
	static jni::ref<java::lang::ClassLoader> latestUserDefinedLoader() { return call_static_method<"latestUserDefinedLoader", jni::ref<java::lang::ClassLoader>>(); }

protected:

	VM(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MISC_VM
