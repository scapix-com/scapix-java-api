// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/font/FileFont.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_TYPE1FONT_FWD
#define SCAPIX_JAVA_API_SUN_FONT_TYPE1FONT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class Type1Font; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::Type1Font>
{
	static constexpr fixed_string class_name = "sun/font/Type1Font";
	using base_classes = std::tuple<scapix::java_api::sun::font::FileFont>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_TYPE1FONT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_TYPE1FONT)
#define SCAPIX_JAVA_API_SUN_FONT_TYPE1FONT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::Type1Font : public jni::object_base<"sun/font/Type1Font",
	sun::font::FileFont>
{
public:

	static jni::ref<sun::font::Type1Font> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::font::Type1Font> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::nio::ByteBuffer> readBlock(jint p1, jint p2) { return call_method<"readBlock", jni::ref<java::nio::ByteBuffer>>(p1, p2); }
	jint getFileSize() { return call_method<"getFileSize", jint>(); }
	jni::ref<java::lang::String> getPostscriptName() { return call_method<"getPostscriptName", jni::ref<java::lang::String>>(); }
	jint getNumGlyphs() { return call_method<"getNumGlyphs", jint>(); }
	jint getMissingGlyphCode() { return call_method<"getMissingGlyphCode", jint>(); }
	jint getGlyphCode(jchar p1) { return call_method<"getGlyphCode", jint>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Type1Font(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_TYPE1FONT
