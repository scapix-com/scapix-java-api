// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_FONTRUNITERATOR_FWD
#define SCAPIX_JAVA_API_SUN_FONT_FONTRUNITERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class FontRunIterator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::FontRunIterator>
{
	static constexpr fixed_string class_name = "sun/font/FontRunIterator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONTRUNITERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_FONTRUNITERATOR)
#define SCAPIX_JAVA_API_SUN_FONT_FONTRUNITERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/font/CompositeFont.h>
#include <scapix/java_api/sun/font/PhysicalFont.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::FontRunIterator : public jni::object_base<"sun/font/FontRunIterator",
	java::lang::Object>
{
public:

	static jni::ref<sun::font::FontRunIterator> new_object() { return base_::new_object(); }
	void init(jni::ref<sun::font::CompositeFont> p1, jni::ref<jni::array<jchar>> p2, jint p3, jint p4) { return call_method<"init", void>(p1, p2, p3, p4); }
	jni::ref<sun::font::PhysicalFont> getFont() { return call_method<"getFont", jni::ref<sun::font::PhysicalFont>>(); }
	jint getGlyphMask() { return call_method<"getGlyphMask", jint>(); }
	jint getPos() { return call_method<"getPos", jint>(); }
	jboolean next(jint p1, jint p2) { return call_method<"next", jboolean>(p1, p2); }
	jboolean next() { return call_method<"next", jboolean>(); }

protected:

	FontRunIterator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONTRUNITERATOR
