// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/font/FileFont.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_TRUETYPEFONT_FWD
#define SCAPIX_JAVA_API_SUN_FONT_TRUETYPEFONT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class TrueTypeFont; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::TrueTypeFont>
{
	static constexpr fixed_string class_name = "sun/font/TrueTypeFont";
	using base_classes = std::tuple<scapix::java_api::sun::font::FileFont>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_TRUETYPEFONT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_TRUETYPEFONT)
#define SCAPIX_JAVA_API_SUN_FONT_TRUETYPEFONT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/sun/font/CharToGlyphMapper.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::TrueTypeFont : public jni::object_base<"sun/font/TrueTypeFont",
	sun::font::FileFont>
{
public:

	static jint cmapTag() { return get_static_field<"cmapTag", jint>(); }
	static jint glyfTag() { return get_static_field<"glyfTag", jint>(); }
	static jint headTag() { return get_static_field<"headTag", jint>(); }
	static jint hheaTag() { return get_static_field<"hheaTag", jint>(); }
	static jint hmtxTag() { return get_static_field<"hmtxTag", jint>(); }
	static jint locaTag() { return get_static_field<"locaTag", jint>(); }
	static jint maxpTag() { return get_static_field<"maxpTag", jint>(); }
	static jint nameTag() { return get_static_field<"nameTag", jint>(); }
	static jint postTag() { return get_static_field<"postTag", jint>(); }
	static jint os_2Tag() { return get_static_field<"os_2Tag", jint>(); }
	static jint GDEFTag() { return get_static_field<"GDEFTag", jint>(); }
	static jint GPOSTag() { return get_static_field<"GPOSTag", jint>(); }
	static jint GSUBTag() { return get_static_field<"GSUBTag", jint>(); }
	static jint mortTag() { return get_static_field<"mortTag", jint>(); }
	static jint morxTag() { return get_static_field<"morxTag", jint>(); }
	static jint fdscTag() { return get_static_field<"fdscTag", jint>(); }
	static jint fvarTag() { return get_static_field<"fvarTag", jint>(); }
	static jint featTag() { return get_static_field<"featTag", jint>(); }
	static jint EBLCTag() { return get_static_field<"EBLCTag", jint>(); }
	static jint gaspTag() { return get_static_field<"gaspTag", jint>(); }
	static jint ttcfTag() { return get_static_field<"ttcfTag", jint>(); }
	static jint v1ttTag() { return get_static_field<"v1ttTag", jint>(); }
	static jint trueTag() { return get_static_field<"trueTag", jint>(); }
	static jint ottoTag() { return get_static_field<"ottoTag", jint>(); }
	static jint MS_PLATFORM_ID() { return get_static_field<"MS_PLATFORM_ID", jint>(); }
	static jshort ENGLISH_LOCALE_ID() { return get_static_field<"ENGLISH_LOCALE_ID", jshort>(); }
	static jint FAMILY_NAME_ID() { return get_static_field<"FAMILY_NAME_ID", jint>(); }
	static jint FULL_NAME_ID() { return get_static_field<"FULL_NAME_ID", jint>(); }
	static jint POSTSCRIPT_NAME_ID() { return get_static_field<"POSTSCRIPT_NAME_ID", jint>(); }
	static jint reserved_bits1() { return get_static_field<"reserved_bits1", jint>(); }
	static jint reserved_bits2() { return get_static_field<"reserved_bits2", jint>(); }

	static jni::ref<sun::font::TrueTypeFont> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jint p3, jboolean p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<sun::font::TrueTypeFont> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jint p3, jboolean p4, jboolean p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	jni::ref<java::lang::String> getFullName() { return call_method<"getFullName", jni::ref<java::lang::String>>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getWeight() { return call_method<"getWeight", jint>(); }
	void getStyleMetrics(jfloat p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_method<"getStyleMetrics", void>(p1, p2, p3); }
	jint getFontCount() { return call_method<"getFontCount", jint>(); }
	jni::ref<java::lang::String> getPostscriptName() { return call_method<"getPostscriptName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFontName(jni::ref<java::util::Locale> p1) { return call_method<"getFontName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getFamilyName(jni::ref<java::util::Locale> p1) { return call_method<"getFamilyName", jni::ref<java::lang::String>>(p1); }
	jni::ref<sun::font::CharToGlyphMapper> getMapper() { return call_method<"getMapper", jni::ref<sun::font::CharToGlyphMapper>>(); }
	jboolean useAAForPtSize(jint p1) { return call_method<"useAAForPtSize", jboolean>(p1); }
	jboolean hasSupplementaryChars() { return call_method<"hasSupplementaryChars", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	TrueTypeFont(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_TRUETYPEFONT
