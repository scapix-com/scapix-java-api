// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_FONT2D_FWD
#define SCAPIX_JAVA_API_SUN_FONT_FONT2D_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class Font2D; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::Font2D>
{
	static constexpr fixed_string class_name = "sun/font/Font2D";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONT2D_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_FONT2D)
#define SCAPIX_JAVA_API_SUN_FONT_FONT2D

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/font/FontRenderContext.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/sun/font/Font2DHandle.h>
#include <scapix/java_api/sun/font/FontStrike.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::Font2D : public jni::object_base<"sun/font/Font2D",
	java::lang::Object>
{
public:

	static jint FONT_CONFIG_RANK() { return get_static_field<"FONT_CONFIG_RANK", jint>(); }
	static jint JRE_RANK() { return get_static_field<"JRE_RANK", jint>(); }
	static jint TTF_RANK() { return get_static_field<"TTF_RANK", jint>(); }
	static jint TYPE1_RANK() { return get_static_field<"TYPE1_RANK", jint>(); }
	static jint NATIVE_RANK() { return get_static_field<"NATIVE_RANK", jint>(); }
	static jint UNKNOWN_RANK() { return get_static_field<"UNKNOWN_RANK", jint>(); }
	static jint DEFAULT_RANK() { return get_static_field<"DEFAULT_RANK", jint>(); }
	jni::ref<sun::font::Font2DHandle> handle() { return get_field<"handle", jni::ref<sun::font::Font2DHandle>>(); }
	void handle(jni::ref<sun::font::Font2DHandle> v) { set_field<"handle", jni::ref<sun::font::Font2DHandle>>(v); }
	static jint FWIDTH_NORMAL() { return get_static_field<"FWIDTH_NORMAL", jint>(); }
	static jint FWEIGHT_NORMAL() { return get_static_field<"FWEIGHT_NORMAL", jint>(); }
	static jint FWEIGHT_BOLD() { return get_static_field<"FWEIGHT_BOLD", jint>(); }

	static jni::ref<sun::font::Font2D> new_object() { return base_::new_object(); }
	jint getStyle() { return call_method<"getStyle", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getWeight() { return call_method<"getWeight", jint>(); }
	jni::ref<sun::font::FontStrike> getStrike(jni::ref<java::awt::Font> p1) { return call_method<"getStrike", jni::ref<sun::font::FontStrike>>(p1); }
	jni::ref<sun::font::FontStrike> getStrike(jni::ref<java::awt::Font> p1, jni::ref<java::awt::geom::AffineTransform> p2, jint p3, jint p4) { return call_method<"getStrike", jni::ref<sun::font::FontStrike>>(p1, p2, p3, p4); }
	jni::ref<sun::font::FontStrike> getStrike(jni::ref<java::awt::Font> p1, jni::ref<java::awt::geom::AffineTransform> p2, jni::ref<java::awt::geom::AffineTransform> p3, jint p4, jint p5) { return call_method<"getStrike", jni::ref<sun::font::FontStrike>>(p1, p2, p3, p4, p5); }
	jni::ref<sun::font::FontStrike> getStrike(jni::ref<java::awt::Font> p1, jni::ref<java::awt::font::FontRenderContext> p2) { return call_method<"getStrike", jni::ref<sun::font::FontStrike>>(p1, p2); }
	void getFontMetrics(jni::ref<java::awt::Font> p1, jni::ref<java::awt::geom::AffineTransform> p2, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> p4, jni::ref<jni::array<jfloat>> p5) { return call_method<"getFontMetrics", void>(p1, p2, p3, p4, p5); }
	void getStyleMetrics(jfloat p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_method<"getStyleMetrics", void>(p1, p2, p3); }
	void getFontMetrics(jni::ref<java::awt::Font> p1, jni::ref<java::awt::font::FontRenderContext> p2, jni::ref<jni::array<jfloat>> p3) { return call_method<"getFontMetrics", void>(p1, p2, p3); }
	jboolean canDoStyle(jint p1) { return call_method<"canDoStyle", jboolean>(p1); }
	jboolean useAAForPtSize(jint p1) { return call_method<"useAAForPtSize", jboolean>(p1); }
	jboolean hasSupplementaryChars() { return call_method<"hasSupplementaryChars", jboolean>(); }
	jni::ref<java::lang::String> getPostscriptName() { return call_method<"getPostscriptName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFontName(jni::ref<java::util::Locale> p1) { return call_method<"getFontName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getFamilyName(jni::ref<java::util::Locale> p1) { return call_method<"getFamilyName", jni::ref<java::lang::String>>(p1); }
	jint getNumGlyphs() { return call_method<"getNumGlyphs", jint>(); }
	jint charToGlyph(jint p1) { return call_method<"charToGlyph", jint>(p1); }
	jint getMissingGlyphCode() { return call_method<"getMissingGlyphCode", jint>(); }
	jboolean canDisplay(jchar p1) { return call_method<"canDisplay", jboolean>(p1); }
	jboolean canDisplay(jint p1) { return call_method<"canDisplay", jboolean>(p1); }
	jbyte getBaselineFor(jchar p1) { return call_method<"getBaselineFor", jbyte>(p1); }
	jfloat getItalicAngle(jni::ref<java::awt::Font> p1, jni::ref<java::awt::geom::AffineTransform> p2, jni::ref<java::lang::Object> p3, jni::ref<java::lang::Object> p4) { return call_method<"getItalicAngle", jfloat>(p1, p2, p3, p4); }

protected:

	Font2D(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONT2D
