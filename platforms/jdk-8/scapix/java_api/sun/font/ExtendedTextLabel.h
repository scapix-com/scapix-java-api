// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/font/TextLabel.h>
#include <scapix/java_api/sun/font/TextLineComponent.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_EXTENDEDTEXTLABEL_FWD
#define SCAPIX_JAVA_API_SUN_FONT_EXTENDEDTEXTLABEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class ExtendedTextLabel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::ExtendedTextLabel>
{
	static constexpr fixed_string class_name = "sun/font/ExtendedTextLabel";
	using base_classes = std::tuple<scapix::java_api::sun::font::TextLabel, scapix::java_api::sun::font::TextLineComponent>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_EXTENDEDTEXTLABEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_EXTENDEDTEXTLABEL)
#define SCAPIX_JAVA_API_SUN_FONT_EXTENDEDTEXTLABEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/font/GlyphJustificationInfo.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/sun/font/CoreMetrics.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::ExtendedTextLabel : public jni::object_base<"sun/font/ExtendedTextLabel",
	sun::font::TextLabel,
	sun::font::TextLineComponent>
{
public:

	static jni::ref<sun::font::ExtendedTextLabel> new_object() { return base_::new_object(); }
	jint getNumCharacters() { return call_method<"getNumCharacters", jint>(); }
	jni::ref<sun::font::CoreMetrics> getCoreMetrics() { return call_method<"getCoreMetrics", jni::ref<sun::font::CoreMetrics>>(); }
	jfloat getCharX(jint p1) { return call_method<"getCharX", jfloat>(p1); }
	jfloat getCharY(jint p1) { return call_method<"getCharY", jfloat>(p1); }
	jfloat getCharAdvance(jint p1) { return call_method<"getCharAdvance", jfloat>(p1); }
	jni::ref<java::awt::geom::Rectangle2D> getCharVisualBounds(jint p1, jfloat p2, jfloat p3) { return call_method<"getCharVisualBounds", jni::ref<java::awt::geom::Rectangle2D>>(p1, p2, p3); }
	jint logicalToVisual(jint p1) { return call_method<"logicalToVisual", jint>(p1); }
	jint visualToLogical(jint p1) { return call_method<"visualToLogical", jint>(p1); }
	jint getLineBreakIndex(jint p1, jfloat p2) { return call_method<"getLineBreakIndex", jint>(p1, p2); }
	jfloat getAdvanceBetween(jint p1, jint p2) { return call_method<"getAdvanceBetween", jfloat>(p1, p2); }
	jboolean caretAtOffsetIsValid(jint p1) { return call_method<"caretAtOffsetIsValid", jboolean>(p1); }
	jni::ref<java::awt::geom::Rectangle2D> getCharVisualBounds(jint p1) { return call_method<"getCharVisualBounds", jni::ref<java::awt::geom::Rectangle2D>>(p1); }
	jni::ref<sun::font::TextLineComponent> getSubset(jint p1, jint p2, jint p3) { return call_method<"getSubset", jni::ref<sun::font::TextLineComponent>>(p1, p2, p3); }
	jint getNumJustificationInfos() { return call_method<"getNumJustificationInfos", jint>(); }
	void getJustificationInfos(jni::ref<jni::array<java::awt::font::GlyphJustificationInfo>> p1, jint p2, jint p3, jint p4) { return call_method<"getJustificationInfos", void>(p1, p2, p3, p4); }
	jni::ref<sun::font::TextLineComponent> applyJustificationDeltas(jni::ref<jni::array<jfloat>> p1, jint p2, jni::ref<jni::array<jboolean>> p3) { return call_method<"applyJustificationDeltas", jni::ref<sun::font::TextLineComponent>>(p1, p2, p3); }

protected:

	ExtendedTextLabel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_EXTENDEDTEXTLABEL
