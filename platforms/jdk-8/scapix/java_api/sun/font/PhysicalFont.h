// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/font/Font2D.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_PHYSICALFONT_FWD
#define SCAPIX_JAVA_API_SUN_FONT_PHYSICALFONT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class PhysicalFont; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::PhysicalFont>
{
	static constexpr fixed_string class_name = "sun/font/PhysicalFont";
	using base_classes = std::tuple<scapix::java_api::sun::font::Font2D>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_PHYSICALFONT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_PHYSICALFONT)
#define SCAPIX_JAVA_API_SUN_FONT_PHYSICALFONT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::PhysicalFont : public jni::object_base<"sun/font/PhysicalFont",
	sun::font::Font2D>
{
public:

	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	PhysicalFont(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_PHYSICALFONT
