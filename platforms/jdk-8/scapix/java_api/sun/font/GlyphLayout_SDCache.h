// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_GLYPHLAYOUT_SDCACHE_FWD
#define SCAPIX_JAVA_API_SUN_FONT_GLYPHLAYOUT_SDCACHE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class GlyphLayout_SDCache; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::GlyphLayout_SDCache>
{
	static constexpr fixed_string class_name = "sun/font/GlyphLayout$SDCache";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_GLYPHLAYOUT_SDCACHE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_GLYPHLAYOUT_SDCACHE)
#define SCAPIX_JAVA_API_SUN_FONT_GLYPHLAYOUT_SDCACHE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/font/FontRenderContext.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/Point2D_Float.h>
#include <scapix/java_api/sun/font/FontStrikeDesc.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::font::GlyphLayout_SDCache : public jni::object_base<"sun/font/GlyphLayout$SDCache",
	java::lang::Object>
{
public:

	jni::ref<java::awt::Font> key_font() { return get_field<"key_font", jni::ref<java::awt::Font>>(); }
	void key_font(jni::ref<java::awt::Font> v) { set_field<"key_font", jni::ref<java::awt::Font>>(v); }
	jni::ref<java::awt::font::FontRenderContext> key_frc() { return get_field<"key_frc", jni::ref<java::awt::font::FontRenderContext>>(); }
	void key_frc(jni::ref<java::awt::font::FontRenderContext> v) { set_field<"key_frc", jni::ref<java::awt::font::FontRenderContext>>(v); }
	jni::ref<java::awt::geom::AffineTransform> dtx() { return get_field<"dtx", jni::ref<java::awt::geom::AffineTransform>>(); }
	void dtx(jni::ref<java::awt::geom::AffineTransform> v) { set_field<"dtx", jni::ref<java::awt::geom::AffineTransform>>(v); }
	jni::ref<java::awt::geom::AffineTransform> invdtx() { return get_field<"invdtx", jni::ref<java::awt::geom::AffineTransform>>(); }
	void invdtx(jni::ref<java::awt::geom::AffineTransform> v) { set_field<"invdtx", jni::ref<java::awt::geom::AffineTransform>>(v); }
	jni::ref<java::awt::geom::AffineTransform> gtx() { return get_field<"gtx", jni::ref<java::awt::geom::AffineTransform>>(); }
	void gtx(jni::ref<java::awt::geom::AffineTransform> v) { set_field<"gtx", jni::ref<java::awt::geom::AffineTransform>>(v); }
	jni::ref<java::awt::geom::Point2D_Float> delta() { return get_field<"delta", jni::ref<java::awt::geom::Point2D_Float>>(); }
	void delta(jni::ref<java::awt::geom::Point2D_Float> v) { set_field<"delta", jni::ref<java::awt::geom::Point2D_Float>>(v); }
	jni::ref<sun::font::FontStrikeDesc> sd() { return get_field<"sd", jni::ref<sun::font::FontStrikeDesc>>(); }
	void sd(jni::ref<sun::font::FontStrikeDesc> v) { set_field<"sd", jni::ref<sun::font::FontStrikeDesc>>(v); }

	static jni::ref<sun::font::GlyphLayout_SDCache> get(jni::ref<java::awt::Font> p1, jni::ref<java::awt::font::FontRenderContext> p2) { return call_static_method<"get", jni::ref<sun::font::GlyphLayout_SDCache>>(p1, p2); }

protected:

	GlyphLayout_SDCache(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_GLYPHLAYOUT_SDCACHE
