// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/font/Font2D.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_COMPOSITEFONT_FWD
#define SCAPIX_JAVA_API_SUN_FONT_COMPOSITEFONT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class CompositeFont; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::CompositeFont>
{
	static constexpr fixed_string class_name = "sun/font/CompositeFont";
	using base_classes = std::tuple<scapix::java_api::sun::font::Font2D>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_COMPOSITEFONT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_COMPOSITEFONT)
#define SCAPIX_JAVA_API_SUN_FONT_COMPOSITEFONT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/font/CharToGlyphMapper.h>
#include <scapix/java_api/sun/font/PhysicalFont.h>
#include <scapix/java_api/sun/font/SunFontManager.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::CompositeFont : public jni::object_base<"sun/font/CompositeFont",
	sun::font::Font2D>
{
public:

	static jni::ref<sun::font::CompositeFont> new_object(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2, jni::ref<jni::array<java::lang::String>> p3, jint p4, jni::ref<jni::array<jint>> p5, jni::ref<jni::array<jint>> p6, jboolean p7, jni::ref<sun::font::SunFontManager> p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	jboolean isExcludedChar(jint p1, jint p2) { return call_method<"isExcludedChar", jboolean>(p1, p2); }
	void getStyleMetrics(jfloat p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_method<"getStyleMetrics", void>(p1, p2, p3); }
	jint getNumSlots() { return call_method<"getNumSlots", jint>(); }
	jni::ref<sun::font::PhysicalFont> getSlotFont(jint p1) { return call_method<"getSlotFont", jni::ref<sun::font::PhysicalFont>>(p1); }
	jboolean isStdComposite() { return call_method<"isStdComposite", jboolean>(); }
	jni::ref<sun::font::CharToGlyphMapper> getMapper() { return call_method<"getMapper", jni::ref<sun::font::CharToGlyphMapper>>(); }
	jboolean hasSupplementaryChars() { return call_method<"hasSupplementaryChars", jboolean>(); }
	jint getNumGlyphs() { return call_method<"getNumGlyphs", jint>(); }
	jint getMissingGlyphCode() { return call_method<"getMissingGlyphCode", jint>(); }
	jboolean canDisplay(jchar p1) { return call_method<"canDisplay", jboolean>(p1); }
	jboolean useAAForPtSize(jint p1) { return call_method<"useAAForPtSize", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	CompositeFont(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_COMPOSITEFONT
