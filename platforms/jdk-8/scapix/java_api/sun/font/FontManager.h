// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_FONTMANAGER_FWD
#define SCAPIX_JAVA_API_SUN_FONT_FONTMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class FontManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::FontManager>
{
	static constexpr fixed_string class_name = "sun/font/FontManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONTMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_FONTMANAGER)
#define SCAPIX_JAVA_API_SUN_FONT_FONTMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/font/CreatedFontTracker.h>
#include <scapix/java_api/sun/font/Font2D.h>
#include <scapix/java_api/sun/font/Font2DHandle.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::FontManager : public jni::object_base<"sun/font/FontManager",
	java::lang::Object>
{
public:

	static jint NO_FALLBACK() { return get_static_field<"NO_FALLBACK", jint>(); }
	static jint PHYSICAL_FALLBACK() { return get_static_field<"PHYSICAL_FALLBACK", jint>(); }
	static jint LOGICAL_FALLBACK() { return get_static_field<"LOGICAL_FALLBACK", jint>(); }

	jboolean registerFont(jni::ref<java::awt::Font> p1) { return call_method<"registerFont", jboolean>(p1); }
	void deRegisterBadFont(jni::ref<sun::font::Font2D> p1) { return call_method<"deRegisterBadFont", void>(p1); }
	jni::ref<sun::font::Font2D> findFont2D(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"findFont2D", jni::ref<sun::font::Font2D>>(p1, p2, p3); }
	jni::ref<sun::font::Font2D> createFont2D(jni::ref<java::io::File> p1, jint p2, jboolean p3, jni::ref<sun::font::CreatedFontTracker> p4) { return call_method<"createFont2D", jni::ref<sun::font::Font2D>>(p1, p2, p3, p4); }
	jboolean usingPerAppContextComposites() { return call_method<"usingPerAppContextComposites", jboolean>(); }
	jni::ref<sun::font::Font2DHandle> getNewComposite(jni::ref<java::lang::String> p1, jint p2, jni::ref<sun::font::Font2DHandle> p3) { return call_method<"getNewComposite", jni::ref<sun::font::Font2DHandle>>(p1, p2, p3); }
	void preferLocaleFonts() { return call_method<"preferLocaleFonts", void>(); }
	void preferProportionalFonts() { return call_method<"preferProportionalFonts", void>(); }

protected:

	FontManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONTMANAGER
