// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_FONTUTILITIES_FWD
#define SCAPIX_JAVA_API_SUN_FONT_FONTUTILITIES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class FontUtilities; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::FontUtilities>
{
	static constexpr fixed_string class_name = "sun/font/FontUtilities";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONTUTILITIES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_FONTUTILITIES)
#define SCAPIX_JAVA_API_SUN_FONT_FONTUTILITIES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/plaf/FontUIResource.h>
#include <scapix/java_api/sun/font/Font2D.h>
#include <scapix/java_api/sun/util/logging/PlatformLogger.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::FontUtilities : public jni::object_base<"sun/font/FontUtilities",
	java::lang::Object>
{
public:

	static jboolean isSolaris() { return get_static_field<"isSolaris", jboolean>(); }
	static void isSolaris(jboolean v) { set_static_field<"isSolaris", jboolean>(v); }
	static jboolean isLinux() { return get_static_field<"isLinux", jboolean>(); }
	static void isLinux(jboolean v) { set_static_field<"isLinux", jboolean>(v); }
	static jboolean isMacOSX() { return get_static_field<"isMacOSX", jboolean>(); }
	static void isMacOSX(jboolean v) { set_static_field<"isMacOSX", jboolean>(v); }
	static jboolean isMacOSX14() { return get_static_field<"isMacOSX14", jboolean>(); }
	static void isMacOSX14(jboolean v) { set_static_field<"isMacOSX14", jboolean>(v); }
	static jboolean isSolaris8() { return get_static_field<"isSolaris8", jboolean>(); }
	static void isSolaris8(jboolean v) { set_static_field<"isSolaris8", jboolean>(v); }
	static jboolean isSolaris9() { return get_static_field<"isSolaris9", jboolean>(); }
	static void isSolaris9(jboolean v) { set_static_field<"isSolaris9", jboolean>(v); }
	static jboolean isOpenSolaris() { return get_static_field<"isOpenSolaris", jboolean>(); }
	static void isOpenSolaris(jboolean v) { set_static_field<"isOpenSolaris", jboolean>(v); }
	static jboolean useT2K() { return get_static_field<"useT2K", jboolean>(); }
	static void useT2K(jboolean v) { set_static_field<"useT2K", jboolean>(v); }
	static jboolean isWindows() { return get_static_field<"isWindows", jboolean>(); }
	static void isWindows(jboolean v) { set_static_field<"isWindows", jboolean>(v); }
	static jboolean isOpenJDK() { return get_static_field<"isOpenJDK", jboolean>(); }
	static void isOpenJDK(jboolean v) { set_static_field<"isOpenJDK", jboolean>(v); }
	static jint MIN_LAYOUT_CHARCODE() { return get_static_field<"MIN_LAYOUT_CHARCODE", jint>(); }
	static jint MAX_LAYOUT_CHARCODE() { return get_static_field<"MAX_LAYOUT_CHARCODE", jint>(); }

	static jni::ref<sun::font::FontUtilities> new_object() { return base_::new_object(); }
	static jni::ref<sun::font::Font2D> getFont2D(jni::ref<java::awt::Font> p1) { return call_static_method<"getFont2D", jni::ref<sun::font::Font2D>>(p1); }
	static jboolean isComplexText(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_static_method<"isComplexText", jboolean>(p1, p2, p3); }
	static jboolean isNonSimpleChar(jchar p1) { return call_static_method<"isNonSimpleChar", jboolean>(p1); }
	static jboolean isComplexCharCode(jint p1) { return call_static_method<"isComplexCharCode", jboolean>(p1); }
	static jni::ref<sun::util::logging::PlatformLogger> getLogger() { return call_static_method<"getLogger", jni::ref<sun::util::logging::PlatformLogger>>(); }
	static jboolean isLogging() { return call_static_method<"isLogging", jboolean>(); }
	static jboolean debugFonts() { return call_static_method<"debugFonts", jboolean>(); }
	static jboolean fontSupportsDefaultEncoding(jni::ref<java::awt::Font> p1) { return call_static_method<"fontSupportsDefaultEncoding", jboolean>(p1); }
	static jni::ref<javax::swing::plaf::FontUIResource> getCompositeFontUIResource(jni::ref<java::awt::Font> p1) { return call_static_method<"getCompositeFontUIResource", jni::ref<javax::swing::plaf::FontUIResource>>(p1); }
	static jni::ref<java::lang::String> mapFcName(jni::ref<java::lang::String> p1) { return call_static_method<"mapFcName", jni::ref<java::lang::String>>(p1); }
	static jni::ref<javax::swing::plaf::FontUIResource> getFontConfigFUIR(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_static_method<"getFontConfigFUIR", jni::ref<javax::swing::plaf::FontUIResource>>(p1, p2, p3); }
	static jboolean textLayoutIsCompatible(jni::ref<java::awt::Font> p1) { return call_static_method<"textLayoutIsCompatible", jboolean>(p1); }

protected:

	FontUtilities(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONTUTILITIES
