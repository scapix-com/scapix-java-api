// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_FONTRESOLVER_FWD
#define SCAPIX_JAVA_API_SUN_FONT_FONTRESOLVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class FontResolver; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::FontResolver>
{
	static constexpr fixed_string class_name = "sun/font/FontResolver";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONTRESOLVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_FONTRESOLVER)
#define SCAPIX_JAVA_API_SUN_FONT_FONTRESOLVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/sun/text/CodePointIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::FontResolver : public jni::object_base<"sun/font/FontResolver",
	java::lang::Object>
{
public:

	jint getFontIndex(jchar p1) { return call_method<"getFontIndex", jint>(p1); }
	jint getFontIndex(jint p1) { return call_method<"getFontIndex", jint>(p1); }
	jint nextFontRunIndex(jni::ref<sun::text::CodePointIterator> p1) { return call_method<"nextFontRunIndex", jint>(p1); }
	jni::ref<java::awt::Font> getFont(jint p1, jni::ref<java::util::Map> p2) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1, p2); }
	static jni::ref<sun::font::FontResolver> getInstance() { return call_static_method<"getInstance", jni::ref<sun::font::FontResolver>>(); }

protected:

	FontResolver(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_FONTRESOLVER
