// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_STRIKECACHE_FWD
#define SCAPIX_JAVA_API_SUN_FONT_STRIKECACHE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class StrikeCache; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::StrikeCache>
{
	static constexpr fixed_string class_name = "sun/font/StrikeCache";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_STRIKECACHE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_STRIKECACHE)
#define SCAPIX_JAVA_API_SUN_FONT_STRIKECACHE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ref/Reference.h>
#include <scapix/java_api/sun/font/FontStrike.h>
#include <scapix/java_api/sun/font/GlyphDisposedListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::StrikeCache : public jni::object_base<"sun/font/StrikeCache",
	java::lang::Object>
{
public:

	static jni::ref<sun::font::StrikeCache> new_object() { return base_::new_object(); }
	static void addGlyphDisposedListener(jni::ref<sun::font::GlyphDisposedListener> p1) { return call_static_method<"addGlyphDisposedListener", void>(p1); }
	static jni::ref<java::lang::ref::Reference> getStrikeRef(jni::ref<sun::font::FontStrike> p1) { return call_static_method<"getStrikeRef", jni::ref<java::lang::ref::Reference>>(p1); }
	static jni::ref<java::lang::ref::Reference> getStrikeRef(jni::ref<sun::font::FontStrike> p1, jboolean p2) { return call_static_method<"getStrikeRef", jni::ref<java::lang::ref::Reference>>(p1, p2); }

protected:

	StrikeCache(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_STRIKECACHE
