// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_CREATEDFONTTRACKER_FWD
#define SCAPIX_JAVA_API_SUN_FONT_CREATEDFONTTRACKER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class CreatedFontTracker; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::CreatedFontTracker>
{
	static constexpr fixed_string class_name = "sun/font/CreatedFontTracker";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_CREATEDFONTTRACKER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_CREATEDFONTTRACKER)
#define SCAPIX_JAVA_API_SUN_FONT_CREATEDFONTTRACKER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::CreatedFontTracker : public jni::object_base<"sun/font/CreatedFontTracker",
	java::lang::Object>
{
public:

	static jint MAX_FILE_SIZE() { return get_static_field<"MAX_FILE_SIZE", jint>(); }
	static jint MAX_TOTAL_BYTES() { return get_static_field<"MAX_TOTAL_BYTES", jint>(); }

	static jni::ref<sun::font::CreatedFontTracker> getTracker() { return call_static_method<"getTracker", jni::ref<sun::font::CreatedFontTracker>>(); }
	jint getNumBytes() { return call_method<"getNumBytes", jint>(); }
	void addBytes(jint p1) { return call_method<"addBytes", void>(p1); }
	void subBytes(jint p1) { return call_method<"subBytes", void>(p1); }
	jboolean acquirePermit() { return call_method<"acquirePermit", jboolean>(); }
	void releasePermit() { return call_method<"releasePermit", void>(); }
	void add(jni::ref<java::io::File> p1) { return call_method<"add", void>(p1); }
	void set(jni::ref<java::io::File> p1, jni::ref<java::io::OutputStream> p2) { return call_method<"set", void>(p1, p2); }
	void remove(jni::ref<java::io::File> p1) { return call_method<"remove", void>(p1); }

protected:

	CreatedFontTracker(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_CREATEDFONTTRACKER
