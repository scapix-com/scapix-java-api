// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/java2d/FontSupport.h>
#include <scapix/java_api/sun/font/FontManagerForSGE.h>

#ifndef SCAPIX_JAVA_API_SUN_FONT_SUNFONTMANAGER_FWD
#define SCAPIX_JAVA_API_SUN_FONT_SUNFONTMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::font { class SunFontManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::font::SunFontManager>
{
	static constexpr fixed_string class_name = "sun/font/SunFontManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::java2d::FontSupport, scapix::java_api::sun::font::FontManagerForSGE>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_SUNFONTMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_FONT_SUNFONTMANAGER)
#define SCAPIX_JAVA_API_SUN_FONT_SUNFONTMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FilenameFilter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/HashMap.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/TreeMap.h>
#include <scapix/java_api/java/util/concurrent/ConcurrentHashMap.h>
#include <scapix/java_api/sun/awt/FontConfiguration.h>
#include <scapix/java_api/sun/font/CreatedFontTracker.h>
#include <scapix/java_api/sun/font/Font2D.h>
#include <scapix/java_api/sun/font/Font2DHandle.h>
#include <scapix/java_api/sun/font/PhysicalFont.h>
#include <scapix/java_api/sun/font/TrueTypeFont.h>
#include <scapix/java_api/sun/font/SunFontManager_FamilyDescription.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::font::SunFontManager : public jni::object_base<"sun/font/SunFontManager",
	java::lang::Object,
	sun::java2d::FontSupport,
	sun::font::FontManagerForSGE>
{
public:

	using FamilyDescription = SunFontManager_FamilyDescription;

	static jint FONTFORMAT_NONE() { return get_static_field<"FONTFORMAT_NONE", jint>(); }
	static jint FONTFORMAT_TRUETYPE() { return get_static_field<"FONTFORMAT_TRUETYPE", jint>(); }
	static jint FONTFORMAT_TYPE1() { return get_static_field<"FONTFORMAT_TYPE1", jint>(); }
	static jint FONTFORMAT_T2K() { return get_static_field<"FONTFORMAT_T2K", jint>(); }
	static jint FONTFORMAT_TTC() { return get_static_field<"FONTFORMAT_TTC", jint>(); }
	static jint FONTFORMAT_COMPOSITE() { return get_static_field<"FONTFORMAT_COMPOSITE", jint>(); }
	static jint FONTFORMAT_NATIVE() { return get_static_field<"FONTFORMAT_NATIVE", jint>(); }
	static jni::ref<java::lang::String> lucidaFontName() { return get_static_field<"lucidaFontName", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> jreLibDirName() { return get_static_field<"jreLibDirName", jni::ref<java::lang::String>>(); }
	static void jreLibDirName(jni::ref<java::lang::String> v) { set_static_field<"jreLibDirName", jni::ref<java::lang::String>>(v); }
	static jni::ref<java::lang::String> jreFontDirName() { return get_static_field<"jreFontDirName", jni::ref<java::lang::String>>(); }
	static void jreFontDirName(jni::ref<java::lang::String> v) { set_static_field<"jreFontDirName", jni::ref<java::lang::String>>(v); }
	static jboolean noType1Font() { return get_static_field<"noType1Font", jboolean>(); }
	static void noType1Font(jboolean v) { set_static_field<"noType1Font", jboolean>(v); }

	static jni::ref<sun::font::SunFontManager> getInstance() { return call_static_method<"getInstance", jni::ref<sun::font::SunFontManager>>(); }
	jni::ref<java::io::FilenameFilter> getTrueTypeFilter() { return call_method<"getTrueTypeFilter", jni::ref<java::io::FilenameFilter>>(); }
	jni::ref<java::io::FilenameFilter> getType1Filter() { return call_method<"getType1Filter", jni::ref<java::io::FilenameFilter>>(); }
	jboolean usingPerAppContextComposites() { return call_method<"usingPerAppContextComposites", jboolean>(); }
	jni::ref<sun::font::TrueTypeFont> getEUDCFont() { return call_method<"getEUDCFont", jni::ref<sun::font::TrueTypeFont>>(); }
	jni::ref<sun::font::Font2DHandle> getNewComposite(jni::ref<java::lang::String> p1, jint p2, jni::ref<sun::font::Font2DHandle> p3) { return call_method<"getNewComposite", jni::ref<sun::font::Font2DHandle>>(p1, p2, p3); }
	jni::ref<jni::array<sun::font::Font2D>> getRegisteredFonts() { return call_method<"getRegisteredFonts", jni::ref<jni::array<sun::font::Font2D>>>(); }
	jboolean isDeferredFont(jni::ref<java::lang::String> p1) { return call_method<"isDeferredFont", jboolean>(p1); }
	jni::ref<sun::font::PhysicalFont> findJREDeferredFont(jni::ref<java::lang::String> p1, jint p2) { return call_method<"findJREDeferredFont", jni::ref<sun::font::PhysicalFont>>(p1, p2); }
	void registerDeferredFont(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::String>> p3, jint p4, jboolean p5, jint p6) { return call_method<"registerDeferredFont", void>(p1, p2, p3, p4, p5, p6); }
	jni::ref<sun::font::PhysicalFont> initialiseDeferredFont(jni::ref<java::lang::String> p1) { return call_method<"initialiseDeferredFont", jni::ref<sun::font::PhysicalFont>>(p1); }
	jboolean isRegisteredFontFile(jni::ref<java::lang::String> p1) { return call_method<"isRegisteredFontFile", jboolean>(p1); }
	jni::ref<sun::font::PhysicalFont> getRegisteredFontFile(jni::ref<java::lang::String> p1) { return call_method<"getRegisteredFontFile", jni::ref<sun::font::PhysicalFont>>(p1); }
	jni::ref<sun::font::PhysicalFont> registerFontFile(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2, jint p3, jboolean p4, jint p5) { return call_method<"registerFontFile", jni::ref<sun::font::PhysicalFont>>(p1, p2, p3, p4, p5); }
	void registerFonts(jni::ref<jni::array<java::lang::String>> p1, jni::ref<jni::array<jni::array<java::lang::String>>> p2, jint p3, jint p4, jboolean p5, jint p6, jboolean p7) { return call_method<"registerFonts", void>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<sun::font::PhysicalFont> getDefaultPhysicalFont() { return call_method<"getDefaultPhysicalFont", jni::ref<sun::font::PhysicalFont>>(); }
	jni::ref<sun::font::Font2D> getDefaultLogicalFont(jint p1) { return call_method<"getDefaultLogicalFont", jni::ref<sun::font::Font2D>>(p1); }
	jni::ref<java::util::HashMap> populateHardcodedFileNameMap() { return call_method<"populateHardcodedFileNameMap", jni::ref<java::util::HashMap>>(); }
	jboolean gotFontsFromPlatform() { return call_method<"gotFontsFromPlatform", jboolean>(); }
	jni::ref<java::lang::String> getFileNameForFontName(jni::ref<java::lang::String> p1) { return call_method<"getFileNameForFontName", jni::ref<java::lang::String>>(p1); }
	jboolean getFamilyNamesFromPlatform(jni::ref<java::util::TreeMap> p1, jni::ref<java::util::Locale> p2) { return call_method<"getFamilyNamesFromPlatform", jboolean>(p1, p2); }
	jni::ref<sun::font::Font2D> findFont2D(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"findFont2D", jni::ref<sun::font::Font2D>>(p1, p2, p3); }
	jboolean usePlatformFontMetrics() { return call_method<"usePlatformFontMetrics", jboolean>(); }
	jint getNumFonts() { return call_method<"getNumFonts", jint>(); }
	jni::ref<sun::font::Font2D> createFont2D(jni::ref<java::io::File> p1, jint p2, jboolean p3, jni::ref<sun::font::CreatedFontTracker> p4) { return call_method<"createFont2D", jni::ref<sun::font::Font2D>>(p1, p2, p3, p4); }
	jni::ref<java::lang::String> getFullNameByFileName(jni::ref<java::lang::String> p1) { return call_method<"getFullNameByFileName", jni::ref<java::lang::String>>(p1); }
	void deRegisterBadFont(jni::ref<sun::font::Font2D> p1) { return call_method<"deRegisterBadFont", void>(p1); }
	void replaceFont(jni::ref<sun::font::PhysicalFont> p1, jni::ref<sun::font::PhysicalFont> p2) { return call_method<"replaceFont", void>(p1, p2); }
	jboolean maybeUsingAlternateCompositeFonts() { return call_method<"maybeUsingAlternateCompositeFonts", jboolean>(); }
	jboolean usingAlternateCompositeFonts() { return call_method<"usingAlternateCompositeFonts", jboolean>(); }
	void useAlternateFontforJALocales() { return call_method<"useAlternateFontforJALocales", void>(); }
	jboolean usingAlternateFontforJALocales() { return call_method<"usingAlternateFontforJALocales", jboolean>(); }
	void preferLocaleFonts() { return call_method<"preferLocaleFonts", void>(); }
	void preferProportionalFonts() { return call_method<"preferProportionalFonts", void>(); }
	jboolean registerFont(jni::ref<java::awt::Font> p1) { return call_method<"registerFont", jboolean>(p1); }
	jni::ref<java::util::TreeMap> getCreatedFontFamilyNames() { return call_method<"getCreatedFontFamilyNames", jni::ref<java::util::TreeMap>>(); }
	jni::ref<jni::array<java::awt::Font>> getCreatedFonts() { return call_method<"getCreatedFonts", jni::ref<jni::array<java::awt::Font>>>(); }
	jni::ref<sun::awt::FontConfiguration> getFontConfiguration() { return call_method<"getFontConfiguration", jni::ref<sun::awt::FontConfiguration>>(); }
	jni::ref<java::lang::String> getPlatformFontPath(jboolean p1) { return call_method<"getPlatformFontPath", jni::ref<java::lang::String>>(p1); }
	static jboolean isOpenJDK() { return call_static_method<"isOpenJDK", jboolean>(); }
	void registerFontsInDir(jni::ref<java::lang::String> p1) { return call_method<"registerFontsInDir", void>(p1); }
	jni::ref<java::lang::String> getDefaultFontFile() { return call_method<"getDefaultFontFile", jni::ref<java::lang::String>>(); }
	jni::ref<sun::awt::FontConfiguration> createFontConfiguration(jboolean p1, jboolean p2) { return call_method<"createFontConfiguration", jni::ref<sun::awt::FontConfiguration>>(p1, p2); }
	jni::ref<java::lang::String> getDefaultFontFaceName() { return call_method<"getDefaultFontFaceName", jni::ref<java::lang::String>>(); }
	void loadFontFiles() { return call_method<"loadFontFiles", void>(); }
	void createCompositeFonts(jni::ref<java::util::concurrent::ConcurrentHashMap> p1, jboolean p2, jboolean p3) { return call_method<"createCompositeFonts", void>(p1, p2, p3); }
	jni::ref<jni::array<java::awt::Font>> getAllInstalledFonts() { return call_method<"getAllInstalledFonts", jni::ref<jni::array<java::awt::Font>>>(); }
	jni::ref<jni::array<java::lang::String>> getInstalledFontFamilyNames(jni::ref<java::util::Locale> p1) { return call_method<"getInstalledFontFamilyNames", jni::ref<jni::array<java::lang::String>>>(p1); }
	void register1dot0Fonts() { return call_method<"register1dot0Fonts", void>(); }

protected:

	SunFontManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_FONT_SUNFONTMANAGER
