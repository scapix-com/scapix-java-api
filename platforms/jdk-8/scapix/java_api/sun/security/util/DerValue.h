// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERVALUE_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERVALUE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::util { class DerValue; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::util::DerValue>
{
	static constexpr fixed_string class_name = "sun/security/util/DerValue";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERVALUE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERVALUE)
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERVALUE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/sun/security/util/BitArray.h>
#include <scapix/java_api/sun/security/util/DerInputStream.h>
#include <scapix/java_api/sun/security/util/DerOutputStream.h>
#include <scapix/java_api/sun/security/util/ObjectIdentifier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::util::DerValue : public jni::object_base<"sun/security/util/DerValue",
	java::lang::Object>
{
public:

	static jbyte TAG_UNIVERSAL() { return get_static_field<"TAG_UNIVERSAL", jbyte>(); }
	static jbyte TAG_APPLICATION() { return get_static_field<"TAG_APPLICATION", jbyte>(); }
	static jbyte TAG_CONTEXT() { return get_static_field<"TAG_CONTEXT", jbyte>(); }
	static jbyte TAG_PRIVATE() { return get_static_field<"TAG_PRIVATE", jbyte>(); }
	jbyte tag() { return get_field<"tag", jbyte>(); }
	void tag(jbyte v) { set_field<"tag", jbyte>(v); }
	jni::ref<sun::security::util::DerInputStream> data() { return get_field<"data", jni::ref<sun::security::util::DerInputStream>>(); }
	static jbyte tag_Boolean() { return get_static_field<"tag_Boolean", jbyte>(); }
	static jbyte tag_Integer() { return get_static_field<"tag_Integer", jbyte>(); }
	static jbyte tag_BitString() { return get_static_field<"tag_BitString", jbyte>(); }
	static jbyte tag_OctetString() { return get_static_field<"tag_OctetString", jbyte>(); }
	static jbyte tag_Null() { return get_static_field<"tag_Null", jbyte>(); }
	static jbyte tag_ObjectId() { return get_static_field<"tag_ObjectId", jbyte>(); }
	static jbyte tag_Enumerated() { return get_static_field<"tag_Enumerated", jbyte>(); }
	static jbyte tag_UTF8String() { return get_static_field<"tag_UTF8String", jbyte>(); }
	static jbyte tag_PrintableString() { return get_static_field<"tag_PrintableString", jbyte>(); }
	static jbyte tag_T61String() { return get_static_field<"tag_T61String", jbyte>(); }
	static jbyte tag_IA5String() { return get_static_field<"tag_IA5String", jbyte>(); }
	static jbyte tag_UtcTime() { return get_static_field<"tag_UtcTime", jbyte>(); }
	static jbyte tag_GeneralizedTime() { return get_static_field<"tag_GeneralizedTime", jbyte>(); }
	static jbyte tag_GeneralString() { return get_static_field<"tag_GeneralString", jbyte>(); }
	static jbyte tag_UniversalString() { return get_static_field<"tag_UniversalString", jbyte>(); }
	static jbyte tag_BMPString() { return get_static_field<"tag_BMPString", jbyte>(); }
	static jbyte tag_Sequence() { return get_static_field<"tag_Sequence", jbyte>(); }
	static jbyte tag_SequenceOf() { return get_static_field<"tag_SequenceOf", jbyte>(); }
	static jbyte tag_Set() { return get_static_field<"tag_Set", jbyte>(); }
	static jbyte tag_SetOf() { return get_static_field<"tag_SetOf", jbyte>(); }

	jboolean isUniversal() { return call_method<"isUniversal", jboolean>(); }
	jboolean isApplication() { return call_method<"isApplication", jboolean>(); }
	jboolean isContextSpecific() { return call_method<"isContextSpecific", jboolean>(); }
	jboolean isContextSpecific(jbyte p1) { return call_method<"isContextSpecific", jboolean>(p1); }
	jboolean isConstructed() { return call_method<"isConstructed", jboolean>(); }
	jboolean isConstructed(jbyte p1) { return call_method<"isConstructed", jboolean>(p1); }
	static jni::ref<sun::security::util::DerValue> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<sun::security::util::DerValue> new_object(jbyte p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::util::DerValue> new_object(jbyte p1, jni::ref<jni::array<jbyte>> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::util::DerValue> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	static jni::ref<sun::security::util::DerValue> new_object(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::security::util::DerValue> new_object(jni::ref<java::io::InputStream> p1) { return base_::new_object(p1); }
	void encode(jni::ref<sun::security::util::DerOutputStream> p1) { return call_method<"encode", void>(p1); }
	jni::ref<sun::security::util::DerInputStream> getData() { return call_method<"getData", jni::ref<sun::security::util::DerInputStream>>(); }
	jbyte getTag() { return call_method<"getTag", jbyte>(); }
	jboolean getBoolean() { return call_method<"getBoolean", jboolean>(); }
	jni::ref<sun::security::util::ObjectIdentifier> getOID() { return call_method<"getOID", jni::ref<sun::security::util::ObjectIdentifier>>(); }
	jni::ref<jni::array<jbyte>> getOctetString() { return call_method<"getOctetString", jni::ref<jni::array<jbyte>>>(); }
	jint getInteger() { return call_method<"getInteger", jint>(); }
	jni::ref<java::math::BigInteger> getBigInteger() { return call_method<"getBigInteger", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getPositiveBigInteger() { return call_method<"getPositiveBigInteger", jni::ref<java::math::BigInteger>>(); }
	jint getEnumerated() { return call_method<"getEnumerated", jint>(); }
	jni::ref<jni::array<jbyte>> getBitString() { return call_method<"getBitString", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<sun::security::util::BitArray> getUnalignedBitString() { return call_method<"getUnalignedBitString", jni::ref<sun::security::util::BitArray>>(); }
	jni::ref<java::lang::String> getAsString() { return call_method<"getAsString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> getBitString(jboolean p1) { return call_method<"getBitString", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<sun::security::util::BitArray> getUnalignedBitString(jboolean p1) { return call_method<"getUnalignedBitString", jni::ref<sun::security::util::BitArray>>(p1); }
	jni::ref<jni::array<jbyte>> getDataBytes() { return call_method<"getDataBytes", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::String> getPrintableString() { return call_method<"getPrintableString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getT61String() { return call_method<"getT61String", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getIA5String() { return call_method<"getIA5String", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getBMPString() { return call_method<"getBMPString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getUTF8String() { return call_method<"getUTF8String", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getGeneralString() { return call_method<"getGeneralString", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Date> getUTCTime() { return call_method<"getUTCTime", jni::ref<java::util::Date>>(); }
	jni::ref<java::util::Date> getGeneralizedTime() { return call_method<"getGeneralizedTime", jni::ref<java::util::Date>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> toByteArray() { return call_method<"toByteArray", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<sun::security::util::DerInputStream> toDerInputStream() { return call_method<"toDerInputStream", jni::ref<sun::security::util::DerInputStream>>(); }
	jint length() { return call_method<"length", jint>(); }
	static jboolean isPrintableStringChar(jchar p1) { return call_static_method<"isPrintableStringChar", jboolean>(p1); }
	static jbyte createTag(jbyte p1, jboolean p2, jbyte p3) { return call_static_method<"createTag", jbyte>(p1, p2, p3); }
	void resetTag(jbyte p1) { return call_method<"resetTag", void>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	DerValue(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DERVALUE
