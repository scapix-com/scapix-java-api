// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_UTIL_SIGNATUREUTIL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_SIGNATUREUTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::util { class SignatureUtil; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::util::SignatureUtil>
{
	static constexpr fixed_string class_name = "sun/security/util/SignatureUtil";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_SIGNATUREUTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_UTIL_SIGNATUREUTIL)
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_SIGNATUREUTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/AlgorithmParameters.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/PublicKey.h>
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/java/security/Signature.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#include <scapix/java_api/sun/security/x509/AlgorithmId.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::util::SignatureUtil : public jni::object_base<"sun/security/util/SignatureUtil",
	java::lang::Object>
{
public:

	static jni::ref<sun::security::util::SignatureUtil> new_object() { return base_::new_object(); }
	static jni::ref<java::security::spec::AlgorithmParameterSpec> getParamSpec(jni::ref<java::lang::String> p1, jni::ref<java::security::AlgorithmParameters> p2) { return call_static_method<"getParamSpec", jni::ref<java::security::spec::AlgorithmParameterSpec>>(p1, p2); }
	static jni::ref<java::security::spec::AlgorithmParameterSpec> getParamSpec(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_static_method<"getParamSpec", jni::ref<java::security::spec::AlgorithmParameterSpec>>(p1, p2); }
	static void initVerifyWithParam(jni::ref<java::security::Signature> p1, jni::ref<java::security::PublicKey> p2, jni::ref<java::security::spec::AlgorithmParameterSpec> p3) { return call_static_method<"initVerifyWithParam", void>(p1, p2, p3); }
	static void initVerifyWithParam(jni::ref<java::security::Signature> p1, jni::ref<java::security::cert::Certificate> p2, jni::ref<java::security::spec::AlgorithmParameterSpec> p3) { return call_static_method<"initVerifyWithParam", void>(p1, p2, p3); }
	static void initSignWithParam(jni::ref<java::security::Signature> p1, jni::ref<java::security::PrivateKey> p2, jni::ref<java::security::spec::AlgorithmParameterSpec> p3, jni::ref<java::security::SecureRandom> p4) { return call_static_method<"initSignWithParam", void>(p1, p2, p3, p4); }
	static jni::ref<java::security::Signature> fromKey(jni::ref<java::lang::String> p1, jni::ref<java::security::PrivateKey> p2, jni::ref<java::lang::String> p3) { return call_static_method<"fromKey", jni::ref<java::security::Signature>>(p1, p2, p3); }
	static jni::ref<java::security::Signature> fromKey(jni::ref<java::lang::String> p1, jni::ref<java::security::PrivateKey> p2, jni::ref<java::security::Provider> p3) { return call_static_method<"fromKey", jni::ref<java::security::Signature>>(p1, p2, p3); }
	static jni::ref<sun::security::x509::AlgorithmId> fromSignature(jni::ref<java::security::Signature> p1, jni::ref<java::security::PrivateKey> p2) { return call_static_method<"fromSignature", jni::ref<sun::security::x509::AlgorithmId>>(p1, p2); }

protected:

	SignatureUtil(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_SIGNATUREUTIL
