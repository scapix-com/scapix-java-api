// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/security/PublicKey.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_X509_X509KEY_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_X509KEY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::x509 { class X509Key; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::x509::X509Key>
{
	static constexpr fixed_string class_name = "sun/security/x509/X509Key";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::security::PublicKey>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_X509KEY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_X509_X509KEY)
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_X509KEY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/security/util/DerOutputStream.h>
#include <scapix/java_api/sun/security/util/DerValue.h>
#include <scapix/java_api/sun/security/x509/AlgorithmId.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::x509::X509Key : public jni::object_base<"sun/security/x509/X509Key",
	java::lang::Object,
	java::security::PublicKey>
{
public:

	static jni::ref<sun::security::x509::X509Key> new_object() { return base_::new_object(); }
	static jni::ref<java::security::PublicKey> parse(jni::ref<sun::security::util::DerValue> p1) { return call_static_method<"parse", jni::ref<java::security::PublicKey>>(p1); }
	jni::ref<java::lang::String> getAlgorithm() { return call_method<"getAlgorithm", jni::ref<java::lang::String>>(); }
	jni::ref<sun::security::x509::AlgorithmId> getAlgorithmId() { return call_method<"getAlgorithmId", jni::ref<sun::security::x509::AlgorithmId>>(); }
	void encode(jni::ref<sun::security::util::DerOutputStream> p1) { return call_method<"encode", void>(p1); }
	jni::ref<jni::array<jbyte>> getEncoded() { return call_method<"getEncoded", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> getEncodedInternal() { return call_method<"getEncodedInternal", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::String> getFormat() { return call_method<"getFormat", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> encode() { return call_method<"encode", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void decode(jni::ref<java::io::InputStream> p1) { return call_method<"decode", void>(p1); }
	void decode(jni::ref<jni::array<jbyte>> p1) { return call_method<"decode", void>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	X509Key(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_X509KEY
