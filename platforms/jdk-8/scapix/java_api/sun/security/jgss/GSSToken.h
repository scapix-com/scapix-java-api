// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSTOKEN_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSTOKEN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::jgss { class GSSToken; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::jgss::GSSToken>
{
	static constexpr fixed_string class_name = "sun/security/jgss/GSSToken";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSTOKEN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSTOKEN)
#define SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSTOKEN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::jgss::GSSToken : public jni::object_base<"sun/security/jgss/GSSToken",
	java::lang::Object>
{
public:

	static jni::ref<sun::security::jgss::GSSToken> new_object() { return base_::new_object(); }
	static void writeLittleEndian(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_static_method<"writeLittleEndian", void>(p1, p2); }
	static void writeLittleEndian(jint p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_static_method<"writeLittleEndian", void>(p1, p2, p3); }
	static void writeBigEndian(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_static_method<"writeBigEndian", void>(p1, p2); }
	static void writeBigEndian(jint p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_static_method<"writeBigEndian", void>(p1, p2, p3); }
	static jint readLittleEndian(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"readLittleEndian", jint>(p1, p2, p3); }
	static jint readBigEndian(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"readBigEndian", jint>(p1, p2, p3); }
	static void writeInt(jint p1, jni::ref<java::io::OutputStream> p2) { return call_static_method<"writeInt", void>(p1, p2); }
	static jint writeInt(jint p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_static_method<"writeInt", jint>(p1, p2, p3); }
	static jint readInt(jni::ref<java::io::InputStream> p1) { return call_static_method<"readInt", jint>(p1); }
	static jint readInt(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"readInt", jint>(p1, p2); }
	static void readFully(jni::ref<java::io::InputStream> p1, jni::ref<jni::array<jbyte>> p2) { return call_static_method<"readFully", void>(p1, p2); }
	static void readFully(jni::ref<java::io::InputStream> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jint p4) { return call_static_method<"readFully", void>(p1, p2, p3, p4); }
	static void debug(jni::ref<java::lang::String> p1) { return call_static_method<"debug", void>(p1); }
	static jni::ref<java::lang::String> getHexBytes(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"getHexBytes", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> getHexBytes(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"getHexBytes", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> getHexBytes(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"getHexBytes", jni::ref<java::lang::String>>(p1, p2, p3); }

protected:

	GSSToken(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSTOKEN
