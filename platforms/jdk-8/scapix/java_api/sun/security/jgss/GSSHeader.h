// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSHEADER_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSHEADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::jgss { class GSSHeader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::jgss::GSSHeader>
{
	static constexpr fixed_string class_name = "sun/security/jgss/GSSHeader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSHEADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSHEADER)
#define SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSHEADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/sun/security/util/ObjectIdentifier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::jgss::GSSHeader : public jni::object_base<"sun/security/jgss/GSSHeader",
	java::lang::Object>
{
public:

	static jint TOKEN_ID() { return get_static_field<"TOKEN_ID", jint>(); }

	static jni::ref<sun::security::jgss::GSSHeader> new_object(jni::ref<sun::security::util::ObjectIdentifier> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::jgss::GSSHeader> new_object(jni::ref<java::io::InputStream> p1) { return base_::new_object(p1); }
	jni::ref<sun::security::util::ObjectIdentifier> getOid() { return call_method<"getOid", jni::ref<sun::security::util::ObjectIdentifier>>(); }
	jint getMechTokenLength() { return call_method<"getMechTokenLength", jint>(); }
	jint getLength() { return call_method<"getLength", jint>(); }
	static jint getMaxMechTokenSize(jni::ref<sun::security::util::ObjectIdentifier> p1, jint p2) { return call_static_method<"getMaxMechTokenSize", jint>(p1, p2); }
	jint encode(jni::ref<java::io::OutputStream> p1) { return call_method<"encode", jint>(p1); }

protected:

	GSSHeader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_JGSS_GSSHEADER
