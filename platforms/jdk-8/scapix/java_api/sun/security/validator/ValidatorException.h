// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/security/cert/CertificateException.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_VALIDATOR_VALIDATOREXCEPTION_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_VALIDATOR_VALIDATOREXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::validator { class ValidatorException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::validator::ValidatorException>
{
	static constexpr fixed_string class_name = "sun/security/validator/ValidatorException";
	using base_classes = std::tuple<scapix::java_api::java::security::cert::CertificateException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_VALIDATOR_VALIDATOREXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_VALIDATOR_VALIDATOREXCEPTION)
#define SCAPIX_JAVA_API_SUN_SECURITY_VALIDATOR_VALIDATOREXCEPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::validator::ValidatorException : public jni::object_base<"sun/security/validator/ValidatorException",
	java::security::cert::CertificateException>
{
public:

	static jni::ref<java::lang::Object> T_NO_TRUST_ANCHOR() { return get_static_field<"T_NO_TRUST_ANCHOR", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> T_EE_EXTENSIONS() { return get_static_field<"T_EE_EXTENSIONS", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> T_CA_EXTENSIONS() { return get_static_field<"T_CA_EXTENSIONS", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> T_CERT_EXPIRED() { return get_static_field<"T_CERT_EXPIRED", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> T_SIGNATURE_ERROR() { return get_static_field<"T_SIGNATURE_ERROR", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> T_NAME_CHAINING() { return get_static_field<"T_NAME_CHAINING", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> T_ALGORITHM_DISABLED() { return get_static_field<"T_ALGORITHM_DISABLED", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> T_UNTRUSTED_CERT() { return get_static_field<"T_UNTRUSTED_CERT", jni::ref<java::lang::Object>>(); }

	static jni::ref<sun::security::validator::ValidatorException> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<sun::security::validator::ValidatorException> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::validator::ValidatorException> new_object(jni::ref<java::lang::Object> p1) { return base_::new_object(p1); }
	static jni::ref<sun::security::validator::ValidatorException> new_object(jni::ref<java::lang::Object> p1, jni::ref<java::security::cert::X509Certificate> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::validator::ValidatorException> new_object(jni::ref<java::lang::Object> p1, jni::ref<java::security::cert::X509Certificate> p2, jni::ref<java::lang::Throwable> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::security::validator::ValidatorException> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<java::security::cert::X509Certificate> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::security::validator::ValidatorException> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<java::security::cert::X509Certificate> p3, jni::ref<java::lang::Throwable> p4) { return base_::new_object(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> getErrorType() { return call_method<"getErrorType", jni::ref<java::lang::Object>>(); }
	jni::ref<java::security::cert::X509Certificate> getErrorCertificate() { return call_method<"getErrorCertificate", jni::ref<java::security::cert::X509Certificate>>(); }

protected:

	ValidatorException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_VALIDATOR_VALIDATOREXCEPTION
