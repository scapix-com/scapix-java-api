// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/security/pkcs/PKCS8Key.h>
#include <scapix/java_api/java/security/interfaces/RSAPrivateCrtKey.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPRIVATECRTKEYIMPL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPRIVATECRTKEYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::rsa { class RSAPrivateCrtKeyImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::rsa::RSAPrivateCrtKeyImpl>
{
	static constexpr fixed_string class_name = "sun/security/rsa/RSAPrivateCrtKeyImpl";
	using base_classes = std::tuple<scapix::java_api::sun::security::pkcs::PKCS8Key, scapix::java_api::java::security::interfaces::RSAPrivateCrtKey>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPRIVATECRTKEYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPRIVATECRTKEYIMPL)
#define SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPRIVATECRTKEYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/security/interfaces/RSAPrivateKey.h>
#include <scapix/java_api/java/security/spec/AlgorithmParameterSpec.h>
#include <scapix/java_api/sun/security/rsa/RSAUtil_KeyType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::rsa::RSAPrivateCrtKeyImpl : public jni::object_base<"sun/security/rsa/RSAPrivateCrtKeyImpl",
	sun::security::pkcs::PKCS8Key,
	java::security::interfaces::RSAPrivateCrtKey>
{
public:

	static jni::ref<java::security::interfaces::RSAPrivateKey> newKey(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"newKey", jni::ref<java::security::interfaces::RSAPrivateKey>>(p1); }
	static jni::ref<java::security::interfaces::RSAPrivateKey> newKey(jni::ref<sun::security::rsa::RSAUtil_KeyType> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<jbyte>> p3) { return call_static_method<"newKey", jni::ref<java::security::interfaces::RSAPrivateKey>>(p1, p2, p3); }
	static jni::ref<java::security::interfaces::RSAPrivateKey> newKey(jni::ref<sun::security::rsa::RSAUtil_KeyType> p1, jni::ref<java::security::spec::AlgorithmParameterSpec> p2, jni::ref<java::math::BigInteger> p3, jni::ref<java::math::BigInteger> p4, jni::ref<java::math::BigInteger> p5, jni::ref<java::math::BigInteger> p6, jni::ref<java::math::BigInteger> p7, jni::ref<java::math::BigInteger> p8, jni::ref<java::math::BigInteger> p9, jni::ref<java::math::BigInteger> p10) { return call_static_method<"newKey", jni::ref<java::security::interfaces::RSAPrivateKey>>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
	jni::ref<java::lang::String> getAlgorithm() { return call_method<"getAlgorithm", jni::ref<java::lang::String>>(); }
	jni::ref<java::math::BigInteger> getModulus() { return call_method<"getModulus", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getPublicExponent() { return call_method<"getPublicExponent", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getPrivateExponent() { return call_method<"getPrivateExponent", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getPrimeP() { return call_method<"getPrimeP", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getPrimeQ() { return call_method<"getPrimeQ", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getPrimeExponentP() { return call_method<"getPrimeExponentP", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getPrimeExponentQ() { return call_method<"getPrimeExponentQ", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::math::BigInteger> getCrtCoefficient() { return call_method<"getCrtCoefficient", jni::ref<java::math::BigInteger>>(); }
	jni::ref<java::security::spec::AlgorithmParameterSpec> getParams() { return call_method<"getParams", jni::ref<java::security::spec::AlgorithmParameterSpec>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	RSAPrivateCrtKeyImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPRIVATECRTKEYIMPL
