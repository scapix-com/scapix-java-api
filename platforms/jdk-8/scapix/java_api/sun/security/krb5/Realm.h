// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_KRB5_REALM_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_REALM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::krb5 { class Realm; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::krb5::Realm>
{
	static constexpr fixed_string class_name = "sun/security/krb5/Realm";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_REALM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_KRB5_REALM)
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_REALM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/security/util/DerInputStream.h>
#include <scapix/java_api/sun/security/util/DerValue.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::krb5::Realm : public jni::object_base<"sun/security/krb5/Realm",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jboolean AUTODEDUCEREALM() { return get_static_field<"AUTODEDUCEREALM", jboolean>(); }

	static jni::ref<sun::security::krb5::Realm> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<sun::security::krb5::Realm> getDefault() { return call_static_method<"getDefault", jni::ref<sun::security::krb5::Realm>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	static jni::ref<sun::security::krb5::Realm> new_object(jni::ref<sun::security::util::DerValue> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> parseRealmAtSeparator(jni::ref<java::lang::String> p1) { return call_static_method<"parseRealmAtSeparator", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> parseRealmComponent(jni::ref<java::lang::String> p1) { return call_static_method<"parseRealmComponent", jni::ref<java::lang::String>>(p1); }
	jni::ref<jni::array<jbyte>> asn1Encode() { return call_method<"asn1Encode", jni::ref<jni::array<jbyte>>>(); }
	static jni::ref<sun::security::krb5::Realm> parse(jni::ref<sun::security::util::DerInputStream> p1, jbyte p2, jboolean p3) { return call_static_method<"parse", jni::ref<sun::security::krb5::Realm>>(p1, p2, p3); }
	static jni::ref<jni::array<java::lang::String>> getRealmsList(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"getRealmsList", jni::ref<jni::array<java::lang::String>>>(p1, p2); }

protected:

	Realm(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_REALM
