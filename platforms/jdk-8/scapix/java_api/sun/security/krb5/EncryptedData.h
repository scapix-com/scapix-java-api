// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTEDDATA_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTEDDATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::krb5 { class EncryptedData; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::krb5::EncryptedData>
{
	static constexpr fixed_string class_name = "sun/security/krb5/EncryptedData";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTEDDATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTEDDATA)
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTEDDATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/sun/security/krb5/EncryptionKey.h>
#include <scapix/java_api/sun/security/util/DerInputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::krb5::EncryptedData : public jni::object_base<"sun/security/krb5/EncryptedData",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jint ETYPE_NULL() { return get_static_field<"ETYPE_NULL", jint>(); }
	static jint ETYPE_DES_CBC_CRC() { return get_static_field<"ETYPE_DES_CBC_CRC", jint>(); }
	static jint ETYPE_DES_CBC_MD4() { return get_static_field<"ETYPE_DES_CBC_MD4", jint>(); }
	static jint ETYPE_DES_CBC_MD5() { return get_static_field<"ETYPE_DES_CBC_MD5", jint>(); }
	static jint ETYPE_ARCFOUR_HMAC() { return get_static_field<"ETYPE_ARCFOUR_HMAC", jint>(); }
	static jint ETYPE_ARCFOUR_HMAC_EXP() { return get_static_field<"ETYPE_ARCFOUR_HMAC_EXP", jint>(); }
	static jint ETYPE_DES3_CBC_HMAC_SHA1_KD() { return get_static_field<"ETYPE_DES3_CBC_HMAC_SHA1_KD", jint>(); }
	static jint ETYPE_AES128_CTS_HMAC_SHA1_96() { return get_static_field<"ETYPE_AES128_CTS_HMAC_SHA1_96", jint>(); }
	static jint ETYPE_AES256_CTS_HMAC_SHA1_96() { return get_static_field<"ETYPE_AES256_CTS_HMAC_SHA1_96", jint>(); }

	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	static jni::ref<sun::security::krb5::EncryptedData> new_object(jint p1, jni::ref<java::lang::Integer> p2, jni::ref<jni::array<jbyte>> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::security::krb5::EncryptedData> new_object(jni::ref<sun::security::krb5::EncryptionKey> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> decrypt(jni::ref<sun::security::krb5::EncryptionKey> p1, jint p2) { return call_method<"decrypt", jni::ref<jni::array<jbyte>>>(p1, p2); }
	jni::ref<jni::array<jbyte>> asn1Encode() { return call_method<"asn1Encode", jni::ref<jni::array<jbyte>>>(); }
	static jni::ref<sun::security::krb5::EncryptedData> parse(jni::ref<sun::security::util::DerInputStream> p1, jbyte p2, jboolean p3) { return call_static_method<"parse", jni::ref<sun::security::krb5::EncryptedData>>(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> reset(jni::ref<jni::array<jbyte>> p1) { return call_method<"reset", jni::ref<jni::array<jbyte>>>(p1); }
	jint getEType() { return call_method<"getEType", jint>(); }
	jni::ref<java::lang::Integer> getKeyVersionNumber() { return call_method<"getKeyVersionNumber", jni::ref<java::lang::Integer>>(); }
	jni::ref<jni::array<jbyte>> getBytes() { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(); }

protected:

	EncryptedData(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTEDDATA
