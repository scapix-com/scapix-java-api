// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTIONKEY_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTIONKEY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::krb5 { class EncryptionKey; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::krb5::EncryptionKey>
{
	static constexpr fixed_string class_name = "sun/security/krb5/EncryptionKey";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTIONKEY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTIONKEY)
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTIONKEY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/security/krb5/PrincipalName.h>
#include <scapix/java_api/sun/security/krb5/internal/PAData_SaltAndParams.h>
#include <scapix/java_api/sun/security/krb5/internal/ccache/CCacheOutputStream.h>
#include <scapix/java_api/sun/security/util/DerInputStream.h>
#include <scapix/java_api/sun/security/util/DerValue.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::krb5::EncryptionKey : public jni::object_base<"sun/security/krb5/EncryptionKey",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<sun::security::krb5::EncryptionKey> NULL_KEY() { return get_static_field<"NULL_KEY", jni::ref<sun::security::krb5::EncryptionKey>>(); }

	jint getEType() { return call_method<"getEType", jint>(); }
	jni::ref<java::lang::Integer> getKeyVersionNumber() { return call_method<"getKeyVersionNumber", jni::ref<java::lang::Integer>>(); }
	jni::ref<jni::array<jbyte>> getBytes() { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	static jni::ref<jni::array<sun::security::krb5::EncryptionKey>> acquireSecretKeys(jni::ref<sun::security::krb5::PrincipalName> p1, jni::ref<java::lang::String> p2) { return call_static_method<"acquireSecretKeys", jni::ref<jni::array<sun::security::krb5::EncryptionKey>>>(p1, p2); }
	static jni::ref<sun::security::krb5::EncryptionKey> acquireSecretKey(jni::ref<sun::security::krb5::PrincipalName> p1, jni::ref<jni::array<jchar>> p2, jint p3, jni::ref<sun::security::krb5::internal::PAData_SaltAndParams> p4) { return call_static_method<"acquireSecretKey", jni::ref<sun::security::krb5::EncryptionKey>>(p1, p2, p3, p4); }
	static jni::ref<sun::security::krb5::EncryptionKey> acquireSecretKey(jni::ref<jni::array<jchar>> p1, jni::ref<java::lang::String> p2, jint p3, jni::ref<jni::array<jbyte>> p4) { return call_static_method<"acquireSecretKey", jni::ref<sun::security::krb5::EncryptionKey>>(p1, p2, p3, p4); }
	static jni::ref<jni::array<sun::security::krb5::EncryptionKey>> acquireSecretKeys(jni::ref<jni::array<jchar>> p1, jni::ref<java::lang::String> p2) { return call_static_method<"acquireSecretKeys", jni::ref<jni::array<sun::security::krb5::EncryptionKey>>>(p1, p2); }
	static jni::ref<sun::security::krb5::EncryptionKey> new_object(jni::ref<jni::array<jbyte>> p1, jint p2, jni::ref<java::lang::Integer> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::security::krb5::EncryptionKey> new_object(jint p1, jni::ref<jni::array<jbyte>> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::krb5::EncryptionKey> new_object(jni::ref<jni::array<jchar>> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::security::krb5::EncryptionKey> new_object(jni::ref<sun::security::krb5::EncryptionKey> p1) { return base_::new_object(p1); }
	static jni::ref<sun::security::krb5::EncryptionKey> new_object(jni::ref<sun::security::util::DerValue> p1) { return base_::new_object(p1); }
	jni::ref<jni::array<jbyte>> asn1Encode() { return call_method<"asn1Encode", jni::ref<jni::array<jbyte>>>(); }
	void destroy() { return call_method<"destroy", void>(); }
	static jni::ref<sun::security::krb5::EncryptionKey> parse(jni::ref<sun::security::util::DerInputStream> p1, jbyte p2, jboolean p3) { return call_static_method<"parse", jni::ref<sun::security::krb5::EncryptionKey>>(p1, p2, p3); }
	void writeKey(jni::ref<sun::security::krb5::internal::ccache::CCacheOutputStream> p1) { return call_method<"writeKey", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<sun::security::krb5::EncryptionKey> findKey(jint p1, jni::ref<jni::array<sun::security::krb5::EncryptionKey>> p2) { return call_static_method<"findKey", jni::ref<sun::security::krb5::EncryptionKey>>(p1, p2); }
	static jni::ref<sun::security::krb5::EncryptionKey> findKey(jint p1, jni::ref<java::lang::Integer> p2, jni::ref<jni::array<sun::security::krb5::EncryptionKey>> p3) { return call_static_method<"findKey", jni::ref<sun::security::krb5::EncryptionKey>>(p1, p2, p3); }

protected:

	EncryptionKey(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_ENCRYPTIONKEY
