// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_KRB5_PRINCIPALNAME_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_PRINCIPALNAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::krb5 { class PrincipalName; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::krb5::PrincipalName>
{
	static constexpr fixed_string class_name = "sun/security/krb5/PrincipalName";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_PRINCIPALNAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_KRB5_PRINCIPALNAME)
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_PRINCIPALNAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/security/krb5/Realm.h>
#include <scapix/java_api/sun/security/krb5/internal/ccache/CCacheOutputStream.h>
#include <scapix/java_api/sun/security/util/DerInputStream.h>
#include <scapix/java_api/sun/security/util/DerValue.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::krb5::PrincipalName : public jni::object_base<"sun/security/krb5/PrincipalName",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jint KRB_NT_UNKNOWN() { return get_static_field<"KRB_NT_UNKNOWN", jint>(); }
	static jint KRB_NT_PRINCIPAL() { return get_static_field<"KRB_NT_PRINCIPAL", jint>(); }
	static jint KRB_NT_SRV_INST() { return get_static_field<"KRB_NT_SRV_INST", jint>(); }
	static jint KRB_NT_SRV_HST() { return get_static_field<"KRB_NT_SRV_HST", jint>(); }
	static jint KRB_NT_SRV_XHST() { return get_static_field<"KRB_NT_SRV_XHST", jint>(); }
	static jint KRB_NT_UID() { return get_static_field<"KRB_NT_UID", jint>(); }
	static jint KRB_NT_ENTERPRISE() { return get_static_field<"KRB_NT_ENTERPRISE", jint>(); }
	static jni::ref<java::lang::String> TGS_DEFAULT_SRV_NAME() { return get_static_field<"TGS_DEFAULT_SRV_NAME", jni::ref<java::lang::String>>(); }
	static jint TGS_DEFAULT_NT() { return get_static_field<"TGS_DEFAULT_NT", jint>(); }
	static jchar NAME_COMPONENT_SEPARATOR() { return get_static_field<"NAME_COMPONENT_SEPARATOR", jchar>(); }
	static jchar NAME_REALM_SEPARATOR() { return get_static_field<"NAME_REALM_SEPARATOR", jchar>(); }
	static jchar REALM_COMPONENT_SEPARATOR() { return get_static_field<"REALM_COMPONENT_SEPARATOR", jchar>(); }
	static jni::ref<java::lang::String> NAME_COMPONENT_SEPARATOR_STR() { return get_static_field<"NAME_COMPONENT_SEPARATOR_STR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NAME_REALM_SEPARATOR_STR() { return get_static_field<"NAME_REALM_SEPARATOR_STR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> REALM_COMPONENT_SEPARATOR_STR() { return get_static_field<"REALM_COMPONENT_SEPARATOR_STR", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::security::krb5::PrincipalName> new_object(jint p1, jni::ref<jni::array<java::lang::String>> p2, jni::ref<sun::security::krb5::Realm> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::security::krb5::PrincipalName> new_object(jni::ref<jni::array<java::lang::String>> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	static jni::ref<sun::security::krb5::PrincipalName> new_object(jni::ref<sun::security::util::DerValue> p1, jni::ref<sun::security::krb5::Realm> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::krb5::PrincipalName> parse(jni::ref<sun::security::util::DerInputStream> p1, jbyte p2, jboolean p3, jni::ref<sun::security::krb5::Realm> p4) { return call_static_method<"parse", jni::ref<sun::security::krb5::PrincipalName>>(p1, p2, p3, p4); }
	static jni::ref<sun::security::krb5::PrincipalName> new_object(jni::ref<java::lang::String> p1, jint p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::security::krb5::PrincipalName> new_object(jni::ref<java::lang::String> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::krb5::PrincipalName> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<sun::security::krb5::PrincipalName> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::security::krb5::PrincipalName> tgsService(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"tgsService", jni::ref<sun::security::krb5::PrincipalName>>(p1, p2); }
	jni::ref<java::lang::String> getRealmAsString() { return call_method<"getRealmAsString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPrincipalNameAsString() { return call_method<"getPrincipalNameAsString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getNameType() { return call_method<"getNameType", jint>(); }
	jni::ref<jni::array<java::lang::String>> getNameStrings() { return call_method<"getNameStrings", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<jni::array<jbyte>>> toByteArray() { return call_method<"toByteArray", jni::ref<jni::array<jni::array<jbyte>>>>(); }
	jni::ref<java::lang::String> getRealmString() { return call_method<"getRealmString", jni::ref<java::lang::String>>(); }
	jni::ref<sun::security::krb5::Realm> getRealm() { return call_method<"getRealm", jni::ref<sun::security::krb5::Realm>>(); }
	jni::ref<java::lang::String> getSalt() { return call_method<"getSalt", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getNameString() { return call_method<"getNameString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> asn1Encode() { return call_method<"asn1Encode", jni::ref<jni::array<jbyte>>>(); }
	jboolean match(jni::ref<sun::security::krb5::PrincipalName> p1) { return call_method<"match", jboolean>(p1); }
	void writePrincipal(jni::ref<sun::security::krb5::internal::ccache::CCacheOutputStream> p1) { return call_method<"writePrincipal", void>(p1); }
	jni::ref<java::lang::String> getInstanceComponent() { return call_method<"getInstanceComponent", jni::ref<java::lang::String>>(); }
	jboolean isRealmDeduced() { return call_method<"isRealmDeduced", jboolean>(); }

protected:

	PrincipalName(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_PRINCIPALNAME
