// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/security/krb5/internal/crypto/EType.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_DES3CBCHMACSHA1KDETYPE_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_DES3CBCHMACSHA1KDETYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::krb5::internal::crypto { class Des3CbcHmacSha1KdEType; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::krb5::internal::crypto::Des3CbcHmacSha1KdEType>
{
	static constexpr fixed_string class_name = "sun/security/krb5/internal/crypto/Des3CbcHmacSha1KdEType";
	using base_classes = std::tuple<scapix::java_api::sun::security::krb5::internal::crypto::EType>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_DES3CBCHMACSHA1KDETYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_DES3CBCHMACSHA1KDETYPE)
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_DES3CBCHMACSHA1KDETYPE

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::krb5::internal::crypto::Des3CbcHmacSha1KdEType : public jni::object_base<"sun/security/krb5/internal/crypto/Des3CbcHmacSha1KdEType",
	sun::security::krb5::internal::crypto::EType>
{
public:

	static jni::ref<sun::security::krb5::internal::crypto::Des3CbcHmacSha1KdEType> new_object() { return base_::new_object(); }
	jint eType() { return call_method<"eType", jint>(); }
	jint minimumPadSize() { return call_method<"minimumPadSize", jint>(); }
	jint confounderSize() { return call_method<"confounderSize", jint>(); }
	jint checksumType() { return call_method<"checksumType", jint>(); }
	jint checksumSize() { return call_method<"checksumSize", jint>(); }
	jint blockSize() { return call_method<"blockSize", jint>(); }
	jint keyType() { return call_method<"keyType", jint>(); }
	jint keySize() { return call_method<"keySize", jint>(); }
	jni::ref<jni::array<jbyte>> encrypt(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_method<"encrypt", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> encrypt(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<jbyte>> p3, jint p4) { return call_method<"encrypt", jni::ref<jni::array<jbyte>>>(p1, p2, p3, p4); }
	jni::ref<jni::array<jbyte>> decrypt(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_method<"decrypt", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> decrypt(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<jbyte>> p3, jint p4) { return call_method<"decrypt", jni::ref<jni::array<jbyte>>>(p1, p2, p3, p4); }
	jni::ref<jni::array<jbyte>> decryptedData(jni::ref<jni::array<jbyte>> p1) { return call_method<"decryptedData", jni::ref<jni::array<jbyte>>>(p1); }

protected:

	Des3CbcHmacSha1KdEType(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_DES3CBCHMACSHA1KDETYPE
