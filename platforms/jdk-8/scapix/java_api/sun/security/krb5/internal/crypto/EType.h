// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_ETYPE_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_ETYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::krb5::internal::crypto { class EType; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::krb5::internal::crypto::EType>
{
	static constexpr fixed_string class_name = "sun/security/krb5/internal/crypto/EType";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_ETYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_ETYPE)
#define SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_ETYPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/security/krb5/EncryptionKey.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::krb5::internal::crypto::EType : public jni::object_base<"sun/security/krb5/internal/crypto/EType",
	java::lang::Object>
{
public:

	static jni::ref<sun::security::krb5::internal::crypto::EType> new_object() { return base_::new_object(); }
	static void initStatic() { return call_static_method<"initStatic", void>(); }
	static jni::ref<sun::security::krb5::internal::crypto::EType> getInstance(jint p1) { return call_static_method<"getInstance", jni::ref<sun::security::krb5::internal::crypto::EType>>(p1); }
	jint eType() { return call_method<"eType", jint>(); }
	jint minimumPadSize() { return call_method<"minimumPadSize", jint>(); }
	jint confounderSize() { return call_method<"confounderSize", jint>(); }
	jint checksumType() { return call_method<"checksumType", jint>(); }
	jint checksumSize() { return call_method<"checksumSize", jint>(); }
	jint blockSize() { return call_method<"blockSize", jint>(); }
	jint keyType() { return call_method<"keyType", jint>(); }
	jint keySize() { return call_method<"keySize", jint>(); }
	jni::ref<jni::array<jbyte>> encrypt(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_method<"encrypt", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> encrypt(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<jbyte>> p3, jint p4) { return call_method<"encrypt", jni::ref<jni::array<jbyte>>>(p1, p2, p3, p4); }
	jni::ref<jni::array<jbyte>> decrypt(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_method<"decrypt", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> decrypt(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<jbyte>> p3, jint p4) { return call_method<"decrypt", jni::ref<jni::array<jbyte>>>(p1, p2, p3, p4); }
	jint dataSize(jni::ref<jni::array<jbyte>> p1) { return call_method<"dataSize", jint>(p1); }
	jint padSize(jni::ref<jni::array<jbyte>> p1) { return call_method<"padSize", jint>(p1); }
	jint startOfChecksum() { return call_method<"startOfChecksum", jint>(); }
	jint startOfData() { return call_method<"startOfData", jint>(); }
	jint startOfPad(jni::ref<jni::array<jbyte>> p1) { return call_method<"startOfPad", jint>(p1); }
	jni::ref<jni::array<jbyte>> decryptedData(jni::ref<jni::array<jbyte>> p1) { return call_method<"decryptedData", jni::ref<jni::array<jbyte>>>(p1); }
	static jni::ref<jni::array<jint>> getBuiltInDefaults() { return call_static_method<"getBuiltInDefaults", jni::ref<jni::array<jint>>>(); }
	static jni::ref<jni::array<jint>> getDefaults(jni::ref<java::lang::String> p1) { return call_static_method<"getDefaults", jni::ref<jni::array<jint>>>(p1); }
	static jni::ref<jni::array<jint>> getDefaults(jni::ref<java::lang::String> p1, jni::ref<jni::array<sun::security::krb5::EncryptionKey>> p2) { return call_static_method<"getDefaults", jni::ref<jni::array<jint>>>(p1, p2); }
	static jboolean isSupported(jint p1, jni::ref<jni::array<jint>> p2) { return call_static_method<"isSupported", jboolean>(p1, p2); }
	static jboolean isSupported(jint p1) { return call_static_method<"isSupported", jboolean>(p1); }
	static jni::ref<java::lang::String> toString(jint p1) { return call_static_method<"toString", jni::ref<java::lang::String>>(p1); }

protected:

	EType(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_KRB5_INTERNAL_CRYPTO_ETYPE
