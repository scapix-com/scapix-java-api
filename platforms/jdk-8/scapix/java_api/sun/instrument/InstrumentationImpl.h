// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/instrument/Instrumentation.h>

#ifndef SCAPIX_JAVA_API_SUN_INSTRUMENT_INSTRUMENTATIONIMPL_FWD
#define SCAPIX_JAVA_API_SUN_INSTRUMENT_INSTRUMENTATIONIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::instrument { class InstrumentationImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::instrument::InstrumentationImpl>
{
	static constexpr fixed_string class_name = "sun/instrument/InstrumentationImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::instrument::Instrumentation>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INSTRUMENT_INSTRUMENTATIONIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_INSTRUMENT_INSTRUMENTATIONIMPL)
#define SCAPIX_JAVA_API_SUN_INSTRUMENT_INSTRUMENTATIONIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/instrument/ClassDefinition.h>
#include <scapix/java_api/java/lang/instrument/ClassFileTransformer.h>
#include <scapix/java_api/java/util/jar/JarFile.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::instrument::InstrumentationImpl : public jni::object_base<"sun/instrument/InstrumentationImpl",
	java::lang::Object,
	java::lang::instrument::Instrumentation>
{
public:

	void addTransformer(jni::ref<java::lang::instrument::ClassFileTransformer> p1) { return call_method<"addTransformer", void>(p1); }
	void addTransformer(jni::ref<java::lang::instrument::ClassFileTransformer> p1, jboolean p2) { return call_method<"addTransformer", void>(p1, p2); }
	jboolean removeTransformer(jni::ref<java::lang::instrument::ClassFileTransformer> p1) { return call_method<"removeTransformer", jboolean>(p1); }
	jboolean isModifiableClass(jni::ref<java::lang::Class> p1) { return call_method<"isModifiableClass", jboolean>(p1); }
	jboolean isRetransformClassesSupported() { return call_method<"isRetransformClassesSupported", jboolean>(); }
	void retransformClasses(jni::ref<jni::array<java::lang::Class>> p1) { return call_method<"retransformClasses", void>(p1); }
	jboolean isRedefineClassesSupported() { return call_method<"isRedefineClassesSupported", jboolean>(); }
	void redefineClasses(jni::ref<jni::array<java::lang::instrument::ClassDefinition>> p1) { return call_method<"redefineClasses", void>(p1); }
	jni::ref<jni::array<java::lang::Class>> getAllLoadedClasses() { return call_method<"getAllLoadedClasses", jni::ref<jni::array<java::lang::Class>>>(); }
	jni::ref<jni::array<java::lang::Class>> getInitiatedClasses(jni::ref<java::lang::ClassLoader> p1) { return call_method<"getInitiatedClasses", jni::ref<jni::array<java::lang::Class>>>(p1); }
	jlong getObjectSize(jni::ref<java::lang::Object> p1) { return call_method<"getObjectSize", jlong>(p1); }
	void appendToBootstrapClassLoaderSearch(jni::ref<java::util::jar::JarFile> p1) { return call_method<"appendToBootstrapClassLoaderSearch", void>(p1); }
	void appendToSystemClassLoaderSearch(jni::ref<java::util::jar::JarFile> p1) { return call_method<"appendToSystemClassLoaderSearch", void>(p1); }
	jboolean isNativeMethodPrefixSupported() { return call_method<"isNativeMethodPrefixSupported", jboolean>(); }
	void setNativeMethodPrefix(jni::ref<java::lang::instrument::ClassFileTransformer> p1, jni::ref<java::lang::String> p2) { return call_method<"setNativeMethodPrefix", void>(p1, p2); }

protected:

	InstrumentationImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INSTRUMENT_INSTRUMENTATIONIMPL
