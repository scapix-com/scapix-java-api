// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/print/ProxyGraphics2D.h>

#ifndef SCAPIX_JAVA_API_SUN_PRINT_PATHGRAPHICS_FWD
#define SCAPIX_JAVA_API_SUN_PRINT_PATHGRAPHICS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::print { class PathGraphics; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::print::PathGraphics>
{
	static constexpr fixed_string class_name = "sun/print/PathGraphics";
	using base_classes = std::tuple<scapix::java_api::sun::print::ProxyGraphics2D>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_PRINT_PATHGRAPHICS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_PRINT_PATHGRAPHICS)
#define SCAPIX_JAVA_API_SUN_PRINT_PATHGRAPHICS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Polygon.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/font/GlyphVector.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/geom/Rectangle2D.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/BufferedImageOp.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/awt/image/RenderedImage.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::print::PathGraphics : public jni::object_base<"sun/print/PathGraphics",
	sun::print::ProxyGraphics2D>
{
public:

	jboolean canDoRedraws() { return call_method<"canDoRedraws", jboolean>(); }
	void redrawRegion(jni::ref<java::awt::geom::Rectangle2D> p1, jdouble p2, jdouble p3, jni::ref<java::awt::Shape> p4, jni::ref<java::awt::geom::AffineTransform> p5) { return call_method<"redrawRegion", void>(p1, p2, p3, p4, p5); }
	void drawLine(jint p1, jint p2, jint p3, jint p4) { return call_method<"drawLine", void>(p1, p2, p3, p4); }
	void drawRect(jint p1, jint p2, jint p3, jint p4) { return call_method<"drawRect", void>(p1, p2, p3, p4); }
	void fillRect(jint p1, jint p2, jint p3, jint p4) { return call_method<"fillRect", void>(p1, p2, p3, p4); }
	void clearRect(jint p1, jint p2, jint p3, jint p4) { return call_method<"clearRect", void>(p1, p2, p3, p4); }
	void drawRoundRect(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"drawRoundRect", void>(p1, p2, p3, p4, p5, p6); }
	void fillRoundRect(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"fillRoundRect", void>(p1, p2, p3, p4, p5, p6); }
	void drawOval(jint p1, jint p2, jint p3, jint p4) { return call_method<"drawOval", void>(p1, p2, p3, p4); }
	void fillOval(jint p1, jint p2, jint p3, jint p4) { return call_method<"fillOval", void>(p1, p2, p3, p4); }
	void drawArc(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"drawArc", void>(p1, p2, p3, p4, p5, p6); }
	void fillArc(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"fillArc", void>(p1, p2, p3, p4, p5, p6); }
	void drawPolyline(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"drawPolyline", void>(p1, p2, p3); }
	void drawPolygon(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"drawPolygon", void>(p1, p2, p3); }
	void drawPolygon(jni::ref<java::awt::Polygon> p1) { return call_method<"drawPolygon", void>(p1); }
	void fillPolygon(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_method<"fillPolygon", void>(p1, p2, p3); }
	void fillPolygon(jni::ref<java::awt::Polygon> p1) { return call_method<"fillPolygon", void>(p1); }
	void drawString(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawString(jni::ref<java::lang::String> p1, jfloat p2, jfloat p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawString(jni::ref<java::text::AttributedCharacterIterator> p1, jint p2, jint p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawString(jni::ref<java::text::AttributedCharacterIterator> p1, jfloat p2, jfloat p3) { return call_method<"drawString", void>(p1, p2, p3); }
	void drawGlyphVector(jni::ref<java::awt::font::GlyphVector> p1, jfloat p2, jfloat p3) { return call_method<"drawGlyphVector", void>(p1, p2, p3); }
	void draw(jni::ref<java::awt::Shape> p1) { return call_method<"draw", void>(p1); }
	void fill(jni::ref<java::awt::Shape> p1) { return call_method<"fill", void>(p1); }
	void fill(jni::ref<java::awt::Shape> p1, jni::ref<java::awt::Color> p2) { return call_method<"fill", void>(p1, p2); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jni::ref<java::awt::image::ImageObserver> p6) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5, p6); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::Color> p4, jni::ref<java::awt::image::ImageObserver> p5) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jni::ref<java::awt::Color> p6, jni::ref<java::awt::image::ImageObserver> p7) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5, p6, p7); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jni::ref<java::awt::image::ImageObserver> p10) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jni::ref<java::awt::Color> p10, jni::ref<java::awt::image::ImageObserver> p11) { return call_method<"drawImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	jboolean drawImage(jni::ref<java::awt::Image> p1, jni::ref<java::awt::geom::AffineTransform> p2, jni::ref<java::awt::image::ImageObserver> p3) { return call_method<"drawImage", jboolean>(p1, p2, p3); }
	void drawImage(jni::ref<java::awt::image::BufferedImage> p1, jni::ref<java::awt::image::BufferedImageOp> p2, jint p3, jint p4) { return call_method<"drawImage", void>(p1, p2, p3, p4); }
	void drawRenderedImage(jni::ref<java::awt::image::RenderedImage> p1, jni::ref<java::awt::geom::AffineTransform> p2) { return call_method<"drawRenderedImage", void>(p1, p2); }

protected:

	PathGraphics(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_PRINT_PATHGRAPHICS
