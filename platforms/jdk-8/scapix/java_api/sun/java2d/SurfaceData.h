// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/Transparency.h>
#include <scapix/java_api/sun/java2d/DisposerTarget.h>
#include <scapix/java_api/sun/java2d/StateTrackable.h>
#include <scapix/java_api/sun/java2d/Surface.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATA_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d { class SurfaceData; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::SurfaceData>
{
	static constexpr fixed_string class_name = "sun/java2d/SurfaceData";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::Transparency, scapix::java_api::sun::java2d::DisposerTarget, scapix::java_api::sun::java2d::StateTrackable, scapix::java_api::sun::java2d::Surface>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATA)
#define SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/Raster.h>
#include <scapix/java_api/sun/java2d/StateTrackable_State.h>
#include <scapix/java_api/sun/java2d/StateTracker.h>
#include <scapix/java_api/sun/java2d/SunGraphics2D.h>
#include <scapix/java_api/sun/java2d/SurfaceDataProxy.h>
#include <scapix/java_api/sun/java2d/loops/CompositeType.h>
#include <scapix/java_api/sun/java2d/loops/RenderLoops.h>
#include <scapix/java_api/sun/java2d/loops/SurfaceType.h>
#include <scapix/java_api/sun/java2d/pipe/TextPipe.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::SurfaceData : public jni::object_base<"sun/java2d/SurfaceData",
	java::lang::Object,
	java::awt::Transparency,
	sun::java2d::DisposerTarget,
	sun::java2d::StateTrackable,
	sun::java2d::Surface>
{
public:

	static jni::ref<sun::java2d::pipe::TextPipe> outlineTextRenderer() { return get_static_field<"outlineTextRenderer", jni::ref<sun::java2d::pipe::TextPipe>>(); }
	static jni::ref<sun::java2d::pipe::TextPipe> solidTextRenderer() { return get_static_field<"solidTextRenderer", jni::ref<sun::java2d::pipe::TextPipe>>(); }
	static jni::ref<sun::java2d::pipe::TextPipe> aaTextRenderer() { return get_static_field<"aaTextRenderer", jni::ref<sun::java2d::pipe::TextPipe>>(); }
	static jni::ref<sun::java2d::pipe::TextPipe> lcdTextRenderer() { return get_static_field<"lcdTextRenderer", jni::ref<sun::java2d::pipe::TextPipe>>(); }

	jni::ref<sun::java2d::SurfaceData> getSourceSurfaceData(jni::ref<java::awt::Image> p1, jint p2, jni::ref<sun::java2d::loops::CompositeType> p3, jni::ref<java::awt::Color> p4) { return call_method<"getSourceSurfaceData", jni::ref<sun::java2d::SurfaceData>>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::SurfaceDataProxy> makeProxyFor(jni::ref<sun::java2d::SurfaceData> p1) { return call_method<"makeProxyFor", jni::ref<sun::java2d::SurfaceDataProxy>>(p1); }
	static jni::ref<sun::java2d::SurfaceData> getPrimarySurfaceData(jni::ref<java::awt::Image> p1) { return call_static_method<"getPrimarySurfaceData", jni::ref<sun::java2d::SurfaceData>>(p1); }
	static jni::ref<sun::java2d::SurfaceData> restoreContents(jni::ref<java::awt::Image> p1) { return call_static_method<"restoreContents", jni::ref<sun::java2d::SurfaceData>>(p1); }
	jni::ref<sun::java2d::StateTrackable_State> getState() { return call_method<"getState", jni::ref<sun::java2d::StateTrackable_State>>(); }
	jni::ref<sun::java2d::StateTracker> getStateTracker() { return call_method<"getStateTracker", jni::ref<sun::java2d::StateTracker>>(); }
	void markDirty() { return call_method<"markDirty", void>(); }
	void setSurfaceLost(jboolean p1) { return call_method<"setSurfaceLost", void>(p1); }
	jboolean isSurfaceLost() { return call_method<"isSurfaceLost", jboolean>(); }
	jboolean isValid() { return call_method<"isValid", jboolean>(); }
	jni::ref<java::lang::Object> getDisposerReferent() { return call_method<"getDisposerReferent", jni::ref<java::lang::Object>>(); }
	jlong getNativeOps() { return call_method<"getNativeOps", jlong>(); }
	void invalidate() { return call_method<"invalidate", void>(); }
	jni::ref<sun::java2d::SurfaceData> getReplacement() { return call_method<"getReplacement", jni::ref<sun::java2d::SurfaceData>>(); }
	jboolean canRenderLCDText(jni::ref<sun::java2d::SunGraphics2D> p1) { return call_method<"canRenderLCDText", jboolean>(p1); }
	jboolean canRenderParallelograms(jni::ref<sun::java2d::SunGraphics2D> p1) { return call_method<"canRenderParallelograms", jboolean>(p1); }
	void validatePipe(jni::ref<sun::java2d::SunGraphics2D> p1) { return call_method<"validatePipe", void>(p1); }
	jni::ref<sun::java2d::loops::RenderLoops> getRenderLoops(jni::ref<sun::java2d::SunGraphics2D> p1) { return call_method<"getRenderLoops", jni::ref<sun::java2d::loops::RenderLoops>>(p1); }
	static jni::ref<sun::java2d::loops::RenderLoops> makeRenderLoops(jni::ref<sun::java2d::loops::SurfaceType> p1, jni::ref<sun::java2d::loops::CompositeType> p2, jni::ref<sun::java2d::loops::SurfaceType> p3) { return call_static_method<"makeRenderLoops", jni::ref<sun::java2d::loops::RenderLoops>>(p1, p2, p3); }
	jni::ref<java::awt::GraphicsConfiguration> getDeviceConfiguration() { return call_method<"getDeviceConfiguration", jni::ref<java::awt::GraphicsConfiguration>>(); }
	jni::ref<sun::java2d::loops::SurfaceType> getSurfaceType() { return call_method<"getSurfaceType", jni::ref<sun::java2d::loops::SurfaceType>>(); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jint getTransparency() { return call_method<"getTransparency", jint>(); }
	jni::ref<java::awt::image::Raster> getRaster(jint p1, jint p2, jint p3, jint p4) { return call_method<"getRaster", jni::ref<java::awt::image::Raster>>(p1, p2, p3, p4); }
	jboolean useTightBBoxes() { return call_method<"useTightBBoxes", jboolean>(); }
	jint pixelFor(jint p1) { return call_method<"pixelFor", jint>(p1); }
	jint pixelFor(jni::ref<java::awt::Color> p1) { return call_method<"pixelFor", jint>(p1); }
	jint rgbFor(jint p1) { return call_method<"rgbFor", jint>(p1); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	static jboolean isNull(jni::ref<sun::java2d::SurfaceData> p1) { return call_static_method<"isNull", jboolean>(p1); }
	jboolean copyArea(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"copyArea", jboolean>(p1, p2, p3, p4, p5, p6, p7); }
	void flush() { return call_method<"flush", void>(); }
	jni::ref<java::lang::Object> getDestination() { return call_method<"getDestination", jni::ref<java::lang::Object>>(); }
	jint getDefaultScale() { return call_method<"getDefaultScale", jint>(); }

protected:

	SurfaceData(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATA
