// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERQUEUE_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERQUEUE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::pipe { class RenderQueue; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::pipe::RenderQueue>
{
	static constexpr fixed_string class_name = "sun/java2d/pipe/RenderQueue";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERQUEUE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERQUEUE)
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERQUEUE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/sun/java2d/pipe/RenderBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::pipe::RenderQueue : public jni::object_base<"sun/java2d/pipe/RenderQueue",
	java::lang::Object>
{
public:

	void lock() { return call_method<"lock", void>(); }
	jboolean tryLock() { return call_method<"tryLock", jboolean>(); }
	void unlock() { return call_method<"unlock", void>(); }
	void addReference(jni::ref<java::lang::Object> p1) { return call_method<"addReference", void>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> getBuffer() { return call_method<"getBuffer", jni::ref<sun::java2d::pipe::RenderBuffer>>(); }
	void ensureCapacity(jint p1) { return call_method<"ensureCapacity", void>(p1); }
	void ensureCapacityAndAlignment(jint p1, jint p2) { return call_method<"ensureCapacityAndAlignment", void>(p1, p2); }
	void ensureAlignment(jint p1) { return call_method<"ensureAlignment", void>(p1); }
	void flushNow() { return call_method<"flushNow", void>(); }
	void flushAndInvokeNow(jni::ref<java::lang::Runnable> p1) { return call_method<"flushAndInvokeNow", void>(p1); }
	void flushNow(jint p1) { return call_method<"flushNow", void>(p1); }

protected:

	RenderQueue(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERQUEUE
