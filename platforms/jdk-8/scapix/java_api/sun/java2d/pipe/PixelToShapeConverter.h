// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/java2d/pipe/PixelDrawPipe.h>
#include <scapix/java_api/sun/java2d/pipe/PixelFillPipe.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_PIXELTOSHAPECONVERTER_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_PIXELTOSHAPECONVERTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::pipe { class PixelToShapeConverter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::pipe::PixelToShapeConverter>
{
	static constexpr fixed_string class_name = "sun/java2d/pipe/PixelToShapeConverter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::java2d::pipe::PixelDrawPipe, scapix::java_api::sun::java2d::pipe::PixelFillPipe>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_PIXELTOSHAPECONVERTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_PIXELTOSHAPECONVERTER)
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_PIXELTOSHAPECONVERTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/java2d/SunGraphics2D.h>
#include <scapix/java_api/sun/java2d/pipe/ShapeDrawPipe.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::pipe::PixelToShapeConverter : public jni::object_base<"sun/java2d/pipe/PixelToShapeConverter",
	java::lang::Object,
	sun::java2d::pipe::PixelDrawPipe,
	sun::java2d::pipe::PixelFillPipe>
{
public:

	static jni::ref<sun::java2d::pipe::PixelToShapeConverter> new_object(jni::ref<sun::java2d::pipe::ShapeDrawPipe> p1) { return base_::new_object(p1); }
	void drawLine(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawLine", void>(p1, p2, p3, p4, p5); }
	void drawRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawRect", void>(p1, p2, p3, p4, p5); }
	void fillRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"fillRect", void>(p1, p2, p3, p4, p5); }
	void drawRoundRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"drawRoundRect", void>(p1, p2, p3, p4, p5, p6, p7); }
	void fillRoundRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"fillRoundRect", void>(p1, p2, p3, p4, p5, p6, p7); }
	void drawOval(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawOval", void>(p1, p2, p3, p4, p5); }
	void fillOval(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"fillOval", void>(p1, p2, p3, p4, p5); }
	void drawArc(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"drawArc", void>(p1, p2, p3, p4, p5, p6, p7); }
	void fillArc(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"fillArc", void>(p1, p2, p3, p4, p5, p6, p7); }
	void drawPolyline(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"drawPolyline", void>(p1, p2, p3, p4); }
	void drawPolygon(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"drawPolygon", void>(p1, p2, p3, p4); }
	void fillPolygon(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"fillPolygon", void>(p1, p2, p3, p4); }

protected:

	PixelToShapeConverter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_PIXELTOSHAPECONVERTER
