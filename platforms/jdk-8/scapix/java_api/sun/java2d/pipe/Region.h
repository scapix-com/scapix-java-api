// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_REGION_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_REGION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::pipe { class Region; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::pipe::Region>
{
	static constexpr fixed_string class_name = "sun/java2d/pipe/Region";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_REGION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_REGION)
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_REGION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/java2d/pipe/RegionIterator.h>
#include <scapix/java_api/sun/java2d/pipe/SpanIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::pipe::Region : public jni::object_base<"sun/java2d/pipe/Region",
	java::lang::Object>
{
public:

	static jni::ref<sun::java2d::pipe::Region> EMPTY_REGION() { return get_static_field<"EMPTY_REGION", jni::ref<sun::java2d::pipe::Region>>(); }
	static jni::ref<sun::java2d::pipe::Region> WHOLE_REGION() { return get_static_field<"WHOLE_REGION", jni::ref<sun::java2d::pipe::Region>>(); }

	static jint dimAdd(jint p1, jint p2) { return call_static_method<"dimAdd", jint>(p1, p2); }
	static jint clipAdd(jint p1, jint p2) { return call_static_method<"clipAdd", jint>(p1, p2); }
	static jint clipScale(jint p1, jdouble p2) { return call_static_method<"clipScale", jint>(p1, p2); }
	static jni::ref<sun::java2d::pipe::Region> getInstance(jni::ref<java::awt::Shape> p1, jni::ref<java::awt::geom::AffineTransform> p2) { return call_static_method<"getInstance", jni::ref<sun::java2d::pipe::Region>>(p1, p2); }
	static jni::ref<sun::java2d::pipe::Region> getInstance(jni::ref<sun::java2d::pipe::Region> p1, jni::ref<java::awt::Shape> p2, jni::ref<java::awt::geom::AffineTransform> p3) { return call_static_method<"getInstance", jni::ref<sun::java2d::pipe::Region>>(p1, p2, p3); }
	static jni::ref<sun::java2d::pipe::Region> getInstance(jni::ref<sun::java2d::pipe::Region> p1, jboolean p2, jni::ref<java::awt::Shape> p3, jni::ref<java::awt::geom::AffineTransform> p4) { return call_static_method<"getInstance", jni::ref<sun::java2d::pipe::Region>>(p1, p2, p3, p4); }
	static jni::ref<sun::java2d::pipe::Region> getInstance(jni::ref<java::awt::Rectangle> p1) { return call_static_method<"getInstance", jni::ref<sun::java2d::pipe::Region>>(p1); }
	static jni::ref<sun::java2d::pipe::Region> getInstanceXYWH(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"getInstanceXYWH", jni::ref<sun::java2d::pipe::Region>>(p1, p2, p3, p4); }
	static jni::ref<sun::java2d::pipe::Region> getInstance(jni::ref<jni::array<jint>> p1) { return call_static_method<"getInstance", jni::ref<sun::java2d::pipe::Region>>(p1); }
	static jni::ref<sun::java2d::pipe::Region> getInstanceXYXY(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"getInstanceXYXY", jni::ref<sun::java2d::pipe::Region>>(p1, p2, p3, p4); }
	void setOutputArea(jni::ref<java::awt::Rectangle> p1) { return call_method<"setOutputArea", void>(p1); }
	void setOutputAreaXYWH(jint p1, jint p2, jint p3, jint p4) { return call_method<"setOutputAreaXYWH", void>(p1, p2, p3, p4); }
	void setOutputArea(jni::ref<jni::array<jint>> p1) { return call_method<"setOutputArea", void>(p1); }
	void setOutputAreaXYXY(jint p1, jint p2, jint p3, jint p4) { return call_method<"setOutputAreaXYXY", void>(p1, p2, p3, p4); }
	void appendSpans(jni::ref<sun::java2d::pipe::SpanIterator> p1) { return call_method<"appendSpans", void>(p1); }
	jni::ref<sun::java2d::pipe::Region> getScaledRegion(jdouble p1, jdouble p2) { return call_method<"getScaledRegion", jni::ref<sun::java2d::pipe::Region>>(p1, p2); }
	jni::ref<sun::java2d::pipe::Region> getTranslatedRegion(jint p1, jint p2) { return call_method<"getTranslatedRegion", jni::ref<sun::java2d::pipe::Region>>(p1, p2); }
	jni::ref<sun::java2d::pipe::Region> getIntersection(jni::ref<java::awt::Rectangle> p1) { return call_method<"getIntersection", jni::ref<sun::java2d::pipe::Region>>(p1); }
	jni::ref<sun::java2d::pipe::Region> getIntersectionXYWH(jint p1, jint p2, jint p3, jint p4) { return call_method<"getIntersectionXYWH", jni::ref<sun::java2d::pipe::Region>>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::pipe::Region> getIntersectionXYXY(jint p1, jint p2, jint p3, jint p4) { return call_method<"getIntersectionXYXY", jni::ref<sun::java2d::pipe::Region>>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::pipe::Region> getIntersection(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"getIntersection", jni::ref<sun::java2d::pipe::Region>>(p1); }
	jni::ref<sun::java2d::pipe::Region> getUnion(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"getUnion", jni::ref<sun::java2d::pipe::Region>>(p1); }
	jni::ref<sun::java2d::pipe::Region> getDifference(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"getDifference", jni::ref<sun::java2d::pipe::Region>>(p1); }
	jni::ref<sun::java2d::pipe::Region> getExclusiveOr(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"getExclusiveOr", jni::ref<sun::java2d::pipe::Region>>(p1); }
	jni::ref<sun::java2d::pipe::Region> getBoundsIntersection(jni::ref<java::awt::Rectangle> p1) { return call_method<"getBoundsIntersection", jni::ref<sun::java2d::pipe::Region>>(p1); }
	jni::ref<sun::java2d::pipe::Region> getBoundsIntersectionXYWH(jint p1, jint p2, jint p3, jint p4) { return call_method<"getBoundsIntersectionXYWH", jni::ref<sun::java2d::pipe::Region>>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::pipe::Region> getBoundsIntersectionXYXY(jint p1, jint p2, jint p3, jint p4) { return call_method<"getBoundsIntersectionXYXY", jni::ref<sun::java2d::pipe::Region>>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::pipe::Region> getBoundsIntersection(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"getBoundsIntersection", jni::ref<sun::java2d::pipe::Region>>(p1); }
	jint getLoX() { return call_method<"getLoX", jint>(); }
	jint getLoY() { return call_method<"getLoY", jint>(); }
	jint getHiX() { return call_method<"getHiX", jint>(); }
	jint getHiY() { return call_method<"getHiY", jint>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean isRectangular() { return call_method<"isRectangular", jboolean>(); }
	jboolean contains(jint p1, jint p2) { return call_method<"contains", jboolean>(p1, p2); }
	jboolean isInsideXYWH(jint p1, jint p2, jint p3, jint p4) { return call_method<"isInsideXYWH", jboolean>(p1, p2, p3, p4); }
	jboolean isInsideXYXY(jint p1, jint p2, jint p3, jint p4) { return call_method<"isInsideXYXY", jboolean>(p1, p2, p3, p4); }
	jboolean isInsideQuickCheck(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"isInsideQuickCheck", jboolean>(p1); }
	jboolean intersectsQuickCheckXYXY(jint p1, jint p2, jint p3, jint p4) { return call_method<"intersectsQuickCheckXYXY", jboolean>(p1, p2, p3, p4); }
	jboolean intersectsQuickCheck(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"intersectsQuickCheck", jboolean>(p1); }
	jboolean encompasses(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"encompasses", jboolean>(p1); }
	jboolean encompassesXYWH(jint p1, jint p2, jint p3, jint p4) { return call_method<"encompassesXYWH", jboolean>(p1, p2, p3, p4); }
	jboolean encompassesXYXY(jint p1, jint p2, jint p3, jint p4) { return call_method<"encompassesXYXY", jboolean>(p1, p2, p3, p4); }
	void getBounds(jni::ref<jni::array<jint>> p1) { return call_method<"getBounds", void>(p1); }
	void clipBoxToBounds(jni::ref<jni::array<jint>> p1) { return call_method<"clipBoxToBounds", void>(p1); }
	jni::ref<sun::java2d::pipe::RegionIterator> getIterator() { return call_method<"getIterator", jni::ref<sun::java2d::pipe::RegionIterator>>(); }
	jni::ref<sun::java2d::pipe::SpanIterator> getSpanIterator() { return call_method<"getSpanIterator", jni::ref<sun::java2d::pipe::SpanIterator>>(); }
	jni::ref<sun::java2d::pipe::SpanIterator> getSpanIterator(jni::ref<jni::array<jint>> p1) { return call_method<"getSpanIterator", jni::ref<sun::java2d::pipe::SpanIterator>>(p1); }
	jni::ref<sun::java2d::pipe::SpanIterator> filter(jni::ref<sun::java2d::pipe::SpanIterator> p1) { return call_method<"filter", jni::ref<sun::java2d::pipe::SpanIterator>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	Region(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_REGION
