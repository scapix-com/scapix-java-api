// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/java2d/pipe/PixelDrawPipe.h>
#include <scapix/java_api/sun/java2d/pipe/PixelFillPipe.h>
#include <scapix/java_api/sun/java2d/pipe/ShapeDrawPipe.h>
#include <scapix/java_api/sun/java2d/pipe/TextPipe.h>
#include <scapix/java_api/sun/java2d/pipe/DrawImagePipe.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_NULLPIPE_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_NULLPIPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::pipe { class NullPipe; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::pipe::NullPipe>
{
	static constexpr fixed_string class_name = "sun/java2d/pipe/NullPipe";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::java2d::pipe::PixelDrawPipe, scapix::java_api::sun::java2d::pipe::PixelFillPipe, scapix::java_api::sun::java2d::pipe::ShapeDrawPipe, scapix::java_api::sun::java2d::pipe::TextPipe, scapix::java_api::sun::java2d::pipe::DrawImagePipe>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_NULLPIPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_NULLPIPE)
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_NULLPIPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/font/GlyphVector.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/BufferedImageOp.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/java2d/SunGraphics2D.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::pipe::NullPipe : public jni::object_base<"sun/java2d/pipe/NullPipe",
	java::lang::Object,
	sun::java2d::pipe::PixelDrawPipe,
	sun::java2d::pipe::PixelFillPipe,
	sun::java2d::pipe::ShapeDrawPipe,
	sun::java2d::pipe::TextPipe,
	sun::java2d::pipe::DrawImagePipe>
{
public:

	static jni::ref<sun::java2d::pipe::NullPipe> new_object() { return base_::new_object(); }
	void drawLine(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawLine", void>(p1, p2, p3, p4, p5); }
	void drawRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawRect", void>(p1, p2, p3, p4, p5); }
	void fillRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"fillRect", void>(p1, p2, p3, p4, p5); }
	void drawRoundRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"drawRoundRect", void>(p1, p2, p3, p4, p5, p6, p7); }
	void fillRoundRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"fillRoundRect", void>(p1, p2, p3, p4, p5, p6, p7); }
	void drawOval(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawOval", void>(p1, p2, p3, p4, p5); }
	void fillOval(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"fillOval", void>(p1, p2, p3, p4, p5); }
	void drawArc(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"drawArc", void>(p1, p2, p3, p4, p5, p6, p7); }
	void fillArc(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"fillArc", void>(p1, p2, p3, p4, p5, p6, p7); }
	void drawPolyline(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"drawPolyline", void>(p1, p2, p3, p4); }
	void drawPolygon(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"drawPolygon", void>(p1, p2, p3, p4); }
	void fillPolygon(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"fillPolygon", void>(p1, p2, p3, p4); }
	void draw(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Shape> p2) { return call_method<"draw", void>(p1, p2); }
	void fill(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Shape> p2) { return call_method<"fill", void>(p1, p2); }
	void drawString(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::lang::String> p2, jdouble p3, jdouble p4) { return call_method<"drawString", void>(p1, p2, p3, p4); }
	void drawGlyphVector(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::font::GlyphVector> p2, jfloat p3, jfloat p4) { return call_method<"drawGlyphVector", void>(p1, p2, p3, p4); }
	void drawChars(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jchar>> p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"drawChars", void>(p1, p2, p3, p4, p5, p6); }
	jboolean copyImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jni::ref<java::awt::Color> p5, jni::ref<java::awt::image::ImageObserver> p6) { return call_method<"copyImage", jboolean>(p1, p2, p3, p4, p5, p6); }
	jboolean copyImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jni::ref<java::awt::Color> p9, jni::ref<java::awt::image::ImageObserver> p10) { return call_method<"copyImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
	jboolean scaleImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jni::ref<java::awt::Color> p7, jni::ref<java::awt::image::ImageObserver> p8) { return call_method<"scaleImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jboolean scaleImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jni::ref<java::awt::Color> p11, jni::ref<java::awt::image::ImageObserver> p12) { return call_method<"scaleImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
	jboolean transformImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jni::ref<java::awt::geom::AffineTransform> p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"transformImage", jboolean>(p1, p2, p3, p4); }
	void transformImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::image::BufferedImage> p2, jni::ref<java::awt::image::BufferedImageOp> p3, jint p4, jint p5) { return call_method<"transformImage", void>(p1, p2, p3, p4, p5); }

protected:

	NullPipe(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_NULLPIPE
