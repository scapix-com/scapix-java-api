// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/java2d/pipe/RenderingEngine.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERINGENGINE_TRACER_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERINGENGINE_TRACER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::pipe { class RenderingEngine_Tracer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::pipe::RenderingEngine_Tracer>
{
	static constexpr fixed_string class_name = "sun/java2d/pipe/RenderingEngine$Tracer";
	using base_classes = std::tuple<scapix::java_api::sun::java2d::pipe::RenderingEngine>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERINGENGINE_TRACER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERINGENGINE_TRACER)
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERINGENGINE_TRACER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/BasicStroke.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/sun/awt/geom/PathConsumer2D.h>
#include <scapix/java_api/sun/java2d/pipe/AATileGenerator.h>
#include <scapix/java_api/sun/java2d/pipe/Region.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::java2d::pipe::RenderingEngine_Tracer : public jni::object_base<"sun/java2d/pipe/RenderingEngine$Tracer",
	sun::java2d::pipe::RenderingEngine>
{
public:

	static jni::ref<sun::java2d::pipe::RenderingEngine_Tracer> new_object(jni::ref<sun::java2d::pipe::RenderingEngine> p1) { return base_::new_object(p1); }
	jni::ref<java::awt::Shape> createStrokedShape(jni::ref<java::awt::Shape> p1, jfloat p2, jint p3, jint p4, jfloat p5, jni::ref<jni::array<jfloat>> p6, jfloat p7) { return call_method<"createStrokedShape", jni::ref<java::awt::Shape>>(p1, p2, p3, p4, p5, p6, p7); }
	void strokeTo(jni::ref<java::awt::Shape> p1, jni::ref<java::awt::geom::AffineTransform> p2, jni::ref<java::awt::BasicStroke> p3, jboolean p4, jboolean p5, jboolean p6, jni::ref<sun::awt::geom::PathConsumer2D> p7) { return call_method<"strokeTo", void>(p1, p2, p3, p4, p5, p6, p7); }
	jfloat getMinimumAAPenSize() { return call_method<"getMinimumAAPenSize", jfloat>(); }
	jni::ref<sun::java2d::pipe::AATileGenerator> getAATileGenerator(jni::ref<java::awt::Shape> p1, jni::ref<java::awt::geom::AffineTransform> p2, jni::ref<sun::java2d::pipe::Region> p3, jni::ref<java::awt::BasicStroke> p4, jboolean p5, jboolean p6, jni::ref<jni::array<jint>> p7) { return call_method<"getAATileGenerator", jni::ref<sun::java2d::pipe::AATileGenerator>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<sun::java2d::pipe::AATileGenerator> getAATileGenerator(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8, jni::ref<sun::java2d::pipe::Region> p9, jni::ref<jni::array<jint>> p10) { return call_method<"getAATileGenerator", jni::ref<sun::java2d::pipe::AATileGenerator>>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }

protected:

	RenderingEngine_Tracer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERINGENGINE_TRACER
