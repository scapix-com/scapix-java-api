// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/java2d/pipe/PixelDrawPipe.h>
#include <scapix/java_api/sun/java2d/pipe/PixelFillPipe.h>
#include <scapix/java_api/sun/java2d/pipe/ParallelogramPipe.h>
#include <scapix/java_api/sun/java2d/pipe/ShapeDrawPipe.h>
#include <scapix/java_api/sun/java2d/pipe/LoopBasedPipe.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_LOOPPIPE_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_LOOPPIPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::pipe { class LoopPipe; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::pipe::LoopPipe>
{
	static constexpr fixed_string class_name = "sun/java2d/pipe/LoopPipe";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::java2d::pipe::PixelDrawPipe, scapix::java_api::sun::java2d::pipe::PixelFillPipe, scapix::java_api::sun::java2d::pipe::ParallelogramPipe, scapix::java_api::sun::java2d::pipe::ShapeDrawPipe, scapix::java_api::sun::java2d::pipe::LoopBasedPipe>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_LOOPPIPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_LOOPPIPE)
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_LOOPPIPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/sun/java2d/SunGraphics2D.h>
#include <scapix/java_api/sun/java2d/pipe/ShapeSpanIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::pipe::LoopPipe : public jni::object_base<"sun/java2d/pipe/LoopPipe",
	java::lang::Object,
	sun::java2d::pipe::PixelDrawPipe,
	sun::java2d::pipe::PixelFillPipe,
	sun::java2d::pipe::ParallelogramPipe,
	sun::java2d::pipe::ShapeDrawPipe,
	sun::java2d::pipe::LoopBasedPipe>
{
public:

	static jni::ref<sun::java2d::pipe::LoopPipe> new_object() { return base_::new_object(); }
	void drawLine(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawLine", void>(p1, p2, p3, p4, p5); }
	void drawRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawRect", void>(p1, p2, p3, p4, p5); }
	void drawRoundRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"drawRoundRect", void>(p1, p2, p3, p4, p5, p6, p7); }
	void drawOval(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"drawOval", void>(p1, p2, p3, p4, p5); }
	void drawArc(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"drawArc", void>(p1, p2, p3, p4, p5, p6, p7); }
	void drawPolyline(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"drawPolyline", void>(p1, p2, p3, p4); }
	void drawPolygon(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"drawPolygon", void>(p1, p2, p3, p4); }
	void fillRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"fillRect", void>(p1, p2, p3, p4, p5); }
	void fillRoundRect(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"fillRoundRect", void>(p1, p2, p3, p4, p5, p6, p7); }
	void fillOval(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"fillOval", void>(p1, p2, p3, p4, p5); }
	void fillArc(jni::ref<sun::java2d::SunGraphics2D> p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) { return call_method<"fillArc", void>(p1, p2, p3, p4, p5, p6, p7); }
	void fillPolygon(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_method<"fillPolygon", void>(p1, p2, p3, p4); }
	void draw(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Shape> p2) { return call_method<"draw", void>(p1, p2); }
	static jni::ref<sun::java2d::pipe::ShapeSpanIterator> getFillSSI(jni::ref<sun::java2d::SunGraphics2D> p1) { return call_static_method<"getFillSSI", jni::ref<sun::java2d::pipe::ShapeSpanIterator>>(p1); }
	static jni::ref<sun::java2d::pipe::ShapeSpanIterator> getStrokeSpans(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Shape> p2) { return call_static_method<"getStrokeSpans", jni::ref<sun::java2d::pipe::ShapeSpanIterator>>(p1, p2); }
	void fill(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Shape> p2) { return call_method<"fill", void>(p1, p2); }
	void fillParallelogram(jni::ref<sun::java2d::SunGraphics2D> p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8, jdouble p9, jdouble p10, jdouble p11) { return call_method<"fillParallelogram", void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	void drawParallelogram(jni::ref<sun::java2d::SunGraphics2D> p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8, jdouble p9, jdouble p10, jdouble p11, jdouble p12, jdouble p13) { return call_method<"drawParallelogram", void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13); }

protected:

	LoopPipe(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_LOOPPIPE
