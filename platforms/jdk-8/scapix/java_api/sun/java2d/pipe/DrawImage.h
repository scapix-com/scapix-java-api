// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/java2d/pipe/DrawImagePipe.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_DRAWIMAGE_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_DRAWIMAGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::pipe { class DrawImage; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::pipe::DrawImage>
{
	static constexpr fixed_string class_name = "sun/java2d/pipe/DrawImage";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::java2d::pipe::DrawImagePipe>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_DRAWIMAGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_DRAWIMAGE)
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_DRAWIMAGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/BufferedImageOp.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/sun/java2d/SunGraphics2D.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::pipe::DrawImage : public jni::object_base<"sun/java2d/pipe/DrawImage",
	java::lang::Object,
	sun::java2d::pipe::DrawImagePipe>
{
public:

	static jni::ref<sun::java2d::pipe::DrawImage> new_object() { return base_::new_object(); }
	jboolean copyImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jni::ref<java::awt::Color> p5) { return call_method<"copyImage", jboolean>(p1, p2, p3, p4, p5); }
	jboolean copyImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jni::ref<java::awt::Color> p9) { return call_method<"copyImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
	jboolean scaleImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jni::ref<java::awt::Color> p7) { return call_method<"scaleImage", jboolean>(p1, p2, p3, p4, p5, p6, p7); }
	jboolean scaleImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jni::ref<java::awt::Color> p11) { return call_method<"scaleImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	static jboolean closeToInteger(jint p1, jdouble p2) { return call_static_method<"closeToInteger", jboolean>(p1, p2); }
	static jboolean isSimpleTranslate(jni::ref<sun::java2d::SunGraphics2D> p1) { return call_static_method<"isSimpleTranslate", jboolean>(p1); }
	jboolean copyImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jni::ref<java::awt::Color> p5, jni::ref<java::awt::image::ImageObserver> p6) { return call_method<"copyImage", jboolean>(p1, p2, p3, p4, p5, p6); }
	jboolean copyImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jni::ref<java::awt::Color> p9, jni::ref<java::awt::image::ImageObserver> p10) { return call_method<"copyImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
	jboolean scaleImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jni::ref<java::awt::Color> p7, jni::ref<java::awt::image::ImageObserver> p8) { return call_method<"scaleImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jboolean scaleImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jni::ref<java::awt::Color> p11, jni::ref<java::awt::image::ImageObserver> p12) { return call_method<"scaleImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
	jboolean transformImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::Image> p2, jni::ref<java::awt::geom::AffineTransform> p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"transformImage", jboolean>(p1, p2, p3, p4); }
	void transformImage(jni::ref<sun::java2d::SunGraphics2D> p1, jni::ref<java::awt::image::BufferedImage> p2, jni::ref<java::awt::image::BufferedImageOp> p3, jint p4, jint p5) { return call_method<"transformImage", void>(p1, p2, p3, p4, p5); }

protected:

	DrawImage(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_DRAWIMAGE
