// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERBUFFER_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::pipe { class RenderBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::pipe::RenderBuffer>
{
	static constexpr fixed_string class_name = "sun/java2d/pipe/RenderBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERBUFFER)
#define SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERBUFFER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::pipe::RenderBuffer : public jni::object_base<"sun/java2d/pipe/RenderBuffer",
	java::lang::Object>
{
public:

	static jni::ref<sun::java2d::pipe::RenderBuffer> allocate(jint p1) { return call_static_method<"allocate", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jlong getAddress() { return call_method<"getAddress", jlong>(); }
	jint capacity() { return call_method<"capacity", jint>(); }
	jint remaining() { return call_method<"remaining", jint>(); }
	jint position() { return call_method<"position", jint>(); }
	void position(jlong p1) { return call_method<"position", void>(p1); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<sun::java2d::pipe::RenderBuffer> skip(jlong p1) { return call_method<"skip", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> putByte(jbyte p1) { return call_method<"putByte", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jbyte>> p1) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1, p2, p3); }
	jni::ref<sun::java2d::pipe::RenderBuffer> putShort(jshort p1) { return call_method<"putShort", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jshort>> p1) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1, p2, p3); }
	jni::ref<sun::java2d::pipe::RenderBuffer> putInt(jint p1, jint p2) { return call_method<"putInt", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1, p2); }
	jni::ref<sun::java2d::pipe::RenderBuffer> putInt(jint p1) { return call_method<"putInt", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jint>> p1) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1, p2, p3); }
	jni::ref<sun::java2d::pipe::RenderBuffer> putFloat(jfloat p1) { return call_method<"putFloat", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jfloat>> p1) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1, p2, p3); }
	jni::ref<sun::java2d::pipe::RenderBuffer> putLong(jlong p1) { return call_method<"putLong", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jlong>> p1) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }
	jni::ref<sun::java2d::pipe::RenderBuffer> put(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_method<"put", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1, p2, p3); }
	jni::ref<sun::java2d::pipe::RenderBuffer> putDouble(jdouble p1) { return call_method<"putDouble", jni::ref<sun::java2d::pipe::RenderBuffer>>(p1); }

protected:

	RenderBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_PIPE_RENDERBUFFER
