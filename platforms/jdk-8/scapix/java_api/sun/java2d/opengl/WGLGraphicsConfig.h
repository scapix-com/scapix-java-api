// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/Win32GraphicsConfig.h>
#include <scapix/java_api/sun/java2d/opengl/OGLGraphicsConfig.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_OPENGL_WGLGRAPHICSCONFIG_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_OPENGL_WGLGRAPHICSCONFIG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::opengl { class WGLGraphicsConfig; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::opengl::WGLGraphicsConfig>
{
	static constexpr fixed_string class_name = "sun/java2d/opengl/WGLGraphicsConfig";
	using base_classes = std::tuple<scapix::java_api::sun::awt::Win32GraphicsConfig, scapix::java_api::sun::java2d::opengl::OGLGraphicsConfig>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_OPENGL_WGLGRAPHICSCONFIG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_OPENGL_WGLGRAPHICSCONFIG)
#define SCAPIX_JAVA_API_SUN_JAVA2D_OPENGL_WGLGRAPHICSCONFIG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/BufferCapabilities.h>
#include <scapix/java_api/java/awt/BufferCapabilities_FlipContents.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/ImageCapabilities.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/VolatileImage.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/awt/Win32GraphicsDevice.h>
#include <scapix/java_api/sun/awt/windows/WComponentPeer.h>
#include <scapix/java_api/sun/java2d/SurfaceData.h>
#include <scapix/java_api/sun/java2d/opengl/OGLContext.h>
#include <scapix/java_api/sun/java2d/pipe/hw/AccelDeviceEventListener.h>
#include <scapix/java_api/sun/java2d/pipe/hw/ContextCapabilities.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::opengl::WGLGraphicsConfig : public jni::object_base<"sun/java2d/opengl/WGLGraphicsConfig",
	sun::awt::Win32GraphicsConfig,
	sun::java2d::opengl::OGLGraphicsConfig>
{
public:

	static jint getDefaultPixFmt(jint p1) { return call_static_method<"getDefaultPixFmt", jint>(p1); }
	jni::ref<java::lang::Object> getProxyKey() { return call_method<"getProxyKey", jni::ref<java::lang::Object>>(); }
	jni::ref<sun::java2d::SurfaceData> createManagedSurface(jint p1, jint p2, jint p3) { return call_method<"createManagedSurface", jni::ref<sun::java2d::SurfaceData>>(p1, p2, p3); }
	static jni::ref<sun::java2d::opengl::WGLGraphicsConfig> getConfig(jni::ref<sun::awt::Win32GraphicsDevice> p1, jint p2) { return call_static_method<"getConfig", jni::ref<sun::java2d::opengl::WGLGraphicsConfig>>(p1, p2); }
	static jboolean isWGLAvailable() { return call_static_method<"isWGLAvailable", jboolean>(); }
	jboolean isCapPresent(jint p1) { return call_method<"isCapPresent", jboolean>(p1); }
	jlong getNativeConfigInfo() { return call_method<"getNativeConfigInfo", jlong>(); }
	jni::ref<sun::java2d::opengl::OGLContext> getContext() { return call_method<"getContext", jni::ref<sun::java2d::opengl::OGLContext>>(); }
	void displayChanged() { return call_method<"displayChanged", void>(); }
	jni::ref<java::awt::image::ColorModel> getColorModel(jint p1) { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<sun::java2d::SurfaceData> createSurfaceData(jni::ref<sun::awt::windows::WComponentPeer> p1, jint p2) { return call_method<"createSurfaceData", jni::ref<sun::java2d::SurfaceData>>(p1, p2); }
	void assertOperationSupported(jni::ref<java::awt::Component> p1, jint p2, jni::ref<java::awt::BufferCapabilities> p3) { return call_method<"assertOperationSupported", void>(p1, p2, p3); }
	jni::ref<java::awt::image::VolatileImage> createBackBuffer(jni::ref<sun::awt::windows::WComponentPeer> p1) { return call_method<"createBackBuffer", jni::ref<java::awt::image::VolatileImage>>(p1); }
	void flip(jni::ref<sun::awt::windows::WComponentPeer> p1, jni::ref<java::awt::Component> p2, jni::ref<java::awt::image::VolatileImage> p3, jint p4, jint p5, jint p6, jint p7, jni::ref<java::awt::BufferCapabilities_FlipContents> p8) { return call_method<"flip", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jni::ref<java::awt::BufferCapabilities> getBufferCapabilities() { return call_method<"getBufferCapabilities", jni::ref<java::awt::BufferCapabilities>>(); }
	jni::ref<java::awt::ImageCapabilities> getImageCapabilities() { return call_method<"getImageCapabilities", jni::ref<java::awt::ImageCapabilities>>(); }
	jni::ref<java::awt::image::VolatileImage> createCompatibleVolatileImage(jint p1, jint p2, jint p3, jint p4) { return call_method<"createCompatibleVolatileImage", jni::ref<java::awt::image::VolatileImage>>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::pipe::hw::ContextCapabilities> getContextCapabilities() { return call_method<"getContextCapabilities", jni::ref<sun::java2d::pipe::hw::ContextCapabilities>>(); }
	void addDeviceEventListener(jni::ref<sun::java2d::pipe::hw::AccelDeviceEventListener> p1) { return call_method<"addDeviceEventListener", void>(p1); }
	void removeDeviceEventListener(jni::ref<sun::java2d::pipe::hw::AccelDeviceEventListener> p1) { return call_method<"removeDeviceEventListener", void>(p1); }

protected:

	WGLGraphicsConfig(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_OPENGL_WGLGRAPHICSCONFIG
