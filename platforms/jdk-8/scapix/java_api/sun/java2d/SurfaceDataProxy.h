// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/awt/DisplayChangedListener.h>
#include <scapix/java_api/sun/awt/image/SurfaceManager_FlushableCacheData.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATAPROXY_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATAPROXY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d { class SurfaceDataProxy; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::SurfaceDataProxy>
{
	static constexpr fixed_string class_name = "sun/java2d/SurfaceDataProxy";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::awt::DisplayChangedListener, scapix::java_api::sun::awt::image::SurfaceManager_FlushableCacheData>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATAPROXY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATAPROXY)
#define SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATAPROXY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/sun/java2d/StateTracker.h>
#include <scapix/java_api/sun/java2d/SurfaceData.h>
#include <scapix/java_api/sun/java2d/loops/CompositeType.h>
#include <scapix/java_api/sun/java2d/SurfaceDataProxy_CountdownTracker.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::SurfaceDataProxy : public jni::object_base<"sun/java2d/SurfaceDataProxy",
	java::lang::Object,
	sun::awt::DisplayChangedListener,
	sun::awt::image::SurfaceManager_FlushableCacheData>
{
public:

	using CountdownTracker = SurfaceDataProxy_CountdownTracker;

	static jni::ref<sun::java2d::SurfaceDataProxy> UNCACHED() { return get_static_field<"UNCACHED", jni::ref<sun::java2d::SurfaceDataProxy>>(); }
	static void UNCACHED(jni::ref<sun::java2d::SurfaceDataProxy> v) { set_static_field<"UNCACHED", jni::ref<sun::java2d::SurfaceDataProxy>>(v); }

	static jboolean isCachingAllowed() { return call_static_method<"isCachingAllowed", jboolean>(); }
	jboolean isSupportedOperation(jni::ref<sun::java2d::SurfaceData> p1, jint p2, jni::ref<sun::java2d::loops::CompositeType> p3, jni::ref<java::awt::Color> p4) { return call_method<"isSupportedOperation", jboolean>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::SurfaceData> validateSurfaceData(jni::ref<sun::java2d::SurfaceData> p1, jni::ref<sun::java2d::SurfaceData> p2, jint p3, jint p4) { return call_method<"validateSurfaceData", jni::ref<sun::java2d::SurfaceData>>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::StateTracker> getRetryTracker(jni::ref<sun::java2d::SurfaceData> p1) { return call_method<"getRetryTracker", jni::ref<sun::java2d::StateTracker>>(p1); }
	static jni::ref<sun::java2d::SurfaceDataProxy> new_object() { return base_::new_object(); }
	static jni::ref<sun::java2d::SurfaceDataProxy> new_object(jint p1) { return base_::new_object(p1); }
	jboolean isValid() { return call_method<"isValid", jboolean>(); }
	void invalidate() { return call_method<"invalidate", void>(); }
	jboolean flush(jboolean p1) { return call_method<"flush", jboolean>(p1); }
	void flush() { return call_method<"flush", void>(); }
	jboolean isAccelerated() { return call_method<"isAccelerated", jboolean>(); }
	void displayChanged() { return call_method<"displayChanged", void>(); }
	void paletteChanged() { return call_method<"paletteChanged", void>(); }
	jni::ref<sun::java2d::SurfaceData> replaceData(jni::ref<sun::java2d::SurfaceData> p1, jint p2, jni::ref<sun::java2d::loops::CompositeType> p3, jni::ref<java::awt::Color> p4) { return call_method<"replaceData", jni::ref<sun::java2d::SurfaceData>>(p1, p2, p3, p4); }
	void updateSurfaceData(jni::ref<sun::java2d::SurfaceData> p1, jni::ref<sun::java2d::SurfaceData> p2, jint p3, jint p4) { return call_method<"updateSurfaceData", void>(p1, p2, p3, p4); }
	void updateSurfaceDataBg(jni::ref<sun::java2d::SurfaceData> p1, jni::ref<sun::java2d::SurfaceData> p2, jint p3, jint p4, jni::ref<java::awt::Color> p5) { return call_method<"updateSurfaceDataBg", void>(p1, p2, p3, p4, p5); }

protected:

	SurfaceDataProxy(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_SURFACEDATAPROXY
