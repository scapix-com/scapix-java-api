// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_GRAPHICSPRIMITIVE_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_GRAPHICSPRIMITIVE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::loops { class GraphicsPrimitive; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::loops::GraphicsPrimitive>
{
	static constexpr fixed_string class_name = "sun/java2d/loops/GraphicsPrimitive";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_GRAPHICSPRIMITIVE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_GRAPHICSPRIMITIVE)
#define SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_GRAPHICSPRIMITIVE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Field.h>
#include <scapix/java_api/sun/java2d/loops/CompositeType.h>
#include <scapix/java_api/sun/java2d/loops/SurfaceType.h>
#include <scapix/java_api/sun/java2d/loops/GraphicsPrimitive_TraceReporter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::loops::GraphicsPrimitive : public jni::object_base<"sun/java2d/loops/GraphicsPrimitive",
	java::lang::Object>
{
public:

	using TraceReporter = GraphicsPrimitive_TraceReporter;

	static jint traceflags() { return get_static_field<"traceflags", jint>(); }
	static void traceflags(jint v) { set_static_field<"traceflags", jint>(v); }
	static jni::ref<java::lang::String> tracefile() { return get_static_field<"tracefile", jni::ref<java::lang::String>>(); }
	static void tracefile(jni::ref<java::lang::String> v) { set_static_field<"tracefile", jni::ref<java::lang::String>>(v); }
	static jni::ref<java::io::PrintStream> traceout() { return get_static_field<"traceout", jni::ref<java::io::PrintStream>>(); }
	static void traceout(jni::ref<java::io::PrintStream> v) { set_static_field<"traceout", jni::ref<java::io::PrintStream>>(v); }
	static jint TRACELOG() { return get_static_field<"TRACELOG", jint>(); }
	static jint TRACETIMESTAMP() { return get_static_field<"TRACETIMESTAMP", jint>(); }
	static jint TRACECOUNTS() { return get_static_field<"TRACECOUNTS", jint>(); }

	static jint makePrimTypeID() { return call_static_method<"makePrimTypeID", jint>(); }
	static jint makeUniqueID(jint p1, jni::ref<sun::java2d::loops::SurfaceType> p2, jni::ref<sun::java2d::loops::CompositeType> p3, jni::ref<sun::java2d::loops::SurfaceType> p4) { return call_static_method<"makeUniqueID", jint>(p1, p2, p3, p4); }
	jint getUniqueID() { return call_method<"getUniqueID", jint>(); }
	jni::ref<java::lang::String> getSignature() { return call_method<"getSignature", jni::ref<java::lang::String>>(); }
	jint getPrimTypeID() { return call_method<"getPrimTypeID", jint>(); }
	jlong getNativePrim() { return call_method<"getNativePrim", jlong>(); }
	jni::ref<sun::java2d::loops::SurfaceType> getSourceType() { return call_method<"getSourceType", jni::ref<sun::java2d::loops::SurfaceType>>(); }
	jni::ref<sun::java2d::loops::CompositeType> getCompositeType() { return call_method<"getCompositeType", jni::ref<sun::java2d::loops::CompositeType>>(); }
	jni::ref<sun::java2d::loops::SurfaceType> getDestType() { return call_method<"getDestType", jni::ref<sun::java2d::loops::SurfaceType>>(); }
	jboolean satisfies(jni::ref<java::lang::String> p1, jni::ref<sun::java2d::loops::SurfaceType> p2, jni::ref<sun::java2d::loops::CompositeType> p3, jni::ref<sun::java2d::loops::SurfaceType> p4) { return call_method<"satisfies", jboolean>(p1, p2, p3, p4); }
	jni::ref<sun::java2d::loops::GraphicsPrimitive> makePrimitive(jni::ref<sun::java2d::loops::SurfaceType> p1, jni::ref<sun::java2d::loops::CompositeType> p2, jni::ref<sun::java2d::loops::SurfaceType> p3) { return call_method<"makePrimitive", jni::ref<sun::java2d::loops::GraphicsPrimitive>>(p1, p2, p3); }
	jni::ref<sun::java2d::loops::GraphicsPrimitive> traceWrap() { return call_method<"traceWrap", jni::ref<sun::java2d::loops::GraphicsPrimitive>>(); }
	static jboolean tracingEnabled() { return call_static_method<"tracingEnabled", jboolean>(); }
	static void tracePrimitive(jni::ref<java::lang::Object> p1) { return call_static_method<"tracePrimitive", void>(p1); }
	static jni::ref<java::lang::String> simplename(jni::ref<jni::array<java::lang::reflect::Field>> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"simplename", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> simplename(jni::ref<sun::java2d::loops::SurfaceType> p1) { return call_static_method<"simplename", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> simplename(jni::ref<sun::java2d::loops::CompositeType> p1) { return call_static_method<"simplename", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	GraphicsPrimitive(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_GRAPHICSPRIMITIVE
