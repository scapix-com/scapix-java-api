// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_FONTINFO_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_FONTINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::loops { class FontInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::loops::FontInfo>
{
	static constexpr fixed_string class_name = "sun/java2d/loops/FontInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_FONTINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_FONTINFO)
#define SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_FONTINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/font/Font2D.h>
#include <scapix/java_api/sun/font/FontStrike.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::loops::FontInfo : public jni::object_base<"sun/java2d/loops/FontInfo",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	jni::ref<java::awt::Font> font() { return get_field<"font", jni::ref<java::awt::Font>>(); }
	void font(jni::ref<java::awt::Font> v) { set_field<"font", jni::ref<java::awt::Font>>(v); }
	jni::ref<sun::font::Font2D> font2D() { return get_field<"font2D", jni::ref<sun::font::Font2D>>(); }
	void font2D(jni::ref<sun::font::Font2D> v) { set_field<"font2D", jni::ref<sun::font::Font2D>>(v); }
	jni::ref<sun::font::FontStrike> fontStrike() { return get_field<"fontStrike", jni::ref<sun::font::FontStrike>>(); }
	void fontStrike(jni::ref<sun::font::FontStrike> v) { set_field<"fontStrike", jni::ref<sun::font::FontStrike>>(v); }
	jni::ref<jni::array<jdouble>> devTx() { return get_field<"devTx", jni::ref<jni::array<jdouble>>>(); }
	void devTx(jni::ref<jni::array<jdouble>> v) { set_field<"devTx", jni::ref<jni::array<jdouble>>>(v); }
	jni::ref<jni::array<jdouble>> glyphTx() { return get_field<"glyphTx", jni::ref<jni::array<jdouble>>>(); }
	void glyphTx(jni::ref<jni::array<jdouble>> v) { set_field<"glyphTx", jni::ref<jni::array<jdouble>>>(v); }
	jint pixelHeight() { return get_field<"pixelHeight", jint>(); }
	void pixelHeight(jint v) { set_field<"pixelHeight", jint>(v); }
	jfloat originX() { return get_field<"originX", jfloat>(); }
	void originX(jfloat v) { set_field<"originX", jfloat>(v); }
	jfloat originY() { return get_field<"originY", jfloat>(); }
	void originY(jfloat v) { set_field<"originY", jfloat>(v); }
	jint aaHint() { return get_field<"aaHint", jint>(); }
	void aaHint(jint v) { set_field<"aaHint", jint>(v); }
	jboolean lcdRGBOrder() { return get_field<"lcdRGBOrder", jboolean>(); }
	void lcdRGBOrder(jboolean v) { set_field<"lcdRGBOrder", jboolean>(v); }
	jboolean lcdSubPixPos() { return get_field<"lcdSubPixPos", jboolean>(); }
	void lcdSubPixPos(jboolean v) { set_field<"lcdSubPixPos", jboolean>(v); }

	static jni::ref<sun::java2d::loops::FontInfo> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> mtx(jni::ref<jni::array<jdouble>> p1) { return call_method<"mtx", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	FontInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_FONTINFO
