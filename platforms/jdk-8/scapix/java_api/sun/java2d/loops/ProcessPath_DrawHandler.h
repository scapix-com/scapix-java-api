// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_PROCESSPATH_DRAWHANDLER_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_PROCESSPATH_DRAWHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d::loops { class ProcessPath_DrawHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::loops::ProcessPath_DrawHandler>
{
	static constexpr fixed_string class_name = "sun/java2d/loops/ProcessPath$DrawHandler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_PROCESSPATH_DRAWHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_PROCESSPATH_DRAWHANDLER)
#define SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_PROCESSPATH_DRAWHANDLER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::loops::ProcessPath_DrawHandler : public jni::object_base<"sun/java2d/loops/ProcessPath$DrawHandler",
	java::lang::Object>
{
public:

	jint xMin() { return get_field<"xMin", jint>(); }
	void xMin(jint v) { set_field<"xMin", jint>(v); }
	jint yMin() { return get_field<"yMin", jint>(); }
	void yMin(jint v) { set_field<"yMin", jint>(v); }
	jint xMax() { return get_field<"xMax", jint>(); }
	void xMax(jint v) { set_field<"xMax", jint>(v); }
	jint yMax() { return get_field<"yMax", jint>(); }
	void yMax(jint v) { set_field<"yMax", jint>(v); }
	jfloat xMinf() { return get_field<"xMinf", jfloat>(); }
	void xMinf(jfloat v) { set_field<"xMinf", jfloat>(v); }
	jfloat yMinf() { return get_field<"yMinf", jfloat>(); }
	void yMinf(jfloat v) { set_field<"yMinf", jfloat>(v); }
	jfloat xMaxf() { return get_field<"xMaxf", jfloat>(); }
	void xMaxf(jfloat v) { set_field<"xMaxf", jfloat>(v); }
	jfloat yMaxf() { return get_field<"yMaxf", jfloat>(); }
	void yMaxf(jfloat v) { set_field<"yMaxf", jfloat>(v); }
	jint strokeControl() { return get_field<"strokeControl", jint>(); }
	void strokeControl(jint v) { set_field<"strokeControl", jint>(v); }

	static jni::ref<sun::java2d::loops::ProcessPath_DrawHandler> new_object(jint p1, jint p2, jint p3, jint p4, jint p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	void setBounds(jint p1, jint p2, jint p3, jint p4) { return call_method<"setBounds", void>(p1, p2, p3, p4); }
	void setBounds(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"setBounds", void>(p1, p2, p3, p4, p5); }
	void adjustBounds(jint p1, jint p2, jint p3, jint p4) { return call_method<"adjustBounds", void>(p1, p2, p3, p4); }
	static jni::ref<sun::java2d::loops::ProcessPath_DrawHandler> new_object(jint p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	void drawLine(jint p1, jint p2, jint p3, jint p4) { return call_method<"drawLine", void>(p1, p2, p3, p4); }
	void drawPixel(jint p1, jint p2) { return call_method<"drawPixel", void>(p1, p2); }
	void drawScanline(jint p1, jint p2, jint p3) { return call_method<"drawScanline", void>(p1, p2, p3); }

protected:

	ProcessPath_DrawHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_LOOPS_PROCESSPATH_DRAWHANDLER
