// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/GraphicsEnvironment.h>
#include <scapix/java_api/sun/awt/DisplayChangedListener.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_SUNGRAPHICSENVIRONMENT_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_SUNGRAPHICSENVIRONMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d { class SunGraphicsEnvironment; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::SunGraphicsEnvironment>
{
	static constexpr fixed_string class_name = "sun/java2d/SunGraphicsEnvironment";
	using base_classes = std::tuple<scapix::java_api::java::awt::GraphicsEnvironment, scapix::java_api::sun::awt::DisplayChangedListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_SUNGRAPHICSENVIRONMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_SUNGRAPHICSENVIRONMENT)
#define SCAPIX_JAVA_API_SUN_JAVA2D_SUNGRAPHICSENVIRONMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Graphics2D.h>
#include <scapix/java_api/java/awt/GraphicsDevice.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/peer/ComponentPeer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/sun/font/FontManagerForSGE.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::SunGraphicsEnvironment : public jni::object_base<"sun/java2d/SunGraphicsEnvironment",
	java::awt::GraphicsEnvironment,
	sun::awt::DisplayChangedListener>
{
public:

	static jboolean isOpenSolaris() { return get_static_field<"isOpenSolaris", jboolean>(); }
	static void isOpenSolaris(jboolean v) { set_static_field<"isOpenSolaris", jboolean>(v); }

	static jni::ref<sun::java2d::SunGraphicsEnvironment> new_object() { return base_::new_object(); }
	jni::ref<jni::array<java::awt::GraphicsDevice>> getScreenDevices() { return call_method<"getScreenDevices", jni::ref<jni::array<java::awt::GraphicsDevice>>>(); }
	jni::ref<java::awt::GraphicsDevice> getDefaultScreenDevice() { return call_method<"getDefaultScreenDevice", jni::ref<java::awt::GraphicsDevice>>(); }
	jni::ref<java::awt::Graphics2D> createGraphics(jni::ref<java::awt::image::BufferedImage> p1) { return call_method<"createGraphics", jni::ref<java::awt::Graphics2D>>(p1); }
	static jni::ref<sun::font::FontManagerForSGE> getFontManagerForSGE() { return call_static_method<"getFontManagerForSGE", jni::ref<sun::font::FontManagerForSGE>>(); }
	static void useAlternateFontforJALocales() { return call_static_method<"useAlternateFontforJALocales", void>(); }
	jni::ref<jni::array<java::awt::Font>> getAllFonts() { return call_method<"getAllFonts", jni::ref<jni::array<java::awt::Font>>>(); }
	jni::ref<jni::array<java::lang::String>> getAvailableFontFamilyNames(jni::ref<java::util::Locale> p1) { return call_method<"getAvailableFontFamilyNames", jni::ref<jni::array<java::lang::String>>>(p1); }
	jni::ref<jni::array<java::lang::String>> getAvailableFontFamilyNames() { return call_method<"getAvailableFontFamilyNames", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<java::awt::Rectangle> getUsableBounds(jni::ref<java::awt::GraphicsDevice> p1) { return call_static_method<"getUsableBounds", jni::ref<java::awt::Rectangle>>(p1); }
	void displayChanged() { return call_method<"displayChanged", void>(); }
	void paletteChanged() { return call_method<"paletteChanged", void>(); }
	jboolean isDisplayLocal() { return call_method<"isDisplayLocal", jboolean>(); }
	void addDisplayChangedListener(jni::ref<sun::awt::DisplayChangedListener> p1) { return call_method<"addDisplayChangedListener", void>(p1); }
	void removeDisplayChangedListener(jni::ref<sun::awt::DisplayChangedListener> p1) { return call_method<"removeDisplayChangedListener", void>(p1); }
	jboolean isFlipStrategyPreferred(jni::ref<java::awt::peer::ComponentPeer> p1) { return call_method<"isFlipStrategyPreferred", jboolean>(p1); }

protected:

	SunGraphicsEnvironment(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_SUNGRAPHICSENVIRONMENT
