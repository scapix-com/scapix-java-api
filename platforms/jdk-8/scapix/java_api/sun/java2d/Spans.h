// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_JAVA2D_SPANS_FWD
#define SCAPIX_JAVA_API_SUN_JAVA2D_SPANS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::java2d { class Spans; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::java2d::Spans>
{
	static constexpr fixed_string class_name = "sun/java2d/Spans";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_SPANS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_JAVA2D_SPANS)
#define SCAPIX_JAVA_API_SUN_JAVA2D_SPANS

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::java2d::Spans : public jni::object_base<"sun/java2d/Spans",
	java::lang::Object>
{
public:

	static jni::ref<sun::java2d::Spans> new_object() { return base_::new_object(); }
	void add(jfloat p1, jfloat p2) { return call_method<"add", void>(p1, p2); }
	void addInfinite() { return call_method<"addInfinite", void>(); }
	jboolean intersects(jfloat p1, jfloat p2) { return call_method<"intersects", jboolean>(p1, p2); }

protected:

	Spans(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_JAVA2D_SPANS
