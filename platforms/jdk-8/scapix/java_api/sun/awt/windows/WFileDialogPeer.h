// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/windows/WWindowPeer.h>
#include <scapix/java_api/java/awt/peer/FileDialogPeer.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WFILEDIALOGPEER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WFILEDIALOGPEER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::windows { class WFileDialogPeer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::windows::WFileDialogPeer>
{
	static constexpr fixed_string class_name = "sun/awt/windows/WFileDialogPeer";
	using base_classes = std::tuple<scapix::java_api::sun::awt::windows::WWindowPeer, scapix::java_api::java::awt::peer::FileDialogPeer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WFILEDIALOGPEER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WFILEDIALOGPEER)
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WFILEDIALOGPEER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Event.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/dnd/DropTarget.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/peer/ComponentPeer.h>
#include <scapix/java_api/java/io/FilenameFilter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/sun/awt/CausedFocusEvent_Cause.h>
#include <scapix/java_api/sun/java2d/pipe/Region.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::awt::windows::WFileDialogPeer : public jni::object_base<"sun/awt/windows/WFileDialogPeer",
	sun::awt::windows::WWindowPeer,
	java::awt::peer::FileDialogPeer>
{
public:

	void setFilenameFilter(jni::ref<java::io::FilenameFilter> p1) { return call_method<"setFilenameFilter", void>(p1); }
	void show() { return call_method<"show", void>(); }
	void blockWindows(jni::ref<java::util::List> p1) { return call_method<"blockWindows", void>(p1); }
	void toFront() { return call_method<"toFront", void>(); }
	void toBack() { return call_method<"toBack", void>(); }
	void updateAlwaysOnTopState() { return call_method<"updateAlwaysOnTopState", void>(); }
	void setDirectory(jni::ref<java::lang::String> p1) { return call_method<"setDirectory", void>(p1); }
	void setFile(jni::ref<java::lang::String> p1) { return call_method<"setFile", void>(p1); }
	void setTitle(jni::ref<java::lang::String> p1) { return call_method<"setTitle", void>(p1); }
	void setResizable(jboolean p1) { return call_method<"setResizable", void>(p1); }
	void reshape(jint p1, jint p2, jint p3, jint p4) { return call_method<"reshape", void>(p1, p2, p3, p4); }
	jboolean handleEvent(jni::ref<java::awt::Event> p1) { return call_method<"handleEvent", jboolean>(p1); }
	void setForeground(jni::ref<java::awt::Color> p1) { return call_method<"setForeground", void>(p1); }
	void setBackground(jni::ref<java::awt::Color> p1) { return call_method<"setBackground", void>(p1); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	void updateMinimumSize() { return call_method<"updateMinimumSize", void>(); }
	void updateIconImages() { return call_method<"updateIconImages", void>(); }
	jboolean requestFocus(jboolean p1, jboolean p2) { return call_method<"requestFocus", jboolean>(p1, p2); }
	jboolean requestFocus(jni::ref<java::awt::Component> p1, jboolean p2, jboolean p3, jlong p4, jni::ref<sun::awt::CausedFocusEvent_Cause> p5) { return call_method<"requestFocus", jboolean>(p1, p2, p3, p4, p5); }
	void beginValidate() { return call_method<"beginValidate", void>(); }
	void endValidate() { return call_method<"endValidate", void>(); }
	void addDropTarget(jni::ref<java::awt::dnd::DropTarget> p1) { return call_method<"addDropTarget", void>(p1); }
	void removeDropTarget(jni::ref<java::awt::dnd::DropTarget> p1) { return call_method<"removeDropTarget", void>(p1); }
	void updateFocusableWindowState() { return call_method<"updateFocusableWindowState", void>(); }
	void setZOrder(jni::ref<java::awt::peer::ComponentPeer> p1) { return call_method<"setZOrder", void>(p1); }
	void applyShape(jni::ref<sun::java2d::pipe::Region> p1) { return call_method<"applyShape", void>(p1); }
	void setOpacity(jfloat p1) { return call_method<"setOpacity", void>(p1); }
	void setOpaque(jboolean p1) { return call_method<"setOpaque", void>(p1); }
	void updateWindow(jni::ref<java::awt::image::BufferedImage> p1) { return call_method<"updateWindow", void>(p1); }
	void createScreenSurface(jboolean p1) { return call_method<"createScreenSurface", void>(p1); }
	void replaceSurfaceData() { return call_method<"replaceSurfaceData", void>(); }
	jboolean isMultipleMode() { return call_method<"isMultipleMode", jboolean>(); }

protected:

	WFileDialogPeer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WFILEDIALOGPEER
