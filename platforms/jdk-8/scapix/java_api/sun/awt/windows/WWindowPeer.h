// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/windows/WPanelPeer.h>
#include <scapix/java_api/java/awt/peer/WindowPeer.h>
#include <scapix/java_api/sun/awt/DisplayChangedListener.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WWINDOWPEER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WWINDOWPEER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::windows { class WWindowPeer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::windows::WWindowPeer>
{
	static constexpr fixed_string class_name = "sun/awt/windows/WWindowPeer";
	using base_classes = std::tuple<scapix::java_api::sun::awt::windows::WPanelPeer, scapix::java_api::java::awt::peer::WindowPeer, scapix::java_api::sun::awt::DisplayChangedListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WWINDOWPEER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WWINDOWPEER)
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WWINDOWPEER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Dialog.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/awt/CausedFocusEvent_Cause.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::windows::WWindowPeer : public jni::object_base<"sun/awt/windows/WWindowPeer",
	sun::awt::windows::WPanelPeer,
	java::awt::peer::WindowPeer,
	sun::awt::DisplayChangedListener>
{
public:

	void toFront() { return call_method<"toFront", void>(); }
	void toBack() { return call_method<"toBack", void>(); }
	void setAlwaysOnTop(jboolean p1) { return call_method<"setAlwaysOnTop", void>(p1); }
	void updateAlwaysOnTopState() { return call_method<"updateAlwaysOnTopState", void>(); }
	void updateFocusableWindowState() { return call_method<"updateFocusableWindowState", void>(); }
	void setTitle(jni::ref<java::lang::String> p1) { return call_method<"setTitle", void>(p1); }
	void setResizable(jboolean p1) { return call_method<"setResizable", void>(p1); }
	void show() { return call_method<"show", void>(); }
	jboolean requestWindowFocus(jni::ref<sun::awt::CausedFocusEvent_Cause> p1) { return call_method<"requestWindowFocus", jboolean>(p1); }
	jboolean focusAllowedFor() { return call_method<"focusAllowedFor", jboolean>(); }
	void updateMinimumSize() { return call_method<"updateMinimumSize", void>(); }
	void updateIconImages() { return call_method<"updateIconImages", void>(); }
	jboolean isModalBlocked() { return call_method<"isModalBlocked", jboolean>(); }
	void setModalBlocked(jni::ref<java::awt::Dialog> p1, jboolean p2) { return call_method<"setModalBlocked", void>(p1, p2); }
	static jni::ref<jni::array<jlong>> getActiveWindowHandles(jni::ref<java::awt::Component> p1) { return call_static_method<"getActiveWindowHandles", jni::ref<jni::array<jlong>>>(p1); }
	void updateGC() { return call_method<"updateGC", void>(); }
	void displayChanged() { return call_method<"displayChanged", void>(); }
	void paletteChanged() { return call_method<"paletteChanged", void>(); }
	void setFullScreenExclusiveModeState(jboolean p1) { return call_method<"setFullScreenExclusiveModeState", void>(p1); }
	void grab() { return call_method<"grab", void>(); }
	void ungrab() { return call_method<"ungrab", void>(); }
	void repositionSecurityWarning() { return call_method<"repositionSecurityWarning", void>(); }
	void setBounds(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"setBounds", void>(p1, p2, p3, p4, p5); }
	void print(jni::ref<java::awt::Graphics> p1) { return call_method<"print", void>(p1); }
	jni::ref<java::awt::Graphics> getTranslucentGraphics() { return call_method<"getTranslucentGraphics", jni::ref<java::awt::Graphics>>(); }
	void setBackground(jni::ref<java::awt::Color> p1) { return call_method<"setBackground", void>(p1); }
	void setOpacity(jfloat p1) { return call_method<"setOpacity", void>(p1); }
	void setOpaque(jboolean p1) { return call_method<"setOpaque", void>(p1); }
	void updateWindow() { return call_method<"updateWindow", void>(); }

protected:

	WWindowPeer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WWINDOWPEER
