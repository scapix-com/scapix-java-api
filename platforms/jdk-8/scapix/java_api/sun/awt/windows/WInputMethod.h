// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/im/InputMethodAdapter.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WINPUTMETHOD_FWD
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WINPUTMETHOD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::windows { class WInputMethod; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::windows::WInputMethod>
{
	static constexpr fixed_string class_name = "sun/awt/windows/WInputMethod";
	using base_classes = std::tuple<scapix::java_api::sun::awt::im::InputMethodAdapter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WINPUTMETHOD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WINPUTMETHOD)
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WINPUTMETHOD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/AWTEvent.h>
#include <scapix/java_api/java/awt/im/spi/InputMethodContext.h>
#include <scapix/java_api/java/lang/Character_Subset.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::awt::windows::WInputMethod : public jni::object_base<"sun/awt/windows/WInputMethod",
	sun::awt::im::InputMethodAdapter>
{
public:

	static jbyte ATTR_INPUT() { return get_static_field<"ATTR_INPUT", jbyte>(); }
	static jbyte ATTR_TARGET_CONVERTED() { return get_static_field<"ATTR_TARGET_CONVERTED", jbyte>(); }
	static jbyte ATTR_CONVERTED() { return get_static_field<"ATTR_CONVERTED", jbyte>(); }
	static jbyte ATTR_TARGET_NOTCONVERTED() { return get_static_field<"ATTR_TARGET_NOTCONVERTED", jbyte>(); }
	static jbyte ATTR_INPUT_ERROR() { return get_static_field<"ATTR_INPUT_ERROR", jbyte>(); }
	static jint IME_CMODE_ALPHANUMERIC() { return get_static_field<"IME_CMODE_ALPHANUMERIC", jint>(); }
	static jint IME_CMODE_NATIVE() { return get_static_field<"IME_CMODE_NATIVE", jint>(); }
	static jint IME_CMODE_KATAKANA() { return get_static_field<"IME_CMODE_KATAKANA", jint>(); }
	static jint IME_CMODE_LANGUAGE() { return get_static_field<"IME_CMODE_LANGUAGE", jint>(); }
	static jint IME_CMODE_FULLSHAPE() { return get_static_field<"IME_CMODE_FULLSHAPE", jint>(); }
	static jint IME_CMODE_HANJACONVERT() { return get_static_field<"IME_CMODE_HANJACONVERT", jint>(); }
	static jint IME_CMODE_ROMAN() { return get_static_field<"IME_CMODE_ROMAN", jint>(); }

	static jni::ref<sun::awt::windows::WInputMethod> new_object() { return base_::new_object(); }
	void setInputMethodContext(jni::ref<java::awt::im::spi::InputMethodContext> p1) { return call_method<"setInputMethodContext", void>(p1); }
	void dispose() { return call_method<"dispose", void>(); }
	jni::ref<java::lang::Object> getControlObject() { return call_method<"getControlObject", jni::ref<java::lang::Object>>(); }
	jboolean setLocale(jni::ref<java::util::Locale> p1) { return call_method<"setLocale", jboolean>(p1); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	void setCharacterSubsets(jni::ref<jni::array<java::lang::Character_Subset>> p1) { return call_method<"setCharacterSubsets", void>(p1); }
	void dispatchEvent(jni::ref<java::awt::AWTEvent> p1) { return call_method<"dispatchEvent", void>(p1); }
	void activate() { return call_method<"activate", void>(); }
	void deactivate(jboolean p1) { return call_method<"deactivate", void>(p1); }
	void disableInputMethod() { return call_method<"disableInputMethod", void>(); }
	jni::ref<java::lang::String> getNativeInputMethodInfo() { return call_method<"getNativeInputMethodInfo", jni::ref<java::lang::String>>(); }
	void hideWindows() { return call_method<"hideWindows", void>(); }
	void removeNotify() { return call_method<"removeNotify", void>(); }
	void endComposition() { return call_method<"endComposition", void>(); }
	void setCompositionEnabled(jboolean p1) { return call_method<"setCompositionEnabled", void>(p1); }
	jboolean isCompositionEnabled() { return call_method<"isCompositionEnabled", jboolean>(); }
	void sendInputMethodEvent(jint p1, jlong p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<jint>> p4, jni::ref<jni::array<java::lang::String>> p5, jni::ref<jni::array<jint>> p6, jni::ref<jni::array<jbyte>> p7, jint p8, jint p9, jint p10) { return call_method<"sendInputMethodEvent", void>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
	void inquireCandidatePosition() { return call_method<"inquireCandidatePosition", void>(); }

protected:

	WInputMethod(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WINPUTMETHOD
