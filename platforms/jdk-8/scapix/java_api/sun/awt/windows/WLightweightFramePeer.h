// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/windows/WFramePeer.h>
#include <scapix/java_api/sun/awt/OverrideNativeWindowHandle.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WLIGHTWEIGHTFRAMEPEER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WLIGHTWEIGHTFRAMEPEER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::windows { class WLightweightFramePeer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::windows::WLightweightFramePeer>
{
	static constexpr fixed_string class_name = "sun/awt/windows/WLightweightFramePeer";
	using base_classes = std::tuple<scapix::java_api::sun::awt::windows::WFramePeer, scapix::java_api::sun::awt::OverrideNativeWindowHandle>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WLIGHTWEIGHTFRAMEPEER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WLIGHTWEIGHTFRAMEPEER)
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WLIGHTWEIGHTFRAMEPEER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/AWTEvent.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/dnd/DropTarget.h>
#include <scapix/java_api/sun/awt/LightweightFrame.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::windows::WLightweightFramePeer : public jni::object_base<"sun/awt/windows/WLightweightFramePeer",
	sun::awt::windows::WFramePeer,
	sun::awt::OverrideNativeWindowHandle>
{
public:

	static jni::ref<sun::awt::windows::WLightweightFramePeer> new_object(jni::ref<sun::awt::LightweightFrame> p1) { return base_::new_object(p1); }
	jni::ref<java::awt::Graphics> getGraphics() { return call_method<"getGraphics", jni::ref<java::awt::Graphics>>(); }
	void overrideWindowHandle(jlong p1) { return call_method<"overrideWindowHandle", void>(p1); }
	void show() { return call_method<"show", void>(); }
	void hide() { return call_method<"hide", void>(); }
	void reshape(jint p1, jint p2, jint p3, jint p4) { return call_method<"reshape", void>(p1, p2, p3, p4); }
	void handleEvent(jni::ref<java::awt::AWTEvent> p1) { return call_method<"handleEvent", void>(p1); }
	void grab() { return call_method<"grab", void>(); }
	void ungrab() { return call_method<"ungrab", void>(); }
	void updateCursorImmediately() { return call_method<"updateCursorImmediately", void>(); }
	jboolean isLightweightFramePeer() { return call_method<"isLightweightFramePeer", jboolean>(); }
	void addDropTarget(jni::ref<java::awt::dnd::DropTarget> p1) { return call_method<"addDropTarget", void>(p1); }
	void removeDropTarget(jni::ref<java::awt::dnd::DropTarget> p1) { return call_method<"removeDropTarget", void>(p1); }

protected:

	WLightweightFramePeer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WLIGHTWEIGHTFRAMEPEER
