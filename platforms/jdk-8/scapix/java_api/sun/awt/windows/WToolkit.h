// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/SunToolkit.h>
#include <scapix/java_api/java/lang/Runnable.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WTOOLKIT_FWD
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WTOOLKIT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::windows { class WToolkit; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::windows::WToolkit>
{
	static constexpr fixed_string class_name = "sun/awt/windows/WToolkit";
	using base_classes = std::tuple<scapix::java_api::sun::awt::SunToolkit, scapix::java_api::java::lang::Runnable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WTOOLKIT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WTOOLKIT)
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WTOOLKIT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/AWTEvent.h>
#include <scapix/java_api/java/awt/Button.h>
#include <scapix/java_api/java/awt/Canvas.h>
#include <scapix/java_api/java/awt/Checkbox.h>
#include <scapix/java_api/java/awt/CheckboxMenuItem.h>
#include <scapix/java_api/java/awt/Choice.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Cursor.h>
#include <scapix/java_api/java/awt/Desktop.h>
#include <scapix/java_api/java/awt/Dialog.h>
#include <scapix/java_api/java/awt/Dialog_ModalExclusionType.h>
#include <scapix/java_api/java/awt/Dialog_ModalityType.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/FileDialog.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Frame.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/GraphicsDevice.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/awt/JobAttributes.h>
#include <scapix/java_api/java/awt/Label.h>
#include <scapix/java_api/java/awt/List.h>
#include <scapix/java_api/java/awt/Menu.h>
#include <scapix/java_api/java/awt/MenuBar.h>
#include <scapix/java_api/java/awt/MenuItem.h>
#include <scapix/java_api/java/awt/PageAttributes.h>
#include <scapix/java_api/java/awt/Panel.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/PopupMenu.h>
#include <scapix/java_api/java/awt/PrintJob.h>
#include <scapix/java_api/java/awt/Robot.h>
#include <scapix/java_api/java/awt/ScrollPane.h>
#include <scapix/java_api/java/awt/Scrollbar.h>
#include <scapix/java_api/java/awt/SystemTray.h>
#include <scapix/java_api/java/awt/TextArea.h>
#include <scapix/java_api/java/awt/TextField.h>
#include <scapix/java_api/java/awt/TrayIcon.h>
#include <scapix/java_api/java/awt/Window.h>
#include <scapix/java_api/java/awt/datatransfer/Clipboard.h>
#include <scapix/java_api/java/awt/dnd/DragGestureEvent.h>
#include <scapix/java_api/java/awt/dnd/DragGestureListener.h>
#include <scapix/java_api/java/awt/dnd/DragGestureRecognizer.h>
#include <scapix/java_api/java/awt/dnd/DragSource.h>
#include <scapix/java_api/java/awt/dnd/peer/DragSourceContextPeer.h>
#include <scapix/java_api/java/awt/im/InputMethodHighlight.h>
#include <scapix/java_api/java/awt/im/spi/InputMethodDescriptor.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/peer/ButtonPeer.h>
#include <scapix/java_api/java/awt/peer/CanvasPeer.h>
#include <scapix/java_api/java/awt/peer/CheckboxMenuItemPeer.h>
#include <scapix/java_api/java/awt/peer/CheckboxPeer.h>
#include <scapix/java_api/java/awt/peer/ChoicePeer.h>
#include <scapix/java_api/java/awt/peer/DesktopPeer.h>
#include <scapix/java_api/java/awt/peer/DialogPeer.h>
#include <scapix/java_api/java/awt/peer/FileDialogPeer.h>
#include <scapix/java_api/java/awt/peer/FontPeer.h>
#include <scapix/java_api/java/awt/peer/FramePeer.h>
#include <scapix/java_api/java/awt/peer/KeyboardFocusManagerPeer.h>
#include <scapix/java_api/java/awt/peer/LabelPeer.h>
#include <scapix/java_api/java/awt/peer/ListPeer.h>
#include <scapix/java_api/java/awt/peer/MenuBarPeer.h>
#include <scapix/java_api/java/awt/peer/MenuItemPeer.h>
#include <scapix/java_api/java/awt/peer/MenuPeer.h>
#include <scapix/java_api/java/awt/peer/PanelPeer.h>
#include <scapix/java_api/java/awt/peer/PopupMenuPeer.h>
#include <scapix/java_api/java/awt/peer/RobotPeer.h>
#include <scapix/java_api/java/awt/peer/ScrollPanePeer.h>
#include <scapix/java_api/java/awt/peer/ScrollbarPeer.h>
#include <scapix/java_api/java/awt/peer/SystemTrayPeer.h>
#include <scapix/java_api/java/awt/peer/TextAreaPeer.h>
#include <scapix/java_api/java/awt/peer/TextFieldPeer.h>
#include <scapix/java_api/java/awt/peer/TrayIconPeer.h>
#include <scapix/java_api/java/awt/peer/WindowPeer.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/sun/awt/LightweightFrame.h>
#include <scapix/java_api/sun/awt/datatransfer/DataTransferer.h>
#include <scapix/java_api/sun/awt/windows/WEmbeddedFrame.h>
#include <scapix/java_api/sun/awt/windows/WEmbeddedFramePeer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::windows::WToolkit : public jni::object_base<"sun/awt/windows/WToolkit",
	sun::awt::SunToolkit,
	java::lang::Runnable>
{
public:

	static jni::ref<java::lang::String> XPSTYLE_THEME_ACTIVE() { return get_static_field<"XPSTYLE_THEME_ACTIVE", jni::ref<java::lang::String>>(); }

	static void loadLibraries() { return call_static_method<"loadLibraries", void>(); }
	static void resetGC() { return call_static_method<"resetGC", void>(); }
	static jboolean embeddedInit() { return call_static_method<"embeddedInit", jboolean>(); }
	static jboolean embeddedDispose() { return call_static_method<"embeddedDispose", jboolean>(); }
	void embeddedEventLoopIdleProcessing() { return call_method<"embeddedEventLoopIdleProcessing", void>(); }
	static jni::ref<sun::awt::windows::WToolkit> new_object() { return base_::new_object(); }
	void run() { return call_method<"run", void>(); }
	jni::ref<java::awt::peer::ButtonPeer> createButton(jni::ref<java::awt::Button> p1) { return call_method<"createButton", jni::ref<java::awt::peer::ButtonPeer>>(p1); }
	jni::ref<java::awt::peer::TextFieldPeer> createTextField(jni::ref<java::awt::TextField> p1) { return call_method<"createTextField", jni::ref<java::awt::peer::TextFieldPeer>>(p1); }
	jni::ref<java::awt::peer::LabelPeer> createLabel(jni::ref<java::awt::Label> p1) { return call_method<"createLabel", jni::ref<java::awt::peer::LabelPeer>>(p1); }
	jni::ref<java::awt::peer::ListPeer> createList(jni::ref<java::awt::List> p1) { return call_method<"createList", jni::ref<java::awt::peer::ListPeer>>(p1); }
	jni::ref<java::awt::peer::CheckboxPeer> createCheckbox(jni::ref<java::awt::Checkbox> p1) { return call_method<"createCheckbox", jni::ref<java::awt::peer::CheckboxPeer>>(p1); }
	jni::ref<java::awt::peer::ScrollbarPeer> createScrollbar(jni::ref<java::awt::Scrollbar> p1) { return call_method<"createScrollbar", jni::ref<java::awt::peer::ScrollbarPeer>>(p1); }
	jni::ref<java::awt::peer::ScrollPanePeer> createScrollPane(jni::ref<java::awt::ScrollPane> p1) { return call_method<"createScrollPane", jni::ref<java::awt::peer::ScrollPanePeer>>(p1); }
	jni::ref<java::awt::peer::TextAreaPeer> createTextArea(jni::ref<java::awt::TextArea> p1) { return call_method<"createTextArea", jni::ref<java::awt::peer::TextAreaPeer>>(p1); }
	jni::ref<java::awt::peer::ChoicePeer> createChoice(jni::ref<java::awt::Choice> p1) { return call_method<"createChoice", jni::ref<java::awt::peer::ChoicePeer>>(p1); }
	jni::ref<java::awt::peer::FramePeer> createFrame(jni::ref<java::awt::Frame> p1) { return call_method<"createFrame", jni::ref<java::awt::peer::FramePeer>>(p1); }
	jni::ref<java::awt::peer::FramePeer> createLightweightFrame(jni::ref<sun::awt::LightweightFrame> p1) { return call_method<"createLightweightFrame", jni::ref<java::awt::peer::FramePeer>>(p1); }
	jni::ref<java::awt::peer::CanvasPeer> createCanvas(jni::ref<java::awt::Canvas> p1) { return call_method<"createCanvas", jni::ref<java::awt::peer::CanvasPeer>>(p1); }
	void disableBackgroundErase(jni::ref<java::awt::Canvas> p1) { return call_method<"disableBackgroundErase", void>(p1); }
	jni::ref<java::awt::peer::PanelPeer> createPanel(jni::ref<java::awt::Panel> p1) { return call_method<"createPanel", jni::ref<java::awt::peer::PanelPeer>>(p1); }
	jni::ref<java::awt::peer::WindowPeer> createWindow(jni::ref<java::awt::Window> p1) { return call_method<"createWindow", jni::ref<java::awt::peer::WindowPeer>>(p1); }
	jni::ref<java::awt::peer::DialogPeer> createDialog(jni::ref<java::awt::Dialog> p1) { return call_method<"createDialog", jni::ref<java::awt::peer::DialogPeer>>(p1); }
	jni::ref<java::awt::peer::FileDialogPeer> createFileDialog(jni::ref<java::awt::FileDialog> p1) { return call_method<"createFileDialog", jni::ref<java::awt::peer::FileDialogPeer>>(p1); }
	jni::ref<java::awt::peer::MenuBarPeer> createMenuBar(jni::ref<java::awt::MenuBar> p1) { return call_method<"createMenuBar", jni::ref<java::awt::peer::MenuBarPeer>>(p1); }
	jni::ref<java::awt::peer::MenuPeer> createMenu(jni::ref<java::awt::Menu> p1) { return call_method<"createMenu", jni::ref<java::awt::peer::MenuPeer>>(p1); }
	jni::ref<java::awt::peer::PopupMenuPeer> createPopupMenu(jni::ref<java::awt::PopupMenu> p1) { return call_method<"createPopupMenu", jni::ref<java::awt::peer::PopupMenuPeer>>(p1); }
	jni::ref<java::awt::peer::MenuItemPeer> createMenuItem(jni::ref<java::awt::MenuItem> p1) { return call_method<"createMenuItem", jni::ref<java::awt::peer::MenuItemPeer>>(p1); }
	jni::ref<java::awt::peer::CheckboxMenuItemPeer> createCheckboxMenuItem(jni::ref<java::awt::CheckboxMenuItem> p1) { return call_method<"createCheckboxMenuItem", jni::ref<java::awt::peer::CheckboxMenuItemPeer>>(p1); }
	jni::ref<java::awt::peer::RobotPeer> createRobot(jni::ref<java::awt::Robot> p1, jni::ref<java::awt::GraphicsDevice> p2) { return call_method<"createRobot", jni::ref<java::awt::peer::RobotPeer>>(p1, p2); }
	jni::ref<sun::awt::windows::WEmbeddedFramePeer> createEmbeddedFrame(jni::ref<sun::awt::windows::WEmbeddedFrame> p1) { return call_method<"createEmbeddedFrame", jni::ref<sun::awt::windows::WEmbeddedFramePeer>>(p1); }
	jni::ref<java::awt::peer::TrayIconPeer> createTrayIcon(jni::ref<java::awt::TrayIcon> p1) { return call_method<"createTrayIcon", jni::ref<java::awt::peer::TrayIconPeer>>(p1); }
	jni::ref<java::awt::peer::SystemTrayPeer> createSystemTray(jni::ref<java::awt::SystemTray> p1) { return call_method<"createSystemTray", jni::ref<java::awt::peer::SystemTrayPeer>>(p1); }
	jboolean isTraySupported() { return call_method<"isTraySupported", jboolean>(); }
	jni::ref<sun::awt::datatransfer::DataTransferer> getDataTransferer() { return call_method<"getDataTransferer", jni::ref<sun::awt::datatransfer::DataTransferer>>(); }
	jni::ref<java::awt::peer::KeyboardFocusManagerPeer> getKeyboardFocusManagerPeer() { return call_method<"getKeyboardFocusManagerPeer", jni::ref<java::awt::peer::KeyboardFocusManagerPeer>>(); }
	void setDynamicLayout(jboolean p1) { return call_method<"setDynamicLayout", void>(p1); }
	jboolean isDynamicLayoutActive() { return call_method<"isDynamicLayoutActive", jboolean>(); }
	jboolean isFrameStateSupported(jint p1) { return call_method<"isFrameStateSupported", jboolean>(p1); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::Insets> getScreenInsets(jni::ref<java::awt::GraphicsConfiguration> p1) { return call_method<"getScreenInsets", jni::ref<java::awt::Insets>>(p1); }
	jint getScreenResolution() { return call_method<"getScreenResolution", jint>(); }
	jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<java::awt::Font> p1) { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1); }
	jni::ref<java::awt::peer::FontPeer> getFontPeer(jni::ref<java::lang::String> p1, jint p2) { return call_method<"getFontPeer", jni::ref<java::awt::peer::FontPeer>>(p1, p2); }
	void sync() { return call_method<"sync", void>(); }
	jni::ref<java::awt::PrintJob> getPrintJob(jni::ref<java::awt::Frame> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Properties> p3) { return call_method<"getPrintJob", jni::ref<java::awt::PrintJob>>(p1, p2, p3); }
	jni::ref<java::awt::PrintJob> getPrintJob(jni::ref<java::awt::Frame> p1, jni::ref<java::lang::String> p2, jni::ref<java::awt::JobAttributes> p3, jni::ref<java::awt::PageAttributes> p4) { return call_method<"getPrintJob", jni::ref<java::awt::PrintJob>>(p1, p2, p3, p4); }
	void beep() { return call_method<"beep", void>(); }
	jboolean getLockingKeyState(jint p1) { return call_method<"getLockingKeyState", jboolean>(p1); }
	void setLockingKeyState(jint p1, jboolean p2) { return call_method<"setLockingKeyState", void>(p1, p2); }
	jni::ref<java::awt::datatransfer::Clipboard> getSystemClipboard() { return call_method<"getSystemClipboard", jni::ref<java::awt::datatransfer::Clipboard>>(); }
	static jni::ref<java::lang::Object> targetToPeer(jni::ref<java::lang::Object> p1) { return call_static_method<"targetToPeer", jni::ref<java::lang::Object>>(p1); }
	static void targetDisposedPeer(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"targetDisposedPeer", void>(p1, p2); }
	jni::ref<java::awt::im::spi::InputMethodDescriptor> getInputMethodAdapterDescriptor() { return call_method<"getInputMethodAdapterDescriptor", jni::ref<java::awt::im::spi::InputMethodDescriptor>>(); }
	jni::ref<java::util::Map> mapInputMethodHighlight(jni::ref<java::awt::im::InputMethodHighlight> p1) { return call_method<"mapInputMethodHighlight", jni::ref<java::util::Map>>(p1); }
	jboolean enableInputMethodsForTextComponent() { return call_method<"enableInputMethodsForTextComponent", jboolean>(); }
	jni::ref<java::util::Locale> getDefaultKeyboardLocale() { return call_method<"getDefaultKeyboardLocale", jni::ref<java::util::Locale>>(); }
	jni::ref<java::awt::Cursor> createCustomCursor(jni::ref<java::awt::Image> p1, jni::ref<java::awt::Point> p2, jni::ref<java::lang::String> p3) { return call_method<"createCustomCursor", jni::ref<java::awt::Cursor>>(p1, p2, p3); }
	jni::ref<java::awt::Dimension> getBestCursorSize(jint p1, jint p2) { return call_method<"getBestCursorSize", jni::ref<java::awt::Dimension>>(p1, p2); }
	jint getMaximumCursorColors() { return call_method<"getMaximumCursorColors", jint>(); }
	static void displayChanged() { return call_static_method<"displayChanged", void>(); }
	jni::ref<java::awt::dnd::peer::DragSourceContextPeer> createDragSourceContextPeer(jni::ref<java::awt::dnd::DragGestureEvent> p1) { return call_method<"createDragSourceContextPeer", jni::ref<java::awt::dnd::peer::DragSourceContextPeer>>(p1); }
	jni::ref<java::awt::dnd::DragGestureRecognizer> createDragGestureRecognizer(jni::ref<java::lang::Class> p1, jni::ref<java::awt::dnd::DragSource> p2, jni::ref<java::awt::Component> p3, jint p4, jni::ref<java::awt::dnd::DragGestureListener> p5) { return call_method<"createDragGestureRecognizer", jni::ref<java::awt::dnd::DragGestureRecognizer>>(p1, p2, p3, p4, p5); }
	void addPropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"addPropertyChangeListener", void>(p1, p2); }
	jboolean isModalityTypeSupported(jni::ref<java::awt::Dialog_ModalityType> p1) { return call_method<"isModalityTypeSupported", jboolean>(p1); }
	jboolean isModalExclusionTypeSupported(jni::ref<java::awt::Dialog_ModalExclusionType> p1) { return call_method<"isModalExclusionTypeSupported", jboolean>(p1); }
	static jni::ref<sun::awt::windows::WToolkit> getWToolkit() { return call_static_method<"getWToolkit", jni::ref<sun::awt::windows::WToolkit>>(); }
	jboolean useBufferPerWindow() { return call_method<"useBufferPerWindow", jboolean>(); }
	void grab(jni::ref<java::awt::Window> p1) { return call_method<"grab", void>(p1); }
	void ungrab(jni::ref<java::awt::Window> p1) { return call_method<"ungrab", void>(p1); }
	void showOrHideTouchKeyboard(jni::ref<java::awt::Component> p1, jni::ref<java::awt::AWTEvent> p2) { return call_method<"showOrHideTouchKeyboard", void>(p1, p2); }
	jboolean syncNativeQueue(jlong p1) { return call_method<"syncNativeQueue", jboolean>(p1); }
	jboolean isDesktopSupported() { return call_method<"isDesktopSupported", jboolean>(); }
	jni::ref<java::awt::peer::DesktopPeer> createDesktopPeer(jni::ref<java::awt::Desktop> p1) { return call_method<"createDesktopPeer", jni::ref<java::awt::peer::DesktopPeer>>(p1); }
	jboolean areExtraMouseButtonsEnabled() { return call_method<"areExtraMouseButtonsEnabled", jboolean>(); }
	jint getNumberOfButtons() { return call_method<"getNumberOfButtons", jint>(); }
	jboolean isWindowOpacitySupported() { return call_method<"isWindowOpacitySupported", jboolean>(); }
	jboolean isWindowShapingSupported() { return call_method<"isWindowShapingSupported", jboolean>(); }
	jboolean isWindowTranslucencySupported() { return call_method<"isWindowTranslucencySupported", jboolean>(); }
	jboolean isTranslucencyCapable(jni::ref<java::awt::GraphicsConfiguration> p1) { return call_method<"isTranslucencyCapable", jboolean>(p1); }
	jboolean needUpdateWindow() { return call_method<"needUpdateWindow", jboolean>(); }

protected:

	WToolkit(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WTOOLKIT
