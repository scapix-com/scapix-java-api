// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/datatransfer/DataTransferer.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WDATATRANSFERER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WDATATRANSFERER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::windows { class WDataTransferer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::windows::WDataTransferer>
{
	static constexpr fixed_string class_name = "sun/awt/windows/WDataTransferer";
	using base_classes = std::tuple<scapix::java_api::sun::awt::datatransfer::DataTransferer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WDATATRANSFERER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WDATATRANSFERER)
#define SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WDATATRANSFERER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/datatransfer/DataFlavor.h>
#include <scapix/java_api/java/awt/datatransfer/FlavorTable.h>
#include <scapix/java_api/java/awt/datatransfer/Transferable.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/SortedMap.h>
#include <scapix/java_api/sun/awt/datatransfer/ToolkitThreadBlockedHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::awt::windows::WDataTransferer : public jni::object_base<"sun/awt/windows/WDataTransferer",
	sun::awt::datatransfer::DataTransferer>
{
public:

	static jint CF_TEXT() { return get_static_field<"CF_TEXT", jint>(); }
	static jint CF_METAFILEPICT() { return get_static_field<"CF_METAFILEPICT", jint>(); }
	static jint CF_DIB() { return get_static_field<"CF_DIB", jint>(); }
	static jint CF_ENHMETAFILE() { return get_static_field<"CF_ENHMETAFILE", jint>(); }
	static jint CF_HDROP() { return get_static_field<"CF_HDROP", jint>(); }
	static jint CF_LOCALE() { return get_static_field<"CF_LOCALE", jint>(); }
	static jlong CF_HTML() { return get_static_field<"CF_HTML", jlong>(); }
	static jlong CFSTR_INETURL() { return get_static_field<"CFSTR_INETURL", jlong>(); }
	static jlong CF_PNG() { return get_static_field<"CF_PNG", jlong>(); }
	static jlong CF_JFIF() { return get_static_field<"CF_JFIF", jlong>(); }
	static jlong CF_FILEGROUPDESCRIPTORW() { return get_static_field<"CF_FILEGROUPDESCRIPTORW", jlong>(); }
	static jlong CF_FILEGROUPDESCRIPTORA() { return get_static_field<"CF_FILEGROUPDESCRIPTORA", jlong>(); }

	jni::ref<java::util::SortedMap> getFormatsForFlavors(jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFormatsForFlavors", jni::ref<java::util::SortedMap>>(p1, p2); }
	jni::ref<java::lang::String> getDefaultUnicodeEncoding() { return call_method<"getDefaultUnicodeEncoding", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jbyte>> translateTransferable(jni::ref<java::awt::datatransfer::Transferable> p1, jni::ref<java::awt::datatransfer::DataFlavor> p2, jlong p3) { return call_method<"translateTransferable", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }
	jni::ref<java::lang::Object> translateStream(jni::ref<java::io::InputStream> p1, jni::ref<java::awt::datatransfer::DataFlavor> p2, jlong p3, jni::ref<java::awt::datatransfer::Transferable> p4) { return call_method<"translateStream", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> translateBytes(jni::ref<jni::array<jbyte>> p1, jni::ref<java::awt::datatransfer::DataFlavor> p2, jlong p3, jni::ref<java::awt::datatransfer::Transferable> p4) { return call_method<"translateBytes", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jboolean isLocaleDependentTextFormat(jlong p1) { return call_method<"isLocaleDependentTextFormat", jboolean>(p1); }
	jboolean isFileFormat(jlong p1) { return call_method<"isFileFormat", jboolean>(p1); }
	jni::ref<sun::awt::datatransfer::ToolkitThreadBlockedHandler> getToolkitThreadBlockedHandler() { return call_method<"getToolkitThreadBlockedHandler", jni::ref<sun::awt::datatransfer::ToolkitThreadBlockedHandler>>(); }
	jboolean isImageFormat(jlong p1) { return call_method<"isImageFormat", jboolean>(p1); }

protected:

	WDataTransferer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WINDOWS_WDATATRANSFERER
