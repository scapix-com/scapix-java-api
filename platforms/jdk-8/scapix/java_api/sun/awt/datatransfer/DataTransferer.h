// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_DATATRANSFER_DATATRANSFERER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_DATATRANSFER_DATATRANSFERER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::datatransfer { class DataTransferer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::datatransfer::DataTransferer>
{
	static constexpr fixed_string class_name = "sun/awt/datatransfer/DataTransferer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_DATATRANSFER_DATATRANSFERER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_DATATRANSFER_DATATRANSFERER)
#define SCAPIX_JAVA_API_SUN_AWT_DATATRANSFER_DATATRANSFERER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/datatransfer/DataFlavor.h>
#include <scapix/java_api/java/awt/datatransfer/FlavorMap.h>
#include <scapix/java_api/java/awt/datatransfer/FlavorTable.h>
#include <scapix/java_api/java/awt/datatransfer/Transferable.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/LinkedHashSet.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/SortedMap.h>
#include <scapix/java_api/sun/awt/datatransfer/ToolkitThreadBlockedHandler.h>
#include <scapix/java_api/sun/awt/datatransfer/DataTransferer_ReencodingInputStream.h>
#include <scapix/java_api/sun/awt/datatransfer/DataTransferer_IndexedComparator.h>
#include <scapix/java_api/sun/awt/datatransfer/DataTransferer_CharsetComparator.h>
#include <scapix/java_api/sun/awt/datatransfer/DataTransferer_DataFlavorComparator.h>
#include <scapix/java_api/sun/awt/datatransfer/DataTransferer_IndexOrderComparator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::datatransfer::DataTransferer : public jni::object_base<"sun/awt/datatransfer/DataTransferer",
	java::lang::Object>
{
public:

	using ReencodingInputStream = DataTransferer_ReencodingInputStream;
	using IndexedComparator = DataTransferer_IndexedComparator;
	using CharsetComparator = DataTransferer_CharsetComparator;
	using DataFlavorComparator = DataTransferer_DataFlavorComparator;
	using IndexOrderComparator = DataTransferer_IndexOrderComparator;

	static jni::ref<java::awt::datatransfer::DataFlavor> plainTextStringFlavor() { return get_static_field<"plainTextStringFlavor", jni::ref<java::awt::datatransfer::DataFlavor>>(); }
	static jni::ref<java::awt::datatransfer::DataFlavor> javaTextEncodingFlavor() { return get_static_field<"javaTextEncodingFlavor", jni::ref<java::awt::datatransfer::DataFlavor>>(); }

	static jni::ref<sun::awt::datatransfer::DataTransferer> new_object() { return base_::new_object(); }
	static jni::ref<sun::awt::datatransfer::DataTransferer> getInstance() { return call_static_method<"getInstance", jni::ref<sun::awt::datatransfer::DataTransferer>>(); }
	static jni::ref<java::lang::String> canonicalName(jni::ref<java::lang::String> p1) { return call_static_method<"canonicalName", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> getTextCharset(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_static_method<"getTextCharset", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> getDefaultTextCharset() { return call_static_method<"getDefaultTextCharset", jni::ref<java::lang::String>>(); }
	static jboolean doesSubtypeSupportCharset(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_static_method<"doesSubtypeSupportCharset", jboolean>(p1); }
	static jboolean doesSubtypeSupportCharset(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"doesSubtypeSupportCharset", jboolean>(p1, p2); }
	static jboolean isFlavorCharsetTextType(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_static_method<"isFlavorCharsetTextType", jboolean>(p1); }
	static jboolean isFlavorNoncharsetTextType(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_static_method<"isFlavorNoncharsetTextType", jboolean>(p1); }
	static jboolean isEncodingSupported(jni::ref<java::lang::String> p1) { return call_static_method<"isEncodingSupported", jboolean>(p1); }
	static jboolean isRemote(jni::ref<java::lang::Class> p1) { return call_static_method<"isRemote", jboolean>(p1); }
	static jni::ref<java::util::Set> standardEncodings() { return call_static_method<"standardEncodings", jni::ref<java::util::Set>>(); }
	static jni::ref<java::awt::datatransfer::FlavorTable> adaptFlavorMap(jni::ref<java::awt::datatransfer::FlavorMap> p1) { return call_static_method<"adaptFlavorMap", jni::ref<java::awt::datatransfer::FlavorTable>>(p1); }
	jni::ref<java::lang::String> getDefaultUnicodeEncoding() { return call_method<"getDefaultUnicodeEncoding", jni::ref<java::lang::String>>(); }
	void registerTextFlavorProperties(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"registerTextFlavorProperties", void>(p1, p2, p3, p4); }
	jboolean isLocaleDependentTextFormat(jlong p1) { return call_method<"isLocaleDependentTextFormat", jboolean>(p1); }
	jboolean isFileFormat(jlong p1) { return call_method<"isFileFormat", jboolean>(p1); }
	jboolean isImageFormat(jlong p1) { return call_method<"isImageFormat", jboolean>(p1); }
	jni::ref<java::util::SortedMap> getFormatsForTransferable(jni::ref<java::awt::datatransfer::Transferable> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFormatsForTransferable", jni::ref<java::util::SortedMap>>(p1, p2); }
	jni::ref<java::util::SortedMap> getFormatsForFlavor(jni::ref<java::awt::datatransfer::DataFlavor> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFormatsForFlavor", jni::ref<java::util::SortedMap>>(p1, p2); }
	jni::ref<java::util::SortedMap> getFormatsForFlavors(jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFormatsForFlavors", jni::ref<java::util::SortedMap>>(p1, p2); }
	jni::ref<jni::array<jlong>> getFormatsForTransferableAsArray(jni::ref<java::awt::datatransfer::Transferable> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFormatsForTransferableAsArray", jni::ref<jni::array<jlong>>>(p1, p2); }
	jni::ref<jni::array<jlong>> getFormatsForFlavorAsArray(jni::ref<java::awt::datatransfer::DataFlavor> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFormatsForFlavorAsArray", jni::ref<jni::array<jlong>>>(p1, p2); }
	jni::ref<jni::array<jlong>> getFormatsForFlavorsAsArray(jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFormatsForFlavorsAsArray", jni::ref<jni::array<jlong>>>(p1, p2); }
	jni::ref<java::util::Map> getFlavorsForFormat(jlong p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFlavorsForFormat", jni::ref<java::util::Map>>(p1, p2); }
	jni::ref<java::util::Map> getFlavorsForFormats(jni::ref<jni::array<jlong>> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFlavorsForFormats", jni::ref<java::util::Map>>(p1, p2); }
	jni::ref<java::util::Set> getFlavorsForFormatsAsSet(jni::ref<jni::array<jlong>> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFlavorsForFormatsAsSet", jni::ref<java::util::Set>>(p1, p2); }
	jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> getFlavorsForFormatAsArray(jlong p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFlavorsForFormatAsArray", jni::ref<jni::array<java::awt::datatransfer::DataFlavor>>>(p1, p2); }
	jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> getFlavorsForFormatsAsArray(jni::ref<jni::array<jlong>> p1, jni::ref<java::awt::datatransfer::FlavorTable> p2) { return call_method<"getFlavorsForFormatsAsArray", jni::ref<jni::array<java::awt::datatransfer::DataFlavor>>>(p1, p2); }
	jni::ref<jni::array<jbyte>> translateTransferable(jni::ref<java::awt::datatransfer::Transferable> p1, jni::ref<java::awt::datatransfer::DataFlavor> p2, jlong p3) { return call_method<"translateTransferable", jni::ref<jni::array<jbyte>>>(p1, p2, p3); }
	jni::ref<java::lang::Object> translateBytes(jni::ref<jni::array<jbyte>> p1, jni::ref<java::awt::datatransfer::DataFlavor> p2, jlong p3, jni::ref<java::awt::datatransfer::Transferable> p4) { return call_method<"translateBytes", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> translateStream(jni::ref<java::io::InputStream> p1, jni::ref<java::awt::datatransfer::DataFlavor> p2, jlong p3, jni::ref<java::awt::datatransfer::Transferable> p4) { return call_method<"translateStream", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<jni::array<jbyte>> convertData(jni::ref<java::lang::Object> p1, jni::ref<java::awt::datatransfer::Transferable> p2, jlong p3, jni::ref<java::util::Map> p4, jboolean p5) { return call_method<"convertData", jni::ref<jni::array<jbyte>>>(p1, p2, p3, p4, p5); }
	void processDataConversionRequests() { return call_method<"processDataConversionRequests", void>(); }
	jni::ref<sun::awt::datatransfer::ToolkitThreadBlockedHandler> getToolkitThreadBlockedHandler() { return call_method<"getToolkitThreadBlockedHandler", jni::ref<sun::awt::datatransfer::ToolkitThreadBlockedHandler>>(); }
	static jni::ref<jni::array<jlong>> keysToLongArray(jni::ref<java::util::SortedMap> p1) { return call_static_method<"keysToLongArray", jni::ref<jni::array<jlong>>>(p1); }
	static jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> setToSortedDataFlavorArray(jni::ref<java::util::Set> p1) { return call_static_method<"setToSortedDataFlavorArray", jni::ref<jni::array<java::awt::datatransfer::DataFlavor>>>(p1); }
	jni::ref<java::util::LinkedHashSet> getPlatformMappingsForNative(jni::ref<java::lang::String> p1) { return call_method<"getPlatformMappingsForNative", jni::ref<java::util::LinkedHashSet>>(p1); }
	jni::ref<java::util::LinkedHashSet> getPlatformMappingsForFlavor(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_method<"getPlatformMappingsForFlavor", jni::ref<java::util::LinkedHashSet>>(p1); }

protected:

	DataTransferer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_DATATRANSFER_DATATRANSFERER
