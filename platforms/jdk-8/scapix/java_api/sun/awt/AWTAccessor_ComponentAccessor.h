// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_AWTACCESSOR_COMPONENTACCESSOR_FWD
#define SCAPIX_JAVA_API_SUN_AWT_AWTACCESSOR_COMPONENTACCESSOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class AWTAccessor_ComponentAccessor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::AWTAccessor_ComponentAccessor>
{
	static constexpr fixed_string class_name = "sun/awt/AWTAccessor$ComponentAccessor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_AWTACCESSOR_COMPONENTACCESSOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_AWTACCESSOR_COMPONENTACCESSOR)
#define SCAPIX_JAVA_API_SUN_AWT_AWTACCESSOR_COMPONENTACCESSOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/AWTEvent.h>
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/awt/Cursor.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/peer/ComponentPeer.h>
#include <scapix/java_api/java/security/AccessControlContext.h>
#include <scapix/java_api/sun/awt/AppContext.h>
#include <scapix/java_api/sun/awt/CausedFocusEvent_Cause.h>
#include <scapix/java_api/sun/awt/RequestFocusController.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::AWTAccessor_ComponentAccessor : public jni::object_base<"sun/awt/AWTAccessor$ComponentAccessor",
	java::lang::Object>
{
public:

	void setBackgroundEraseDisabled(jni::ref<java::awt::Component> p1, jboolean p2) { return call_method<"setBackgroundEraseDisabled", void>(p1, p2); }
	jboolean getBackgroundEraseDisabled(jni::ref<java::awt::Component> p1) { return call_method<"getBackgroundEraseDisabled", jboolean>(p1); }
	jni::ref<java::awt::Rectangle> getBounds(jni::ref<java::awt::Component> p1) { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(p1); }
	void setMixingCutoutShape(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Shape> p2) { return call_method<"setMixingCutoutShape", void>(p1, p2); }
	void setGraphicsConfiguration(jni::ref<java::awt::Component> p1, jni::ref<java::awt::GraphicsConfiguration> p2) { return call_method<"setGraphicsConfiguration", void>(p1, p2); }
	jboolean requestFocus(jni::ref<java::awt::Component> p1, jni::ref<sun::awt::CausedFocusEvent_Cause> p2) { return call_method<"requestFocus", jboolean>(p1, p2); }
	jboolean canBeFocusOwner(jni::ref<java::awt::Component> p1) { return call_method<"canBeFocusOwner", jboolean>(p1); }
	jboolean isVisible(jni::ref<java::awt::Component> p1) { return call_method<"isVisible", jboolean>(p1); }
	void setRequestFocusController(jni::ref<sun::awt::RequestFocusController> p1) { return call_method<"setRequestFocusController", void>(p1); }
	jni::ref<sun::awt::AppContext> getAppContext(jni::ref<java::awt::Component> p1) { return call_method<"getAppContext", jni::ref<sun::awt::AppContext>>(p1); }
	void setAppContext(jni::ref<java::awt::Component> p1, jni::ref<sun::awt::AppContext> p2) { return call_method<"setAppContext", void>(p1, p2); }
	jni::ref<java::awt::Container> getParent(jni::ref<java::awt::Component> p1) { return call_method<"getParent", jni::ref<java::awt::Container>>(p1); }
	void setParent(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Container> p2) { return call_method<"setParent", void>(p1, p2); }
	void setSize(jni::ref<java::awt::Component> p1, jint p2, jint p3) { return call_method<"setSize", void>(p1, p2, p3); }
	jni::ref<java::awt::Point> getLocation(jni::ref<java::awt::Component> p1) { return call_method<"getLocation", jni::ref<java::awt::Point>>(p1); }
	void setLocation(jni::ref<java::awt::Component> p1, jint p2, jint p3) { return call_method<"setLocation", void>(p1, p2, p3); }
	jboolean isEnabled(jni::ref<java::awt::Component> p1) { return call_method<"isEnabled", jboolean>(p1); }
	jboolean isDisplayable(jni::ref<java::awt::Component> p1) { return call_method<"isDisplayable", jboolean>(p1); }
	jni::ref<java::awt::Cursor> getCursor(jni::ref<java::awt::Component> p1) { return call_method<"getCursor", jni::ref<java::awt::Cursor>>(p1); }
	jni::ref<java::awt::peer::ComponentPeer> getPeer(jni::ref<java::awt::Component> p1) { return call_method<"getPeer", jni::ref<java::awt::peer::ComponentPeer>>(p1); }
	void setPeer(jni::ref<java::awt::Component> p1, jni::ref<java::awt::peer::ComponentPeer> p2) { return call_method<"setPeer", void>(p1, p2); }
	jboolean isLightweight(jni::ref<java::awt::Component> p1) { return call_method<"isLightweight", jboolean>(p1); }
	jboolean getIgnoreRepaint(jni::ref<java::awt::Component> p1) { return call_method<"getIgnoreRepaint", jboolean>(p1); }
	jint getWidth(jni::ref<java::awt::Component> p1) { return call_method<"getWidth", jint>(p1); }
	jint getHeight(jni::ref<java::awt::Component> p1) { return call_method<"getHeight", jint>(p1); }
	jint getX(jni::ref<java::awt::Component> p1) { return call_method<"getX", jint>(p1); }
	jint getY(jni::ref<java::awt::Component> p1) { return call_method<"getY", jint>(p1); }
	jni::ref<java::awt::Color> getForeground(jni::ref<java::awt::Component> p1) { return call_method<"getForeground", jni::ref<java::awt::Color>>(p1); }
	jni::ref<java::awt::Color> getBackground(jni::ref<java::awt::Component> p1) { return call_method<"getBackground", jni::ref<java::awt::Color>>(p1); }
	void setBackground(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Color> p2) { return call_method<"setBackground", void>(p1, p2); }
	jni::ref<java::awt::Font> getFont(jni::ref<java::awt::Component> p1) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	void processEvent(jni::ref<java::awt::Component> p1, jni::ref<java::awt::AWTEvent> p2) { return call_method<"processEvent", void>(p1, p2); }
	jni::ref<java::security::AccessControlContext> getAccessControlContext(jni::ref<java::awt::Component> p1) { return call_method<"getAccessControlContext", jni::ref<java::security::AccessControlContext>>(p1); }
	void revalidateSynchronously(jni::ref<java::awt::Component> p1) { return call_method<"revalidateSynchronously", void>(p1); }

protected:

	AWTAccessor_ComponentAccessor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_AWTACCESSOR_COMPONENTACCESSOR
