// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/GraphicsDevice.h>
#include <scapix/java_api/sun/awt/DisplayChangedListener.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSDEVICE_FWD
#define SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSDEVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class Win32GraphicsDevice; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::Win32GraphicsDevice>
{
	static constexpr fixed_string class_name = "sun/awt/Win32GraphicsDevice";
	using base_classes = std::tuple<scapix::java_api::java::awt::GraphicsDevice, scapix::java_api::sun::awt::DisplayChangedListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSDEVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSDEVICE)
#define SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSDEVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/DisplayMode.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Window.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::Win32GraphicsDevice : public jni::object_base<"sun/awt/Win32GraphicsDevice",
	java::awt::GraphicsDevice,
	sun::awt::DisplayChangedListener>
{
public:

	static jni::ref<sun::awt::Win32GraphicsDevice> new_object(jint p1) { return base_::new_object(p1); }
	jint getType() { return call_method<"getType", jint>(); }
	jint getScreen() { return call_method<"getScreen", jint>(); }
	jboolean isValid() { return call_method<"isValid", jboolean>(); }
	jni::ref<java::lang::String> getIDstring() { return call_method<"getIDstring", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::awt::GraphicsConfiguration>> getConfigurations() { return call_method<"getConfigurations", jni::ref<jni::array<java::awt::GraphicsConfiguration>>>(); }
	jni::ref<java::awt::GraphicsConfiguration> getDefaultConfiguration() { return call_method<"getDefaultConfiguration", jni::ref<java::awt::GraphicsConfiguration>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean isFullScreenSupported() { return call_method<"isFullScreenSupported", jboolean>(); }
	void setFullScreenWindow(jni::ref<java::awt::Window> p1) { return call_method<"setFullScreenWindow", void>(p1); }
	jboolean isDisplayChangeSupported() { return call_method<"isDisplayChangeSupported", jboolean>(); }
	void setDisplayMode(jni::ref<java::awt::DisplayMode> p1) { return call_method<"setDisplayMode", void>(p1); }
	jni::ref<java::awt::DisplayMode> getDisplayMode() { return call_method<"getDisplayMode", jni::ref<java::awt::DisplayMode>>(); }
	jni::ref<jni::array<java::awt::DisplayMode>> getDisplayModes() { return call_method<"getDisplayModes", jni::ref<jni::array<java::awt::DisplayMode>>>(); }
	void displayChanged() { return call_method<"displayChanged", void>(); }
	void paletteChanged() { return call_method<"paletteChanged", void>(); }
	void addDisplayChangedListener(jni::ref<sun::awt::DisplayChangedListener> p1) { return call_method<"addDisplayChangedListener", void>(p1); }
	void removeDisplayChangedListener(jni::ref<sun::awt::DisplayChangedListener> p1) { return call_method<"removeDisplayChangedListener", void>(p1); }
	jni::ref<java::awt::image::ColorModel> getDynamicColorModel() { return call_method<"getDynamicColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }

protected:

	Win32GraphicsDevice(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSDEVICE
