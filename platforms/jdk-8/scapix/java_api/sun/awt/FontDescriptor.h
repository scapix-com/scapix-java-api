// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_FONTDESCRIPTOR_FWD
#define SCAPIX_JAVA_API_SUN_AWT_FONTDESCRIPTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class FontDescriptor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::FontDescriptor>
{
	static constexpr fixed_string class_name = "sun/awt/FontDescriptor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_FONTDESCRIPTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_FONTDESCRIPTOR)
#define SCAPIX_JAVA_API_SUN_AWT_FONTDESCRIPTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/CharsetEncoder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::FontDescriptor : public jni::object_base<"sun/awt/FontDescriptor",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	jni::ref<java::nio::charset::CharsetEncoder> encoder() { return get_field<"encoder", jni::ref<java::nio::charset::CharsetEncoder>>(); }
	void encoder(jni::ref<java::nio::charset::CharsetEncoder> v) { set_field<"encoder", jni::ref<java::nio::charset::CharsetEncoder>>(v); }
	jni::ref<java::nio::charset::CharsetEncoder> unicodeEncoder() { return get_field<"unicodeEncoder", jni::ref<java::nio::charset::CharsetEncoder>>(); }
	void unicodeEncoder(jni::ref<java::nio::charset::CharsetEncoder> v) { set_field<"unicodeEncoder", jni::ref<java::nio::charset::CharsetEncoder>>(v); }

	static jni::ref<sun::awt::FontDescriptor> new_object(jni::ref<java::lang::String> p1, jni::ref<java::nio::charset::CharsetEncoder> p2, jni::ref<jni::array<jint>> p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::String> getNativeName() { return call_method<"getNativeName", jni::ref<java::lang::String>>(); }
	jni::ref<java::nio::charset::CharsetEncoder> getFontCharsetEncoder() { return call_method<"getFontCharsetEncoder", jni::ref<java::nio::charset::CharsetEncoder>>(); }
	jni::ref<java::lang::String> getFontCharsetName() { return call_method<"getFontCharsetName", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jint>> getExclusionRanges() { return call_method<"getExclusionRanges", jni::ref<jni::array<jint>>>(); }
	jboolean isExcluded(jchar p1) { return call_method<"isExcluded", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean useUnicode() { return call_method<"useUnicode", jboolean>(); }

protected:

	FontDescriptor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_FONTDESCRIPTOR
