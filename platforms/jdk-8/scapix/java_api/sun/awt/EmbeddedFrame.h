// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Frame.h>
#include <scapix/java_api/java/awt/KeyEventDispatcher.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_EMBEDDEDFRAME_FWD
#define SCAPIX_JAVA_API_SUN_AWT_EMBEDDEDFRAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class EmbeddedFrame; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::EmbeddedFrame>
{
	static constexpr fixed_string class_name = "sun/awt/EmbeddedFrame";
	using base_classes = std::tuple<scapix::java_api::java::awt::Frame, scapix::java_api::java::awt::KeyEventDispatcher, scapix::java_api::java::beans::PropertyChangeListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_EMBEDDEDFRAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_EMBEDDEDFRAME)
#define SCAPIX_JAVA_API_SUN_AWT_EMBEDDEDFRAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/applet/Applet.h>
#include <scapix/java_api/java/awt/AWTKeyStroke.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/awt/Cursor.h>
#include <scapix/java_api/java/awt/Dialog.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/MenuBar.h>
#include <scapix/java_api/java/awt/MenuComponent.h>
#include <scapix/java_api/java/awt/event/KeyEvent.h>
#include <scapix/java_api/java/beans/PropertyChangeEvent.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::EmbeddedFrame : public jni::object_base<"sun/awt/EmbeddedFrame",
	java::awt::Frame,
	java::awt::KeyEventDispatcher,
	java::beans::PropertyChangeListener>
{
public:

	jboolean supportsXEmbed() { return call_method<"supportsXEmbed", jboolean>(); }
	jni::ref<java::awt::Container> getParent() { return call_method<"getParent", jni::ref<java::awt::Container>>(); }
	void propertyChange(jni::ref<java::beans::PropertyChangeEvent> p1) { return call_method<"propertyChange", void>(p1); }
	void registerListeners() { return call_method<"registerListeners", void>(); }
	void show() { return call_method<"show", void>(); }
	void hide() { return call_method<"hide", void>(); }
	jboolean dispatchKeyEvent(jni::ref<java::awt::event::KeyEvent> p1) { return call_method<"dispatchKeyEvent", jboolean>(p1); }
	jboolean traverseIn(jboolean p1) { return call_method<"traverseIn", jboolean>(p1); }
	void setTitle(jni::ref<java::lang::String> p1) { return call_method<"setTitle", void>(p1); }
	void setIconImage(jni::ref<java::awt::Image> p1) { return call_method<"setIconImage", void>(p1); }
	void setIconImages(jni::ref<java::util::List> p1) { return call_method<"setIconImages", void>(p1); }
	void setMenuBar(jni::ref<java::awt::MenuBar> p1) { return call_method<"setMenuBar", void>(p1); }
	void setResizable(jboolean p1) { return call_method<"setResizable", void>(p1); }
	void remove(jni::ref<java::awt::MenuComponent> p1) { return call_method<"remove", void>(p1); }
	jboolean isResizable() { return call_method<"isResizable", jboolean>(); }
	void addNotify() { return call_method<"addNotify", void>(); }
	void setCursorAllowed(jboolean p1) { return call_method<"setCursorAllowed", void>(p1); }
	jboolean isCursorAllowed() { return call_method<"isCursorAllowed", jboolean>(); }
	jni::ref<java::awt::Cursor> getCursor() { return call_method<"getCursor", jni::ref<java::awt::Cursor>>(); }
	void synthesizeWindowActivation(jboolean p1) { return call_method<"synthesizeWindowActivation", void>(p1); }
	void toFront() { return call_method<"toFront", void>(); }
	void toBack() { return call_method<"toBack", void>(); }
	void registerAccelerator(jni::ref<java::awt::AWTKeyStroke> p1) { return call_method<"registerAccelerator", void>(p1); }
	void unregisterAccelerator(jni::ref<java::awt::AWTKeyStroke> p1) { return call_method<"unregisterAccelerator", void>(p1); }
	static jni::ref<java::applet::Applet> getAppletIfAncestorOf(jni::ref<java::awt::Component> p1) { return call_static_method<"getAppletIfAncestorOf", jni::ref<java::applet::Applet>>(p1); }
	void notifyModalBlocked(jni::ref<java::awt::Dialog> p1, jboolean p2) { return call_method<"notifyModalBlocked", void>(p1, p2); }

protected:

	EmbeddedFrame(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_EMBEDDEDFRAME
