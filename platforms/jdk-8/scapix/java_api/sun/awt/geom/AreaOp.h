// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_GEOM_AREAOP_FWD
#define SCAPIX_JAVA_API_SUN_AWT_GEOM_AREAOP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::geom { class AreaOp; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::geom::AreaOp>
{
	static constexpr fixed_string class_name = "sun/awt/geom/AreaOp";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_GEOM_AREAOP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_GEOM_AREAOP)
#define SCAPIX_JAVA_API_SUN_AWT_GEOM_AREAOP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/sun/awt/geom/Edge.h>
#include <scapix/java_api/sun/awt/geom/AreaOp_CAGOp.h>
#include <scapix/java_api/sun/awt/geom/AreaOp_AddOp.h>
#include <scapix/java_api/sun/awt/geom/AreaOp_SubOp.h>
#include <scapix/java_api/sun/awt/geom/AreaOp_IntOp.h>
#include <scapix/java_api/sun/awt/geom/AreaOp_XorOp.h>
#include <scapix/java_api/sun/awt/geom/AreaOp_NZWindOp.h>
#include <scapix/java_api/sun/awt/geom/AreaOp_EOWindOp.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::geom::AreaOp : public jni::object_base<"sun/awt/geom/AreaOp",
	java::lang::Object>
{
public:

	using CAGOp = AreaOp_CAGOp;
	using AddOp = AreaOp_AddOp;
	using SubOp = AreaOp_SubOp;
	using IntOp = AreaOp_IntOp;
	using XorOp = AreaOp_XorOp;
	using NZWindOp = AreaOp_NZWindOp;
	using EOWindOp = AreaOp_EOWindOp;

	static jint CTAG_LEFT() { return get_static_field<"CTAG_LEFT", jint>(); }
	static jint CTAG_RIGHT() { return get_static_field<"CTAG_RIGHT", jint>(); }
	static jint ETAG_IGNORE() { return get_static_field<"ETAG_IGNORE", jint>(); }
	static jint ETAG_ENTER() { return get_static_field<"ETAG_ENTER", jint>(); }
	static jint ETAG_EXIT() { return get_static_field<"ETAG_EXIT", jint>(); }
	static jint RSTAG_INSIDE() { return get_static_field<"RSTAG_INSIDE", jint>(); }
	static jint RSTAG_OUTSIDE() { return get_static_field<"RSTAG_OUTSIDE", jint>(); }

	void newRow() { return call_method<"newRow", void>(); }
	jint classify(jni::ref<sun::awt::geom::Edge> p1) { return call_method<"classify", jint>(p1); }
	jint getState() { return call_method<"getState", jint>(); }
	jni::ref<java::util::Vector> calculate(jni::ref<java::util::Vector> p1, jni::ref<java::util::Vector> p2) { return call_method<"calculate", jni::ref<java::util::Vector>>(p1, p2); }
	static void finalizeSubCurves(jni::ref<java::util::Vector> p1, jni::ref<java::util::Vector> p2) { return call_static_method<"finalizeSubCurves", void>(p1, p2); }
	static void resolveLinks(jni::ref<java::util::Vector> p1, jni::ref<java::util::Vector> p2, jni::ref<java::util::Vector> p3) { return call_static_method<"resolveLinks", void>(p1, p2, p3); }
	static jboolean obstructs(jdouble p1, jdouble p2, jint p3) { return call_static_method<"obstructs", jboolean>(p1, p2, p3); }

protected:

	AreaOp(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_GEOM_AREAOP
