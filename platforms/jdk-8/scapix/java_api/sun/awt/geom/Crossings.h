// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_GEOM_CROSSINGS_FWD
#define SCAPIX_JAVA_API_SUN_AWT_GEOM_CROSSINGS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::geom { class Crossings; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::geom::Crossings>
{
	static constexpr fixed_string class_name = "sun/awt/geom/Crossings";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_GEOM_CROSSINGS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_GEOM_CROSSINGS)
#define SCAPIX_JAVA_API_SUN_AWT_GEOM_CROSSINGS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/geom/PathIterator.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/sun/awt/geom/Crossings_EvenOdd.h>
#include <scapix/java_api/sun/awt/geom/Crossings_NonZero.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::geom::Crossings : public jni::object_base<"sun/awt/geom/Crossings",
	java::lang::Object>
{
public:

	using EvenOdd = Crossings_EvenOdd;
	using NonZero = Crossings_NonZero;

	static jboolean debug() { return get_static_field<"debug", jboolean>(); }

	static jni::ref<sun::awt::geom::Crossings> new_object(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return base_::new_object(p1, p2, p3, p4); }
	jdouble getXLo() { return call_method<"getXLo", jdouble>(); }
	jdouble getYLo() { return call_method<"getYLo", jdouble>(); }
	jdouble getXHi() { return call_method<"getXHi", jdouble>(); }
	jdouble getYHi() { return call_method<"getYHi", jdouble>(); }
	void record(jdouble p1, jdouble p2, jint p3) { return call_method<"record", void>(p1, p2, p3); }
	void print() { return call_method<"print", void>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean covers(jdouble p1, jdouble p2) { return call_method<"covers", jboolean>(p1, p2); }
	static jni::ref<sun::awt::geom::Crossings> findCrossings(jni::ref<java::util::Vector> p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5) { return call_static_method<"findCrossings", jni::ref<sun::awt::geom::Crossings>>(p1, p2, p3, p4, p5); }
	static jni::ref<sun::awt::geom::Crossings> findCrossings(jni::ref<java::awt::geom::PathIterator> p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5) { return call_static_method<"findCrossings", jni::ref<sun::awt::geom::Crossings>>(p1, p2, p3, p4, p5); }
	jboolean accumulateLine(jdouble p1, jdouble p2, jdouble p3, jdouble p4) { return call_method<"accumulateLine", jboolean>(p1, p2, p3, p4); }
	jboolean accumulateLine(jdouble p1, jdouble p2, jdouble p3, jdouble p4, jint p5) { return call_method<"accumulateLine", jboolean>(p1, p2, p3, p4, p5); }
	jboolean accumulateQuad(jdouble p1, jdouble p2, jni::ref<jni::array<jdouble>> p3) { return call_method<"accumulateQuad", jboolean>(p1, p2, p3); }
	jboolean accumulateCubic(jdouble p1, jdouble p2, jni::ref<jni::array<jdouble>> p3) { return call_method<"accumulateCubic", jboolean>(p1, p2, p3); }

protected:

	Crossings(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_GEOM_CROSSINGS
