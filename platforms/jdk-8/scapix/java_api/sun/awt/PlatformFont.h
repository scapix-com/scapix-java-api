// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/peer/FontPeer.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_PLATFORMFONT_FWD
#define SCAPIX_JAVA_API_SUN_AWT_PLATFORMFONT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class PlatformFont; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::PlatformFont>
{
	static constexpr fixed_string class_name = "sun/awt/PlatformFont";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::peer::FontPeer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_PLATFORMFONT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_PLATFORMFONT)
#define SCAPIX_JAVA_API_SUN_AWT_PLATFORMFONT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/awt/CharsetString.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::PlatformFont : public jni::object_base<"sun/awt/PlatformFont",
	java::lang::Object,
	java::awt::peer::FontPeer>
{
public:

	static jni::ref<sun::awt::PlatformFont> new_object(jni::ref<java::lang::String> p1, jint p2) { return base_::new_object(p1, p2); }
	jni::ref<jni::array<sun::awt::CharsetString>> makeMultiCharsetString(jni::ref<java::lang::String> p1) { return call_method<"makeMultiCharsetString", jni::ref<jni::array<sun::awt::CharsetString>>>(p1); }
	jni::ref<jni::array<sun::awt::CharsetString>> makeMultiCharsetString(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"makeMultiCharsetString", jni::ref<jni::array<sun::awt::CharsetString>>>(p1, p2); }
	jni::ref<jni::array<sun::awt::CharsetString>> makeMultiCharsetString(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"makeMultiCharsetString", jni::ref<jni::array<sun::awt::CharsetString>>>(p1, p2, p3); }
	jni::ref<jni::array<sun::awt::CharsetString>> makeMultiCharsetString(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jboolean p4) { return call_method<"makeMultiCharsetString", jni::ref<jni::array<sun::awt::CharsetString>>>(p1, p2, p3, p4); }
	jboolean mightHaveMultiFontMetrics() { return call_method<"mightHaveMultiFontMetrics", jboolean>(); }
	jni::ref<jni::array<java::lang::Object>> makeConvertedMultiFontString(jni::ref<java::lang::String> p1) { return call_method<"makeConvertedMultiFontString", jni::ref<jni::array<java::lang::Object>>>(p1); }
	jni::ref<jni::array<java::lang::Object>> makeConvertedMultiFontChars(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"makeConvertedMultiFontChars", jni::ref<jni::array<java::lang::Object>>>(p1, p2, p3); }

protected:

	PlatformFont(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_PLATFORMFONT
