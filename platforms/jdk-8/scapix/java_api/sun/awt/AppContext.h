// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_APPCONTEXT_FWD
#define SCAPIX_JAVA_API_SUN_AWT_APPCONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class AppContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::AppContext>
{
	static constexpr fixed_string class_name = "sun/awt/AppContext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_APPCONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_APPCONTEXT)
#define SCAPIX_JAVA_API_SUN_AWT_APPCONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/ThreadGroup.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/Supplier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::AppContext : public jni::object_base<"sun/awt/AppContext",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::Object> EVENT_QUEUE_KEY() { return get_static_field<"EVENT_QUEUE_KEY", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> EVENT_QUEUE_LOCK_KEY() { return get_static_field<"EVENT_QUEUE_LOCK_KEY", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> EVENT_QUEUE_COND_KEY() { return get_static_field<"EVENT_QUEUE_COND_KEY", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::String> DISPOSED_PROPERTY_NAME() { return get_static_field<"DISPOSED_PROPERTY_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GUI_DISPOSED() { return get_static_field<"GUI_DISPOSED", jni::ref<java::lang::String>>(); }

	static jni::ref<java::util::Set> getAppContexts() { return call_static_method<"getAppContexts", jni::ref<java::util::Set>>(); }
	jboolean isDisposed() { return call_method<"isDisposed", jboolean>(); }
	static jni::ref<sun::awt::AppContext> getAppContext() { return call_static_method<"getAppContext", jni::ref<sun::awt::AppContext>>(); }
	static jboolean isMainContext(jni::ref<sun::awt::AppContext> p1) { return call_static_method<"isMainContext", jboolean>(p1); }
	void dispose() { return call_method<"dispose", void>(); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1) { return call_method<"get", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"put", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> remove(jni::ref<java::lang::Object> p1) { return call_method<"remove", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::ThreadGroup> getThreadGroup() { return call_method<"getThreadGroup", jni::ref<java::lang::ThreadGroup>>(); }
	jni::ref<java::lang::ClassLoader> getContextClassLoader() { return call_method<"getContextClassLoader", jni::ref<java::lang::ClassLoader>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners() { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(); }
	void addPropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"addPropertyChangeListener", void>(p1, p2); }
	void removePropertyChangeListener(jni::ref<java::lang::String> p1, jni::ref<java::beans::PropertyChangeListener> p2) { return call_method<"removePropertyChangeListener", void>(p1, p2); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners(jni::ref<java::lang::String> p1) { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(p1); }
	static jni::ref<java::lang::Object> getSoftReferenceValue(jni::ref<java::lang::Object> p1, jni::ref<java::util::function::Supplier> p2) { return call_static_method<"getSoftReferenceValue", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	AppContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_APPCONTEXT
