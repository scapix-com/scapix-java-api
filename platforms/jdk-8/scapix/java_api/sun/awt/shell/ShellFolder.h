// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/File.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_SHELL_SHELLFOLDER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_SHELL_SHELLFOLDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::shell { class ShellFolder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::shell::ShellFolder>
{
	static constexpr fixed_string class_name = "sun/awt/shell/ShellFolder";
	using base_classes = std::tuple<scapix::java_api::java::io::File>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_SHELL_SHELLFOLDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_SHELL_SHELLFOLDER)
#define SCAPIX_JAVA_API_SUN_AWT_SHELL_SHELLFOLDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/sun/awt/shell/ShellFolderColumnInfo.h>
#include <scapix/java_api/sun/awt/shell/ShellFolder_Invoker.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::shell::ShellFolder : public jni::object_base<"sun/awt/shell/ShellFolder",
	java::io::File>
{
public:

	using Invoker = ShellFolder_Invoker;

	jboolean isFileSystem() { return call_method<"isFileSystem", jboolean>(); }
	jni::ref<java::lang::String> getParent() { return call_method<"getParent", jni::ref<java::lang::String>>(); }
	jni::ref<java::io::File> getParentFile() { return call_method<"getParentFile", jni::ref<java::io::File>>(); }
	jni::ref<jni::array<java::io::File>> listFiles() { return call_method<"listFiles", jni::ref<jni::array<java::io::File>>>(); }
	jni::ref<jni::array<java::io::File>> listFiles(jboolean p1) { return call_method<"listFiles", jni::ref<jni::array<java::io::File>>>(p1); }
	jboolean isLink() { return call_method<"isLink", jboolean>(); }
	jni::ref<sun::awt::shell::ShellFolder> getLinkLocation() { return call_method<"getLinkLocation", jni::ref<sun::awt::shell::ShellFolder>>(); }
	jni::ref<java::lang::String> getDisplayName() { return call_method<"getDisplayName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFolderType() { return call_method<"getFolderType", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getExecutableType() { return call_method<"getExecutableType", jni::ref<java::lang::String>>(); }
	jint compareTo(jni::ref<java::io::File> p1) { return call_method<"compareTo", jint>(p1); }
	jni::ref<java::awt::Image> getIcon(jboolean p1) { return call_method<"getIcon", jni::ref<java::awt::Image>>(p1); }
	static jni::ref<sun::awt::shell::ShellFolder> getShellFolder(jni::ref<java::io::File> p1) { return call_static_method<"getShellFolder", jni::ref<sun::awt::shell::ShellFolder>>(p1); }
	static jni::ref<java::lang::Object> get(jni::ref<java::lang::String> p1) { return call_static_method<"get", jni::ref<java::lang::Object>>(p1); }
	static jboolean isComputerNode(jni::ref<java::io::File> p1) { return call_static_method<"isComputerNode", jboolean>(p1); }
	static jboolean isFileSystemRoot(jni::ref<java::io::File> p1) { return call_static_method<"isFileSystemRoot", jboolean>(p1); }
	static jni::ref<java::io::File> getNormalizedFile(jni::ref<java::io::File> p1) { return call_static_method<"getNormalizedFile", jni::ref<java::io::File>>(p1); }
	static void sort(jni::ref<java::util::List> p1) { return call_static_method<"sort", void>(p1); }
	void sortChildren(jni::ref<java::util::List> p1) { return call_method<"sortChildren", void>(p1); }
	jboolean isAbsolute() { return call_method<"isAbsolute", jboolean>(); }
	jni::ref<java::io::File> getAbsoluteFile() { return call_method<"getAbsoluteFile", jni::ref<java::io::File>>(); }
	jboolean canRead() { return call_method<"canRead", jboolean>(); }
	jboolean canWrite() { return call_method<"canWrite", jboolean>(); }
	jboolean exists() { return call_method<"exists", jboolean>(); }
	jboolean isDirectory() { return call_method<"isDirectory", jboolean>(); }
	jboolean isFile() { return call_method<"isFile", jboolean>(); }
	jlong lastModified() { return call_method<"lastModified", jlong>(); }
	jlong length() { return call_method<"length", jlong>(); }
	jboolean createNewFile() { return call_method<"createNewFile", jboolean>(); }
	jboolean delete_() { return call_method<"delete", jboolean>(); }
	void deleteOnExit() { return call_method<"deleteOnExit", void>(); }
	jboolean mkdir() { return call_method<"mkdir", jboolean>(); }
	jboolean mkdirs() { return call_method<"mkdirs", jboolean>(); }
	jboolean renameTo(jni::ref<java::io::File> p1) { return call_method<"renameTo", jboolean>(p1); }
	jboolean setLastModified(jlong p1) { return call_method<"setLastModified", jboolean>(p1); }
	jboolean setReadOnly() { return call_method<"setReadOnly", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<jni::array<sun::awt::shell::ShellFolderColumnInfo>> getFolderColumns(jni::ref<java::io::File> p1) { return call_static_method<"getFolderColumns", jni::ref<jni::array<sun::awt::shell::ShellFolderColumnInfo>>>(p1); }
	jni::ref<jni::array<sun::awt::shell::ShellFolderColumnInfo>> getFolderColumns() { return call_method<"getFolderColumns", jni::ref<jni::array<sun::awt::shell::ShellFolderColumnInfo>>>(); }
	static jni::ref<java::lang::Object> getFolderColumnValue(jni::ref<java::io::File> p1, jint p2) { return call_static_method<"getFolderColumnValue", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> getFolderColumnValue(jint p1) { return call_method<"getFolderColumnValue", jni::ref<java::lang::Object>>(p1); }
	static jni::ref<java::lang::Object> invoke(jni::ref<java::util::concurrent::Callable> p1) { return call_static_method<"invoke", jni::ref<java::lang::Object>>(p1); }
	static jni::ref<java::lang::Object> invoke(jni::ref<java::util::concurrent::Callable> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"invoke", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	ShellFolder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_SHELL_SHELLFOLDER
