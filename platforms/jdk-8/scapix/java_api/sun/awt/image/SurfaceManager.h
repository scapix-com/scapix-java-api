// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_IMAGE_SURFACEMANAGER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_SURFACEMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::image { class SurfaceManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::image::SurfaceManager>
{
	static constexpr fixed_string class_name = "sun/awt/image/SurfaceManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_SURFACEMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_IMAGE_SURFACEMANAGER)
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_SURFACEMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/ImageCapabilities.h>
#include <scapix/java_api/sun/awt/image/SurfaceManager_ImageAccessor.h>
#include <scapix/java_api/sun/java2d/SurfaceData.h>
#include <scapix/java_api/sun/awt/image/SurfaceManager_ProxiedGraphicsConfig.h>
#include <scapix/java_api/sun/awt/image/SurfaceManager_FlushableCacheData.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::image::SurfaceManager : public jni::object_base<"sun/awt/image/SurfaceManager",
	java::lang::Object>
{
public:

	using ImageAccessor = SurfaceManager_ImageAccessor;
	using ProxiedGraphicsConfig = SurfaceManager_ProxiedGraphicsConfig;
	using FlushableCacheData = SurfaceManager_FlushableCacheData;

	static jni::ref<sun::awt::image::SurfaceManager> new_object() { return base_::new_object(); }
	static void setImageAccessor(jni::ref<sun::awt::image::SurfaceManager_ImageAccessor> p1) { return call_static_method<"setImageAccessor", void>(p1); }
	static jni::ref<sun::awt::image::SurfaceManager> getManager(jni::ref<java::awt::Image> p1) { return call_static_method<"getManager", jni::ref<sun::awt::image::SurfaceManager>>(p1); }
	static void setManager(jni::ref<java::awt::Image> p1, jni::ref<sun::awt::image::SurfaceManager> p2) { return call_static_method<"setManager", void>(p1, p2); }
	jni::ref<java::lang::Object> getCacheData(jni::ref<java::lang::Object> p1) { return call_method<"getCacheData", jni::ref<java::lang::Object>>(p1); }
	void setCacheData(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"setCacheData", void>(p1, p2); }
	jni::ref<sun::java2d::SurfaceData> getPrimarySurfaceData() { return call_method<"getPrimarySurfaceData", jni::ref<sun::java2d::SurfaceData>>(); }
	jni::ref<sun::java2d::SurfaceData> restoreContents() { return call_method<"restoreContents", jni::ref<sun::java2d::SurfaceData>>(); }
	void acceleratedSurfaceLost() { return call_method<"acceleratedSurfaceLost", void>(); }
	jni::ref<java::awt::ImageCapabilities> getCapabilities(jni::ref<java::awt::GraphicsConfiguration> p1) { return call_method<"getCapabilities", jni::ref<java::awt::ImageCapabilities>>(p1); }
	void flush() { return call_method<"flush", void>(); }
	void setAccelerationPriority(jfloat p1) { return call_method<"setAccelerationPriority", void>(p1); }
	static jint getImageScale(jni::ref<java::awt::Image> p1) { return call_static_method<"getImageScale", jint>(p1); }

protected:

	SurfaceManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_SURFACEMANAGER
