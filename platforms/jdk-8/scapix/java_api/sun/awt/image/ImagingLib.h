// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGINGLIB_FWD
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGINGLIB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::image { class ImagingLib; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::image::ImagingLib>
{
	static constexpr fixed_string class_name = "sun/awt/image/ImagingLib";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGINGLIB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGINGLIB)
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGINGLIB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/BufferedImageOp.h>
#include <scapix/java_api/java/awt/image/Kernel.h>
#include <scapix/java_api/java/awt/image/Raster.h>
#include <scapix/java_api/java/awt/image/RasterOp.h>
#include <scapix/java_api/java/awt/image/WritableRaster.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::image::ImagingLib : public jni::object_base<"sun/awt/image/ImagingLib",
	java::lang::Object>
{
public:

	static jni::ref<sun::awt::image::ImagingLib> new_object() { return base_::new_object(); }
	static jint transformBI(jni::ref<java::awt::image::BufferedImage> p1, jni::ref<java::awt::image::BufferedImage> p2, jni::ref<jni::array<jdouble>> p3, jint p4) { return call_static_method<"transformBI", jint>(p1, p2, p3, p4); }
	static jint transformRaster(jni::ref<java::awt::image::Raster> p1, jni::ref<java::awt::image::Raster> p2, jni::ref<jni::array<jdouble>> p3, jint p4) { return call_static_method<"transformRaster", jint>(p1, p2, p3, p4); }
	static jint convolveBI(jni::ref<java::awt::image::BufferedImage> p1, jni::ref<java::awt::image::BufferedImage> p2, jni::ref<java::awt::image::Kernel> p3, jint p4) { return call_static_method<"convolveBI", jint>(p1, p2, p3, p4); }
	static jint convolveRaster(jni::ref<java::awt::image::Raster> p1, jni::ref<java::awt::image::Raster> p2, jni::ref<java::awt::image::Kernel> p3, jint p4) { return call_static_method<"convolveRaster", jint>(p1, p2, p3, p4); }
	static jint lookupByteBI(jni::ref<java::awt::image::BufferedImage> p1, jni::ref<java::awt::image::BufferedImage> p2, jni::ref<jni::array<jni::array<jbyte>>> p3) { return call_static_method<"lookupByteBI", jint>(p1, p2, p3); }
	static jint lookupByteRaster(jni::ref<java::awt::image::Raster> p1, jni::ref<java::awt::image::Raster> p2, jni::ref<jni::array<jni::array<jbyte>>> p3) { return call_static_method<"lookupByteRaster", jint>(p1, p2, p3); }
	static jni::ref<java::awt::image::WritableRaster> filter(jni::ref<java::awt::image::RasterOp> p1, jni::ref<java::awt::image::Raster> p2, jni::ref<java::awt::image::WritableRaster> p3) { return call_static_method<"filter", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3); }
	static jni::ref<java::awt::image::BufferedImage> filter(jni::ref<java::awt::image::BufferedImageOp> p1, jni::ref<java::awt::image::BufferedImage> p2, jni::ref<java::awt::image::BufferedImage> p3) { return call_static_method<"filter", jni::ref<java::awt::image::BufferedImage>>(p1, p2, p3); }

protected:

	ImagingLib(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGINGLIB
