// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/image/codec/jpeg/JPEGEncodeParam.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_IMAGE_CODEC_JPEGPARAM_FWD
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_CODEC_JPEGPARAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::image::codec { class JPEGParam; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::image::codec::JPEGParam>
{
	static constexpr fixed_string class_name = "sun/awt/image/codec/JPEGParam";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::image::codec::jpeg::JPEGEncodeParam, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_CODEC_JPEGPARAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_IMAGE_CODEC_JPEGPARAM)
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_CODEC_JPEGPARAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/image/codec/jpeg/JPEGDecodeParam.h>
#include <scapix/java_api/com/sun/image/codec/jpeg/JPEGHuffmanTable.h>
#include <scapix/java_api/com/sun/image/codec/jpeg/JPEGQTable.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::image::codec::JPEGParam : public jni::object_base<"sun/awt/image/codec/JPEGParam",
	java::lang::Object,
	com::sun::image::codec::jpeg::JPEGEncodeParam,
	java::lang::Cloneable>
{
public:

	static jni::ref<sun::awt::image::codec::JPEGParam> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<sun::awt::image::codec::JPEGParam> new_object(jni::ref<com::sun::image::codec::jpeg::JPEGDecodeParam> p1) { return base_::new_object(p1); }
	static jni::ref<sun::awt::image::codec::JPEGParam> new_object(jni::ref<com::sun::image::codec::jpeg::JPEGEncodeParam> p1) { return base_::new_object(p1); }
	static jni::ref<sun::awt::image::codec::JPEGParam> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	void setWidth(jint p1) { return call_method<"setWidth", void>(p1); }
	void setHeight(jint p1) { return call_method<"setHeight", void>(p1); }
	jint getHorizontalSubsampling(jint p1) { return call_method<"getHorizontalSubsampling", jint>(p1); }
	jint getVerticalSubsampling(jint p1) { return call_method<"getVerticalSubsampling", jint>(p1); }
	void setHorizontalSubsampling(jint p1, jint p2) { return call_method<"setHorizontalSubsampling", void>(p1, p2); }
	void setVerticalSubsampling(jint p1, jint p2) { return call_method<"setVerticalSubsampling", void>(p1, p2); }
	jni::ref<com::sun::image::codec::jpeg::JPEGQTable> getQTable(jint p1) { return call_method<"getQTable", jni::ref<com::sun::image::codec::jpeg::JPEGQTable>>(p1); }
	jni::ref<com::sun::image::codec::jpeg::JPEGQTable> getQTableForComponent(jint p1) { return call_method<"getQTableForComponent", jni::ref<com::sun::image::codec::jpeg::JPEGQTable>>(p1); }
	jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable> getDCHuffmanTable(jint p1) { return call_method<"getDCHuffmanTable", jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable>>(p1); }
	jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable> getDCHuffmanTableForComponent(jint p1) { return call_method<"getDCHuffmanTableForComponent", jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable>>(p1); }
	jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable> getACHuffmanTable(jint p1) { return call_method<"getACHuffmanTable", jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable>>(p1); }
	jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable> getACHuffmanTableForComponent(jint p1) { return call_method<"getACHuffmanTableForComponent", jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable>>(p1); }
	void setQTable(jint p1, jni::ref<com::sun::image::codec::jpeg::JPEGQTable> p2) { return call_method<"setQTable", void>(p1, p2); }
	void setDCHuffmanTable(jint p1, jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable> p2) { return call_method<"setDCHuffmanTable", void>(p1, p2); }
	void setACHuffmanTable(jint p1, jni::ref<com::sun::image::codec::jpeg::JPEGHuffmanTable> p2) { return call_method<"setACHuffmanTable", void>(p1, p2); }
	jint getDCHuffmanComponentMapping(jint p1) { return call_method<"getDCHuffmanComponentMapping", jint>(p1); }
	jint getACHuffmanComponentMapping(jint p1) { return call_method<"getACHuffmanComponentMapping", jint>(p1); }
	jint getQTableComponentMapping(jint p1) { return call_method<"getQTableComponentMapping", jint>(p1); }
	void setDCHuffmanComponentMapping(jint p1, jint p2) { return call_method<"setDCHuffmanComponentMapping", void>(p1, p2); }
	void setACHuffmanComponentMapping(jint p1, jint p2) { return call_method<"setACHuffmanComponentMapping", void>(p1, p2); }
	void setQTableComponentMapping(jint p1, jint p2) { return call_method<"setQTableComponentMapping", void>(p1, p2); }
	jboolean isImageInfoValid() { return call_method<"isImageInfoValid", jboolean>(); }
	void setImageInfoValid(jboolean p1) { return call_method<"setImageInfoValid", void>(p1); }
	jboolean isTableInfoValid() { return call_method<"isTableInfoValid", jboolean>(); }
	void setTableInfoValid(jboolean p1) { return call_method<"setTableInfoValid", void>(p1); }
	jboolean getMarker(jint p1) { return call_method<"getMarker", jboolean>(p1); }
	jni::ref<jni::array<jni::array<jbyte>>> getMarkerData(jint p1) { return call_method<"getMarkerData", jni::ref<jni::array<jni::array<jbyte>>>>(p1); }
	void setMarkerData(jint p1, jni::ref<jni::array<jni::array<jbyte>>> p2) { return call_method<"setMarkerData", void>(p1, p2); }
	void addMarkerData(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"addMarkerData", void>(p1, p2); }
	jint getEncodedColorID() { return call_method<"getEncodedColorID", jint>(); }
	jint getNumComponents() { return call_method<"getNumComponents", jint>(); }
	static jint getNumComponents(jint p1) { return call_static_method<"getNumComponents", jint>(p1); }
	jint getRestartInterval() { return call_method<"getRestartInterval", jint>(); }
	void setRestartInterval(jint p1) { return call_method<"setRestartInterval", void>(p1); }
	jint getDensityUnit() { return call_method<"getDensityUnit", jint>(); }
	jint getXDensity() { return call_method<"getXDensity", jint>(); }
	jint getYDensity() { return call_method<"getYDensity", jint>(); }
	void setDensityUnit(jint p1) { return call_method<"setDensityUnit", void>(p1); }
	void setXDensity(jint p1) { return call_method<"setXDensity", void>(p1); }
	void setYDensity(jint p1) { return call_method<"setYDensity", void>(p1); }
	void setQuality(jfloat p1, jboolean p2) { return call_method<"setQuality", void>(p1, p2); }
	static jint getDefaultColorId(jni::ref<java::awt::image::ColorModel> p1) { return call_static_method<"getDefaultColorId", jint>(p1); }

protected:

	JPEGParam(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_CODEC_JPEGPARAM
