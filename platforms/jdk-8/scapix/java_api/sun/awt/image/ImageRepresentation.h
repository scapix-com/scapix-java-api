// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/image/ImageWatched.h>
#include <scapix/java_api/java/awt/image/ImageConsumer.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGEREPRESENTATION_FWD
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGEREPRESENTATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::image { class ImageRepresentation; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::image::ImageRepresentation>
{
	static constexpr fixed_string class_name = "sun/awt/image/ImageRepresentation";
	using base_classes = std::tuple<scapix::java_api::sun::awt::image::ImageWatched, scapix::java_api::java::awt::image::ImageConsumer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGEREPRESENTATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGEREPRESENTATION)
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGEREPRESENTATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/util/Hashtable.h>
#include <scapix/java_api/sun/awt/image/ToolkitImage.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::image::ImageRepresentation : public jni::object_base<"sun/awt/image/ImageRepresentation",
	sun::awt::image::ImageWatched,
	java::awt::image::ImageConsumer>
{
public:

	static jni::ref<sun::awt::image::ImageRepresentation> new_object(jni::ref<sun::awt::image::ToolkitImage> p1, jni::ref<java::awt::image::ColorModel> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	void reconstruct(jint p1) { return call_method<"reconstruct", void>(p1); }
	void setDimensions(jint p1, jint p2) { return call_method<"setDimensions", void>(p1, p2); }
	jint getWidth() { return call_method<"getWidth", jint>(); }
	jint getHeight() { return call_method<"getHeight", jint>(); }
	void setProperties(jni::ref<java::util::Hashtable> p1) { return call_method<"setProperties", void>(p1); }
	void setColorModel(jni::ref<java::awt::image::ColorModel> p1) { return call_method<"setColorModel", void>(p1); }
	void setHints(jint p1) { return call_method<"setHints", void>(p1); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::image::ColorModel> p5, jni::ref<jni::array<jbyte>> p6, jint p7, jint p8) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void setPixels(jint p1, jint p2, jint p3, jint p4, jni::ref<java::awt::image::ColorModel> p5, jni::ref<jni::array<jint>> p6, jint p7, jint p8) { return call_method<"setPixels", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jni::ref<java::awt::image::BufferedImage> getOpaqueRGBImage() { return call_method<"getOpaqueRGBImage", jni::ref<java::awt::image::BufferedImage>>(); }
	void imageComplete(jint p1) { return call_method<"imageComplete", void>(p1); }
	void notifyWatcherListEmpty() { return call_method<"notifyWatcherListEmpty", void>(); }
	jboolean prepare(jni::ref<java::awt::image::ImageObserver> p1) { return call_method<"prepare", jboolean>(p1); }
	jint check(jni::ref<java::awt::image::ImageObserver> p1) { return call_method<"check", jint>(p1); }
	jboolean drawToBufImage(jni::ref<java::awt::Graphics> p1, jni::ref<sun::awt::image::ToolkitImage> p2, jint p3, jint p4, jni::ref<java::awt::Color> p5, jni::ref<java::awt::image::ImageObserver> p6) { return call_method<"drawToBufImage", jboolean>(p1, p2, p3, p4, p5, p6); }
	jboolean drawToBufImage(jni::ref<java::awt::Graphics> p1, jni::ref<sun::awt::image::ToolkitImage> p2, jint p3, jint p4, jint p5, jint p6, jni::ref<java::awt::Color> p7, jni::ref<java::awt::image::ImageObserver> p8) { return call_method<"drawToBufImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jboolean drawToBufImage(jni::ref<java::awt::Graphics> p1, jni::ref<sun::awt::image::ToolkitImage> p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jni::ref<java::awt::Color> p11, jni::ref<java::awt::image::ImageObserver> p12) { return call_method<"drawToBufImage", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
	jboolean drawToBufImage(jni::ref<java::awt::Graphics> p1, jni::ref<sun::awt::image::ToolkitImage> p2, jni::ref<java::awt::geom::AffineTransform> p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"drawToBufImage", jboolean>(p1, p2, p3, p4); }
	void setAccelerationPriority(jfloat p1) { return call_method<"setAccelerationPriority", void>(p1); }

protected:

	ImageRepresentation(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_IMAGEREPRESENTATION
