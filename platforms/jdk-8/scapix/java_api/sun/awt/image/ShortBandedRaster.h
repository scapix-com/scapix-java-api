// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/awt/image/SunWritableRaster.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_IMAGE_SHORTBANDEDRASTER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_SHORTBANDEDRASTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::image { class ShortBandedRaster; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::image::ShortBandedRaster>
{
	static constexpr fixed_string class_name = "sun/awt/image/ShortBandedRaster";
	using base_classes = std::tuple<scapix::java_api::sun::awt::image::SunWritableRaster>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_SHORTBANDEDRASTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_IMAGE_SHORTBANDEDRASTER)
#define SCAPIX_JAVA_API_SUN_AWT_IMAGE_SHORTBANDEDRASTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/image/DataBuffer.h>
#include <scapix/java_api/java/awt/image/Raster.h>
#include <scapix/java_api/java/awt/image/SampleModel.h>
#include <scapix/java_api/java/awt/image/WritableRaster.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::image::ShortBandedRaster : public jni::object_base<"sun/awt/image/ShortBandedRaster",
	sun::awt::image::SunWritableRaster>
{
public:

	static jni::ref<sun::awt::image::ShortBandedRaster> new_object(jni::ref<java::awt::image::SampleModel> p1, jni::ref<java::awt::Point> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::awt::image::ShortBandedRaster> new_object(jni::ref<java::awt::image::SampleModel> p1, jni::ref<java::awt::image::DataBuffer> p2, jni::ref<java::awt::Point> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::awt::image::ShortBandedRaster> new_object(jni::ref<java::awt::image::SampleModel> p1, jni::ref<java::awt::image::DataBuffer> p2, jni::ref<java::awt::Rectangle> p3, jni::ref<java::awt::Point> p4, jni::ref<sun::awt::image::ShortBandedRaster> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	jni::ref<jni::array<jint>> getDataOffsets() { return call_method<"getDataOffsets", jni::ref<jni::array<jint>>>(); }
	jint getDataOffset(jint p1) { return call_method<"getDataOffset", jint>(p1); }
	jint getScanlineStride() { return call_method<"getScanlineStride", jint>(); }
	jint getPixelStride() { return call_method<"getPixelStride", jint>(); }
	jni::ref<jni::array<jni::array<jshort>>> getDataStorage() { return call_method<"getDataStorage", jni::ref<jni::array<jni::array<jshort>>>>(); }
	jni::ref<jni::array<jshort>> getDataStorage(jint p1) { return call_method<"getDataStorage", jni::ref<jni::array<jshort>>>(p1); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::lang::Object> getDataElements(jint p1, jint p2, jint p3, jint p4, jni::ref<java::lang::Object> p5) { return call_method<"getDataElements", jni::ref<java::lang::Object>>(p1, p2, p3, p4, p5); }
	jni::ref<jni::array<jshort>> getShortData(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jshort>> p6) { return call_method<"getShortData", jni::ref<jni::array<jshort>>>(p1, p2, p3, p4, p5, p6); }
	jni::ref<jni::array<jshort>> getShortData(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jshort>> p5) { return call_method<"getShortData", jni::ref<jni::array<jshort>>>(p1, p2, p3, p4, p5); }
	void setDataElements(jint p1, jint p2, jni::ref<java::lang::Object> p3) { return call_method<"setDataElements", void>(p1, p2, p3); }
	void setDataElements(jint p1, jint p2, jni::ref<java::awt::image::Raster> p3) { return call_method<"setDataElements", void>(p1, p2, p3); }
	void setDataElements(jint p1, jint p2, jint p3, jint p4, jni::ref<java::lang::Object> p5) { return call_method<"setDataElements", void>(p1, p2, p3, p4, p5); }
	void putShortData(jint p1, jint p2, jint p3, jint p4, jint p5, jni::ref<jni::array<jshort>> p6) { return call_method<"putShortData", void>(p1, p2, p3, p4, p5, p6); }
	void putShortData(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jshort>> p5) { return call_method<"putShortData", void>(p1, p2, p3, p4, p5); }
	jni::ref<java::awt::image::WritableRaster> createWritableChild(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jni::ref<jni::array<jint>> p7) { return call_method<"createWritableChild", jni::ref<java::awt::image::WritableRaster>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::awt::image::Raster> createChild(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jni::ref<jni::array<jint>> p7) { return call_method<"createChild", jni::ref<java::awt::image::Raster>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<java::awt::image::WritableRaster> createCompatibleWritableRaster(jint p1, jint p2) { return call_method<"createCompatibleWritableRaster", jni::ref<java::awt::image::WritableRaster>>(p1, p2); }
	jni::ref<java::awt::image::WritableRaster> createCompatibleWritableRaster() { return call_method<"createCompatibleWritableRaster", jni::ref<java::awt::image::WritableRaster>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ShortBandedRaster(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_IMAGE_SHORTBANDEDRASTER
