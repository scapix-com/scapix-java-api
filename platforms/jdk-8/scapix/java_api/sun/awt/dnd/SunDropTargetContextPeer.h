// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/awt/dnd/peer/DropTargetContextPeer.h>
#include <scapix/java_api/java/awt/datatransfer/Transferable.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_DND_SUNDROPTARGETCONTEXTPEER_FWD
#define SCAPIX_JAVA_API_SUN_AWT_DND_SUNDROPTARGETCONTEXTPEER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt::dnd { class SunDropTargetContextPeer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::dnd::SunDropTargetContextPeer>
{
	static constexpr fixed_string class_name = "sun/awt/dnd/SunDropTargetContextPeer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::awt::dnd::peer::DropTargetContextPeer, scapix::java_api::java::awt::datatransfer::Transferable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_DND_SUNDROPTARGETCONTEXTPEER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_DND_SUNDROPTARGETCONTEXTPEER)
#define SCAPIX_JAVA_API_SUN_AWT_DND_SUNDROPTARGETCONTEXTPEER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/datatransfer/DataFlavor.h>
#include <scapix/java_api/java/awt/dnd/DropTarget.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::dnd::SunDropTargetContextPeer : public jni::object_base<"sun/awt/dnd/SunDropTargetContextPeer",
	java::lang::Object,
	java::awt::dnd::peer::DropTargetContextPeer,
	java::awt::datatransfer::Transferable>
{
public:

	static jboolean DISPATCH_SYNC() { return get_static_field<"DISPATCH_SYNC", jboolean>(); }

	static void setCurrentJVMLocalSourceTransferable(jni::ref<java::awt::datatransfer::Transferable> p1) { return call_static_method<"setCurrentJVMLocalSourceTransferable", void>(p1); }
	static jni::ref<sun::awt::dnd::SunDropTargetContextPeer> new_object() { return base_::new_object(); }
	jni::ref<java::awt::dnd::DropTarget> getDropTarget() { return call_method<"getDropTarget", jni::ref<java::awt::dnd::DropTarget>>(); }
	void setTargetActions(jint p1) { return call_method<"setTargetActions", void>(p1); }
	jint getTargetActions() { return call_method<"getTargetActions", jint>(); }
	jni::ref<java::awt::datatransfer::Transferable> getTransferable() { return call_method<"getTransferable", jni::ref<java::awt::datatransfer::Transferable>>(); }
	jni::ref<jni::array<java::awt::datatransfer::DataFlavor>> getTransferDataFlavors() { return call_method<"getTransferDataFlavors", jni::ref<jni::array<java::awt::datatransfer::DataFlavor>>>(); }
	jboolean isDataFlavorSupported(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_method<"isDataFlavorSupported", jboolean>(p1); }
	jni::ref<java::lang::Object> getTransferData(jni::ref<java::awt::datatransfer::DataFlavor> p1) { return call_method<"getTransferData", jni::ref<java::lang::Object>>(p1); }
	jboolean isTransferableJVMLocal() { return call_method<"isTransferableJVMLocal", jboolean>(); }
	void acceptDrag(jint p1) { return call_method<"acceptDrag", void>(p1); }
	void rejectDrag() { return call_method<"rejectDrag", void>(); }
	void acceptDrop(jint p1) { return call_method<"acceptDrop", void>(p1); }
	void rejectDrop() { return call_method<"rejectDrop", void>(); }
	void dropComplete(jboolean p1) { return call_method<"dropComplete", void>(p1); }

protected:

	SunDropTargetContextPeer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_DND_SUNDROPTARGETCONTEXTPEER
