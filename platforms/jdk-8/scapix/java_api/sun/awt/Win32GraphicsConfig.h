// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/sun/awt/DisplayChangedListener.h>
#include <scapix/java_api/sun/awt/image/SurfaceManager_ProxiedGraphicsConfig.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSCONFIG_FWD
#define SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSCONFIG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class Win32GraphicsConfig; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::Win32GraphicsConfig>
{
	static constexpr fixed_string class_name = "sun/awt/Win32GraphicsConfig";
	using base_classes = std::tuple<scapix::java_api::java::awt::GraphicsConfiguration, scapix::java_api::sun::awt::DisplayChangedListener, scapix::java_api::sun::awt::image::SurfaceManager_ProxiedGraphicsConfig>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSCONFIG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSCONFIG)
#define SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSCONFIG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/BufferCapabilities.h>
#include <scapix/java_api/java/awt/BufferCapabilities_FlipContents.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/GraphicsDevice.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/geom/AffineTransform.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/VolatileImage.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/awt/Win32GraphicsDevice.h>
#include <scapix/java_api/sun/awt/windows/WComponentPeer.h>
#include <scapix/java_api/sun/java2d/SurfaceData.h>
#include <scapix/java_api/sun/java2d/loops/RenderLoops.h>
#include <scapix/java_api/sun/java2d/loops/SurfaceType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::Win32GraphicsConfig : public jni::object_base<"sun/awt/Win32GraphicsConfig",
	java::awt::GraphicsConfiguration,
	sun::awt::DisplayChangedListener,
	sun::awt::image::SurfaceManager_ProxiedGraphicsConfig>
{
public:

	static jni::ref<sun::awt::Win32GraphicsConfig> getConfig(jni::ref<sun::awt::Win32GraphicsDevice> p1, jint p2) { return call_static_method<"getConfig", jni::ref<sun::awt::Win32GraphicsConfig>>(p1, p2); }
	static jni::ref<sun::awt::Win32GraphicsConfig> new_object(jni::ref<java::awt::GraphicsDevice> p1, jint p2) { return base_::new_object(p1, p2); }
	jni::ref<java::awt::GraphicsDevice> getDevice() { return call_method<"getDevice", jni::ref<java::awt::GraphicsDevice>>(); }
	jint getVisual() { return call_method<"getVisual", jint>(); }
	jni::ref<java::lang::Object> getProxyKey() { return call_method<"getProxyKey", jni::ref<java::lang::Object>>(); }
	jni::ref<sun::java2d::loops::RenderLoops> getSolidLoops(jni::ref<sun::java2d::loops::SurfaceType> p1) { return call_method<"getSolidLoops", jni::ref<sun::java2d::loops::RenderLoops>>(p1); }
	jni::ref<java::awt::image::ColorModel> getColorModel() { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::image::ColorModel> getDeviceColorModel() { return call_method<"getDeviceColorModel", jni::ref<java::awt::image::ColorModel>>(); }
	jni::ref<java::awt::image::ColorModel> getColorModel(jint p1) { return call_method<"getColorModel", jni::ref<java::awt::image::ColorModel>>(p1); }
	jni::ref<java::awt::geom::AffineTransform> getDefaultTransform() { return call_method<"getDefaultTransform", jni::ref<java::awt::geom::AffineTransform>>(); }
	jni::ref<java::awt::geom::AffineTransform> getNormalizingTransform() { return call_method<"getNormalizingTransform", jni::ref<java::awt::geom::AffineTransform>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::awt::Rectangle> getBounds() { return call_method<"getBounds", jni::ref<java::awt::Rectangle>>(); }
	void displayChanged() { return call_method<"displayChanged", void>(); }
	void paletteChanged() { return call_method<"paletteChanged", void>(); }
	jni::ref<sun::java2d::SurfaceData> createSurfaceData(jni::ref<sun::awt::windows::WComponentPeer> p1, jint p2) { return call_method<"createSurfaceData", jni::ref<sun::java2d::SurfaceData>>(p1, p2); }
	jni::ref<java::awt::Image> createAcceleratedImage(jni::ref<java::awt::Component> p1, jint p2, jint p3) { return call_method<"createAcceleratedImage", jni::ref<java::awt::Image>>(p1, p2, p3); }
	void assertOperationSupported(jni::ref<java::awt::Component> p1, jint p2, jni::ref<java::awt::BufferCapabilities> p3) { return call_method<"assertOperationSupported", void>(p1, p2, p3); }
	jni::ref<java::awt::image::VolatileImage> createBackBuffer(jni::ref<sun::awt::windows::WComponentPeer> p1) { return call_method<"createBackBuffer", jni::ref<java::awt::image::VolatileImage>>(p1); }
	void flip(jni::ref<sun::awt::windows::WComponentPeer> p1, jni::ref<java::awt::Component> p2, jni::ref<java::awt::image::VolatileImage> p3, jint p4, jint p5, jint p6, jint p7, jni::ref<java::awt::BufferCapabilities_FlipContents> p8) { return call_method<"flip", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jboolean isTranslucencyCapable() { return call_method<"isTranslucencyCapable", jboolean>(); }

protected:

	Win32GraphicsConfig(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_WIN32GRAPHICSCONFIG
