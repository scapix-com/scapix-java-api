// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_FONTCONFIGURATION_FWD
#define SCAPIX_JAVA_API_SUN_AWT_FONTCONFIGURATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class FontConfiguration; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::FontConfiguration>
{
	static constexpr fixed_string class_name = "sun/awt/FontConfiguration";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_FONTCONFIGURATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_FONTCONFIGURATION)
#define SCAPIX_JAVA_API_SUN_AWT_FONTCONFIGURATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/HashSet.h>
#include <scapix/java_api/sun/awt/FontDescriptor.h>
#include <scapix/java_api/sun/font/CompositeFontDescriptor.h>
#include <scapix/java_api/sun/font/SunFontManager.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::FontConfiguration : public jni::object_base<"sun/awt/FontConfiguration",
	java::lang::Object>
{
public:

	static jboolean verbose() { return get_static_field<"verbose", jboolean>(); }
	static void verbose(jboolean v) { set_static_field<"verbose", jboolean>(v); }

	static jni::ref<sun::awt::FontConfiguration> new_object(jni::ref<sun::font::SunFontManager> p1) { return base_::new_object(p1); }
	jboolean init() { return call_method<"init", jboolean>(); }
	static jni::ref<sun::awt::FontConfiguration> new_object(jni::ref<sun::font::SunFontManager> p1, jboolean p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	jboolean foundOsSpecificFile() { return call_method<"foundOsSpecificFile", jboolean>(); }
	jboolean fontFilesArePresent() { return call_method<"fontFilesArePresent", jboolean>(); }
	static void loadBinary(jni::ref<java::io::InputStream> p1) { return call_static_method<"loadBinary", void>(p1); }
	static void saveBinary(jni::ref<java::io::OutputStream> p1) { return call_static_method<"saveBinary", void>(p1); }
	static void loadProperties(jni::ref<java::io::InputStream> p1) { return call_static_method<"loadProperties", void>(p1); }
	static jboolean hasMonoToPropMap() { return call_static_method<"hasMonoToPropMap", jboolean>(); }
	static jboolean isLogicalFontFamilyName(jni::ref<java::lang::String> p1) { return call_static_method<"isLogicalFontFamilyName", jboolean>(p1); }
	static jboolean isLogicalFontFamilyNameLC(jni::ref<java::lang::String> p1) { return call_static_method<"isLogicalFontFamilyNameLC", jboolean>(p1); }
	static jboolean isLogicalFontFaceName(jni::ref<java::lang::String> p1) { return call_static_method<"isLogicalFontFaceName", jboolean>(p1); }
	static jboolean isLogicalFontFaceNameLC(jni::ref<java::lang::String> p1) { return call_static_method<"isLogicalFontFaceNameLC", jboolean>(p1); }
	static jni::ref<java::lang::String> getLogicalFontFaceName(jni::ref<java::lang::String> p1, jint p2) { return call_static_method<"getLogicalFontFaceName", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> getStyleString(jint p1) { return call_static_method<"getStyleString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getFallbackFamilyName(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getFallbackFamilyName", jni::ref<java::lang::String>>(p1, p2); }
	static jboolean willReorderForStartupLocale() { return call_static_method<"willReorderForStartupLocale", jboolean>(); }
	jni::ref<jni::array<sun::awt::FontDescriptor>> getFontDescriptors(jni::ref<java::lang::String> p1, jint p2) { return call_method<"getFontDescriptors", jni::ref<jni::array<sun::awt::FontDescriptor>>>(p1, p2); }
	jni::ref<java::util::HashSet> getAWTFontPathSet() { return call_method<"getAWTFontPathSet", jni::ref<java::util::HashSet>>(); }
	jni::ref<jni::array<sun::font::CompositeFontDescriptor>> get2DCompositeFontInfo() { return call_method<"get2DCompositeFontInfo", jni::ref<jni::array<sun::font::CompositeFontDescriptor>>>(); }
	jboolean needToSearchForFile(jni::ref<java::lang::String> p1) { return call_method<"needToSearchForFile", jboolean>(p1); }
	jint getNumberCoreFonts() { return call_method<"getNumberCoreFonts", jint>(); }
	jni::ref<jni::array<java::lang::String>> getPlatformFontNames() { return call_method<"getPlatformFontNames", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::lang::String> getFileNameFromPlatformName(jni::ref<java::lang::String> p1) { return call_method<"getFileNameFromPlatformName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getExtraFontPath() { return call_method<"getExtraFontPath", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }

protected:

	FontConfiguration(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_FONTCONFIGURATION
