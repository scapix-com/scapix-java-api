// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/awt/Toolkit.h>
#include <scapix/java_api/sun/awt/WindowClosingSupport.h>
#include <scapix/java_api/sun/awt/WindowClosingListener.h>
#include <scapix/java_api/sun/awt/ComponentFactory.h>
#include <scapix/java_api/sun/awt/InputMethodSupport.h>
#include <scapix/java_api/sun/awt/KeyboardFocusManagerPeerProvider.h>

#ifndef SCAPIX_JAVA_API_SUN_AWT_SUNTOOLKIT_FWD
#define SCAPIX_JAVA_API_SUN_AWT_SUNTOOLKIT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::awt { class SunToolkit; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::awt::SunToolkit>
{
	static constexpr fixed_string class_name = "sun/awt/SunToolkit";
	using base_classes = std::tuple<scapix::java_api::java::awt::Toolkit, scapix::java_api::sun::awt::WindowClosingSupport, scapix::java_api::sun::awt::WindowClosingListener, scapix::java_api::sun::awt::ComponentFactory, scapix::java_api::sun::awt::InputMethodSupport, scapix::java_api::sun::awt::KeyboardFocusManagerPeerProvider>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_SUNTOOLKIT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AWT_SUNTOOLKIT)
#define SCAPIX_JAVA_API_SUN_AWT_SUNTOOLKIT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/AWTEvent.h>
#include <scapix/java_api/java/awt/Button.h>
#include <scapix/java_api/java/awt/Canvas.h>
#include <scapix/java_api/java/awt/Checkbox.h>
#include <scapix/java_api/java/awt/CheckboxMenuItem.h>
#include <scapix/java_api/java/awt/Choice.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Container.h>
#include <scapix/java_api/java/awt/Dialog.h>
#include <scapix/java_api/java/awt/Dialog_ModalExclusionType.h>
#include <scapix/java_api/java/awt/Dialog_ModalityType.h>
#include <scapix/java_api/java/awt/Dimension.h>
#include <scapix/java_api/java/awt/EventQueue.h>
#include <scapix/java_api/java/awt/FileDialog.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Frame.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/GraphicsDevice.h>
#include <scapix/java_api/java/awt/Image.h>
#include <scapix/java_api/java/awt/Label.h>
#include <scapix/java_api/java/awt/List.h>
#include <scapix/java_api/java/awt/Menu.h>
#include <scapix/java_api/java/awt/MenuBar.h>
#include <scapix/java_api/java/awt/MenuItem.h>
#include <scapix/java_api/java/awt/Panel.h>
#include <scapix/java_api/java/awt/PopupMenu.h>
#include <scapix/java_api/java/awt/RenderingHints.h>
#include <scapix/java_api/java/awt/Robot.h>
#include <scapix/java_api/java/awt/ScrollPane.h>
#include <scapix/java_api/java/awt/Scrollbar.h>
#include <scapix/java_api/java/awt/SystemTray.h>
#include <scapix/java_api/java/awt/TextArea.h>
#include <scapix/java_api/java/awt/TextField.h>
#include <scapix/java_api/java/awt/TrayIcon.h>
#include <scapix/java_api/java/awt/Window.h>
#include <scapix/java_api/java/awt/dnd/DragGestureEvent.h>
#include <scapix/java_api/java/awt/dnd/peer/DragSourceContextPeer.h>
#include <scapix/java_api/java/awt/event/KeyEvent.h>
#include <scapix/java_api/java/awt/event/WindowEvent.h>
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/awt/image/DataBufferInt.h>
#include <scapix/java_api/java/awt/image/ImageObserver.h>
#include <scapix/java_api/java/awt/image/ImageProducer.h>
#include <scapix/java_api/java/awt/peer/ButtonPeer.h>
#include <scapix/java_api/java/awt/peer/CanvasPeer.h>
#include <scapix/java_api/java/awt/peer/CheckboxMenuItemPeer.h>
#include <scapix/java_api/java/awt/peer/CheckboxPeer.h>
#include <scapix/java_api/java/awt/peer/ChoicePeer.h>
#include <scapix/java_api/java/awt/peer/DialogPeer.h>
#include <scapix/java_api/java/awt/peer/FileDialogPeer.h>
#include <scapix/java_api/java/awt/peer/FontPeer.h>
#include <scapix/java_api/java/awt/peer/FramePeer.h>
#include <scapix/java_api/java/awt/peer/KeyboardFocusManagerPeer.h>
#include <scapix/java_api/java/awt/peer/LabelPeer.h>
#include <scapix/java_api/java/awt/peer/ListPeer.h>
#include <scapix/java_api/java/awt/peer/MenuBarPeer.h>
#include <scapix/java_api/java/awt/peer/MenuItemPeer.h>
#include <scapix/java_api/java/awt/peer/MenuPeer.h>
#include <scapix/java_api/java/awt/peer/PanelPeer.h>
#include <scapix/java_api/java/awt/peer/PopupMenuPeer.h>
#include <scapix/java_api/java/awt/peer/RobotPeer.h>
#include <scapix/java_api/java/awt/peer/ScrollPanePeer.h>
#include <scapix/java_api/java/awt/peer/ScrollbarPeer.h>
#include <scapix/java_api/java/awt/peer/SystemTrayPeer.h>
#include <scapix/java_api/java/awt/peer/TextAreaPeer.h>
#include <scapix/java_api/java/awt/peer/TextFieldPeer.h>
#include <scapix/java_api/java/awt/peer/TrayIconPeer.h>
#include <scapix/java_api/java/awt/peer/WindowPeer.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/RuntimeException.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/sun/awt/AppContext.h>
#include <scapix/java_api/sun/awt/LightweightFrame.h>
#include <scapix/java_api/sun/awt/ModalityListener.h>
#include <scapix/java_api/sun/awt/PeerEvent.h>
#include <scapix/java_api/sun/awt/im/InputContext.h>
#include <scapix/java_api/sun/awt/SunToolkit_IllegalThreadException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::awt::SunToolkit : public jni::object_base<"sun/awt/SunToolkit",
	java::awt::Toolkit,
	sun::awt::WindowClosingSupport,
	sun::awt::WindowClosingListener,
	sun::awt::ComponentFactory,
	sun::awt::InputMethodSupport,
	sun::awt::KeyboardFocusManagerPeerProvider>
{
public:

	using IllegalThreadException = SunToolkit_IllegalThreadException;

	static jint GRAB_EVENT_MASK() { return get_static_field<"GRAB_EVENT_MASK", jint>(); }
	static jint MAX_BUTTONS_SUPPORTED() { return get_static_field<"MAX_BUTTONS_SUPPORTED", jint>(); }
	static jint DEFAULT_WAIT_TIME() { return get_static_field<"DEFAULT_WAIT_TIME", jint>(); }
	static jni::ref<java::lang::String> DESKTOPFONTHINTS() { return get_static_field<"DESKTOPFONTHINTS", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::awt::SunToolkit> new_object() { return base_::new_object(); }
	jboolean useBufferPerWindow() { return call_method<"useBufferPerWindow", jboolean>(); }
	jni::ref<java::awt::peer::WindowPeer> createWindow(jni::ref<java::awt::Window> p1) { return call_method<"createWindow", jni::ref<java::awt::peer::WindowPeer>>(p1); }
	jni::ref<java::awt::peer::FramePeer> createFrame(jni::ref<java::awt::Frame> p1) { return call_method<"createFrame", jni::ref<java::awt::peer::FramePeer>>(p1); }
	jni::ref<java::awt::peer::FramePeer> createLightweightFrame(jni::ref<sun::awt::LightweightFrame> p1) { return call_method<"createLightweightFrame", jni::ref<java::awt::peer::FramePeer>>(p1); }
	jni::ref<java::awt::peer::DialogPeer> createDialog(jni::ref<java::awt::Dialog> p1) { return call_method<"createDialog", jni::ref<java::awt::peer::DialogPeer>>(p1); }
	jni::ref<java::awt::peer::ButtonPeer> createButton(jni::ref<java::awt::Button> p1) { return call_method<"createButton", jni::ref<java::awt::peer::ButtonPeer>>(p1); }
	jni::ref<java::awt::peer::TextFieldPeer> createTextField(jni::ref<java::awt::TextField> p1) { return call_method<"createTextField", jni::ref<java::awt::peer::TextFieldPeer>>(p1); }
	jni::ref<java::awt::peer::ChoicePeer> createChoice(jni::ref<java::awt::Choice> p1) { return call_method<"createChoice", jni::ref<java::awt::peer::ChoicePeer>>(p1); }
	jni::ref<java::awt::peer::LabelPeer> createLabel(jni::ref<java::awt::Label> p1) { return call_method<"createLabel", jni::ref<java::awt::peer::LabelPeer>>(p1); }
	jni::ref<java::awt::peer::ListPeer> createList(jni::ref<java::awt::List> p1) { return call_method<"createList", jni::ref<java::awt::peer::ListPeer>>(p1); }
	jni::ref<java::awt::peer::CheckboxPeer> createCheckbox(jni::ref<java::awt::Checkbox> p1) { return call_method<"createCheckbox", jni::ref<java::awt::peer::CheckboxPeer>>(p1); }
	jni::ref<java::awt::peer::ScrollbarPeer> createScrollbar(jni::ref<java::awt::Scrollbar> p1) { return call_method<"createScrollbar", jni::ref<java::awt::peer::ScrollbarPeer>>(p1); }
	jni::ref<java::awt::peer::ScrollPanePeer> createScrollPane(jni::ref<java::awt::ScrollPane> p1) { return call_method<"createScrollPane", jni::ref<java::awt::peer::ScrollPanePeer>>(p1); }
	jni::ref<java::awt::peer::TextAreaPeer> createTextArea(jni::ref<java::awt::TextArea> p1) { return call_method<"createTextArea", jni::ref<java::awt::peer::TextAreaPeer>>(p1); }
	jni::ref<java::awt::peer::FileDialogPeer> createFileDialog(jni::ref<java::awt::FileDialog> p1) { return call_method<"createFileDialog", jni::ref<java::awt::peer::FileDialogPeer>>(p1); }
	jni::ref<java::awt::peer::MenuBarPeer> createMenuBar(jni::ref<java::awt::MenuBar> p1) { return call_method<"createMenuBar", jni::ref<java::awt::peer::MenuBarPeer>>(p1); }
	jni::ref<java::awt::peer::MenuPeer> createMenu(jni::ref<java::awt::Menu> p1) { return call_method<"createMenu", jni::ref<java::awt::peer::MenuPeer>>(p1); }
	jni::ref<java::awt::peer::PopupMenuPeer> createPopupMenu(jni::ref<java::awt::PopupMenu> p1) { return call_method<"createPopupMenu", jni::ref<java::awt::peer::PopupMenuPeer>>(p1); }
	jni::ref<java::awt::peer::MenuItemPeer> createMenuItem(jni::ref<java::awt::MenuItem> p1) { return call_method<"createMenuItem", jni::ref<java::awt::peer::MenuItemPeer>>(p1); }
	jni::ref<java::awt::peer::CheckboxMenuItemPeer> createCheckboxMenuItem(jni::ref<java::awt::CheckboxMenuItem> p1) { return call_method<"createCheckboxMenuItem", jni::ref<java::awt::peer::CheckboxMenuItemPeer>>(p1); }
	jni::ref<java::awt::dnd::peer::DragSourceContextPeer> createDragSourceContextPeer(jni::ref<java::awt::dnd::DragGestureEvent> p1) { return call_method<"createDragSourceContextPeer", jni::ref<java::awt::dnd::peer::DragSourceContextPeer>>(p1); }
	jni::ref<java::awt::peer::TrayIconPeer> createTrayIcon(jni::ref<java::awt::TrayIcon> p1) { return call_method<"createTrayIcon", jni::ref<java::awt::peer::TrayIconPeer>>(p1); }
	jni::ref<java::awt::peer::SystemTrayPeer> createSystemTray(jni::ref<java::awt::SystemTray> p1) { return call_method<"createSystemTray", jni::ref<java::awt::peer::SystemTrayPeer>>(p1); }
	jboolean isTraySupported() { return call_method<"isTraySupported", jboolean>(); }
	jni::ref<java::awt::peer::FontPeer> getFontPeer(jni::ref<java::lang::String> p1, jint p2) { return call_method<"getFontPeer", jni::ref<java::awt::peer::FontPeer>>(p1, p2); }
	jni::ref<java::awt::peer::RobotPeer> createRobot(jni::ref<java::awt::Robot> p1, jni::ref<java::awt::GraphicsDevice> p2) { return call_method<"createRobot", jni::ref<java::awt::peer::RobotPeer>>(p1, p2); }
	jni::ref<java::awt::peer::KeyboardFocusManagerPeer> getKeyboardFocusManagerPeer() { return call_method<"getKeyboardFocusManagerPeer", jni::ref<java::awt::peer::KeyboardFocusManagerPeer>>(); }
	static void awtLock() { return call_static_method<"awtLock", void>(); }
	static jboolean awtTryLock() { return call_static_method<"awtTryLock", jboolean>(); }
	static void awtUnlock() { return call_static_method<"awtUnlock", void>(); }
	static void awtLockWait() { return call_static_method<"awtLockWait", void>(); }
	static void awtLockWait(jlong p1) { return call_static_method<"awtLockWait", void>(p1); }
	static void awtLockNotify() { return call_static_method<"awtLockNotify", void>(); }
	static void awtLockNotifyAll() { return call_static_method<"awtLockNotifyAll", void>(); }
	static jboolean isAWTLockHeldByCurrentThread() { return call_static_method<"isAWTLockHeldByCurrentThread", jboolean>(); }
	static jni::ref<sun::awt::AppContext> createNewAppContext() { return call_static_method<"createNewAppContext", jni::ref<sun::awt::AppContext>>(); }
	static jni::ref<sun::awt::AppContext> targetToAppContext(jni::ref<java::lang::Object> p1) { return call_static_method<"targetToAppContext", jni::ref<sun::awt::AppContext>>(p1); }
	static void setLWRequestStatus(jni::ref<java::awt::Window> p1, jboolean p2) { return call_static_method<"setLWRequestStatus", void>(p1, p2); }
	static void checkAndSetPolicy(jni::ref<java::awt::Container> p1) { return call_static_method<"checkAndSetPolicy", void>(p1); }
	static void insertTargetMapping(jni::ref<java::lang::Object> p1, jni::ref<sun::awt::AppContext> p2) { return call_static_method<"insertTargetMapping", void>(p1, p2); }
	static void postEvent(jni::ref<sun::awt::AppContext> p1, jni::ref<java::awt::AWTEvent> p2) { return call_static_method<"postEvent", void>(p1, p2); }
	static void postPriorityEvent(jni::ref<java::awt::AWTEvent> p1) { return call_static_method<"postPriorityEvent", void>(p1); }
	static void flushPendingEvents() { return call_static_method<"flushPendingEvents", void>(); }
	static void flushPendingEvents(jni::ref<sun::awt::AppContext> p1) { return call_static_method<"flushPendingEvents", void>(p1); }
	static void executeOnEventHandlerThread(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Runnable> p2) { return call_static_method<"executeOnEventHandlerThread", void>(p1, p2); }
	static void executeOnEventHandlerThread(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Runnable> p2, jlong p3) { return call_static_method<"executeOnEventHandlerThread", void>(p1, p2, p3); }
	static void executeOnEventHandlerThread(jni::ref<sun::awt::PeerEvent> p1) { return call_static_method<"executeOnEventHandlerThread", void>(p1); }
	static void invokeLaterOnAppContext(jni::ref<sun::awt::AppContext> p1, jni::ref<java::lang::Runnable> p2) { return call_static_method<"invokeLaterOnAppContext", void>(p1, p2); }
	static void executeOnEDTAndWait(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Runnable> p2) { return call_static_method<"executeOnEDTAndWait", void>(p1, p2); }
	static jboolean isDispatchThreadForAppContext(jni::ref<java::lang::Object> p1) { return call_static_method<"isDispatchThreadForAppContext", jboolean>(p1); }
	jni::ref<java::awt::Dimension> getScreenSize() { return call_method<"getScreenSize", jni::ref<java::awt::Dimension>>(); }
	jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<java::awt::Font> p1) { return call_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1); }
	jni::ref<jni::array<java::lang::String>> getFontList() { return call_method<"getFontList", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::awt::peer::PanelPeer> createPanel(jni::ref<java::awt::Panel> p1) { return call_method<"createPanel", jni::ref<java::awt::peer::PanelPeer>>(p1); }
	jni::ref<java::awt::peer::CanvasPeer> createCanvas(jni::ref<java::awt::Canvas> p1) { return call_method<"createCanvas", jni::ref<java::awt::peer::CanvasPeer>>(p1); }
	void disableBackgroundErase(jni::ref<java::awt::Canvas> p1) { return call_method<"disableBackgroundErase", void>(p1); }
	void disableBackgroundErase(jni::ref<java::awt::Component> p1) { return call_method<"disableBackgroundErase", void>(p1); }
	static jboolean getSunAwtNoerasebackground() { return call_static_method<"getSunAwtNoerasebackground", jboolean>(); }
	static jboolean getSunAwtErasebackgroundonresize() { return call_static_method<"getSunAwtErasebackgroundonresize", jboolean>(); }
	jni::ref<java::awt::Image> getImage(jni::ref<java::lang::String> p1) { return call_method<"getImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> getImage(jni::ref<java::net::URL> p1) { return call_method<"getImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jni::ref<java::lang::String> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jni::ref<java::net::URL> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	jni::ref<java::awt::Image> createImage(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1, p2, p3); }
	jni::ref<java::awt::Image> createImage(jni::ref<java::awt::image::ImageProducer> p1) { return call_method<"createImage", jni::ref<java::awt::Image>>(p1); }
	static jni::ref<java::awt::Image> createImageWithResolutionVariant(jni::ref<java::awt::Image> p1, jni::ref<java::awt::Image> p2) { return call_static_method<"createImageWithResolutionVariant", jni::ref<java::awt::Image>>(p1, p2); }
	jint checkImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"checkImage", jint>(p1, p2, p3, p4); }
	jboolean prepareImage(jni::ref<java::awt::Image> p1, jint p2, jint p3, jni::ref<java::awt::image::ImageObserver> p4) { return call_method<"prepareImage", jboolean>(p1, p2, p3, p4); }
	static jni::ref<java::awt::image::BufferedImage> getScaledIconImage(jni::ref<java::util::List> p1, jint p2, jint p3) { return call_static_method<"getScaledIconImage", jni::ref<java::awt::image::BufferedImage>>(p1, p2, p3); }
	static jni::ref<java::awt::image::DataBufferInt> getScaledIconData(jni::ref<java::util::List> p1, jint p2, jint p3) { return call_static_method<"getScaledIconData", jni::ref<java::awt::image::DataBufferInt>>(p1, p2, p3); }
	static jni::ref<java::awt::EventQueue> getSystemEventQueueImplPP(jni::ref<sun::awt::AppContext> p1) { return call_static_method<"getSystemEventQueueImplPP", jni::ref<java::awt::EventQueue>>(p1); }
	static jni::ref<java::awt::Container> getNativeContainer(jni::ref<java::awt::Component> p1) { return call_static_method<"getNativeContainer", jni::ref<java::awt::Container>>(p1); }
	static jni::ref<java::awt::Component> getHeavyweightComponent(jni::ref<java::awt::Component> p1) { return call_static_method<"getHeavyweightComponent", jni::ref<java::awt::Component>>(p1); }
	jint getFocusAcceleratorKeyMask() { return call_method<"getFocusAcceleratorKeyMask", jint>(); }
	jboolean isPrintableCharacterModifiersMask(jint p1) { return call_method<"isPrintableCharacterModifiersMask", jboolean>(p1); }
	jboolean canPopupOverlapTaskBar() { return call_method<"canPopupOverlapTaskBar", jboolean>(); }
	jni::ref<java::awt::Window> createInputMethodWindow(jni::ref<java::lang::String> p1, jni::ref<sun::awt::im::InputContext> p2) { return call_method<"createInputMethodWindow", jni::ref<java::awt::Window>>(p1, p2); }
	jboolean enableInputMethodsForTextComponent() { return call_method<"enableInputMethodsForTextComponent", jboolean>(); }
	static jni::ref<java::util::Locale> getStartupLocale() { return call_static_method<"getStartupLocale", jni::ref<java::util::Locale>>(); }
	jni::ref<java::util::Locale> getDefaultKeyboardLocale() { return call_method<"getDefaultKeyboardLocale", jni::ref<java::util::Locale>>(); }
	jni::ref<sun::awt::WindowClosingListener> getWindowClosingListener() { return call_method<"getWindowClosingListener", jni::ref<sun::awt::WindowClosingListener>>(); }
	void setWindowClosingListener(jni::ref<sun::awt::WindowClosingListener> p1) { return call_method<"setWindowClosingListener", void>(p1); }
	jni::ref<java::lang::RuntimeException> windowClosingNotify(jni::ref<java::awt::event::WindowEvent> p1) { return call_method<"windowClosingNotify", jni::ref<java::lang::RuntimeException>>(p1); }
	jni::ref<java::lang::RuntimeException> windowClosingDelivered(jni::ref<java::awt::event::WindowEvent> p1) { return call_method<"windowClosingDelivered", jni::ref<java::lang::RuntimeException>>(p1); }
	static jboolean needsXEmbed() { return call_static_method<"needsXEmbed", jboolean>(); }
	static jboolean isModalExcludedSupported() { return call_static_method<"isModalExcludedSupported", jboolean>(); }
	static void setModalExcluded(jni::ref<java::awt::Window> p1) { return call_static_method<"setModalExcluded", void>(p1); }
	static jboolean isModalExcluded(jni::ref<java::awt::Window> p1) { return call_static_method<"isModalExcluded", jboolean>(p1); }
	jboolean isModalityTypeSupported(jni::ref<java::awt::Dialog_ModalityType> p1) { return call_method<"isModalityTypeSupported", jboolean>(p1); }
	jboolean isModalExclusionTypeSupported(jni::ref<java::awt::Dialog_ModalExclusionType> p1) { return call_method<"isModalExclusionTypeSupported", jboolean>(p1); }
	void addModalityListener(jni::ref<sun::awt::ModalityListener> p1) { return call_method<"addModalityListener", void>(p1); }
	void removeModalityListener(jni::ref<sun::awt::ModalityListener> p1) { return call_method<"removeModalityListener", void>(p1); }
	void notifyModalityPushed(jni::ref<java::awt::Dialog> p1) { return call_method<"notifyModalityPushed", void>(p1); }
	void notifyModalityPopped(jni::ref<java::awt::Dialog> p1) { return call_method<"notifyModalityPopped", void>(p1); }
	static jboolean isLightweightOrUnknown(jni::ref<java::awt::Component> p1) { return call_static_method<"isLightweightOrUnknown", jboolean>(p1); }
	void realSync() { return call_method<"realSync", void>(); }
	void realSync(jlong p1) { return call_method<"realSync", void>(p1); }
	void grab(jni::ref<java::awt::Window> p1) { return call_method<"grab", void>(p1); }
	void ungrab(jni::ref<java::awt::Window> p1) { return call_method<"ungrab", void>(p1); }
	void showOrHideTouchKeyboard(jni::ref<java::awt::Component> p1, jni::ref<java::awt::AWTEvent> p2) { return call_method<"showOrHideTouchKeyboard", void>(p1, p2); }
	static jboolean isTouchKeyboardAutoShowEnabled() { return call_static_method<"isTouchKeyboardAutoShowEnabled", jboolean>(); }
	static void closeSplashScreen() { return call_static_method<"closeSplashScreen", void>(); }
	static void setAAFontSettingsCondition(jboolean p1) { return call_static_method<"setAAFontSettingsCondition", void>(p1); }
	static jni::ref<java::awt::RenderingHints> getDesktopFontHints() { return call_static_method<"getDesktopFontHints", jni::ref<java::awt::RenderingHints>>(); }
	jboolean isDesktopSupported() { return call_method<"isDesktopSupported", jboolean>(); }
	static void consumeNextKeyTyped(jni::ref<java::awt::event::KeyEvent> p1) { return call_static_method<"consumeNextKeyTyped", void>(p1); }
	static jni::ref<java::awt::Window> getContainingWindow(jni::ref<java::awt::Component> p1) { return call_static_method<"getContainingWindow", jni::ref<java::awt::Window>>(p1); }
	static jboolean getSunAwtDisableMixing() { return call_static_method<"getSunAwtDisableMixing", jboolean>(); }
	jboolean isNativeGTKAvailable() { return call_method<"isNativeGTKAvailable", jboolean>(); }
	void setWindowDeactivationTime(jni::ref<java::awt::Window> p1, jlong p2) { return call_method<"setWindowDeactivationTime", void>(p1, p2); }
	jlong getWindowDeactivationTime(jni::ref<java::awt::Window> p1) { return call_method<"getWindowDeactivationTime", jlong>(p1); }
	jboolean isWindowOpacitySupported() { return call_method<"isWindowOpacitySupported", jboolean>(); }
	jboolean isWindowShapingSupported() { return call_method<"isWindowShapingSupported", jboolean>(); }
	jboolean isWindowTranslucencySupported() { return call_method<"isWindowTranslucencySupported", jboolean>(); }
	jboolean isTranslucencyCapable(jni::ref<java::awt::GraphicsConfiguration> p1) { return call_method<"isTranslucencyCapable", jboolean>(p1); }
	jboolean isSwingBackbufferTranslucencySupported() { return call_method<"isSwingBackbufferTranslucencySupported", jboolean>(); }
	static jboolean isContainingTopLevelOpaque(jni::ref<java::awt::Component> p1) { return call_static_method<"isContainingTopLevelOpaque", jboolean>(p1); }
	static jboolean isContainingTopLevelTranslucent(jni::ref<java::awt::Component> p1) { return call_static_method<"isContainingTopLevelTranslucent", jboolean>(p1); }
	jboolean needUpdateWindow() { return call_method<"needUpdateWindow", jboolean>(); }
	jint getNumberOfButtons() { return call_method<"getNumberOfButtons", jint>(); }
	static jboolean isInstanceOf(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2) { return call_static_method<"isInstanceOf", jboolean>(p1, p2); }
	static void setSystemGenerated(jni::ref<java::awt::AWTEvent> p1) { return call_static_method<"setSystemGenerated", void>(p1); }
	static jboolean isSystemGenerated(jni::ref<java::awt::AWTEvent> p1) { return call_static_method<"isSystemGenerated", jboolean>(p1); }

protected:

	SunToolkit(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AWT_SUNTOOLKIT
