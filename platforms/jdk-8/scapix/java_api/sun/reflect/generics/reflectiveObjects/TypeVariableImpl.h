// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/reflect/generics/reflectiveObjects/LazyReflectiveObjectGenerator.h>
#include <scapix/java_api/java/lang/reflect/TypeVariable.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_TYPEVARIABLEIMPL_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_TYPEVARIABLEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect::generics::reflectiveObjects { class TypeVariableImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::generics::reflectiveObjects::TypeVariableImpl>
{
	static constexpr fixed_string class_name = "sun/reflect/generics/reflectiveObjects/TypeVariableImpl";
	using base_classes = std::tuple<scapix::java_api::sun::reflect::generics::reflectiveObjects::LazyReflectiveObjectGenerator, scapix::java_api::java::lang::reflect::TypeVariable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_TYPEVARIABLEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_TYPEVARIABLEIMPL)
#define SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_TYPEVARIABLEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedType.h>
#include <scapix/java_api/java/lang/reflect/GenericDeclaration.h>
#include <scapix/java_api/java/lang/reflect/Type.h>
#include <scapix/java_api/sun/reflect/generics/factory/GenericsFactory.h>
#include <scapix/java_api/sun/reflect/generics/tree/FieldTypeSignature.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::reflect::generics::reflectiveObjects::TypeVariableImpl : public jni::object_base<"sun/reflect/generics/reflectiveObjects/TypeVariableImpl",
	sun::reflect::generics::reflectiveObjects::LazyReflectiveObjectGenerator,
	java::lang::reflect::TypeVariable>
{
public:

	static jni::ref<sun::reflect::generics::reflectiveObjects::TypeVariableImpl> make(jni::ref<java::lang::reflect::GenericDeclaration> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<sun::reflect::generics::tree::FieldTypeSignature>> p3, jni::ref<sun::reflect::generics::factory::GenericsFactory> p4) { return call_static_method<"make", jni::ref<sun::reflect::generics::reflectiveObjects::TypeVariableImpl>>(p1, p2, p3, p4); }
	jni::ref<jni::array<java::lang::reflect::Type>> getBounds() { return call_method<"getBounds", jni::ref<jni::array<java::lang::reflect::Type>>>(); }
	jni::ref<java::lang::reflect::GenericDeclaration> getGenericDeclaration() { return call_method<"getGenericDeclaration", jni::ref<java::lang::reflect::GenericDeclaration>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::annotation::Annotation> getAnnotation(jni::ref<java::lang::Class> p1) { return call_method<"getAnnotation", jni::ref<java::lang::annotation::Annotation>>(p1); }
	jni::ref<java::lang::annotation::Annotation> getDeclaredAnnotation(jni::ref<java::lang::Class> p1) { return call_method<"getDeclaredAnnotation", jni::ref<java::lang::annotation::Annotation>>(p1); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getAnnotationsByType(jni::ref<java::lang::Class> p1) { return call_method<"getAnnotationsByType", jni::ref<jni::array<java::lang::annotation::Annotation>>>(p1); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getDeclaredAnnotationsByType(jni::ref<java::lang::Class> p1) { return call_method<"getDeclaredAnnotationsByType", jni::ref<jni::array<java::lang::annotation::Annotation>>>(p1); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getAnnotations() { return call_method<"getAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(); }
	jni::ref<jni::array<java::lang::annotation::Annotation>> getDeclaredAnnotations() { return call_method<"getDeclaredAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(); }
	jni::ref<jni::array<java::lang::reflect::AnnotatedType>> getAnnotatedBounds() { return call_method<"getAnnotatedBounds", jni::ref<jni::array<java::lang::reflect::AnnotatedType>>>(); }

protected:

	TypeVariableImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_REFLECTIVEOBJECTS_TYPEVARIABLEIMPL
