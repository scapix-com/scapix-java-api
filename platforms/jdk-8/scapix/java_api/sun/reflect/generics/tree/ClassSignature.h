// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/reflect/generics/tree/Signature.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_TREE_CLASSSIGNATURE_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_TREE_CLASSSIGNATURE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect::generics::tree { class ClassSignature; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::generics::tree::ClassSignature>
{
	static constexpr fixed_string class_name = "sun/reflect/generics/tree/ClassSignature";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::reflect::generics::tree::Signature>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_TREE_CLASSSIGNATURE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_TREE_CLASSSIGNATURE)
#define SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_TREE_CLASSSIGNATURE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/reflect/generics/tree/ClassTypeSignature.h>
#include <scapix/java_api/sun/reflect/generics/tree/FormalTypeParameter.h>
#include <scapix/java_api/sun/reflect/generics/visitor/Visitor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::reflect::generics::tree::ClassSignature : public jni::object_base<"sun/reflect/generics/tree/ClassSignature",
	java::lang::Object,
	sun::reflect::generics::tree::Signature>
{
public:

	static jni::ref<sun::reflect::generics::tree::ClassSignature> make(jni::ref<jni::array<sun::reflect::generics::tree::FormalTypeParameter>> p1, jni::ref<sun::reflect::generics::tree::ClassTypeSignature> p2, jni::ref<jni::array<sun::reflect::generics::tree::ClassTypeSignature>> p3) { return call_static_method<"make", jni::ref<sun::reflect::generics::tree::ClassSignature>>(p1, p2, p3); }
	jni::ref<jni::array<sun::reflect::generics::tree::FormalTypeParameter>> getFormalTypeParameters() { return call_method<"getFormalTypeParameters", jni::ref<jni::array<sun::reflect::generics::tree::FormalTypeParameter>>>(); }
	jni::ref<sun::reflect::generics::tree::ClassTypeSignature> getSuperclass() { return call_method<"getSuperclass", jni::ref<sun::reflect::generics::tree::ClassTypeSignature>>(); }
	jni::ref<jni::array<sun::reflect::generics::tree::ClassTypeSignature>> getSuperInterfaces() { return call_method<"getSuperInterfaces", jni::ref<jni::array<sun::reflect::generics::tree::ClassTypeSignature>>>(); }
	void accept(jni::ref<sun::reflect::generics::visitor::Visitor> p1) { return call_method<"accept", void>(p1); }

protected:

	ClassSignature(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_GENERICS_TREE_CLASSSIGNATURE
