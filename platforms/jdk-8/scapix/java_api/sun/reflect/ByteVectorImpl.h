// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/reflect/ByteVector.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_BYTEVECTORIMPL_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_BYTEVECTORIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect { class ByteVectorImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::ByteVectorImpl>
{
	static constexpr fixed_string class_name = "sun/reflect/ByteVectorImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::reflect::ByteVector>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_BYTEVECTORIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_BYTEVECTORIMPL)
#define SCAPIX_JAVA_API_SUN_REFLECT_BYTEVECTORIMPL

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::reflect::ByteVectorImpl : public jni::object_base<"sun/reflect/ByteVectorImpl",
	java::lang::Object,
	sun::reflect::ByteVector>
{
public:

	static jni::ref<sun::reflect::ByteVectorImpl> new_object() { return base_::new_object(); }
	static jni::ref<sun::reflect::ByteVectorImpl> new_object(jint p1) { return base_::new_object(p1); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jbyte get(jint p1) { return call_method<"get", jbyte>(p1); }
	void put(jint p1, jbyte p2) { return call_method<"put", void>(p1, p2); }
	void add(jbyte p1) { return call_method<"add", void>(p1); }
	void trim() { return call_method<"trim", void>(); }
	jni::ref<jni::array<jbyte>> getData() { return call_method<"getData", jni::ref<jni::array<jbyte>>>(); }

protected:

	ByteVectorImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_BYTEVECTORIMPL
