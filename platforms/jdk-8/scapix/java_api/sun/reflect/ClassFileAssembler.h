// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/reflect/ClassFileConstants.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_CLASSFILEASSEMBLER_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_CLASSFILEASSEMBLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect { class ClassFileAssembler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::ClassFileAssembler>
{
	static constexpr fixed_string class_name = "sun/reflect/ClassFileAssembler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::reflect::ClassFileConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_CLASSFILEASSEMBLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_CLASSFILEASSEMBLER)
#define SCAPIX_JAVA_API_SUN_REFLECT_CLASSFILEASSEMBLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/sun/reflect/ByteVector.h>
#include <scapix/java_api/sun/reflect/Label.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::reflect::ClassFileAssembler : public jni::object_base<"sun/reflect/ClassFileAssembler",
	java::lang::Object,
	sun::reflect::ClassFileConstants>
{
public:

	static jni::ref<sun::reflect::ClassFileAssembler> new_object() { return base_::new_object(); }
	static jni::ref<sun::reflect::ClassFileAssembler> new_object(jni::ref<sun::reflect::ByteVector> p1) { return base_::new_object(p1); }
	jni::ref<sun::reflect::ByteVector> getData() { return call_method<"getData", jni::ref<sun::reflect::ByteVector>>(); }
	jshort getLength() { return call_method<"getLength", jshort>(); }
	void emitMagicAndVersion() { return call_method<"emitMagicAndVersion", void>(); }
	void emitInt(jint p1) { return call_method<"emitInt", void>(p1); }
	void emitShort(jshort p1) { return call_method<"emitShort", void>(p1); }
	void emitByte(jbyte p1) { return call_method<"emitByte", void>(p1); }
	void append(jni::ref<sun::reflect::ClassFileAssembler> p1) { return call_method<"append", void>(p1); }
	void append(jni::ref<sun::reflect::ByteVector> p1) { return call_method<"append", void>(p1); }
	jshort cpi() { return call_method<"cpi", jshort>(); }
	void emitConstantPoolUTF8(jni::ref<java::lang::String> p1) { return call_method<"emitConstantPoolUTF8", void>(p1); }
	void emitConstantPoolClass(jshort p1) { return call_method<"emitConstantPoolClass", void>(p1); }
	void emitConstantPoolNameAndType(jshort p1, jshort p2) { return call_method<"emitConstantPoolNameAndType", void>(p1, p2); }
	void emitConstantPoolFieldref(jshort p1, jshort p2) { return call_method<"emitConstantPoolFieldref", void>(p1, p2); }
	void emitConstantPoolMethodref(jshort p1, jshort p2) { return call_method<"emitConstantPoolMethodref", void>(p1, p2); }
	void emitConstantPoolInterfaceMethodref(jshort p1, jshort p2) { return call_method<"emitConstantPoolInterfaceMethodref", void>(p1, p2); }
	void emitConstantPoolString(jshort p1) { return call_method<"emitConstantPoolString", void>(p1); }
	jshort getMaxStack() { return call_method<"getMaxStack", jshort>(); }
	jshort getMaxLocals() { return call_method<"getMaxLocals", jshort>(); }
	void setMaxLocals(jint p1) { return call_method<"setMaxLocals", void>(p1); }
	jint getStack() { return call_method<"getStack", jint>(); }
	void setStack(jint p1) { return call_method<"setStack", void>(p1); }
	void opc_aconst_null() { return call_method<"opc_aconst_null", void>(); }
	void opc_sipush(jshort p1) { return call_method<"opc_sipush", void>(p1); }
	void opc_ldc(jbyte p1) { return call_method<"opc_ldc", void>(p1); }
	void opc_iload_0() { return call_method<"opc_iload_0", void>(); }
	void opc_iload_1() { return call_method<"opc_iload_1", void>(); }
	void opc_iload_2() { return call_method<"opc_iload_2", void>(); }
	void opc_iload_3() { return call_method<"opc_iload_3", void>(); }
	void opc_lload_0() { return call_method<"opc_lload_0", void>(); }
	void opc_lload_1() { return call_method<"opc_lload_1", void>(); }
	void opc_lload_2() { return call_method<"opc_lload_2", void>(); }
	void opc_lload_3() { return call_method<"opc_lload_3", void>(); }
	void opc_fload_0() { return call_method<"opc_fload_0", void>(); }
	void opc_fload_1() { return call_method<"opc_fload_1", void>(); }
	void opc_fload_2() { return call_method<"opc_fload_2", void>(); }
	void opc_fload_3() { return call_method<"opc_fload_3", void>(); }
	void opc_dload_0() { return call_method<"opc_dload_0", void>(); }
	void opc_dload_1() { return call_method<"opc_dload_1", void>(); }
	void opc_dload_2() { return call_method<"opc_dload_2", void>(); }
	void opc_dload_3() { return call_method<"opc_dload_3", void>(); }
	void opc_aload_0() { return call_method<"opc_aload_0", void>(); }
	void opc_aload_1() { return call_method<"opc_aload_1", void>(); }
	void opc_aload_2() { return call_method<"opc_aload_2", void>(); }
	void opc_aload_3() { return call_method<"opc_aload_3", void>(); }
	void opc_aaload() { return call_method<"opc_aaload", void>(); }
	void opc_astore_0() { return call_method<"opc_astore_0", void>(); }
	void opc_astore_1() { return call_method<"opc_astore_1", void>(); }
	void opc_astore_2() { return call_method<"opc_astore_2", void>(); }
	void opc_astore_3() { return call_method<"opc_astore_3", void>(); }
	void opc_pop() { return call_method<"opc_pop", void>(); }
	void opc_dup() { return call_method<"opc_dup", void>(); }
	void opc_dup_x1() { return call_method<"opc_dup_x1", void>(); }
	void opc_swap() { return call_method<"opc_swap", void>(); }
	void opc_i2l() { return call_method<"opc_i2l", void>(); }
	void opc_i2f() { return call_method<"opc_i2f", void>(); }
	void opc_i2d() { return call_method<"opc_i2d", void>(); }
	void opc_l2f() { return call_method<"opc_l2f", void>(); }
	void opc_l2d() { return call_method<"opc_l2d", void>(); }
	void opc_f2d() { return call_method<"opc_f2d", void>(); }
	void opc_ifeq(jshort p1) { return call_method<"opc_ifeq", void>(p1); }
	void opc_ifeq(jni::ref<sun::reflect::Label> p1) { return call_method<"opc_ifeq", void>(p1); }
	void opc_if_icmpeq(jshort p1) { return call_method<"opc_if_icmpeq", void>(p1); }
	void opc_if_icmpeq(jni::ref<sun::reflect::Label> p1) { return call_method<"opc_if_icmpeq", void>(p1); }
	void opc_goto(jshort p1) { return call_method<"opc_goto", void>(p1); }
	void opc_goto(jni::ref<sun::reflect::Label> p1) { return call_method<"opc_goto", void>(p1); }
	void opc_ifnull(jshort p1) { return call_method<"opc_ifnull", void>(p1); }
	void opc_ifnull(jni::ref<sun::reflect::Label> p1) { return call_method<"opc_ifnull", void>(p1); }
	void opc_ifnonnull(jshort p1) { return call_method<"opc_ifnonnull", void>(p1); }
	void opc_ifnonnull(jni::ref<sun::reflect::Label> p1) { return call_method<"opc_ifnonnull", void>(p1); }
	void opc_ireturn() { return call_method<"opc_ireturn", void>(); }
	void opc_lreturn() { return call_method<"opc_lreturn", void>(); }
	void opc_freturn() { return call_method<"opc_freturn", void>(); }
	void opc_dreturn() { return call_method<"opc_dreturn", void>(); }
	void opc_areturn() { return call_method<"opc_areturn", void>(); }
	void opc_return() { return call_method<"opc_return", void>(); }
	void opc_getstatic(jshort p1, jint p2) { return call_method<"opc_getstatic", void>(p1, p2); }
	void opc_putstatic(jshort p1, jint p2) { return call_method<"opc_putstatic", void>(p1, p2); }
	void opc_getfield(jshort p1, jint p2) { return call_method<"opc_getfield", void>(p1, p2); }
	void opc_putfield(jshort p1, jint p2) { return call_method<"opc_putfield", void>(p1, p2); }
	void opc_invokevirtual(jshort p1, jint p2, jint p3) { return call_method<"opc_invokevirtual", void>(p1, p2, p3); }
	void opc_invokespecial(jshort p1, jint p2, jint p3) { return call_method<"opc_invokespecial", void>(p1, p2, p3); }
	void opc_invokestatic(jshort p1, jint p2, jint p3) { return call_method<"opc_invokestatic", void>(p1, p2, p3); }
	void opc_invokeinterface(jshort p1, jint p2, jbyte p3, jint p4) { return call_method<"opc_invokeinterface", void>(p1, p2, p3, p4); }
	void opc_arraylength() { return call_method<"opc_arraylength", void>(); }
	void opc_new(jshort p1) { return call_method<"opc_new", void>(p1); }
	void opc_athrow() { return call_method<"opc_athrow", void>(); }
	void opc_checkcast(jshort p1) { return call_method<"opc_checkcast", void>(p1); }
	void opc_instanceof(jshort p1) { return call_method<"opc_instanceof", void>(p1); }

protected:

	ClassFileAssembler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_CLASSFILEASSEMBLER
