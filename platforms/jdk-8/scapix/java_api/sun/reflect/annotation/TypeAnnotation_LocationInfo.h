// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_LOCATIONINFO_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_LOCATIONINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect::annotation { class TypeAnnotation_LocationInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::annotation::TypeAnnotation_LocationInfo>
{
	static constexpr fixed_string class_name = "sun/reflect/annotation/TypeAnnotation$LocationInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_LOCATIONINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_LOCATIONINFO)
#define SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_LOCATIONINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/sun/reflect/annotation/TypeAnnotation.h>
#include <scapix/java_api/sun/reflect/annotation/TypeAnnotation_LocationInfo_Location.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::reflect::annotation::TypeAnnotation_LocationInfo : public jni::object_base<"sun/reflect/annotation/TypeAnnotation$LocationInfo",
	java::lang::Object>
{
public:

	using Location = TypeAnnotation_LocationInfo_Location;

	static jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo> BASE_LOCATION() { return get_static_field<"BASE_LOCATION", jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo>>(); }

	static jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo> parseLocationInfo(jni::ref<java::nio::ByteBuffer> p1) { return call_static_method<"parseLocationInfo", jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo>>(p1); }
	jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo> pushArray() { return call_method<"pushArray", jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo>>(); }
	jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo> pushInner() { return call_method<"pushInner", jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo>>(); }
	jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo> pushWildcard() { return call_method<"pushWildcard", jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo>>(); }
	jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo> pushTypeArg(jshort p1) { return call_method<"pushTypeArg", jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo>>(p1); }
	jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo> pushLocation(jbyte p1, jshort p2) { return call_method<"pushLocation", jni::ref<sun::reflect::annotation::TypeAnnotation_LocationInfo>>(p1, p2); }
	jni::ref<jni::array<sun::reflect::annotation::TypeAnnotation>> filter(jni::ref<jni::array<sun::reflect::annotation::TypeAnnotation>> p1) { return call_method<"filter", jni::ref<jni::array<sun::reflect::annotation::TypeAnnotation>>>(p1); }

protected:

	TypeAnnotation_LocationInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATION_LOCATIONINFO
