// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATIONPARSER_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATIONPARSER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect::annotation { class TypeAnnotationParser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::annotation::TypeAnnotationParser>
{
	static constexpr fixed_string class_name = "sun/reflect/annotation/TypeAnnotationParser";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATIONPARSER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATIONPARSER)
#define SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATIONPARSER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedElement.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedType.h>
#include <scapix/java_api/java/lang/reflect/GenericDeclaration.h>
#include <scapix/java_api/java/lang/reflect/Type.h>
#include <scapix/java_api/sun/reflect/ConstantPool.h>
#include <scapix/java_api/sun/reflect/annotation/TypeAnnotation_TypeAnnotationTarget.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::reflect::annotation::TypeAnnotationParser : public jni::object_base<"sun/reflect/annotation/TypeAnnotationParser",
	java::lang::Object>
{
public:

	static jni::ref<sun::reflect::annotation::TypeAnnotationParser> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::reflect::AnnotatedType> buildAnnotatedType(jni::ref<jni::array<jbyte>> p1, jni::ref<sun::reflect::ConstantPool> p2, jni::ref<java::lang::reflect::AnnotatedElement> p3, jni::ref<java::lang::Class> p4, jni::ref<java::lang::reflect::Type> p5, jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> p6) { return call_static_method<"buildAnnotatedType", jni::ref<java::lang::reflect::AnnotatedType>>(p1, p2, p3, p4, p5, p6); }
	static jni::ref<jni::array<java::lang::reflect::AnnotatedType>> buildAnnotatedTypes(jni::ref<jni::array<jbyte>> p1, jni::ref<sun::reflect::ConstantPool> p2, jni::ref<java::lang::reflect::AnnotatedElement> p3, jni::ref<java::lang::Class> p4, jni::ref<jni::array<java::lang::reflect::Type>> p5, jni::ref<sun::reflect::annotation::TypeAnnotation_TypeAnnotationTarget> p6) { return call_static_method<"buildAnnotatedTypes", jni::ref<jni::array<java::lang::reflect::AnnotatedType>>>(p1, p2, p3, p4, p5, p6); }
	static jni::ref<java::lang::reflect::AnnotatedType> buildAnnotatedSuperclass(jni::ref<jni::array<jbyte>> p1, jni::ref<sun::reflect::ConstantPool> p2, jni::ref<java::lang::Class> p3) { return call_static_method<"buildAnnotatedSuperclass", jni::ref<java::lang::reflect::AnnotatedType>>(p1, p2, p3); }
	static jni::ref<jni::array<java::lang::reflect::AnnotatedType>> buildAnnotatedInterfaces(jni::ref<jni::array<jbyte>> p1, jni::ref<sun::reflect::ConstantPool> p2, jni::ref<java::lang::Class> p3) { return call_static_method<"buildAnnotatedInterfaces", jni::ref<jni::array<java::lang::reflect::AnnotatedType>>>(p1, p2, p3); }
	static jni::ref<jni::array<java::lang::annotation::Annotation>> parseTypeVariableAnnotations(jni::ref<java::lang::reflect::GenericDeclaration> p1, jint p2) { return call_static_method<"parseTypeVariableAnnotations", jni::ref<jni::array<java::lang::annotation::Annotation>>>(p1, p2); }
	static jni::ref<jni::array<java::lang::reflect::AnnotatedType>> parseAnnotatedBounds(jni::ref<jni::array<java::lang::reflect::Type>> p1, jni::ref<java::lang::reflect::GenericDeclaration> p2, jint p3) { return call_static_method<"parseAnnotatedBounds", jni::ref<jni::array<java::lang::reflect::AnnotatedType>>>(p1, p2, p3); }

protected:

	TypeAnnotationParser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_ANNOTATION_TYPEANNOTATIONPARSER
