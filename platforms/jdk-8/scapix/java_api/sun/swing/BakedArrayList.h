// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/ArrayList.h>

#ifndef SCAPIX_JAVA_API_SUN_SWING_BAKEDARRAYLIST_FWD
#define SCAPIX_JAVA_API_SUN_SWING_BAKEDARRAYLIST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::swing { class BakedArrayList; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::swing::BakedArrayList>
{
	static constexpr fixed_string class_name = "sun/swing/BakedArrayList";
	using base_classes = std::tuple<scapix::java_api::java::util::ArrayList>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_BAKEDARRAYLIST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SWING_BAKEDARRAYLIST)
#define SCAPIX_JAVA_API_SUN_SWING_BAKEDARRAYLIST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::swing::BakedArrayList : public jni::object_base<"sun/swing/BakedArrayList",
	java::util::ArrayList>
{
public:

	static jni::ref<sun::swing::BakedArrayList> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<sun::swing::BakedArrayList> new_object(jni::ref<java::util::List> p1) { return base_::new_object(p1); }
	void cacheHashCode() { return call_method<"cacheHashCode", void>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	BakedArrayList(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_BAKEDARRAYLIST
