// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SWING_SWINGACCESSOR_FWD
#define SCAPIX_JAVA_API_SUN_SWING_SWINGACCESSOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::swing { class SwingAccessor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::swing::SwingAccessor>
{
	static constexpr fixed_string class_name = "sun/swing/SwingAccessor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_SWINGACCESSOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SWING_SWINGACCESSOR)
#define SCAPIX_JAVA_API_SUN_SWING_SWINGACCESSOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/sun/swing/SwingAccessor_JLightweightFrameAccessor.h>
#include <scapix/java_api/sun/swing/SwingAccessor_JTextComponentAccessor.h>
#include <scapix/java_api/sun/swing/SwingAccessor_PopupFactoryAccessor.h>
#include <scapix/java_api/sun/swing/SwingAccessor_RepaintManagerAccessor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::swing::SwingAccessor : public jni::object_base<"sun/swing/SwingAccessor",
	java::lang::Object>
{
public:

	using JTextComponentAccessor = SwingAccessor_JTextComponentAccessor;
	using JLightweightFrameAccessor = SwingAccessor_JLightweightFrameAccessor;
	using RepaintManagerAccessor = SwingAccessor_RepaintManagerAccessor;
	using PopupFactoryAccessor = SwingAccessor_PopupFactoryAccessor;

	static void setJTextComponentAccessor(jni::ref<sun::swing::SwingAccessor_JTextComponentAccessor> p1) { return call_static_method<"setJTextComponentAccessor", void>(p1); }
	static jni::ref<sun::swing::SwingAccessor_JTextComponentAccessor> getJTextComponentAccessor() { return call_static_method<"getJTextComponentAccessor", jni::ref<sun::swing::SwingAccessor_JTextComponentAccessor>>(); }
	static void setJLightweightFrameAccessor(jni::ref<sun::swing::SwingAccessor_JLightweightFrameAccessor> p1) { return call_static_method<"setJLightweightFrameAccessor", void>(p1); }
	static jni::ref<sun::swing::SwingAccessor_JLightweightFrameAccessor> getJLightweightFrameAccessor() { return call_static_method<"getJLightweightFrameAccessor", jni::ref<sun::swing::SwingAccessor_JLightweightFrameAccessor>>(); }
	static void setRepaintManagerAccessor(jni::ref<sun::swing::SwingAccessor_RepaintManagerAccessor> p1) { return call_static_method<"setRepaintManagerAccessor", void>(p1); }
	static jni::ref<sun::swing::SwingAccessor_RepaintManagerAccessor> getRepaintManagerAccessor() { return call_static_method<"getRepaintManagerAccessor", jni::ref<sun::swing::SwingAccessor_RepaintManagerAccessor>>(); }
	static jni::ref<sun::swing::SwingAccessor_PopupFactoryAccessor> getPopupFactoryAccessor() { return call_static_method<"getPopupFactoryAccessor", jni::ref<sun::swing::SwingAccessor_PopupFactoryAccessor>>(); }
	static void setPopupFactoryAccessor(jni::ref<sun::swing::SwingAccessor_PopupFactoryAccessor> p1) { return call_static_method<"setPopupFactoryAccessor", void>(p1); }
	static jni::ref<java::lang::Boolean> getAllowHTMLObject() { return call_static_method<"getAllowHTMLObject", jni::ref<java::lang::Boolean>>(); }
	static void setAllowHTMLObject(jni::ref<java::lang::Boolean> p1) { return call_static_method<"setAllowHTMLObject", void>(p1); }

protected:

	SwingAccessor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_SWINGACCESSOR
