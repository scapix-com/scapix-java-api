// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SWING_CACHEDPAINTER_FWD
#define SCAPIX_JAVA_API_SUN_SWING_CACHEDPAINTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::swing { class CachedPainter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::swing::CachedPainter>
{
	static constexpr fixed_string class_name = "sun/swing/CachedPainter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_CACHEDPAINTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SWING_CACHEDPAINTER)
#define SCAPIX_JAVA_API_SUN_SWING_CACHEDPAINTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Graphics.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::swing::CachedPainter : public jni::object_base<"sun/swing/CachedPainter",
	java::lang::Object>
{
public:

	static jni::ref<sun::swing::CachedPainter> new_object(jint p1) { return base_::new_object(p1); }
	void paint(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Graphics> p2, jint p3, jint p4, jint p5, jint p6, jni::ref<jni::array<java::lang::Object>> p7) { return call_method<"paint", void>(p1, p2, p3, p4, p5, p6, p7); }

protected:

	CachedPainter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_CACHEDPAINTER
