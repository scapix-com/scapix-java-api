// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SWING_SWINGUTILITIES2_FWD
#define SCAPIX_JAVA_API_SUN_SWING_SWINGUTILITIES2_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::swing { class SwingUtilities2; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::swing::SwingUtilities2>
{
	static constexpr fixed_string class_name = "sun/swing/SwingUtilities2";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_SWINGUTILITIES2_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SWING_SWINGUTILITIES2)
#define SCAPIX_JAVA_API_SUN_SWING_SWINGUTILITIES2

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/AWTEvent.h>
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/FontMetrics.h>
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/awt/Graphics2D.h>
#include <scapix/java_api/java/awt/Point.h>
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/event/MouseEvent.h>
#include <scapix/java_api/java/awt/font/FontRenderContext.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/concurrent/Callable.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/JList.h>
#include <scapix/java_api/javax/swing/JTable.h>
#include <scapix/java_api/javax/swing/ListSelectionModel.h>
#include <scapix/java_api/javax/swing/event/TreeModelEvent.h>
#include <scapix/java_api/javax/swing/table/TableColumnModel.h>
#include <scapix/java_api/javax/swing/text/Highlighter_Highlight.h>
#include <scapix/java_api/javax/swing/text/JTextComponent.h>
#include <scapix/java_api/javax/swing/tree/TreeModel.h>
#include <scapix/java_api/javax/swing/tree/TreePath.h>
#include <scapix/java_api/sun/swing/StringUIClientPropertyKey.h>
#include <scapix/java_api/sun/swing/SwingUtilities2_AATextInfo.h>
#include <scapix/java_api/sun/swing/SwingUtilities2_Section.h>
#include <scapix/java_api/sun/swing/SwingUtilities2_RepaintListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::swing::SwingUtilities2 : public jni::object_base<"sun/swing/SwingUtilities2",
	java::lang::Object>
{
public:

	using AATextInfo = SwingUtilities2_AATextInfo;
	using Section = SwingUtilities2_Section;
	using RepaintListener = SwingUtilities2_RepaintListener;

	static jni::ref<java::lang::Object> LAF_STATE_KEY() { return get_static_field<"LAF_STATE_KEY", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::Object> MENU_SELECTION_MANAGER_LISTENER_KEY() { return get_static_field<"MENU_SELECTION_MANAGER_LISTENER_KEY", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::awt::font::FontRenderContext> DEFAULT_FRC() { return get_static_field<"DEFAULT_FRC", jni::ref<java::awt::font::FontRenderContext>>(); }
	static jni::ref<java::lang::Object> AA_TEXT_PROPERTY_KEY() { return get_static_field<"AA_TEXT_PROPERTY_KEY", jni::ref<java::lang::Object>>(); }
	static jni::ref<java::lang::String> IMPLIED_CR() { return get_static_field<"IMPLIED_CR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::Object> COMPONENT_UI_PROPERTY_KEY() { return get_static_field<"COMPONENT_UI_PROPERTY_KEY", jni::ref<java::lang::Object>>(); }
	static jni::ref<sun::swing::StringUIClientPropertyKey> BASICMENUITEMUI_MAX_TEXT_OFFSET() { return get_static_field<"BASICMENUITEMUI_MAX_TEXT_OFFSET", jni::ref<sun::swing::StringUIClientPropertyKey>>(); }

	static jni::ref<sun::swing::SwingUtilities2> new_object() { return base_::new_object(); }
	static jboolean isComplexLayout(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_static_method<"isComplexLayout", jboolean>(p1, p2, p3); }
	static jni::ref<sun::swing::SwingUtilities2_AATextInfo> drawTextAntialiased(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"drawTextAntialiased", jni::ref<sun::swing::SwingUtilities2_AATextInfo>>(p1); }
	static jint getLeftSideBearing(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::FontMetrics> p2, jni::ref<java::lang::String> p3) { return call_static_method<"getLeftSideBearing", jint>(p1, p2, p3); }
	static jint getLeftSideBearing(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::FontMetrics> p2, jchar p3) { return call_static_method<"getLeftSideBearing", jint>(p1, p2, p3); }
	static jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::Graphics> p2) { return call_static_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1, p2); }
	static jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::Graphics> p2, jni::ref<java::awt::Font> p3) { return call_static_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1, p2, p3); }
	static jint stringWidth(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::FontMetrics> p2, jni::ref<java::lang::String> p3) { return call_static_method<"stringWidth", jint>(p1, p2, p3); }
	static jni::ref<java::lang::String> clipStringIfNecessary(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::FontMetrics> p2, jni::ref<java::lang::String> p3, jint p4) { return call_static_method<"clipStringIfNecessary", jni::ref<java::lang::String>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> clipString(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::FontMetrics> p2, jni::ref<java::lang::String> p3, jint p4) { return call_static_method<"clipString", jni::ref<java::lang::String>>(p1, p2, p3, p4); }
	static void drawString(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::Graphics> p2, jni::ref<java::lang::String> p3, jint p4, jint p5) { return call_static_method<"drawString", void>(p1, p2, p3, p4, p5); }
	static void drawStringUnderlineCharAt(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::Graphics> p2, jni::ref<java::lang::String> p3, jint p4, jint p5, jint p6) { return call_static_method<"drawStringUnderlineCharAt", void>(p1, p2, p3, p4, p5, p6); }
	static jint loc2IndexFileList(jni::ref<javax::swing::JList> p1, jni::ref<java::awt::Point> p2) { return call_static_method<"loc2IndexFileList", jint>(p1, p2); }
	static jboolean pointOutsidePrefSize(jni::ref<javax::swing::JTable> p1, jint p2, jint p3, jni::ref<java::awt::Point> p4) { return call_static_method<"pointOutsidePrefSize", jboolean>(p1, p2, p3, p4); }
	static void setLeadAnchorWithoutSelection(jni::ref<javax::swing::ListSelectionModel> p1, jint p2, jint p3) { return call_static_method<"setLeadAnchorWithoutSelection", void>(p1, p2, p3); }
	static jboolean shouldIgnore(jni::ref<java::awt::event::MouseEvent> p1, jni::ref<javax::swing::JComponent> p2) { return call_static_method<"shouldIgnore", jboolean>(p1, p2); }
	static void adjustFocus(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"adjustFocus", void>(p1); }
	static jint drawChars(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::Graphics> p2, jni::ref<jni::array<jchar>> p3, jint p4, jint p5, jint p6, jint p7) { return call_static_method<"drawChars", jint>(p1, p2, p3, p4, p5, p6, p7); }
	static jfloat drawString(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::Graphics> p2, jni::ref<java::text::AttributedCharacterIterator> p3, jint p4, jint p5) { return call_static_method<"drawString", jfloat>(p1, p2, p3, p4, p5); }
	static void drawVLine(jni::ref<java::awt::Graphics> p1, jint p2, jint p3, jint p4) { return call_static_method<"drawVLine", void>(p1, p2, p3, p4); }
	static void drawHLine(jni::ref<java::awt::Graphics> p1, jint p2, jint p3, jint p4) { return call_static_method<"drawHLine", void>(p1, p2, p3, p4); }
	static void drawRect(jni::ref<java::awt::Graphics> p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"drawRect", void>(p1, p2, p3, p4, p5); }
	static jni::ref<java::awt::Graphics2D> getGraphics2D(jni::ref<java::awt::Graphics> p1) { return call_static_method<"getGraphics2D", jni::ref<java::awt::Graphics2D>>(p1); }
	static jni::ref<java::awt::font::FontRenderContext> getFontRenderContext(jni::ref<java::awt::Component> p1) { return call_static_method<"getFontRenderContext", jni::ref<java::awt::font::FontRenderContext>>(p1); }
	static jni::ref<java::awt::FontMetrics> getFontMetrics(jni::ref<javax::swing::JComponent> p1, jni::ref<java::awt::Font> p2) { return call_static_method<"getFontMetrics", jni::ref<java::awt::FontMetrics>>(p1, p2); }
	static jboolean useSelectedTextColor(jni::ref<javax::swing::text::Highlighter_Highlight> p1, jni::ref<javax::swing::text::JTextComponent> p2) { return call_static_method<"useSelectedTextColor", jboolean>(p1, p2); }
	static jboolean canAccessSystemClipboard() { return call_static_method<"canAccessSystemClipboard", jboolean>(); }
	static jboolean canCurrentEventAccessSystemClipboard() { return call_static_method<"canCurrentEventAccessSystemClipboard", jboolean>(); }
	static jboolean canEventAccessSystemClipboard(jni::ref<java::awt::AWTEvent> p1) { return call_static_method<"canEventAccessSystemClipboard", jboolean>(p1); }
	static void checkAccess(jint p1) { return call_static_method<"checkAccess", void>(p1); }
	static jni::ref<java::lang::String> displayPropertiesToCSS(jni::ref<java::awt::Font> p1, jni::ref<java::awt::Color> p2) { return call_static_method<"displayPropertiesToCSS", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::Object> makeIcon(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Class> p2, jni::ref<java::lang::String> p3) { return call_static_method<"makeIcon", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jboolean isLocalDisplay() { return call_static_method<"isLocalDisplay", jboolean>(); }
	static jint getUIDefaultsInt(jni::ref<java::lang::Object> p1) { return call_static_method<"getUIDefaultsInt", jint>(p1); }
	static jint getUIDefaultsInt(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2) { return call_static_method<"getUIDefaultsInt", jint>(p1, p2); }
	static jint getUIDefaultsInt(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getUIDefaultsInt", jint>(p1, p2); }
	static jint getUIDefaultsInt(jni::ref<java::lang::Object> p1, jni::ref<java::util::Locale> p2, jint p3) { return call_static_method<"getUIDefaultsInt", jint>(p1, p2, p3); }
	static jni::ref<java::awt::Component> compositeRequestFocus(jni::ref<java::awt::Component> p1) { return call_static_method<"compositeRequestFocus", jni::ref<java::awt::Component>>(p1); }
	static jboolean tabbedPaneChangeFocusTo(jni::ref<java::awt::Component> p1) { return call_static_method<"tabbedPaneChangeFocusTo", jboolean>(p1); }
	static jni::ref<java::util::concurrent::Future> submit(jni::ref<java::util::concurrent::Callable> p1) { return call_static_method<"submit", jni::ref<java::util::concurrent::Future>>(p1); }
	static jni::ref<java::util::concurrent::Future> submit(jni::ref<java::lang::Runnable> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"submit", jni::ref<java::util::concurrent::Future>>(p1, p2); }
	static void setSkipClickCount(jni::ref<java::awt::Component> p1, jint p2) { return call_static_method<"setSkipClickCount", void>(p1, p2); }
	static jint getAdjustedClickCount(jni::ref<javax::swing::text::JTextComponent> p1, jni::ref<java::awt::event::MouseEvent> p2) { return call_static_method<"getAdjustedClickCount", jint>(p1, p2); }
	static jni::ref<sun::swing::SwingUtilities2_Section> liesInHorizontal(jni::ref<java::awt::Rectangle> p1, jni::ref<java::awt::Point> p2, jboolean p3, jboolean p4) { return call_static_method<"liesInHorizontal", jni::ref<sun::swing::SwingUtilities2_Section>>(p1, p2, p3, p4); }
	static jni::ref<sun::swing::SwingUtilities2_Section> liesInVertical(jni::ref<java::awt::Rectangle> p1, jni::ref<java::awt::Point> p2, jboolean p3) { return call_static_method<"liesInVertical", jni::ref<sun::swing::SwingUtilities2_Section>>(p1, p2, p3); }
	static jint convertColumnIndexToModel(jni::ref<javax::swing::table::TableColumnModel> p1, jint p2) { return call_static_method<"convertColumnIndexToModel", jint>(p1, p2); }
	static jint convertColumnIndexToView(jni::ref<javax::swing::table::TableColumnModel> p1, jint p2) { return call_static_method<"convertColumnIndexToView", jint>(p1, p2); }
	static jint setAltGraphMask(jint p1) { return call_static_method<"setAltGraphMask", jint>(p1); }
	static jint getSystemMnemonicKeyMask() { return call_static_method<"getSystemMnemonicKeyMask", jint>(); }
	static jni::ref<javax::swing::tree::TreePath> getTreePath(jni::ref<javax::swing::event::TreeModelEvent> p1, jni::ref<javax::swing::tree::TreeModel> p2) { return call_static_method<"getTreePath", jni::ref<javax::swing::tree::TreePath>>(p1, p2); }

protected:

	SwingUtilities2(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_SWINGUTILITIES2
