// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/JPanel.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>

#ifndef SCAPIX_JAVA_API_SUN_SWING_FILEPANE_FWD
#define SCAPIX_JAVA_API_SUN_SWING_FILEPANE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::swing { class FilePane; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::swing::FilePane>
{
	static constexpr fixed_string class_name = "sun/swing/FilePane";
	using base_classes = std::tuple<scapix::java_api::javax::swing::JPanel, scapix::java_api::java::beans::PropertyChangeListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_FILEPANE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SWING_FILEPANE)
#define SCAPIX_JAVA_API_SUN_SWING_FILEPANE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyChangeEvent.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Action.h>
#include <scapix/java_api/javax/swing/ActionMap.h>
#include <scapix/java_api/javax/swing/JFileChooser.h>
#include <scapix/java_api/javax/swing/JMenu.h>
#include <scapix/java_api/javax/swing/JPopupMenu.h>
#include <scapix/java_api/javax/swing/event/ListSelectionListener.h>
#include <scapix/java_api/sun/swing/FilePane_FileChooserUIAccessor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::swing::FilePane : public jni::object_base<"sun/swing/FilePane",
	javax::swing::JPanel,
	java::beans::PropertyChangeListener>
{
public:

	using FileChooserUIAccessor = FilePane_FileChooserUIAccessor;

	static jni::ref<java::lang::String> ACTION_APPROVE_SELECTION() { return get_static_field<"ACTION_APPROVE_SELECTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_CANCEL() { return get_static_field<"ACTION_CANCEL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_EDIT_FILE_NAME() { return get_static_field<"ACTION_EDIT_FILE_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_REFRESH() { return get_static_field<"ACTION_REFRESH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_CHANGE_TO_PARENT_DIRECTORY() { return get_static_field<"ACTION_CHANGE_TO_PARENT_DIRECTORY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_NEW_FOLDER() { return get_static_field<"ACTION_NEW_FOLDER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_VIEW_LIST() { return get_static_field<"ACTION_VIEW_LIST", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_VIEW_DETAILS() { return get_static_field<"ACTION_VIEW_DETAILS", jni::ref<java::lang::String>>(); }
	static jint VIEWTYPE_LIST() { return get_static_field<"VIEWTYPE_LIST", jint>(); }
	static jint VIEWTYPE_DETAILS() { return get_static_field<"VIEWTYPE_DETAILS", jint>(); }

	static jni::ref<sun::swing::FilePane> new_object(jni::ref<sun::swing::FilePane_FileChooserUIAccessor> p1) { return base_::new_object(p1); }
	void uninstallUI() { return call_method<"uninstallUI", void>(); }
	jint getViewType() { return call_method<"getViewType", jint>(); }
	void setViewType(jint p1) { return call_method<"setViewType", void>(p1); }
	jni::ref<javax::swing::Action> getViewTypeAction(jint p1) { return call_method<"getViewTypeAction", jni::ref<javax::swing::Action>>(p1); }
	jni::ref<jni::array<javax::swing::Action>> getActions() { return call_method<"getActions", jni::ref<jni::array<javax::swing::Action>>>(); }
	static void addActionsToMap(jni::ref<javax::swing::ActionMap> p1, jni::ref<jni::array<javax::swing::Action>> p2) { return call_static_method<"addActionsToMap", void>(p1, p2); }
	jni::ref<javax::swing::JPanel> createList() { return call_method<"createList", jni::ref<javax::swing::JPanel>>(); }
	jni::ref<javax::swing::JPanel> createDetailsView() { return call_method<"createDetailsView", jni::ref<javax::swing::JPanel>>(); }
	jni::ref<javax::swing::event::ListSelectionListener> createListSelectionListener() { return call_method<"createListSelectionListener", jni::ref<javax::swing::event::ListSelectionListener>>(); }
	jni::ref<javax::swing::Action> getNewFolderAction() { return call_method<"getNewFolderAction", jni::ref<javax::swing::Action>>(); }
	void propertyChange(jni::ref<java::beans::PropertyChangeEvent> p1) { return call_method<"propertyChange", void>(p1); }
	void ensureFileIsVisible(jni::ref<javax::swing::JFileChooser> p1, jni::ref<java::io::File> p2) { return call_method<"ensureFileIsVisible", void>(p1, p2); }
	void rescanCurrentDirectory() { return call_method<"rescanCurrentDirectory", void>(); }
	void clearSelection() { return call_method<"clearSelection", void>(); }
	jni::ref<javax::swing::JMenu> getViewMenu() { return call_method<"getViewMenu", jni::ref<javax::swing::JMenu>>(); }
	jni::ref<javax::swing::JPopupMenu> getComponentPopupMenu() { return call_method<"getComponentPopupMenu", jni::ref<javax::swing::JPopupMenu>>(); }
	jboolean canWrite(jni::ref<java::io::File> p1) { return call_method<"canWrite", jboolean>(p1); }
	static jboolean usesShellFolder(jni::ref<javax::swing::JFileChooser> p1) { return call_static_method<"usesShellFolder", jboolean>(p1); }

protected:

	FilePane(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_FILEPANE
