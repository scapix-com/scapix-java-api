// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/plaf/basic/BasicFileChooserUI.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthUI.h>

#ifndef SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_SYNTHFILECHOOSERUI_FWD
#define SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_SYNTHFILECHOOSERUI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::swing::plaf::synth { class SynthFileChooserUI; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::swing::plaf::synth::SynthFileChooserUI>
{
	static constexpr fixed_string class_name = "sun/swing/plaf/synth/SynthFileChooserUI";
	using base_classes = std::tuple<scapix::java_api::javax::swing::plaf::basic::BasicFileChooserUI, scapix::java_api::javax::swing::plaf::synth::SynthUI>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_SYNTHFILECHOOSERUI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_SYNTHFILECHOOSERUI)
#define SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_SYNTHFILECHOOSERUI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Graphics.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/swing/Action.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/JFileChooser.h>
#include <scapix/java_api/javax/swing/plaf/ComponentUI.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::swing::plaf::synth::SynthFileChooserUI : public jni::object_base<"sun/swing/plaf/synth/SynthFileChooserUI",
	javax::swing::plaf::basic::BasicFileChooserUI,
	javax::swing::plaf::synth::SynthUI>
{
public:

	static jni::ref<javax::swing::plaf::ComponentUI> createUI(jni::ref<javax::swing::JComponent> p1) { return call_static_method<"createUI", jni::ref<javax::swing::plaf::ComponentUI>>(p1); }
	static jni::ref<sun::swing::plaf::synth::SynthFileChooserUI> new_object(jni::ref<javax::swing::JFileChooser> p1) { return base_::new_object(p1); }
	jni::ref<javax::swing::plaf::synth::SynthContext> getContext(jni::ref<javax::swing::JComponent> p1) { return call_method<"getContext", jni::ref<javax::swing::plaf::synth::SynthContext>>(p1); }
	void installUI(jni::ref<javax::swing::JComponent> p1) { return call_method<"installUI", void>(p1); }
	void installComponents(jni::ref<javax::swing::JFileChooser> p1) { return call_method<"installComponents", void>(p1); }
	void uninstallComponents(jni::ref<javax::swing::JFileChooser> p1) { return call_method<"uninstallComponents", void>(p1); }
	void update(jni::ref<java::awt::Graphics> p1, jni::ref<javax::swing::JComponent> p2) { return call_method<"update", void>(p1, p2); }
	void paintBorder(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::awt::Graphics> p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"paintBorder", void>(p1, p2, p3, p4, p5, p6); }
	void paint(jni::ref<java::awt::Graphics> p1, jni::ref<javax::swing::JComponent> p2) { return call_method<"paint", void>(p1, p2); }
	void setFileName(jni::ref<java::lang::String> p1) { return call_method<"setFileName", void>(p1); }
	jni::ref<java::lang::String> getFileName() { return call_method<"getFileName", jni::ref<java::lang::String>>(); }
	jni::ref<java::beans::PropertyChangeListener> createPropertyChangeListener(jni::ref<javax::swing::JFileChooser> p1) { return call_method<"createPropertyChangeListener", jni::ref<java::beans::PropertyChangeListener>>(p1); }
	jni::ref<javax::swing::Action> getFileNameCompletionAction() { return call_method<"getFileNameCompletionAction", jni::ref<javax::swing::Action>>(); }
	void clearIconCache() { return call_method<"clearIconCache", void>(); }

protected:

	SynthFileChooserUI(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_SYNTHFILECHOOSERUI
