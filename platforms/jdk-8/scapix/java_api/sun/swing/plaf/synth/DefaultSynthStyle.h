// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/swing/plaf/synth/SynthStyle.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_FWD
#define SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::swing::plaf::synth { class DefaultSynthStyle; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::swing::plaf::synth::DefaultSynthStyle>
{
	static constexpr fixed_string class_name = "sun/swing/plaf/synth/DefaultSynthStyle";
	using base_classes = std::tuple<scapix::java_api::javax::swing::plaf::synth::SynthStyle, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE)
#define SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/awt/Insets.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/swing/JComponent.h>
#include <scapix/java_api/javax/swing/plaf/synth/ColorType.h>
#include <scapix/java_api/javax/swing/plaf/synth/Region.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthContext.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthGraphicsUtils.h>
#include <scapix/java_api/javax/swing/plaf/synth/SynthPainter.h>
#include <scapix/java_api/sun/swing/plaf/synth/DefaultSynthStyle_StateInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::swing::plaf::synth::DefaultSynthStyle : public jni::object_base<"sun/swing/plaf/synth/DefaultSynthStyle",
	javax::swing::plaf::synth::SynthStyle,
	java::lang::Cloneable>
{
public:

	using StateInfo = DefaultSynthStyle_StateInfo;

	static jni::ref<sun::swing::plaf::synth::DefaultSynthStyle> new_object() { return base_::new_object(); }
	static jni::ref<sun::swing::plaf::synth::DefaultSynthStyle> new_object(jni::ref<sun::swing::plaf::synth::DefaultSynthStyle> p1) { return base_::new_object(p1); }
	static jni::ref<sun::swing::plaf::synth::DefaultSynthStyle> new_object(jni::ref<java::awt::Insets> p1, jboolean p2, jni::ref<jni::array<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo>> p3, jni::ref<java::util::Map> p4) { return base_::new_object(p1, p2, p3, p4); }
	jni::ref<java::awt::Color> getColor(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<javax::swing::plaf::synth::ColorType> p2) { return call_method<"getColor", jni::ref<java::awt::Color>>(p1, p2); }
	jni::ref<java::awt::Color> getColor(jni::ref<javax::swing::JComponent> p1, jni::ref<javax::swing::plaf::synth::Region> p2, jint p3, jni::ref<javax::swing::plaf::synth::ColorType> p4) { return call_method<"getColor", jni::ref<java::awt::Color>>(p1, p2, p3, p4); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	jni::ref<java::awt::Font> getFont(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1); }
	jni::ref<java::awt::Font> getFont(jni::ref<javax::swing::JComponent> p1, jni::ref<javax::swing::plaf::synth::Region> p2, jint p3) { return call_method<"getFont", jni::ref<java::awt::Font>>(p1, p2, p3); }
	void setGraphicsUtils(jni::ref<javax::swing::plaf::synth::SynthGraphicsUtils> p1) { return call_method<"setGraphicsUtils", void>(p1); }
	jni::ref<javax::swing::plaf::synth::SynthGraphicsUtils> getGraphicsUtils(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"getGraphicsUtils", jni::ref<javax::swing::plaf::synth::SynthGraphicsUtils>>(p1); }
	void setInsets(jni::ref<java::awt::Insets> p1) { return call_method<"setInsets", void>(p1); }
	jni::ref<java::awt::Insets> getInsets(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::awt::Insets> p2) { return call_method<"getInsets", jni::ref<java::awt::Insets>>(p1, p2); }
	void setPainter(jni::ref<javax::swing::plaf::synth::SynthPainter> p1) { return call_method<"setPainter", void>(p1); }
	jni::ref<javax::swing::plaf::synth::SynthPainter> getPainter(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"getPainter", jni::ref<javax::swing::plaf::synth::SynthPainter>>(p1); }
	void setOpaque(jboolean p1) { return call_method<"setOpaque", void>(p1); }
	jboolean isOpaque(jni::ref<javax::swing::plaf::synth::SynthContext> p1) { return call_method<"isOpaque", jboolean>(p1); }
	void setData(jni::ref<java::util::Map> p1) { return call_method<"setData", void>(p1); }
	jni::ref<java::util::Map> getData() { return call_method<"getData", jni::ref<java::util::Map>>(); }
	jni::ref<java::lang::Object> get(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::lang::Object> p2) { return call_method<"get", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> getDefaultValue(jni::ref<javax::swing::plaf::synth::SynthContext> p1, jni::ref<java::lang::Object> p2) { return call_method<"getDefaultValue", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<sun::swing::plaf::synth::DefaultSynthStyle> addTo(jni::ref<sun::swing::plaf::synth::DefaultSynthStyle> p1) { return call_method<"addTo", jni::ref<sun::swing::plaf::synth::DefaultSynthStyle>>(p1); }
	void setStateInfo(jni::ref<jni::array<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo>> p1) { return call_method<"setStateInfo", void>(p1); }
	jni::ref<jni::array<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo>> getStateInfo() { return call_method<"getStateInfo", jni::ref<jni::array<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo>>>(); }
	jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo> getStateInfo(jint p1) { return call_method<"getStateInfo", jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	DefaultSynthStyle(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE
