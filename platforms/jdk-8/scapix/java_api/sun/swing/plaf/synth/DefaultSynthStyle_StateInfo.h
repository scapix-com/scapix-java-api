// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_STATEINFO_FWD
#define SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_STATEINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::swing::plaf::synth { class DefaultSynthStyle_StateInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::swing::plaf::synth::DefaultSynthStyle_StateInfo>
{
	static constexpr fixed_string class_name = "sun/swing/plaf/synth/DefaultSynthStyle$StateInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_STATEINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_STATEINFO)
#define SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_STATEINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Color.h>
#include <scapix/java_api/java/awt/Font.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/swing/plaf/synth/ColorType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::swing::plaf::synth::DefaultSynthStyle_StateInfo : public jni::object_base<"sun/swing/plaf/synth/DefaultSynthStyle$StateInfo",
	java::lang::Object>
{
public:

	static jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo> new_object() { return base_::new_object(); }
	static jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo> new_object(jint p1, jni::ref<java::awt::Font> p2, jni::ref<jni::array<java::awt::Color>> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo> new_object(jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo> p1) { return base_::new_object(p1); }
	jni::ref<java::util::Map> getData() { return call_method<"getData", jni::ref<java::util::Map>>(); }
	void setData(jni::ref<java::util::Map> p1) { return call_method<"setData", void>(p1); }
	void setFont(jni::ref<java::awt::Font> p1) { return call_method<"setFont", void>(p1); }
	jni::ref<java::awt::Font> getFont() { return call_method<"getFont", jni::ref<java::awt::Font>>(); }
	void setColors(jni::ref<jni::array<java::awt::Color>> p1) { return call_method<"setColors", void>(p1); }
	jni::ref<jni::array<java::awt::Color>> getColors() { return call_method<"getColors", jni::ref<jni::array<java::awt::Color>>>(); }
	jni::ref<java::awt::Color> getColor(jni::ref<javax::swing::plaf::synth::ColorType> p1) { return call_method<"getColor", jni::ref<java::awt::Color>>(p1); }
	jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo> addTo(jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo> p1) { return call_method<"addTo", jni::ref<sun::swing::plaf::synth::DefaultSynthStyle_StateInfo>>(p1); }
	void setComponentState(jint p1) { return call_method<"setComponentState", void>(p1); }
	jint getComponentState() { return call_method<"getComponentState", jint>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	DefaultSynthStyle_StateInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SWING_PLAF_SYNTH_DEFAULTSYNTHSTYLE_STATEINFO
