// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_TOOLS_JAR_MAIN_FWD
#define SCAPIX_JAVA_API_SUN_TOOLS_JAR_MAIN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::tools::jar { class Main; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::tools::jar::Main>
{
	static constexpr fixed_string class_name = "sun/tools/jar/Main";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TOOLS_JAR_MAIN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_TOOLS_JAR_MAIN)
#define SCAPIX_JAVA_API_SUN_TOOLS_JAR_MAIN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::tools::jar::Main : public jni::object_base<"sun/tools/jar/Main",
	java::lang::Object>
{
public:

	static jni::ref<sun::tools::jar::Main> new_object(jni::ref<java::io::PrintStream> p1, jni::ref<java::io::PrintStream> p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	jboolean run(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"run", jboolean>(p1); }
	static void main(jni::ref<jni::array<java::lang::String>> p1) { return call_static_method<"main", void>(p1); }

protected:

	Main(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_TOOLS_JAR_MAIN
