// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/rmi/server/UnicastServerRef.h>

#ifndef SCAPIX_JAVA_API_SUN_RMI_SERVER_UNICASTSERVERREF2_FWD
#define SCAPIX_JAVA_API_SUN_RMI_SERVER_UNICASTSERVERREF2_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::rmi::server { class UnicastServerRef2; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::rmi::server::UnicastServerRef2>
{
	static constexpr fixed_string class_name = "sun/rmi/server/UnicastServerRef2";
	using base_classes = std::tuple<scapix::java_api::sun::rmi::server::UnicastServerRef>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_RMI_SERVER_UNICASTSERVERREF2_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_RMI_SERVER_UNICASTSERVERREF2)
#define SCAPIX_JAVA_API_SUN_RMI_SERVER_UNICASTSERVERREF2

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/ObjectOutput.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/rmi/server/RMIClientSocketFactory.h>
#include <scapix/java_api/java/rmi/server/RMIServerSocketFactory.h>
#include <scapix/java_api/sun/misc/ObjectInputFilter.h>
#include <scapix/java_api/sun/rmi/transport/LiveRef.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::rmi::server::UnicastServerRef2 : public jni::object_base<"sun/rmi/server/UnicastServerRef2",
	sun::rmi::server::UnicastServerRef>
{
public:

	static jni::ref<sun::rmi::server::UnicastServerRef2> new_object() { return base_::new_object(); }
	static jni::ref<sun::rmi::server::UnicastServerRef2> new_object(jni::ref<sun::rmi::transport::LiveRef> p1) { return base_::new_object(p1); }
	static jni::ref<sun::rmi::server::UnicastServerRef2> new_object(jni::ref<sun::rmi::transport::LiveRef> p1, jni::ref<sun::misc::ObjectInputFilter> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::rmi::server::UnicastServerRef2> new_object(jint p1, jni::ref<java::rmi::server::RMIClientSocketFactory> p2, jni::ref<java::rmi::server::RMIServerSocketFactory> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::rmi::server::UnicastServerRef2> new_object(jint p1, jni::ref<java::rmi::server::RMIClientSocketFactory> p2, jni::ref<java::rmi::server::RMIServerSocketFactory> p3, jni::ref<sun::misc::ObjectInputFilter> p4) { return base_::new_object(p1, p2, p3, p4); }
	jni::ref<java::lang::String> getRefClass(jni::ref<java::io::ObjectOutput> p1) { return call_method<"getRefClass", jni::ref<java::lang::String>>(p1); }

protected:

	UnicastServerRef2(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_RMI_SERVER_UNICASTSERVERREF2
