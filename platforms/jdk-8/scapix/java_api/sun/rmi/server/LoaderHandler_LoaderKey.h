// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_RMI_SERVER_LOADERHANDLER_LOADERKEY_FWD
#define SCAPIX_JAVA_API_SUN_RMI_SERVER_LOADERHANDLER_LOADERKEY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::rmi::server { class LoaderHandler_LoaderKey; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::rmi::server::LoaderHandler_LoaderKey>
{
	static constexpr fixed_string class_name = "sun/rmi/server/LoaderHandler$LoaderKey";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_RMI_SERVER_LOADERHANDLER_LOADERKEY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_RMI_SERVER_LOADERHANDLER_LOADERKEY)
#define SCAPIX_JAVA_API_SUN_RMI_SERVER_LOADERHANDLER_LOADERKEY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/net/URL.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::rmi::server::LoaderHandler_LoaderKey : public jni::object_base<"sun/rmi/server/LoaderHandler$LoaderKey",
	java::lang::Object>
{
public:

	static jni::ref<sun::rmi::server::LoaderHandler_LoaderKey> new_object(jni::ref<jni::array<java::net::URL>> p1, jni::ref<java::lang::ClassLoader> p2) { return base_::new_object(p1, p2); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	LoaderHandler_LoaderKey(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_RMI_SERVER_LOADERHANDLER_LOADERKEY
