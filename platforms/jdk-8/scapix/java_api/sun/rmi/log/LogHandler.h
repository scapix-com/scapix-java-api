// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_RMI_LOG_LOGHANDLER_FWD
#define SCAPIX_JAVA_API_SUN_RMI_LOG_LOGHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::rmi::log { class LogHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::rmi::log::LogHandler>
{
	static constexpr fixed_string class_name = "sun/rmi/log/LogHandler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_RMI_LOG_LOGHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_RMI_LOG_LOGHANDLER)
#define SCAPIX_JAVA_API_SUN_RMI_LOG_LOGHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/sun/rmi/log/LogInputStream.h>
#include <scapix/java_api/sun/rmi/log/LogOutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::rmi::log::LogHandler : public jni::object_base<"sun/rmi/log/LogHandler",
	java::lang::Object>
{
public:

	static jni::ref<sun::rmi::log::LogHandler> new_object() { return base_::new_object(); }
	jni::ref<java::lang::Object> initialSnapshot() { return call_method<"initialSnapshot", jni::ref<java::lang::Object>>(); }
	void snapshot(jni::ref<java::io::OutputStream> p1, jni::ref<java::lang::Object> p2) { return call_method<"snapshot", void>(p1, p2); }
	jni::ref<java::lang::Object> recover(jni::ref<java::io::InputStream> p1) { return call_method<"recover", jni::ref<java::lang::Object>>(p1); }
	void writeUpdate(jni::ref<sun::rmi::log::LogOutputStream> p1, jni::ref<java::lang::Object> p2) { return call_method<"writeUpdate", void>(p1, p2); }
	jni::ref<java::lang::Object> readUpdate(jni::ref<sun::rmi::log::LogInputStream> p1, jni::ref<java::lang::Object> p2) { return call_method<"readUpdate", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> applyUpdate(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"applyUpdate", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	LogHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_RMI_LOG_LOGHANDLER
