// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_AUDIO_AUDIODEVICE_FWD
#define SCAPIX_JAVA_API_SUN_AUDIO_AUDIODEVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::audio { class AudioDevice; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::audio::AudioDevice>
{
	static constexpr fixed_string class_name = "sun/audio/AudioDevice";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AUDIO_AUDIODEVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_AUDIO_AUDIODEVICE)
#define SCAPIX_JAVA_API_SUN_AUDIO_AUDIODEVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::audio::AudioDevice : public jni::object_base<"sun/audio/AudioDevice",
	java::lang::Object>
{
public:

	static jni::ref<sun::audio::AudioDevice> device() { return get_static_field<"device", jni::ref<sun::audio::AudioDevice>>(); }

	void openChannel(jni::ref<java::io::InputStream> p1) { return call_method<"openChannel", void>(p1); }
	void closeChannel(jni::ref<java::io::InputStream> p1) { return call_method<"closeChannel", void>(p1); }
	void open() { return call_method<"open", void>(); }
	void close() { return call_method<"close", void>(); }
	void play() { return call_method<"play", void>(); }
	void closeStreams() { return call_method<"closeStreams", void>(); }
	jint openChannels() { return call_method<"openChannels", jint>(); }

protected:

	AudioDevice(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_AUDIO_AUDIODEVICE
