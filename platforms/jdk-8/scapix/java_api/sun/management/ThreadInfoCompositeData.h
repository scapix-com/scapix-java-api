// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/management/LazyCompositeData.h>

#ifndef SCAPIX_JAVA_API_SUN_MANAGEMENT_THREADINFOCOMPOSITEDATA_FWD
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_THREADINFOCOMPOSITEDATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::management { class ThreadInfoCompositeData; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::management::ThreadInfoCompositeData>
{
	static constexpr fixed_string class_name = "sun/management/ThreadInfoCompositeData";
	using base_classes = std::tuple<scapix::java_api::sun::management::LazyCompositeData>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_THREADINFOCOMPOSITEDATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MANAGEMENT_THREADINFOCOMPOSITEDATA)
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_THREADINFOCOMPOSITEDATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/StackTraceElement.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread_State.h>
#include <scapix/java_api/java/lang/management/LockInfo.h>
#include <scapix/java_api/java/lang/management/MonitorInfo.h>
#include <scapix/java_api/java/lang/management/ThreadInfo.h>
#include <scapix/java_api/javax/management/openmbean/CompositeData.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::management::ThreadInfoCompositeData : public jni::object_base<"sun/management/ThreadInfoCompositeData",
	sun::management::LazyCompositeData>
{
public:

	jni::ref<java::lang::management::ThreadInfo> getThreadInfo() { return call_method<"getThreadInfo", jni::ref<java::lang::management::ThreadInfo>>(); }
	jboolean isCurrentVersion() { return call_method<"isCurrentVersion", jboolean>(); }
	static jni::ref<sun::management::ThreadInfoCompositeData> getInstance(jni::ref<javax::management::openmbean::CompositeData> p1) { return call_static_method<"getInstance", jni::ref<sun::management::ThreadInfoCompositeData>>(p1); }
	static jni::ref<javax::management::openmbean::CompositeData> toCompositeData(jni::ref<java::lang::management::ThreadInfo> p1) { return call_static_method<"toCompositeData", jni::ref<javax::management::openmbean::CompositeData>>(p1); }
	static jboolean isCurrentVersion(jni::ref<javax::management::openmbean::CompositeData> p1) { return call_static_method<"isCurrentVersion", jboolean>(p1); }
	jlong threadId() { return call_method<"threadId", jlong>(); }
	jni::ref<java::lang::String> threadName() { return call_method<"threadName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Thread_State> threadState() { return call_method<"threadState", jni::ref<java::lang::Thread_State>>(); }
	jlong blockedTime() { return call_method<"blockedTime", jlong>(); }
	jlong blockedCount() { return call_method<"blockedCount", jlong>(); }
	jlong waitedTime() { return call_method<"waitedTime", jlong>(); }
	jlong waitedCount() { return call_method<"waitedCount", jlong>(); }
	jni::ref<java::lang::String> lockName() { return call_method<"lockName", jni::ref<java::lang::String>>(); }
	jlong lockOwnerId() { return call_method<"lockOwnerId", jlong>(); }
	jni::ref<java::lang::String> lockOwnerName() { return call_method<"lockOwnerName", jni::ref<java::lang::String>>(); }
	jboolean suspended() { return call_method<"suspended", jboolean>(); }
	jboolean inNative() { return call_method<"inNative", jboolean>(); }
	jni::ref<jni::array<java::lang::StackTraceElement>> stackTrace() { return call_method<"stackTrace", jni::ref<jni::array<java::lang::StackTraceElement>>>(); }
	jni::ref<java::lang::management::LockInfo> lockInfo() { return call_method<"lockInfo", jni::ref<java::lang::management::LockInfo>>(); }
	jni::ref<jni::array<java::lang::management::MonitorInfo>> lockedMonitors() { return call_method<"lockedMonitors", jni::ref<jni::array<java::lang::management::MonitorInfo>>>(); }
	jni::ref<jni::array<java::lang::management::LockInfo>> lockedSynchronizers() { return call_method<"lockedSynchronizers", jni::ref<jni::array<java::lang::management::LockInfo>>>(); }
	static void validateCompositeData(jni::ref<javax::management::openmbean::CompositeData> p1) { return call_static_method<"validateCompositeData", void>(p1); }

protected:

	ThreadInfoCompositeData(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_THREADINFOCOMPOSITEDATA
