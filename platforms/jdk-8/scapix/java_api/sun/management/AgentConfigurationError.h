// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Error.h>

#ifndef SCAPIX_JAVA_API_SUN_MANAGEMENT_AGENTCONFIGURATIONERROR_FWD
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_AGENTCONFIGURATIONERROR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::management { class AgentConfigurationError; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::management::AgentConfigurationError>
{
	static constexpr fixed_string class_name = "sun/management/AgentConfigurationError";
	using base_classes = std::tuple<scapix::java_api::java::lang::Error>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_AGENTCONFIGURATIONERROR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MANAGEMENT_AGENTCONFIGURATIONERROR)
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_AGENTCONFIGURATIONERROR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::management::AgentConfigurationError : public jni::object_base<"sun/management/AgentConfigurationError",
	java::lang::Error>
{
public:

	static jni::ref<java::lang::String> AGENT_EXCEPTION() { return get_static_field<"AGENT_EXCEPTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONFIG_FILE_NOT_FOUND() { return get_static_field<"CONFIG_FILE_NOT_FOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONFIG_FILE_OPEN_FAILED() { return get_static_field<"CONFIG_FILE_OPEN_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONFIG_FILE_CLOSE_FAILED() { return get_static_field<"CONFIG_FILE_CLOSE_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONFIG_FILE_ACCESS_DENIED() { return get_static_field<"CONFIG_FILE_ACCESS_DENIED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXPORT_ADDRESS_FAILED() { return get_static_field<"EXPORT_ADDRESS_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AGENT_CLASS_NOT_FOUND() { return get_static_field<"AGENT_CLASS_NOT_FOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AGENT_CLASS_FAILED() { return get_static_field<"AGENT_CLASS_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AGENT_CLASS_PREMAIN_NOT_FOUND() { return get_static_field<"AGENT_CLASS_PREMAIN_NOT_FOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AGENT_CLASS_ACCESS_DENIED() { return get_static_field<"AGENT_CLASS_ACCESS_DENIED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AGENT_CLASS_INVALID() { return get_static_field<"AGENT_CLASS_INVALID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_JMXREMOTE_PORT() { return get_static_field<"INVALID_JMXREMOTE_PORT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_JMXREMOTE_RMI_PORT() { return get_static_field<"INVALID_JMXREMOTE_RMI_PORT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PASSWORD_FILE_NOT_SET() { return get_static_field<"PASSWORD_FILE_NOT_SET", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PASSWORD_FILE_NOT_READABLE() { return get_static_field<"PASSWORD_FILE_NOT_READABLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PASSWORD_FILE_READ_FAILED() { return get_static_field<"PASSWORD_FILE_READ_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PASSWORD_FILE_NOT_FOUND() { return get_static_field<"PASSWORD_FILE_NOT_FOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCESS_FILE_NOT_SET() { return get_static_field<"ACCESS_FILE_NOT_SET", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCESS_FILE_NOT_READABLE() { return get_static_field<"ACCESS_FILE_NOT_READABLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCESS_FILE_READ_FAILED() { return get_static_field<"ACCESS_FILE_READ_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCESS_FILE_NOT_FOUND() { return get_static_field<"ACCESS_FILE_NOT_FOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PASSWORD_FILE_ACCESS_NOT_RESTRICTED() { return get_static_field<"PASSWORD_FILE_ACCESS_NOT_RESTRICTED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_ACCESS_NOT_RESTRICTED() { return get_static_field<"FILE_ACCESS_NOT_RESTRICTED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_NOT_FOUND() { return get_static_field<"FILE_NOT_FOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_NOT_READABLE() { return get_static_field<"FILE_NOT_READABLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_NOT_SET() { return get_static_field<"FILE_NOT_SET", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FILE_READ_FAILED() { return get_static_field<"FILE_READ_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONNECTOR_SERVER_IO_ERROR() { return get_static_field<"CONNECTOR_SERVER_IO_ERROR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_OPTION() { return get_static_field<"INVALID_OPTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_SNMP_PORT() { return get_static_field<"INVALID_SNMP_PORT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_SNMP_TRAP_PORT() { return get_static_field<"INVALID_SNMP_TRAP_PORT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNKNOWN_SNMP_INTERFACE() { return get_static_field<"UNKNOWN_SNMP_INTERFACE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SNMP_ACL_FILE_NOT_SET() { return get_static_field<"SNMP_ACL_FILE_NOT_SET", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SNMP_ACL_FILE_NOT_FOUND() { return get_static_field<"SNMP_ACL_FILE_NOT_FOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SNMP_ACL_FILE_NOT_READABLE() { return get_static_field<"SNMP_ACL_FILE_NOT_READABLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SNMP_ACL_FILE_READ_FAILED() { return get_static_field<"SNMP_ACL_FILE_READ_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SNMP_ACL_FILE_ACCESS_NOT_RESTRICTED() { return get_static_field<"SNMP_ACL_FILE_ACCESS_NOT_RESTRICTED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SNMP_ADAPTOR_START_FAILED() { return get_static_field<"SNMP_ADAPTOR_START_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SNMP_MIB_INIT_FAILED() { return get_static_field<"SNMP_MIB_INIT_FAILED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_STATE() { return get_static_field<"INVALID_STATE", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::management::AgentConfigurationError> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<sun::management::AgentConfigurationError> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::management::AgentConfigurationError> new_object(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2) { return base_::new_object(p1, p2); }
	static jni::ref<sun::management::AgentConfigurationError> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2, jni::ref<jni::array<java::lang::String>> p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::String> getError() { return call_method<"getError", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::lang::String>> getParams() { return call_method<"getParams", jni::ref<jni::array<java::lang::String>>>(); }

protected:

	AgentConfigurationError(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_AGENTCONFIGURATIONERROR
