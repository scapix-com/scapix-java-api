// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MANAGEMENT_MANAGEMENTFACTORYHELPER_FWD
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_MANAGEMENTFACTORYHELPER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::management { class ManagementFactoryHelper; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::management::ManagementFactoryHelper>
{
	static constexpr fixed_string class_name = "sun/management/ManagementFactoryHelper";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_MANAGEMENTFACTORYHELPER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MANAGEMENT_MANAGEMENTFACTORYHELPER)
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_MANAGEMENTFACTORYHELPER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/management/DiagnosticCommandMBean.h>
#include <scapix/java_api/com/sun/management/HotSpotDiagnosticMXBean.h>
#include <scapix/java_api/java/lang/Thread_State.h>
#include <scapix/java_api/java/lang/management/ClassLoadingMXBean.h>
#include <scapix/java_api/java/lang/management/CompilationMXBean.h>
#include <scapix/java_api/java/lang/management/MemoryMXBean.h>
#include <scapix/java_api/java/lang/management/OperatingSystemMXBean.h>
#include <scapix/java_api/java/lang/management/PlatformLoggingMXBean.h>
#include <scapix/java_api/java/lang/management/RuntimeMXBean.h>
#include <scapix/java_api/java/lang/management/ThreadMXBean.h>
#include <scapix/java_api/java/util/HashMap.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/sun/management/HotspotClassLoadingMBean.h>
#include <scapix/java_api/sun/management/HotspotCompilationMBean.h>
#include <scapix/java_api/sun/management/HotspotMemoryMBean.h>
#include <scapix/java_api/sun/management/HotspotRuntimeMBean.h>
#include <scapix/java_api/sun/management/HotspotThreadMBean.h>
#include <scapix/java_api/sun/management/ManagementFactoryHelper_LoggingMXBean.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::management::ManagementFactoryHelper : public jni::object_base<"sun/management/ManagementFactoryHelper",
	java::lang::Object>
{
public:

	using LoggingMXBean = ManagementFactoryHelper_LoggingMXBean;

	static jni::ref<java::lang::management::ClassLoadingMXBean> getClassLoadingMXBean() { return call_static_method<"getClassLoadingMXBean", jni::ref<java::lang::management::ClassLoadingMXBean>>(); }
	static jni::ref<java::lang::management::MemoryMXBean> getMemoryMXBean() { return call_static_method<"getMemoryMXBean", jni::ref<java::lang::management::MemoryMXBean>>(); }
	static jni::ref<java::lang::management::ThreadMXBean> getThreadMXBean() { return call_static_method<"getThreadMXBean", jni::ref<java::lang::management::ThreadMXBean>>(); }
	static jni::ref<java::lang::management::RuntimeMXBean> getRuntimeMXBean() { return call_static_method<"getRuntimeMXBean", jni::ref<java::lang::management::RuntimeMXBean>>(); }
	static jni::ref<java::lang::management::CompilationMXBean> getCompilationMXBean() { return call_static_method<"getCompilationMXBean", jni::ref<java::lang::management::CompilationMXBean>>(); }
	static jni::ref<java::lang::management::OperatingSystemMXBean> getOperatingSystemMXBean() { return call_static_method<"getOperatingSystemMXBean", jni::ref<java::lang::management::OperatingSystemMXBean>>(); }
	static jni::ref<java::util::List> getMemoryPoolMXBeans() { return call_static_method<"getMemoryPoolMXBeans", jni::ref<java::util::List>>(); }
	static jni::ref<java::util::List> getMemoryManagerMXBeans() { return call_static_method<"getMemoryManagerMXBeans", jni::ref<java::util::List>>(); }
	static jni::ref<java::util::List> getGarbageCollectorMXBeans() { return call_static_method<"getGarbageCollectorMXBeans", jni::ref<java::util::List>>(); }
	static jni::ref<java::lang::management::PlatformLoggingMXBean> getPlatformLoggingMXBean() { return call_static_method<"getPlatformLoggingMXBean", jni::ref<java::lang::management::PlatformLoggingMXBean>>(); }
	static jni::ref<java::util::List> getBufferPoolMXBeans() { return call_static_method<"getBufferPoolMXBeans", jni::ref<java::util::List>>(); }
	static jni::ref<com::sun::management::HotSpotDiagnosticMXBean> getDiagnosticMXBean() { return call_static_method<"getDiagnosticMXBean", jni::ref<com::sun::management::HotSpotDiagnosticMXBean>>(); }
	static jni::ref<sun::management::HotspotRuntimeMBean> getHotspotRuntimeMBean() { return call_static_method<"getHotspotRuntimeMBean", jni::ref<sun::management::HotspotRuntimeMBean>>(); }
	static jni::ref<sun::management::HotspotClassLoadingMBean> getHotspotClassLoadingMBean() { return call_static_method<"getHotspotClassLoadingMBean", jni::ref<sun::management::HotspotClassLoadingMBean>>(); }
	static jni::ref<sun::management::HotspotThreadMBean> getHotspotThreadMBean() { return call_static_method<"getHotspotThreadMBean", jni::ref<sun::management::HotspotThreadMBean>>(); }
	static jni::ref<sun::management::HotspotMemoryMBean> getHotspotMemoryMBean() { return call_static_method<"getHotspotMemoryMBean", jni::ref<sun::management::HotspotMemoryMBean>>(); }
	static jni::ref<com::sun::management::DiagnosticCommandMBean> getDiagnosticCommandMBean() { return call_static_method<"getDiagnosticCommandMBean", jni::ref<com::sun::management::DiagnosticCommandMBean>>(); }
	static jni::ref<sun::management::HotspotCompilationMBean> getHotspotCompilationMBean() { return call_static_method<"getHotspotCompilationMBean", jni::ref<sun::management::HotspotCompilationMBean>>(); }
	static jni::ref<java::util::HashMap> getPlatformDynamicMBeans() { return call_static_method<"getPlatformDynamicMBeans", jni::ref<java::util::HashMap>>(); }
	static jboolean isThreadSuspended(jint p1) { return call_static_method<"isThreadSuspended", jboolean>(p1); }
	static jboolean isThreadRunningNative(jint p1) { return call_static_method<"isThreadRunningNative", jboolean>(p1); }
	static jni::ref<java::lang::Thread_State> toThreadState(jint p1) { return call_static_method<"toThreadState", jni::ref<java::lang::Thread_State>>(p1); }

protected:

	ManagementFactoryHelper(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_MANAGEMENTFACTORYHELPER
