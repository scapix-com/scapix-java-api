// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMTHREADINSTANCEENTRYIMPL_THREADSTATEMAP_FWD
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMTHREADINSTANCEENTRYIMPL_THREADSTATEMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::management::snmp::jvminstr { class JvmThreadInstanceEntryImpl_ThreadStateMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::management::snmp::jvminstr::JvmThreadInstanceEntryImpl_ThreadStateMap>
{
	static constexpr fixed_string class_name = "sun/management/snmp/jvminstr/JvmThreadInstanceEntryImpl$ThreadStateMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMTHREADINSTANCEENTRYIMPL_THREADSTATEMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMTHREADINSTANCEENTRYIMPL_THREADSTATEMAP)
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMTHREADINSTANCEENTRYIMPL_THREADSTATEMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Byte.h>
#include <scapix/java_api/java/lang/Thread_State.h>
#include <scapix/java_api/java/lang/management/ThreadInfo.h>
#include <scapix/java_api/sun/management/snmp/jvminstr/JvmThreadInstanceEntryImpl_ThreadStateMap_Byte0.h>
#include <scapix/java_api/sun/management/snmp/jvminstr/JvmThreadInstanceEntryImpl_ThreadStateMap_Byte1.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::management::snmp::jvminstr::JvmThreadInstanceEntryImpl_ThreadStateMap : public jni::object_base<"sun/management/snmp/jvminstr/JvmThreadInstanceEntryImpl$ThreadStateMap",
	java::lang::Object>
{
public:

	using Byte0 = JvmThreadInstanceEntryImpl_ThreadStateMap_Byte0;
	using Byte1 = JvmThreadInstanceEntryImpl_ThreadStateMap_Byte1;

	static jbyte mask0() { return get_static_field<"mask0", jbyte>(); }
	static jbyte mask1() { return get_static_field<"mask1", jbyte>(); }

	static jni::ref<sun::management::snmp::jvminstr::JvmThreadInstanceEntryImpl_ThreadStateMap> new_object() { return base_::new_object(); }
	static void setNative(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"setNative", void>(p1); }
	static void setSuspended(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"setSuspended", void>(p1); }
	static void setState(jni::ref<jni::array<jbyte>> p1, jni::ref<java::lang::Thread_State> p2) { return call_static_method<"setState", void>(p1, p2); }
	static void checkOther(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"checkOther", void>(p1); }
	static jni::ref<jni::array<java::lang::Byte>> getState(jni::ref<java::lang::management::ThreadInfo> p1) { return call_static_method<"getState", jni::ref<jni::array<java::lang::Byte>>>(p1); }

protected:

	JvmThreadInstanceEntryImpl_ThreadStateMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMTHREADINSTANCEENTRYIMPL_THREADSTATEMAP
