// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/management/snmp/jvmmib/JvmMemoryMBean.h>

#ifndef SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMMEMORYIMPL_FWD
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMMEMORYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::management::snmp::jvminstr { class JvmMemoryImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::management::snmp::jvminstr::JvmMemoryImpl>
{
	static constexpr fixed_string class_name = "sun/management/snmp/jvminstr/JvmMemoryImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::management::snmp::jvmmib::JvmMemoryMBean>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMMEMORYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMMEMORYIMPL)
#define SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMMEMORYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/agent/SnmpMib.h>
#include <scapix/java_api/java/lang/Long.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#include <scapix/java_api/sun/management/snmp/jvmmib/EnumJvmMemoryGCCall.h>
#include <scapix/java_api/sun/management/snmp/jvmmib/EnumJvmMemoryGCVerboseLevel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::management::snmp::jvminstr::JvmMemoryImpl : public jni::object_base<"sun/management/snmp/jvminstr/JvmMemoryImpl",
	java::lang::Object,
	sun::management::snmp::jvmmib::JvmMemoryMBean>
{
public:

	static jni::ref<sun::management::snmp::jvminstr::JvmMemoryImpl> new_object(jni::ref<com::sun::jmx::snmp::agent::SnmpMib> p1) { return base_::new_object(p1); }
	static jni::ref<sun::management::snmp::jvminstr::JvmMemoryImpl> new_object(jni::ref<com::sun::jmx::snmp::agent::SnmpMib> p1, jni::ref<javax::management::MBeanServer> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::Long> getJvmMemoryNonHeapMaxSize() { return call_method<"getJvmMemoryNonHeapMaxSize", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getJvmMemoryNonHeapCommitted() { return call_method<"getJvmMemoryNonHeapCommitted", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getJvmMemoryNonHeapUsed() { return call_method<"getJvmMemoryNonHeapUsed", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getJvmMemoryNonHeapInitSize() { return call_method<"getJvmMemoryNonHeapInitSize", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getJvmMemoryHeapMaxSize() { return call_method<"getJvmMemoryHeapMaxSize", jni::ref<java::lang::Long>>(); }
	jni::ref<sun::management::snmp::jvmmib::EnumJvmMemoryGCCall> getJvmMemoryGCCall() { return call_method<"getJvmMemoryGCCall", jni::ref<sun::management::snmp::jvmmib::EnumJvmMemoryGCCall>>(); }
	void setJvmMemoryGCCall(jni::ref<sun::management::snmp::jvmmib::EnumJvmMemoryGCCall> p1) { return call_method<"setJvmMemoryGCCall", void>(p1); }
	void checkJvmMemoryGCCall(jni::ref<sun::management::snmp::jvmmib::EnumJvmMemoryGCCall> p1) { return call_method<"checkJvmMemoryGCCall", void>(p1); }
	jni::ref<java::lang::Long> getJvmMemoryHeapCommitted() { return call_method<"getJvmMemoryHeapCommitted", jni::ref<java::lang::Long>>(); }
	jni::ref<sun::management::snmp::jvmmib::EnumJvmMemoryGCVerboseLevel> getJvmMemoryGCVerboseLevel() { return call_method<"getJvmMemoryGCVerboseLevel", jni::ref<sun::management::snmp::jvmmib::EnumJvmMemoryGCVerboseLevel>>(); }
	void setJvmMemoryGCVerboseLevel(jni::ref<sun::management::snmp::jvmmib::EnumJvmMemoryGCVerboseLevel> p1) { return call_method<"setJvmMemoryGCVerboseLevel", void>(p1); }
	void checkJvmMemoryGCVerboseLevel(jni::ref<sun::management::snmp::jvmmib::EnumJvmMemoryGCVerboseLevel> p1) { return call_method<"checkJvmMemoryGCVerboseLevel", void>(p1); }
	jni::ref<java::lang::Long> getJvmMemoryHeapUsed() { return call_method<"getJvmMemoryHeapUsed", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getJvmMemoryHeapInitSize() { return call_method<"getJvmMemoryHeapInitSize", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getJvmMemoryPendingFinalCount() { return call_method<"getJvmMemoryPendingFinalCount", jni::ref<java::lang::Long>>(); }

protected:

	JvmMemoryImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_MANAGEMENT_SNMP_JVMINSTR_JVMMEMORYIMPL
