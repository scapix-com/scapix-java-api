// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/SocketChannel.h>
#include <scapix/java_api/sun/nio/ch/SelChImpl.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CH_SOCKETCHANNELIMPL_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CH_SOCKETCHANNELIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::ch { class SocketChannelImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::ch::SocketChannelImpl>
{
	static constexpr fixed_string class_name = "sun/nio/ch/SocketChannelImpl";
	using base_classes = std::tuple<scapix::java_api::java::nio::channels::SocketChannel, scapix::java_api::sun::nio::ch::SelChImpl>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_SOCKETCHANNELIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CH_SOCKETCHANNELIMPL)
#define SCAPIX_JAVA_API_SUN_NIO_CH_SOCKETCHANNELIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetSocketAddress.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/sun/nio/ch/SelectionKeyImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::nio::ch::SocketChannelImpl : public jni::object_base<"sun/nio/ch/SocketChannelImpl",
	java::nio::channels::SocketChannel,
	sun::nio::ch::SelChImpl>
{
public:

	jni::ref<java::net::Socket> socket() { return call_method<"socket", jni::ref<java::net::Socket>>(); }
	jni::ref<java::net::SocketAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::SocketAddress>>(); }
	jni::ref<java::net::SocketAddress> getRemoteAddress() { return call_method<"getRemoteAddress", jni::ref<java::net::SocketAddress>>(); }
	jni::ref<java::nio::channels::SocketChannel> setOption(jni::ref<java::net::SocketOption> p1, jni::ref<java::lang::Object> p2) { return call_method<"setOption", jni::ref<java::nio::channels::SocketChannel>>(p1, p2); }
	jni::ref<java::lang::Object> getOption(jni::ref<java::net::SocketOption> p1) { return call_method<"getOption", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::util::Set> supportedOptions() { return call_method<"supportedOptions", jni::ref<java::util::Set>>(); }
	jint read(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"read", jint>(p1); }
	jlong read(jni::ref<jni::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<"read", jlong>(p1, p2, p3); }
	jint write(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"write", jint>(p1); }
	jlong write(jni::ref<jni::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<"write", jlong>(p1, p2, p3); }
	jni::ref<java::net::InetSocketAddress> localAddress() { return call_method<"localAddress", jni::ref<java::net::InetSocketAddress>>(); }
	jni::ref<java::net::SocketAddress> remoteAddress() { return call_method<"remoteAddress", jni::ref<java::net::SocketAddress>>(); }
	jni::ref<java::nio::channels::SocketChannel> bind(jni::ref<java::net::SocketAddress> p1) { return call_method<"bind", jni::ref<java::nio::channels::SocketChannel>>(p1); }
	jboolean isConnected() { return call_method<"isConnected", jboolean>(); }
	jboolean isConnectionPending() { return call_method<"isConnectionPending", jboolean>(); }
	jboolean connect(jni::ref<java::net::SocketAddress> p1) { return call_method<"connect", jboolean>(p1); }
	jboolean finishConnect() { return call_method<"finishConnect", jboolean>(); }
	jni::ref<java::nio::channels::SocketChannel> shutdownInput() { return call_method<"shutdownInput", jni::ref<java::nio::channels::SocketChannel>>(); }
	jni::ref<java::nio::channels::SocketChannel> shutdownOutput() { return call_method<"shutdownOutput", jni::ref<java::nio::channels::SocketChannel>>(); }
	jboolean isInputOpen() { return call_method<"isInputOpen", jboolean>(); }
	jboolean isOutputOpen() { return call_method<"isOutputOpen", jboolean>(); }
	void kill() { return call_method<"kill", void>(); }
	jboolean translateReadyOps(jint p1, jint p2, jni::ref<sun::nio::ch::SelectionKeyImpl> p3) { return call_method<"translateReadyOps", jboolean>(p1, p2, p3); }
	jboolean translateAndUpdateReadyOps(jint p1, jni::ref<sun::nio::ch::SelectionKeyImpl> p2) { return call_method<"translateAndUpdateReadyOps", jboolean>(p1, p2); }
	jboolean translateAndSetReadyOps(jint p1, jni::ref<sun::nio::ch::SelectionKeyImpl> p2) { return call_method<"translateAndSetReadyOps", jboolean>(p1, p2); }
	void translateAndSetInterestOps(jint p1, jni::ref<sun::nio::ch::SelectionKeyImpl> p2) { return call_method<"translateAndSetInterestOps", void>(p1, p2); }
	jni::ref<java::io::FileDescriptor> getFD() { return call_method<"getFD", jni::ref<java::io::FileDescriptor>>(); }
	jint getFDVal() { return call_method<"getFDVal", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SocketChannelImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_SOCKETCHANNELIMPL
