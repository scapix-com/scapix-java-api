// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/Pipe_SinkChannel.h>
#include <scapix/java_api/sun/nio/ch/SelChImpl.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CH_SINKCHANNELIMPL_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CH_SINKCHANNELIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::ch { class SinkChannelImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::ch::SinkChannelImpl>
{
	static constexpr fixed_string class_name = "sun/nio/ch/SinkChannelImpl";
	using base_classes = std::tuple<scapix::java_api::java::nio::channels::Pipe_SinkChannel, scapix::java_api::sun::nio::ch::SelChImpl>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_SINKCHANNELIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CH_SINKCHANNELIMPL)
#define SCAPIX_JAVA_API_SUN_NIO_CH_SINKCHANNELIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/sun/nio/ch/SelectionKeyImpl.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::nio::ch::SinkChannelImpl : public jni::object_base<"sun/nio/ch/SinkChannelImpl",
	java::nio::channels::Pipe_SinkChannel,
	sun::nio::ch::SelChImpl>
{
public:

	jni::ref<java::io::FileDescriptor> getFD() { return call_method<"getFD", jni::ref<java::io::FileDescriptor>>(); }
	jint getFDVal() { return call_method<"getFDVal", jint>(); }
	void kill() { return call_method<"kill", void>(); }
	jboolean translateReadyOps(jint p1, jint p2, jni::ref<sun::nio::ch::SelectionKeyImpl> p3) { return call_method<"translateReadyOps", jboolean>(p1, p2, p3); }
	jboolean translateAndUpdateReadyOps(jint p1, jni::ref<sun::nio::ch::SelectionKeyImpl> p2) { return call_method<"translateAndUpdateReadyOps", jboolean>(p1, p2); }
	jboolean translateAndSetReadyOps(jint p1, jni::ref<sun::nio::ch::SelectionKeyImpl> p2) { return call_method<"translateAndSetReadyOps", jboolean>(p1, p2); }
	void translateAndSetInterestOps(jint p1, jni::ref<sun::nio::ch::SelectionKeyImpl> p2) { return call_method<"translateAndSetInterestOps", void>(p1, p2); }
	jint write(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"write", jint>(p1); }
	jlong write(jni::ref<jni::array<java::nio::ByteBuffer>> p1) { return call_method<"write", jlong>(p1); }
	jlong write(jni::ref<jni::array<java::nio::ByteBuffer>> p1, jint p2, jint p3) { return call_method<"write", jlong>(p1, p2, p3); }

protected:

	SinkChannelImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_SINKCHANNELIMPL
