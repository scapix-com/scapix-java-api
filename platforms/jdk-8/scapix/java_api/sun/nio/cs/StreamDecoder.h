// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/Reader.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CS_STREAMDECODER_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CS_STREAMDECODER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::cs { class StreamDecoder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::cs::StreamDecoder>
{
	static constexpr fixed_string class_name = "sun/nio/cs/StreamDecoder";
	using base_classes = std::tuple<scapix::java_api::java::io::Reader>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_STREAMDECODER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CS_STREAMDECODER)
#define SCAPIX_JAVA_API_SUN_NIO_CS_STREAMDECODER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/ReadableByteChannel.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/nio/charset/CharsetDecoder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::nio::cs::StreamDecoder : public jni::object_base<"sun/nio/cs/StreamDecoder",
	java::io::Reader>
{
public:

	static jni::ref<sun::nio::cs::StreamDecoder> forInputStreamReader(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::String> p3) { return call_static_method<"forInputStreamReader", jni::ref<sun::nio::cs::StreamDecoder>>(p1, p2, p3); }
	static jni::ref<sun::nio::cs::StreamDecoder> forInputStreamReader(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::Object> p2, jni::ref<java::nio::charset::Charset> p3) { return call_static_method<"forInputStreamReader", jni::ref<sun::nio::cs::StreamDecoder>>(p1, p2, p3); }
	static jni::ref<sun::nio::cs::StreamDecoder> forInputStreamReader(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::Object> p2, jni::ref<java::nio::charset::CharsetDecoder> p3) { return call_static_method<"forInputStreamReader", jni::ref<sun::nio::cs::StreamDecoder>>(p1, p2, p3); }
	static jni::ref<sun::nio::cs::StreamDecoder> forDecoder(jni::ref<java::nio::channels::ReadableByteChannel> p1, jni::ref<java::nio::charset::CharsetDecoder> p2, jint p3) { return call_static_method<"forDecoder", jni::ref<sun::nio::cs::StreamDecoder>>(p1, p2, p3); }
	jni::ref<java::lang::String> getEncoding() { return call_method<"getEncoding", jni::ref<java::lang::String>>(); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	jboolean ready() { return call_method<"ready", jboolean>(); }
	void close() { return call_method<"close", void>(); }

protected:

	StreamDecoder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_STREAMDECODER
