// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CS_SINGLEBYTE_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CS_SINGLEBYTE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::cs { class SingleByte; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::cs::SingleByte>
{
	static constexpr fixed_string class_name = "sun/nio/cs/SingleByte";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_SINGLEBYTE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CS_SINGLEBYTE)
#define SCAPIX_JAVA_API_SUN_NIO_CS_SINGLEBYTE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/nio/cs/SingleByte_Decoder.h>
#include <scapix/java_api/sun/nio/cs/SingleByte_Encoder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::nio::cs::SingleByte : public jni::object_base<"sun/nio/cs/SingleByte",
	java::lang::Object>
{
public:

	using Decoder = SingleByte_Decoder;
	using Encoder = SingleByte_Encoder;

	static jni::ref<sun::nio::cs::SingleByte> new_object() { return base_::new_object(); }
	static void initC2B(jni::ref<jni::array<jchar>> p1, jni::ref<jni::array<jchar>> p2, jni::ref<jni::array<jchar>> p3, jni::ref<jni::array<jchar>> p4) { return call_static_method<"initC2B", void>(p1, p2, p3, p4); }

protected:

	SingleByte(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_SINGLEBYTE
