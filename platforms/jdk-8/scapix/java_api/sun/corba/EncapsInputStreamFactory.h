// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_CORBA_ENCAPSINPUTSTREAMFACTORY_FWD
#define SCAPIX_JAVA_API_SUN_CORBA_ENCAPSINPUTSTREAMFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::corba { class EncapsInputStreamFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::corba::EncapsInputStreamFactory>
{
	static constexpr fixed_string class_name = "sun/corba/EncapsInputStreamFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_CORBA_ENCAPSINPUTSTREAMFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_CORBA_ENCAPSINPUTSTREAMFACTORY)
#define SCAPIX_JAVA_API_SUN_CORBA_ENCAPSINPUTSTREAMFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/EncapsInputStream.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/TypeCodeInputStream.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/com/sun/org/omg/SendingContext/CodeBase.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::corba::EncapsInputStreamFactory : public jni::object_base<"sun/corba/EncapsInputStreamFactory",
	java::lang::Object>
{
public:

	static jni::ref<sun::corba::EncapsInputStreamFactory> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> newEncapsInputStream(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jboolean p4, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p5) { return call_static_method<"newEncapsInputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream>>(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> newEncapsInputStream(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<java::nio::ByteBuffer> p2, jint p3, jboolean p4, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p5) { return call_static_method<"newEncapsInputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream>>(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> newEncapsInputStream(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_static_method<"newEncapsInputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream>>(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> newEncapsInputStream(jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> p1) { return call_static_method<"newEncapsInputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream>>(p1); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> newEncapsInputStream(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p4) { return call_static_method<"newEncapsInputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream>>(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> newEncapsInputStream(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p4, jni::ref<com::sun::org::omg::SendingContext::CodeBase> p5) { return call_static_method<"newEncapsInputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream>>(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream> newTypeCodeInputStream(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jboolean p4, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p5) { return call_static_method<"newTypeCodeInputStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream>>(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream> newTypeCodeInputStream(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<java::nio::ByteBuffer> p2, jint p3, jboolean p4, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p5) { return call_static_method<"newTypeCodeInputStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream>>(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream> newTypeCodeInputStream(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_static_method<"newTypeCodeInputStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream>>(p1, p2, p3); }

protected:

	EncapsInputStreamFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_CORBA_ENCAPSINPUTSTREAMFACTORY
