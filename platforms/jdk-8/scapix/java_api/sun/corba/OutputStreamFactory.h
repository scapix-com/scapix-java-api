// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_CORBA_OUTPUTSTREAMFACTORY_FWD
#define SCAPIX_JAVA_API_SUN_CORBA_OUTPUTSTREAMFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::corba { class OutputStreamFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::corba::OutputStreamFactory>
{
	static constexpr fixed_string class_name = "sun/corba/OutputStreamFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_CORBA_OUTPUTSTREAMFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_CORBA_OUTPUTSTREAMFACTORY)
#define SCAPIX_JAVA_API_SUN_CORBA_OUTPUTSTREAMFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/CDROutputObject.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/EncapsOutputStream.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/TypeCodeOutputStream.h>
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/Message.h>
#include <scapix/java_api/com/sun/corba/se/pept/protocol/MessageMediator.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaMessageMediator.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/CorbaConnection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::corba::OutputStreamFactory : public jni::object_base<"sun/corba/OutputStreamFactory",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream> newTypeCodeOutputStream(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return call_static_method<"newTypeCodeOutputStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream>>(p1); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream> newTypeCodeOutputStream(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jboolean p2) { return call_static_method<"newTypeCodeOutputStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream>>(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsOutputStream> newEncapsOutputStream(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return call_static_method<"newEncapsOutputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsOutputStream>>(p1); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsOutputStream> newEncapsOutputStream(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p2) { return call_static_method<"newEncapsOutputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsOutputStream>>(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsOutputStream> newEncapsOutputStream(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jboolean p2) { return call_static_method<"newEncapsOutputStream", jni::ref<com::sun::corba::se::impl::encoding::EncapsOutputStream>>(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::encoding::CDROutputObject> newCDROutputObject(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p2, jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::Message> p3, jbyte p4) { return call_static_method<"newCDROutputObject", jni::ref<com::sun::corba::se::impl::encoding::CDROutputObject>>(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::encoding::CDROutputObject> newCDROutputObject(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p2, jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::Message> p3, jbyte p4, jint p5) { return call_static_method<"newCDROutputObject", jni::ref<com::sun::corba::se::impl::encoding::CDROutputObject>>(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::CDROutputObject> newCDROutputObject(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p2, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p3, jni::ref<com::sun::corba::se::spi::transport::CorbaConnection> p4, jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::Message> p5, jbyte p6) { return call_static_method<"newCDROutputObject", jni::ref<com::sun::corba::se::impl::encoding::CDROutputObject>>(p1, p2, p3, p4, p5, p6); }

protected:

	OutputStreamFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_CORBA_OUTPUTSTREAMFACTORY
