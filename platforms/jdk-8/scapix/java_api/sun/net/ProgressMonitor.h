// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_PROGRESSMONITOR_FWD
#define SCAPIX_JAVA_API_SUN_NET_PROGRESSMONITOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net { class ProgressMonitor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::ProgressMonitor>
{
	static constexpr fixed_string class_name = "sun/net/ProgressMonitor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_PROGRESSMONITOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_PROGRESSMONITOR)
#define SCAPIX_JAVA_API_SUN_NET_PROGRESSMONITOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/sun/net/ProgressListener.h>
#include <scapix/java_api/sun/net/ProgressMeteringPolicy.h>
#include <scapix/java_api/sun/net/ProgressSource.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::ProgressMonitor : public jni::object_base<"sun/net/ProgressMonitor",
	java::lang::Object>
{
public:

	static jni::ref<sun::net::ProgressMonitor> new_object() { return base_::new_object(); }
	static jni::ref<sun::net::ProgressMonitor> getDefault() { return call_static_method<"getDefault", jni::ref<sun::net::ProgressMonitor>>(); }
	static void setDefault(jni::ref<sun::net::ProgressMonitor> p1) { return call_static_method<"setDefault", void>(p1); }
	static void setMeteringPolicy(jni::ref<sun::net::ProgressMeteringPolicy> p1) { return call_static_method<"setMeteringPolicy", void>(p1); }
	jni::ref<java::util::ArrayList> getProgressSources() { return call_method<"getProgressSources", jni::ref<java::util::ArrayList>>(); }
	jint getProgressUpdateThreshold() { return call_method<"getProgressUpdateThreshold", jint>(); }
	jboolean shouldMeterInput(jni::ref<java::net::URL> p1, jni::ref<java::lang::String> p2) { return call_method<"shouldMeterInput", jboolean>(p1, p2); }
	void registerSource(jni::ref<sun::net::ProgressSource> p1) { return call_method<"registerSource", void>(p1); }
	void unregisterSource(jni::ref<sun::net::ProgressSource> p1) { return call_method<"unregisterSource", void>(p1); }
	void updateProgress(jni::ref<sun::net::ProgressSource> p1) { return call_method<"updateProgress", void>(p1); }
	void addProgressListener(jni::ref<sun::net::ProgressListener> p1) { return call_method<"addProgressListener", void>(p1); }
	void removeProgressListener(jni::ref<sun::net::ProgressListener> p1) { return call_method<"removeProgressListener", void>(p1); }

protected:

	ProgressMonitor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_PROGRESSMONITOR
