// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_UTIL_IPADDRESSUTIL_FWD
#define SCAPIX_JAVA_API_SUN_NET_UTIL_IPADDRESSUTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net::util { class IPAddressUtil; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::util::IPAddressUtil>
{
	static constexpr fixed_string class_name = "sun/net/util/IPAddressUtil";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_UTIL_IPADDRESSUTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_UTIL_IPADDRESSUTIL)
#define SCAPIX_JAVA_API_SUN_NET_UTIL_IPADDRESSUTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::util::IPAddressUtil : public jni::object_base<"sun/net/util/IPAddressUtil",
	java::lang::Object>
{
public:

	static jni::ref<sun::net::util::IPAddressUtil> new_object() { return base_::new_object(); }
	static jni::ref<jni::array<jbyte>> textToNumericFormatV4(jni::ref<java::lang::String> p1) { return call_static_method<"textToNumericFormatV4", jni::ref<jni::array<jbyte>>>(p1); }
	static jni::ref<jni::array<jbyte>> validateNumericFormatV4(jni::ref<java::lang::String> p1) { return call_static_method<"validateNumericFormatV4", jni::ref<jni::array<jbyte>>>(p1); }
	static jni::ref<jni::array<jbyte>> textToNumericFormatV6(jni::ref<java::lang::String> p1) { return call_static_method<"textToNumericFormatV6", jni::ref<jni::array<jbyte>>>(p1); }
	static jboolean isIPv4LiteralAddress(jni::ref<java::lang::String> p1) { return call_static_method<"isIPv4LiteralAddress", jboolean>(p1); }
	static jboolean isIPv6LiteralAddress(jni::ref<java::lang::String> p1) { return call_static_method<"isIPv6LiteralAddress", jboolean>(p1); }
	static jni::ref<jni::array<jbyte>> convertFromIPv4MappedAddress(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"convertFromIPv4MappedAddress", jni::ref<jni::array<jbyte>>>(p1); }
	static jboolean match(jchar p1, jlong p2, jlong p3) { return call_static_method<"match", jboolean>(p1, p2, p3); }
	static jint scan(jni::ref<java::lang::String> p1, jlong p2, jlong p3) { return call_static_method<"scan", jint>(p1, p2, p3); }
	static jint scan(jni::ref<java::lang::String> p1, jlong p2, jlong p3, jni::ref<jni::array<jchar>> p4) { return call_static_method<"scan", jint>(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> checkAuthority(jni::ref<java::net::URL> p1) { return call_static_method<"checkAuthority", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> checkExternalForm(jni::ref<java::net::URL> p1) { return call_static_method<"checkExternalForm", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> checkHostString(jni::ref<java::lang::String> p1) { return call_static_method<"checkHostString", jni::ref<java::lang::String>>(p1); }
	static jint digit(jchar p1, jint p2) { return call_static_method<"digit", jint>(p1, p2); }
	static jboolean isBsdParsableV4(jni::ref<java::lang::String> p1) { return call_static_method<"isBsdParsableV4", jboolean>(p1); }
	static jint parseAsciiDigit(jchar p1, jint p2) { return call_static_method<"parseAsciiDigit", jint>(p1, p2); }

protected:

	IPAddressUtil(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_UTIL_IPADDRESSUTIL
