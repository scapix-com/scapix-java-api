// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/net/Proxy.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_SOCKSPROXY_FWD
#define SCAPIX_JAVA_API_SUN_NET_SOCKSPROXY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net { class SocksProxy; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::SocksProxy>
{
	static constexpr fixed_string class_name = "sun/net/SocksProxy";
	using base_classes = std::tuple<scapix::java_api::java::net::Proxy>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_SOCKSPROXY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_SOCKSPROXY)
#define SCAPIX_JAVA_API_SUN_NET_SOCKSPROXY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/net/SocketAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::SocksProxy : public jni::object_base<"sun/net/SocksProxy",
	java::net::Proxy>
{
public:

	static jni::ref<sun::net::SocksProxy> create(jni::ref<java::net::SocketAddress> p1, jint p2) { return call_static_method<"create", jni::ref<sun::net::SocksProxy>>(p1, p2); }
	jint protocolVersion() { return call_method<"protocolVersion", jint>(); }

protected:

	SocksProxy(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_SOCKSPROXY
