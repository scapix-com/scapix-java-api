// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/net/www/protocol/http/AuthenticationInfo.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_DIGESTAUTHENTICATION_FWD
#define SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_DIGESTAUTHENTICATION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net::www::protocol::http { class DigestAuthentication; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::www::protocol::http::DigestAuthentication>
{
	static constexpr fixed_string class_name = "sun/net/www/protocol/http/DigestAuthentication";
	using base_classes = std::tuple<scapix::java_api::sun::net::www::protocol::http::AuthenticationInfo>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_DIGESTAUTHENTICATION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_DIGESTAUTHENTICATION)
#define SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_DIGESTAUTHENTICATION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/PasswordAuthentication.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/sun/net/www/HeaderParser.h>
#include <scapix/java_api/sun/net/www/protocol/http/DigestAuthentication_Parameters.h>
#include <scapix/java_api/sun/net/www/protocol/http/HttpURLConnection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::net::www::protocol::http::DigestAuthentication : public jni::object_base<"sun/net/www/protocol/http/DigestAuthentication",
	sun::net::www::protocol::http::AuthenticationInfo>
{
public:

	static jni::ref<sun::net::www::protocol::http::DigestAuthentication> new_object(jboolean p1, jni::ref<java::net::URL> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::net::PasswordAuthentication> p5, jni::ref<sun::net::www::protocol::http::DigestAuthentication_Parameters> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<sun::net::www::protocol::http::DigestAuthentication> new_object(jboolean p1, jni::ref<java::lang::String> p2, jint p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jni::ref<java::net::PasswordAuthentication> p6, jni::ref<sun::net::www::protocol::http::DigestAuthentication_Parameters> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	jboolean supportsPreemptiveAuthorization() { return call_method<"supportsPreemptiveAuthorization", jboolean>(); }
	jni::ref<java::lang::String> getHeaderValue(jni::ref<java::net::URL> p1, jni::ref<java::lang::String> p2) { return call_method<"getHeaderValue", jni::ref<java::lang::String>>(p1, p2); }
	jboolean isAuthorizationStale(jni::ref<java::lang::String> p1) { return call_method<"isAuthorizationStale", jboolean>(p1); }
	jboolean setHeaders(jni::ref<sun::net::www::protocol::http::HttpURLConnection> p1, jni::ref<sun::net::www::HeaderParser> p2, jni::ref<java::lang::String> p3) { return call_method<"setHeaders", jboolean>(p1, p2, p3); }
	void checkResponse(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::net::URL> p3) { return call_method<"checkResponse", void>(p1, p2, p3); }
	void checkResponse(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"checkResponse", void>(p1, p2, p3); }

protected:

	DigestAuthentication(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_DIGESTAUTHENTICATION
