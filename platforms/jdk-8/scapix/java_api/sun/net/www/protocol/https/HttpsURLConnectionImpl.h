// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/net/ssl/HttpsURLConnection.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTPS_HTTPSURLCONNECTIONIMPL_FWD
#define SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTPS_HTTPSURLCONNECTIONIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net::www::protocol::https { class HttpsURLConnectionImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::www::protocol::https::HttpsURLConnectionImpl>
{
	static constexpr fixed_string class_name = "sun/net/www/protocol/https/HttpsURLConnectionImpl";
	using base_classes = std::tuple<scapix::java_api::javax::net::ssl::HttpsURLConnection>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTPS_HTTPSURLCONNECTIONIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTPS_HTTPSURLCONNECTIONIMPL)
#define SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTPS_HTTPSURLCONNECTIONIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/security/Permission.h>
#include <scapix/java_api/java/security/Principal.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/security/cert/X509Certificate.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::www::protocol::https::HttpsURLConnectionImpl : public jni::object_base<"sun/net/www/protocol/https/HttpsURLConnectionImpl",
	javax::net::ssl::HttpsURLConnection>
{
public:

	void connect() { return call_method<"connect", void>(); }
	jni::ref<java::lang::String> getCipherSuite() { return call_method<"getCipherSuite", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::security::cert::Certificate>> getLocalCertificates() { return call_method<"getLocalCertificates", jni::ref<jni::array<java::security::cert::Certificate>>>(); }
	jni::ref<jni::array<java::security::cert::Certificate>> getServerCertificates() { return call_method<"getServerCertificates", jni::ref<jni::array<java::security::cert::Certificate>>>(); }
	jni::ref<jni::array<javax::security::cert::X509Certificate>> getServerCertificateChain() { return call_method<"getServerCertificateChain", jni::ref<jni::array<javax::security::cert::X509Certificate>>>(); }
	jni::ref<java::security::Principal> getPeerPrincipal() { return call_method<"getPeerPrincipal", jni::ref<java::security::Principal>>(); }
	jni::ref<java::security::Principal> getLocalPrincipal() { return call_method<"getLocalPrincipal", jni::ref<java::security::Principal>>(); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	jni::ref<java::io::InputStream> getInputStream() { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(); }
	jni::ref<java::io::InputStream> getErrorStream() { return call_method<"getErrorStream", jni::ref<java::io::InputStream>>(); }
	void disconnect() { return call_method<"disconnect", void>(); }
	jboolean usingProxy() { return call_method<"usingProxy", jboolean>(); }
	jni::ref<java::util::Map> getHeaderFields() { return call_method<"getHeaderFields", jni::ref<java::util::Map>>(); }
	jni::ref<java::lang::String> getHeaderField(jni::ref<java::lang::String> p1) { return call_method<"getHeaderField", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getHeaderField(jint p1) { return call_method<"getHeaderField", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getHeaderFieldKey(jint p1) { return call_method<"getHeaderFieldKey", jni::ref<java::lang::String>>(p1); }
	void setRequestProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setRequestProperty", void>(p1, p2); }
	void addRequestProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"addRequestProperty", void>(p1, p2); }
	jint getResponseCode() { return call_method<"getResponseCode", jint>(); }
	jni::ref<java::lang::String> getRequestProperty(jni::ref<java::lang::String> p1) { return call_method<"getRequestProperty", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::util::Map> getRequestProperties() { return call_method<"getRequestProperties", jni::ref<java::util::Map>>(); }
	void setInstanceFollowRedirects(jboolean p1) { return call_method<"setInstanceFollowRedirects", void>(p1); }
	jboolean getInstanceFollowRedirects() { return call_method<"getInstanceFollowRedirects", jboolean>(); }
	void setRequestMethod(jni::ref<java::lang::String> p1) { return call_method<"setRequestMethod", void>(p1); }
	jni::ref<java::lang::String> getRequestMethod() { return call_method<"getRequestMethod", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getResponseMessage() { return call_method<"getResponseMessage", jni::ref<java::lang::String>>(); }
	jlong getHeaderFieldDate(jni::ref<java::lang::String> p1, jlong p2) { return call_method<"getHeaderFieldDate", jlong>(p1, p2); }
	jni::ref<java::security::Permission> getPermission() { return call_method<"getPermission", jni::ref<java::security::Permission>>(); }
	jni::ref<java::net::URL> getURL() { return call_method<"getURL", jni::ref<java::net::URL>>(); }
	jint getContentLength() { return call_method<"getContentLength", jint>(); }
	jlong getContentLengthLong() { return call_method<"getContentLengthLong", jlong>(); }
	jni::ref<java::lang::String> getContentType() { return call_method<"getContentType", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getContentEncoding() { return call_method<"getContentEncoding", jni::ref<java::lang::String>>(); }
	jlong getExpiration() { return call_method<"getExpiration", jlong>(); }
	jlong getDate() { return call_method<"getDate", jlong>(); }
	jlong getLastModified() { return call_method<"getLastModified", jlong>(); }
	jint getHeaderFieldInt(jni::ref<java::lang::String> p1, jint p2) { return call_method<"getHeaderFieldInt", jint>(p1, p2); }
	jlong getHeaderFieldLong(jni::ref<java::lang::String> p1, jlong p2) { return call_method<"getHeaderFieldLong", jlong>(p1, p2); }
	jni::ref<java::lang::Object> getContent() { return call_method<"getContent", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> getContent(jni::ref<jni::array<java::lang::Class>> p1) { return call_method<"getContent", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void setDoInput(jboolean p1) { return call_method<"setDoInput", void>(p1); }
	jboolean getDoInput() { return call_method<"getDoInput", jboolean>(); }
	void setDoOutput(jboolean p1) { return call_method<"setDoOutput", void>(p1); }
	jboolean getDoOutput() { return call_method<"getDoOutput", jboolean>(); }
	void setAllowUserInteraction(jboolean p1) { return call_method<"setAllowUserInteraction", void>(p1); }
	jboolean getAllowUserInteraction() { return call_method<"getAllowUserInteraction", jboolean>(); }
	void setUseCaches(jboolean p1) { return call_method<"setUseCaches", void>(p1); }
	jboolean getUseCaches() { return call_method<"getUseCaches", jboolean>(); }
	void setIfModifiedSince(jlong p1) { return call_method<"setIfModifiedSince", void>(p1); }
	jlong getIfModifiedSince() { return call_method<"getIfModifiedSince", jlong>(); }
	jboolean getDefaultUseCaches() { return call_method<"getDefaultUseCaches", jboolean>(); }
	void setDefaultUseCaches(jboolean p1) { return call_method<"setDefaultUseCaches", void>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void setConnectTimeout(jint p1) { return call_method<"setConnectTimeout", void>(p1); }
	jint getConnectTimeout() { return call_method<"getConnectTimeout", jint>(); }
	void setReadTimeout(jint p1) { return call_method<"setReadTimeout", void>(p1); }
	jint getReadTimeout() { return call_method<"getReadTimeout", jint>(); }
	void setFixedLengthStreamingMode(jint p1) { return call_method<"setFixedLengthStreamingMode", void>(p1); }
	void setFixedLengthStreamingMode(jlong p1) { return call_method<"setFixedLengthStreamingMode", void>(p1); }
	void setChunkedStreamingMode(jint p1) { return call_method<"setChunkedStreamingMode", void>(p1); }

protected:

	HttpsURLConnectionImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTPS_HTTPSURLCONNECTIONIMPL
