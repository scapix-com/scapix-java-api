// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/net/HttpURLConnection.h>

#ifndef SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_HTTPURLCONNECTION_FWD
#define SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_HTTPURLCONNECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::net::www::protocol::http { class HttpURLConnection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::net::www::protocol::http::HttpURLConnection>
{
	static constexpr fixed_string class_name = "sun/net/www/protocol/http/HttpURLConnection";
	using base_classes = std::tuple<scapix::java_api::java::net::HttpURLConnection>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_HTTPURLCONNECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_HTTPURLCONNECTION)
#define SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_HTTPURLCONNECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/CookieHandler.h>
#include <scapix/java_api/java/net/Proxy.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/net/URLConnection.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/sun/net/www/protocol/http/HttpAuthenticator.h>
#include <scapix/java_api/sun/net/www/protocol/http/HttpURLConnection_TunnelState.h>
#include <scapix/java_api/sun/util/logging/PlatformLogger.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::net::www::protocol::http::HttpURLConnection : public jni::object_base<"sun/net/www/protocol/http/HttpURLConnection",
	java::net::HttpURLConnection>
{
public:

	using TunnelState = HttpURLConnection_TunnelState;

	static jni::ref<java::lang::String> userAgent() { return get_static_field<"userAgent", jni::ref<java::lang::String>>(); }

	static jni::ref<sun::util::logging::PlatformLogger> getHttpLogger() { return call_static_method<"getHttpLogger", jni::ref<sun::util::logging::PlatformLogger>>(); }
	jni::ref<java::lang::Object> authObj() { return call_method<"authObj", jni::ref<java::lang::Object>>(); }
	void authObj(jni::ref<java::lang::Object> p1) { return call_method<"authObj", void>(p1); }
	void setRequestMethod(jni::ref<java::lang::String> p1) { return call_method<"setRequestMethod", void>(p1); }
	static jni::ref<sun::net::www::protocol::http::HttpURLConnection> new_object(jni::ref<java::net::URL> p1, jni::ref<java::lang::String> p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<sun::net::www::protocol::http::HttpURLConnection> new_object(jni::ref<java::net::URL> p1, jni::ref<java::net::Proxy> p2) { return base_::new_object(p1, p2); }
	static void setDefaultAuthenticator(jni::ref<sun::net::www::protocol::http::HttpAuthenticator> p1) { return call_static_method<"setDefaultAuthenticator", void>(p1); }
	static jni::ref<java::io::InputStream> openConnectionCheckRedirects(jni::ref<java::net::URLConnection> p1) { return call_static_method<"openConnectionCheckRedirects", jni::ref<java::io::InputStream>>(p1); }
	void connect() { return call_method<"connect", void>(); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	jboolean streaming() { return call_method<"streaming", jboolean>(); }
	jni::ref<java::io::InputStream> getInputStream() { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(); }
	jni::ref<java::io::InputStream> getErrorStream() { return call_method<"getErrorStream", jni::ref<java::io::InputStream>>(); }
	void setTunnelState(jni::ref<sun::net::www::protocol::http::HttpURLConnection_TunnelState> p1) { return call_method<"setTunnelState", void>(p1); }
	void doTunneling() { return call_method<"doTunneling", void>(); }
	void disconnect() { return call_method<"disconnect", void>(); }
	jboolean usingProxy() { return call_method<"usingProxy", jboolean>(); }
	jni::ref<java::lang::String> getHeaderField(jni::ref<java::lang::String> p1) { return call_method<"getHeaderField", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::util::Map> getHeaderFields() { return call_method<"getHeaderFields", jni::ref<java::util::Map>>(); }
	jni::ref<java::lang::String> getHeaderField(jint p1) { return call_method<"getHeaderField", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getHeaderFieldKey(jint p1) { return call_method<"getHeaderFieldKey", jni::ref<java::lang::String>>(p1); }
	void setRequestProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setRequestProperty", void>(p1, p2); }
	void addRequestProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"addRequestProperty", void>(p1, p2); }
	void setAuthenticationProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setAuthenticationProperty", void>(p1, p2); }
	jni::ref<java::lang::String> getRequestProperty(jni::ref<java::lang::String> p1) { return call_method<"getRequestProperty", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::util::Map> getRequestProperties() { return call_method<"getRequestProperties", jni::ref<java::util::Map>>(); }
	void setConnectTimeout(jint p1) { return call_method<"setConnectTimeout", void>(p1); }
	jint getConnectTimeout() { return call_method<"getConnectTimeout", jint>(); }
	void setReadTimeout(jint p1) { return call_method<"setReadTimeout", void>(p1); }
	jint getReadTimeout() { return call_method<"getReadTimeout", jint>(); }
	jni::ref<java::net::CookieHandler> getCookieHandler() { return call_method<"getCookieHandler", jni::ref<java::net::CookieHandler>>(); }

protected:

	HttpURLConnection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NET_WWW_PROTOCOL_HTTP_HTTPURLCONNECTION
