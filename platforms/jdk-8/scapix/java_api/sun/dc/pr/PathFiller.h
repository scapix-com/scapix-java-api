// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/dc/path/PathConsumer.h>

#ifndef SCAPIX_JAVA_API_SUN_DC_PR_PATHFILLER_FWD
#define SCAPIX_JAVA_API_SUN_DC_PR_PATHFILLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::dc::pr { class PathFiller; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::dc::pr::PathFiller>
{
	static constexpr fixed_string class_name = "sun/dc/pr/PathFiller";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::dc::path::PathConsumer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_DC_PR_PATHFILLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_DC_PR_PATHFILLER)
#define SCAPIX_JAVA_API_SUN_DC_PR_PATHFILLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/dc/path/FastPathProducer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::dc::pr::PathFiller : public jni::object_base<"sun/dc/pr/PathFiller",
	java::lang::Object,
	sun::dc::path::PathConsumer>
{
public:

	static jint EOFILL() { return get_static_field<"EOFILL", jint>(); }
	static jint NZFILL() { return get_static_field<"NZFILL", jint>(); }
	static jint MAX_PATH() { return get_static_field<"MAX_PATH", jint>(); }
	static jint TILE_IS_ALL_0() { return get_static_field<"TILE_IS_ALL_0", jint>(); }
	static jint TILE_IS_ALL_1() { return get_static_field<"TILE_IS_ALL_1", jint>(); }
	static jint TILE_IS_GENERAL() { return get_static_field<"TILE_IS_GENERAL", jint>(); }
	static jfloat maxPathF() { return get_static_field<"maxPathF", jfloat>(); }

	static jboolean validLoCoord(jfloat p1) { return call_static_method<"validLoCoord", jboolean>(p1); }
	static jboolean validHiCoord(jfloat p1) { return call_static_method<"validHiCoord", jboolean>(p1); }
	static jni::ref<sun::dc::pr::PathFiller> new_object() { return base_::new_object(); }
	void dispose() { return call_method<"dispose", void>(); }
	jni::ref<sun::dc::path::PathConsumer> getConsumer() { return call_method<"getConsumer", jni::ref<sun::dc::path::PathConsumer>>(); }
	void setFillMode(jint p1) { return call_method<"setFillMode", void>(p1); }
	void beginPath() { return call_method<"beginPath", void>(); }
	void beginSubpath(jfloat p1, jfloat p2) { return call_method<"beginSubpath", void>(p1, p2); }
	void appendLine(jfloat p1, jfloat p2) { return call_method<"appendLine", void>(p1, p2); }
	void appendQuadratic(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_method<"appendQuadratic", void>(p1, p2, p3, p4); }
	void appendCubic(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_method<"appendCubic", void>(p1, p2, p3, p4, p5, p6); }
	void closedSubpath() { return call_method<"closedSubpath", void>(); }
	void endPath() { return call_method<"endPath", void>(); }
	void useProxy(jni::ref<sun::dc::path::FastPathProducer> p1) { return call_method<"useProxy", void>(p1); }
	jlong getCPathConsumer() { return call_method<"getCPathConsumer", jlong>(); }
	void getAlphaBox(jni::ref<jni::array<jint>> p1) { return call_method<"getAlphaBox", void>(p1); }
	void setOutputArea(jfloat p1, jfloat p2, jint p3, jint p4) { return call_method<"setOutputArea", void>(p1, p2, p3, p4); }
	jint getTileState() { return call_method<"getTileState", jint>(); }
	void writeAlpha(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jint p4) { return call_method<"writeAlpha", void>(p1, p2, p3, p4); }
	void writeAlpha(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jint p4) { return call_method<"writeAlpha", void>(p1, p2, p3, p4); }
	void nextTile() { return call_method<"nextTile", void>(); }
	void reset() { return call_method<"reset", void>(); }

protected:

	PathFiller(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_DC_PR_PATHFILLER
