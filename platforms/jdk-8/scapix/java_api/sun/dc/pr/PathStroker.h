// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/dc/path/PathConsumer.h>

#ifndef SCAPIX_JAVA_API_SUN_DC_PR_PATHSTROKER_FWD
#define SCAPIX_JAVA_API_SUN_DC_PR_PATHSTROKER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::dc::pr { class PathStroker; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::dc::pr::PathStroker>
{
	static constexpr fixed_string class_name = "sun/dc/pr/PathStroker";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::dc::path::PathConsumer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_DC_PR_PATHSTROKER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_DC_PR_PATHSTROKER)
#define SCAPIX_JAVA_API_SUN_DC_PR_PATHSTROKER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/awt/geom/PathConsumer2D.h>
#include <scapix/java_api/sun/dc/path/FastPathProducer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::dc::pr::PathStroker : public jni::object_base<"sun/dc/pr/PathStroker",
	java::lang::Object,
	sun::dc::path::PathConsumer>
{
public:

	static jint ROUND() { return get_static_field<"ROUND", jint>(); }
	static jint SQUARE() { return get_static_field<"SQUARE", jint>(); }
	static jint BUTT() { return get_static_field<"BUTT", jint>(); }
	static jint BEVEL() { return get_static_field<"BEVEL", jint>(); }
	static jint MITER() { return get_static_field<"MITER", jint>(); }

	static jni::ref<sun::dc::pr::PathStroker> new_object(jni::ref<sun::dc::path::PathConsumer> p1) { return base_::new_object(p1); }
	static jni::ref<sun::dc::pr::PathStroker> new_object(jni::ref<sun::awt::geom::PathConsumer2D> p1) { return base_::new_object(p1); }
	void dispose() { return call_method<"dispose", void>(); }
	jni::ref<sun::dc::path::PathConsumer> getConsumer() { return call_method<"getConsumer", jni::ref<sun::dc::path::PathConsumer>>(); }
	void setPenDiameter(jfloat p1) { return call_method<"setPenDiameter", void>(p1); }
	void setPenT4(jni::ref<jni::array<jfloat>> p1) { return call_method<"setPenT4", void>(p1); }
	void setPenFitting(jfloat p1, jint p2) { return call_method<"setPenFitting", void>(p1, p2); }
	void setCaps(jint p1) { return call_method<"setCaps", void>(p1); }
	void setCorners(jint p1, jfloat p2) { return call_method<"setCorners", void>(p1, p2); }
	void setOutputT6(jni::ref<jni::array<jfloat>> p1) { return call_method<"setOutputT6", void>(p1); }
	void setOutputConsumer(jni::ref<sun::dc::path::PathConsumer> p1) { return call_method<"setOutputConsumer", void>(p1); }
	void reset() { return call_method<"reset", void>(); }
	void beginPath() { return call_method<"beginPath", void>(); }
	void beginSubpath(jfloat p1, jfloat p2) { return call_method<"beginSubpath", void>(p1, p2); }
	void appendLine(jfloat p1, jfloat p2) { return call_method<"appendLine", void>(p1, p2); }
	void appendQuadratic(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_method<"appendQuadratic", void>(p1, p2, p3, p4); }
	void appendCubic(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_method<"appendCubic", void>(p1, p2, p3, p4, p5, p6); }
	void closedSubpath() { return call_method<"closedSubpath", void>(); }
	void endPath() { return call_method<"endPath", void>(); }
	void useProxy(jni::ref<sun::dc::path::FastPathProducer> p1) { return call_method<"useProxy", void>(p1); }
	jlong getCPathConsumer() { return call_method<"getCPathConsumer", jlong>(); }

protected:

	PathStroker(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_DC_PR_PATHSTROKER
