// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_OMG_CORBA_ORB_FWD
#define SCAPIX_JAVA_API_ORG_OMG_CORBA_ORB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::omg::CORBA { class ORB; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::omg::CORBA::ORB>
{
	static constexpr fixed_string class_name = "org/omg/CORBA/ORB";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_CORBA_ORB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_OMG_CORBA_ORB)
#define SCAPIX_JAVA_API_ORG_OMG_CORBA_ORB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/applet/Applet.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/org/omg/CORBA/Any.h>
#include <scapix/java_api/org/omg/CORBA/Context.h>
#include <scapix/java_api/org/omg/CORBA/ContextList.h>
#include <scapix/java_api/org/omg/CORBA/Current.h>
#include <scapix/java_api/org/omg/CORBA/DynAny.h>
#include <scapix/java_api/org/omg/CORBA/DynArray.h>
#include <scapix/java_api/org/omg/CORBA/DynEnum.h>
#include <scapix/java_api/org/omg/CORBA/DynSequence.h>
#include <scapix/java_api/org/omg/CORBA/DynStruct.h>
#include <scapix/java_api/org/omg/CORBA/DynUnion.h>
#include <scapix/java_api/org/omg/CORBA/Environment.h>
#include <scapix/java_api/org/omg/CORBA/ExceptionList.h>
#include <scapix/java_api/org/omg/CORBA/NVList.h>
#include <scapix/java_api/org/omg/CORBA/NamedValue.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/CORBA/Policy.h>
#include <scapix/java_api/org/omg/CORBA/Request.h>
#include <scapix/java_api/org/omg/CORBA/ServiceInformationHolder.h>
#include <scapix/java_api/org/omg/CORBA/StructMember.h>
#include <scapix/java_api/org/omg/CORBA/TCKind.h>
#include <scapix/java_api/org/omg/CORBA/TypeCode.h>
#include <scapix/java_api/org/omg/CORBA/UnionMember.h>
#include <scapix/java_api/org/omg/CORBA/ValueMember.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::omg::CORBA::ORB : public jni::object_base<"org/omg/CORBA/ORB",
	java::lang::Object>
{
public:

	static jni::ref<org::omg::CORBA::ORB> new_object() { return base_::new_object(); }
	static jni::ref<org::omg::CORBA::ORB> init() { return call_static_method<"init", jni::ref<org::omg::CORBA::ORB>>(); }
	static jni::ref<org::omg::CORBA::ORB> init(jni::ref<jni::array<java::lang::String>> p1, jni::ref<java::util::Properties> p2) { return call_static_method<"init", jni::ref<org::omg::CORBA::ORB>>(p1, p2); }
	static jni::ref<org::omg::CORBA::ORB> init(jni::ref<java::applet::Applet> p1, jni::ref<java::util::Properties> p2) { return call_static_method<"init", jni::ref<org::omg::CORBA::ORB>>(p1, p2); }
	void connect(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"connect", void>(p1); }
	void destroy() { return call_method<"destroy", void>(); }
	void disconnect(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"disconnect", void>(p1); }
	jni::ref<jni::array<java::lang::String>> list_initial_services() { return call_method<"list_initial_services", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<org::omg::CORBA::Object> resolve_initial_references(jni::ref<java::lang::String> p1) { return call_method<"resolve_initial_references", jni::ref<org::omg::CORBA::Object>>(p1); }
	jni::ref<java::lang::String> object_to_string(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"object_to_string", jni::ref<java::lang::String>>(p1); }
	jni::ref<org::omg::CORBA::Object> string_to_object(jni::ref<java::lang::String> p1) { return call_method<"string_to_object", jni::ref<org::omg::CORBA::Object>>(p1); }
	jni::ref<org::omg::CORBA::NVList> create_list(jint p1) { return call_method<"create_list", jni::ref<org::omg::CORBA::NVList>>(p1); }
	jni::ref<org::omg::CORBA::NVList> create_operation_list(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"create_operation_list", jni::ref<org::omg::CORBA::NVList>>(p1); }
	jni::ref<org::omg::CORBA::NamedValue> create_named_value(jni::ref<java::lang::String> p1, jni::ref<org::omg::CORBA::Any> p2, jint p3) { return call_method<"create_named_value", jni::ref<org::omg::CORBA::NamedValue>>(p1, p2, p3); }
	jni::ref<org::omg::CORBA::ExceptionList> create_exception_list() { return call_method<"create_exception_list", jni::ref<org::omg::CORBA::ExceptionList>>(); }
	jni::ref<org::omg::CORBA::ContextList> create_context_list() { return call_method<"create_context_list", jni::ref<org::omg::CORBA::ContextList>>(); }
	jni::ref<org::omg::CORBA::Context> get_default_context() { return call_method<"get_default_context", jni::ref<org::omg::CORBA::Context>>(); }
	jni::ref<org::omg::CORBA::Environment> create_environment() { return call_method<"create_environment", jni::ref<org::omg::CORBA::Environment>>(); }
	jni::ref<org::omg::CORBA::portable::OutputStream> create_output_stream() { return call_method<"create_output_stream", jni::ref<org::omg::CORBA::portable::OutputStream>>(); }
	void send_multiple_requests_oneway(jni::ref<jni::array<org::omg::CORBA::Request>> p1) { return call_method<"send_multiple_requests_oneway", void>(p1); }
	void send_multiple_requests_deferred(jni::ref<jni::array<org::omg::CORBA::Request>> p1) { return call_method<"send_multiple_requests_deferred", void>(p1); }
	jboolean poll_next_response() { return call_method<"poll_next_response", jboolean>(); }
	jni::ref<org::omg::CORBA::Request> get_next_response() { return call_method<"get_next_response", jni::ref<org::omg::CORBA::Request>>(); }
	jni::ref<org::omg::CORBA::TypeCode> get_primitive_tc(jni::ref<org::omg::CORBA::TCKind> p1) { return call_method<"get_primitive_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> create_struct_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<org::omg::CORBA::StructMember>> p3) { return call_method<"create_struct_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2, p3); }
	jni::ref<org::omg::CORBA::TypeCode> create_union_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<org::omg::CORBA::TypeCode> p3, jni::ref<jni::array<org::omg::CORBA::UnionMember>> p4) { return call_method<"create_union_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2, p3, p4); }
	jni::ref<org::omg::CORBA::TypeCode> create_enum_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::String>> p3) { return call_method<"create_enum_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2, p3); }
	jni::ref<org::omg::CORBA::TypeCode> create_alias_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<org::omg::CORBA::TypeCode> p3) { return call_method<"create_alias_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2, p3); }
	jni::ref<org::omg::CORBA::TypeCode> create_exception_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<org::omg::CORBA::StructMember>> p3) { return call_method<"create_exception_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2, p3); }
	jni::ref<org::omg::CORBA::TypeCode> create_interface_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"create_interface_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2); }
	jni::ref<org::omg::CORBA::TypeCode> create_string_tc(jint p1) { return call_method<"create_string_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> create_wstring_tc(jint p1) { return call_method<"create_wstring_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> create_sequence_tc(jint p1, jni::ref<org::omg::CORBA::TypeCode> p2) { return call_method<"create_sequence_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2); }
	jni::ref<org::omg::CORBA::TypeCode> create_recursive_sequence_tc(jint p1, jint p2) { return call_method<"create_recursive_sequence_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2); }
	jni::ref<org::omg::CORBA::TypeCode> create_array_tc(jint p1, jni::ref<org::omg::CORBA::TypeCode> p2) { return call_method<"create_array_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2); }
	jni::ref<org::omg::CORBA::TypeCode> create_native_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"create_native_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2); }
	jni::ref<org::omg::CORBA::TypeCode> create_abstract_interface_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"create_abstract_interface_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2); }
	jni::ref<org::omg::CORBA::TypeCode> create_fixed_tc(jshort p1, jshort p2) { return call_method<"create_fixed_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2); }
	jni::ref<org::omg::CORBA::TypeCode> create_value_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jshort p3, jni::ref<org::omg::CORBA::TypeCode> p4, jni::ref<jni::array<org::omg::CORBA::ValueMember>> p5) { return call_method<"create_value_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2, p3, p4, p5); }
	jni::ref<org::omg::CORBA::TypeCode> create_recursive_tc(jni::ref<java::lang::String> p1) { return call_method<"create_recursive_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> create_value_box_tc(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<org::omg::CORBA::TypeCode> p3) { return call_method<"create_value_box_tc", jni::ref<org::omg::CORBA::TypeCode>>(p1, p2, p3); }
	jni::ref<org::omg::CORBA::Any> create_any() { return call_method<"create_any", jni::ref<org::omg::CORBA::Any>>(); }
	jni::ref<org::omg::CORBA::Current> get_current() { return call_method<"get_current", jni::ref<org::omg::CORBA::Current>>(); }
	void run() { return call_method<"run", void>(); }
	void shutdown(jboolean p1) { return call_method<"shutdown", void>(p1); }
	jboolean work_pending() { return call_method<"work_pending", jboolean>(); }
	void perform_work() { return call_method<"perform_work", void>(); }
	jboolean get_service_information(jshort p1, jni::ref<org::omg::CORBA::ServiceInformationHolder> p2) { return call_method<"get_service_information", jboolean>(p1, p2); }
	jni::ref<org::omg::CORBA::DynAny> create_dyn_any(jni::ref<org::omg::CORBA::Any> p1) { return call_method<"create_dyn_any", jni::ref<org::omg::CORBA::DynAny>>(p1); }
	jni::ref<org::omg::CORBA::DynAny> create_basic_dyn_any(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"create_basic_dyn_any", jni::ref<org::omg::CORBA::DynAny>>(p1); }
	jni::ref<org::omg::CORBA::DynStruct> create_dyn_struct(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"create_dyn_struct", jni::ref<org::omg::CORBA::DynStruct>>(p1); }
	jni::ref<org::omg::CORBA::DynSequence> create_dyn_sequence(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"create_dyn_sequence", jni::ref<org::omg::CORBA::DynSequence>>(p1); }
	jni::ref<org::omg::CORBA::DynArray> create_dyn_array(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"create_dyn_array", jni::ref<org::omg::CORBA::DynArray>>(p1); }
	jni::ref<org::omg::CORBA::DynUnion> create_dyn_union(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"create_dyn_union", jni::ref<org::omg::CORBA::DynUnion>>(p1); }
	jni::ref<org::omg::CORBA::DynEnum> create_dyn_enum(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"create_dyn_enum", jni::ref<org::omg::CORBA::DynEnum>>(p1); }
	jni::ref<org::omg::CORBA::Policy> create_policy(jint p1, jni::ref<org::omg::CORBA::Any> p2) { return call_method<"create_policy", jni::ref<org::omg::CORBA::Policy>>(p1, p2); }

protected:

	ORB(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_CORBA_ORB
