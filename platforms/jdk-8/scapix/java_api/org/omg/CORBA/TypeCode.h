// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/omg/CORBA/portable/IDLEntity.h>

#ifndef SCAPIX_JAVA_API_ORG_OMG_CORBA_TYPECODE_FWD
#define SCAPIX_JAVA_API_ORG_OMG_CORBA_TYPECODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::omg::CORBA { class TypeCode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::omg::CORBA::TypeCode>
{
	static constexpr fixed_string class_name = "org/omg/CORBA/TypeCode";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::omg::CORBA::portable::IDLEntity>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_CORBA_TYPECODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_OMG_CORBA_TYPECODE)
#define SCAPIX_JAVA_API_ORG_OMG_CORBA_TYPECODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/Any.h>
#include <scapix/java_api/org/omg/CORBA/TCKind.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::omg::CORBA::TypeCode : public jni::object_base<"org/omg/CORBA/TypeCode",
	java::lang::Object,
	org::omg::CORBA::portable::IDLEntity>
{
public:

	static jni::ref<org::omg::CORBA::TypeCode> new_object() { return base_::new_object(); }
	jboolean equal(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"equal", jboolean>(p1); }
	jboolean equivalent(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"equivalent", jboolean>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> get_compact_typecode() { return call_method<"get_compact_typecode", jni::ref<org::omg::CORBA::TypeCode>>(); }
	jni::ref<org::omg::CORBA::TCKind> kind() { return call_method<"kind", jni::ref<org::omg::CORBA::TCKind>>(); }
	jni::ref<java::lang::String> id() { return call_method<"id", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> name() { return call_method<"name", jni::ref<java::lang::String>>(); }
	jint member_count() { return call_method<"member_count", jint>(); }
	jni::ref<java::lang::String> member_name(jint p1) { return call_method<"member_name", jni::ref<java::lang::String>>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> member_type(jint p1) { return call_method<"member_type", jni::ref<org::omg::CORBA::TypeCode>>(p1); }
	jni::ref<org::omg::CORBA::Any> member_label(jint p1) { return call_method<"member_label", jni::ref<org::omg::CORBA::Any>>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> discriminator_type() { return call_method<"discriminator_type", jni::ref<org::omg::CORBA::TypeCode>>(); }
	jint default_index() { return call_method<"default_index", jint>(); }
	jint length() { return call_method<"length", jint>(); }
	jni::ref<org::omg::CORBA::TypeCode> content_type() { return call_method<"content_type", jni::ref<org::omg::CORBA::TypeCode>>(); }
	jshort fixed_digits() { return call_method<"fixed_digits", jshort>(); }
	jshort fixed_scale() { return call_method<"fixed_scale", jshort>(); }
	jshort member_visibility(jint p1) { return call_method<"member_visibility", jshort>(p1); }
	jshort type_modifier() { return call_method<"type_modifier", jshort>(); }
	jni::ref<org::omg::CORBA::TypeCode> concrete_base_type() { return call_method<"concrete_base_type", jni::ref<org::omg::CORBA::TypeCode>>(); }

protected:

	TypeCode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_CORBA_TYPECODE
