// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_OMG_CORBA_PORTABLE_DELEGATE_FWD
#define SCAPIX_JAVA_API_ORG_OMG_CORBA_PORTABLE_DELEGATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::omg::CORBA::portable { class Delegate; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::omg::CORBA::portable::Delegate>
{
	static constexpr fixed_string class_name = "org/omg/CORBA/portable/Delegate";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_CORBA_PORTABLE_DELEGATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_OMG_CORBA_PORTABLE_DELEGATE)
#define SCAPIX_JAVA_API_ORG_OMG_CORBA_PORTABLE_DELEGATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/Context.h>
#include <scapix/java_api/org/omg/CORBA/ContextList.h>
#include <scapix/java_api/org/omg/CORBA/DomainManager.h>
#include <scapix/java_api/org/omg/CORBA/ExceptionList.h>
#include <scapix/java_api/org/omg/CORBA/NVList.h>
#include <scapix/java_api/org/omg/CORBA/NamedValue.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/CORBA/Policy.h>
#include <scapix/java_api/org/omg/CORBA/Request.h>
#include <scapix/java_api/org/omg/CORBA/SetOverrideType.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/ServantObject.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::omg::CORBA::portable::Delegate : public jni::object_base<"org/omg/CORBA/portable/Delegate",
	java::lang::Object>
{
public:

	static jni::ref<org::omg::CORBA::portable::Delegate> new_object() { return base_::new_object(); }
	jni::ref<org::omg::CORBA::Object> get_interface_def(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"get_interface_def", jni::ref<org::omg::CORBA::Object>>(p1); }
	jni::ref<org::omg::CORBA::Object> duplicate(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"duplicate", jni::ref<org::omg::CORBA::Object>>(p1); }
	void release(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"release", void>(p1); }
	jboolean is_a(jni::ref<org::omg::CORBA::Object> p1, jni::ref<java::lang::String> p2) { return call_method<"is_a", jboolean>(p1, p2); }
	jboolean non_existent(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"non_existent", jboolean>(p1); }
	jboolean is_equivalent(jni::ref<org::omg::CORBA::Object> p1, jni::ref<org::omg::CORBA::Object> p2) { return call_method<"is_equivalent", jboolean>(p1, p2); }
	jint hash(jni::ref<org::omg::CORBA::Object> p1, jint p2) { return call_method<"hash", jint>(p1, p2); }
	jni::ref<org::omg::CORBA::Request> request(jni::ref<org::omg::CORBA::Object> p1, jni::ref<java::lang::String> p2) { return call_method<"request", jni::ref<org::omg::CORBA::Request>>(p1, p2); }
	jni::ref<org::omg::CORBA::Request> create_request(jni::ref<org::omg::CORBA::Object> p1, jni::ref<org::omg::CORBA::Context> p2, jni::ref<java::lang::String> p3, jni::ref<org::omg::CORBA::NVList> p4, jni::ref<org::omg::CORBA::NamedValue> p5) { return call_method<"create_request", jni::ref<org::omg::CORBA::Request>>(p1, p2, p3, p4, p5); }
	jni::ref<org::omg::CORBA::Request> create_request(jni::ref<org::omg::CORBA::Object> p1, jni::ref<org::omg::CORBA::Context> p2, jni::ref<java::lang::String> p3, jni::ref<org::omg::CORBA::NVList> p4, jni::ref<org::omg::CORBA::NamedValue> p5, jni::ref<org::omg::CORBA::ExceptionList> p6, jni::ref<org::omg::CORBA::ContextList> p7) { return call_method<"create_request", jni::ref<org::omg::CORBA::Request>>(p1, p2, p3, p4, p5, p6, p7); }
	jni::ref<org::omg::CORBA::ORB> orb(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"orb", jni::ref<org::omg::CORBA::ORB>>(p1); }
	jni::ref<org::omg::CORBA::Policy> get_policy(jni::ref<org::omg::CORBA::Object> p1, jint p2) { return call_method<"get_policy", jni::ref<org::omg::CORBA::Policy>>(p1, p2); }
	jni::ref<jni::array<org::omg::CORBA::DomainManager>> get_domain_managers(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"get_domain_managers", jni::ref<jni::array<org::omg::CORBA::DomainManager>>>(p1); }
	jni::ref<org::omg::CORBA::Object> set_policy_override(jni::ref<org::omg::CORBA::Object> p1, jni::ref<jni::array<org::omg::CORBA::Policy>> p2, jni::ref<org::omg::CORBA::SetOverrideType> p3) { return call_method<"set_policy_override", jni::ref<org::omg::CORBA::Object>>(p1, p2, p3); }
	jboolean is_local(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"is_local", jboolean>(p1); }
	jni::ref<org::omg::CORBA::portable::ServantObject> servant_preinvoke(jni::ref<org::omg::CORBA::Object> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Class> p3) { return call_method<"servant_preinvoke", jni::ref<org::omg::CORBA::portable::ServantObject>>(p1, p2, p3); }
	void servant_postinvoke(jni::ref<org::omg::CORBA::Object> p1, jni::ref<org::omg::CORBA::portable::ServantObject> p2) { return call_method<"servant_postinvoke", void>(p1, p2); }
	jni::ref<org::omg::CORBA::portable::OutputStream> request(jni::ref<org::omg::CORBA::Object> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"request", jni::ref<org::omg::CORBA::portable::OutputStream>>(p1, p2, p3); }
	jni::ref<org::omg::CORBA::portable::InputStream> invoke(jni::ref<org::omg::CORBA::Object> p1, jni::ref<org::omg::CORBA::portable::OutputStream> p2) { return call_method<"invoke", jni::ref<org::omg::CORBA::portable::InputStream>>(p1, p2); }
	void releaseReply(jni::ref<org::omg::CORBA::Object> p1, jni::ref<org::omg::CORBA::portable::InputStream> p2) { return call_method<"releaseReply", void>(p1, p2); }
	jni::ref<java::lang::String> toString(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"toString", jni::ref<java::lang::String>>(p1); }
	jint hashCode(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"hashCode", jint>(p1); }
	jboolean equals(jni::ref<org::omg::CORBA::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"equals", jboolean>(p1, p2); }

protected:

	Delegate(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_CORBA_PORTABLE_DELEGATE
