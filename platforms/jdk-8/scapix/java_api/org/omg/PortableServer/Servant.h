// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_SERVANT_FWD
#define SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_SERVANT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::omg::PortableServer { class Servant; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::omg::PortableServer::Servant>
{
	static constexpr fixed_string class_name = "org/omg/PortableServer/Servant";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_SERVANT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_SERVANT)
#define SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_SERVANT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/PortableServer/POA.h>
#include <scapix/java_api/org/omg/PortableServer/portable/Delegate.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::omg::PortableServer::Servant : public jni::object_base<"org/omg/PortableServer/Servant",
	java::lang::Object>
{
public:

	static jni::ref<org::omg::PortableServer::Servant> new_object() { return base_::new_object(); }
	jni::ref<org::omg::PortableServer::portable::Delegate> _get_delegate() { return call_method<"_get_delegate", jni::ref<org::omg::PortableServer::portable::Delegate>>(); }
	void _set_delegate(jni::ref<org::omg::PortableServer::portable::Delegate> p1) { return call_method<"_set_delegate", void>(p1); }
	jni::ref<org::omg::CORBA::Object> _this_object() { return call_method<"_this_object", jni::ref<org::omg::CORBA::Object>>(); }
	jni::ref<org::omg::CORBA::Object> _this_object(jni::ref<org::omg::CORBA::ORB> p1) { return call_method<"_this_object", jni::ref<org::omg::CORBA::Object>>(p1); }
	jni::ref<org::omg::CORBA::ORB> _orb() { return call_method<"_orb", jni::ref<org::omg::CORBA::ORB>>(); }
	jni::ref<org::omg::PortableServer::POA> _poa() { return call_method<"_poa", jni::ref<org::omg::PortableServer::POA>>(); }
	jni::ref<jni::array<jbyte>> _object_id() { return call_method<"_object_id", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<org::omg::PortableServer::POA> _default_POA() { return call_method<"_default_POA", jni::ref<org::omg::PortableServer::POA>>(); }
	jboolean _is_a(jni::ref<java::lang::String> p1) { return call_method<"_is_a", jboolean>(p1); }
	jboolean _non_existent() { return call_method<"_non_existent", jboolean>(); }
	jni::ref<org::omg::CORBA::Object> _get_interface_def() { return call_method<"_get_interface_def", jni::ref<org::omg::CORBA::Object>>(); }
	jni::ref<jni::array<java::lang::String>> _all_interfaces(jni::ref<org::omg::PortableServer::POA> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"_all_interfaces", jni::ref<jni::array<java::lang::String>>>(p1, p2); }

protected:

	Servant(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_SERVANT
