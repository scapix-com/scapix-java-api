// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_POAOPERATIONS_FWD
#define SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_POAOPERATIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::omg::PortableServer { class POAOperations; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::omg::PortableServer::POAOperations>
{
	static constexpr fixed_string class_name = "org/omg/PortableServer/POAOperations";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_POAOPERATIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_POAOPERATIONS)
#define SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_POAOPERATIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/CORBA/Policy.h>
#include <scapix/java_api/org/omg/PortableServer/AdapterActivator.h>
#include <scapix/java_api/org/omg/PortableServer/IdAssignmentPolicy.h>
#include <scapix/java_api/org/omg/PortableServer/IdAssignmentPolicyValue.h>
#include <scapix/java_api/org/omg/PortableServer/IdUniquenessPolicy.h>
#include <scapix/java_api/org/omg/PortableServer/IdUniquenessPolicyValue.h>
#include <scapix/java_api/org/omg/PortableServer/ImplicitActivationPolicy.h>
#include <scapix/java_api/org/omg/PortableServer/ImplicitActivationPolicyValue.h>
#include <scapix/java_api/org/omg/PortableServer/LifespanPolicy.h>
#include <scapix/java_api/org/omg/PortableServer/LifespanPolicyValue.h>
#include <scapix/java_api/org/omg/PortableServer/POA.h>
#include <scapix/java_api/org/omg/PortableServer/POAManager.h>
#include <scapix/java_api/org/omg/PortableServer/RequestProcessingPolicy.h>
#include <scapix/java_api/org/omg/PortableServer/RequestProcessingPolicyValue.h>
#include <scapix/java_api/org/omg/PortableServer/Servant.h>
#include <scapix/java_api/org/omg/PortableServer/ServantManager.h>
#include <scapix/java_api/org/omg/PortableServer/ServantRetentionPolicy.h>
#include <scapix/java_api/org/omg/PortableServer/ServantRetentionPolicyValue.h>
#include <scapix/java_api/org/omg/PortableServer/ThreadPolicy.h>
#include <scapix/java_api/org/omg/PortableServer/ThreadPolicyValue.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::omg::PortableServer::POAOperations : public jni::object_base<"org/omg/PortableServer/POAOperations",
	java::lang::Object>
{
public:

	jni::ref<org::omg::PortableServer::POA> create_POA(jni::ref<java::lang::String> p1, jni::ref<org::omg::PortableServer::POAManager> p2, jni::ref<jni::array<org::omg::CORBA::Policy>> p3) { return call_method<"create_POA", jni::ref<org::omg::PortableServer::POA>>(p1, p2, p3); }
	jni::ref<org::omg::PortableServer::POA> find_POA(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"find_POA", jni::ref<org::omg::PortableServer::POA>>(p1, p2); }
	void destroy(jboolean p1, jboolean p2) { return call_method<"destroy", void>(p1, p2); }
	jni::ref<org::omg::PortableServer::ThreadPolicy> create_thread_policy(jni::ref<org::omg::PortableServer::ThreadPolicyValue> p1) { return call_method<"create_thread_policy", jni::ref<org::omg::PortableServer::ThreadPolicy>>(p1); }
	jni::ref<org::omg::PortableServer::LifespanPolicy> create_lifespan_policy(jni::ref<org::omg::PortableServer::LifespanPolicyValue> p1) { return call_method<"create_lifespan_policy", jni::ref<org::omg::PortableServer::LifespanPolicy>>(p1); }
	jni::ref<org::omg::PortableServer::IdUniquenessPolicy> create_id_uniqueness_policy(jni::ref<org::omg::PortableServer::IdUniquenessPolicyValue> p1) { return call_method<"create_id_uniqueness_policy", jni::ref<org::omg::PortableServer::IdUniquenessPolicy>>(p1); }
	jni::ref<org::omg::PortableServer::IdAssignmentPolicy> create_id_assignment_policy(jni::ref<org::omg::PortableServer::IdAssignmentPolicyValue> p1) { return call_method<"create_id_assignment_policy", jni::ref<org::omg::PortableServer::IdAssignmentPolicy>>(p1); }
	jni::ref<org::omg::PortableServer::ImplicitActivationPolicy> create_implicit_activation_policy(jni::ref<org::omg::PortableServer::ImplicitActivationPolicyValue> p1) { return call_method<"create_implicit_activation_policy", jni::ref<org::omg::PortableServer::ImplicitActivationPolicy>>(p1); }
	jni::ref<org::omg::PortableServer::ServantRetentionPolicy> create_servant_retention_policy(jni::ref<org::omg::PortableServer::ServantRetentionPolicyValue> p1) { return call_method<"create_servant_retention_policy", jni::ref<org::omg::PortableServer::ServantRetentionPolicy>>(p1); }
	jni::ref<org::omg::PortableServer::RequestProcessingPolicy> create_request_processing_policy(jni::ref<org::omg::PortableServer::RequestProcessingPolicyValue> p1) { return call_method<"create_request_processing_policy", jni::ref<org::omg::PortableServer::RequestProcessingPolicy>>(p1); }
	jni::ref<java::lang::String> the_name() { return call_method<"the_name", jni::ref<java::lang::String>>(); }
	jni::ref<org::omg::PortableServer::POA> the_parent() { return call_method<"the_parent", jni::ref<org::omg::PortableServer::POA>>(); }
	jni::ref<jni::array<org::omg::PortableServer::POA>> the_children() { return call_method<"the_children", jni::ref<jni::array<org::omg::PortableServer::POA>>>(); }
	jni::ref<org::omg::PortableServer::POAManager> the_POAManager() { return call_method<"the_POAManager", jni::ref<org::omg::PortableServer::POAManager>>(); }
	jni::ref<org::omg::PortableServer::AdapterActivator> the_activator() { return call_method<"the_activator", jni::ref<org::omg::PortableServer::AdapterActivator>>(); }
	void the_activator(jni::ref<org::omg::PortableServer::AdapterActivator> p1) { return call_method<"the_activator", void>(p1); }
	jni::ref<org::omg::PortableServer::ServantManager> get_servant_manager() { return call_method<"get_servant_manager", jni::ref<org::omg::PortableServer::ServantManager>>(); }
	void set_servant_manager(jni::ref<org::omg::PortableServer::ServantManager> p1) { return call_method<"set_servant_manager", void>(p1); }
	jni::ref<org::omg::PortableServer::Servant> get_servant() { return call_method<"get_servant", jni::ref<org::omg::PortableServer::Servant>>(); }
	void set_servant(jni::ref<org::omg::PortableServer::Servant> p1) { return call_method<"set_servant", void>(p1); }
	jni::ref<jni::array<jbyte>> activate_object(jni::ref<org::omg::PortableServer::Servant> p1) { return call_method<"activate_object", jni::ref<jni::array<jbyte>>>(p1); }
	void activate_object_with_id(jni::ref<jni::array<jbyte>> p1, jni::ref<org::omg::PortableServer::Servant> p2) { return call_method<"activate_object_with_id", void>(p1, p2); }
	void deactivate_object(jni::ref<jni::array<jbyte>> p1) { return call_method<"deactivate_object", void>(p1); }
	jni::ref<org::omg::CORBA::Object> create_reference(jni::ref<java::lang::String> p1) { return call_method<"create_reference", jni::ref<org::omg::CORBA::Object>>(p1); }
	jni::ref<org::omg::CORBA::Object> create_reference_with_id(jni::ref<jni::array<jbyte>> p1, jni::ref<java::lang::String> p2) { return call_method<"create_reference_with_id", jni::ref<org::omg::CORBA::Object>>(p1, p2); }
	jni::ref<jni::array<jbyte>> servant_to_id(jni::ref<org::omg::PortableServer::Servant> p1) { return call_method<"servant_to_id", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<org::omg::CORBA::Object> servant_to_reference(jni::ref<org::omg::PortableServer::Servant> p1) { return call_method<"servant_to_reference", jni::ref<org::omg::CORBA::Object>>(p1); }
	jni::ref<org::omg::PortableServer::Servant> reference_to_servant(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"reference_to_servant", jni::ref<org::omg::PortableServer::Servant>>(p1); }
	jni::ref<jni::array<jbyte>> reference_to_id(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"reference_to_id", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<org::omg::PortableServer::Servant> id_to_servant(jni::ref<jni::array<jbyte>> p1) { return call_method<"id_to_servant", jni::ref<org::omg::PortableServer::Servant>>(p1); }
	jni::ref<org::omg::CORBA::Object> id_to_reference(jni::ref<jni::array<jbyte>> p1) { return call_method<"id_to_reference", jni::ref<org::omg::CORBA::Object>>(p1); }
	jni::ref<jni::array<jbyte>> id() { return call_method<"id", jni::ref<jni::array<jbyte>>>(); }

protected:

	POAOperations(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_PORTABLESERVER_POAOPERATIONS
