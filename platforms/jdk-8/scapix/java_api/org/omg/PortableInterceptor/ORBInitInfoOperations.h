// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_ORBINITINFOOPERATIONS_FWD
#define SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_ORBINITINFOOPERATIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::omg::PortableInterceptor { class ORBInitInfoOperations; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::omg::PortableInterceptor::ORBInitInfoOperations>
{
	static constexpr fixed_string class_name = "org/omg/PortableInterceptor/ORBInitInfoOperations";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_ORBINITINFOOPERATIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_ORBINITINFOOPERATIONS)
#define SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_ORBINITINFOOPERATIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/IOP/CodecFactory.h>
#include <scapix/java_api/org/omg/PortableInterceptor/ClientRequestInterceptor.h>
#include <scapix/java_api/org/omg/PortableInterceptor/IORInterceptor.h>
#include <scapix/java_api/org/omg/PortableInterceptor/PolicyFactory.h>
#include <scapix/java_api/org/omg/PortableInterceptor/ServerRequestInterceptor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::omg::PortableInterceptor::ORBInitInfoOperations : public jni::object_base<"org/omg/PortableInterceptor/ORBInitInfoOperations",
	java::lang::Object>
{
public:

	jni::ref<jni::array<java::lang::String>> arguments() { return call_method<"arguments", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::lang::String> orb_id() { return call_method<"orb_id", jni::ref<java::lang::String>>(); }
	jni::ref<org::omg::IOP::CodecFactory> codec_factory() { return call_method<"codec_factory", jni::ref<org::omg::IOP::CodecFactory>>(); }
	void register_initial_reference(jni::ref<java::lang::String> p1, jni::ref<org::omg::CORBA::Object> p2) { return call_method<"register_initial_reference", void>(p1, p2); }
	jni::ref<org::omg::CORBA::Object> resolve_initial_references(jni::ref<java::lang::String> p1) { return call_method<"resolve_initial_references", jni::ref<org::omg::CORBA::Object>>(p1); }
	void add_client_request_interceptor(jni::ref<org::omg::PortableInterceptor::ClientRequestInterceptor> p1) { return call_method<"add_client_request_interceptor", void>(p1); }
	void add_server_request_interceptor(jni::ref<org::omg::PortableInterceptor::ServerRequestInterceptor> p1) { return call_method<"add_server_request_interceptor", void>(p1); }
	void add_ior_interceptor(jni::ref<org::omg::PortableInterceptor::IORInterceptor> p1) { return call_method<"add_ior_interceptor", void>(p1); }
	jint allocate_slot_id() { return call_method<"allocate_slot_id", jint>(); }
	void register_policy_factory(jint p1, jni::ref<org::omg::PortableInterceptor::PolicyFactory> p2) { return call_method<"register_policy_factory", void>(p1, p2); }

protected:

	ORBInitInfoOperations(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_ORBINITINFOOPERATIONS
