// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/omg/PortableInterceptor/RequestInfoOperations.h>

#ifndef SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_SERVERREQUESTINFOOPERATIONS_FWD
#define SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_SERVERREQUESTINFOOPERATIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::omg::PortableInterceptor { class ServerRequestInfoOperations; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::omg::PortableInterceptor::ServerRequestInfoOperations>
{
	static constexpr fixed_string class_name = "org/omg/PortableInterceptor/ServerRequestInfoOperations";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::omg::PortableInterceptor::RequestInfoOperations>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_SERVERREQUESTINFOOPERATIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_SERVERREQUESTINFOOPERATIONS)
#define SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_SERVERREQUESTINFOOPERATIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/Any.h>
#include <scapix/java_api/org/omg/CORBA/Policy.h>
#include <scapix/java_api/org/omg/IOP/ServiceContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::omg::PortableInterceptor::ServerRequestInfoOperations : public jni::object_base<"org/omg/PortableInterceptor/ServerRequestInfoOperations",
	java::lang::Object,
	org::omg::PortableInterceptor::RequestInfoOperations>
{
public:

	jni::ref<org::omg::CORBA::Any> sending_exception() { return call_method<"sending_exception", jni::ref<org::omg::CORBA::Any>>(); }
	jni::ref<jni::array<jbyte>> object_id() { return call_method<"object_id", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> adapter_id() { return call_method<"adapter_id", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::String> server_id() { return call_method<"server_id", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> orb_id() { return call_method<"orb_id", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::lang::String>> adapter_name() { return call_method<"adapter_name", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::lang::String> target_most_derived_interface() { return call_method<"target_most_derived_interface", jni::ref<java::lang::String>>(); }
	jni::ref<org::omg::CORBA::Policy> get_server_policy(jint p1) { return call_method<"get_server_policy", jni::ref<org::omg::CORBA::Policy>>(p1); }
	void set_slot(jint p1, jni::ref<org::omg::CORBA::Any> p2) { return call_method<"set_slot", void>(p1, p2); }
	jboolean target_is_a(jni::ref<java::lang::String> p1) { return call_method<"target_is_a", jboolean>(p1); }
	void add_reply_service_context(jni::ref<org::omg::IOP::ServiceContext> p1, jboolean p2) { return call_method<"add_reply_service_context", void>(p1, p2); }

protected:

	ServerRequestInfoOperations(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_OMG_PORTABLEINTERCEPTOR_SERVERREQUESTINFOOPERATIONS
