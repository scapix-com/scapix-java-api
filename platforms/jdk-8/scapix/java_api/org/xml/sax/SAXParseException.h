// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/xml/sax/SAXException.h>

#ifndef SCAPIX_JAVA_API_ORG_XML_SAX_SAXPARSEEXCEPTION_FWD
#define SCAPIX_JAVA_API_ORG_XML_SAX_SAXPARSEEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::xml::sax { class SAXParseException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::xml::sax::SAXParseException>
{
	static constexpr fixed_string class_name = "org/xml/sax/SAXParseException";
	using base_classes = std::tuple<scapix::java_api::org::xml::sax::SAXException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XML_SAX_SAXPARSEEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_XML_SAX_SAXPARSEEXCEPTION)
#define SCAPIX_JAVA_API_ORG_XML_SAX_SAXPARSEEXCEPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Exception.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::xml::sax::SAXParseException : public jni::object_base<"org/xml/sax/SAXParseException",
	org::xml::sax::SAXException>
{
public:

	static jni::ref<org::xml::sax::SAXParseException> new_object(jni::ref<java::lang::String> p1, jni::ref<org::xml::sax::Locator> p2) { return base_::new_object(p1, p2); }
	static jni::ref<org::xml::sax::SAXParseException> new_object(jni::ref<java::lang::String> p1, jni::ref<org::xml::sax::Locator> p2, jni::ref<java::lang::Exception> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<org::xml::sax::SAXParseException> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jint p4, jint p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<org::xml::sax::SAXParseException> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jint p4, jint p5, jni::ref<java::lang::Exception> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::lang::String> getPublicId() { return call_method<"getPublicId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSystemId() { return call_method<"getSystemId", jni::ref<java::lang::String>>(); }
	jint getLineNumber() { return call_method<"getLineNumber", jint>(); }
	jint getColumnNumber() { return call_method<"getColumnNumber", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SAXParseException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_XML_SAX_SAXPARSEEXCEPTION
