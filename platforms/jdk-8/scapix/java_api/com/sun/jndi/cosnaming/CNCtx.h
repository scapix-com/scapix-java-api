// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/naming/Context.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JNDI_COSNAMING_CNCTX_FWD
#define SCAPIX_JAVA_API_COM_SUN_JNDI_COSNAMING_CNCTX_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jndi::cosnaming { class CNCtx; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jndi::cosnaming::CNCtx>
{
	static constexpr fixed_string class_name = "com/sun/jndi/cosnaming/CNCtx";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::naming::Context>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JNDI_COSNAMING_CNCTX_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JNDI_COSNAMING_CNCTX)
#define SCAPIX_JAVA_API_COM_SUN_JNDI_COSNAMING_CNCTX

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Hashtable.h>
#include <scapix/java_api/javax/naming/Name.h>
#include <scapix/java_api/javax/naming/NameParser.h>
#include <scapix/java_api/javax/naming/NamingEnumeration.h>
#include <scapix/java_api/javax/naming/spi/ResolveResult.h>
#include <scapix/java_api/org/omg/CosNaming/NamingContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jndi::cosnaming::CNCtx : public jni::object_base<"com/sun/jndi/cosnaming/CNCtx",
	java::lang::Object,
	javax::naming::Context>
{
public:

	jni::ref<org::omg::CosNaming::NamingContext> _nc() { return get_field<"_nc", jni::ref<org::omg::CosNaming::NamingContext>>(); }
	void _nc(jni::ref<org::omg::CosNaming::NamingContext> v) { set_field<"_nc", jni::ref<org::omg::CosNaming::NamingContext>>(v); }
	static jboolean trustURLCodebase() { return get_static_field<"trustURLCodebase", jboolean>(); }

	static jni::ref<javax::naming::spi::ResolveResult> createUsingURL(jni::ref<java::lang::String> p1, jni::ref<java::util::Hashtable> p2) { return call_static_method<"createUsingURL", jni::ref<javax::naming::spi::ResolveResult>>(p1, p2); }
	jni::ref<java::lang::String> getNameInNamespace() { return call_method<"getNameInNamespace", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Object> lookup(jni::ref<java::lang::String> p1) { return call_method<"lookup", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> lookup(jni::ref<javax::naming::Name> p1) { return call_method<"lookup", jni::ref<java::lang::Object>>(p1); }
	void bind(jni::ref<javax::naming::Name> p1, jni::ref<java::lang::Object> p2) { return call_method<"bind", void>(p1, p2); }
	void bind(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"bind", void>(p1, p2); }
	void rebind(jni::ref<javax::naming::Name> p1, jni::ref<java::lang::Object> p2) { return call_method<"rebind", void>(p1, p2); }
	void rebind(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"rebind", void>(p1, p2); }
	void unbind(jni::ref<java::lang::String> p1) { return call_method<"unbind", void>(p1); }
	void unbind(jni::ref<javax::naming::Name> p1) { return call_method<"unbind", void>(p1); }
	void rename(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"rename", void>(p1, p2); }
	void rename(jni::ref<javax::naming::Name> p1, jni::ref<javax::naming::Name> p2) { return call_method<"rename", void>(p1, p2); }
	jni::ref<javax::naming::NamingEnumeration> list(jni::ref<java::lang::String> p1) { return call_method<"list", jni::ref<javax::naming::NamingEnumeration>>(p1); }
	jni::ref<javax::naming::NamingEnumeration> list(jni::ref<javax::naming::Name> p1) { return call_method<"list", jni::ref<javax::naming::NamingEnumeration>>(p1); }
	jni::ref<javax::naming::NamingEnumeration> listBindings(jni::ref<java::lang::String> p1) { return call_method<"listBindings", jni::ref<javax::naming::NamingEnumeration>>(p1); }
	jni::ref<javax::naming::NamingEnumeration> listBindings(jni::ref<javax::naming::Name> p1) { return call_method<"listBindings", jni::ref<javax::naming::NamingEnumeration>>(p1); }
	void destroySubcontext(jni::ref<java::lang::String> p1) { return call_method<"destroySubcontext", void>(p1); }
	void destroySubcontext(jni::ref<javax::naming::Name> p1) { return call_method<"destroySubcontext", void>(p1); }
	jni::ref<javax::naming::Context> createSubcontext(jni::ref<java::lang::String> p1) { return call_method<"createSubcontext", jni::ref<javax::naming::Context>>(p1); }
	jni::ref<javax::naming::Context> createSubcontext(jni::ref<javax::naming::Name> p1) { return call_method<"createSubcontext", jni::ref<javax::naming::Context>>(p1); }
	jni::ref<java::lang::Object> lookupLink(jni::ref<java::lang::String> p1) { return call_method<"lookupLink", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> lookupLink(jni::ref<javax::naming::Name> p1) { return call_method<"lookupLink", jni::ref<java::lang::Object>>(p1); }
	jni::ref<javax::naming::NameParser> getNameParser(jni::ref<java::lang::String> p1) { return call_method<"getNameParser", jni::ref<javax::naming::NameParser>>(p1); }
	jni::ref<javax::naming::NameParser> getNameParser(jni::ref<javax::naming::Name> p1) { return call_method<"getNameParser", jni::ref<javax::naming::NameParser>>(p1); }
	jni::ref<java::util::Hashtable> getEnvironment() { return call_method<"getEnvironment", jni::ref<java::util::Hashtable>>(); }
	jni::ref<java::lang::String> composeName(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"composeName", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<javax::naming::Name> composeName(jni::ref<javax::naming::Name> p1, jni::ref<javax::naming::Name> p2) { return call_method<"composeName", jni::ref<javax::naming::Name>>(p1, p2); }
	jni::ref<java::lang::Object> addToEnvironment(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"addToEnvironment", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> removeFromEnvironment(jni::ref<java::lang::String> p1) { return call_method<"removeFromEnvironment", jni::ref<java::lang::Object>>(p1); }
	void incEnumCount() { return call_method<"incEnumCount", void>(); }
	void decEnumCount() { return call_method<"decEnumCount", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	CNCtx(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JNDI_COSNAMING_CNCTX
