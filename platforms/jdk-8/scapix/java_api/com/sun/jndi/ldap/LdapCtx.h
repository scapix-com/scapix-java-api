// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/jndi/toolkit/ctx/ComponentDirContext.h>
#include <scapix/java_api/javax/naming/event/EventDirContext.h>
#include <scapix/java_api/javax/naming/ldap/LdapContext.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JNDI_LDAP_LDAPCTX_FWD
#define SCAPIX_JAVA_API_COM_SUN_JNDI_LDAP_LDAPCTX_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jndi::ldap { class LdapCtx; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jndi::ldap::LdapCtx>
{
	static constexpr fixed_string class_name = "com/sun/jndi/ldap/LdapCtx";
	using base_classes = std::tuple<scapix::java_api::com::sun::jndi::toolkit::ctx::ComponentDirContext, scapix::java_api::javax::naming::event::EventDirContext, scapix::java_api::javax::naming::ldap::LdapContext>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JNDI_LDAP_LDAPCTX_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JNDI_LDAP_LDAPCTX)
#define SCAPIX_JAVA_API_COM_SUN_JNDI_LDAP_LDAPCTX

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Hashtable.h>
#include <scapix/java_api/javax/naming/Name.h>
#include <scapix/java_api/javax/naming/NamingException.h>
#include <scapix/java_api/javax/naming/directory/SearchControls.h>
#include <scapix/java_api/javax/naming/event/NamingListener.h>
#include <scapix/java_api/javax/naming/ldap/Control.h>
#include <scapix/java_api/javax/naming/ldap/ExtendedRequest.h>
#include <scapix/java_api/javax/naming/ldap/ExtendedResponse.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jndi::ldap::LdapCtx : public jni::object_base<"com/sun/jndi/ldap/LdapCtx",
	com::sun::jndi::toolkit::ctx::ComponentDirContext,
	javax::naming::event::EventDirContext,
	javax::naming::ldap::LdapContext>
{
public:

	static jint DEFAULT_PORT() { return get_static_field<"DEFAULT_PORT", jint>(); }
	static jint DEFAULT_SSL_PORT() { return get_static_field<"DEFAULT_SSL_PORT", jint>(); }
	static jni::ref<java::lang::String> DEFAULT_HOST() { return get_static_field<"DEFAULT_HOST", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::jndi::ldap::LdapCtx> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3, jni::ref<java::util::Hashtable> p4, jboolean p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	jni::ref<javax::naming::ldap::LdapContext> newInstance(jni::ref<jni::array<javax::naming::ldap::Control>> p1) { return call_method<"newInstance", jni::ref<javax::naming::ldap::LdapContext>>(p1); }
	jni::ref<java::lang::String> getNameInNamespace() { return call_method<"getNameInNamespace", jni::ref<java::lang::String>>(); }
	jni::ref<javax::naming::Name> composeName(jni::ref<javax::naming::Name> p1, jni::ref<javax::naming::Name> p2) { return call_method<"composeName", jni::ref<javax::naming::Name>>(p1, p2); }
	jni::ref<java::util::Hashtable> getEnvironment() { return call_method<"getEnvironment", jni::ref<java::util::Hashtable>>(); }
	jni::ref<java::lang::Object> removeFromEnvironment(jni::ref<java::lang::String> p1) { return call_method<"removeFromEnvironment", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> addToEnvironment(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"addToEnvironment", jni::ref<java::lang::Object>>(p1, p2); }
	void close() { return call_method<"close", void>(); }
	void reconnect(jni::ref<jni::array<javax::naming::ldap::Control>> p1) { return call_method<"reconnect", void>(p1); }
	static jni::ref<javax::naming::NamingException> mapErrorCode(jint p1, jni::ref<java::lang::String> p2) { return call_static_method<"mapErrorCode", jni::ref<javax::naming::NamingException>>(p1, p2); }
	jni::ref<javax::naming::ldap::ExtendedResponse> extendedOperation(jni::ref<javax::naming::ldap::ExtendedRequest> p1) { return call_method<"extendedOperation", jni::ref<javax::naming::ldap::ExtendedResponse>>(p1); }
	void setRequestControls(jni::ref<jni::array<javax::naming::ldap::Control>> p1) { return call_method<"setRequestControls", void>(p1); }
	jni::ref<jni::array<javax::naming::ldap::Control>> getRequestControls() { return call_method<"getRequestControls", jni::ref<jni::array<javax::naming::ldap::Control>>>(); }
	jni::ref<jni::array<javax::naming::ldap::Control>> getConnectControls() { return call_method<"getConnectControls", jni::ref<jni::array<javax::naming::ldap::Control>>>(); }
	jni::ref<jni::array<javax::naming::ldap::Control>> getResponseControls() { return call_method<"getResponseControls", jni::ref<jni::array<javax::naming::ldap::Control>>>(); }
	void addNamingListener(jni::ref<javax::naming::Name> p1, jint p2, jni::ref<javax::naming::event::NamingListener> p3) { return call_method<"addNamingListener", void>(p1, p2, p3); }
	void addNamingListener(jni::ref<java::lang::String> p1, jint p2, jni::ref<javax::naming::event::NamingListener> p3) { return call_method<"addNamingListener", void>(p1, p2, p3); }
	void removeNamingListener(jni::ref<javax::naming::event::NamingListener> p1) { return call_method<"removeNamingListener", void>(p1); }
	void addNamingListener(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<javax::naming::directory::SearchControls> p3, jni::ref<javax::naming::event::NamingListener> p4) { return call_method<"addNamingListener", void>(p1, p2, p3, p4); }
	void addNamingListener(jni::ref<javax::naming::Name> p1, jni::ref<java::lang::String> p2, jni::ref<javax::naming::directory::SearchControls> p3, jni::ref<javax::naming::event::NamingListener> p4) { return call_method<"addNamingListener", void>(p1, p2, p3, p4); }
	void addNamingListener(jni::ref<javax::naming::Name> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::Object>> p3, jni::ref<javax::naming::directory::SearchControls> p4, jni::ref<javax::naming::event::NamingListener> p5) { return call_method<"addNamingListener", void>(p1, p2, p3, p4, p5); }
	void addNamingListener(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::Object>> p3, jni::ref<javax::naming::directory::SearchControls> p4, jni::ref<javax::naming::event::NamingListener> p5) { return call_method<"addNamingListener", void>(p1, p2, p3, p4, p5); }
	jboolean targetMustExist() { return call_method<"targetMustExist", jboolean>(); }

protected:

	LdapCtx(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JNDI_LDAP_LDAPCTX
