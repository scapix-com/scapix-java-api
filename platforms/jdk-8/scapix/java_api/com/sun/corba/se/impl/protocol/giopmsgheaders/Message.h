// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_GIOPMSGHEADERS_MESSAGE_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_GIOPMSGHEADERS_MESSAGE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::protocol::giopmsgheaders { class Message; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::protocol::giopmsgheaders::Message>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/protocol/giopmsgheaders/Message";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_GIOPMSGHEADERS_MESSAGE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_GIOPMSGHEADERS_MESSAGE)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_GIOPMSGHEADERS_MESSAGE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/FragmentMessage.h>
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/MessageHandler.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::protocol::giopmsgheaders::Message : public jni::object_base<"com/sun/corba/se/impl/protocol/giopmsgheaders/Message",
	java::lang::Object>
{
public:

	static jint defaultBufferSize() { return get_static_field<"defaultBufferSize", jint>(); }
	static jint GIOPBigEndian() { return get_static_field<"GIOPBigEndian", jint>(); }
	static jint GIOPLittleEndian() { return get_static_field<"GIOPLittleEndian", jint>(); }
	static jint GIOPBigMagic() { return get_static_field<"GIOPBigMagic", jint>(); }
	static jint GIOPLittleMagic() { return get_static_field<"GIOPLittleMagic", jint>(); }
	static jint GIOPMessageHeaderLength() { return get_static_field<"GIOPMessageHeaderLength", jint>(); }
	static jbyte LITTLE_ENDIAN_BIT() { return get_static_field<"LITTLE_ENDIAN_BIT", jbyte>(); }
	static jbyte MORE_FRAGMENTS_BIT() { return get_static_field<"MORE_FRAGMENTS_BIT", jbyte>(); }
	static jbyte FLAG_NO_FRAG_BIG_ENDIAN() { return get_static_field<"FLAG_NO_FRAG_BIG_ENDIAN", jbyte>(); }
	static jbyte TRAILING_TWO_BIT_BYTE_MASK() { return get_static_field<"TRAILING_TWO_BIT_BYTE_MASK", jbyte>(); }
	static jbyte THREAD_POOL_TO_USE_MASK() { return get_static_field<"THREAD_POOL_TO_USE_MASK", jbyte>(); }
	static jbyte CDR_ENC_VERSION() { return get_static_field<"CDR_ENC_VERSION", jbyte>(); }
	static jbyte JAVA_ENC_VERSION() { return get_static_field<"JAVA_ENC_VERSION", jbyte>(); }
	static jbyte GIOPRequest() { return get_static_field<"GIOPRequest", jbyte>(); }
	static jbyte GIOPReply() { return get_static_field<"GIOPReply", jbyte>(); }
	static jbyte GIOPCancelRequest() { return get_static_field<"GIOPCancelRequest", jbyte>(); }
	static jbyte GIOPLocateRequest() { return get_static_field<"GIOPLocateRequest", jbyte>(); }
	static jbyte GIOPLocateReply() { return get_static_field<"GIOPLocateReply", jbyte>(); }
	static jbyte GIOPCloseConnection() { return get_static_field<"GIOPCloseConnection", jbyte>(); }
	static jbyte GIOPMessageError() { return get_static_field<"GIOPMessageError", jbyte>(); }
	static jbyte GIOPFragment() { return get_static_field<"GIOPFragment", jbyte>(); }

	jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> getGIOPVersion() { return call_method<"getGIOPVersion", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	jbyte getEncodingVersion() { return call_method<"getEncodingVersion", jbyte>(); }
	jboolean isLittleEndian() { return call_method<"isLittleEndian", jboolean>(); }
	jboolean moreFragmentsToFollow() { return call_method<"moreFragmentsToFollow", jboolean>(); }
	jint getType() { return call_method<"getType", jint>(); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jni::ref<java::nio::ByteBuffer> getByteBuffer() { return call_method<"getByteBuffer", jni::ref<java::nio::ByteBuffer>>(); }
	jint getThreadPoolToUse() { return call_method<"getThreadPoolToUse", jint>(); }
	void read(jni::ref<org::omg::CORBA::portable::InputStream> p1) { return call_method<"read", void>(p1); }
	void write(jni::ref<org::omg::CORBA::portable::OutputStream> p1) { return call_method<"write", void>(p1); }
	void setSize(jni::ref<java::nio::ByteBuffer> p1, jint p2) { return call_method<"setSize", void>(p1, p2); }
	jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage> createFragmentMessage() { return call_method<"createFragmentMessage", jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage>>(); }
	void callback(jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::MessageHandler> p1) { return call_method<"callback", void>(p1); }
	void setByteBuffer(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"setByteBuffer", void>(p1); }
	void setEncodingVersion(jbyte p1) { return call_method<"setEncodingVersion", void>(p1); }

protected:

	Message(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_GIOPMSGHEADERS_MESSAGE
