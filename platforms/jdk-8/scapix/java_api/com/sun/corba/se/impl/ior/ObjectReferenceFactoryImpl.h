// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/impl/ior/ObjectReferenceProducerBase.h>
#include <scapix/java_api/org/omg/PortableInterceptor/ObjectReferenceFactory.h>
#include <scapix/java_api/org/omg/CORBA/portable/StreamableValue.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_OBJECTREFERENCEFACTORYIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_OBJECTREFERENCEFACTORYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::ior { class ObjectReferenceFactoryImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::ior::ObjectReferenceFactoryImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/ior/ObjectReferenceFactoryImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::impl::ior::ObjectReferenceProducerBase, scapix::java_api::org::omg::PortableInterceptor::ObjectReferenceFactory, scapix::java_api::org::omg::CORBA::portable::StreamableValue>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_OBJECTREFERENCEFACTORYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_OBJECTREFERENCEFACTORYIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_OBJECTREFERENCEFACTORYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/ior/IORFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IORTemplateList.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/TypeCode.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::ior::ObjectReferenceFactoryImpl : public jni::object_base<"com/sun/corba/se/impl/ior/ObjectReferenceFactoryImpl",
	com::sun::corba::se::impl::ior::ObjectReferenceProducerBase,
	org::omg::PortableInterceptor::ObjectReferenceFactory,
	org::omg::CORBA::portable::StreamableValue>
{
public:

	static jni::ref<java::lang::String> repositoryId() { return get_static_field<"repositoryId", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::corba::se::impl::ior::ObjectReferenceFactoryImpl> new_object(jni::ref<org::omg::CORBA::portable::InputStream> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::corba::se::impl::ior::ObjectReferenceFactoryImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::ior::IORTemplateList> p2) { return base_::new_object(p1, p2); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<jni::array<java::lang::String>> _truncatable_ids() { return call_method<"_truncatable_ids", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<org::omg::CORBA::TypeCode> _type() { return call_method<"_type", jni::ref<org::omg::CORBA::TypeCode>>(); }
	void _read(jni::ref<org::omg::CORBA::portable::InputStream> p1) { return call_method<"_read", void>(p1); }
	void _write(jni::ref<org::omg::CORBA::portable::OutputStream> p1) { return call_method<"_write", void>(p1); }
	jni::ref<com::sun::corba::se::spi::ior::IORFactory> getIORFactory() { return call_method<"getIORFactory", jni::ref<com::sun::corba::se::spi::ior::IORFactory>>(); }
	jni::ref<com::sun::corba::se::spi::ior::IORTemplateList> getIORTemplateList() { return call_method<"getIORTemplateList", jni::ref<com::sun::corba::se::spi::ior::IORTemplateList>>(); }

protected:

	ObjectReferenceFactoryImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_OBJECTREFERENCEFACTORYIMPL
