// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/Connection.h>
#include <scapix/java_api/com/sun/corba/se/spi/legacy/connection/Connection.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_TRANSPORT_CORBACONNECTION_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_TRANSPORT_CORBACONNECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::spi::transport { class CorbaConnection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::spi::transport::CorbaConnection>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/spi/transport/CorbaConnection";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::pept::transport::Connection, scapix::java_api::com::sun::corba::se::spi::legacy::connection::Connection>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_TRANSPORT_CORBACONNECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_TRANSPORT_CORBACONNECTION)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_TRANSPORT_CORBACONNECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/CodeSetComponentInfo_CodeSetContext.h>
#include <scapix/java_api/com/sun/corba/se/pept/protocol/MessageMediator.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/ResponseWaitingRoom.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IOR.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaMessageMediator.h>
#include <scapix/java_api/com/sun/org/omg/SendingContext/CodeBase.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/channels/SocketChannel.h>
#include <scapix/java_api/org/omg/CORBA/SystemException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::spi::transport::CorbaConnection : public jni::object_base<"com/sun/corba/se/spi/transport/CorbaConnection",
	java::lang::Object,
	com::sun::corba::se::pept::transport::Connection,
	com::sun::corba::se::spi::legacy::connection::Connection>
{
public:

	static jint OPENING() { return get_static_field<"OPENING", jint>(); }
	static jint ESTABLISHED() { return get_static_field<"ESTABLISHED", jint>(); }
	static jint CLOSE_SENT() { return get_static_field<"CLOSE_SENT", jint>(); }
	static jint CLOSE_RECVD() { return get_static_field<"CLOSE_RECVD", jint>(); }
	static jint ABORT() { return get_static_field<"ABORT", jint>(); }

	jboolean shouldUseDirectByteBuffers() { return call_method<"shouldUseDirectByteBuffers", jboolean>(); }
	jboolean shouldReadGiopHeaderOnly() { return call_method<"shouldReadGiopHeaderOnly", jboolean>(); }
	jni::ref<java::nio::ByteBuffer> read(jint p1, jint p2, jint p3, jlong p4) { return call_method<"read", jni::ref<java::nio::ByteBuffer>>(p1, p2, p3, p4); }
	jni::ref<java::nio::ByteBuffer> read(jni::ref<java::nio::ByteBuffer> p1, jint p2, jint p3, jlong p4) { return call_method<"read", jni::ref<java::nio::ByteBuffer>>(p1, p2, p3, p4); }
	void write(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"write", void>(p1); }
	void dprint(jni::ref<java::lang::String> p1) { return call_method<"dprint", void>(p1); }
	jint getNextRequestId() { return call_method<"getNextRequestId", jint>(); }
	jni::ref<com::sun::corba::se::spi::orb::ORB> getBroker() { return call_method<"getBroker", jni::ref<com::sun::corba::se::spi::orb::ORB>>(); }
	jni::ref<com::sun::corba::se::impl::encoding::CodeSetComponentInfo_CodeSetContext> getCodeSetContext() { return call_method<"getCodeSetContext", jni::ref<com::sun::corba::se::impl::encoding::CodeSetComponentInfo_CodeSetContext>>(); }
	void setCodeSetContext(jni::ref<com::sun::corba::se::impl::encoding::CodeSetComponentInfo_CodeSetContext> p1) { return call_method<"setCodeSetContext", void>(p1); }
	jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> clientRequestMapGet(jint p1) { return call_method<"clientRequestMapGet", jni::ref<com::sun::corba::se::pept::protocol::MessageMediator>>(p1); }
	void clientReply_1_1_Put(jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p1) { return call_method<"clientReply_1_1_Put", void>(p1); }
	jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> clientReply_1_1_Get() { return call_method<"clientReply_1_1_Get", jni::ref<com::sun::corba::se::pept::protocol::MessageMediator>>(); }
	void clientReply_1_1_Remove() { return call_method<"clientReply_1_1_Remove", void>(); }
	void serverRequest_1_1_Put(jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p1) { return call_method<"serverRequest_1_1_Put", void>(p1); }
	jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> serverRequest_1_1_Get() { return call_method<"serverRequest_1_1_Get", jni::ref<com::sun::corba::se::pept::protocol::MessageMediator>>(); }
	void serverRequest_1_1_Remove() { return call_method<"serverRequest_1_1_Remove", void>(); }
	jboolean isPostInitialContexts() { return call_method<"isPostInitialContexts", jboolean>(); }
	void setPostInitialContexts() { return call_method<"setPostInitialContexts", void>(); }
	void purgeCalls(jni::ref<org::omg::CORBA::SystemException> p1, jboolean p2, jboolean p3) { return call_method<"purgeCalls", void>(p1, p2, p3); }
	void setCodeBaseIOR(jni::ref<com::sun::corba::se::spi::ior::IOR> p1) { return call_method<"setCodeBaseIOR", void>(p1); }
	jni::ref<com::sun::corba::se::spi::ior::IOR> getCodeBaseIOR() { return call_method<"getCodeBaseIOR", jni::ref<com::sun::corba::se::spi::ior::IOR>>(); }
	jni::ref<com::sun::org::omg::SendingContext::CodeBase> getCodeBase() { return call_method<"getCodeBase", jni::ref<com::sun::org::omg::SendingContext::CodeBase>>(); }
	void sendCloseConnection(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1) { return call_method<"sendCloseConnection", void>(p1); }
	void sendMessageError(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1) { return call_method<"sendMessageError", void>(p1); }
	void sendCancelRequest(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1, jint p2) { return call_method<"sendCancelRequest", void>(p1, p2); }
	void sendCancelRequestWithLock(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1, jint p2) { return call_method<"sendCancelRequestWithLock", void>(p1, p2); }
	jni::ref<com::sun::corba::se::pept::transport::ResponseWaitingRoom> getResponseWaitingRoom() { return call_method<"getResponseWaitingRoom", jni::ref<com::sun::corba::se::pept::transport::ResponseWaitingRoom>>(); }
	void serverRequestMapPut(jint p1, jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p2) { return call_method<"serverRequestMapPut", void>(p1, p2); }
	jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> serverRequestMapGet(jint p1) { return call_method<"serverRequestMapGet", jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator>>(p1); }
	void serverRequestMapRemove(jint p1) { return call_method<"serverRequestMapRemove", void>(p1); }
	jni::ref<java::nio::channels::SocketChannel> getSocketChannel() { return call_method<"getSocketChannel", jni::ref<java::nio::channels::SocketChannel>>(); }
	void serverRequestProcessingBegins() { return call_method<"serverRequestProcessingBegins", void>(); }
	void serverRequestProcessingEnds() { return call_method<"serverRequestProcessingEnds", void>(); }
	void closeConnectionResources() { return call_method<"closeConnectionResources", void>(); }

protected:

	CorbaConnection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_TRANSPORT_CORBACONNECTION
