// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/impl/encoding/EncapsOutputStream.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::encoding { class TypeCodeOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::encoding::TypeCodeOutputStream>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/encoding/TypeCodeOutputStream";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::impl::encoding::EncapsOutputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEOUTPUTSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEOUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::encoding::TypeCodeOutputStream : public jni::object_base<"com/sun/corba/se/impl/encoding/TypeCodeOutputStream",
	com::sun::corba::se::impl::encoding::EncapsOutputStream>
{
public:

	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jboolean p2) { return base_::new_object(p1, p2); }
	jni::ref<org::omg::CORBA::portable::InputStream> create_input_stream() { return call_method<"create_input_stream", jni::ref<org::omg::CORBA::portable::InputStream>>(); }
	void setEnclosingOutputStream(jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p1) { return call_method<"setEnclosingOutputStream", void>(p1); }
	jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream> getTopLevelStream() { return call_method<"getTopLevelStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream>>(); }
	jint getTopLevelPosition() { return call_method<"getTopLevelPosition", jint>(); }
	void addIDAtPosition(jni::ref<java::lang::String> p1, jint p2) { return call_method<"addIDAtPosition", void>(p1, p2); }
	jint getPositionForID(jni::ref<java::lang::String> p1) { return call_method<"getPositionForID", jint>(p1); }
	void writeRawBuffer(jni::ref<org::omg::CORBA::portable::OutputStream> p1, jint p2) { return call_method<"writeRawBuffer", void>(p1, p2); }
	jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream> createEncapsulation(jni::ref<org::omg::CORBA::ORB> p1) { return call_method<"createEncapsulation", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream>>(p1); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream> wrapOutputStream(jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p1) { return call_static_method<"wrapOutputStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream>>(p1); }
	jint getPosition() { return call_method<"getPosition", jint>(); }
	jint getRealIndex(jint p1) { return call_method<"getRealIndex", jint>(p1); }
	jni::ref<jni::array<jbyte>> getTypeCodeBuffer() { return call_method<"getTypeCodeBuffer", jni::ref<jni::array<jbyte>>>(); }
	void printTypeMap() { return call_method<"printTypeMap", void>(); }

protected:

	TypeCodeOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEOUTPUTSTREAM
