// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_REPOSITORYIDUTILITY_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_REPOSITORYIDUTILITY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orbutil { class RepositoryIdUtility; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orbutil::RepositoryIdUtility>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orbutil/RepositoryIdUtility";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_REPOSITORYIDUTILITY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_REPOSITORYIDUTILITY)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_REPOSITORYIDUTILITY

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orbutil::RepositoryIdUtility : public jni::object_base<"com/sun/corba/se/impl/orbutil/RepositoryIdUtility",
	java::lang::Object>
{
public:

	static jint NO_TYPE_INFO() { return get_static_field<"NO_TYPE_INFO", jint>(); }
	static jint SINGLE_REP_TYPE_INFO() { return get_static_field<"SINGLE_REP_TYPE_INFO", jint>(); }
	static jint PARTIAL_LIST_TYPE_INFO() { return get_static_field<"PARTIAL_LIST_TYPE_INFO", jint>(); }

	jboolean isChunkedEncoding(jint p1) { return call_method<"isChunkedEncoding", jboolean>(p1); }
	jboolean isCodeBasePresent(jint p1) { return call_method<"isCodeBasePresent", jboolean>(p1); }
	jint getTypeInfo(jint p1) { return call_method<"getTypeInfo", jint>(p1); }
	jint getStandardRMIChunkedNoRepStrId() { return call_method<"getStandardRMIChunkedNoRepStrId", jint>(); }
	jint getCodeBaseRMIChunkedNoRepStrId() { return call_method<"getCodeBaseRMIChunkedNoRepStrId", jint>(); }
	jint getStandardRMIChunkedId() { return call_method<"getStandardRMIChunkedId", jint>(); }
	jint getCodeBaseRMIChunkedId() { return call_method<"getCodeBaseRMIChunkedId", jint>(); }
	jint getStandardRMIUnchunkedId() { return call_method<"getStandardRMIUnchunkedId", jint>(); }
	jint getCodeBaseRMIUnchunkedId() { return call_method<"getCodeBaseRMIUnchunkedId", jint>(); }
	jint getStandardRMIUnchunkedNoRepStrId() { return call_method<"getStandardRMIUnchunkedNoRepStrId", jint>(); }
	jint getCodeBaseRMIUnchunkedNoRepStrId() { return call_method<"getCodeBaseRMIUnchunkedNoRepStrId", jint>(); }

protected:

	RepositoryIdUtility(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_REPOSITORYIDUTILITY
