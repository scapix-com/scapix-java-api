// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_REPOSITORYID_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_REPOSITORYID_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::util { class RepositoryId; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::util::RepositoryId>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/util/RepositoryId";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_REPOSITORYID_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_REPOSITORYID)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_REPOSITORYID

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/util/RepositoryIdCache.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::util::RepositoryId : public jni::object_base<"com/sun/corba/se/impl/util/RepositoryId",
	java::lang::Object>
{
public:

	static jint kInitialValueTag() { return get_static_field<"kInitialValueTag", jint>(); }
	static jint kNoTypeInfo() { return get_static_field<"kNoTypeInfo", jint>(); }
	static jint kSingleRepTypeInfo() { return get_static_field<"kSingleRepTypeInfo", jint>(); }
	static jint kPartialListTypeInfo() { return get_static_field<"kPartialListTypeInfo", jint>(); }
	static jint kChunkedMask() { return get_static_field<"kChunkedMask", jint>(); }
	static jint kPreComputed_StandardRMIUnchunked() { return get_static_field<"kPreComputed_StandardRMIUnchunked", jint>(); }
	static jint kPreComputed_CodeBaseRMIUnchunked() { return get_static_field<"kPreComputed_CodeBaseRMIUnchunked", jint>(); }
	static jint kPreComputed_StandardRMIChunked() { return get_static_field<"kPreComputed_StandardRMIChunked", jint>(); }
	static jint kPreComputed_CodeBaseRMIChunked() { return get_static_field<"kPreComputed_CodeBaseRMIChunked", jint>(); }
	static jint kPreComputed_StandardRMIUnchunked_NoRep() { return get_static_field<"kPreComputed_StandardRMIUnchunked_NoRep", jint>(); }
	static jint kPreComputed_CodeBaseRMIUnchunked_NoRep() { return get_static_field<"kPreComputed_CodeBaseRMIUnchunked_NoRep", jint>(); }
	static jint kPreComputed_StandardRMIChunked_NoRep() { return get_static_field<"kPreComputed_StandardRMIChunked_NoRep", jint>(); }
	static jint kPreComputed_CodeBaseRMIChunked_NoRep() { return get_static_field<"kPreComputed_CodeBaseRMIChunked_NoRep", jint>(); }
	static jni::ref<java::lang::String> kWStringValueVersion() { return get_static_field<"kWStringValueVersion", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kWStringValueHash() { return get_static_field<"kWStringValueHash", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kWStringStubValue() { return get_static_field<"kWStringStubValue", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kWStringTypeStr() { return get_static_field<"kWStringTypeStr", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kWStringValueRepID() { return get_static_field<"kWStringValueRepID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kAnyRepID() { return get_static_field<"kAnyRepID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kClassDescValueHash() { return get_static_field<"kClassDescValueHash", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kClassDescStubValue() { return get_static_field<"kClassDescStubValue", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kClassDescTypeStr() { return get_static_field<"kClassDescTypeStr", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kClassDescValueRepID() { return get_static_field<"kClassDescValueRepID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kObjectValueHash() { return get_static_field<"kObjectValueHash", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kObjectStubValue() { return get_static_field<"kObjectStubValue", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kSequenceValueHash() { return get_static_field<"kSequenceValueHash", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kPrimitiveSequenceValueHash() { return get_static_field<"kPrimitiveSequenceValueHash", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kSerializableValueHash() { return get_static_field<"kSerializableValueHash", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kSerializableStubValue() { return get_static_field<"kSerializableStubValue", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kExternalizableValueHash() { return get_static_field<"kExternalizableValueHash", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kExternalizableStubValue() { return get_static_field<"kExternalizableStubValue", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kRemoteValueHash() { return get_static_field<"kRemoteValueHash", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kRemoteStubValue() { return get_static_field<"kRemoteStubValue", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kRemoteTypeStr() { return get_static_field<"kRemoteTypeStr", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> kRemoteValueRepID() { return get_static_field<"kRemoteValueRepID", jni::ref<java::lang::String>>(); }
	static jni::ref<com::sun::corba::se::impl::util::RepositoryIdCache> cache() { return get_static_field<"cache", jni::ref<com::sun::corba::se::impl::util::RepositoryIdCache>>(); }
	static jni::ref<java::lang::String> kjava_rmi_Remote() { return get_static_field<"kjava_rmi_Remote", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> korg_omg_CORBA_Object() { return get_static_field<"korg_omg_CORBA_Object", jni::ref<java::lang::String>>(); }
	static jni::ref<jni::array<java::lang::Class>> kNoParamTypes() { return get_static_field<"kNoParamTypes", jni::ref<jni::array<java::lang::Class>>>(); }
	static jni::ref<jni::array<java::lang::Object>> kNoArgs() { return get_static_field<"kNoArgs", jni::ref<jni::array<java::lang::Object>>>(); }

	jni::ref<java::lang::String> getUnqualifiedName() { return call_method<"getUnqualifiedName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDefinedInId() { return call_method<"getDefinedInId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getTypeString() { return call_method<"getTypeString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVersionString() { return call_method<"getVersionString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSerialVersionUID() { return call_method<"getSerialVersionUID", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getActualSerialVersionUID() { return call_method<"getActualSerialVersionUID", jni::ref<java::lang::String>>(); }
	jlong getSerialVersionUIDAsLong() { return call_method<"getSerialVersionUIDAsLong", jlong>(); }
	jlong getActualSerialVersionUIDAsLong() { return call_method<"getActualSerialVersionUIDAsLong", jlong>(); }
	jboolean isRMIValueType() { return call_method<"isRMIValueType", jboolean>(); }
	jboolean isIDLType() { return call_method<"isIDLType", jboolean>(); }
	jni::ref<java::lang::String> getRepositoryId() { return call_method<"getRepositoryId", jni::ref<java::lang::String>>(); }
	static jni::ref<jni::array<jbyte>> getByteArray(jni::ref<java::lang::String> p1) { return call_static_method<"getByteArray", jni::ref<jni::array<jbyte>>>(p1); }
	static void setByteArray(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_static_method<"setByteArray", void>(p1, p2); }
	jboolean isSequence() { return call_method<"isSequence", jboolean>(); }
	jboolean isSupportedFormat() { return call_method<"isSupportedFormat", jboolean>(); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Class> getAnyClassFromType() { return call_method<"getAnyClassFromType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> getClassFromType() { return call_method<"getClassFromType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> getClassFromType(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2) { return call_method<"getClassFromType", jni::ref<java::lang::Class>>(p1, p2); }
	jni::ref<java::lang::Class> getClassFromType(jni::ref<java::lang::String> p1) { return call_method<"getClassFromType", jni::ref<java::lang::Class>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jboolean useFullValueDescription(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2) { return call_static_method<"useFullValueDescription", jboolean>(p1, p2); }
	static jni::ref<java::lang::String> createSequenceRepID(jni::ref<java::lang::Object> p1) { return call_static_method<"createSequenceRepID", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> createSequenceRepID(jni::ref<java::lang::Class> p1) { return call_static_method<"createSequenceRepID", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> createForSpecialCase(jni::ref<java::lang::Class> p1) { return call_static_method<"createForSpecialCase", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> createForSpecialCase(jni::ref<java::io::Serializable> p1) { return call_static_method<"createForSpecialCase", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> createForJavaType(jni::ref<java::io::Serializable> p1) { return call_static_method<"createForJavaType", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> createForJavaType(jni::ref<java::lang::Class> p1) { return call_static_method<"createForJavaType", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> createForIDLType(jni::ref<java::lang::Class> p1, jint p2, jint p3) { return call_static_method<"createForIDLType", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> createForAnyType(jni::ref<java::lang::Class> p1) { return call_static_method<"createForAnyType", jni::ref<java::lang::String>>(p1); }
	static jboolean isAbstractBase(jni::ref<java::lang::Class> p1) { return call_static_method<"isAbstractBase", jboolean>(p1); }
	static jboolean isAnyRequired(jni::ref<java::lang::Class> p1) { return call_static_method<"isAnyRequired", jboolean>(p1); }
	static jlong fromHex(jni::ref<java::lang::String> p1) { return call_static_method<"fromHex", jlong>(p1); }
	static jni::ref<java::lang::String> convertToISOLatin1(jni::ref<java::lang::String> p1) { return call_static_method<"convertToISOLatin1", jni::ref<java::lang::String>>(p1); }
	static jint computeValueTag(jboolean p1, jint p2, jboolean p3) { return call_static_method<"computeValueTag", jint>(p1, p2, p3); }
	static jboolean isCodeBasePresent(jint p1) { return call_static_method<"isCodeBasePresent", jboolean>(p1); }
	static jint getTypeInfo(jint p1) { return call_static_method<"getTypeInfo", jint>(p1); }
	static jboolean isChunkedEncoding(jint p1) { return call_static_method<"isChunkedEncoding", jboolean>(p1); }
	static jni::ref<java::lang::String> getServerURL() { return call_static_method<"getServerURL", jni::ref<java::lang::String>>(); }

protected:

	RepositoryId(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_REPOSITORYID
