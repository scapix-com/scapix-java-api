// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_POLICIES_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_POLICIES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::oa::poa { class Policies; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::oa::poa::Policies>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/oa/poa/Policies";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_POLICIES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_POLICIES)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_POLICIES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/Policy.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::oa::poa::Policies : public jni::object_base<"com/sun/corba/se/impl/oa/poa/Policies",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::corba::se::impl::oa::poa::Policies> defaultPolicies() { return get_static_field<"defaultPolicies", jni::ref<com::sun::corba::se::impl::oa::poa::Policies>>(); }
	static jni::ref<com::sun::corba::se::impl::oa::poa::Policies> rootPOAPolicies() { return get_static_field<"rootPOAPolicies", jni::ref<com::sun::corba::se::impl::oa::poa::Policies>>(); }

	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<org::omg::CORBA::Policy> get_effective_policy(jint p1) { return call_method<"get_effective_policy", jni::ref<org::omg::CORBA::Policy>>(p1); }
	jboolean isOrbControlledThreads() { return call_method<"isOrbControlledThreads", jboolean>(); }
	jboolean isSingleThreaded() { return call_method<"isSingleThreaded", jboolean>(); }
	jboolean isTransient() { return call_method<"isTransient", jboolean>(); }
	jboolean isPersistent() { return call_method<"isPersistent", jboolean>(); }
	jboolean isUniqueIds() { return call_method<"isUniqueIds", jboolean>(); }
	jboolean isMultipleIds() { return call_method<"isMultipleIds", jboolean>(); }
	jboolean isUserAssignedIds() { return call_method<"isUserAssignedIds", jboolean>(); }
	jboolean isSystemAssignedIds() { return call_method<"isSystemAssignedIds", jboolean>(); }
	jboolean retainServants() { return call_method<"retainServants", jboolean>(); }
	jboolean useActiveMapOnly() { return call_method<"useActiveMapOnly", jboolean>(); }
	jboolean useDefaultServant() { return call_method<"useDefaultServant", jboolean>(); }
	jboolean useServantManager() { return call_method<"useServantManager", jboolean>(); }
	jboolean isImplicitlyActivated() { return call_method<"isImplicitlyActivated", jboolean>(); }
	jint servantCachingLevel() { return call_method<"servantCachingLevel", jint>(); }
	jboolean forceZeroPort() { return call_method<"forceZeroPort", jboolean>(); }
	jint getCopierId() { return call_method<"getCopierId", jint>(); }

protected:

	Policies(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_POLICIES
