// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BYTEBUFFERWITHINFO_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BYTEBUFFERWITHINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::encoding { class ByteBufferWithInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::encoding::ByteBufferWithInfo>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/encoding/ByteBufferWithInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BYTEBUFFERWITHINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BYTEBUFFERWITHINFO)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BYTEBUFFERWITHINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/BufferManagerWrite.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::encoding::ByteBufferWithInfo : public jni::object_base<"com/sun/corba/se/impl/encoding/ByteBufferWithInfo",
	java::lang::Object>
{
public:

	jni::ref<java::nio::ByteBuffer> byteBuffer() { return get_field<"byteBuffer", jni::ref<java::nio::ByteBuffer>>(); }
	void byteBuffer(jni::ref<java::nio::ByteBuffer> v) { set_field<"byteBuffer", jni::ref<java::nio::ByteBuffer>>(v); }
	jint buflen() { return get_field<"buflen", jint>(); }
	void buflen(jint v) { set_field<"buflen", jint>(v); }
	jint needed() { return get_field<"needed", jint>(); }
	void needed(jint v) { set_field<"needed", jint>(v); }
	jboolean fragmented() { return get_field<"fragmented", jboolean>(); }
	void fragmented(jboolean v) { set_field<"fragmented", jboolean>(v); }

	static jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<java::nio::ByteBuffer> p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<java::nio::ByteBuffer> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> new_object(jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> p1) { return base_::new_object(p1); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jint position() { return call_method<"position", jint>(); }
	void position(jint p1) { return call_method<"position", void>(p1); }
	void setLength(jint p1) { return call_method<"setLength", void>(p1); }
	void growBuffer(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return call_method<"growBuffer", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ByteBufferWithInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BYTEBUFFERWITHINFO
