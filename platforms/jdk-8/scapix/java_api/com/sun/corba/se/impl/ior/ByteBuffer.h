// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_BYTEBUFFER_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_BYTEBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::ior { class ByteBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::ior::ByteBuffer>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/ior/ByteBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_BYTEBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_BYTEBUFFER)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_BYTEBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::ior::ByteBuffer : public jni::object_base<"com/sun/corba/se/impl/ior/ByteBuffer",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::corba::se::impl::ior::ByteBuffer> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::ior::ByteBuffer> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::corba::se::impl::ior::ByteBuffer> new_object() { return base_::new_object(); }
	void trimToSize() { return call_method<"trimToSize", void>(); }
	jint capacity() { return call_method<"capacity", jint>(); }
	jint size() { return call_method<"size", jint>(); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	void append(jbyte p1) { return call_method<"append", void>(p1); }
	void append(jint p1) { return call_method<"append", void>(p1); }
	void append(jni::ref<java::lang::String> p1) { return call_method<"append", void>(p1); }
	jni::ref<jni::array<jbyte>> toArray() { return call_method<"toArray", jni::ref<jni::array<jbyte>>>(); }

protected:

	ByteBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_BYTEBUFFER
