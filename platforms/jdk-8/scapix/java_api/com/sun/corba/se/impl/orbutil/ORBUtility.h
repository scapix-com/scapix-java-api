// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBUTILITY_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBUTILITY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orbutil { class ORBUtility; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orbutil::ORBUtility>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orbutil/ORBUtility";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBUTILITY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBUTILITY)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBUTILITY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/ior/IOR.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaClientDelegate.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaMessageMediator.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/javax/rmi/CORBA/ValueHandler.h>
#include <scapix/java_api/org/omg/CORBA/Any.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/CORBA/SystemException.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orbutil::ORBUtility : public jni::object_base<"com/sun/corba/se/impl/orbutil/ORBUtility",
	java::lang::Object>
{
public:

	static void insertSystemException(jni::ref<org::omg::CORBA::SystemException> p1, jni::ref<org::omg::CORBA::Any> p2) { return call_static_method<"insertSystemException", void>(p1, p2); }
	static jni::ref<org::omg::CORBA::SystemException> extractSystemException(jni::ref<org::omg::CORBA::Any> p1) { return call_static_method<"extractSystemException", jni::ref<org::omg::CORBA::SystemException>>(p1); }
	static jni::ref<javax::rmi::CORBA::ValueHandler> createValueHandler() { return call_static_method<"createValueHandler", jni::ref<javax::rmi::CORBA::ValueHandler>>(); }
	static jboolean isForeignORB(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return call_static_method<"isForeignORB", jboolean>(p1); }
	static jint bytesToInt(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"bytesToInt", jint>(p1, p2); }
	static void intToBytes(jint p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return call_static_method<"intToBytes", void>(p1, p2, p3); }
	static jint hexOf(jchar p1) { return call_static_method<"hexOf", jint>(p1); }
	static void writeSystemException(jni::ref<org::omg::CORBA::SystemException> p1, jni::ref<org::omg::CORBA::portable::OutputStream> p2) { return call_static_method<"writeSystemException", void>(p1, p2); }
	static jni::ref<org::omg::CORBA::SystemException> readSystemException(jni::ref<org::omg::CORBA::portable::InputStream> p1) { return call_static_method<"readSystemException", jni::ref<org::omg::CORBA::SystemException>>(p1); }
	static jni::ref<java::lang::String> classNameOf(jni::ref<java::lang::String> p1) { return call_static_method<"classNameOf", jni::ref<java::lang::String>>(p1); }
	static jboolean isSystemException(jni::ref<java::lang::String> p1) { return call_static_method<"isSystemException", jboolean>(p1); }
	static jbyte getEncodingVersion(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::ior::IOR> p2) { return call_static_method<"getEncodingVersion", jbyte>(p1, p2); }
	static jni::ref<java::lang::String> repositoryIdOf(jni::ref<java::lang::String> p1) { return call_static_method<"repositoryIdOf", jni::ref<java::lang::String>>(p1); }
	static jni::ref<jni::array<jint>> parseVersion(jni::ref<java::lang::String> p1) { return call_static_method<"parseVersion", jni::ref<jni::array<jint>>>(p1); }
	static jint compareVersion(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jint>> p2) { return call_static_method<"compareVersion", jint>(p1, p2); }
	static jint compareVersion(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"compareVersion", jint>(p1, p2); }
	static jni::ref<java::lang::String> getThreadName(jni::ref<java::lang::Thread> p1) { return call_static_method<"getThreadName", jni::ref<java::lang::String>>(p1); }
	static void dprint(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2) { return call_static_method<"dprint", void>(p1, p2); }
	static void dprint(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"dprint", void>(p1, p2); }
	void dprint(jni::ref<java::lang::String> p1) { return call_method<"dprint", void>(p1); }
	static void dprintTrace(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2) { return call_static_method<"dprintTrace", void>(p1, p2); }
	static void dprint(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_static_method<"dprint", void>(p1, p2, p3); }
	static jni::ref<jni::array<java::lang::String>> concatenateStringArrays(jni::ref<jni::array<java::lang::String>> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_static_method<"concatenateStringArrays", jni::ref<jni::array<java::lang::String>>>(p1, p2); }
	static void throwNotSerializableForCorba(jni::ref<java::lang::String> p1) { return call_static_method<"throwNotSerializableForCorba", void>(p1); }
	static jbyte getMaxStreamFormatVersion() { return call_static_method<"getMaxStreamFormatVersion", jbyte>(); }
	static jni::ref<com::sun::corba::se::spi::protocol::CorbaClientDelegate> makeClientDelegate(jni::ref<com::sun::corba::se::spi::ior::IOR> p1) { return call_static_method<"makeClientDelegate", jni::ref<com::sun::corba::se::spi::protocol::CorbaClientDelegate>>(p1); }
	static jni::ref<org::omg::CORBA::Object> makeObjectReference(jni::ref<com::sun::corba::se::spi::ior::IOR> p1) { return call_static_method<"makeObjectReference", jni::ref<org::omg::CORBA::Object>>(p1); }
	static jni::ref<com::sun::corba::se::spi::ior::IOR> getIOR(jni::ref<org::omg::CORBA::Object> p1) { return call_static_method<"getIOR", jni::ref<com::sun::corba::se::spi::ior::IOR>>(p1); }
	static jni::ref<com::sun::corba::se::spi::ior::IOR> connectAndGetIOR(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<org::omg::CORBA::Object> p2) { return call_static_method<"connectAndGetIOR", jni::ref<com::sun::corba::se::spi::ior::IOR>>(p1, p2); }
	static jni::ref<java::lang::String> operationNameAndRequestId(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1) { return call_static_method<"operationNameAndRequestId", jni::ref<java::lang::String>>(p1); }
	static jboolean isPrintable(jchar p1) { return call_static_method<"isPrintable", jboolean>(p1); }
	static jni::ref<java::lang::String> getClassSecurityInfo(jni::ref<java::lang::Class> p1) { return call_static_method<"getClassSecurityInfo", jni::ref<java::lang::String>>(p1); }

protected:

	ORBUtility(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBUTILITY
