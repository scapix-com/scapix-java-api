// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/impl/orbutil/graph/Node.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_NODEIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_NODEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::presentation::rmi { class PresentationManagerImpl_NodeImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::presentation::rmi::PresentationManagerImpl_NodeImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/presentation/rmi/PresentationManagerImpl$NodeImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::impl::orbutil::graph::Node>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_NODEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_NODEIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_NODEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::corba::se::impl::presentation::rmi::PresentationManagerImpl_NodeImpl : public jni::object_base<"com/sun/corba/se/impl/presentation/rmi/PresentationManagerImpl$NodeImpl",
	java::lang::Object,
	com::sun::corba::se::impl::orbutil::graph::Node>
{
public:

	jni::ref<java::lang::Class> getInterface() { return call_method<"getInterface", jni::ref<java::lang::Class>>(); }
	static jni::ref<com::sun::corba::se::impl::presentation::rmi::PresentationManagerImpl_NodeImpl> new_object(jni::ref<java::lang::Class> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::String> getTypeId() { return call_method<"getTypeId", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Set> getChildren() { return call_method<"getChildren", jni::ref<java::util::Set>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	PresentationManagerImpl_NodeImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_NODEIMPL
