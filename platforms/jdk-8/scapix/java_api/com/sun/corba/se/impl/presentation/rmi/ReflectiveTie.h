// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/omg/PortableServer/Servant.h>
#include <scapix/java_api/javax/rmi/CORBA/Tie.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_REFLECTIVETIE_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_REFLECTIVETIE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::presentation::rmi { class ReflectiveTie; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::presentation::rmi::ReflectiveTie>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/presentation/rmi/ReflectiveTie";
	using base_classes = std::tuple<scapix::java_api::org::omg::PortableServer::Servant, scapix::java_api::javax::rmi::CORBA::Tie>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_REFLECTIVETIE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_REFLECTIVETIE)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_REFLECTIVETIE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/logging/ORBUtilSystemException.h>
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/PresentationManager.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/rmi/Remote.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/ResponseHandler.h>
#include <scapix/java_api/org/omg/PortableServer/POA.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::presentation::rmi::ReflectiveTie : public jni::object_base<"com/sun/corba/se/impl/presentation/rmi/ReflectiveTie",
	org::omg::PortableServer::Servant,
	javax::rmi::CORBA::Tie>
{
public:

	static jni::ref<com::sun::corba::se::impl::presentation::rmi::ReflectiveTie> new_object(jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager> p1, jni::ref<com::sun::corba::se::impl::logging::ORBUtilSystemException> p2) { return base_::new_object(p1, p2); }
	jni::ref<jni::array<java::lang::String>> _all_interfaces(jni::ref<org::omg::PortableServer::POA> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"_all_interfaces", jni::ref<jni::array<java::lang::String>>>(p1, p2); }
	void setTarget(jni::ref<java::rmi::Remote> p1) { return call_method<"setTarget", void>(p1); }
	jni::ref<java::rmi::Remote> getTarget() { return call_method<"getTarget", jni::ref<java::rmi::Remote>>(); }
	jni::ref<org::omg::CORBA::Object> thisObject() { return call_method<"thisObject", jni::ref<org::omg::CORBA::Object>>(); }
	void deactivate() { return call_method<"deactivate", void>(); }
	jni::ref<org::omg::CORBA::ORB> orb() { return call_method<"orb", jni::ref<org::omg::CORBA::ORB>>(); }
	void orb(jni::ref<org::omg::CORBA::ORB> p1) { return call_method<"orb", void>(p1); }
	jni::ref<org::omg::CORBA::portable::OutputStream> _invoke(jni::ref<java::lang::String> p1, jni::ref<org::omg::CORBA::portable::InputStream> p2, jni::ref<org::omg::CORBA::portable::ResponseHandler> p3) { return call_method<"_invoke", jni::ref<org::omg::CORBA::portable::OutputStream>>(p1, p2, p3); }

protected:

	ReflectiveTie(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_REFLECTIVETIE
