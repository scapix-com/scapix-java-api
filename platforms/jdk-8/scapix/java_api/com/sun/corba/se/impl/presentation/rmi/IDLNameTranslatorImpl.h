// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/IDLNameTranslator.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLNAMETRANSLATORIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLNAMETRANSLATORIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::presentation::rmi { class IDLNameTranslatorImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::presentation::rmi::IDLNameTranslatorImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/presentation/rmi/IDLNameTranslatorImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLNAMETRANSLATORIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLNAMETRANSLATORIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLNAMETRANSLATORIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::presentation::rmi::IDLNameTranslatorImpl : public jni::object_base<"com/sun/corba/se/impl/presentation/rmi/IDLNameTranslatorImpl",
	java::lang::Object,
	com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator>
{
public:

	static jni::ref<com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator> get(jni::ref<java::lang::Class> p1) { return call_static_method<"get", jni::ref<com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator>>(p1); }
	static jni::ref<com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator> get(jni::ref<jni::array<java::lang::Class>> p1) { return call_static_method<"get", jni::ref<com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator>>(p1); }
	static jni::ref<java::lang::String> getExceptionId(jni::ref<java::lang::Class> p1) { return call_static_method<"getExceptionId", jni::ref<java::lang::String>>(p1); }
	jni::ref<jni::array<java::lang::Class>> getInterfaces() { return call_method<"getInterfaces", jni::ref<jni::array<java::lang::Class>>>(); }
	jni::ref<jni::array<java::lang::reflect::Method>> getMethods() { return call_method<"getMethods", jni::ref<jni::array<java::lang::reflect::Method>>>(); }
	jni::ref<java::lang::reflect::Method> getMethod(jni::ref<java::lang::String> p1) { return call_method<"getMethod", jni::ref<java::lang::reflect::Method>>(p1); }
	jni::ref<java::lang::String> getIDLName(jni::ref<java::lang::reflect::Method> p1) { return call_method<"getIDLName", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> charToUnicodeRepresentation(jchar p1) { return call_static_method<"charToUnicodeRepresentation", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	IDLNameTranslatorImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLNAMETRANSLATORIMPL
