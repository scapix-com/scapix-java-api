// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/org/omg/CORBA/ORB.h>
#include <scapix/java_api/com/sun/corba/se/pept/broker/Broker.h>
#include <scapix/java_api/com/sun/corba/se/impl/corba/TypeCodeFactory.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_ORB_ORB_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_ORB_ORB_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::spi::orb { class ORB; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::spi::orb::ORB>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/spi/orb/ORB";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::org::omg::CORBA::ORB, scapix::java_api::com::sun::corba::se::pept::broker::Broker, scapix::java_api::com::sun::corba::se::impl::corba::TypeCodeFactory>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_ORB_ORB_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_ORB_ORB)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_ORB_ORB

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/corba/TypeCodeImpl.h>
#include <scapix/java_api/com/sun/corba/se/impl/oa/poa/BadServerIdHandler.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/ByteBufferPool.h>
#include <scapix/java_api/com/sun/corba/se/spi/copyobject/CopierManager.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IOR.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IdentifiableFactoryFinder.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/ObjectKey.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/ObjectKeyFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/TaggedComponentFactoryFinder.h>
#include <scapix/java_api/com/sun/corba/se/spi/legacy/connection/LegacyServerSocketManager.h>
#include <scapix/java_api/com/sun/corba/se/spi/logging/LogWrapperBase.h>
#include <scapix/java_api/com/sun/corba/se/spi/logging/LogWrapperFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/monitoring/MonitoringManager.h>
#include <scapix/java_api/com/sun/corba/se/spi/oa/OAInvocationInfo.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORBData.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORBVersion.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/Operation.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/ThreadPoolManager.h>
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/PresentationManager.h>
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/PresentationManager_StubFactoryFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/ClientDelegateFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaServerRequestDispatcher.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/PIHandler.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/RequestDispatcherRegistry.h>
#include <scapix/java_api/com/sun/corba/se/spi/resolver/LocalResolver.h>
#include <scapix/java_api/com/sun/corba/se/spi/resolver/Resolver.h>
#include <scapix/java_api/com/sun/corba/se/spi/servicecontext/ServiceContextRegistry.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/CorbaContactInfoListFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/CorbaTransportManager.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/java/util/logging/Logger.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::spi::orb::ORB : public jni::object_base<"com/sun/corba/se/spi/orb/ORB",
	com::sun::corba::se::org::omg::CORBA::ORB,
	com::sun::corba::se::pept::broker::Broker,
	com::sun::corba::se::impl::corba::TypeCodeFactory>
{
public:

	static jboolean ORBInitDebug() { return get_static_field<"ORBInitDebug", jboolean>(); }
	static void ORBInitDebug(jboolean v) { set_static_field<"ORBInitDebug", jboolean>(v); }
	jboolean transportDebugFlag() { return get_field<"transportDebugFlag", jboolean>(); }
	void transportDebugFlag(jboolean v) { set_field<"transportDebugFlag", jboolean>(v); }
	jboolean subcontractDebugFlag() { return get_field<"subcontractDebugFlag", jboolean>(); }
	void subcontractDebugFlag(jboolean v) { set_field<"subcontractDebugFlag", jboolean>(v); }
	jboolean poaDebugFlag() { return get_field<"poaDebugFlag", jboolean>(); }
	void poaDebugFlag(jboolean v) { set_field<"poaDebugFlag", jboolean>(v); }
	jboolean poaConcurrencyDebugFlag() { return get_field<"poaConcurrencyDebugFlag", jboolean>(); }
	void poaConcurrencyDebugFlag(jboolean v) { set_field<"poaConcurrencyDebugFlag", jboolean>(v); }
	jboolean poaFSMDebugFlag() { return get_field<"poaFSMDebugFlag", jboolean>(); }
	void poaFSMDebugFlag(jboolean v) { set_field<"poaFSMDebugFlag", jboolean>(v); }
	jboolean orbdDebugFlag() { return get_field<"orbdDebugFlag", jboolean>(); }
	void orbdDebugFlag(jboolean v) { set_field<"orbdDebugFlag", jboolean>(v); }
	jboolean namingDebugFlag() { return get_field<"namingDebugFlag", jboolean>(); }
	void namingDebugFlag(jboolean v) { set_field<"namingDebugFlag", jboolean>(v); }
	jboolean serviceContextDebugFlag() { return get_field<"serviceContextDebugFlag", jboolean>(); }
	void serviceContextDebugFlag(jboolean v) { set_field<"serviceContextDebugFlag", jboolean>(v); }
	jboolean transientObjectManagerDebugFlag() { return get_field<"transientObjectManagerDebugFlag", jboolean>(); }
	void transientObjectManagerDebugFlag(jboolean v) { set_field<"transientObjectManagerDebugFlag", jboolean>(v); }
	jboolean giopVersionDebugFlag() { return get_field<"giopVersionDebugFlag", jboolean>(); }
	void giopVersionDebugFlag(jboolean v) { set_field<"giopVersionDebugFlag", jboolean>(v); }
	jboolean shutdownDebugFlag() { return get_field<"shutdownDebugFlag", jboolean>(); }
	void shutdownDebugFlag(jboolean v) { set_field<"shutdownDebugFlag", jboolean>(v); }
	jboolean giopDebugFlag() { return get_field<"giopDebugFlag", jboolean>(); }
	void giopDebugFlag(jboolean v) { set_field<"giopDebugFlag", jboolean>(v); }
	jboolean invocationTimingDebugFlag() { return get_field<"invocationTimingDebugFlag", jboolean>(); }
	void invocationTimingDebugFlag(jboolean v) { set_field<"invocationTimingDebugFlag", jboolean>(v); }
	jboolean orbInitDebugFlag() { return get_field<"orbInitDebugFlag", jboolean>(); }
	void orbInitDebugFlag(jboolean v) { set_field<"orbInitDebugFlag", jboolean>(v); }

	jboolean isLocalHost(jni::ref<java::lang::String> p1) { return call_method<"isLocalHost", jboolean>(p1); }
	jboolean isLocalServerId(jint p1, jint p2) { return call_method<"isLocalServerId", jboolean>(p1, p2); }
	jni::ref<com::sun::corba::se::spi::oa::OAInvocationInfo> peekInvocationInfo() { return call_method<"peekInvocationInfo", jni::ref<com::sun::corba::se::spi::oa::OAInvocationInfo>>(); }
	void pushInvocationInfo(jni::ref<com::sun::corba::se::spi::oa::OAInvocationInfo> p1) { return call_method<"pushInvocationInfo", void>(p1); }
	jni::ref<com::sun::corba::se::spi::oa::OAInvocationInfo> popInvocationInfo() { return call_method<"popInvocationInfo", jni::ref<com::sun::corba::se::spi::oa::OAInvocationInfo>>(); }
	jni::ref<com::sun::corba::se::spi::transport::CorbaTransportManager> getCorbaTransportManager() { return call_method<"getCorbaTransportManager", jni::ref<com::sun::corba::se::spi::transport::CorbaTransportManager>>(); }
	jni::ref<com::sun::corba::se::spi::legacy::connection::LegacyServerSocketManager> getLegacyServerSocketManager() { return call_method<"getLegacyServerSocketManager", jni::ref<com::sun::corba::se::spi::legacy::connection::LegacyServerSocketManager>>(); }
	void destroy() { return call_method<"destroy", void>(); }
	static jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager> getPresentationManager() { return call_static_method<"getPresentationManager", jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager>>(); }
	static jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager_StubFactoryFactory> getStubFactoryFactory() { return call_static_method<"getStubFactoryFactory", jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager_StubFactoryFactory>>(); }
	jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> get_primitive_tc(jint p1) { return call_method<"get_primitive_tc", jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl>>(p1); }
	void setTypeCode(jni::ref<java::lang::String> p1, jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> p2) { return call_method<"setTypeCode", void>(p1, p2); }
	jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> getTypeCode(jni::ref<java::lang::String> p1) { return call_method<"getTypeCode", jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl>>(p1); }
	jni::ref<com::sun::corba::se::spi::monitoring::MonitoringManager> getMonitoringManager() { return call_method<"getMonitoringManager", jni::ref<com::sun::corba::se::spi::monitoring::MonitoringManager>>(); }
	void set_parameters(jni::ref<java::util::Properties> p1) { return call_method<"set_parameters", void>(p1); }
	jni::ref<com::sun::corba::se::spi::orb::ORBVersion> getORBVersion() { return call_method<"getORBVersion", jni::ref<com::sun::corba::se::spi::orb::ORBVersion>>(); }
	void setORBVersion(jni::ref<com::sun::corba::se::spi::orb::ORBVersion> p1) { return call_method<"setORBVersion", void>(p1); }
	jni::ref<com::sun::corba::se::spi::ior::IOR> getFVDCodeBaseIOR() { return call_method<"getFVDCodeBaseIOR", jni::ref<com::sun::corba::se::spi::ior::IOR>>(); }
	void handleBadServerId(jni::ref<com::sun::corba::se::spi::ior::ObjectKey> p1) { return call_method<"handleBadServerId", void>(p1); }
	void setBadServerIdHandler(jni::ref<com::sun::corba::se::impl::oa::poa::BadServerIdHandler> p1) { return call_method<"setBadServerIdHandler", void>(p1); }
	void initBadServerIdHandler() { return call_method<"initBadServerIdHandler", void>(); }
	void notifyORB() { return call_method<"notifyORB", void>(); }
	jni::ref<com::sun::corba::se::spi::protocol::PIHandler> getPIHandler() { return call_method<"getPIHandler", jni::ref<com::sun::corba::se::spi::protocol::PIHandler>>(); }
	void checkShutdownState() { return call_method<"checkShutdownState", void>(); }
	jboolean isDuringDispatch() { return call_method<"isDuringDispatch", jboolean>(); }
	void startingDispatch() { return call_method<"startingDispatch", void>(); }
	void finishedDispatch() { return call_method<"finishedDispatch", void>(); }
	jint getTransientServerId() { return call_method<"getTransientServerId", jint>(); }
	jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContextRegistry> getServiceContextRegistry() { return call_method<"getServiceContextRegistry", jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContextRegistry>>(); }
	jni::ref<com::sun::corba::se::spi::protocol::RequestDispatcherRegistry> getRequestDispatcherRegistry() { return call_method<"getRequestDispatcherRegistry", jni::ref<com::sun::corba::se::spi::protocol::RequestDispatcherRegistry>>(); }
	jni::ref<com::sun::corba::se::spi::orb::ORBData> getORBData() { return call_method<"getORBData", jni::ref<com::sun::corba::se::spi::orb::ORBData>>(); }
	void setClientDelegateFactory(jni::ref<com::sun::corba::se::spi::protocol::ClientDelegateFactory> p1) { return call_method<"setClientDelegateFactory", void>(p1); }
	jni::ref<com::sun::corba::se::spi::protocol::ClientDelegateFactory> getClientDelegateFactory() { return call_method<"getClientDelegateFactory", jni::ref<com::sun::corba::se::spi::protocol::ClientDelegateFactory>>(); }
	void setCorbaContactInfoListFactory(jni::ref<com::sun::corba::se::spi::transport::CorbaContactInfoListFactory> p1) { return call_method<"setCorbaContactInfoListFactory", void>(p1); }
	jni::ref<com::sun::corba::se::spi::transport::CorbaContactInfoListFactory> getCorbaContactInfoListFactory() { return call_method<"getCorbaContactInfoListFactory", jni::ref<com::sun::corba::se::spi::transport::CorbaContactInfoListFactory>>(); }
	void setResolver(jni::ref<com::sun::corba::se::spi::resolver::Resolver> p1) { return call_method<"setResolver", void>(p1); }
	jni::ref<com::sun::corba::se::spi::resolver::Resolver> getResolver() { return call_method<"getResolver", jni::ref<com::sun::corba::se::spi::resolver::Resolver>>(); }
	void setLocalResolver(jni::ref<com::sun::corba::se::spi::resolver::LocalResolver> p1) { return call_method<"setLocalResolver", void>(p1); }
	jni::ref<com::sun::corba::se::spi::resolver::LocalResolver> getLocalResolver() { return call_method<"getLocalResolver", jni::ref<com::sun::corba::se::spi::resolver::LocalResolver>>(); }
	void setURLOperation(jni::ref<com::sun::corba::se::spi::orb::Operation> p1) { return call_method<"setURLOperation", void>(p1); }
	jni::ref<com::sun::corba::se::spi::orb::Operation> getURLOperation() { return call_method<"getURLOperation", jni::ref<com::sun::corba::se::spi::orb::Operation>>(); }
	void setINSDelegate(jni::ref<com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher> p1) { return call_method<"setINSDelegate", void>(p1); }
	jni::ref<com::sun::corba::se::spi::ior::TaggedComponentFactoryFinder> getTaggedComponentFactoryFinder() { return call_method<"getTaggedComponentFactoryFinder", jni::ref<com::sun::corba::se::spi::ior::TaggedComponentFactoryFinder>>(); }
	jni::ref<com::sun::corba::se::spi::ior::IdentifiableFactoryFinder> getTaggedProfileFactoryFinder() { return call_method<"getTaggedProfileFactoryFinder", jni::ref<com::sun::corba::se::spi::ior::IdentifiableFactoryFinder>>(); }
	jni::ref<com::sun::corba::se::spi::ior::IdentifiableFactoryFinder> getTaggedProfileTemplateFactoryFinder() { return call_method<"getTaggedProfileTemplateFactoryFinder", jni::ref<com::sun::corba::se::spi::ior::IdentifiableFactoryFinder>>(); }
	jni::ref<com::sun::corba::se::spi::ior::ObjectKeyFactory> getObjectKeyFactory() { return call_method<"getObjectKeyFactory", jni::ref<com::sun::corba::se::spi::ior::ObjectKeyFactory>>(); }
	void setObjectKeyFactory(jni::ref<com::sun::corba::se::spi::ior::ObjectKeyFactory> p1) { return call_method<"setObjectKeyFactory", void>(p1); }
	jni::ref<java::util::logging::Logger> getLogger(jni::ref<java::lang::String> p1) { return call_method<"getLogger", jni::ref<java::util::logging::Logger>>(p1); }
	static jni::ref<java::util::logging::Logger> staticGetLogger(jni::ref<java::lang::String> p1) { return call_static_method<"staticGetLogger", jni::ref<java::util::logging::Logger>>(p1); }
	jni::ref<com::sun::corba::se::spi::logging::LogWrapperBase> getLogWrapper(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::corba::se::spi::logging::LogWrapperFactory> p3) { return call_method<"getLogWrapper", jni::ref<com::sun::corba::se::spi::logging::LogWrapperBase>>(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::spi::logging::LogWrapperBase> staticGetLogWrapper(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::corba::se::spi::logging::LogWrapperFactory> p3) { return call_static_method<"staticGetLogWrapper", jni::ref<com::sun::corba::se::spi::logging::LogWrapperBase>>(p1, p2, p3); }
	jni::ref<com::sun::corba::se::pept::transport::ByteBufferPool> getByteBufferPool() { return call_method<"getByteBufferPool", jni::ref<com::sun::corba::se::pept::transport::ByteBufferPool>>(); }
	void setThreadPoolManager(jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolManager> p1) { return call_method<"setThreadPoolManager", void>(p1); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolManager> getThreadPoolManager() { return call_method<"getThreadPoolManager", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolManager>>(); }
	jni::ref<com::sun::corba::se::spi::copyobject::CopierManager> getCopierManager() { return call_method<"getCopierManager", jni::ref<com::sun::corba::se::spi::copyobject::CopierManager>>(); }
	void validateIORClass(jni::ref<java::lang::String> p1) { return call_method<"validateIORClass", void>(p1); }

protected:

	ORB(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_ORB_ORB
