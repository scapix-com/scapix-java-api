// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_IOR_IIOP_GIOPVERSION_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_IOR_IIOP_GIOPVERSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::spi::ior::iiop { class GIOPVersion; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::spi::ior::iiop::GIOPVersion>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/spi/ior/iiop/GIOPVersion";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_IOR_IIOP_GIOPVERSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_IOR_IIOP_GIOPVERSION)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_IOR_IIOP_GIOPVERSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/ior/IOR.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::spi::ior::iiop::GIOPVersion : public jni::object_base<"com/sun/corba/se/spi/ior/iiop/GIOPVersion",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> V1_0() { return get_static_field<"V1_0", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> V1_1() { return get_static_field<"V1_1", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> V1_2() { return get_static_field<"V1_2", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> V1_3() { return get_static_field<"V1_3", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> V13_XX() { return get_static_field<"V13_XX", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> DEFAULT_VERSION() { return get_static_field<"DEFAULT_VERSION", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	static jint VERSION_1_0() { return get_static_field<"VERSION_1_0", jint>(); }
	static jint VERSION_1_1() { return get_static_field<"VERSION_1_1", jint>(); }
	static jint VERSION_1_2() { return get_static_field<"VERSION_1_2", jint>(); }
	static jint VERSION_1_3() { return get_static_field<"VERSION_1_3", jint>(); }
	static jint VERSION_13_XX() { return get_static_field<"VERSION_13_XX", jint>(); }

	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> new_object(jbyte p1, jbyte p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	jbyte getMajor() { return call_method<"getMajor", jbyte>(); }
	jbyte getMinor() { return call_method<"getMinor", jbyte>(); }
	jboolean equals(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1) { return call_method<"equals", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean lessThan(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1) { return call_method<"lessThan", jboolean>(p1); }
	jint intValue() { return call_method<"intValue", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> getInstance(jbyte p1, jbyte p2) { return call_static_method<"getInstance", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(p1, p2); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> parseVersion(jni::ref<java::lang::String> p1) { return call_static_method<"parseVersion", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(p1); }
	static jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> chooseRequestVersion(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::ior::IOR> p2) { return call_static_method<"chooseRequestVersion", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(p1, p2); }
	jboolean supportsIORIIOPProfileComponents() { return call_method<"supportsIORIIOPProfileComponents", jboolean>(); }
	void read(jni::ref<org::omg::CORBA::portable::InputStream> p1) { return call_method<"read", void>(p1); }
	void write(jni::ref<org::omg::CORBA::portable::OutputStream> p1) { return call_method<"write", void>(p1); }

protected:

	GIOPVersion(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_IOR_IIOP_GIOPVERSION
