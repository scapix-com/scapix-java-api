// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/impl/encoding/CDROutputStreamBase.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_CDROUTPUTSTREAM_1_0_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_CDROUTPUTSTREAM_1_0_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::encoding { class CDROutputStream_1_0; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::encoding::CDROutputStream_1_0>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/encoding/CDROutputStream_1_0";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::impl::encoding::CDROutputStreamBase>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_CDROUTPUTSTREAM_1_0_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_CDROUTPUTSTREAM_1_0)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_CDROUTPUTSTREAM_1_0

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/BufferManagerWrite.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/ByteBufferWithInfo.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/org/omg/CORBA/Any.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/CORBA/Principal.h>
#include <scapix/java_api/org/omg/CORBA/TypeCode.h>
#include <scapix/java_api/org/omg/CORBA/portable/BoxedValueHelper.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::encoding::CDROutputStream_1_0 : public jni::object_base<"com/sun/corba/se/impl/encoding/CDROutputStream_1_0",
	com::sun::corba::se::impl::encoding::CDROutputStreamBase>
{
public:

	static jni::ref<com::sun::corba::se::impl::encoding::CDROutputStream_1_0> new_object() { return base_::new_object(); }
	void init(jni::ref<org::omg::CORBA::ORB> p1, jboolean p2, jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite> p3, jbyte p4, jboolean p5) { return call_method<"init", void>(p1, p2, p3, p4, p5); }
	void init(jni::ref<org::omg::CORBA::ORB> p1, jboolean p2, jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite> p3, jbyte p4) { return call_method<"init", void>(p1, p2, p3, p4); }
	jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite> getBufferManager() { return call_method<"getBufferManager", jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite>>(); }
	jni::ref<jni::array<jbyte>> toByteArray() { return call_method<"toByteArray", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> getGIOPVersion() { return call_method<"getGIOPVersion", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	void putEndian() { return call_method<"putEndian", void>(); }
	jboolean littleEndian() { return call_method<"littleEndian", jboolean>(); }
	void write_longdouble(jdouble p1) { return call_method<"write_longdouble", void>(p1); }
	void write_octet(jbyte p1) { return call_method<"write_octet", void>(p1); }
	void write_boolean(jboolean p1) { return call_method<"write_boolean", void>(p1); }
	void write_char(jchar p1) { return call_method<"write_char", void>(p1); }
	void write_wchar(jchar p1) { return call_method<"write_wchar", void>(p1); }
	void write_short(jshort p1) { return call_method<"write_short", void>(p1); }
	void write_ushort(jshort p1) { return call_method<"write_ushort", void>(p1); }
	void write_long(jint p1) { return call_method<"write_long", void>(p1); }
	void write_ulong(jint p1) { return call_method<"write_ulong", void>(p1); }
	void write_longlong(jlong p1) { return call_method<"write_longlong", void>(p1); }
	void write_ulonglong(jlong p1) { return call_method<"write_ulonglong", void>(p1); }
	void write_float(jfloat p1) { return call_method<"write_float", void>(p1); }
	void write_double(jdouble p1) { return call_method<"write_double", void>(p1); }
	void write_string(jni::ref<java::lang::String> p1) { return call_method<"write_string", void>(p1); }
	void write_wstring(jni::ref<java::lang::String> p1) { return call_method<"write_wstring", void>(p1); }
	void write_octet_array(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"write_octet_array", void>(p1, p2, p3); }
	void write_Principal(jni::ref<org::omg::CORBA::Principal> p1) { return call_method<"write_Principal", void>(p1); }
	void write_any(jni::ref<org::omg::CORBA::Any> p1) { return call_method<"write_any", void>(p1); }
	void write_TypeCode(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"write_TypeCode", void>(p1); }
	void write_Object(jni::ref<org::omg::CORBA::Object> p1) { return call_method<"write_Object", void>(p1); }
	void write_abstract_interface(jni::ref<java::lang::Object> p1) { return call_method<"write_abstract_interface", void>(p1); }
	void write_value(jni::ref<java::io::Serializable> p1, jni::ref<java::lang::Class> p2) { return call_method<"write_value", void>(p1, p2); }
	void write_value(jni::ref<java::io::Serializable> p1, jni::ref<java::lang::String> p2) { return call_method<"write_value", void>(p1, p2); }
	void write_value(jni::ref<java::io::Serializable> p1) { return call_method<"write_value", void>(p1); }
	void write_value(jni::ref<java::io::Serializable> p1, jni::ref<org::omg::CORBA::portable::BoxedValueHelper> p2) { return call_method<"write_value", void>(p1, p2); }
	jint get_offset() { return call_method<"get_offset", jint>(); }
	void start_block() { return call_method<"start_block", void>(); }
	void end_block() { return call_method<"end_block", void>(); }
	jni::ref<org::omg::CORBA::ORB> orb() { return call_method<"orb", jni::ref<org::omg::CORBA::ORB>>(); }
	void write_boolean_array(jni::ref<jni::array<jboolean>> p1, jint p2, jint p3) { return call_method<"write_boolean_array", void>(p1, p2, p3); }
	void write_char_array(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"write_char_array", void>(p1, p2, p3); }
	void write_wchar_array(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"write_wchar_array", void>(p1, p2, p3); }
	void write_short_array(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_method<"write_short_array", void>(p1, p2, p3); }
	void write_ushort_array(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_method<"write_ushort_array", void>(p1, p2, p3); }
	void write_long_array(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_method<"write_long_array", void>(p1, p2, p3); }
	void write_ulong_array(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_method<"write_ulong_array", void>(p1, p2, p3); }
	void write_longlong_array(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_method<"write_longlong_array", void>(p1, p2, p3); }
	void write_ulonglong_array(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_method<"write_ulonglong_array", void>(p1, p2, p3); }
	void write_float_array(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3) { return call_method<"write_float_array", void>(p1, p2, p3); }
	void write_double_array(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_method<"write_double_array", void>(p1, p2, p3); }
	void write_string_array(jni::ref<jni::array<java::lang::String>> p1, jint p2, jint p3) { return call_method<"write_string_array", void>(p1, p2, p3); }
	void write_wstring_array(jni::ref<jni::array<java::lang::String>> p1, jint p2, jint p3) { return call_method<"write_wstring_array", void>(p1, p2, p3); }
	void write_any_array(jni::ref<jni::array<org::omg::CORBA::Any>> p1, jint p2, jint p3) { return call_method<"write_any_array", void>(p1, p2, p3); }
	void writeTo(jni::ref<java::io::OutputStream> p1) { return call_method<"writeTo", void>(p1); }
	void writeOctetSequenceTo(jni::ref<org::omg::CORBA::portable::OutputStream> p1) { return call_method<"writeOctetSequenceTo", void>(p1); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jint getIndex() { return call_method<"getIndex", jint>(); }
	jboolean isLittleEndian() { return call_method<"isLittleEndian", jboolean>(); }
	void setIndex(jint p1) { return call_method<"setIndex", void>(p1); }
	jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> getByteBufferWithInfo() { return call_method<"getByteBufferWithInfo", jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo>>(); }
	void setByteBufferWithInfo(jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> p1) { return call_method<"setByteBufferWithInfo", void>(p1); }
	jni::ref<java::nio::ByteBuffer> getByteBuffer() { return call_method<"getByteBuffer", jni::ref<java::nio::ByteBuffer>>(); }
	void setByteBuffer(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"setByteBuffer", void>(p1); }
	void write_Abstract(jni::ref<java::lang::Object> p1) { return call_method<"write_Abstract", void>(p1); }
	void write_Value(jni::ref<java::io::Serializable> p1) { return call_method<"write_Value", void>(p1); }
	void write_fixed(jni::ref<java::math::BigDecimal> p1, jshort p2, jshort p3) { return call_method<"write_fixed", void>(p1, p2, p3); }
	void write_fixed(jni::ref<java::math::BigDecimal> p1) { return call_method<"write_fixed", void>(p1); }
	void write_fixed(jni::ref<java::lang::String> p1, jint p2) { return call_method<"write_fixed", void>(p1, p2); }
	jni::ref<jni::array<java::lang::String>> _truncatable_ids() { return call_method<"_truncatable_ids", jni::ref<jni::array<java::lang::String>>>(); }
	void printBuffer() { return call_method<"printBuffer", void>(); }
	static void printBuffer(jni::ref<com::sun::corba::se::impl::encoding::ByteBufferWithInfo> p1) { return call_static_method<"printBuffer", void>(p1); }
	void writeIndirection(jint p1, jint p2) { return call_method<"writeIndirection", void>(p1, p2); }
	void start_value(jni::ref<java::lang::String> p1) { return call_method<"start_value", void>(p1); }
	void end_value() { return call_method<"end_value", void>(); }
	void close() { return call_method<"close", void>(); }

protected:

	CDROutputStream_1_0(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_CDROUTPUTSTREAM_1_0
