// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractSet.h>
#include <scapix/java_api/com/sun/corba/se/impl/orbutil/graph/Graph.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_GRAPH_GRAPHIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_GRAPH_GRAPHIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orbutil::graph { class GraphImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orbutil::graph::GraphImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orbutil/graph/GraphImpl";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractSet, scapix::java_api::com::sun::corba::se::impl::orbutil::graph::Graph>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_GRAPH_GRAPHIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_GRAPH_GRAPHIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_GRAPH_GRAPHIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/orbutil/graph/Node.h>
#include <scapix/java_api/com/sun/corba/se/impl/orbutil/graph/NodeData.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orbutil::graph::GraphImpl : public jni::object_base<"com/sun/corba/se/impl/orbutil/graph/GraphImpl",
	java::util::AbstractSet,
	com::sun::corba::se::impl::orbutil::graph::Graph>
{
public:

	static jni::ref<com::sun::corba::se::impl::orbutil::graph::GraphImpl> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::corba::se::impl::orbutil::graph::GraphImpl> new_object(jni::ref<java::util::Collection> p1) { return base_::new_object(p1); }
	jboolean add(jni::ref<java::lang::Object> p1) { return call_method<"add", jboolean>(p1); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jint size() { return call_method<"size", jint>(); }
	jni::ref<com::sun::corba::se::impl::orbutil::graph::NodeData> getNodeData(jni::ref<com::sun::corba::se::impl::orbutil::graph::Node> p1) { return call_method<"getNodeData", jni::ref<com::sun::corba::se::impl::orbutil::graph::NodeData>>(p1); }
	jni::ref<java::util::Set> getRoots() { return call_method<"getRoots", jni::ref<java::util::Set>>(); }

protected:

	GraphImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_GRAPH_GRAPHIMPL
