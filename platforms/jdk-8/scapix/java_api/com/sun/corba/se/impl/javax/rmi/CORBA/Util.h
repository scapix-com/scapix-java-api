// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/rmi/CORBA/UtilDelegate.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_JAVAX_RMI_CORBA_UTIL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_JAVAX_RMI_CORBA_UTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::javax::rmi::CORBA { class Util; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::javax::rmi::CORBA::Util>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/javax/rmi/CORBA/Util";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::rmi::CORBA::UtilDelegate>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_JAVAX_RMI_CORBA_UTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_JAVAX_RMI_CORBA_UTIL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_JAVAX_RMI_CORBA_UTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/rmi/Remote.h>
#include <scapix/java_api/java/rmi/RemoteException.h>
#include <scapix/java_api/javax/rmi/CORBA/Stub.h>
#include <scapix/java_api/javax/rmi/CORBA/Tie.h>
#include <scapix/java_api/javax/rmi/CORBA/ValueHandler.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA/SystemException.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::javax::rmi::CORBA::Util : public jni::object_base<"com/sun/corba/se/impl/javax/rmi/CORBA/Util",
	java::lang::Object,
	javax::rmi::CORBA::UtilDelegate>
{
public:

	static jni::ref<com::sun::corba::se::impl::javax::rmi::CORBA::Util> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::corba::se::impl::javax::rmi::CORBA::Util> getInstance() { return call_static_method<"getInstance", jni::ref<com::sun::corba::se::impl::javax::rmi::CORBA::Util>>(); }
	static jboolean isInstanceDefined() { return call_static_method<"isInstanceDefined", jboolean>(); }
	void unregisterTargetsForORB(jni::ref<org::omg::CORBA::ORB> p1) { return call_method<"unregisterTargetsForORB", void>(p1); }
	jni::ref<java::rmi::RemoteException> mapSystemException(jni::ref<org::omg::CORBA::SystemException> p1) { return call_method<"mapSystemException", jni::ref<java::rmi::RemoteException>>(p1); }
	void writeAny(jni::ref<org::omg::CORBA::portable::OutputStream> p1, jni::ref<java::lang::Object> p2) { return call_method<"writeAny", void>(p1, p2); }
	jni::ref<java::lang::Object> readAny(jni::ref<org::omg::CORBA::portable::InputStream> p1) { return call_method<"readAny", jni::ref<java::lang::Object>>(p1); }
	void writeRemoteObject(jni::ref<org::omg::CORBA::portable::OutputStream> p1, jni::ref<java::lang::Object> p2) { return call_method<"writeRemoteObject", void>(p1, p2); }
	void writeAbstractObject(jni::ref<org::omg::CORBA::portable::OutputStream> p1, jni::ref<java::lang::Object> p2) { return call_method<"writeAbstractObject", void>(p1, p2); }
	void registerTarget(jni::ref<javax::rmi::CORBA::Tie> p1, jni::ref<java::rmi::Remote> p2) { return call_method<"registerTarget", void>(p1, p2); }
	void unexportObject(jni::ref<java::rmi::Remote> p1) { return call_method<"unexportObject", void>(p1); }
	jni::ref<javax::rmi::CORBA::Tie> getTie(jni::ref<java::rmi::Remote> p1) { return call_method<"getTie", jni::ref<javax::rmi::CORBA::Tie>>(p1); }
	jni::ref<javax::rmi::CORBA::ValueHandler> createValueHandler() { return call_method<"createValueHandler", jni::ref<javax::rmi::CORBA::ValueHandler>>(); }
	jni::ref<java::lang::String> getCodebase(jni::ref<java::lang::Class> p1) { return call_method<"getCodebase", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Class> loadClass(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::ClassLoader> p3) { return call_method<"loadClass", jni::ref<java::lang::Class>>(p1, p2, p3); }
	jboolean isLocal(jni::ref<javax::rmi::CORBA::Stub> p1) { return call_method<"isLocal", jboolean>(p1); }
	jni::ref<java::rmi::RemoteException> wrapException(jni::ref<java::lang::Throwable> p1) { return call_method<"wrapException", jni::ref<java::rmi::RemoteException>>(p1); }
	jni::ref<jni::array<java::lang::Object>> copyObjects(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<org::omg::CORBA::ORB> p2) { return call_method<"copyObjects", jni::ref<jni::array<java::lang::Object>>>(p1, p2); }
	jni::ref<java::lang::Object> copyObject(jni::ref<java::lang::Object> p1, jni::ref<org::omg::CORBA::ORB> p2) { return call_method<"copyObject", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	Util(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_JAVAX_RMI_CORBA_UTIL
