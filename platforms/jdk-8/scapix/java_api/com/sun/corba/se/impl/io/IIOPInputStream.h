// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/impl/io/InputStreamHook.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::io { class IIOPInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::io::IIOPInputStream>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/io/IIOPInputStream";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::impl::io::InputStreamHook>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPINPUTSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/omg/SendingContext/CodeBase.h>
#include <scapix/java_api/java/io/ObjectInputValidation.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/rmi/CORBA/ValueHandler.h>
#include <scapix/java_api/org/omg/CORBA/TypeCode.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::io::IIOPInputStream : public jni::object_base<"com/sun/corba/se/impl/io/IIOPInputStream",
	com::sun::corba::se::impl::io::InputStreamHook>
{
public:

	static jni::ref<org::omg::CORBA::TypeCode> kRemoteTypeCode() { return get_static_field<"kRemoteTypeCode", jni::ref<org::omg::CORBA::TypeCode>>(); }
	static jni::ref<org::omg::CORBA::TypeCode> kValueTypeCode() { return get_static_field<"kValueTypeCode", jni::ref<org::omg::CORBA::TypeCode>>(); }

	static void setTestFVDFlag(jboolean p1) { return call_static_method<"setTestFVDFlag", void>(p1); }
	static jni::ref<com::sun::corba::se::impl::io::IIOPInputStream> new_object() { return base_::new_object(); }
	void setSender(jni::ref<com::sun::org::omg::SendingContext::CodeBase> p1) { return call_method<"setSender", void>(p1); }
	jni::ref<com::sun::org::omg::SendingContext::CodeBase> getSender() { return call_method<"getSender", jni::ref<com::sun::org::omg::SendingContext::CodeBase>>(); }
	void setValueHandler(jni::ref<javax::rmi::CORBA::ValueHandler> p1) { return call_method<"setValueHandler", void>(p1); }
	jni::ref<javax::rmi::CORBA::ValueHandler> getValueHandler() { return call_method<"getValueHandler", jni::ref<javax::rmi::CORBA::ValueHandler>>(); }
	jni::ref<java::lang::Object> readObjectDelegate() { return call_method<"readObjectDelegate", jni::ref<java::lang::Object>>(); }
	void simpleSkipObject(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::omg::SendingContext::CodeBase> p2) { return call_method<"simpleSkipObject", void>(p1, p2); }
	jboolean enableResolveObjectDelegate(jboolean p1) { return call_method<"enableResolveObjectDelegate", jboolean>(p1); }
	void mark(jint p1) { return call_method<"mark", void>(p1); }
	jboolean markSupported() { return call_method<"markSupported", jboolean>(); }
	void reset() { return call_method<"reset", void>(); }
	jint available() { return call_method<"available", jint>(); }
	void close() { return call_method<"close", void>(); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	jboolean readBoolean() { return call_method<"readBoolean", jboolean>(); }
	jbyte readByte() { return call_method<"readByte", jbyte>(); }
	jchar readChar() { return call_method<"readChar", jchar>(); }
	jdouble readDouble() { return call_method<"readDouble", jdouble>(); }
	jfloat readFloat() { return call_method<"readFloat", jfloat>(); }
	void readFully(jni::ref<jni::array<jbyte>> p1) { return call_method<"readFully", void>(p1); }
	void readFully(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"readFully", void>(p1, p2, p3); }
	jint readInt() { return call_method<"readInt", jint>(); }
	jni::ref<java::lang::String> readLine() { return call_method<"readLine", jni::ref<java::lang::String>>(); }
	jlong readLong() { return call_method<"readLong", jlong>(); }
	jshort readShort() { return call_method<"readShort", jshort>(); }
	jint readUnsignedByte() { return call_method<"readUnsignedByte", jint>(); }
	jint readUnsignedShort() { return call_method<"readUnsignedShort", jint>(); }
	jni::ref<java::lang::String> readUTF() { return call_method<"readUTF", jni::ref<java::lang::String>>(); }
	void registerValidation(jni::ref<java::io::ObjectInputValidation> p1, jint p2) { return call_method<"registerValidation", void>(p1, p2); }
	jint skipBytes(jint p1) { return call_method<"skipBytes", jint>(p1); }

protected:

	IIOPInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPINPUTSTREAM
