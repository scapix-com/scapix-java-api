// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/impl/transport/EventHandlerBase.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/CorbaConnection.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/Work.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_TRANSPORT_SOCKETORCHANNELCONNECTIONIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_TRANSPORT_SOCKETORCHANNELCONNECTIONIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::transport { class SocketOrChannelConnectionImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/transport/SocketOrChannelConnectionImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::impl::transport::EventHandlerBase, scapix::java_api::com::sun::corba::se::spi::transport::CorbaConnection, scapix::java_api::com::sun::corba::se::spi::orbutil::threadpool::Work>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_TRANSPORT_SOCKETORCHANNELCONNECTIONIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_TRANSPORT_SOCKETORCHANNELCONNECTIONIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_TRANSPORT_SOCKETORCHANNELCONNECTIONIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/CodeSetComponentInfo_CodeSetContext.h>
#include <scapix/java_api/com/sun/corba/se/pept/encoding/InputObject.h>
#include <scapix/java_api/com/sun/corba/se/pept/encoding/OutputObject.h>
#include <scapix/java_api/com/sun/corba/se/pept/protocol/MessageMediator.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/Acceptor.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/Connection.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/ConnectionCache.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/ContactInfo.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/EventHandler.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/ResponseWaitingRoom.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IOR.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaMessageMediator.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/CorbaContactInfo.h>
#include <scapix/java_api/com/sun/org/omg/SendingContext/CodeBase.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/nio/channels/SelectableChannel.h>
#include <scapix/java_api/java/nio/channels/SocketChannel.h>
#include <scapix/java_api/org/omg/CORBA/SystemException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl : public jni::object_base<"com/sun/corba/se/impl/transport/SocketOrChannelConnectionImpl",
	com::sun::corba::se::impl::transport::EventHandlerBase,
	com::sun::corba::se::spi::transport::CorbaConnection,
	com::sun::corba::se::spi::orbutil::threadpool::Work>
{
public:

	static jboolean dprintWriteLocks() { return get_static_field<"dprintWriteLocks", jboolean>(); }
	static void dprintWriteLocks(jboolean v) { set_static_field<"dprintWriteLocks", jboolean>(v); }

	jni::ref<java::nio::channels::SocketChannel> getSocketChannel() { return call_method<"getSocketChannel", jni::ref<java::nio::channels::SocketChannel>>(); }
	static jni::ref<com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::transport::CorbaContactInfo> p2, jboolean p3, jboolean p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::String> p6, jint p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::transport::CorbaContactInfo> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jint p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::pept::transport::Acceptor> p2, jni::ref<java::net::Socket> p3, jboolean p4, jboolean p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::pept::transport::Acceptor> p2, jni::ref<java::net::Socket> p3) { return base_::new_object(p1, p2, p3); }
	jboolean shouldRegisterReadEvent() { return call_method<"shouldRegisterReadEvent", jboolean>(); }
	jboolean shouldRegisterServerReadEvent() { return call_method<"shouldRegisterServerReadEvent", jboolean>(); }
	jboolean read() { return call_method<"read", jboolean>(); }
	jboolean shouldUseDirectByteBuffers() { return call_method<"shouldUseDirectByteBuffers", jboolean>(); }
	jni::ref<java::nio::ByteBuffer> read(jint p1, jint p2, jint p3, jlong p4) { return call_method<"read", jni::ref<java::nio::ByteBuffer>>(p1, p2, p3, p4); }
	jni::ref<java::nio::ByteBuffer> read(jni::ref<java::nio::ByteBuffer> p1, jint p2, jint p3, jlong p4) { return call_method<"read", jni::ref<java::nio::ByteBuffer>>(p1, p2, p3, p4); }
	void readFully(jni::ref<java::nio::ByteBuffer> p1, jint p2, jlong p3) { return call_method<"readFully", void>(p1, p2, p3); }
	void readFully(jni::ref<java::io::InputStream> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jint p4, jlong p5) { return call_method<"readFully", void>(p1, p2, p3, p4, p5); }
	void write(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"write", void>(p1); }
	void close() { return call_method<"close", void>(); }
	void closeConnectionResources() { return call_method<"closeConnectionResources", void>(); }
	jni::ref<com::sun::corba::se::pept::transport::Acceptor> getAcceptor() { return call_method<"getAcceptor", jni::ref<com::sun::corba::se::pept::transport::Acceptor>>(); }
	jni::ref<com::sun::corba::se::pept::transport::ContactInfo> getContactInfo() { return call_method<"getContactInfo", jni::ref<com::sun::corba::se::pept::transport::ContactInfo>>(); }
	jni::ref<com::sun::corba::se::pept::transport::EventHandler> getEventHandler() { return call_method<"getEventHandler", jni::ref<com::sun::corba::se::pept::transport::EventHandler>>(); }
	jni::ref<com::sun::corba::se::pept::encoding::OutputObject> createOutputObject(jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p1) { return call_method<"createOutputObject", jni::ref<com::sun::corba::se::pept::encoding::OutputObject>>(p1); }
	jboolean isServer() { return call_method<"isServer", jboolean>(); }
	jboolean isBusy() { return call_method<"isBusy", jboolean>(); }
	jlong getTimeStamp() { return call_method<"getTimeStamp", jlong>(); }
	void setTimeStamp(jlong p1) { return call_method<"setTimeStamp", void>(p1); }
	void setState(jni::ref<java::lang::String> p1) { return call_method<"setState", void>(p1); }
	void writeLock() { return call_method<"writeLock", void>(); }
	void writeUnlock() { return call_method<"writeUnlock", void>(); }
	void sendWithoutLock(jni::ref<com::sun::corba::se::pept::encoding::OutputObject> p1) { return call_method<"sendWithoutLock", void>(p1); }
	void registerWaiter(jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p1) { return call_method<"registerWaiter", void>(p1); }
	void unregisterWaiter(jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p1) { return call_method<"unregisterWaiter", void>(p1); }
	jni::ref<com::sun::corba::se::pept::encoding::InputObject> waitForResponse(jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p1) { return call_method<"waitForResponse", jni::ref<com::sun::corba::se::pept::encoding::InputObject>>(p1); }
	void setConnectionCache(jni::ref<com::sun::corba::se::pept::transport::ConnectionCache> p1) { return call_method<"setConnectionCache", void>(p1); }
	jni::ref<com::sun::corba::se::pept::transport::ConnectionCache> getConnectionCache() { return call_method<"getConnectionCache", jni::ref<com::sun::corba::se::pept::transport::ConnectionCache>>(); }
	void setUseSelectThreadToWait(jboolean p1) { return call_method<"setUseSelectThreadToWait", void>(p1); }
	void handleEvent() { return call_method<"handleEvent", void>(); }
	jni::ref<java::nio::channels::SelectableChannel> getChannel() { return call_method<"getChannel", jni::ref<java::nio::channels::SelectableChannel>>(); }
	jint getInterestOps() { return call_method<"getInterestOps", jint>(); }
	jni::ref<com::sun::corba::se::pept::transport::Connection> getConnection() { return call_method<"getConnection", jni::ref<com::sun::corba::se::pept::transport::Connection>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void doWork() { return call_method<"doWork", void>(); }
	void setEnqueueTime(jlong p1) { return call_method<"setEnqueueTime", void>(p1); }
	jlong getEnqueueTime() { return call_method<"getEnqueueTime", jlong>(); }
	jboolean shouldReadGiopHeaderOnly() { return call_method<"shouldReadGiopHeaderOnly", jboolean>(); }
	jni::ref<com::sun::corba::se::pept::transport::ResponseWaitingRoom> getResponseWaitingRoom() { return call_method<"getResponseWaitingRoom", jni::ref<com::sun::corba::se::pept::transport::ResponseWaitingRoom>>(); }
	void serverRequestMapPut(jint p1, jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p2) { return call_method<"serverRequestMapPut", void>(p1, p2); }
	jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> serverRequestMapGet(jint p1) { return call_method<"serverRequestMapGet", jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator>>(p1); }
	void serverRequestMapRemove(jint p1) { return call_method<"serverRequestMapRemove", void>(p1); }
	jni::ref<java::net::Socket> getSocket() { return call_method<"getSocket", jni::ref<java::net::Socket>>(); }
	void serverRequestProcessingBegins() { return call_method<"serverRequestProcessingBegins", void>(); }
	void serverRequestProcessingEnds() { return call_method<"serverRequestProcessingEnds", void>(); }
	jint getNextRequestId() { return call_method<"getNextRequestId", jint>(); }
	jni::ref<com::sun::corba::se::spi::orb::ORB> getBroker() { return call_method<"getBroker", jni::ref<com::sun::corba::se::spi::orb::ORB>>(); }
	jni::ref<com::sun::corba::se::impl::encoding::CodeSetComponentInfo_CodeSetContext> getCodeSetContext() { return call_method<"getCodeSetContext", jni::ref<com::sun::corba::se::impl::encoding::CodeSetComponentInfo_CodeSetContext>>(); }
	void setCodeSetContext(jni::ref<com::sun::corba::se::impl::encoding::CodeSetComponentInfo_CodeSetContext> p1) { return call_method<"setCodeSetContext", void>(p1); }
	jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> clientRequestMapGet(jint p1) { return call_method<"clientRequestMapGet", jni::ref<com::sun::corba::se::pept::protocol::MessageMediator>>(p1); }
	void clientReply_1_1_Put(jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p1) { return call_method<"clientReply_1_1_Put", void>(p1); }
	jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> clientReply_1_1_Get() { return call_method<"clientReply_1_1_Get", jni::ref<com::sun::corba::se::pept::protocol::MessageMediator>>(); }
	void clientReply_1_1_Remove() { return call_method<"clientReply_1_1_Remove", void>(); }
	void serverRequest_1_1_Put(jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p1) { return call_method<"serverRequest_1_1_Put", void>(p1); }
	jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> serverRequest_1_1_Get() { return call_method<"serverRequest_1_1_Get", jni::ref<com::sun::corba::se::pept::protocol::MessageMediator>>(); }
	void serverRequest_1_1_Remove() { return call_method<"serverRequest_1_1_Remove", void>(); }
	jboolean isPostInitialContexts() { return call_method<"isPostInitialContexts", jboolean>(); }
	void setPostInitialContexts() { return call_method<"setPostInitialContexts", void>(); }
	void purgeCalls(jni::ref<org::omg::CORBA::SystemException> p1, jboolean p2, jboolean p3) { return call_method<"purgeCalls", void>(p1, p2, p3); }
	void sendCloseConnection(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1) { return call_method<"sendCloseConnection", void>(p1); }
	void sendMessageError(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1) { return call_method<"sendMessageError", void>(p1); }
	void sendCancelRequest(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1, jint p2) { return call_method<"sendCancelRequest", void>(p1, p2); }
	void sendCancelRequestWithLock(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1, jint p2) { return call_method<"sendCancelRequestWithLock", void>(p1, p2); }
	void setCodeBaseIOR(jni::ref<com::sun::corba::se::spi::ior::IOR> p1) { return call_method<"setCodeBaseIOR", void>(p1); }
	jni::ref<com::sun::corba::se::spi::ior::IOR> getCodeBaseIOR() { return call_method<"getCodeBaseIOR", jni::ref<com::sun::corba::se::spi::ior::IOR>>(); }
	jni::ref<com::sun::org::omg::SendingContext::CodeBase> getCodeBase() { return call_method<"getCodeBase", jni::ref<com::sun::org::omg::SendingContext::CodeBase>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void dprint(jni::ref<java::lang::String> p1) { return call_method<"dprint", void>(p1); }

protected:

	SocketOrChannelConnectionImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_TRANSPORT_SOCKETORCHANNELCONNECTIONIMPL
