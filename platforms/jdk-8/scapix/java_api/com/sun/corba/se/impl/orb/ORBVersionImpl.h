// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORBVersion.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBVERSIONIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBVERSIONIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orb { class ORBVersionImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orb::ORBVersionImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orb/ORBVersionImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::spi::orb::ORBVersion>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBVERSIONIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBVERSIONIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBVERSIONIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orb::ORBVersionImpl : public jni::object_base<"com/sun/corba/se/impl/orb/ORBVersionImpl",
	java::lang::Object,
	com::sun::corba::se::spi::orb::ORBVersion>
{
public:

	static jni::ref<com::sun::corba::se::spi::orb::ORBVersion> FOREIGN() { return get_static_field<"FOREIGN", jni::ref<com::sun::corba::se::spi::orb::ORBVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::orb::ORBVersion> OLD() { return get_static_field<"OLD", jni::ref<com::sun::corba::se::spi::orb::ORBVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::orb::ORBVersion> NEW() { return get_static_field<"NEW", jni::ref<com::sun::corba::se::spi::orb::ORBVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::orb::ORBVersion> JDK1_3_1_01() { return get_static_field<"JDK1_3_1_01", jni::ref<com::sun::corba::se::spi::orb::ORBVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::orb::ORBVersion> NEWER() { return get_static_field<"NEWER", jni::ref<com::sun::corba::se::spi::orb::ORBVersion>>(); }
	static jni::ref<com::sun::corba::se::spi::orb::ORBVersion> PEORB() { return get_static_field<"PEORB", jni::ref<com::sun::corba::se::spi::orb::ORBVersion>>(); }

	static jni::ref<com::sun::corba::se::impl::orb::ORBVersionImpl> new_object(jbyte p1) { return base_::new_object(p1); }
	jbyte getORBType() { return call_method<"getORBType", jbyte>(); }
	void write(jni::ref<org::omg::CORBA::portable::OutputStream> p1) { return call_method<"write", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean lessThan(jni::ref<com::sun::corba::se::spi::orb::ORBVersion> p1) { return call_method<"lessThan", jboolean>(p1); }
	jint compareTo(jni::ref<java::lang::Object> p1) { return call_method<"compareTo", jint>(p1); }

protected:

	ORBVersionImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBVERSIONIMPL
