// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/pept/protocol/MessageMediator.h>
#include <scapix/java_api/org/omg/CORBA/portable/ResponseHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAMESSAGEMEDIATOR_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAMESSAGEMEDIATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::spi::protocol { class CorbaMessageMediator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::spi::protocol::CorbaMessageMediator>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/spi/protocol/CorbaMessageMediator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::pept::protocol::MessageMediator, scapix::java_api::org::omg::CORBA::portable::ResponseHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAMESSAGEMEDIATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAMESSAGEMEDIATOR)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAMESSAGEMEDIATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/LocateReplyMessage.h>
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/LocateReplyOrReplyMessage.h>
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/Message.h>
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/ReplyMessage.h>
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/RequestMessage.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IOR.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/ObjectKey.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaProtocolHandler.h>
#include <scapix/java_api/com/sun/corba/se/spi/servicecontext/ServiceContexts.h>
#include <scapix/java_api/java/lang/Exception.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/org/omg/CORBA/Request.h>
#include <scapix/java_api/org/omg/CORBA/SystemException.h>
#include <scapix/java_api/org/omg/CORBA/portable/OutputStream.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/InputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::spi::protocol::CorbaMessageMediator : public jni::object_base<"com/sun/corba/se/spi/protocol/CorbaMessageMediator",
	java::lang::Object,
	com::sun::corba::se::pept::protocol::MessageMediator,
	org::omg::CORBA::portable::ResponseHandler>
{
public:

	void setReplyHeader(jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyOrReplyMessage> p1) { return call_method<"setReplyHeader", void>(p1); }
	jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyMessage> getLocateReplyHeader() { return call_method<"getLocateReplyHeader", jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyMessage>>(); }
	jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage> getReplyHeader() { return call_method<"getReplyHeader", jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage>>(); }
	void setReplyExceptionDetailMessage(jni::ref<java::lang::String> p1) { return call_method<"setReplyExceptionDetailMessage", void>(p1); }
	jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::RequestMessage> getRequestHeader() { return call_method<"getRequestHeader", jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::RequestMessage>>(); }
	jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> getGIOPVersion() { return call_method<"getGIOPVersion", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	jbyte getEncodingVersion() { return call_method<"getEncodingVersion", jbyte>(); }
	jint getRequestId() { return call_method<"getRequestId", jint>(); }
	jni::ref<java::lang::Integer> getRequestIdInteger() { return call_method<"getRequestIdInteger", jni::ref<java::lang::Integer>>(); }
	jboolean isOneWay() { return call_method<"isOneWay", jboolean>(); }
	jshort getAddrDisposition() { return call_method<"getAddrDisposition", jshort>(); }
	jni::ref<java::lang::String> getOperationName() { return call_method<"getOperationName", jni::ref<java::lang::String>>(); }
	jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContexts> getRequestServiceContexts() { return call_method<"getRequestServiceContexts", jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContexts>>(); }
	jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContexts> getReplyServiceContexts() { return call_method<"getReplyServiceContexts", jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContexts>>(); }
	jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::Message> getDispatchHeader() { return call_method<"getDispatchHeader", jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::Message>>(); }
	void setDispatchHeader(jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::Message> p1) { return call_method<"setDispatchHeader", void>(p1); }
	jni::ref<java::nio::ByteBuffer> getDispatchBuffer() { return call_method<"getDispatchBuffer", jni::ref<java::nio::ByteBuffer>>(); }
	void setDispatchBuffer(jni::ref<java::nio::ByteBuffer> p1) { return call_method<"setDispatchBuffer", void>(p1); }
	jint getThreadPoolToUse() { return call_method<"getThreadPoolToUse", jint>(); }
	jbyte getStreamFormatVersion() { return call_method<"getStreamFormatVersion", jbyte>(); }
	jbyte getStreamFormatVersionForReply() { return call_method<"getStreamFormatVersionForReply", jbyte>(); }
	void sendCancelRequestIfFinalFragmentNotSent() { return call_method<"sendCancelRequestIfFinalFragmentNotSent", void>(); }
	void setDIIInfo(jni::ref<org::omg::CORBA::Request> p1) { return call_method<"setDIIInfo", void>(p1); }
	jboolean isDIIRequest() { return call_method<"isDIIRequest", jboolean>(); }
	jni::ref<java::lang::Exception> unmarshalDIIUserException(jni::ref<java::lang::String> p1, jni::ref<org::omg::CORBA_2_3::portable::InputStream> p2) { return call_method<"unmarshalDIIUserException", jni::ref<java::lang::Exception>>(p1, p2); }
	void setDIIException(jni::ref<java::lang::Exception> p1) { return call_method<"setDIIException", void>(p1); }
	void handleDIIReply(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return call_method<"handleDIIReply", void>(p1); }
	jboolean isSystemExceptionReply() { return call_method<"isSystemExceptionReply", jboolean>(); }
	jboolean isUserExceptionReply() { return call_method<"isUserExceptionReply", jboolean>(); }
	jboolean isLocationForwardReply() { return call_method<"isLocationForwardReply", jboolean>(); }
	jboolean isDifferentAddrDispositionRequestedReply() { return call_method<"isDifferentAddrDispositionRequestedReply", jboolean>(); }
	jshort getAddrDispositionReply() { return call_method<"getAddrDispositionReply", jshort>(); }
	jni::ref<com::sun::corba::se::spi::ior::IOR> getForwardedIOR() { return call_method<"getForwardedIOR", jni::ref<com::sun::corba::se::spi::ior::IOR>>(); }
	jni::ref<org::omg::CORBA::SystemException> getSystemExceptionReply() { return call_method<"getSystemExceptionReply", jni::ref<org::omg::CORBA::SystemException>>(); }
	jni::ref<com::sun::corba::se::spi::ior::ObjectKey> getObjectKey() { return call_method<"getObjectKey", jni::ref<com::sun::corba::se::spi::ior::ObjectKey>>(); }
	void setProtocolHandler(jni::ref<com::sun::corba::se::spi::protocol::CorbaProtocolHandler> p1) { return call_method<"setProtocolHandler", void>(p1); }
	jni::ref<com::sun::corba::se::spi::protocol::CorbaProtocolHandler> getProtocolHandler() { return call_method<"getProtocolHandler", jni::ref<com::sun::corba::se::spi::protocol::CorbaProtocolHandler>>(); }
	jni::ref<org::omg::CORBA::portable::OutputStream> createReply() { return call_method<"createReply", jni::ref<org::omg::CORBA::portable::OutputStream>>(); }
	jni::ref<org::omg::CORBA::portable::OutputStream> createExceptionReply() { return call_method<"createExceptionReply", jni::ref<org::omg::CORBA::portable::OutputStream>>(); }
	jboolean executeReturnServantInResponseConstructor() { return call_method<"executeReturnServantInResponseConstructor", jboolean>(); }
	void setExecuteReturnServantInResponseConstructor(jboolean p1) { return call_method<"setExecuteReturnServantInResponseConstructor", void>(p1); }
	jboolean executeRemoveThreadInfoInResponseConstructor() { return call_method<"executeRemoveThreadInfoInResponseConstructor", jboolean>(); }
	void setExecuteRemoveThreadInfoInResponseConstructor(jboolean p1) { return call_method<"setExecuteRemoveThreadInfoInResponseConstructor", void>(p1); }
	jboolean executePIInResponseConstructor() { return call_method<"executePIInResponseConstructor", jboolean>(); }
	void setExecutePIInResponseConstructor(jboolean p1) { return call_method<"setExecutePIInResponseConstructor", void>(p1); }

protected:

	CorbaMessageMediator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAMESSAGEMEDIATOR
