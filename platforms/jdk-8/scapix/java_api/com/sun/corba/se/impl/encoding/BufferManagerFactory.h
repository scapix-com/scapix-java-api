// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BUFFERMANAGERFACTORY_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BUFFERMANAGERFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::encoding { class BufferManagerFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::encoding::BufferManagerFactory>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/encoding/BufferManagerFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BUFFERMANAGERFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BUFFERMANAGERFACTORY)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BUFFERMANAGERFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/BufferManagerRead.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/BufferManagerWrite.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::encoding::BufferManagerFactory : public jni::object_base<"com/sun/corba/se/impl/encoding/BufferManagerFactory",
	java::lang::Object>
{
public:

	static jint GROW() { return get_static_field<"GROW", jint>(); }
	static jint COLLECT() { return get_static_field<"COLLECT", jint>(); }
	static jint STREAM() { return get_static_field<"STREAM", jint>(); }

	static jni::ref<com::sun::corba::se::impl::encoding::BufferManagerFactory> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::corba::se::impl::encoding::BufferManagerRead> newBufferManagerRead(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1, jbyte p2, jni::ref<com::sun::corba::se::spi::orb::ORB> p3) { return call_static_method<"newBufferManagerRead", jni::ref<com::sun::corba::se::impl::encoding::BufferManagerRead>>(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::BufferManagerRead> newBufferManagerRead(jint p1, jbyte p2, jni::ref<com::sun::corba::se::spi::orb::ORB> p3) { return call_static_method<"newBufferManagerRead", jni::ref<com::sun::corba::se::impl::encoding::BufferManagerRead>>(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite> newBufferManagerWrite(jint p1, jbyte p2, jni::ref<com::sun::corba::se::spi::orb::ORB> p3) { return call_static_method<"newBufferManagerWrite", jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite>>(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite> newBufferManagerWrite(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1, jbyte p2, jni::ref<com::sun::corba::se::spi::orb::ORB> p3) { return call_static_method<"newBufferManagerWrite", jni::ref<com::sun::corba::se::impl::encoding::BufferManagerWrite>>(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::BufferManagerRead> defaultBufferManagerRead(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return call_static_method<"defaultBufferManagerRead", jni::ref<com::sun::corba::se::impl::encoding::BufferManagerRead>>(p1); }

protected:

	BufferManagerFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_BUFFERMANAGERFACTORY
