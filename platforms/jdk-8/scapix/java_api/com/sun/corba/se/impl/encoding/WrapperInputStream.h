// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/omg/CORBA_2_3/portable/InputStream.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/TypeCodeReader.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_WRAPPERINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_WRAPPERINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::encoding { class WrapperInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::encoding::WrapperInputStream>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/encoding/WrapperInputStream";
	using base_classes = std::tuple<scapix::java_api::org::omg::CORBA_2_3::portable::InputStream, scapix::java_api::com::sun::corba::se::impl::encoding::TypeCodeReader>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_WRAPPERINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_WRAPPERINPUTSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_WRAPPERINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/corba/TypeCodeImpl.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/CDRInputStream.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/org/omg/CORBA/Any.h>
#include <scapix/java_api/org/omg/CORBA/Context.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/CORBA/Principal.h>
#include <scapix/java_api/org/omg/CORBA/TypeCode.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::encoding::WrapperInputStream : public jni::object_base<"com/sun/corba/se/impl/encoding/WrapperInputStream",
	org::omg::CORBA_2_3::portable::InputStream,
	com::sun::corba::se::impl::encoding::TypeCodeReader>
{
public:

	static jni::ref<com::sun::corba::se::impl::encoding::WrapperInputStream> new_object(jni::ref<com::sun::corba::se::impl::encoding::CDRInputStream> p1) { return base_::new_object(p1); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> p1) { return call_method<"read", jint>(p1); }
	jint read(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	jlong skip(jlong p1) { return call_method<"skip", jlong>(p1); }
	jint available() { return call_method<"available", jint>(); }
	void close() { return call_method<"close", void>(); }
	void mark(jint p1) { return call_method<"mark", void>(p1); }
	void reset() { return call_method<"reset", void>(); }
	jboolean markSupported() { return call_method<"markSupported", jboolean>(); }
	jint getPosition() { return call_method<"getPosition", jint>(); }
	void consumeEndian() { return call_method<"consumeEndian", void>(); }
	jboolean read_boolean() { return call_method<"read_boolean", jboolean>(); }
	jchar read_char() { return call_method<"read_char", jchar>(); }
	jchar read_wchar() { return call_method<"read_wchar", jchar>(); }
	jbyte read_octet() { return call_method<"read_octet", jbyte>(); }
	jshort read_short() { return call_method<"read_short", jshort>(); }
	jshort read_ushort() { return call_method<"read_ushort", jshort>(); }
	jint read_long() { return call_method<"read_long", jint>(); }
	jint read_ulong() { return call_method<"read_ulong", jint>(); }
	jlong read_longlong() { return call_method<"read_longlong", jlong>(); }
	jlong read_ulonglong() { return call_method<"read_ulonglong", jlong>(); }
	jfloat read_float() { return call_method<"read_float", jfloat>(); }
	jdouble read_double() { return call_method<"read_double", jdouble>(); }
	jni::ref<java::lang::String> read_string() { return call_method<"read_string", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> read_wstring() { return call_method<"read_wstring", jni::ref<java::lang::String>>(); }
	void read_boolean_array(jni::ref<jni::array<jboolean>> p1, jint p2, jint p3) { return call_method<"read_boolean_array", void>(p1, p2, p3); }
	void read_char_array(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"read_char_array", void>(p1, p2, p3); }
	void read_wchar_array(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"read_wchar_array", void>(p1, p2, p3); }
	void read_octet_array(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"read_octet_array", void>(p1, p2, p3); }
	void read_short_array(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_method<"read_short_array", void>(p1, p2, p3); }
	void read_ushort_array(jni::ref<jni::array<jshort>> p1, jint p2, jint p3) { return call_method<"read_ushort_array", void>(p1, p2, p3); }
	void read_long_array(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_method<"read_long_array", void>(p1, p2, p3); }
	void read_ulong_array(jni::ref<jni::array<jint>> p1, jint p2, jint p3) { return call_method<"read_ulong_array", void>(p1, p2, p3); }
	void read_longlong_array(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_method<"read_longlong_array", void>(p1, p2, p3); }
	void read_ulonglong_array(jni::ref<jni::array<jlong>> p1, jint p2, jint p3) { return call_method<"read_ulonglong_array", void>(p1, p2, p3); }
	void read_float_array(jni::ref<jni::array<jfloat>> p1, jint p2, jint p3) { return call_method<"read_float_array", void>(p1, p2, p3); }
	void read_double_array(jni::ref<jni::array<jdouble>> p1, jint p2, jint p3) { return call_method<"read_double_array", void>(p1, p2, p3); }
	jni::ref<org::omg::CORBA::Object> read_Object() { return call_method<"read_Object", jni::ref<org::omg::CORBA::Object>>(); }
	jni::ref<java::io::Serializable> read_value() { return call_method<"read_value", jni::ref<java::io::Serializable>>(); }
	jni::ref<org::omg::CORBA::TypeCode> read_TypeCode() { return call_method<"read_TypeCode", jni::ref<org::omg::CORBA::TypeCode>>(); }
	jni::ref<org::omg::CORBA::Any> read_any() { return call_method<"read_any", jni::ref<org::omg::CORBA::Any>>(); }
	jni::ref<org::omg::CORBA::Principal> read_Principal() { return call_method<"read_Principal", jni::ref<org::omg::CORBA::Principal>>(); }
	jni::ref<java::math::BigDecimal> read_fixed() { return call_method<"read_fixed", jni::ref<java::math::BigDecimal>>(); }
	jni::ref<org::omg::CORBA::Context> read_Context() { return call_method<"read_Context", jni::ref<org::omg::CORBA::Context>>(); }
	jni::ref<org::omg::CORBA::ORB> orb() { return call_method<"orb", jni::ref<org::omg::CORBA::ORB>>(); }
	void addTypeCodeAtPosition(jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> p1, jint p2) { return call_method<"addTypeCodeAtPosition", void>(p1, p2); }
	jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> getTypeCodeAtPosition(jint p1) { return call_method<"getTypeCodeAtPosition", jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl>>(p1); }
	void setEnclosingInputStream(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return call_method<"setEnclosingInputStream", void>(p1); }
	jni::ref<com::sun::corba::se::impl::encoding::TypeCodeReader> getTopLevelStream() { return call_method<"getTopLevelStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeReader>>(); }
	jint getTopLevelPosition() { return call_method<"getTopLevelPosition", jint>(); }
	void performORBVersionSpecificInit() { return call_method<"performORBVersionSpecificInit", void>(); }
	void resetCodeSetConverters() { return call_method<"resetCodeSetConverters", void>(); }
	void printTypeMap() { return call_method<"printTypeMap", void>(); }

protected:

	WrapperInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_WRAPPERINPUTSTREAM
