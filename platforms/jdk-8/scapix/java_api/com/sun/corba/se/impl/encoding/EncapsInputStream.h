// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/impl/encoding/CDRInputStream.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_ENCAPSINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_ENCAPSINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::encoding { class EncapsInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::encoding::EncapsInputStream>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/encoding/EncapsInputStream";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::impl::encoding::CDRInputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_ENCAPSINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_ENCAPSINPUTSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_ENCAPSINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/com/sun/org/omg/SendingContext/CodeBase.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::encoding::EncapsInputStream : public jni::object_base<"com/sun/corba/se/impl/encoding/EncapsInputStream",
	com::sun::corba::se::impl::encoding::CDRInputStream>
{
public:

	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jboolean p4, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<java::nio::ByteBuffer> p2, jint p3, jboolean p4, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> new_object(jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::encoding::EncapsInputStream> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p4, jni::ref<com::sun::org::omg::SendingContext::CodeBase> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	jni::ref<com::sun::corba::se::impl::encoding::CDRInputStream> dup() { return call_method<"dup", jni::ref<com::sun::corba::se::impl::encoding::CDRInputStream>>(); }
	jni::ref<com::sun::org::omg::SendingContext::CodeBase> getCodeBase() { return call_method<"getCodeBase", jni::ref<com::sun::org::omg::SendingContext::CodeBase>>(); }

protected:

	EncapsInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_ENCAPSINPUTSTREAM
