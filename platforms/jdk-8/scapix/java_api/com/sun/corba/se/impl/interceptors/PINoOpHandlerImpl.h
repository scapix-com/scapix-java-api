// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/PIHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_INTERCEPTORS_PINOOPHANDLERIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_INTERCEPTORS_PINOOPHANDLERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::interceptors { class PINoOpHandlerImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::interceptors::PINoOpHandlerImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/interceptors/PINoOpHandlerImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::spi::protocol::PIHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_INTERCEPTORS_PINOOPHANDLERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_INTERCEPTORS_PINOOPHANDLERIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_INTERCEPTORS_PINOOPHANDLERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/corba/RequestImpl.h>
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/ReplyMessage.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/ObjectKeyTemplate.h>
#include <scapix/java_api/com/sun/corba/se/spi/oa/ObjectAdapter.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaMessageMediator.h>
#include <scapix/java_api/java/lang/Exception.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/Any.h>
#include <scapix/java_api/org/omg/CORBA/NVList.h>
#include <scapix/java_api/org/omg/CORBA/Policy.h>
#include <scapix/java_api/org/omg/PortableInterceptor/Current.h>
#include <scapix/java_api/org/omg/PortableInterceptor/Interceptor.h>
#include <scapix/java_api/org/omg/PortableInterceptor/ObjectReferenceTemplate.h>
#include <scapix/java_api/org/omg/PortableInterceptor/PolicyFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::interceptors::PINoOpHandlerImpl : public jni::object_base<"com/sun/corba/se/impl/interceptors/PINoOpHandlerImpl",
	java::lang::Object,
	com::sun::corba::se::spi::protocol::PIHandler>
{
public:

	static jni::ref<com::sun::corba::se::impl::interceptors::PINoOpHandlerImpl> new_object() { return base_::new_object(); }
	void close() { return call_method<"close", void>(); }
	void initialize() { return call_method<"initialize", void>(); }
	void destroyInterceptors() { return call_method<"destroyInterceptors", void>(); }
	void objectAdapterCreated(jni::ref<com::sun::corba::se::spi::oa::ObjectAdapter> p1) { return call_method<"objectAdapterCreated", void>(p1); }
	void adapterManagerStateChanged(jint p1, jshort p2) { return call_method<"adapterManagerStateChanged", void>(p1, p2); }
	void adapterStateChanged(jni::ref<jni::array<org::omg::PortableInterceptor::ObjectReferenceTemplate>> p1, jshort p2) { return call_method<"adapterStateChanged", void>(p1, p2); }
	void disableInterceptorsThisThread() { return call_method<"disableInterceptorsThisThread", void>(); }
	void enableInterceptorsThisThread() { return call_method<"enableInterceptorsThisThread", void>(); }
	void invokeClientPIStartingPoint() { return call_method<"invokeClientPIStartingPoint", void>(); }
	jni::ref<java::lang::Exception> invokeClientPIEndingPoint(jint p1, jni::ref<java::lang::Exception> p2) { return call_method<"invokeClientPIEndingPoint", jni::ref<java::lang::Exception>>(p1, p2); }
	jni::ref<java::lang::Exception> makeCompletedClientRequest(jint p1, jni::ref<java::lang::Exception> p2) { return call_method<"makeCompletedClientRequest", jni::ref<java::lang::Exception>>(p1, p2); }
	void initiateClientPIRequest(jboolean p1) { return call_method<"initiateClientPIRequest", void>(p1); }
	void cleanupClientPIRequest() { return call_method<"cleanupClientPIRequest", void>(); }
	void setClientPIInfo(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1) { return call_method<"setClientPIInfo", void>(p1); }
	void setClientPIInfo(jni::ref<com::sun::corba::se::impl::corba::RequestImpl> p1) { return call_method<"setClientPIInfo", void>(p1); }
	void sendCancelRequestIfFinalFragmentNotSent() { return call_method<"sendCancelRequestIfFinalFragmentNotSent", void>(); }
	void invokeServerPIStartingPoint() { return call_method<"invokeServerPIStartingPoint", void>(); }
	void invokeServerPIIntermediatePoint() { return call_method<"invokeServerPIIntermediatePoint", void>(); }
	void invokeServerPIEndingPoint(jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage> p1) { return call_method<"invokeServerPIEndingPoint", void>(p1); }
	void setServerPIInfo(jni::ref<java::lang::Exception> p1) { return call_method<"setServerPIInfo", void>(p1); }
	void setServerPIInfo(jni::ref<org::omg::CORBA::NVList> p1) { return call_method<"setServerPIInfo", void>(p1); }
	void setServerPIExceptionInfo(jni::ref<org::omg::CORBA::Any> p1) { return call_method<"setServerPIExceptionInfo", void>(p1); }
	void setServerPIInfo(jni::ref<org::omg::CORBA::Any> p1) { return call_method<"setServerPIInfo", void>(p1); }
	void initializeServerPIInfo(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1, jni::ref<com::sun::corba::se::spi::oa::ObjectAdapter> p2, jni::ref<jni::array<jbyte>> p3, jni::ref<com::sun::corba::se::spi::ior::ObjectKeyTemplate> p4) { return call_method<"initializeServerPIInfo", void>(p1, p2, p3, p4); }
	void setServerPIInfo(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2) { return call_method<"setServerPIInfo", void>(p1, p2); }
	void cleanupServerPIRequest() { return call_method<"cleanupServerPIRequest", void>(); }
	void register_interceptor(jni::ref<org::omg::PortableInterceptor::Interceptor> p1, jint p2) { return call_method<"register_interceptor", void>(p1, p2); }
	jni::ref<org::omg::PortableInterceptor::Current> getPICurrent() { return call_method<"getPICurrent", jni::ref<org::omg::PortableInterceptor::Current>>(); }
	jni::ref<org::omg::CORBA::Policy> create_policy(jint p1, jni::ref<org::omg::CORBA::Any> p2) { return call_method<"create_policy", jni::ref<org::omg::CORBA::Policy>>(p1, p2); }
	void registerPolicyFactory(jint p1, jni::ref<org::omg::PortableInterceptor::PolicyFactory> p2) { return call_method<"registerPolicyFactory", void>(p1, p2); }
	jint allocateServerRequestId() { return call_method<"allocateServerRequestId", jint>(); }

protected:

	PINoOpHandlerImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_INTERCEPTORS_PINOOPHANDLERIMPL
