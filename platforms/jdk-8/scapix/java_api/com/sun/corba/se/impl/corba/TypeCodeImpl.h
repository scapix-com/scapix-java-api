// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/omg/CORBA/TypeCode.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_CORBA_TYPECODEIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_CORBA_TYPECODEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::corba { class TypeCodeImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::corba::TypeCodeImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/corba/TypeCodeImpl";
	using base_classes = std::tuple<scapix::java_api::org::omg::CORBA::TypeCode>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_CORBA_TYPECODEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_CORBA_TYPECODEIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_CORBA_TYPECODEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/CDROutputStream.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/TypeCodeOutputStream.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA/Any.h>
#include <scapix/java_api/org/omg/CORBA/StructMember.h>
#include <scapix/java_api/org/omg/CORBA/TCKind.h>
#include <scapix/java_api/org/omg/CORBA/UnionMember.h>
#include <scapix/java_api/org/omg/CORBA/ValueMember.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::corba::TypeCodeImpl : public jni::object_base<"com/sun/corba/se/impl/corba/TypeCodeImpl",
	org::omg::CORBA::TypeCode>
{
public:

	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<org::omg::CORBA::TypeCode> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<jni::array<org::omg::CORBA::StructMember>> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<org::omg::CORBA::TypeCode> p5, jni::ref<jni::array<org::omg::CORBA::UnionMember>> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jshort p5, jni::ref<org::omg::CORBA::TypeCode> p6, jni::ref<jni::array<org::omg::CORBA::ValueMember>> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<jni::array<java::lang::String>> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<org::omg::CORBA::TypeCode> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jint p3, jni::ref<org::omg::CORBA::TypeCode> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jint p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jint p2, jshort p3, jshort p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::encoding::CDROutputStream> newOutputStream(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return call_static_method<"newOutputStream", jni::ref<com::sun::corba::se::impl::encoding::CDROutputStream>>(p1); }
	jboolean equal(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"equal", jboolean>(p1); }
	jboolean equivalent(jni::ref<org::omg::CORBA::TypeCode> p1) { return call_method<"equivalent", jboolean>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> get_compact_typecode() { return call_method<"get_compact_typecode", jni::ref<org::omg::CORBA::TypeCode>>(); }
	jni::ref<org::omg::CORBA::TCKind> kind() { return call_method<"kind", jni::ref<org::omg::CORBA::TCKind>>(); }
	jboolean is_recursive() { return call_method<"is_recursive", jboolean>(); }
	jni::ref<java::lang::String> id() { return call_method<"id", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> name() { return call_method<"name", jni::ref<java::lang::String>>(); }
	jint member_count() { return call_method<"member_count", jint>(); }
	jni::ref<java::lang::String> member_name(jint p1) { return call_method<"member_name", jni::ref<java::lang::String>>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> member_type(jint p1) { return call_method<"member_type", jni::ref<org::omg::CORBA::TypeCode>>(p1); }
	jni::ref<org::omg::CORBA::Any> member_label(jint p1) { return call_method<"member_label", jni::ref<org::omg::CORBA::Any>>(p1); }
	jni::ref<org::omg::CORBA::TypeCode> discriminator_type() { return call_method<"discriminator_type", jni::ref<org::omg::CORBA::TypeCode>>(); }
	jint default_index() { return call_method<"default_index", jint>(); }
	jint length() { return call_method<"length", jint>(); }
	jni::ref<org::omg::CORBA::TypeCode> content_type() { return call_method<"content_type", jni::ref<org::omg::CORBA::TypeCode>>(); }
	jshort fixed_digits() { return call_method<"fixed_digits", jshort>(); }
	jshort fixed_scale() { return call_method<"fixed_scale", jshort>(); }
	jshort member_visibility(jint p1) { return call_method<"member_visibility", jshort>(p1); }
	jshort type_modifier() { return call_method<"type_modifier", jshort>(); }
	jni::ref<org::omg::CORBA::TypeCode> concrete_base_type() { return call_method<"concrete_base_type", jni::ref<org::omg::CORBA::TypeCode>>(); }
	void read_value(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return call_method<"read_value", void>(p1); }
	void write_value(jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p1) { return call_method<"write_value", void>(p1); }
	void write_value(jni::ref<com::sun::corba::se::impl::encoding::TypeCodeOutputStream> p1) { return call_method<"write_value", void>(p1); }
	jni::ref<java::lang::String> description() { return call_method<"description", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void printStream(jni::ref<java::io::PrintStream> p1) { return call_method<"printStream", void>(p1); }

protected:

	TypeCodeImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_CORBA_TYPECODEIMPL
