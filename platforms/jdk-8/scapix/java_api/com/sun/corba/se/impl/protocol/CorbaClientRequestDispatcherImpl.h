// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/pept/protocol/ClientRequestDispatcher.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_CORBACLIENTREQUESTDISPATCHERIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_CORBACLIENTREQUESTDISPATCHERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::protocol { class CorbaClientRequestDispatcherImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::protocol::CorbaClientRequestDispatcherImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/protocol/CorbaClientRequestDispatcherImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::pept::protocol::ClientRequestDispatcher>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_CORBACLIENTREQUESTDISPATCHERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_CORBACLIENTREQUESTDISPATCHERIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_CORBACLIENTREQUESTDISPATCHERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/pept/broker/Broker.h>
#include <scapix/java_api/com/sun/corba/se/pept/encoding/InputObject.h>
#include <scapix/java_api/com/sun/corba/se/pept/encoding/OutputObject.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/ContactInfo.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaMessageMediator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::protocol::CorbaClientRequestDispatcherImpl : public jni::object_base<"com/sun/corba/se/impl/protocol/CorbaClientRequestDispatcherImpl",
	java::lang::Object,
	com::sun::corba::se::pept::protocol::ClientRequestDispatcher>
{
public:

	static jni::ref<com::sun::corba::se::impl::protocol::CorbaClientRequestDispatcherImpl> new_object() { return base_::new_object(); }
	jni::ref<com::sun::corba::se::pept::encoding::OutputObject> beginRequest(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2, jboolean p3, jni::ref<com::sun::corba::se::pept::transport::ContactInfo> p4) { return call_method<"beginRequest", jni::ref<com::sun::corba::se::pept::encoding::OutputObject>>(p1, p2, p3, p4); }
	jni::ref<com::sun::corba::se::pept::encoding::InputObject> marshalingComplete(jni::ref<java::lang::Object> p1, jni::ref<com::sun::corba::se::pept::encoding::OutputObject> p2) { return call_method<"marshalingComplete", jni::ref<com::sun::corba::se::pept::encoding::InputObject>>(p1, p2); }
	jni::ref<com::sun::corba::se::pept::encoding::InputObject> marshalingComplete1(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p2) { return call_method<"marshalingComplete1", jni::ref<com::sun::corba::se::pept::encoding::InputObject>>(p1, p2); }
	void endRequest(jni::ref<com::sun::corba::se::pept::broker::Broker> p1, jni::ref<java::lang::Object> p2, jni::ref<com::sun::corba::se::pept::encoding::InputObject> p3) { return call_method<"endRequest", void>(p1, p2, p3); }

protected:

	CorbaClientRequestDispatcherImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PROTOCOL_CORBACLIENTREQUESTDISPATCHERIMPL
