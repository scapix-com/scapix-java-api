// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PRESENTATION_RMI_DYNAMICMETHODMARSHALLER_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PRESENTATION_RMI_DYNAMICMETHODMARSHALLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::spi::presentation::rmi { class DynamicMethodMarshaller; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::spi::presentation::rmi::DynamicMethodMarshaller>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/spi/presentation/rmi/DynamicMethodMarshaller";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PRESENTATION_RMI_DYNAMICMETHODMARSHALLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PRESENTATION_RMI_DYNAMICMETHODMARSHALLER)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PRESENTATION_RMI_DYNAMICMETHODMARSHALLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/java/lang/Exception.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/org/omg/CORBA/portable/ApplicationException.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::spi::presentation::rmi::DynamicMethodMarshaller : public jni::object_base<"com/sun/corba/se/spi/presentation/rmi/DynamicMethodMarshaller",
	java::lang::Object>
{
public:

	jni::ref<java::lang::reflect::Method> getMethod() { return call_method<"getMethod", jni::ref<java::lang::reflect::Method>>(); }
	jni::ref<jni::array<java::lang::Object>> copyArguments(jni::ref<jni::array<java::lang::Object>> p1, jni::ref<com::sun::corba::se::spi::orb::ORB> p2) { return call_method<"copyArguments", jni::ref<jni::array<java::lang::Object>>>(p1, p2); }
	jni::ref<jni::array<java::lang::Object>> readArguments(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return call_method<"readArguments", jni::ref<jni::array<java::lang::Object>>>(p1); }
	void writeArguments(jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_method<"writeArguments", void>(p1, p2); }
	jni::ref<java::lang::Object> copyResult(jni::ref<java::lang::Object> p1, jni::ref<com::sun::corba::se::spi::orb::ORB> p2) { return call_method<"copyResult", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> readResult(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return call_method<"readResult", jni::ref<java::lang::Object>>(p1); }
	void writeResult(jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p1, jni::ref<java::lang::Object> p2) { return call_method<"writeResult", void>(p1, p2); }
	jboolean isDeclaredException(jni::ref<java::lang::Throwable> p1) { return call_method<"isDeclaredException", jboolean>(p1); }
	void writeException(jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p1, jni::ref<java::lang::Exception> p2) { return call_method<"writeException", void>(p1, p2); }
	jni::ref<java::lang::Exception> readException(jni::ref<org::omg::CORBA::portable::ApplicationException> p1) { return call_method<"readException", jni::ref<java::lang::Exception>>(p1); }

protected:

	DynamicMethodMarshaller(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PRESENTATION_RMI_DYNAMICMETHODMARSHALLER
