// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLTYPESUTIL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLTYPESUTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::presentation::rmi { class IDLTypesUtil; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::presentation::rmi::IDLTypesUtil>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/presentation/rmi/IDLTypesUtil";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLTYPESUTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLTYPESUTIL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLTYPESUTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/presentation/rmi/IDLType.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::presentation::rmi::IDLTypesUtil : public jni::object_base<"com/sun/corba/se/impl/presentation/rmi/IDLTypesUtil",
	java::lang::Object>
{
public:

	static jint VALID_TYPE() { return get_static_field<"VALID_TYPE", jint>(); }
	static jint INVALID_TYPE() { return get_static_field<"INVALID_TYPE", jint>(); }
	static jboolean FOLLOW_RMIC() { return get_static_field<"FOLLOW_RMIC", jboolean>(); }

	static jni::ref<com::sun::corba::se::impl::presentation::rmi::IDLTypesUtil> new_object() { return base_::new_object(); }
	void validateRemoteInterface(jni::ref<java::lang::Class> p1) { return call_method<"validateRemoteInterface", void>(p1); }
	jboolean isRemoteInterface(jni::ref<java::lang::Class> p1) { return call_method<"isRemoteInterface", jboolean>(p1); }
	jboolean isPrimitive(jni::ref<java::lang::Class> p1) { return call_method<"isPrimitive", jboolean>(p1); }
	jboolean isValue(jni::ref<java::lang::Class> p1) { return call_method<"isValue", jboolean>(p1); }
	jboolean isArray(jni::ref<java::lang::Class> p1) { return call_method<"isArray", jboolean>(p1); }
	jboolean isException(jni::ref<java::lang::Class> p1) { return call_method<"isException", jboolean>(p1); }
	jboolean isRemoteException(jni::ref<java::lang::Class> p1) { return call_method<"isRemoteException", jboolean>(p1); }
	jboolean isCheckedException(jni::ref<java::lang::Class> p1) { return call_method<"isCheckedException", jboolean>(p1); }
	jboolean isObjectReference(jni::ref<java::lang::Class> p1) { return call_method<"isObjectReference", jboolean>(p1); }
	jboolean isEntity(jni::ref<java::lang::Class> p1) { return call_method<"isEntity", jboolean>(p1); }
	jboolean isPropertyAccessorMethod(jni::ref<java::lang::reflect::Method> p1, jni::ref<java::lang::Class> p2) { return call_method<"isPropertyAccessorMethod", jboolean>(p1, p2); }
	jni::ref<java::lang::String> getAttributeNameForProperty(jni::ref<java::lang::String> p1) { return call_method<"getAttributeNameForProperty", jni::ref<java::lang::String>>(p1); }
	jni::ref<com::sun::corba::se::impl::presentation::rmi::IDLType> getPrimitiveIDLTypeMapping(jni::ref<java::lang::Class> p1) { return call_method<"getPrimitiveIDLTypeMapping", jni::ref<com::sun::corba::se::impl::presentation::rmi::IDLType>>(p1); }
	jni::ref<com::sun::corba::se::impl::presentation::rmi::IDLType> getSpecialCaseIDLTypeMapping(jni::ref<java::lang::Class> p1) { return call_method<"getSpecialCaseIDLTypeMapping", jni::ref<com::sun::corba::se::impl::presentation::rmi::IDLType>>(p1); }

protected:

	IDLTypesUtil(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_IDLTYPESUTIL
