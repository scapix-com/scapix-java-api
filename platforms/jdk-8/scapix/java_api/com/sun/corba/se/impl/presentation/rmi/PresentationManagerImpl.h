// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/PresentationManager.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::presentation::rmi { class PresentationManagerImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::presentation::rmi::PresentationManagerImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/presentation/rmi/PresentationManagerImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::spi::presentation::rmi::PresentationManager>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/DynamicMethodMarshaller.h>
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/PresentationManager_ClassData.h>
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/PresentationManager_StubFactoryFactory.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#include <scapix/java_api/javax/rmi/CORBA/Tie.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::presentation::rmi::PresentationManagerImpl : public jni::object_base<"com/sun/corba/se/impl/presentation/rmi/PresentationManagerImpl",
	java::lang::Object,
	com::sun::corba::se::spi::presentation::rmi::PresentationManager>
{
public:

	static jni::ref<com::sun::corba::se::impl::presentation::rmi::PresentationManagerImpl> new_object(jboolean p1) { return base_::new_object(p1); }
	jni::ref<com::sun::corba::se::spi::presentation::rmi::DynamicMethodMarshaller> getDynamicMethodMarshaller(jni::ref<java::lang::reflect::Method> p1) { return call_method<"getDynamicMethodMarshaller", jni::ref<com::sun::corba::se::spi::presentation::rmi::DynamicMethodMarshaller>>(p1); }
	jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager_ClassData> getClassData(jni::ref<java::lang::Class> p1) { return call_method<"getClassData", jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager_ClassData>>(p1); }
	jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager_StubFactoryFactory> getStubFactoryFactory(jboolean p1) { return call_method<"getStubFactoryFactory", jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager_StubFactoryFactory>>(p1); }
	void setStubFactoryFactory(jboolean p1, jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager_StubFactoryFactory> p2) { return call_method<"setStubFactoryFactory", void>(p1, p2); }
	jni::ref<javax::rmi::CORBA::Tie> getTie() { return call_method<"getTie", jni::ref<javax::rmi::CORBA::Tie>>(); }
	jboolean useDynamicStubs() { return call_method<"useDynamicStubs", jboolean>(); }

protected:

	PresentationManagerImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_PRESENTATIONMANAGERIMPL
