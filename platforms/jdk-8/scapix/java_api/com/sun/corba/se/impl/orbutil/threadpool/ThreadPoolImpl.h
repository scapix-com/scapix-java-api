// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/ThreadPool.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orbutil::threadpool { class ThreadPoolImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orbutil/threadpool/ThreadPoolImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/WorkQueue.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/ThreadGroup.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolImpl : public jni::object_base<"com/sun/corba/se/impl/orbutil/threadpool/ThreadPoolImpl",
	java::lang::Object,
	com::sun::corba::se::spi::orbutil::threadpool::ThreadPool>
{
public:

	static jni::ref<com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolImpl> new_object(jni::ref<java::lang::ThreadGroup> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolImpl> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolImpl> new_object(jint p1, jint p2, jlong p3, jni::ref<java::lang::String> p4) { return base_::new_object(p1, p2, p3, p4); }
	void close() { return call_method<"close", void>(); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::WorkQueue> getAnyWorkQueue() { return call_method<"getAnyWorkQueue", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::WorkQueue>>(); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::WorkQueue> getWorkQueue(jint p1) { return call_method<"getWorkQueue", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::WorkQueue>>(p1); }
	jint minimumNumberOfThreads() { return call_method<"minimumNumberOfThreads", jint>(); }
	jint maximumNumberOfThreads() { return call_method<"maximumNumberOfThreads", jint>(); }
	jlong idleTimeoutForThreads() { return call_method<"idleTimeoutForThreads", jlong>(); }
	jint currentNumberOfThreads() { return call_method<"currentNumberOfThreads", jint>(); }
	jint numberOfAvailableThreads() { return call_method<"numberOfAvailableThreads", jint>(); }
	jint numberOfBusyThreads() { return call_method<"numberOfBusyThreads", jint>(); }
	jlong averageWorkCompletionTime() { return call_method<"averageWorkCompletionTime", jlong>(); }
	jlong currentProcessedCount() { return call_method<"currentProcessedCount", jlong>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint numberOfWorkQueues() { return call_method<"numberOfWorkQueues", jint>(); }

protected:

	ThreadPoolImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLIMPL
