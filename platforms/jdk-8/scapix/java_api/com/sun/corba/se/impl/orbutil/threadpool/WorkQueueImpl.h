// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/WorkQueue.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_WORKQUEUEIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_WORKQUEUEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orbutil::threadpool { class WorkQueueImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orbutil::threadpool::WorkQueueImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orbutil/threadpool/WorkQueueImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::spi::orbutil::threadpool::WorkQueue>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_WORKQUEUEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_WORKQUEUEIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_WORKQUEUEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/ThreadPool.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/Work.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orbutil::threadpool::WorkQueueImpl : public jni::object_base<"com/sun/corba/se/impl/orbutil/threadpool/WorkQueueImpl",
	java::lang::Object,
	com::sun::corba::se::spi::orbutil::threadpool::WorkQueue>
{
public:

	static jni::ref<com::sun::corba::se::impl::orbutil::threadpool::WorkQueueImpl> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::corba::se::impl::orbutil::threadpool::WorkQueueImpl> new_object(jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::corba::se::impl::orbutil::threadpool::WorkQueueImpl> new_object(jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	void addWork(jni::ref<com::sun::corba::se::spi::orbutil::threadpool::Work> p1) { return call_method<"addWork", void>(p1); }
	void setThreadPool(jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool> p1) { return call_method<"setThreadPool", void>(p1); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool> getThreadPool() { return call_method<"getThreadPool", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool>>(); }
	jlong totalWorkItemsAdded() { return call_method<"totalWorkItemsAdded", jlong>(); }
	jint workItemsInQueue() { return call_method<"workItemsInQueue", jint>(); }
	jlong averageTimeInQueue() { return call_method<"averageTimeInQueue", jlong>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }

protected:

	WorkQueueImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_WORKQUEUEIMPL
