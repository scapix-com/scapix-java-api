// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_ENCAPSULATIONUTILITY_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_ENCAPSULATIONUTILITY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::ior { class EncapsulationUtility; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::ior::EncapsulationUtility>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/ior/EncapsulationUtility";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_ENCAPSULATIONUTILITY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_ENCAPSULATIONUTILITY)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_ENCAPSULATIONUTILITY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/ior/IdentifiableFactoryFinder.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/WriteContents.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/OutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::ior::EncapsulationUtility : public jni::object_base<"com/sun/corba/se/impl/ior/EncapsulationUtility",
	java::lang::Object>
{
public:

	static void readIdentifiableSequence(jni::ref<java::util::List> p1, jni::ref<com::sun::corba::se::spi::ior::IdentifiableFactoryFinder> p2, jni::ref<org::omg::CORBA_2_3::portable::InputStream> p3) { return call_static_method<"readIdentifiableSequence", void>(p1, p2, p3); }
	static void writeIdentifiableSequence(jni::ref<java::util::List> p1, jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p2) { return call_static_method<"writeIdentifiableSequence", void>(p1, p2); }
	static void writeOutputStream(jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p1, jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p2) { return call_static_method<"writeOutputStream", void>(p1, p2); }
	static jni::ref<org::omg::CORBA_2_3::portable::InputStream> getEncapsulationStream(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return call_static_method<"getEncapsulationStream", jni::ref<org::omg::CORBA_2_3::portable::InputStream>>(p1); }
	static jni::ref<jni::array<jbyte>> readOctets(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return call_static_method<"readOctets", jni::ref<jni::array<jbyte>>>(p1); }
	static void writeEncapsulation(jni::ref<com::sun::corba::se::spi::ior::WriteContents> p1, jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p2) { return call_static_method<"writeEncapsulation", void>(p1, p2); }

protected:

	EncapsulationUtility(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_ENCAPSULATIONUTILITY
