// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_PEPT_TRANSPORT_EVENTHANDLER_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_PEPT_TRANSPORT_EVENTHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::pept::transport { class EventHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::pept::transport::EventHandler>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/pept/transport/EventHandler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_PEPT_TRANSPORT_EVENTHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_PEPT_TRANSPORT_EVENTHANDLER)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_PEPT_TRANSPORT_EVENTHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/pept/transport/Acceptor.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/Connection.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/Work.h>
#include <scapix/java_api/java/nio/channels/SelectableChannel.h>
#include <scapix/java_api/java/nio/channels/SelectionKey.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::pept::transport::EventHandler : public jni::object_base<"com/sun/corba/se/pept/transport/EventHandler",
	java::lang::Object>
{
public:

	void setUseSelectThreadToWait(jboolean p1) { return call_method<"setUseSelectThreadToWait", void>(p1); }
	jboolean shouldUseSelectThreadToWait() { return call_method<"shouldUseSelectThreadToWait", jboolean>(); }
	jni::ref<java::nio::channels::SelectableChannel> getChannel() { return call_method<"getChannel", jni::ref<java::nio::channels::SelectableChannel>>(); }
	jint getInterestOps() { return call_method<"getInterestOps", jint>(); }
	void setSelectionKey(jni::ref<java::nio::channels::SelectionKey> p1) { return call_method<"setSelectionKey", void>(p1); }
	jni::ref<java::nio::channels::SelectionKey> getSelectionKey() { return call_method<"getSelectionKey", jni::ref<java::nio::channels::SelectionKey>>(); }
	void handleEvent() { return call_method<"handleEvent", void>(); }
	void setUseWorkerThreadForEvent(jboolean p1) { return call_method<"setUseWorkerThreadForEvent", void>(p1); }
	jboolean shouldUseWorkerThreadForEvent() { return call_method<"shouldUseWorkerThreadForEvent", jboolean>(); }
	void setWork(jni::ref<com::sun::corba::se::spi::orbutil::threadpool::Work> p1) { return call_method<"setWork", void>(p1); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::Work> getWork() { return call_method<"getWork", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::Work>>(); }
	jni::ref<com::sun::corba::se::pept::transport::Acceptor> getAcceptor() { return call_method<"getAcceptor", jni::ref<com::sun::corba::se::pept::transport::Acceptor>>(); }
	jni::ref<com::sun::corba::se::pept::transport::Connection> getConnection() { return call_method<"getConnection", jni::ref<com::sun::corba::se::pept::transport::Connection>>(); }

protected:

	EventHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_PEPT_TRANSPORT_EVENTHANDLER
