// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/ThreadPoolManager.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLMANAGERIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLMANAGERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orbutil::threadpool { class ThreadPoolManagerImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolManagerImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orbutil/threadpool/ThreadPoolManagerImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolManager>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLMANAGERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLMANAGERIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLMANAGERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/ThreadPool.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/threadpool/ThreadPoolChooser.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolManagerImpl : public jni::object_base<"com/sun/corba/se/impl/orbutil/threadpool/ThreadPoolManagerImpl",
	java::lang::Object,
	com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolManager>
{
public:

	static jni::ref<com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolManagerImpl> new_object() { return base_::new_object(); }
	void close() { return call_method<"close", void>(); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool> getThreadPool(jni::ref<java::lang::String> p1) { return call_method<"getThreadPool", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool>>(p1); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool> getThreadPool(jint p1) { return call_method<"getThreadPool", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool>>(p1); }
	jint getThreadPoolNumericId(jni::ref<java::lang::String> p1) { return call_method<"getThreadPoolNumericId", jint>(p1); }
	jni::ref<java::lang::String> getThreadPoolStringId(jint p1) { return call_method<"getThreadPoolStringId", jni::ref<java::lang::String>>(p1); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool> getDefaultThreadPool() { return call_method<"getDefaultThreadPool", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPool>>(); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser> getThreadPoolChooser(jni::ref<java::lang::String> p1) { return call_method<"getThreadPoolChooser", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser>>(p1); }
	jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser> getThreadPoolChooser(jint p1) { return call_method<"getThreadPoolChooser", jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser>>(p1); }
	void setThreadPoolChooser(jni::ref<java::lang::String> p1, jni::ref<com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser> p2) { return call_method<"setThreadPoolChooser", void>(p1, p2); }
	jint getThreadPoolChooserNumericId(jni::ref<java::lang::String> p1) { return call_method<"getThreadPoolChooserNumericId", jint>(p1); }

protected:

	ThreadPoolManagerImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_THREADPOOL_THREADPOOLMANAGERIMPL
