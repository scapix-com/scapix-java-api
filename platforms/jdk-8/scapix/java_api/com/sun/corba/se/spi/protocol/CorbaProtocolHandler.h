// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/pept/protocol/ProtocolHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAPROTOCOLHANDLER_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAPROTOCOLHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::spi::protocol { class CorbaProtocolHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::spi::protocol::CorbaProtocolHandler>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/spi/protocol/CorbaProtocolHandler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::pept::protocol::ProtocolHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAPROTOCOLHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAPROTOCOLHANDLER)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAPROTOCOLHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/LocateRequestMessage.h>
#include <scapix/java_api/com/sun/corba/se/impl/protocol/giopmsgheaders/RequestMessage.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IOR.h>
#include <scapix/java_api/com/sun/corba/se/spi/protocol/CorbaMessageMediator.h>
#include <scapix/java_api/com/sun/corba/se/spi/servicecontext/ServiceContexts.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/org/omg/CORBA/CompletionStatus.h>
#include <scapix/java_api/org/omg/CORBA/SystemException.h>
#include <scapix/java_api/org/omg/CORBA/portable/UnknownException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::spi::protocol::CorbaProtocolHandler : public jni::object_base<"com/sun/corba/se/spi/protocol/CorbaProtocolHandler",
	java::lang::Object,
	com::sun::corba::se::pept::protocol::ProtocolHandler>
{
public:

	void handleRequest(jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::RequestMessage> p1, jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p2) { return call_method<"handleRequest", void>(p1, p2); }
	void handleRequest(jni::ref<com::sun::corba::se::impl::protocol::giopmsgheaders::LocateRequestMessage> p1, jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p2) { return call_method<"handleRequest", void>(p1, p2); }
	jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> createResponse(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1, jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContexts> p2) { return call_method<"createResponse", jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator>>(p1, p2); }
	jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> createUserExceptionResponse(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1, jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContexts> p2) { return call_method<"createUserExceptionResponse", jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator>>(p1, p2); }
	jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> createUnknownExceptionResponse(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1, jni::ref<org::omg::CORBA::portable::UnknownException> p2) { return call_method<"createUnknownExceptionResponse", jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator>>(p1, p2); }
	jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> createSystemExceptionResponse(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1, jni::ref<org::omg::CORBA::SystemException> p2, jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContexts> p3) { return call_method<"createSystemExceptionResponse", jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator>>(p1, p2, p3); }
	jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> createLocationForward(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1, jni::ref<com::sun::corba::se::spi::ior::IOR> p2, jni::ref<com::sun::corba::se::spi::servicecontext::ServiceContexts> p3) { return call_method<"createLocationForward", jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator>>(p1, p2, p3); }
	void handleThrowableDuringServerDispatch(jni::ref<com::sun::corba::se::spi::protocol::CorbaMessageMediator> p1, jni::ref<java::lang::Throwable> p2, jni::ref<org::omg::CORBA::CompletionStatus> p3) { return call_method<"handleThrowableDuringServerDispatch", void>(p1, p2, p3); }

protected:

	CorbaProtocolHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_SPI_PROTOCOL_CORBAPROTOCOLHANDLER
