// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBCONSTANTS_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBCONSTANTS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orbutil { class ORBConstants; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orbutil::ORBConstants>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orbutil/ORBConstants";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBCONSTANTS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBCONSTANTS)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBCONSTANTS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orbutil::ORBConstants : public jni::object_base<"com/sun/corba/se/impl/orbutil/ORBConstants",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> STRINGIFY_PREFIX() { return get_static_field<"STRINGIFY_PREFIX", jni::ref<java::lang::String>>(); }
	static jint NEO_FIRST_SERVICE_CONTEXT() { return get_static_field<"NEO_FIRST_SERVICE_CONTEXT", jint>(); }
	static jint NUM_NEO_SERVICE_CONTEXTS() { return get_static_field<"NUM_NEO_SERVICE_CONTEXTS", jint>(); }
	static jint TAG_ORB_VERSION() { return get_static_field<"TAG_ORB_VERSION", jint>(); }
	static jint SUN_TAGGED_COMPONENT_ID_BASE() { return get_static_field<"SUN_TAGGED_COMPONENT_ID_BASE", jint>(); }
	static jint SUN_SERVICE_CONTEXT_ID_BASE() { return get_static_field<"SUN_SERVICE_CONTEXT_ID_BASE", jint>(); }
	static jint TAG_CONTAINER_ID() { return get_static_field<"TAG_CONTAINER_ID", jint>(); }
	static jint TAG_REQUEST_PARTITIONING_ID() { return get_static_field<"TAG_REQUEST_PARTITIONING_ID", jint>(); }
	static jint TAG_JAVA_SERIALIZATION_ID() { return get_static_field<"TAG_JAVA_SERIALIZATION_ID", jint>(); }
	static jint CONTAINER_ID_SERVICE_CONTEXT() { return get_static_field<"CONTAINER_ID_SERVICE_CONTEXT", jint>(); }
	static jint SERVANT_CACHING_POLICY() { return get_static_field<"SERVANT_CACHING_POLICY", jint>(); }
	static jint ZERO_PORT_POLICY() { return get_static_field<"ZERO_PORT_POLICY", jint>(); }
	static jint COPY_OBJECT_POLICY() { return get_static_field<"COPY_OBJECT_POLICY", jint>(); }
	static jint REQUEST_PARTITIONING_POLICY() { return get_static_field<"REQUEST_PARTITIONING_POLICY", jint>(); }
	static jint TOA_SCID() { return get_static_field<"TOA_SCID", jint>(); }
	static jint DEFAULT_SCID() { return get_static_field<"DEFAULT_SCID", jint>(); }
	static jint FIRST_POA_SCID() { return get_static_field<"FIRST_POA_SCID", jint>(); }
	static jint MAX_POA_SCID() { return get_static_field<"MAX_POA_SCID", jint>(); }
	static jint TRANSIENT_SCID() { return get_static_field<"TRANSIENT_SCID", jint>(); }
	static jint PERSISTENT_SCID() { return get_static_field<"PERSISTENT_SCID", jint>(); }
	static jint SC_TRANSIENT_SCID() { return get_static_field<"SC_TRANSIENT_SCID", jint>(); }
	static jint SC_PERSISTENT_SCID() { return get_static_field<"SC_PERSISTENT_SCID", jint>(); }
	static jint IISC_TRANSIENT_SCID() { return get_static_field<"IISC_TRANSIENT_SCID", jint>(); }
	static jint IISC_PERSISTENT_SCID() { return get_static_field<"IISC_PERSISTENT_SCID", jint>(); }
	static jint MINSC_TRANSIENT_SCID() { return get_static_field<"MINSC_TRANSIENT_SCID", jint>(); }
	static jint MINSC_PERSISTENT_SCID() { return get_static_field<"MINSC_PERSISTENT_SCID", jint>(); }
	static jni::ref<java::lang::String> ORG_OMG_PREFIX() { return get_static_field<"ORG_OMG_PREFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORG_OMG_CORBA_PREFIX() { return get_static_field<"ORG_OMG_CORBA_PREFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INITIAL_HOST_PROPERTY() { return get_static_field<"INITIAL_HOST_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INITIAL_PORT_PROPERTY() { return get_static_field<"INITIAL_PORT_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INITIAL_SERVICES_PROPERTY() { return get_static_field<"INITIAL_SERVICES_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFAULT_INIT_REF_PROPERTY() { return get_static_field<"DEFAULT_INIT_REF_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORB_INIT_REF_PROPERTY() { return get_static_field<"ORB_INIT_REF_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SUN_PREFIX() { return get_static_field<"SUN_PREFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ALLOW_LOCAL_OPTIMIZATION() { return get_static_field<"ALLOW_LOCAL_OPTIMIZATION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_PORT_PROPERTY() { return get_static_field<"SERVER_PORT_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_HOST_PROPERTY() { return get_static_field<"SERVER_HOST_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORB_ID_PROPERTY() { return get_static_field<"ORB_ID_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> OLD_ORB_ID_PROPERTY() { return get_static_field<"OLD_ORB_ID_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORB_SERVER_ID_PROPERTY() { return get_static_field<"ORB_SERVER_ID_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEBUG_PROPERTY() { return get_static_field<"DEBUG_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> USE_REP_ID() { return get_static_field<"USE_REP_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LISTEN_ON_ALL_INTERFACES() { return get_static_field<"LISTEN_ON_ALL_INTERFACES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GIOP_VERSION() { return get_static_field<"GIOP_VERSION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GIOP_FRAGMENT_SIZE() { return get_static_field<"GIOP_FRAGMENT_SIZE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GIOP_BUFFER_SIZE() { return get_static_field<"GIOP_BUFFER_SIZE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GIOP_11_BUFFMGR() { return get_static_field<"GIOP_11_BUFFMGR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GIOP_12_BUFFMGR() { return get_static_field<"GIOP_12_BUFFMGR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GIOP_TARGET_ADDRESSING() { return get_static_field<"GIOP_TARGET_ADDRESSING", jni::ref<java::lang::String>>(); }
	static jint GIOP_DEFAULT_FRAGMENT_SIZE() { return get_static_field<"GIOP_DEFAULT_FRAGMENT_SIZE", jint>(); }
	static jint GIOP_DEFAULT_BUFFER_SIZE() { return get_static_field<"GIOP_DEFAULT_BUFFER_SIZE", jint>(); }
	static jint DEFAULT_GIOP_11_BUFFMGR() { return get_static_field<"DEFAULT_GIOP_11_BUFFMGR", jint>(); }
	static jint DEFAULT_GIOP_12_BUFFMGR() { return get_static_field<"DEFAULT_GIOP_12_BUFFMGR", jint>(); }
	static jshort ADDR_DISP_OBJKEY() { return get_static_field<"ADDR_DISP_OBJKEY", jshort>(); }
	static jshort ADDR_DISP_PROFILE() { return get_static_field<"ADDR_DISP_PROFILE", jshort>(); }
	static jshort ADDR_DISP_IOR() { return get_static_field<"ADDR_DISP_IOR", jshort>(); }
	static jshort ADDR_DISP_HANDLE_ALL() { return get_static_field<"ADDR_DISP_HANDLE_ALL", jshort>(); }
	static jint GIOP_12_MSG_BODY_ALIGNMENT() { return get_static_field<"GIOP_12_MSG_BODY_ALIGNMENT", jint>(); }
	static jint GIOP_FRAGMENT_DIVISOR() { return get_static_field<"GIOP_FRAGMENT_DIVISOR", jint>(); }
	static jint GIOP_FRAGMENT_MINIMUM_SIZE() { return get_static_field<"GIOP_FRAGMENT_MINIMUM_SIZE", jint>(); }
	static jni::ref<java::lang::String> HIGH_WATER_MARK_PROPERTY() { return get_static_field<"HIGH_WATER_MARK_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LOW_WATER_MARK_PROPERTY() { return get_static_field<"LOW_WATER_MARK_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NUMBER_TO_RECLAIM_PROPERTY() { return get_static_field<"NUMBER_TO_RECLAIM_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCEPTOR_CLASS_PREFIX_PROPERTY() { return get_static_field<"ACCEPTOR_CLASS_PREFIX_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONTACT_INFO_LIST_FACTORY_CLASS_PROPERTY() { return get_static_field<"CONTACT_INFO_LIST_FACTORY_CLASS_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LEGACY_SOCKET_FACTORY_CLASS_PROPERTY() { return get_static_field<"LEGACY_SOCKET_FACTORY_CLASS_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SOCKET_FACTORY_CLASS_PROPERTY() { return get_static_field<"SOCKET_FACTORY_CLASS_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LISTEN_SOCKET_PROPERTY() { return get_static_field<"LISTEN_SOCKET_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IOR_TO_SOCKET_INFO_CLASS_PROPERTY() { return get_static_field<"IOR_TO_SOCKET_INFO_CLASS_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IIOP_PRIMARY_TO_CONTACT_INFO_CLASS_PROPERTY() { return get_static_field<"IIOP_PRIMARY_TO_CONTACT_INFO_CLASS_PROPERTY", jni::ref<java::lang::String>>(); }
	static jint REQUEST_PARTITIONING_MIN_THREAD_POOL_ID() { return get_static_field<"REQUEST_PARTITIONING_MIN_THREAD_POOL_ID", jint>(); }
	static jint REQUEST_PARTITIONING_MAX_THREAD_POOL_ID() { return get_static_field<"REQUEST_PARTITIONING_MAX_THREAD_POOL_ID", jint>(); }
	static jni::ref<java::lang::String> TRANSPORT_TCP_READ_TIMEOUTS_PROPERTY() { return get_static_field<"TRANSPORT_TCP_READ_TIMEOUTS_PROPERTY", jni::ref<java::lang::String>>(); }
	static jint TRANSPORT_TCP_INITIAL_TIME_TO_WAIT() { return get_static_field<"TRANSPORT_TCP_INITIAL_TIME_TO_WAIT", jint>(); }
	static jint TRANSPORT_TCP_MAX_TIME_TO_WAIT() { return get_static_field<"TRANSPORT_TCP_MAX_TIME_TO_WAIT", jint>(); }
	static jint TRANSPORT_TCP_GIOP_HEADER_MAX_TIME_TO_WAIT() { return get_static_field<"TRANSPORT_TCP_GIOP_HEADER_MAX_TIME_TO_WAIT", jint>(); }
	static jint TRANSPORT_TCP_TIME_TO_WAIT_BACKOFF_FACTOR() { return get_static_field<"TRANSPORT_TCP_TIME_TO_WAIT_BACKOFF_FACTOR", jint>(); }
	static jni::ref<java::lang::String> USE_NIO_SELECT_TO_WAIT_PROPERTY() { return get_static_field<"USE_NIO_SELECT_TO_WAIT_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCEPTOR_SOCKET_TYPE_PROPERTY() { return get_static_field<"ACCEPTOR_SOCKET_TYPE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACCEPTOR_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY() { return get_static_field<"ACCEPTOR_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONNECTION_SOCKET_TYPE_PROPERTY() { return get_static_field<"CONNECTION_SOCKET_TYPE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CONNECTION_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY() { return get_static_field<"CONNECTION_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DISABLE_DIRECT_BYTE_BUFFER_USE_PROPERTY() { return get_static_field<"DISABLE_DIRECT_BYTE_BUFFER_USE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SOCKET() { return get_static_field<"SOCKET", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SOCKETCHANNEL() { return get_static_field<"SOCKETCHANNEL", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PERSISTENT_SERVER_PORT_PROPERTY() { return get_static_field<"PERSISTENT_SERVER_PORT_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_ID_PROPERTY() { return get_static_field<"SERVER_ID_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BAD_SERVER_ID_HANDLER_CLASS_PROPERTY() { return get_static_field<"BAD_SERVER_ID_HANDLER_CLASS_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTIVATED_PROPERTY() { return get_static_field<"ACTIVATED_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_NAME_PROPERTY() { return get_static_field<"SERVER_NAME_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_DEF_VERIFY_PROPERTY() { return get_static_field<"SERVER_DEF_VERIFY_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SUN_LC_PREFIX() { return get_static_field<"SUN_LC_PREFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SUN_LC_VERSION_PREFIX() { return get_static_field<"SUN_LC_VERSION_PREFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> JTS_CLASS_PROPERTY() { return get_static_field<"JTS_CLASS_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ENABLE_JAVA_SERIALIZATION_PROPERTY() { return get_static_field<"ENABLE_JAVA_SERIALIZATION_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PI_ORB_INITIALIZER_CLASS_PREFIX() { return get_static_field<"PI_ORB_INITIALIZER_CLASS_PREFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> USE_DYNAMIC_STUB_PROPERTY() { return get_static_field<"USE_DYNAMIC_STUB_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DYNAMIC_STUB_FACTORY_FACTORY_CLASS() { return get_static_field<"DYNAMIC_STUB_FACTORY_FACTORY_CLASS", jni::ref<java::lang::String>>(); }
	static jint DEFAULT_INITIAL_PORT() { return get_static_field<"DEFAULT_INITIAL_PORT", jint>(); }
	static jni::ref<java::lang::String> DEFAULT_INS_HOST() { return get_static_field<"DEFAULT_INS_HOST", jni::ref<java::lang::String>>(); }
	static jint DEFAULT_INS_PORT() { return get_static_field<"DEFAULT_INS_PORT", jint>(); }
	static jint DEFAULT_INS_GIOP_MAJOR_VERSION() { return get_static_field<"DEFAULT_INS_GIOP_MAJOR_VERSION", jint>(); }
	static jint DEFAULT_INS_GIOP_MINOR_VERSION() { return get_static_field<"DEFAULT_INS_GIOP_MINOR_VERSION", jint>(); }
	static jint MAJORNUMBER_SUPPORTED() { return get_static_field<"MAJORNUMBER_SUPPORTED", jint>(); }
	static jint MINORNUMBERMAX() { return get_static_field<"MINORNUMBERMAX", jint>(); }
	static jint TRANSIENT() { return get_static_field<"TRANSIENT", jint>(); }
	static jint PERSISTENT() { return get_static_field<"PERSISTENT", jint>(); }
	static jni::ref<java::lang::String> DB_DIR_PROPERTY() { return get_static_field<"DB_DIR_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DB_PROPERTY() { return get_static_field<"DB_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORBD_PORT_PROPERTY() { return get_static_field<"ORBD_PORT_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_POLLING_TIME() { return get_static_field<"SERVER_POLLING_TIME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_STARTUP_DELAY() { return get_static_field<"SERVER_STARTUP_DELAY", jni::ref<java::lang::String>>(); }
	static jint DEFAULT_ACTIVATION_PORT() { return get_static_field<"DEFAULT_ACTIVATION_PORT", jint>(); }
	static jint RI_NAMESERVICE_PORT() { return get_static_field<"RI_NAMESERVICE_PORT", jint>(); }
	static jint DEFAULT_SERVER_POLLING_TIME() { return get_static_field<"DEFAULT_SERVER_POLLING_TIME", jint>(); }
	static jint DEFAULT_SERVER_STARTUP_DELAY() { return get_static_field<"DEFAULT_SERVER_STARTUP_DELAY", jint>(); }
	static jni::ref<java::lang::String> LOG_LEVEL_PROPERTY() { return get_static_field<"LOG_LEVEL_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> LOG_RESOURCE_FILE() { return get_static_field<"LOG_RESOURCE_FILE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TRANSIENT_NAME_SERVICE_NAME() { return get_static_field<"TRANSIENT_NAME_SERVICE_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PERSISTENT_NAME_SERVICE_NAME() { return get_static_field<"PERSISTENT_NAME_SERVICE_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NAME_SERVICE_SERVER_ID() { return get_static_field<"NAME_SERVICE_SERVER_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ROOT_POA_NAME() { return get_static_field<"ROOT_POA_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> POA_CURRENT_NAME() { return get_static_field<"POA_CURRENT_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_ACTIVATOR_NAME() { return get_static_field<"SERVER_ACTIVATOR_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_LOCATOR_NAME() { return get_static_field<"SERVER_LOCATOR_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_REPOSITORY_NAME() { return get_static_field<"SERVER_REPOSITORY_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INITIAL_NAME_SERVICE_NAME() { return get_static_field<"INITIAL_NAME_SERVICE_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TRANSACTION_CURRENT_NAME() { return get_static_field<"TRANSACTION_CURRENT_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DYN_ANY_FACTORY_NAME() { return get_static_field<"DYN_ANY_FACTORY_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PI_CURRENT_NAME() { return get_static_field<"PI_CURRENT_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CODEC_FACTORY_NAME() { return get_static_field<"CODEC_FACTORY_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFAULT_DB_DIR() { return get_static_field<"DEFAULT_DB_DIR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFAULT_DB_NAME() { return get_static_field<"DEFAULT_DB_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INITIAL_ORB_DB() { return get_static_field<"INITIAL_ORB_DB", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_LOG_DIR() { return get_static_field<"SERVER_LOG_DIR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORBID_DIR_BASE() { return get_static_field<"ORBID_DIR_BASE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ORBID_DB_FILE_NAME() { return get_static_field<"ORBID_DB_FILE_NAME", jni::ref<java::lang::String>>(); }
	static jint DEFAULT_INACTIVITY_TIMEOUT() { return get_static_field<"DEFAULT_INACTIVITY_TIMEOUT", jint>(); }
	static jni::ref<java::lang::String> THREADPOOL_DEFAULT_NAME() { return get_static_field<"THREADPOOL_DEFAULT_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WORKQUEUE_DEFAULT_NAME() { return get_static_field<"WORKQUEUE_DEFAULT_NAME", jni::ref<java::lang::String>>(); }
	static jint LEGACY_SUN_NOT_SERIALIZABLE() { return get_static_field<"LEGACY_SUN_NOT_SERIALIZABLE", jint>(); }
	static jboolean DEFAULT_ALWAYS_SEND_CODESET_CTX() { return get_static_field<"DEFAULT_ALWAYS_SEND_CODESET_CTX", jboolean>(); }
	static jni::ref<java::lang::String> ALWAYS_SEND_CODESET_CTX_PROPERTY() { return get_static_field<"ALWAYS_SEND_CODESET_CTX_PROPERTY", jni::ref<java::lang::String>>(); }
	static jboolean DEFAULT_USE_BYTE_ORDER_MARKERS() { return get_static_field<"DEFAULT_USE_BYTE_ORDER_MARKERS", jboolean>(); }
	static jni::ref<java::lang::String> USE_BOMS() { return get_static_field<"USE_BOMS", jni::ref<java::lang::String>>(); }
	static jboolean DEFAULT_USE_BYTE_ORDER_MARKERS_IN_ENCAPS() { return get_static_field<"DEFAULT_USE_BYTE_ORDER_MARKERS_IN_ENCAPS", jboolean>(); }
	static jni::ref<java::lang::String> USE_BOMS_IN_ENCAPS() { return get_static_field<"USE_BOMS_IN_ENCAPS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CHAR_CODESETS() { return get_static_field<"CHAR_CODESETS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WCHAR_CODESETS() { return get_static_field<"WCHAR_CODESETS", jni::ref<java::lang::String>>(); }
	static jbyte STREAM_FORMAT_VERSION_1() { return get_static_field<"STREAM_FORMAT_VERSION_1", jbyte>(); }
	static jbyte STREAM_FORMAT_VERSION_2() { return get_static_field<"STREAM_FORMAT_VERSION_2", jbyte>(); }

	static jboolean isTransient(jint p1) { return call_static_method<"isTransient", jboolean>(p1); }
	static jint makePersistent(jint p1) { return call_static_method<"makePersistent", jint>(p1); }

protected:

	ORBConstants(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORBUTIL_ORBCONSTANTS
