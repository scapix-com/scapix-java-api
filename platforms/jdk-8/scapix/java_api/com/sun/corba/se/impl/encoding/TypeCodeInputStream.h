// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/impl/encoding/EncapsInputStream.h>
#include <scapix/java_api/com/sun/corba/se/impl/encoding/TypeCodeReader.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::encoding { class TypeCodeInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::encoding::TypeCodeInputStream>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/encoding/TypeCodeInputStream";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::impl::encoding::EncapsInputStream, scapix::java_api::com::sun::corba::se::impl::encoding::TypeCodeReader>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEINPUTSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/corba/TypeCodeImpl.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/InputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::encoding::TypeCodeInputStream : public jni::object_base<"com/sun/corba/se/impl/encoding/TypeCodeInputStream",
	com::sun::corba::se::impl::encoding::EncapsInputStream,
	com::sun::corba::se::impl::encoding::TypeCodeReader>
{
public:

	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<jni::array<jbyte>> p2, jint p3, jboolean p4, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream> new_object(jni::ref<org::omg::CORBA::ORB> p1, jni::ref<java::nio::ByteBuffer> p2, jint p3, jboolean p4, jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	void addTypeCodeAtPosition(jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> p1, jint p2) { return call_method<"addTypeCodeAtPosition", void>(p1, p2); }
	jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl> getTypeCodeAtPosition(jint p1) { return call_method<"getTypeCodeAtPosition", jni::ref<com::sun::corba::se::impl::corba::TypeCodeImpl>>(p1); }
	void setEnclosingInputStream(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return call_method<"setEnclosingInputStream", void>(p1); }
	jni::ref<com::sun::corba::se::impl::encoding::TypeCodeReader> getTopLevelStream() { return call_method<"getTopLevelStream", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeReader>>(); }
	jint getTopLevelPosition() { return call_method<"getTopLevelPosition", jint>(); }
	static jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream> readEncapsulation(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1, jni::ref<org::omg::CORBA::ORB> p2) { return call_static_method<"readEncapsulation", jni::ref<com::sun::corba::se::impl::encoding::TypeCodeInputStream>>(p1, p2); }
	void printTypeMap() { return call_method<"printTypeMap", void>(); }

protected:

	TypeCodeInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ENCODING_TYPECODEINPUTSTREAM
