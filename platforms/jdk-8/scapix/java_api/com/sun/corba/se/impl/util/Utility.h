// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_UTILITY_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_UTILITY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::util { class Utility; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::util::Utility>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/util/Utility";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_UTILITY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_UTILITY)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_UTILITY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/PresentationManager_StubFactory.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/rmi/Remote.h>
#include <scapix/java_api/javax/rmi/CORBA/Tie.h>
#include <scapix/java_api/org/omg/CORBA/ORB.h>
#include <scapix/java_api/org/omg/CORBA/Object.h>
#include <scapix/java_api/org/omg/CORBA/portable/BoxedValueHelper.h>
#include <scapix/java_api/org/omg/CORBA/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA/portable/ValueFactory.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/InputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::util::Utility : public jni::object_base<"com/sun/corba/se/impl/util/Utility",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> STUB_PREFIX() { return get_static_field<"STUB_PREFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RMI_STUB_SUFFIX() { return get_static_field<"RMI_STUB_SUFFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DYNAMIC_STUB_SUFFIX() { return get_static_field<"DYNAMIC_STUB_SUFFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> IDL_STUB_SUFFIX() { return get_static_field<"IDL_STUB_SUFFIX", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TIE_SUFIX() { return get_static_field<"TIE_SUFIX", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::corba::se::impl::util::Utility> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::Object> autoConnect(jni::ref<java::lang::Object> p1, jni::ref<org::omg::CORBA::ORB> p2, jboolean p3) { return call_static_method<"autoConnect", jni::ref<java::lang::Object>>(p1, p2, p3); }
	static jni::ref<javax::rmi::CORBA::Tie> loadTie(jni::ref<java::rmi::Remote> p1) { return call_static_method<"loadTie", jni::ref<javax::rmi::CORBA::Tie>>(p1); }
	static void clearCaches() { return call_static_method<"clearCaches", void>(); }
	static jni::ref<java::lang::Class> loadClassForClass(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::ClassLoader> p3, jni::ref<java::lang::Class> p4, jni::ref<java::lang::ClassLoader> p5) { return call_static_method<"loadClassForClass", jni::ref<java::lang::Class>>(p1, p2, p3, p4, p5); }
	static jni::ref<org::omg::CORBA::portable::BoxedValueHelper> getHelper(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"getHelper", jni::ref<org::omg::CORBA::portable::BoxedValueHelper>>(p1, p2, p3); }
	static jni::ref<org::omg::CORBA::portable::ValueFactory> getFactory(jni::ref<java::lang::Class> p1, jni::ref<java::lang::String> p2, jni::ref<org::omg::CORBA::ORB> p3, jni::ref<java::lang::String> p4) { return call_static_method<"getFactory", jni::ref<org::omg::CORBA::portable::ValueFactory>>(p1, p2, p3, p4); }
	static jni::ref<java::rmi::Remote> loadStub(jni::ref<javax::rmi::CORBA::Tie> p1, jni::ref<com::sun::corba::se::spi::presentation::rmi::PresentationManager_StubFactory> p2, jni::ref<java::lang::String> p3, jboolean p4) { return call_static_method<"loadStub", jni::ref<java::rmi::Remote>>(p1, p2, p3, p4); }
	static jni::ref<javax::rmi::CORBA::Tie> getAndForgetTie(jni::ref<org::omg::CORBA::Object> p1) { return call_static_method<"getAndForgetTie", jni::ref<javax::rmi::CORBA::Tie>>(p1); }
	static void purgeStubForTie(jni::ref<javax::rmi::CORBA::Tie> p1) { return call_static_method<"purgeStubForTie", void>(p1); }
	static void purgeTieAndServant(jni::ref<javax::rmi::CORBA::Tie> p1) { return call_static_method<"purgeTieAndServant", void>(p1); }
	static jni::ref<java::lang::String> stubNameFromRepID(jni::ref<java::lang::String> p1) { return call_static_method<"stubNameFromRepID", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::rmi::Remote> loadStub(jni::ref<org::omg::CORBA::Object> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"loadStub", jni::ref<java::rmi::Remote>>(p1, p2); }
	static jni::ref<java::lang::Class> loadStubClass(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Class> p3) { return call_static_method<"loadStubClass", jni::ref<java::lang::Class>>(p1, p2, p3); }
	static jni::ref<java::lang::String> stubName(jni::ref<java::lang::String> p1) { return call_static_method<"stubName", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> dynamicStubName(jni::ref<java::lang::String> p1) { return call_static_method<"dynamicStubName", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> stubNameForCompiler(jni::ref<java::lang::String> p1) { return call_static_method<"stubNameForCompiler", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> tieName(jni::ref<java::lang::String> p1) { return call_static_method<"tieName", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> tieNameForCompiler(jni::ref<java::lang::String> p1) { return call_static_method<"tieNameForCompiler", jni::ref<java::lang::String>>(p1); }
	static void throwNotSerializableForCorba(jni::ref<java::lang::String> p1) { return call_static_method<"throwNotSerializableForCorba", void>(p1); }
	static jni::ref<java::lang::String> idlStubName(jni::ref<java::lang::String> p1) { return call_static_method<"idlStubName", jni::ref<java::lang::String>>(p1); }
	static void printStackTrace() { return call_static_method<"printStackTrace", void>(); }
	static jni::ref<java::lang::Object> readObjectAndNarrow(jni::ref<org::omg::CORBA::portable::InputStream> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"readObjectAndNarrow", jni::ref<java::lang::Object>>(p1, p2); }
	static jni::ref<java::lang::Object> readAbstractAndNarrow(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"readAbstractAndNarrow", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	Utility(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_UTIL_UTILITY
