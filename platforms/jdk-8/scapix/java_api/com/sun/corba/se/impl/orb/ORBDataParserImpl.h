// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/spi/orb/ParserImplTableBase.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORBData.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBDATAPARSERIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBDATAPARSERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orb { class ORBDataParserImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orb::ORBDataParserImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orb/ORBDataParserImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::spi::orb::ParserImplTableBase, scapix::java_api::com::sun::corba::se::spi::orb::ORBData>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBDATAPARSERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBDATAPARSERIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBDATAPARSERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/encoding/CodeSetComponentInfo.h>
#include <scapix/java_api/com/sun/corba/se/impl/legacy/connection/USLPort.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/Acceptor.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/GIOPVersion.h>
#include <scapix/java_api/com/sun/corba/se/spi/legacy/connection/ORBSocketFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/DataCollector.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/StringPair.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/CorbaContactInfoListFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/IIOPPrimaryToContactInfo.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/IORToSocketInfo.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/ORBSocketFactory.h>
#include <scapix/java_api/com/sun/corba/se/spi/transport/ReadTimeouts.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/PortableInterceptor/ORBInitializer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orb::ORBDataParserImpl : public jni::object_base<"com/sun/corba/se/impl/orb/ORBDataParserImpl",
	com::sun::corba::se::spi::orb::ParserImplTableBase,
	com::sun::corba::se::spi::orb::ORBData>
{
public:

	jni::ref<java::lang::String> getORBInitialHost() { return call_method<"getORBInitialHost", jni::ref<java::lang::String>>(); }
	jint getORBInitialPort() { return call_method<"getORBInitialPort", jint>(); }
	jni::ref<java::lang::String> getORBServerHost() { return call_method<"getORBServerHost", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getListenOnAllInterfaces() { return call_method<"getListenOnAllInterfaces", jni::ref<java::lang::String>>(); }
	jint getORBServerPort() { return call_method<"getORBServerPort", jint>(); }
	jni::ref<com::sun::corba::se::spi::legacy::connection::ORBSocketFactory> getLegacySocketFactory() { return call_method<"getLegacySocketFactory", jni::ref<com::sun::corba::se::spi::legacy::connection::ORBSocketFactory>>(); }
	jni::ref<com::sun::corba::se::spi::transport::ORBSocketFactory> getSocketFactory() { return call_method<"getSocketFactory", jni::ref<com::sun::corba::se::spi::transport::ORBSocketFactory>>(); }
	jni::ref<jni::array<com::sun::corba::se::impl::legacy::connection::USLPort>> getUserSpecifiedListenPorts() { return call_method<"getUserSpecifiedListenPorts", jni::ref<jni::array<com::sun::corba::se::impl::legacy::connection::USLPort>>>(); }
	jni::ref<com::sun::corba::se::spi::transport::IORToSocketInfo> getIORToSocketInfo() { return call_method<"getIORToSocketInfo", jni::ref<com::sun::corba::se::spi::transport::IORToSocketInfo>>(); }
	jni::ref<com::sun::corba::se::spi::transport::IIOPPrimaryToContactInfo> getIIOPPrimaryToContactInfo() { return call_method<"getIIOPPrimaryToContactInfo", jni::ref<com::sun::corba::se::spi::transport::IIOPPrimaryToContactInfo>>(); }
	jni::ref<java::lang::String> getORBId() { return call_method<"getORBId", jni::ref<java::lang::String>>(); }
	jboolean getORBServerIdPropertySpecified() { return call_method<"getORBServerIdPropertySpecified", jboolean>(); }
	jboolean isLocalOptimizationAllowed() { return call_method<"isLocalOptimizationAllowed", jboolean>(); }
	jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> getGIOPVersion() { return call_method<"getGIOPVersion", jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion>>(); }
	jint getHighWaterMark() { return call_method<"getHighWaterMark", jint>(); }
	jint getLowWaterMark() { return call_method<"getLowWaterMark", jint>(); }
	jint getNumberToReclaim() { return call_method<"getNumberToReclaim", jint>(); }
	jint getGIOPFragmentSize() { return call_method<"getGIOPFragmentSize", jint>(); }
	jint getGIOPBufferSize() { return call_method<"getGIOPBufferSize", jint>(); }
	jint getGIOPBuffMgrStrategy(jni::ref<com::sun::corba::se::spi::ior::iiop::GIOPVersion> p1) { return call_method<"getGIOPBuffMgrStrategy", jint>(p1); }
	jshort getGIOPTargetAddressPreference() { return call_method<"getGIOPTargetAddressPreference", jshort>(); }
	jshort getGIOPAddressDisposition() { return call_method<"getGIOPAddressDisposition", jshort>(); }
	jboolean useByteOrderMarkers() { return call_method<"useByteOrderMarkers", jboolean>(); }
	jboolean useByteOrderMarkersInEncapsulations() { return call_method<"useByteOrderMarkersInEncapsulations", jboolean>(); }
	jboolean alwaysSendCodeSetServiceContext() { return call_method<"alwaysSendCodeSetServiceContext", jboolean>(); }
	jboolean getPersistentPortInitialized() { return call_method<"getPersistentPortInitialized", jboolean>(); }
	jint getPersistentServerPort() { return call_method<"getPersistentServerPort", jint>(); }
	jboolean getPersistentServerIdInitialized() { return call_method<"getPersistentServerIdInitialized", jboolean>(); }
	jint getPersistentServerId() { return call_method<"getPersistentServerId", jint>(); }
	jboolean getServerIsORBActivated() { return call_method<"getServerIsORBActivated", jboolean>(); }
	jni::ref<java::lang::Class> getBadServerIdHandler() { return call_method<"getBadServerIdHandler", jni::ref<java::lang::Class>>(); }
	jni::ref<com::sun::corba::se::impl::encoding::CodeSetComponentInfo> getCodeSetComponentInfo() { return call_method<"getCodeSetComponentInfo", jni::ref<com::sun::corba::se::impl::encoding::CodeSetComponentInfo>>(); }
	jni::ref<jni::array<org::omg::PortableInterceptor::ORBInitializer>> getORBInitializers() { return call_method<"getORBInitializers", jni::ref<jni::array<org::omg::PortableInterceptor::ORBInitializer>>>(); }
	jni::ref<jni::array<com::sun::corba::se::spi::orb::StringPair>> getORBInitialReferences() { return call_method<"getORBInitialReferences", jni::ref<jni::array<com::sun::corba::se::spi::orb::StringPair>>>(); }
	jni::ref<java::lang::String> getORBDefaultInitialReference() { return call_method<"getORBDefaultInitialReference", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::lang::String>> getORBDebugFlags() { return call_method<"getORBDebugFlags", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<com::sun::corba::se::pept::transport::Acceptor>> getAcceptors() { return call_method<"getAcceptors", jni::ref<jni::array<com::sun::corba::se::pept::transport::Acceptor>>>(); }
	jni::ref<com::sun::corba::se::spi::transport::CorbaContactInfoListFactory> getCorbaContactInfoListFactory() { return call_method<"getCorbaContactInfoListFactory", jni::ref<com::sun::corba::se::spi::transport::CorbaContactInfoListFactory>>(); }
	jni::ref<java::lang::String> acceptorSocketType() { return call_method<"acceptorSocketType", jni::ref<java::lang::String>>(); }
	jboolean acceptorSocketUseSelectThreadToWait() { return call_method<"acceptorSocketUseSelectThreadToWait", jboolean>(); }
	jboolean acceptorSocketUseWorkerThreadForEvent() { return call_method<"acceptorSocketUseWorkerThreadForEvent", jboolean>(); }
	jni::ref<java::lang::String> connectionSocketType() { return call_method<"connectionSocketType", jni::ref<java::lang::String>>(); }
	jboolean connectionSocketUseSelectThreadToWait() { return call_method<"connectionSocketUseSelectThreadToWait", jboolean>(); }
	jboolean connectionSocketUseWorkerThreadForEvent() { return call_method<"connectionSocketUseWorkerThreadForEvent", jboolean>(); }
	jboolean isJavaSerializationEnabled() { return call_method<"isJavaSerializationEnabled", jboolean>(); }
	jni::ref<com::sun::corba::se::spi::transport::ReadTimeouts> getTransportTCPReadTimeouts() { return call_method<"getTransportTCPReadTimeouts", jni::ref<com::sun::corba::se::spi::transport::ReadTimeouts>>(); }
	jboolean disableDirectByteBufferUse() { return call_method<"disableDirectByteBufferUse", jboolean>(); }
	jboolean useRepId() { return call_method<"useRepId", jboolean>(); }
	static jni::ref<com::sun::corba::se::impl::orb::ORBDataParserImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<com::sun::corba::se::spi::orb::DataCollector> p2) { return base_::new_object(p1, p2); }
	void complete() { return call_method<"complete", void>(); }

protected:

	ORBDataParserImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_ORBDATAPARSERIMPL
