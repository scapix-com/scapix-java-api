// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl.h>
#include <scapix/java_api/com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_INVOCATIONHANDLERFACTORYIMPL_CUSTOMCOMPOSITEINVOCATIONHANDLERIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_INVOCATIONHANDLERFACTORYIMPL_CUSTOMCOMPOSITEINVOCATIONHANDLERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::presentation::rmi { class InvocationHandlerFactoryImpl_CustomCompositeInvocationHandlerImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::presentation::rmi::InvocationHandlerFactoryImpl_CustomCompositeInvocationHandlerImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::spi::orbutil::proxy::CompositeInvocationHandlerImpl, scapix::java_api::com::sun::corba::se::spi::orbutil::proxy::LinkedInvocationHandler, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_INVOCATIONHANDLERFACTORYIMPL_CUSTOMCOMPOSITEINVOCATIONHANDLERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_INVOCATIONHANDLERFACTORYIMPL_CUSTOMCOMPOSITEINVOCATIONHANDLERIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_INVOCATIONHANDLERFACTORYIMPL_CUSTOMCOMPOSITEINVOCATIONHANDLERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl.h>
#include <scapix/java_api/com/sun/corba/se/spi/presentation/rmi/DynamicStub.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/reflect/Proxy.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::corba::se::impl::presentation::rmi::InvocationHandlerFactoryImpl_CustomCompositeInvocationHandlerImpl : public jni::object_base<"com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl",
	com::sun::corba::se::spi::orbutil::proxy::CompositeInvocationHandlerImpl,
	com::sun::corba::se::spi::orbutil::proxy::LinkedInvocationHandler,
	java::io::Serializable>
{
public:

	void setProxy(jni::ref<java::lang::reflect::Proxy> p1) { return call_method<"setProxy", void>(p1); }
	jni::ref<java::lang::reflect::Proxy> getProxy() { return call_method<"getProxy", jni::ref<java::lang::reflect::Proxy>>(); }
	static jni::ref<com::sun::corba::se::impl::presentation::rmi::InvocationHandlerFactoryImpl_CustomCompositeInvocationHandlerImpl> new_object(jni::ref<com::sun::corba::se::impl::presentation::rmi::InvocationHandlerFactoryImpl> p1, jni::ref<com::sun::corba::se::spi::presentation::rmi::DynamicStub> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::Object> writeReplace() { return call_method<"writeReplace", jni::ref<java::lang::Object>>(); }

protected:

	InvocationHandlerFactoryImpl_CustomCompositeInvocationHandlerImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_PRESENTATION_RMI_INVOCATIONHANDLERFACTORYIMPL_CUSTOMCOMPOSITEINVOCATIONHANDLERIMPL
