// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/impl/io/OutputStreamHook.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::io { class IIOPOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::io::IIOPOutputStream>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/io/IIOPOutputStream";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::impl::io::OutputStreamHook>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPOUTPUTSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPOUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::io::IIOPOutputStream : public jni::object_base<"com/sun/corba/se/impl/io/IIOPOutputStream",
	com::sun::corba::se::impl::io::OutputStreamHook>
{
public:

	static jni::ref<com::sun::corba::se::impl::io::IIOPOutputStream> new_object() { return base_::new_object(); }
	void writeObjectOverride(jni::ref<java::lang::Object> p1) { return call_method<"writeObjectOverride", void>(p1); }
	void simpleWriteObject(jni::ref<java::lang::Object> p1, jbyte p2) { return call_method<"simpleWriteObject", void>(p1, p2); }
	void defaultWriteObjectDelegate() { return call_method<"defaultWriteObjectDelegate", void>(); }
	jboolean enableReplaceObjectDelegate(jboolean p1) { return call_method<"enableReplaceObjectDelegate", jboolean>(p1); }
	void close() { return call_method<"close", void>(); }
	void flush() { return call_method<"flush", void>(); }
	void reset() { return call_method<"reset", void>(); }
	void write(jni::ref<jni::array<jbyte>> p1) { return call_method<"write", void>(p1); }
	void write(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"write", void>(p1, p2, p3); }
	void write(jint p1) { return call_method<"write", void>(p1); }
	void writeBoolean(jboolean p1) { return call_method<"writeBoolean", void>(p1); }
	void writeByte(jint p1) { return call_method<"writeByte", void>(p1); }
	void writeBytes(jni::ref<java::lang::String> p1) { return call_method<"writeBytes", void>(p1); }
	void writeChar(jint p1) { return call_method<"writeChar", void>(p1); }
	void writeChars(jni::ref<java::lang::String> p1) { return call_method<"writeChars", void>(p1); }
	void writeDouble(jdouble p1) { return call_method<"writeDouble", void>(p1); }
	void writeFloat(jfloat p1) { return call_method<"writeFloat", void>(p1); }
	void writeInt(jint p1) { return call_method<"writeInt", void>(p1); }
	void writeLong(jlong p1) { return call_method<"writeLong", void>(p1); }
	void writeShort(jint p1) { return call_method<"writeShort", void>(p1); }
	void writeUTF(jni::ref<java::lang::String> p1) { return call_method<"writeUTF", void>(p1); }

protected:

	IIOPOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IO_IIOPOUTPUTSTREAM
