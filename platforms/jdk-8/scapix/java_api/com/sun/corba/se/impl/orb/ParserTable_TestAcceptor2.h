// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/Acceptor.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_PARSERTABLE_TESTACCEPTOR2_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_PARSERTABLE_TESTACCEPTOR2_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::orb { class ParserTable_TestAcceptor2; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::orb::ParserTable_TestAcceptor2>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/orb/ParserTable$TestAcceptor2";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::corba::se::pept::transport::Acceptor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_PARSERTABLE_TESTACCEPTOR2_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_PARSERTABLE_TESTACCEPTOR2)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_PARSERTABLE_TESTACCEPTOR2

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/pept/broker/Broker.h>
#include <scapix/java_api/com/sun/corba/se/pept/encoding/InputObject.h>
#include <scapix/java_api/com/sun/corba/se/pept/encoding/OutputObject.h>
#include <scapix/java_api/com/sun/corba/se/pept/protocol/MessageMediator.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/Connection.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/EventHandler.h>
#include <scapix/java_api/com/sun/corba/se/pept/transport/InboundConnectionCache.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::orb::ParserTable_TestAcceptor2 : public jni::object_base<"com/sun/corba/se/impl/orb/ParserTable$TestAcceptor2",
	java::lang::Object,
	com::sun::corba::se::pept::transport::Acceptor>
{
public:

	static jni::ref<com::sun::corba::se::impl::orb::ParserTable_TestAcceptor2> new_object() { return base_::new_object(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean initialize() { return call_method<"initialize", jboolean>(); }
	jboolean initialized() { return call_method<"initialized", jboolean>(); }
	jni::ref<java::lang::String> getConnectionCacheType() { return call_method<"getConnectionCacheType", jni::ref<java::lang::String>>(); }
	void setConnectionCache(jni::ref<com::sun::corba::se::pept::transport::InboundConnectionCache> p1) { return call_method<"setConnectionCache", void>(p1); }
	jni::ref<com::sun::corba::se::pept::transport::InboundConnectionCache> getConnectionCache() { return call_method<"getConnectionCache", jni::ref<com::sun::corba::se::pept::transport::InboundConnectionCache>>(); }
	jboolean shouldRegisterAcceptEvent() { return call_method<"shouldRegisterAcceptEvent", jboolean>(); }
	void setUseSelectThreadForConnections(jboolean p1) { return call_method<"setUseSelectThreadForConnections", void>(p1); }
	jboolean shouldUseSelectThreadForConnections() { return call_method<"shouldUseSelectThreadForConnections", jboolean>(); }
	void setUseWorkerThreadForConnections(jboolean p1) { return call_method<"setUseWorkerThreadForConnections", void>(p1); }
	jboolean shouldUseWorkerThreadForConnections() { return call_method<"shouldUseWorkerThreadForConnections", jboolean>(); }
	void accept() { return call_method<"accept", void>(); }
	void close() { return call_method<"close", void>(); }
	jni::ref<com::sun::corba::se::pept::transport::EventHandler> getEventHandler() { return call_method<"getEventHandler", jni::ref<com::sun::corba::se::pept::transport::EventHandler>>(); }
	jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> createMessageMediator(jni::ref<com::sun::corba::se::pept::broker::Broker> p1, jni::ref<com::sun::corba::se::pept::transport::Connection> p2) { return call_method<"createMessageMediator", jni::ref<com::sun::corba::se::pept::protocol::MessageMediator>>(p1, p2); }
	jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> finishCreatingMessageMediator(jni::ref<com::sun::corba::se::pept::broker::Broker> p1, jni::ref<com::sun::corba::se::pept::transport::Connection> p2, jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p3) { return call_method<"finishCreatingMessageMediator", jni::ref<com::sun::corba::se::pept::protocol::MessageMediator>>(p1, p2, p3); }
	jni::ref<com::sun::corba::se::pept::encoding::InputObject> createInputObject(jni::ref<com::sun::corba::se::pept::broker::Broker> p1, jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p2) { return call_method<"createInputObject", jni::ref<com::sun::corba::se::pept::encoding::InputObject>>(p1, p2); }
	jni::ref<com::sun::corba::se::pept::encoding::OutputObject> createOutputObject(jni::ref<com::sun::corba::se::pept::broker::Broker> p1, jni::ref<com::sun::corba::se::pept::protocol::MessageMediator> p2) { return call_method<"createOutputObject", jni::ref<com::sun::corba::se::pept::encoding::OutputObject>>(p1, p2); }

protected:

	ParserTable_TestAcceptor2(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_ORB_PARSERTABLE_TESTACCEPTOR2
