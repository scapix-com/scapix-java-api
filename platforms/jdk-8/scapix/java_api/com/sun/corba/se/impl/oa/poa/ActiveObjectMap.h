// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_ACTIVEOBJECTMAP_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_ACTIVEOBJECTMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::oa::poa { class ActiveObjectMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::oa::poa::ActiveObjectMap>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/oa/poa/ActiveObjectMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_ACTIVEOBJECTMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_ACTIVEOBJECTMAP)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_ACTIVEOBJECTMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/impl/oa/poa/AOMEntry.h>
#include <scapix/java_api/com/sun/corba/se/impl/oa/poa/ActiveObjectMap_Key.h>
#include <scapix/java_api/com/sun/corba/se/impl/oa/poa/POAImpl.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/org/omg/PortableServer/Servant.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::oa::poa::ActiveObjectMap : public jni::object_base<"com/sun/corba/se/impl/oa/poa/ActiveObjectMap",
	java::lang::Object>
{
public:

	using Key = ActiveObjectMap_Key;

	static jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap> create(jni::ref<com::sun::corba::se::impl::oa::poa::POAImpl> p1, jboolean p2) { return call_static_method<"create", jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap>>(p1, p2); }
	jboolean contains(jni::ref<org::omg::PortableServer::Servant> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean containsKey(jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap_Key> p1) { return call_method<"containsKey", jboolean>(p1); }
	jni::ref<com::sun::corba::se::impl::oa::poa::AOMEntry> get(jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap_Key> p1) { return call_method<"get", jni::ref<com::sun::corba::se::impl::oa::poa::AOMEntry>>(p1); }
	jni::ref<org::omg::PortableServer::Servant> getServant(jni::ref<com::sun::corba::se::impl::oa::poa::AOMEntry> p1) { return call_method<"getServant", jni::ref<org::omg::PortableServer::Servant>>(p1); }
	jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap_Key> getKey(jni::ref<com::sun::corba::se::impl::oa::poa::AOMEntry> p1) { return call_method<"getKey", jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap_Key>>(p1); }
	jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap_Key> getKey(jni::ref<org::omg::PortableServer::Servant> p1) { return call_method<"getKey", jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap_Key>>(p1); }
	void putServant(jni::ref<org::omg::PortableServer::Servant> p1, jni::ref<com::sun::corba::se::impl::oa::poa::AOMEntry> p2) { return call_method<"putServant", void>(p1, p2); }
	void remove(jni::ref<com::sun::corba::se::impl::oa::poa::ActiveObjectMap_Key> p1) { return call_method<"remove", void>(p1); }
	jboolean hasMultipleIDs(jni::ref<com::sun::corba::se::impl::oa::poa::AOMEntry> p1) { return call_method<"hasMultipleIDs", jboolean>(p1); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }

protected:

	ActiveObjectMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_OA_POA_ACTIVEOBJECTMAP
