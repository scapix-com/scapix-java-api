// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/corba/se/spi/ior/IdentifiableContainerBase.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IOR.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_IORIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_IORIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::corba::se::impl::ior { class IORImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::corba::se::impl::ior::IORImpl>
{
	static constexpr fixed_string class_name = "com/sun/corba/se/impl/ior/IORImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::corba::se::spi::ior::IdentifiableContainerBase, scapix::java_api::com::sun::corba::se::spi::ior::IOR>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_IORIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_IORIMPL)
#define SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_IORIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/corba/se/spi/ior/IORTemplate.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/IORTemplateList.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/ObjectId.h>
#include <scapix/java_api/com/sun/corba/se/spi/ior/iiop/IIOPProfile.h>
#include <scapix/java_api/com/sun/corba/se/spi/orb/ORB.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/InputStream.h>
#include <scapix/java_api/org/omg/CORBA_2_3/portable/OutputStream.h>
#include <scapix/java_api/org/omg/IOP/IOR.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::corba::se::impl::ior::IORImpl : public jni::object_base<"com/sun/corba/se/impl/ior/IORImpl",
	com::sun::corba::se::spi::ior::IdentifiableContainerBase,
	com::sun::corba::se::spi::ior::IOR>
{
public:

	jni::ref<com::sun::corba::se::spi::orb::ORB> getORB() { return call_method<"getORB", jni::ref<com::sun::corba::se::spi::orb::ORB>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	static jni::ref<com::sun::corba::se::impl::ior::IORImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::corba::se::impl::ior::IORImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::corba::se::impl::ior::IORImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::corba::se::spi::ior::IORTemplate> p3, jni::ref<com::sun::corba::se::spi::ior::ObjectId> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::ior::IORImpl> new_object(jni::ref<com::sun::corba::se::spi::orb::ORB> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::corba::se::spi::ior::IORTemplateList> p3, jni::ref<com::sun::corba::se::spi::ior::ObjectId> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::corba::se::impl::ior::IORImpl> new_object(jni::ref<org::omg::CORBA_2_3::portable::InputStream> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::String> getTypeId() { return call_method<"getTypeId", jni::ref<java::lang::String>>(); }
	void write(jni::ref<org::omg::CORBA_2_3::portable::OutputStream> p1) { return call_method<"write", void>(p1); }
	jni::ref<java::lang::String> stringify() { return call_method<"stringify", jni::ref<java::lang::String>>(); }
	void makeImmutable() { return call_method<"makeImmutable", void>(); }
	jni::ref<org::omg::IOP::IOR> getIOPIOR() { return call_method<"getIOPIOR", jni::ref<org::omg::IOP::IOR>>(); }
	jboolean isNil() { return call_method<"isNil", jboolean>(); }
	jboolean isEquivalent(jni::ref<com::sun::corba::se::spi::ior::IOR> p1) { return call_method<"isEquivalent", jboolean>(p1); }
	jni::ref<com::sun::corba::se::spi::ior::IORTemplateList> getIORTemplates() { return call_method<"getIORTemplates", jni::ref<com::sun::corba::se::spi::ior::IORTemplateList>>(); }
	jni::ref<com::sun::corba::se::spi::ior::iiop::IIOPProfile> getProfile() { return call_method<"getProfile", jni::ref<com::sun::corba::se::spi::ior::iiop::IIOPProfile>>(); }

protected:

	IORImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_CORBA_SE_IMPL_IOR_IORIMPL
