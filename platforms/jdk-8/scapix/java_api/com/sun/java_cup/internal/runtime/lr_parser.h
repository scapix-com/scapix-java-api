// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JAVA_CUP_INTERNAL_RUNTIME_LR_PARSER_FWD
#define SCAPIX_JAVA_API_COM_SUN_JAVA_CUP_INTERNAL_RUNTIME_LR_PARSER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::java_cup::internal::runtime { class lr_parser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::java_cup::internal::runtime::lr_parser>
{
	static constexpr fixed_string class_name = "com/sun/java_cup/internal/runtime/lr_parser";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_CUP_INTERNAL_RUNTIME_LR_PARSER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JAVA_CUP_INTERNAL_RUNTIME_LR_PARSER)
#define SCAPIX_JAVA_API_COM_SUN_JAVA_CUP_INTERNAL_RUNTIME_LR_PARSER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/java_cup/internal/runtime/Scanner.h>
#include <scapix/java_api/com/sun/java_cup/internal/runtime/Symbol.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Stack.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::java_cup::internal::runtime::lr_parser : public jni::object_base<"com/sun/java_cup/internal/runtime/lr_parser",
	java::lang::Object>
{
public:

	static jint ID_GROUP() { return get_static_field<"ID_GROUP", jint>(); }
	static jint ID_OPERATOR() { return get_static_field<"ID_OPERATOR", jint>(); }
	static jint ID_TOTAL_OPERATOR() { return get_static_field<"ID_TOTAL_OPERATOR", jint>(); }
	jint grpLimit() { return get_field<"grpLimit", jint>(); }
	void grpLimit(jint v) { set_field<"grpLimit", jint>(v); }
	jint opLimit() { return get_field<"opLimit", jint>(); }
	void opLimit(jint v) { set_field<"opLimit", jint>(v); }
	jint totalOpLimit() { return get_field<"totalOpLimit", jint>(); }
	void totalOpLimit(jint v) { set_field<"totalOpLimit", jint>(v); }

	static jni::ref<com::sun::java_cup::internal::runtime::lr_parser> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::java_cup::internal::runtime::lr_parser> new_object(jni::ref<com::sun::java_cup::internal::runtime::Scanner> p1) { return base_::new_object(p1); }
	jni::ref<jni::array<jni::array<jshort>>> production_table() { return call_method<"production_table", jni::ref<jni::array<jni::array<jshort>>>>(); }
	jni::ref<jni::array<jni::array<jshort>>> action_table() { return call_method<"action_table", jni::ref<jni::array<jni::array<jshort>>>>(); }
	jni::ref<jni::array<jni::array<jshort>>> reduce_table() { return call_method<"reduce_table", jni::ref<jni::array<jni::array<jshort>>>>(); }
	jint start_state() { return call_method<"start_state", jint>(); }
	jint start_production() { return call_method<"start_production", jint>(); }
	jint EOF_sym() { return call_method<"EOF_sym", jint>(); }
	jint error_sym() { return call_method<"error_sym", jint>(); }
	void done_parsing() { return call_method<"done_parsing", void>(); }
	void setScanner(jni::ref<com::sun::java_cup::internal::runtime::Scanner> p1) { return call_method<"setScanner", void>(p1); }
	jni::ref<com::sun::java_cup::internal::runtime::Scanner> getScanner() { return call_method<"getScanner", jni::ref<com::sun::java_cup::internal::runtime::Scanner>>(); }
	jni::ref<com::sun::java_cup::internal::runtime::Symbol> do_action(jint p1, jni::ref<com::sun::java_cup::internal::runtime::lr_parser> p2, jni::ref<java::util::Stack> p3, jint p4) { return call_method<"do_action", jni::ref<com::sun::java_cup::internal::runtime::Symbol>>(p1, p2, p3, p4); }
	void user_init() { return call_method<"user_init", void>(); }
	jni::ref<com::sun::java_cup::internal::runtime::Symbol> scan() { return call_method<"scan", jni::ref<com::sun::java_cup::internal::runtime::Symbol>>(); }
	void report_fatal_error(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"report_fatal_error", void>(p1, p2); }
	void report_error(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"report_error", void>(p1, p2); }
	void syntax_error(jni::ref<com::sun::java_cup::internal::runtime::Symbol> p1) { return call_method<"syntax_error", void>(p1); }
	void unrecovered_syntax_error(jni::ref<com::sun::java_cup::internal::runtime::Symbol> p1) { return call_method<"unrecovered_syntax_error", void>(p1); }
	jni::ref<com::sun::java_cup::internal::runtime::Symbol> parse() { return call_method<"parse", jni::ref<com::sun::java_cup::internal::runtime::Symbol>>(); }
	jboolean isOverLimit() { return call_method<"isOverLimit", jboolean>(); }
	jint getCount(jint p1) { return call_method<"getCount", jint>(p1); }
	void debug_message(jni::ref<java::lang::String> p1) { return call_method<"debug_message", void>(p1); }
	void dump_stack() { return call_method<"dump_stack", void>(); }
	void debug_reduce(jint p1, jint p2, jint p3) { return call_method<"debug_reduce", void>(p1, p2, p3); }
	void debug_shift(jni::ref<com::sun::java_cup::internal::runtime::Symbol> p1) { return call_method<"debug_shift", void>(p1); }
	void debug_stack() { return call_method<"debug_stack", void>(); }
	jni::ref<com::sun::java_cup::internal::runtime::Symbol> debug_parse() { return call_method<"debug_parse", jni::ref<com::sun::java_cup::internal::runtime::Symbol>>(); }

protected:

	lr_parser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_CUP_INTERNAL_RUNTIME_LR_PARSER
