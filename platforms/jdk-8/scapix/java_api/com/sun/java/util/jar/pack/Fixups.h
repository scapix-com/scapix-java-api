// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractCollection.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_FIXUPS_FWD
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_FIXUPS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::java::util::jar::pack { class Fixups; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::java::util::jar::pack::Fixups>
{
	static constexpr fixed_string class_name = "com/sun/java/util/jar/pack/Fixups";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractCollection>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_FIXUPS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_FIXUPS)
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_FIXUPS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/java/util/jar/pack/ConstantPool_Entry.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/ConstantPool_Index.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Fixups_Fixup.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::java::util::jar::pack::Fixups : public jni::object_base<"com/sun/java/util/jar/pack/Fixups",
	java::util::AbstractCollection>
{
public:

	using Fixup = Fixups_Fixup;

	jint size() { return call_method<"size", jint>(); }
	void trimToSize() { return call_method<"trimToSize", void>(); }
	void visitRefs(jni::ref<java::util::Collection> p1) { return call_method<"visitRefs", void>(p1); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<jni::array<jbyte>> getBytes() { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(); }
	void setBytes(jni::ref<jni::array<jbyte>> p1) { return call_method<"setBytes", void>(p1); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	void add(jint p1, jint p2, jni::ref<com::sun::java::util::jar::pack::ConstantPool_Entry> p3) { return call_method<"add", void>(p1, p2, p3); }
	jboolean add(jni::ref<com::sun::java::util::jar::pack::Fixups_Fixup> p1) { return call_method<"add", jboolean>(p1); }
	jboolean addAll(jni::ref<java::util::Collection> p1) { return call_method<"addAll", jboolean>(p1); }
	static void setBytes(jni::ref<java::lang::Object> p1, jni::ref<jni::array<jbyte>> p2) { return call_static_method<"setBytes", void>(p1, p2); }
	static jni::ref<java::lang::Object> trimToSize(jni::ref<java::lang::Object> p1) { return call_static_method<"trimToSize", jni::ref<java::lang::Object>>(p1); }
	static void visitRefs(jni::ref<java::lang::Object> p1, jni::ref<java::util::Collection> p2) { return call_static_method<"visitRefs", void>(p1, p2); }
	static void finishRefs(jni::ref<java::lang::Object> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<com::sun::java::util::jar::pack::ConstantPool_Index> p3) { return call_static_method<"finishRefs", void>(p1, p2, p3); }

protected:

	Fixups(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_FIXUPS
