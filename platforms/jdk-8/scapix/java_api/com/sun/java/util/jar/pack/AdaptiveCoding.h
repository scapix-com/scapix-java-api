// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/CodingMethod.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ADAPTIVECODING_FWD
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ADAPTIVECODING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::java::util::jar::pack { class AdaptiveCoding; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::java::util::jar::pack::AdaptiveCoding>
{
	static constexpr fixed_string class_name = "com/sun/java/util/jar/pack/AdaptiveCoding";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::java::util::jar::pack::CodingMethod>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ADAPTIVECODING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ADAPTIVECODING)
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ADAPTIVECODING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/java/util/jar/pack/Coding.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::java::util::jar::pack::AdaptiveCoding : public jni::object_base<"com/sun/java/util/jar/pack/AdaptiveCoding",
	java::lang::Object,
	com::sun::java::util::jar::pack::CodingMethod>
{
public:

	static jint KX_MIN() { return get_static_field<"KX_MIN", jint>(); }
	static jint KX_MAX() { return get_static_field<"KX_MAX", jint>(); }
	static jint KX_LG2BASE() { return get_static_field<"KX_LG2BASE", jint>(); }
	static jint KX_BASE() { return get_static_field<"KX_BASE", jint>(); }
	static jint KB_MIN() { return get_static_field<"KB_MIN", jint>(); }
	static jint KB_MAX() { return get_static_field<"KB_MAX", jint>(); }
	static jint KB_OFFSET() { return get_static_field<"KB_OFFSET", jint>(); }
	static jint KB_DEFAULT() { return get_static_field<"KB_DEFAULT", jint>(); }

	static jni::ref<com::sun::java::util::jar::pack::AdaptiveCoding> new_object(jint p1, jni::ref<com::sun::java::util::jar::pack::CodingMethod> p2, jni::ref<com::sun::java::util::jar::pack::CodingMethod> p3) { return base_::new_object(p1, p2, p3); }
	void setHeadCoding(jni::ref<com::sun::java::util::jar::pack::CodingMethod> p1) { return call_method<"setHeadCoding", void>(p1); }
	void setHeadLength(jint p1) { return call_method<"setHeadLength", void>(p1); }
	void setTailCoding(jni::ref<com::sun::java::util::jar::pack::CodingMethod> p1) { return call_method<"setTailCoding", void>(p1); }
	jboolean isTrivial() { return call_method<"isTrivial", jboolean>(); }
	void writeArrayTo(jni::ref<java::io::OutputStream> p1, jni::ref<jni::array<jint>> p2, jint p3, jint p4) { return call_method<"writeArrayTo", void>(p1, p2, p3, p4); }
	void readArrayFrom(jni::ref<java::io::InputStream> p1, jni::ref<jni::array<jint>> p2, jint p3, jint p4) { return call_method<"readArrayFrom", void>(p1, p2, p3, p4); }
	static jboolean isCodableLength(jint p1) { return call_static_method<"isCodableLength", jboolean>(p1); }
	jni::ref<jni::array<jbyte>> getMetaCoding(jni::ref<com::sun::java::util::jar::pack::Coding> p1) { return call_method<"getMetaCoding", jni::ref<jni::array<jbyte>>>(p1); }
	static jint parseMetaCoding(jni::ref<jni::array<jbyte>> p1, jint p2, jni::ref<com::sun::java::util::jar::pack::Coding> p3, jni::ref<jni::array<com::sun::java::util::jar::pack::CodingMethod>> p4) { return call_static_method<"parseMetaCoding", jint>(p1, p2, p3, p4); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AdaptiveCoding(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_ADAPTIVECODING
