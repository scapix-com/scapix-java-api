// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_INSTRUCTION_FWD
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_INSTRUCTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::java::util::jar::pack { class Instruction; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::java::util::jar::pack::Instruction>
{
	static constexpr fixed_string class_name = "com/sun/java/util/jar/pack/Instruction";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_INSTRUCTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_INSTRUCTION)
#define SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_INSTRUCTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/java/util/jar/pack/ConstantPool_Entry.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Package_Version.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Instruction_Switch.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Instruction_TableSwitch.h>
#include <scapix/java_api/com/sun/java/util/jar/pack/Instruction_LookupSwitch.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::java::util::jar::pack::Instruction : public jni::object_base<"com/sun/java/util/jar/pack/Instruction",
	java::lang::Object>
{
public:

	using Switch = Instruction_Switch;
	using TableSwitch = Instruction_TableSwitch;
	using LookupSwitch = Instruction_LookupSwitch;

	jint getBC() { return call_method<"getBC", jint>(); }
	jboolean isWide() { return call_method<"isWide", jboolean>(); }
	jni::ref<jni::array<jbyte>> getBytes() { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(); }
	jint getPC() { return call_method<"getPC", jint>(); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jint getNextPC() { return call_method<"getNextPC", jint>(); }
	jni::ref<com::sun::java::util::jar::pack::Instruction> next() { return call_method<"next", jni::ref<com::sun::java::util::jar::pack::Instruction>>(); }
	jboolean isNonstandard() { return call_method<"isNonstandard", jboolean>(); }
	void setNonstandardLength(jint p1) { return call_method<"setNonstandardLength", void>(p1); }
	jni::ref<com::sun::java::util::jar::pack::Instruction> forceNextPC(jint p1) { return call_method<"forceNextPC", jni::ref<com::sun::java::util::jar::pack::Instruction>>(p1); }
	static jni::ref<com::sun::java::util::jar::pack::Instruction> at(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"at", jni::ref<com::sun::java::util::jar::pack::Instruction>>(p1, p2); }
	static jni::ref<com::sun::java::util::jar::pack::Instruction> at(jni::ref<jni::array<jbyte>> p1, jint p2, jni::ref<com::sun::java::util::jar::pack::Instruction> p3) { return call_static_method<"at", jni::ref<com::sun::java::util::jar::pack::Instruction>>(p1, p2, p3); }
	jbyte getCPTag() { return call_method<"getCPTag", jbyte>(); }
	jint getCPIndex() { return call_method<"getCPIndex", jint>(); }
	void setCPIndex(jint p1) { return call_method<"setCPIndex", void>(p1); }
	jni::ref<com::sun::java::util::jar::pack::ConstantPool_Entry> getCPRef(jni::ref<jni::array<com::sun::java::util::jar::pack::ConstantPool_Entry>> p1) { return call_method<"getCPRef", jni::ref<com::sun::java::util::jar::pack::ConstantPool_Entry>>(p1); }
	jint getLocalSlot() { return call_method<"getLocalSlot", jint>(); }
	jint getBranchLabel() { return call_method<"getBranchLabel", jint>(); }
	void setBranchLabel(jint p1) { return call_method<"setBranchLabel", void>(p1); }
	jint getConstant() { return call_method<"getConstant", jint>(); }
	void setConstant(jint p1) { return call_method<"setConstant", void>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<com::sun::java::util::jar::pack::Instruction> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString(jni::ref<jni::array<com::sun::java::util::jar::pack::ConstantPool_Entry>> p1) { return call_method<"toString", jni::ref<java::lang::String>>(p1); }
	jint getIntAt(jint p1) { return call_method<"getIntAt", jint>(p1); }
	jint getShortAt(jint p1) { return call_method<"getShortAt", jint>(p1); }
	jint getByteAt(jint p1) { return call_method<"getByteAt", jint>(p1); }
	static jint getInt(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"getInt", jint>(p1, p2); }
	static jint getShort(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"getShort", jint>(p1, p2); }
	static jint getByte(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_static_method<"getByte", jint>(p1, p2); }
	static void setInt(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"setInt", void>(p1, p2, p3); }
	static void setShort(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"setShort", void>(p1, p2, p3); }
	static void setByte(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"setByte", void>(p1, p2, p3); }
	static jboolean isNonstandard(jint p1) { return call_static_method<"isNonstandard", jboolean>(p1); }
	static jint opLength(jint p1) { return call_static_method<"opLength", jint>(p1); }
	static jint opWideLength(jint p1) { return call_static_method<"opWideLength", jint>(p1); }
	static jboolean isLocalSlotOp(jint p1) { return call_static_method<"isLocalSlotOp", jboolean>(p1); }
	static jboolean isBranchOp(jint p1) { return call_static_method<"isBranchOp", jboolean>(p1); }
	static jboolean isCPRefOp(jint p1) { return call_static_method<"isCPRefOp", jboolean>(p1); }
	static jbyte getCPRefOpTag(jint p1) { return call_static_method<"getCPRefOpTag", jbyte>(p1); }
	static jboolean isFieldOp(jint p1) { return call_static_method<"isFieldOp", jboolean>(p1); }
	static jboolean isInvokeInitOp(jint p1) { return call_static_method<"isInvokeInitOp", jboolean>(p1); }
	static jboolean isSelfLinkerOp(jint p1) { return call_static_method<"isSelfLinkerOp", jboolean>(p1); }
	static jni::ref<java::lang::String> byteName(jint p1) { return call_static_method<"byteName", jni::ref<java::lang::String>>(p1); }
	static void opcodeChecker(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<com::sun::java::util::jar::pack::ConstantPool_Entry>> p2, jni::ref<com::sun::java::util::jar::pack::Package_Version> p3) { return call_static_method<"opcodeChecker", void>(p1, p2, p3); }

protected:

	Instruction(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JAVA_UTIL_JAR_PACK_INSTRUCTION
