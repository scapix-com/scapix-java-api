// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/media/sound/SoftResamplerStreamer.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTABSTRACTRESAMPLER_MODELABSTRACTRESAMPLERSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTABSTRACTRESAMPLER_MODELABSTRACTRESAMPLERSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class SoftAbstractResampler_ModelAbstractResamplerStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::SoftAbstractResampler_ModelAbstractResamplerStream>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/SoftAbstractResampler$ModelAbstractResamplerStream";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::media::sound::SoftResamplerStreamer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTABSTRACTRESAMPLER_MODELABSTRACTRESAMPLERSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTABSTRACTRESAMPLER_MODELABSTRACTRESAMPLERSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTABSTRACTRESAMPLER_MODELABSTRACTRESAMPLERSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/ModelWavetable.h>
#include <scapix/java_api/javax/sound/midi/MidiChannel.h>
#include <scapix/java_api/javax/sound/midi/VoiceStatus.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::media::sound::SoftAbstractResampler_ModelAbstractResamplerStream : public jni::object_base<"com/sun/media/sound/SoftAbstractResampler$ModelAbstractResamplerStream",
	java::lang::Object,
	com::sun::media::sound::SoftResamplerStreamer>
{
public:

	void noteOn(jni::ref<javax::sound::midi::MidiChannel> p1, jni::ref<javax::sound::midi::VoiceStatus> p2, jint p3, jint p4) { return call_method<"noteOn", void>(p1, p2, p3, p4); }
	void noteOff(jint p1) { return call_method<"noteOff", void>(p1); }
	void open(jni::ref<com::sun::media::sound::ModelWavetable> p1, jfloat p2) { return call_method<"open", void>(p1, p2); }
	void setPitch(jfloat p1) { return call_method<"setPitch", void>(p1); }
	void nextBuffer() { return call_method<"nextBuffer", void>(); }
	void reverseBuffers() { return call_method<"reverseBuffers", void>(); }
	jint read(jni::ref<jni::array<jni::array<jfloat>>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	void close() { return call_method<"close", void>(); }

protected:

	SoftAbstractResampler_ModelAbstractResamplerStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTABSTRACTRESAMPLER_MODELABSTRACTRESAMPLERSTREAM
