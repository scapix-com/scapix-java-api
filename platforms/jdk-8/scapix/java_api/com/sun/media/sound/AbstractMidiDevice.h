// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/sound/midi/MidiDevice.h>
#include <scapix/java_api/com/sun/media/sound/ReferenceCountingDevice.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_ABSTRACTMIDIDEVICE_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_ABSTRACTMIDIDEVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class AbstractMidiDevice; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::AbstractMidiDevice>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/AbstractMidiDevice";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::sound::midi::MidiDevice, scapix::java_api::com::sun::media::sound::ReferenceCountingDevice>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_ABSTRACTMIDIDEVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_ABSTRACTMIDIDEVICE)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_ABSTRACTMIDIDEVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/javax/sound/midi/MidiDevice_Info.h>
#include <scapix/java_api/javax/sound/midi/Receiver.h>
#include <scapix/java_api/javax/sound/midi/Transmitter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::media::sound::AbstractMidiDevice : public jni::object_base<"com/sun/media/sound/AbstractMidiDevice",
	java::lang::Object,
	javax::sound::midi::MidiDevice,
	com::sun::media::sound::ReferenceCountingDevice>
{
public:

	jni::ref<javax::sound::midi::MidiDevice_Info> getDeviceInfo() { return call_method<"getDeviceInfo", jni::ref<javax::sound::midi::MidiDevice_Info>>(); }
	void open() { return call_method<"open", void>(); }
	void close() { return call_method<"close", void>(); }
	void closeInternal(jni::ref<java::lang::Object> p1) { return call_method<"closeInternal", void>(p1); }
	void doClose() { return call_method<"doClose", void>(); }
	jboolean isOpen() { return call_method<"isOpen", jboolean>(); }
	jlong getMicrosecondPosition() { return call_method<"getMicrosecondPosition", jlong>(); }
	jint getMaxReceivers() { return call_method<"getMaxReceivers", jint>(); }
	jint getMaxTransmitters() { return call_method<"getMaxTransmitters", jint>(); }
	jni::ref<javax::sound::midi::Receiver> getReceiver() { return call_method<"getReceiver", jni::ref<javax::sound::midi::Receiver>>(); }
	jni::ref<java::util::List> getReceivers() { return call_method<"getReceivers", jni::ref<java::util::List>>(); }
	jni::ref<javax::sound::midi::Transmitter> getTransmitter() { return call_method<"getTransmitter", jni::ref<javax::sound::midi::Transmitter>>(); }
	jni::ref<java::util::List> getTransmitters() { return call_method<"getTransmitters", jni::ref<java::util::List>>(); }
	jni::ref<javax::sound::midi::Receiver> getReceiverReferenceCounting() { return call_method<"getReceiverReferenceCounting", jni::ref<javax::sound::midi::Receiver>>(); }
	jni::ref<javax::sound::midi::Transmitter> getTransmitterReferenceCounting() { return call_method<"getTransmitterReferenceCounting", jni::ref<javax::sound::midi::Transmitter>>(); }

protected:

	AbstractMidiDevice(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_ABSTRACTMIDIDEVICE
