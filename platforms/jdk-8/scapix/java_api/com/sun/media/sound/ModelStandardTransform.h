// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/media/sound/ModelTransform.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELSTANDARDTRANSFORM_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELSTANDARDTRANSFORM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class ModelStandardTransform; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::ModelStandardTransform>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/ModelStandardTransform";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::media::sound::ModelTransform>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELSTANDARDTRANSFORM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELSTANDARDTRANSFORM)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELSTANDARDTRANSFORM

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::ModelStandardTransform : public jni::object_base<"com/sun/media/sound/ModelStandardTransform",
	java::lang::Object,
	com::sun::media::sound::ModelTransform>
{
public:

	static jboolean DIRECTION_MIN2MAX() { return get_static_field<"DIRECTION_MIN2MAX", jboolean>(); }
	static jboolean DIRECTION_MAX2MIN() { return get_static_field<"DIRECTION_MAX2MIN", jboolean>(); }
	static jboolean POLARITY_UNIPOLAR() { return get_static_field<"POLARITY_UNIPOLAR", jboolean>(); }
	static jboolean POLARITY_BIPOLAR() { return get_static_field<"POLARITY_BIPOLAR", jboolean>(); }
	static jint TRANSFORM_LINEAR() { return get_static_field<"TRANSFORM_LINEAR", jint>(); }
	static jint TRANSFORM_CONCAVE() { return get_static_field<"TRANSFORM_CONCAVE", jint>(); }
	static jint TRANSFORM_CONVEX() { return get_static_field<"TRANSFORM_CONVEX", jint>(); }
	static jint TRANSFORM_SWITCH() { return get_static_field<"TRANSFORM_SWITCH", jint>(); }
	static jint TRANSFORM_ABSOLUTE() { return get_static_field<"TRANSFORM_ABSOLUTE", jint>(); }

	static jni::ref<com::sun::media::sound::ModelStandardTransform> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::media::sound::ModelStandardTransform> new_object(jboolean p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::media::sound::ModelStandardTransform> new_object(jboolean p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::media::sound::ModelStandardTransform> new_object(jboolean p1, jboolean p2, jint p3) { return base_::new_object(p1, p2, p3); }
	jdouble transform(jdouble p1) { return call_method<"transform", jdouble>(p1); }
	jboolean getDirection() { return call_method<"getDirection", jboolean>(); }
	void setDirection(jboolean p1) { return call_method<"setDirection", void>(p1); }
	jboolean getPolarity() { return call_method<"getPolarity", jboolean>(); }
	void setPolarity(jboolean p1) { return call_method<"setPolarity", void>(p1); }
	jint getTransform() { return call_method<"getTransform", jint>(); }
	void setTransform(jint p1) { return call_method<"setTransform", void>(p1); }

protected:

	ModelStandardTransform(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELSTANDARDTRANSFORM
