// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MIDIUTILS_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MIDIUTILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class MidiUtils; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::MidiUtils>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/MidiUtils";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MIDIUTILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MIDIUTILS)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MIDIUTILS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/MidiUtils_TempoCache.h>
#include <scapix/java_api/javax/sound/midi/MidiMessage.h>
#include <scapix/java_api/javax/sound/midi/Sequence.h>
#include <scapix/java_api/javax/sound/midi/Track.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::MidiUtils : public jni::object_base<"com/sun/media/sound/MidiUtils",
	java::lang::Object>
{
public:

	using TempoCache = MidiUtils_TempoCache;

	static jint DEFAULT_TEMPO_MPQ() { return get_static_field<"DEFAULT_TEMPO_MPQ", jint>(); }
	static jint META_END_OF_TRACK_TYPE() { return get_static_field<"META_END_OF_TRACK_TYPE", jint>(); }
	static jint META_TEMPO_TYPE() { return get_static_field<"META_TEMPO_TYPE", jint>(); }

	static jboolean isMetaEndOfTrack(jni::ref<javax::sound::midi::MidiMessage> p1) { return call_static_method<"isMetaEndOfTrack", jboolean>(p1); }
	static jboolean isMetaTempo(jni::ref<javax::sound::midi::MidiMessage> p1) { return call_static_method<"isMetaTempo", jboolean>(p1); }
	static jint getTempoMPQ(jni::ref<javax::sound::midi::MidiMessage> p1) { return call_static_method<"getTempoMPQ", jint>(p1); }
	static jdouble convertTempo(jdouble p1) { return call_static_method<"convertTempo", jdouble>(p1); }
	static jlong ticks2microsec(jlong p1, jdouble p2, jint p3) { return call_static_method<"ticks2microsec", jlong>(p1, p2, p3); }
	static jlong microsec2ticks(jlong p1, jdouble p2, jint p3) { return call_static_method<"microsec2ticks", jlong>(p1, p2, p3); }
	static jlong tick2microsecond(jni::ref<javax::sound::midi::Sequence> p1, jlong p2, jni::ref<com::sun::media::sound::MidiUtils_TempoCache> p3) { return call_static_method<"tick2microsecond", jlong>(p1, p2, p3); }
	static jlong microsecond2tick(jni::ref<javax::sound::midi::Sequence> p1, jlong p2, jni::ref<com::sun::media::sound::MidiUtils_TempoCache> p3) { return call_static_method<"microsecond2tick", jlong>(p1, p2, p3); }
	static jint tick2index(jni::ref<javax::sound::midi::Track> p1, jlong p2) { return call_static_method<"tick2index", jint>(p1, p2); }

protected:

	MidiUtils(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MIDIUTILS
