// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTMAINMIXER_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTMAINMIXER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class SoftMainMixer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::SoftMainMixer>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/SoftMainMixer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTMAINMIXER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTMAINMIXER)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTMAINMIXER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/ModelChannelMixer.h>
#include <scapix/java_api/com/sun/media/sound/SoftSynthesizer.h>
#include <scapix/java_api/javax/sound/midi/MidiMessage.h>
#include <scapix/java_api/javax/sound/sampled/AudioInputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::SoftMainMixer : public jni::object_base<"com/sun/media/sound/SoftMainMixer",
	java::lang::Object>
{
public:

	static jint CHANNEL_LEFT() { return get_static_field<"CHANNEL_LEFT", jint>(); }
	static jint CHANNEL_RIGHT() { return get_static_field<"CHANNEL_RIGHT", jint>(); }
	static jint CHANNEL_MONO() { return get_static_field<"CHANNEL_MONO", jint>(); }
	static jint CHANNEL_DELAY_LEFT() { return get_static_field<"CHANNEL_DELAY_LEFT", jint>(); }
	static jint CHANNEL_DELAY_RIGHT() { return get_static_field<"CHANNEL_DELAY_RIGHT", jint>(); }
	static jint CHANNEL_DELAY_MONO() { return get_static_field<"CHANNEL_DELAY_MONO", jint>(); }
	static jint CHANNEL_EFFECT1() { return get_static_field<"CHANNEL_EFFECT1", jint>(); }
	static jint CHANNEL_EFFECT2() { return get_static_field<"CHANNEL_EFFECT2", jint>(); }
	static jint CHANNEL_DELAY_EFFECT1() { return get_static_field<"CHANNEL_DELAY_EFFECT1", jint>(); }
	static jint CHANNEL_DELAY_EFFECT2() { return get_static_field<"CHANNEL_DELAY_EFFECT2", jint>(); }
	static jint CHANNEL_LEFT_DRY() { return get_static_field<"CHANNEL_LEFT_DRY", jint>(); }
	static jint CHANNEL_RIGHT_DRY() { return get_static_field<"CHANNEL_RIGHT_DRY", jint>(); }
	static jint CHANNEL_SCRATCH1() { return get_static_field<"CHANNEL_SCRATCH1", jint>(); }
	static jint CHANNEL_SCRATCH2() { return get_static_field<"CHANNEL_SCRATCH2", jint>(); }

	void activity() { return call_method<"activity", void>(); }
	void stopMixer(jni::ref<com::sun::media::sound::ModelChannelMixer> p1) { return call_method<"stopMixer", void>(p1); }
	void registerMixer(jni::ref<com::sun::media::sound::ModelChannelMixer> p1) { return call_method<"registerMixer", void>(p1); }
	static jni::ref<com::sun::media::sound::SoftMainMixer> new_object(jni::ref<com::sun::media::sound::SoftSynthesizer> p1) { return base_::new_object(p1); }
	jni::ref<javax::sound::sampled::AudioInputStream> getInputStream() { return call_method<"getInputStream", jni::ref<javax::sound::sampled::AudioInputStream>>(); }
	void reset() { return call_method<"reset", void>(); }
	void setVolume(jint p1) { return call_method<"setVolume", void>(p1); }
	void setBalance(jint p1) { return call_method<"setBalance", void>(p1); }
	void setFineTuning(jint p1) { return call_method<"setFineTuning", void>(p1); }
	void setCoarseTuning(jint p1) { return call_method<"setCoarseTuning", void>(p1); }
	jint getVolume() { return call_method<"getVolume", jint>(); }
	jint getBalance() { return call_method<"getBalance", jint>(); }
	jint getFineTuning() { return call_method<"getFineTuning", jint>(); }
	jint getCoarseTuning() { return call_method<"getCoarseTuning", jint>(); }
	void globalParameterControlChange(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jlong>> p2, jni::ref<jni::array<jlong>> p3) { return call_method<"globalParameterControlChange", void>(p1, p2, p3); }
	void processMessage(jni::ref<java::lang::Object> p1) { return call_method<"processMessage", void>(p1); }
	void processMessage(jni::ref<javax::sound::midi::MidiMessage> p1) { return call_method<"processMessage", void>(p1); }
	void processMessage(jni::ref<jni::array<jbyte>> p1) { return call_method<"processMessage", void>(p1); }
	void processMessage(jint p1, jint p2, jint p3, jint p4) { return call_method<"processMessage", void>(p1, p2, p3, p4); }
	jlong getMicrosecondPosition() { return call_method<"getMicrosecondPosition", jlong>(); }
	void close() { return call_method<"close", void>(); }

protected:

	SoftMainMixer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTMAINMIXER
