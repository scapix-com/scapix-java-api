// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFER_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class ModelByteBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::ModelByteBuffer>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/ModelByteBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFER)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/util/Collection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::ModelByteBuffer : public jni::object_base<"com/sun/media/sound/ModelByteBuffer",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::media::sound::ModelByteBuffer> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::media::sound::ModelByteBuffer> new_object(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::media::sound::ModelByteBuffer> new_object(jni::ref<java::io::File> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::media::sound::ModelByteBuffer> new_object(jni::ref<java::io::File> p1, jlong p2, jlong p3) { return base_::new_object(p1, p2, p3); }
	void writeTo(jni::ref<java::io::OutputStream> p1) { return call_method<"writeTo", void>(p1); }
	jni::ref<java::io::InputStream> getInputStream() { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(); }
	jni::ref<com::sun::media::sound::ModelByteBuffer> subbuffer(jlong p1) { return call_method<"subbuffer", jni::ref<com::sun::media::sound::ModelByteBuffer>>(p1); }
	jni::ref<com::sun::media::sound::ModelByteBuffer> subbuffer(jlong p1, jlong p2) { return call_method<"subbuffer", jni::ref<com::sun::media::sound::ModelByteBuffer>>(p1, p2); }
	jni::ref<com::sun::media::sound::ModelByteBuffer> subbuffer(jlong p1, jlong p2, jboolean p3) { return call_method<"subbuffer", jni::ref<com::sun::media::sound::ModelByteBuffer>>(p1, p2, p3); }
	jni::ref<jni::array<jbyte>> array() { return call_method<"array", jni::ref<jni::array<jbyte>>>(); }
	jlong arrayOffset() { return call_method<"arrayOffset", jlong>(); }
	jlong capacity() { return call_method<"capacity", jlong>(); }
	jni::ref<com::sun::media::sound::ModelByteBuffer> getRoot() { return call_method<"getRoot", jni::ref<com::sun::media::sound::ModelByteBuffer>>(); }
	jni::ref<java::io::File> getFile() { return call_method<"getFile", jni::ref<java::io::File>>(); }
	jlong getFilePointer() { return call_method<"getFilePointer", jlong>(); }
	static void loadAll(jni::ref<java::util::Collection> p1) { return call_static_method<"loadAll", void>(p1); }
	void load() { return call_method<"load", void>(); }
	void unload() { return call_method<"unload", void>(); }

protected:

	ModelByteBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFER
