// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/sound/midi/SoundbankResource.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SF2SAMPLE_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SF2SAMPLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class SF2Sample; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::SF2Sample>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/SF2Sample";
	using base_classes = std::tuple<scapix::java_api::javax::sound::midi::SoundbankResource>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SF2SAMPLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SF2SAMPLE)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SF2SAMPLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/ModelByteBuffer.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/sound/midi/Soundbank.h>
#include <scapix/java_api/javax/sound/sampled/AudioFormat.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::SF2Sample : public jni::object_base<"com/sun/media/sound/SF2Sample",
	javax::sound::midi::SoundbankResource>
{
public:

	static jni::ref<com::sun::media::sound::SF2Sample> new_object(jni::ref<javax::sound::midi::Soundbank> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::media::sound::SF2Sample> new_object() { return base_::new_object(); }
	jni::ref<java::lang::Object> getData() { return call_method<"getData", jni::ref<java::lang::Object>>(); }
	jni::ref<com::sun::media::sound::ModelByteBuffer> getDataBuffer() { return call_method<"getDataBuffer", jni::ref<com::sun::media::sound::ModelByteBuffer>>(); }
	jni::ref<com::sun::media::sound::ModelByteBuffer> getData24Buffer() { return call_method<"getData24Buffer", jni::ref<com::sun::media::sound::ModelByteBuffer>>(); }
	jni::ref<javax::sound::sampled::AudioFormat> getFormat() { return call_method<"getFormat", jni::ref<javax::sound::sampled::AudioFormat>>(); }
	void setData(jni::ref<com::sun::media::sound::ModelByteBuffer> p1) { return call_method<"setData", void>(p1); }
	void setData(jni::ref<jni::array<jbyte>> p1) { return call_method<"setData", void>(p1); }
	void setData(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"setData", void>(p1, p2, p3); }
	void setData24(jni::ref<com::sun::media::sound::ModelByteBuffer> p1) { return call_method<"setData24", void>(p1); }
	void setData24(jni::ref<jni::array<jbyte>> p1) { return call_method<"setData24", void>(p1); }
	void setData24(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"setData24", void>(p1, p2, p3); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void setName(jni::ref<java::lang::String> p1) { return call_method<"setName", void>(p1); }
	jlong getEndLoop() { return call_method<"getEndLoop", jlong>(); }
	void setEndLoop(jlong p1) { return call_method<"setEndLoop", void>(p1); }
	jint getOriginalPitch() { return call_method<"getOriginalPitch", jint>(); }
	void setOriginalPitch(jint p1) { return call_method<"setOriginalPitch", void>(p1); }
	jbyte getPitchCorrection() { return call_method<"getPitchCorrection", jbyte>(); }
	void setPitchCorrection(jbyte p1) { return call_method<"setPitchCorrection", void>(p1); }
	jint getSampleLink() { return call_method<"getSampleLink", jint>(); }
	void setSampleLink(jint p1) { return call_method<"setSampleLink", void>(p1); }
	jlong getSampleRate() { return call_method<"getSampleRate", jlong>(); }
	void setSampleRate(jlong p1) { return call_method<"setSampleRate", void>(p1); }
	jint getSampleType() { return call_method<"getSampleType", jint>(); }
	void setSampleType(jint p1) { return call_method<"setSampleType", void>(p1); }
	jlong getStartLoop() { return call_method<"getStartLoop", jlong>(); }
	void setStartLoop(jlong p1) { return call_method<"setStartLoop", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SF2Sample(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SF2SAMPLE
