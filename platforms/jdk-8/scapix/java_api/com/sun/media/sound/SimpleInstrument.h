// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/media/sound/ModelInstrument.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SIMPLEINSTRUMENT_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SIMPLEINSTRUMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class SimpleInstrument; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::SimpleInstrument>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/SimpleInstrument";
	using base_classes = std::tuple<scapix::java_api::com::sun::media::sound::ModelInstrument>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SIMPLEINSTRUMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SIMPLEINSTRUMENT)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SIMPLEINSTRUMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/ModelPatch.h>
#include <scapix/java_api/com/sun/media/sound/ModelPerformer.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/sound/midi/Patch.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::SimpleInstrument : public jni::object_base<"com/sun/media/sound/SimpleInstrument",
	com::sun::media::sound::ModelInstrument>
{
public:

	static jni::ref<com::sun::media::sound::SimpleInstrument> new_object() { return base_::new_object(); }
	void clear() { return call_method<"clear", void>(); }
	void add(jni::ref<jni::array<com::sun::media::sound::ModelPerformer>> p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"add", void>(p1, p2, p3, p4, p5, p6); }
	void add(jni::ref<jni::array<com::sun::media::sound::ModelPerformer>> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"add", void>(p1, p2, p3, p4, p5); }
	void add(jni::ref<jni::array<com::sun::media::sound::ModelPerformer>> p1, jint p2, jint p3) { return call_method<"add", void>(p1, p2, p3); }
	void add(jni::ref<jni::array<com::sun::media::sound::ModelPerformer>> p1) { return call_method<"add", void>(p1); }
	void add(jni::ref<com::sun::media::sound::ModelPerformer> p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"add", void>(p1, p2, p3, p4, p5, p6); }
	void add(jni::ref<com::sun::media::sound::ModelPerformer> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"add", void>(p1, p2, p3, p4, p5); }
	void add(jni::ref<com::sun::media::sound::ModelPerformer> p1, jint p2, jint p3) { return call_method<"add", void>(p1, p2, p3); }
	void add(jni::ref<com::sun::media::sound::ModelPerformer> p1) { return call_method<"add", void>(p1); }
	void add(jni::ref<com::sun::media::sound::ModelInstrument> p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_method<"add", void>(p1, p2, p3, p4, p5, p6); }
	void add(jni::ref<com::sun::media::sound::ModelInstrument> p1, jint p2, jint p3, jint p4, jint p5) { return call_method<"add", void>(p1, p2, p3, p4, p5); }
	void add(jni::ref<com::sun::media::sound::ModelInstrument> p1, jint p2, jint p3) { return call_method<"add", void>(p1, p2, p3); }
	void add(jni::ref<com::sun::media::sound::ModelInstrument> p1) { return call_method<"add", void>(p1); }
	jni::ref<jni::array<com::sun::media::sound::ModelPerformer>> getPerformers() { return call_method<"getPerformers", jni::ref<jni::array<com::sun::media::sound::ModelPerformer>>>(); }
	jni::ref<java::lang::Object> getData() { return call_method<"getData", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void setName(jni::ref<java::lang::String> p1) { return call_method<"setName", void>(p1); }
	jni::ref<com::sun::media::sound::ModelPatch> getPatch() { return call_method<"getPatch", jni::ref<com::sun::media::sound::ModelPatch>>(); }
	void setPatch(jni::ref<javax::sound::midi::Patch> p1) { return call_method<"setPatch", void>(p1); }

protected:

	SimpleInstrument(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SIMPLEINSTRUMENT
