// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTFILTER_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTFILTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class SoftFilter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::SoftFilter>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/SoftFilter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTFILTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTFILTER)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTFILTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/SoftAudioBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::SoftFilter : public jni::object_base<"com/sun/media/sound/SoftFilter",
	java::lang::Object>
{
public:

	static jint FILTERTYPE_LP6() { return get_static_field<"FILTERTYPE_LP6", jint>(); }
	static jint FILTERTYPE_LP12() { return get_static_field<"FILTERTYPE_LP12", jint>(); }
	static jint FILTERTYPE_HP12() { return get_static_field<"FILTERTYPE_HP12", jint>(); }
	static jint FILTERTYPE_BP12() { return get_static_field<"FILTERTYPE_BP12", jint>(); }
	static jint FILTERTYPE_NP12() { return get_static_field<"FILTERTYPE_NP12", jint>(); }
	static jint FILTERTYPE_LP24() { return get_static_field<"FILTERTYPE_LP24", jint>(); }
	static jint FILTERTYPE_HP24() { return get_static_field<"FILTERTYPE_HP24", jint>(); }

	static jni::ref<com::sun::media::sound::SoftFilter> new_object(jfloat p1) { return base_::new_object(p1); }
	void setFrequency(jdouble p1) { return call_method<"setFrequency", void>(p1); }
	void setResonance(jdouble p1) { return call_method<"setResonance", void>(p1); }
	void reset() { return call_method<"reset", void>(); }
	void setFilterType(jint p1) { return call_method<"setFilterType", void>(p1); }
	void processAudio(jni::ref<com::sun::media::sound::SoftAudioBuffer> p1) { return call_method<"processAudio", void>(p1); }
	void filter4(jni::ref<com::sun::media::sound::SoftAudioBuffer> p1) { return call_method<"filter4", void>(p1); }
	void filter2calc() { return call_method<"filter2calc", void>(); }
	void filter2(jni::ref<com::sun::media::sound::SoftAudioBuffer> p1) { return call_method<"filter2", void>(p1); }
	void filter1calc() { return call_method<"filter1calc", void>(); }
	void filter1(jni::ref<com::sun::media::sound::SoftAudioBuffer> p1) { return call_method<"filter1", void>(p1); }

protected:

	SoftFilter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTFILTER
