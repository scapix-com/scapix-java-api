// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/media/sound/AudioSynthesizer.h>
#include <scapix/java_api/com/sun/media/sound/ReferenceCountingDevice.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class SoftSynthesizer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::SoftSynthesizer>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/SoftSynthesizer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::media::sound::AudioSynthesizer, scapix::java_api::com::sun::media::sound::ReferenceCountingDevice>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/AudioSynthesizerPropertyInfo.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/sound/midi/Instrument.h>
#include <scapix/java_api/javax/sound/midi/MidiChannel.h>
#include <scapix/java_api/javax/sound/midi/MidiDevice_Info.h>
#include <scapix/java_api/javax/sound/midi/Patch.h>
#include <scapix/java_api/javax/sound/midi/Receiver.h>
#include <scapix/java_api/javax/sound/midi/Soundbank.h>
#include <scapix/java_api/javax/sound/midi/Transmitter.h>
#include <scapix/java_api/javax/sound/midi/VoiceStatus.h>
#include <scapix/java_api/javax/sound/sampled/AudioFormat.h>
#include <scapix/java_api/javax/sound/sampled/AudioInputStream.h>
#include <scapix/java_api/javax/sound/sampled/SourceDataLine.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::SoftSynthesizer : public jni::object_base<"com/sun/media/sound/SoftSynthesizer",
	java::lang::Object,
	com::sun::media::sound::AudioSynthesizer,
	com::sun::media::sound::ReferenceCountingDevice>
{
public:

	static jni::ref<com::sun::media::sound::SoftSynthesizer> new_object() { return base_::new_object(); }
	jlong getLatency() { return call_method<"getLatency", jlong>(); }
	jni::ref<javax::sound::sampled::AudioFormat> getFormat() { return call_method<"getFormat", jni::ref<javax::sound::sampled::AudioFormat>>(); }
	jint getMaxPolyphony() { return call_method<"getMaxPolyphony", jint>(); }
	jni::ref<jni::array<javax::sound::midi::MidiChannel>> getChannels() { return call_method<"getChannels", jni::ref<jni::array<javax::sound::midi::MidiChannel>>>(); }
	jni::ref<jni::array<javax::sound::midi::VoiceStatus>> getVoiceStatus() { return call_method<"getVoiceStatus", jni::ref<jni::array<javax::sound::midi::VoiceStatus>>>(); }
	jboolean isSoundbankSupported(jni::ref<javax::sound::midi::Soundbank> p1) { return call_method<"isSoundbankSupported", jboolean>(p1); }
	jboolean loadInstrument(jni::ref<javax::sound::midi::Instrument> p1) { return call_method<"loadInstrument", jboolean>(p1); }
	void unloadInstrument(jni::ref<javax::sound::midi::Instrument> p1) { return call_method<"unloadInstrument", void>(p1); }
	jboolean remapInstrument(jni::ref<javax::sound::midi::Instrument> p1, jni::ref<javax::sound::midi::Instrument> p2) { return call_method<"remapInstrument", jboolean>(p1, p2); }
	jni::ref<javax::sound::midi::Soundbank> getDefaultSoundbank() { return call_method<"getDefaultSoundbank", jni::ref<javax::sound::midi::Soundbank>>(); }
	jni::ref<jni::array<javax::sound::midi::Instrument>> getAvailableInstruments() { return call_method<"getAvailableInstruments", jni::ref<jni::array<javax::sound::midi::Instrument>>>(); }
	jni::ref<jni::array<javax::sound::midi::Instrument>> getLoadedInstruments() { return call_method<"getLoadedInstruments", jni::ref<jni::array<javax::sound::midi::Instrument>>>(); }
	jboolean loadAllInstruments(jni::ref<javax::sound::midi::Soundbank> p1) { return call_method<"loadAllInstruments", jboolean>(p1); }
	void unloadAllInstruments(jni::ref<javax::sound::midi::Soundbank> p1) { return call_method<"unloadAllInstruments", void>(p1); }
	jboolean loadInstruments(jni::ref<javax::sound::midi::Soundbank> p1, jni::ref<jni::array<javax::sound::midi::Patch>> p2) { return call_method<"loadInstruments", jboolean>(p1, p2); }
	void unloadInstruments(jni::ref<javax::sound::midi::Soundbank> p1, jni::ref<jni::array<javax::sound::midi::Patch>> p2) { return call_method<"unloadInstruments", void>(p1, p2); }
	jni::ref<javax::sound::midi::MidiDevice_Info> getDeviceInfo() { return call_method<"getDeviceInfo", jni::ref<javax::sound::midi::MidiDevice_Info>>(); }
	jni::ref<jni::array<com::sun::media::sound::AudioSynthesizerPropertyInfo>> getPropertyInfo(jni::ref<java::util::Map> p1) { return call_method<"getPropertyInfo", jni::ref<jni::array<com::sun::media::sound::AudioSynthesizerPropertyInfo>>>(p1); }
	void open() { return call_method<"open", void>(); }
	void open(jni::ref<javax::sound::sampled::SourceDataLine> p1, jni::ref<java::util::Map> p2) { return call_method<"open", void>(p1, p2); }
	jni::ref<javax::sound::sampled::AudioInputStream> openStream(jni::ref<javax::sound::sampled::AudioFormat> p1, jni::ref<java::util::Map> p2) { return call_method<"openStream", jni::ref<javax::sound::sampled::AudioInputStream>>(p1, p2); }
	void close() { return call_method<"close", void>(); }
	jboolean isOpen() { return call_method<"isOpen", jboolean>(); }
	jlong getMicrosecondPosition() { return call_method<"getMicrosecondPosition", jlong>(); }
	jint getMaxReceivers() { return call_method<"getMaxReceivers", jint>(); }
	jint getMaxTransmitters() { return call_method<"getMaxTransmitters", jint>(); }
	jni::ref<javax::sound::midi::Receiver> getReceiver() { return call_method<"getReceiver", jni::ref<javax::sound::midi::Receiver>>(); }
	jni::ref<java::util::List> getReceivers() { return call_method<"getReceivers", jni::ref<java::util::List>>(); }
	jni::ref<javax::sound::midi::Transmitter> getTransmitter() { return call_method<"getTransmitter", jni::ref<javax::sound::midi::Transmitter>>(); }
	jni::ref<java::util::List> getTransmitters() { return call_method<"getTransmitters", jni::ref<java::util::List>>(); }
	jni::ref<javax::sound::midi::Receiver> getReceiverReferenceCounting() { return call_method<"getReceiverReferenceCounting", jni::ref<javax::sound::midi::Receiver>>(); }
	jni::ref<javax::sound::midi::Transmitter> getTransmitterReferenceCounting() { return call_method<"getTransmitterReferenceCounting", jni::ref<javax::sound::midi::Transmitter>>(); }

protected:

	SoftSynthesizer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER
