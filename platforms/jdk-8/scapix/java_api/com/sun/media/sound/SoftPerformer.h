// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTPERFORMER_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTPERFORMER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class SoftPerformer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::SoftPerformer>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/SoftPerformer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTPERFORMER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTPERFORMER)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTPERFORMER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/ModelConnectionBlock.h>
#include <scapix/java_api/com/sun/media/sound/ModelOscillator.h>
#include <scapix/java_api/com/sun/media/sound/ModelPerformer.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::SoftPerformer : public jni::object_base<"com/sun/media/sound/SoftPerformer",
	java::lang::Object>
{
public:

	jint keyFrom() { return get_field<"keyFrom", jint>(); }
	void keyFrom(jint v) { set_field<"keyFrom", jint>(v); }
	jint keyTo() { return get_field<"keyTo", jint>(); }
	void keyTo(jint v) { set_field<"keyTo", jint>(v); }
	jint velFrom() { return get_field<"velFrom", jint>(); }
	void velFrom(jint v) { set_field<"velFrom", jint>(v); }
	jint velTo() { return get_field<"velTo", jint>(); }
	void velTo(jint v) { set_field<"velTo", jint>(v); }
	jint exclusiveClass() { return get_field<"exclusiveClass", jint>(); }
	void exclusiveClass(jint v) { set_field<"exclusiveClass", jint>(v); }
	jboolean selfNonExclusive() { return get_field<"selfNonExclusive", jboolean>(); }
	void selfNonExclusive(jboolean v) { set_field<"selfNonExclusive", jboolean>(v); }
	jboolean forcedVelocity() { return get_field<"forcedVelocity", jboolean>(); }
	void forcedVelocity(jboolean v) { set_field<"forcedVelocity", jboolean>(v); }
	jboolean forcedKeynumber() { return get_field<"forcedKeynumber", jboolean>(); }
	void forcedKeynumber(jboolean v) { set_field<"forcedKeynumber", jboolean>(v); }
	jni::ref<com::sun::media::sound::ModelPerformer> performer() { return get_field<"performer", jni::ref<com::sun::media::sound::ModelPerformer>>(); }
	void performer(jni::ref<com::sun::media::sound::ModelPerformer> v) { set_field<"performer", jni::ref<com::sun::media::sound::ModelPerformer>>(v); }
	jni::ref<jni::array<com::sun::media::sound::ModelConnectionBlock>> connections() { return get_field<"connections", jni::ref<jni::array<com::sun::media::sound::ModelConnectionBlock>>>(); }
	void connections(jni::ref<jni::array<com::sun::media::sound::ModelConnectionBlock>> v) { set_field<"connections", jni::ref<jni::array<com::sun::media::sound::ModelConnectionBlock>>>(v); }
	jni::ref<jni::array<com::sun::media::sound::ModelOscillator>> oscillators() { return get_field<"oscillators", jni::ref<jni::array<com::sun::media::sound::ModelOscillator>>>(); }
	void oscillators(jni::ref<jni::array<com::sun::media::sound::ModelOscillator>> v) { set_field<"oscillators", jni::ref<jni::array<com::sun::media::sound::ModelOscillator>>>(v); }
	jni::ref<java::util::Map> midi_rpn_connections() { return get_field<"midi_rpn_connections", jni::ref<java::util::Map>>(); }
	void midi_rpn_connections(jni::ref<java::util::Map> v) { set_field<"midi_rpn_connections", jni::ref<java::util::Map>>(v); }
	jni::ref<java::util::Map> midi_nrpn_connections() { return get_field<"midi_nrpn_connections", jni::ref<java::util::Map>>(); }
	void midi_nrpn_connections(jni::ref<java::util::Map> v) { set_field<"midi_nrpn_connections", jni::ref<java::util::Map>>(v); }
	jni::ref<jni::array<jni::array<jint>>> midi_ctrl_connections() { return get_field<"midi_ctrl_connections", jni::ref<jni::array<jni::array<jint>>>>(); }
	void midi_ctrl_connections(jni::ref<jni::array<jni::array<jint>>> v) { set_field<"midi_ctrl_connections", jni::ref<jni::array<jni::array<jint>>>>(v); }
	jni::ref<jni::array<jni::array<jint>>> midi_connections() { return get_field<"midi_connections", jni::ref<jni::array<jni::array<jint>>>>(); }
	void midi_connections(jni::ref<jni::array<jni::array<jint>>> v) { set_field<"midi_connections", jni::ref<jni::array<jni::array<jint>>>>(v); }
	jni::ref<jni::array<jint>> ctrl_connections() { return get_field<"ctrl_connections", jni::ref<jni::array<jint>>>(); }
	void ctrl_connections(jni::ref<jni::array<jint>> v) { set_field<"ctrl_connections", jni::ref<jni::array<jint>>>(v); }

	static jni::ref<com::sun::media::sound::SoftPerformer> new_object(jni::ref<com::sun::media::sound::ModelPerformer> p1) { return base_::new_object(p1); }

protected:

	SoftPerformer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTPERFORMER
