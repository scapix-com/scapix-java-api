// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELPERFORMER_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELPERFORMER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class ModelPerformer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::ModelPerformer>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/ModelPerformer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELPERFORMER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELPERFORMER)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELPERFORMER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::ModelPerformer : public jni::object_base<"com/sun/media/sound/ModelPerformer",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::media::sound::ModelPerformer> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void setName(jni::ref<java::lang::String> p1) { return call_method<"setName", void>(p1); }
	jni::ref<java::util::List> getConnectionBlocks() { return call_method<"getConnectionBlocks", jni::ref<java::util::List>>(); }
	void setConnectionBlocks(jni::ref<java::util::List> p1) { return call_method<"setConnectionBlocks", void>(p1); }
	jni::ref<java::util::List> getOscillators() { return call_method<"getOscillators", jni::ref<java::util::List>>(); }
	jint getExclusiveClass() { return call_method<"getExclusiveClass", jint>(); }
	void setExclusiveClass(jint p1) { return call_method<"setExclusiveClass", void>(p1); }
	jboolean isSelfNonExclusive() { return call_method<"isSelfNonExclusive", jboolean>(); }
	void setSelfNonExclusive(jboolean p1) { return call_method<"setSelfNonExclusive", void>(p1); }
	jint getKeyFrom() { return call_method<"getKeyFrom", jint>(); }
	void setKeyFrom(jint p1) { return call_method<"setKeyFrom", void>(p1); }
	jint getKeyTo() { return call_method<"getKeyTo", jint>(); }
	void setKeyTo(jint p1) { return call_method<"setKeyTo", void>(p1); }
	jint getVelFrom() { return call_method<"getVelFrom", jint>(); }
	void setVelFrom(jint p1) { return call_method<"setVelFrom", void>(p1); }
	jint getVelTo() { return call_method<"getVelTo", jint>(); }
	void setVelTo(jint p1) { return call_method<"setVelTo", void>(p1); }
	jboolean isReleaseTriggered() { return call_method<"isReleaseTriggered", jboolean>(); }
	void setReleaseTriggered(jboolean p1) { return call_method<"setReleaseTriggered", void>(p1); }
	jni::ref<java::lang::Object> getUserObject() { return call_method<"getUserObject", jni::ref<java::lang::Object>>(); }
	void setUserObject(jni::ref<java::lang::Object> p1) { return call_method<"setUserObject", void>(p1); }
	jboolean isDefaultConnectionsEnabled() { return call_method<"isDefaultConnectionsEnabled", jboolean>(); }
	void setDefaultConnectionsEnabled(jboolean p1) { return call_method<"setDefaultConnectionsEnabled", void>(p1); }

protected:

	ModelPerformer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELPERFORMER
