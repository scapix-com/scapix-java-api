// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/media/sound/ModelWavetable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFERWAVETABLE_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFERWAVETABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class ModelByteBufferWavetable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::ModelByteBufferWavetable>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/ModelByteBufferWavetable";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::media::sound::ModelWavetable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFERWAVETABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFERWAVETABLE)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFERWAVETABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/AudioFloatInputStream.h>
#include <scapix/java_api/com/sun/media/sound/ModelByteBuffer.h>
#include <scapix/java_api/com/sun/media/sound/ModelOscillatorStream.h>
#include <scapix/java_api/javax/sound/sampled/AudioFormat.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::ModelByteBufferWavetable : public jni::object_base<"com/sun/media/sound/ModelByteBufferWavetable",
	java::lang::Object,
	com::sun::media::sound::ModelWavetable>
{
public:

	static jni::ref<com::sun::media::sound::ModelByteBufferWavetable> new_object(jni::ref<com::sun::media::sound::ModelByteBuffer> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::media::sound::ModelByteBufferWavetable> new_object(jni::ref<com::sun::media::sound::ModelByteBuffer> p1, jfloat p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::media::sound::ModelByteBufferWavetable> new_object(jni::ref<com::sun::media::sound::ModelByteBuffer> p1, jni::ref<javax::sound::sampled::AudioFormat> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::media::sound::ModelByteBufferWavetable> new_object(jni::ref<com::sun::media::sound::ModelByteBuffer> p1, jni::ref<javax::sound::sampled::AudioFormat> p2, jfloat p3) { return base_::new_object(p1, p2, p3); }
	void set8BitExtensionBuffer(jni::ref<com::sun::media::sound::ModelByteBuffer> p1) { return call_method<"set8BitExtensionBuffer", void>(p1); }
	jni::ref<com::sun::media::sound::ModelByteBuffer> get8BitExtensionBuffer() { return call_method<"get8BitExtensionBuffer", jni::ref<com::sun::media::sound::ModelByteBuffer>>(); }
	jni::ref<com::sun::media::sound::ModelByteBuffer> getBuffer() { return call_method<"getBuffer", jni::ref<com::sun::media::sound::ModelByteBuffer>>(); }
	jni::ref<javax::sound::sampled::AudioFormat> getFormat() { return call_method<"getFormat", jni::ref<javax::sound::sampled::AudioFormat>>(); }
	jni::ref<com::sun::media::sound::AudioFloatInputStream> openStream() { return call_method<"openStream", jni::ref<com::sun::media::sound::AudioFloatInputStream>>(); }
	jint getChannels() { return call_method<"getChannels", jint>(); }
	jni::ref<com::sun::media::sound::ModelOscillatorStream> open(jfloat p1) { return call_method<"open", jni::ref<com::sun::media::sound::ModelOscillatorStream>>(p1); }
	jfloat getAttenuation() { return call_method<"getAttenuation", jfloat>(); }
	void setAttenuation(jfloat p1) { return call_method<"setAttenuation", void>(p1); }
	jfloat getLoopLength() { return call_method<"getLoopLength", jfloat>(); }
	void setLoopLength(jfloat p1) { return call_method<"setLoopLength", void>(p1); }
	jfloat getLoopStart() { return call_method<"getLoopStart", jfloat>(); }
	void setLoopStart(jfloat p1) { return call_method<"setLoopStart", void>(p1); }
	void setLoopType(jint p1) { return call_method<"setLoopType", void>(p1); }
	jint getLoopType() { return call_method<"getLoopType", jint>(); }
	jfloat getPitchcorrection() { return call_method<"getPitchcorrection", jfloat>(); }
	void setPitchcorrection(jfloat p1) { return call_method<"setPitchcorrection", void>(p1); }

protected:

	ModelByteBufferWavetable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_MODELBYTEBUFFERWAVETABLE
