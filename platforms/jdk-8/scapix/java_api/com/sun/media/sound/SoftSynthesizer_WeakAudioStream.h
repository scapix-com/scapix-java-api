// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_WEAKAUDIOSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_WEAKAUDIOSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::media::sound { class SoftSynthesizer_WeakAudioStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::media::sound::SoftSynthesizer_WeakAudioStream>
{
	static constexpr fixed_string class_name = "com/sun/media/sound/SoftSynthesizer$WeakAudioStream";
	using base_classes = std::tuple<scapix::java_api::java::io::InputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_WEAKAUDIOSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_WEAKAUDIOSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_WEAKAUDIOSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/media/sound/SoftAudioPusher.h>
#include <scapix/java_api/javax/sound/sampled/AudioInputStream.h>
#include <scapix/java_api/javax/sound/sampled/SourceDataLine.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::media::sound::SoftSynthesizer_WeakAudioStream : public jni::object_base<"com/sun/media/sound/SoftSynthesizer$WeakAudioStream",
	java::io::InputStream>
{
public:

	jni::ref<com::sun::media::sound::SoftAudioPusher> pusher() { return get_field<"pusher", jni::ref<com::sun::media::sound::SoftAudioPusher>>(); }
	void pusher(jni::ref<com::sun::media::sound::SoftAudioPusher> v) { set_field<"pusher", jni::ref<com::sun::media::sound::SoftAudioPusher>>(v); }
	jni::ref<javax::sound::sampled::AudioInputStream> jitter_stream() { return get_field<"jitter_stream", jni::ref<javax::sound::sampled::AudioInputStream>>(); }
	void jitter_stream(jni::ref<javax::sound::sampled::AudioInputStream> v) { set_field<"jitter_stream", jni::ref<javax::sound::sampled::AudioInputStream>>(v); }
	jni::ref<javax::sound::sampled::SourceDataLine> sourceDataLine() { return get_field<"sourceDataLine", jni::ref<javax::sound::sampled::SourceDataLine>>(); }
	void sourceDataLine(jni::ref<javax::sound::sampled::SourceDataLine> v) { set_field<"sourceDataLine", jni::ref<javax::sound::sampled::SourceDataLine>>(v); }
	jlong silent_samples() { return get_field<"silent_samples", jlong>(); }
	void silent_samples(jlong v) { set_field<"silent_samples", jlong>(v); }

	void setInputStream(jni::ref<javax::sound::sampled::AudioInputStream> p1) { return call_method<"setInputStream", void>(p1); }
	jint available() { return call_method<"available", jint>(); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	static jni::ref<com::sun::media::sound::SoftSynthesizer_WeakAudioStream> new_object(jni::ref<javax::sound::sampled::AudioInputStream> p1) { return base_::new_object(p1); }
	jni::ref<javax::sound::sampled::AudioInputStream> getAudioInputStream() { return call_method<"getAudioInputStream", jni::ref<javax::sound::sampled::AudioInputStream>>(); }
	void close() { return call_method<"close", void>(); }

protected:

	SoftSynthesizer_WeakAudioStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MEDIA_SOUND_SOFTSYNTHESIZER_WEAKAUDIOSTREAM
