// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/imageio/plugins/gif/GIFMetadata.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFSTREAMMETADATA_FWD
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFSTREAMMETADATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::imageio::plugins::gif { class GIFStreamMetadata; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::imageio::plugins::gif::GIFStreamMetadata>
{
	static constexpr fixed_string class_name = "com/sun/imageio/plugins/gif/GIFStreamMetadata";
	using base_classes = std::tuple<scapix::java_api::com::sun::imageio::plugins::gif::GIFMetadata>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFSTREAMMETADATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFSTREAMMETADATA)
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFSTREAMMETADATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/imageio/metadata/IIOMetadataNode.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::imageio::plugins::gif::GIFStreamMetadata : public jni::object_base<"com/sun/imageio/plugins/gif/GIFStreamMetadata",
	com::sun::imageio::plugins::gif::GIFMetadata>
{
public:

	jni::ref<java::lang::String> version() { return get_field<"version", jni::ref<java::lang::String>>(); }
	void version(jni::ref<java::lang::String> v) { set_field<"version", jni::ref<java::lang::String>>(v); }
	jint logicalScreenWidth() { return get_field<"logicalScreenWidth", jint>(); }
	void logicalScreenWidth(jint v) { set_field<"logicalScreenWidth", jint>(v); }
	jint logicalScreenHeight() { return get_field<"logicalScreenHeight", jint>(); }
	void logicalScreenHeight(jint v) { set_field<"logicalScreenHeight", jint>(v); }
	jint colorResolution() { return get_field<"colorResolution", jint>(); }
	void colorResolution(jint v) { set_field<"colorResolution", jint>(v); }
	jint pixelAspectRatio() { return get_field<"pixelAspectRatio", jint>(); }
	void pixelAspectRatio(jint v) { set_field<"pixelAspectRatio", jint>(v); }
	jint backgroundColorIndex() { return get_field<"backgroundColorIndex", jint>(); }
	void backgroundColorIndex(jint v) { set_field<"backgroundColorIndex", jint>(v); }
	jboolean sortFlag() { return get_field<"sortFlag", jboolean>(); }
	void sortFlag(jboolean v) { set_field<"sortFlag", jboolean>(v); }
	jni::ref<jni::array<jbyte>> globalColorTable() { return get_field<"globalColorTable", jni::ref<jni::array<jbyte>>>(); }
	void globalColorTable(jni::ref<jni::array<jbyte>> v) { set_field<"globalColorTable", jni::ref<jni::array<jbyte>>>(v); }

	static jni::ref<com::sun::imageio::plugins::gif::GIFStreamMetadata> new_object() { return base_::new_object(); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	jni::ref<org::w3c::dom::Node> getAsTree(jni::ref<java::lang::String> p1) { return call_method<"getAsTree", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardChromaNode() { return call_method<"getStandardChromaNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardCompressionNode() { return call_method<"getStandardCompressionNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardDataNode() { return call_method<"getStandardDataNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardDimensionNode() { return call_method<"getStandardDimensionNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardDocumentNode() { return call_method<"getStandardDocumentNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardTextNode() { return call_method<"getStandardTextNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardTransparencyNode() { return call_method<"getStandardTransparencyNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	void setFromTree(jni::ref<java::lang::String> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"setFromTree", void>(p1, p2); }
	void reset() { return call_method<"reset", void>(); }

protected:

	GIFStreamMetadata(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFSTREAMMETADATA
