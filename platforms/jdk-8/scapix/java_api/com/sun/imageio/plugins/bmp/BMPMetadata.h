// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/imageio/metadata/IIOMetadata.h>
#include <scapix/java_api/com/sun/imageio/plugins/bmp/BMPConstants.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_BMP_BMPMETADATA_FWD
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_BMP_BMPMETADATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::imageio::plugins::bmp { class BMPMetadata; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::imageio::plugins::bmp::BMPMetadata>
{
	static constexpr fixed_string class_name = "com/sun/imageio/plugins/bmp/BMPMetadata";
	using base_classes = std::tuple<scapix::java_api::javax::imageio::metadata::IIOMetadata, scapix::java_api::com::sun::imageio::plugins::bmp::BMPConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_BMP_BMPMETADATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_BMP_BMPMETADATA)
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_BMP_BMPMETADATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::imageio::plugins::bmp::BMPMetadata : public jni::object_base<"com/sun/imageio/plugins/bmp/BMPMetadata",
	javax::imageio::metadata::IIOMetadata,
	com::sun::imageio::plugins::bmp::BMPConstants>
{
public:

	static jni::ref<java::lang::String> nativeMetadataFormatName() { return get_static_field<"nativeMetadataFormatName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> bmpVersion() { return get_field<"bmpVersion", jni::ref<java::lang::String>>(); }
	void bmpVersion(jni::ref<java::lang::String> v) { set_field<"bmpVersion", jni::ref<java::lang::String>>(v); }
	jint width() { return get_field<"width", jint>(); }
	void width(jint v) { set_field<"width", jint>(v); }
	jint height() { return get_field<"height", jint>(); }
	void height(jint v) { set_field<"height", jint>(v); }
	jshort bitsPerPixel() { return get_field<"bitsPerPixel", jshort>(); }
	void bitsPerPixel(jshort v) { set_field<"bitsPerPixel", jshort>(v); }
	jint compression() { return get_field<"compression", jint>(); }
	void compression(jint v) { set_field<"compression", jint>(v); }
	jint imageSize() { return get_field<"imageSize", jint>(); }
	void imageSize(jint v) { set_field<"imageSize", jint>(v); }
	jint xPixelsPerMeter() { return get_field<"xPixelsPerMeter", jint>(); }
	void xPixelsPerMeter(jint v) { set_field<"xPixelsPerMeter", jint>(v); }
	jint yPixelsPerMeter() { return get_field<"yPixelsPerMeter", jint>(); }
	void yPixelsPerMeter(jint v) { set_field<"yPixelsPerMeter", jint>(v); }
	jint colorsUsed() { return get_field<"colorsUsed", jint>(); }
	void colorsUsed(jint v) { set_field<"colorsUsed", jint>(v); }
	jint colorsImportant() { return get_field<"colorsImportant", jint>(); }
	void colorsImportant(jint v) { set_field<"colorsImportant", jint>(v); }
	jint redMask() { return get_field<"redMask", jint>(); }
	void redMask(jint v) { set_field<"redMask", jint>(v); }
	jint greenMask() { return get_field<"greenMask", jint>(); }
	void greenMask(jint v) { set_field<"greenMask", jint>(v); }
	jint blueMask() { return get_field<"blueMask", jint>(); }
	void blueMask(jint v) { set_field<"blueMask", jint>(v); }
	jint alphaMask() { return get_field<"alphaMask", jint>(); }
	void alphaMask(jint v) { set_field<"alphaMask", jint>(v); }
	jint colorSpace() { return get_field<"colorSpace", jint>(); }
	void colorSpace(jint v) { set_field<"colorSpace", jint>(v); }
	jdouble redX() { return get_field<"redX", jdouble>(); }
	void redX(jdouble v) { set_field<"redX", jdouble>(v); }
	jdouble redY() { return get_field<"redY", jdouble>(); }
	void redY(jdouble v) { set_field<"redY", jdouble>(v); }
	jdouble redZ() { return get_field<"redZ", jdouble>(); }
	void redZ(jdouble v) { set_field<"redZ", jdouble>(v); }
	jdouble greenX() { return get_field<"greenX", jdouble>(); }
	void greenX(jdouble v) { set_field<"greenX", jdouble>(v); }
	jdouble greenY() { return get_field<"greenY", jdouble>(); }
	void greenY(jdouble v) { set_field<"greenY", jdouble>(v); }
	jdouble greenZ() { return get_field<"greenZ", jdouble>(); }
	void greenZ(jdouble v) { set_field<"greenZ", jdouble>(v); }
	jdouble blueX() { return get_field<"blueX", jdouble>(); }
	void blueX(jdouble v) { set_field<"blueX", jdouble>(v); }
	jdouble blueY() { return get_field<"blueY", jdouble>(); }
	void blueY(jdouble v) { set_field<"blueY", jdouble>(v); }
	jdouble blueZ() { return get_field<"blueZ", jdouble>(); }
	void blueZ(jdouble v) { set_field<"blueZ", jdouble>(v); }
	jint gammaRed() { return get_field<"gammaRed", jint>(); }
	void gammaRed(jint v) { set_field<"gammaRed", jint>(v); }
	jint gammaGreen() { return get_field<"gammaGreen", jint>(); }
	void gammaGreen(jint v) { set_field<"gammaGreen", jint>(v); }
	jint gammaBlue() { return get_field<"gammaBlue", jint>(); }
	void gammaBlue(jint v) { set_field<"gammaBlue", jint>(v); }
	jint intent() { return get_field<"intent", jint>(); }
	void intent(jint v) { set_field<"intent", jint>(v); }
	jni::ref<jni::array<jbyte>> palette() { return get_field<"palette", jni::ref<jni::array<jbyte>>>(); }
	void palette(jni::ref<jni::array<jbyte>> v) { set_field<"palette", jni::ref<jni::array<jbyte>>>(v); }
	jint paletteSize() { return get_field<"paletteSize", jint>(); }
	void paletteSize(jint v) { set_field<"paletteSize", jint>(v); }
	jint red() { return get_field<"red", jint>(); }
	void red(jint v) { set_field<"red", jint>(v); }
	jint green() { return get_field<"green", jint>(); }
	void green(jint v) { set_field<"green", jint>(v); }
	jint blue() { return get_field<"blue", jint>(); }
	void blue(jint v) { set_field<"blue", jint>(v); }
	jni::ref<java::util::List> comments() { return get_field<"comments", jni::ref<java::util::List>>(); }
	void comments(jni::ref<java::util::List> v) { set_field<"comments", jni::ref<java::util::List>>(v); }

	static jni::ref<com::sun::imageio::plugins::bmp::BMPMetadata> new_object() { return base_::new_object(); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	jni::ref<org::w3c::dom::Node> getAsTree(jni::ref<java::lang::String> p1) { return call_method<"getAsTree", jni::ref<org::w3c::dom::Node>>(p1); }
	void setFromTree(jni::ref<java::lang::String> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"setFromTree", void>(p1, p2); }
	void mergeTree(jni::ref<java::lang::String> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"mergeTree", void>(p1, p2); }
	void reset() { return call_method<"reset", void>(); }

protected:

	BMPMetadata(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_BMP_BMPMETADATA
