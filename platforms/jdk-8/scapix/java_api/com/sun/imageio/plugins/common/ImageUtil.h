// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_COMMON_IMAGEUTIL_FWD
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_COMMON_IMAGEUTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::imageio::plugins::common { class ImageUtil; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::imageio::plugins::common::ImageUtil>
{
	static constexpr fixed_string class_name = "com/sun/imageio/plugins/common/ImageUtil";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_COMMON_IMAGEUTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_COMMON_IMAGEUTIL)
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_COMMON_IMAGEUTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/Rectangle.h>
#include <scapix/java_api/java/awt/color/ColorSpace.h>
#include <scapix/java_api/java/awt/image/ColorModel.h>
#include <scapix/java_api/java/awt/image/Raster.h>
#include <scapix/java_api/java/awt/image/RenderedImage.h>
#include <scapix/java_api/java/awt/image/SampleModel.h>
#include <scapix/java_api/java/awt/image/WritableRaster.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/imageio/ImageTypeSpecifier.h>
#include <scapix/java_api/javax/imageio/ImageWriter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::imageio::plugins::common::ImageUtil : public jni::object_base<"com/sun/imageio/plugins/common/ImageUtil",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::imageio::plugins::common::ImageUtil> new_object() { return base_::new_object(); }
	static jni::ref<java::awt::image::ColorModel> createColorModel(jni::ref<java::awt::image::SampleModel> p1) { return call_static_method<"createColorModel", jni::ref<java::awt::image::ColorModel>>(p1); }
	static jni::ref<jni::array<jbyte>> getPackedBinaryData(jni::ref<java::awt::image::Raster> p1, jni::ref<java::awt::Rectangle> p2) { return call_static_method<"getPackedBinaryData", jni::ref<jni::array<jbyte>>>(p1, p2); }
	static jni::ref<jni::array<jbyte>> getUnpackedBinaryData(jni::ref<java::awt::image::Raster> p1, jni::ref<java::awt::Rectangle> p2) { return call_static_method<"getUnpackedBinaryData", jni::ref<jni::array<jbyte>>>(p1, p2); }
	static void setPackedBinaryData(jni::ref<jni::array<jbyte>> p1, jni::ref<java::awt::image::WritableRaster> p2, jni::ref<java::awt::Rectangle> p3) { return call_static_method<"setPackedBinaryData", void>(p1, p2, p3); }
	static void setUnpackedBinaryData(jni::ref<jni::array<jbyte>> p1, jni::ref<java::awt::image::WritableRaster> p2, jni::ref<java::awt::Rectangle> p3) { return call_static_method<"setUnpackedBinaryData", void>(p1, p2, p3); }
	static jboolean isBinary(jni::ref<java::awt::image::SampleModel> p1) { return call_static_method<"isBinary", jboolean>(p1); }
	static jni::ref<java::awt::image::ColorModel> createColorModel(jni::ref<java::awt::color::ColorSpace> p1, jni::ref<java::awt::image::SampleModel> p2) { return call_static_method<"createColorModel", jni::ref<java::awt::image::ColorModel>>(p1, p2); }
	static jint getElementSize(jni::ref<java::awt::image::SampleModel> p1) { return call_static_method<"getElementSize", jint>(p1); }
	static jlong getTileSize(jni::ref<java::awt::image::SampleModel> p1) { return call_static_method<"getTileSize", jlong>(p1); }
	static jlong getBandSize(jni::ref<java::awt::image::SampleModel> p1) { return call_static_method<"getBandSize", jlong>(p1); }
	static jboolean isIndicesForGrayscale(jni::ref<jni::array<jbyte>> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<jbyte>> p3) { return call_static_method<"isIndicesForGrayscale", jboolean>(p1, p2, p3); }
	static jni::ref<java::lang::String> convertObjectToString(jni::ref<java::lang::Object> p1) { return call_static_method<"convertObjectToString", jni::ref<java::lang::String>>(p1); }
	static void canEncodeImage(jni::ref<javax::imageio::ImageWriter> p1, jni::ref<javax::imageio::ImageTypeSpecifier> p2) { return call_static_method<"canEncodeImage", void>(p1, p2); }
	static void canEncodeImage(jni::ref<javax::imageio::ImageWriter> p1, jni::ref<java::awt::image::ColorModel> p2, jni::ref<java::awt::image::SampleModel> p3) { return call_static_method<"canEncodeImage", void>(p1, p2, p3); }
	static jboolean imageIsContiguous(jni::ref<java::awt::image::RenderedImage> p1) { return call_static_method<"imageIsContiguous", jboolean>(p1); }

protected:

	ImageUtil(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_COMMON_IMAGEUTIL
