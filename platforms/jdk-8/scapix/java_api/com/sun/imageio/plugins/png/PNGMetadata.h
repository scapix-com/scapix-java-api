// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/imageio/metadata/IIOMetadata.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_PNG_PNGMETADATA_FWD
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_PNG_PNGMETADATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::imageio::plugins::png { class PNGMetadata; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::imageio::plugins::png::PNGMetadata>
{
	static constexpr fixed_string class_name = "com/sun/imageio/plugins/png/PNGMetadata";
	using base_classes = std::tuple<scapix::java_api::javax::imageio::metadata::IIOMetadata, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_PNG_PNGMETADATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_PNG_PNGMETADATA)
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_PNG_PNGMETADATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/javax/imageio/ImageTypeSpecifier.h>
#include <scapix/java_api/javax/imageio/metadata/IIOMetadataNode.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::imageio::plugins::png::PNGMetadata : public jni::object_base<"com/sun/imageio/plugins/png/PNGMetadata",
	javax::imageio::metadata::IIOMetadata,
	java::lang::Cloneable>
{
public:

	static jni::ref<java::lang::String> nativeMetadataFormatName() { return get_static_field<"nativeMetadataFormatName", jni::ref<java::lang::String>>(); }
	static jint PHYS_UNIT_UNKNOWN() { return get_static_field<"PHYS_UNIT_UNKNOWN", jint>(); }
	static jint PHYS_UNIT_METER() { return get_static_field<"PHYS_UNIT_METER", jint>(); }
	jboolean IHDR_present() { return get_field<"IHDR_present", jboolean>(); }
	void IHDR_present(jboolean v) { set_field<"IHDR_present", jboolean>(v); }
	jint IHDR_width() { return get_field<"IHDR_width", jint>(); }
	void IHDR_width(jint v) { set_field<"IHDR_width", jint>(v); }
	jint IHDR_height() { return get_field<"IHDR_height", jint>(); }
	void IHDR_height(jint v) { set_field<"IHDR_height", jint>(v); }
	jint IHDR_bitDepth() { return get_field<"IHDR_bitDepth", jint>(); }
	void IHDR_bitDepth(jint v) { set_field<"IHDR_bitDepth", jint>(v); }
	jint IHDR_colorType() { return get_field<"IHDR_colorType", jint>(); }
	void IHDR_colorType(jint v) { set_field<"IHDR_colorType", jint>(v); }
	jint IHDR_compressionMethod() { return get_field<"IHDR_compressionMethod", jint>(); }
	void IHDR_compressionMethod(jint v) { set_field<"IHDR_compressionMethod", jint>(v); }
	jint IHDR_filterMethod() { return get_field<"IHDR_filterMethod", jint>(); }
	void IHDR_filterMethod(jint v) { set_field<"IHDR_filterMethod", jint>(v); }
	jint IHDR_interlaceMethod() { return get_field<"IHDR_interlaceMethod", jint>(); }
	void IHDR_interlaceMethod(jint v) { set_field<"IHDR_interlaceMethod", jint>(v); }
	jboolean PLTE_present() { return get_field<"PLTE_present", jboolean>(); }
	void PLTE_present(jboolean v) { set_field<"PLTE_present", jboolean>(v); }
	jni::ref<jni::array<jbyte>> PLTE_red() { return get_field<"PLTE_red", jni::ref<jni::array<jbyte>>>(); }
	void PLTE_red(jni::ref<jni::array<jbyte>> v) { set_field<"PLTE_red", jni::ref<jni::array<jbyte>>>(v); }
	jni::ref<jni::array<jbyte>> PLTE_green() { return get_field<"PLTE_green", jni::ref<jni::array<jbyte>>>(); }
	void PLTE_green(jni::ref<jni::array<jbyte>> v) { set_field<"PLTE_green", jni::ref<jni::array<jbyte>>>(v); }
	jni::ref<jni::array<jbyte>> PLTE_blue() { return get_field<"PLTE_blue", jni::ref<jni::array<jbyte>>>(); }
	void PLTE_blue(jni::ref<jni::array<jbyte>> v) { set_field<"PLTE_blue", jni::ref<jni::array<jbyte>>>(v); }
	jni::ref<jni::array<jint>> PLTE_order() { return get_field<"PLTE_order", jni::ref<jni::array<jint>>>(); }
	void PLTE_order(jni::ref<jni::array<jint>> v) { set_field<"PLTE_order", jni::ref<jni::array<jint>>>(v); }
	jboolean bKGD_present() { return get_field<"bKGD_present", jboolean>(); }
	void bKGD_present(jboolean v) { set_field<"bKGD_present", jboolean>(v); }
	jint bKGD_colorType() { return get_field<"bKGD_colorType", jint>(); }
	void bKGD_colorType(jint v) { set_field<"bKGD_colorType", jint>(v); }
	jint bKGD_index() { return get_field<"bKGD_index", jint>(); }
	void bKGD_index(jint v) { set_field<"bKGD_index", jint>(v); }
	jint bKGD_gray() { return get_field<"bKGD_gray", jint>(); }
	void bKGD_gray(jint v) { set_field<"bKGD_gray", jint>(v); }
	jint bKGD_red() { return get_field<"bKGD_red", jint>(); }
	void bKGD_red(jint v) { set_field<"bKGD_red", jint>(v); }
	jint bKGD_green() { return get_field<"bKGD_green", jint>(); }
	void bKGD_green(jint v) { set_field<"bKGD_green", jint>(v); }
	jint bKGD_blue() { return get_field<"bKGD_blue", jint>(); }
	void bKGD_blue(jint v) { set_field<"bKGD_blue", jint>(v); }
	jboolean cHRM_present() { return get_field<"cHRM_present", jboolean>(); }
	void cHRM_present(jboolean v) { set_field<"cHRM_present", jboolean>(v); }
	jint cHRM_whitePointX() { return get_field<"cHRM_whitePointX", jint>(); }
	void cHRM_whitePointX(jint v) { set_field<"cHRM_whitePointX", jint>(v); }
	jint cHRM_whitePointY() { return get_field<"cHRM_whitePointY", jint>(); }
	void cHRM_whitePointY(jint v) { set_field<"cHRM_whitePointY", jint>(v); }
	jint cHRM_redX() { return get_field<"cHRM_redX", jint>(); }
	void cHRM_redX(jint v) { set_field<"cHRM_redX", jint>(v); }
	jint cHRM_redY() { return get_field<"cHRM_redY", jint>(); }
	void cHRM_redY(jint v) { set_field<"cHRM_redY", jint>(v); }
	jint cHRM_greenX() { return get_field<"cHRM_greenX", jint>(); }
	void cHRM_greenX(jint v) { set_field<"cHRM_greenX", jint>(v); }
	jint cHRM_greenY() { return get_field<"cHRM_greenY", jint>(); }
	void cHRM_greenY(jint v) { set_field<"cHRM_greenY", jint>(v); }
	jint cHRM_blueX() { return get_field<"cHRM_blueX", jint>(); }
	void cHRM_blueX(jint v) { set_field<"cHRM_blueX", jint>(v); }
	jint cHRM_blueY() { return get_field<"cHRM_blueY", jint>(); }
	void cHRM_blueY(jint v) { set_field<"cHRM_blueY", jint>(v); }
	jboolean gAMA_present() { return get_field<"gAMA_present", jboolean>(); }
	void gAMA_present(jboolean v) { set_field<"gAMA_present", jboolean>(v); }
	jint gAMA_gamma() { return get_field<"gAMA_gamma", jint>(); }
	void gAMA_gamma(jint v) { set_field<"gAMA_gamma", jint>(v); }
	jboolean hIST_present() { return get_field<"hIST_present", jboolean>(); }
	void hIST_present(jboolean v) { set_field<"hIST_present", jboolean>(v); }
	jni::ref<jni::array<jchar>> hIST_histogram() { return get_field<"hIST_histogram", jni::ref<jni::array<jchar>>>(); }
	void hIST_histogram(jni::ref<jni::array<jchar>> v) { set_field<"hIST_histogram", jni::ref<jni::array<jchar>>>(v); }
	jboolean iCCP_present() { return get_field<"iCCP_present", jboolean>(); }
	void iCCP_present(jboolean v) { set_field<"iCCP_present", jboolean>(v); }
	jni::ref<java::lang::String> iCCP_profileName() { return get_field<"iCCP_profileName", jni::ref<java::lang::String>>(); }
	void iCCP_profileName(jni::ref<java::lang::String> v) { set_field<"iCCP_profileName", jni::ref<java::lang::String>>(v); }
	jint iCCP_compressionMethod() { return get_field<"iCCP_compressionMethod", jint>(); }
	void iCCP_compressionMethod(jint v) { set_field<"iCCP_compressionMethod", jint>(v); }
	jni::ref<jni::array<jbyte>> iCCP_compressedProfile() { return get_field<"iCCP_compressedProfile", jni::ref<jni::array<jbyte>>>(); }
	void iCCP_compressedProfile(jni::ref<jni::array<jbyte>> v) { set_field<"iCCP_compressedProfile", jni::ref<jni::array<jbyte>>>(v); }
	jni::ref<java::util::ArrayList> iTXt_keyword() { return get_field<"iTXt_keyword", jni::ref<java::util::ArrayList>>(); }
	void iTXt_keyword(jni::ref<java::util::ArrayList> v) { set_field<"iTXt_keyword", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> iTXt_compressionFlag() { return get_field<"iTXt_compressionFlag", jni::ref<java::util::ArrayList>>(); }
	void iTXt_compressionFlag(jni::ref<java::util::ArrayList> v) { set_field<"iTXt_compressionFlag", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> iTXt_compressionMethod() { return get_field<"iTXt_compressionMethod", jni::ref<java::util::ArrayList>>(); }
	void iTXt_compressionMethod(jni::ref<java::util::ArrayList> v) { set_field<"iTXt_compressionMethod", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> iTXt_languageTag() { return get_field<"iTXt_languageTag", jni::ref<java::util::ArrayList>>(); }
	void iTXt_languageTag(jni::ref<java::util::ArrayList> v) { set_field<"iTXt_languageTag", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> iTXt_translatedKeyword() { return get_field<"iTXt_translatedKeyword", jni::ref<java::util::ArrayList>>(); }
	void iTXt_translatedKeyword(jni::ref<java::util::ArrayList> v) { set_field<"iTXt_translatedKeyword", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> iTXt_text() { return get_field<"iTXt_text", jni::ref<java::util::ArrayList>>(); }
	void iTXt_text(jni::ref<java::util::ArrayList> v) { set_field<"iTXt_text", jni::ref<java::util::ArrayList>>(v); }
	jboolean pHYs_present() { return get_field<"pHYs_present", jboolean>(); }
	void pHYs_present(jboolean v) { set_field<"pHYs_present", jboolean>(v); }
	jint pHYs_pixelsPerUnitXAxis() { return get_field<"pHYs_pixelsPerUnitXAxis", jint>(); }
	void pHYs_pixelsPerUnitXAxis(jint v) { set_field<"pHYs_pixelsPerUnitXAxis", jint>(v); }
	jint pHYs_pixelsPerUnitYAxis() { return get_field<"pHYs_pixelsPerUnitYAxis", jint>(); }
	void pHYs_pixelsPerUnitYAxis(jint v) { set_field<"pHYs_pixelsPerUnitYAxis", jint>(v); }
	jint pHYs_unitSpecifier() { return get_field<"pHYs_unitSpecifier", jint>(); }
	void pHYs_unitSpecifier(jint v) { set_field<"pHYs_unitSpecifier", jint>(v); }
	jboolean sBIT_present() { return get_field<"sBIT_present", jboolean>(); }
	void sBIT_present(jboolean v) { set_field<"sBIT_present", jboolean>(v); }
	jint sBIT_colorType() { return get_field<"sBIT_colorType", jint>(); }
	void sBIT_colorType(jint v) { set_field<"sBIT_colorType", jint>(v); }
	jint sBIT_grayBits() { return get_field<"sBIT_grayBits", jint>(); }
	void sBIT_grayBits(jint v) { set_field<"sBIT_grayBits", jint>(v); }
	jint sBIT_redBits() { return get_field<"sBIT_redBits", jint>(); }
	void sBIT_redBits(jint v) { set_field<"sBIT_redBits", jint>(v); }
	jint sBIT_greenBits() { return get_field<"sBIT_greenBits", jint>(); }
	void sBIT_greenBits(jint v) { set_field<"sBIT_greenBits", jint>(v); }
	jint sBIT_blueBits() { return get_field<"sBIT_blueBits", jint>(); }
	void sBIT_blueBits(jint v) { set_field<"sBIT_blueBits", jint>(v); }
	jint sBIT_alphaBits() { return get_field<"sBIT_alphaBits", jint>(); }
	void sBIT_alphaBits(jint v) { set_field<"sBIT_alphaBits", jint>(v); }
	jboolean sPLT_present() { return get_field<"sPLT_present", jboolean>(); }
	void sPLT_present(jboolean v) { set_field<"sPLT_present", jboolean>(v); }
	jni::ref<java::lang::String> sPLT_paletteName() { return get_field<"sPLT_paletteName", jni::ref<java::lang::String>>(); }
	void sPLT_paletteName(jni::ref<java::lang::String> v) { set_field<"sPLT_paletteName", jni::ref<java::lang::String>>(v); }
	jint sPLT_sampleDepth() { return get_field<"sPLT_sampleDepth", jint>(); }
	void sPLT_sampleDepth(jint v) { set_field<"sPLT_sampleDepth", jint>(v); }
	jni::ref<jni::array<jint>> sPLT_red() { return get_field<"sPLT_red", jni::ref<jni::array<jint>>>(); }
	void sPLT_red(jni::ref<jni::array<jint>> v) { set_field<"sPLT_red", jni::ref<jni::array<jint>>>(v); }
	jni::ref<jni::array<jint>> sPLT_green() { return get_field<"sPLT_green", jni::ref<jni::array<jint>>>(); }
	void sPLT_green(jni::ref<jni::array<jint>> v) { set_field<"sPLT_green", jni::ref<jni::array<jint>>>(v); }
	jni::ref<jni::array<jint>> sPLT_blue() { return get_field<"sPLT_blue", jni::ref<jni::array<jint>>>(); }
	void sPLT_blue(jni::ref<jni::array<jint>> v) { set_field<"sPLT_blue", jni::ref<jni::array<jint>>>(v); }
	jni::ref<jni::array<jint>> sPLT_alpha() { return get_field<"sPLT_alpha", jni::ref<jni::array<jint>>>(); }
	void sPLT_alpha(jni::ref<jni::array<jint>> v) { set_field<"sPLT_alpha", jni::ref<jni::array<jint>>>(v); }
	jni::ref<jni::array<jint>> sPLT_frequency() { return get_field<"sPLT_frequency", jni::ref<jni::array<jint>>>(); }
	void sPLT_frequency(jni::ref<jni::array<jint>> v) { set_field<"sPLT_frequency", jni::ref<jni::array<jint>>>(v); }
	jboolean sRGB_present() { return get_field<"sRGB_present", jboolean>(); }
	void sRGB_present(jboolean v) { set_field<"sRGB_present", jboolean>(v); }
	jint sRGB_renderingIntent() { return get_field<"sRGB_renderingIntent", jint>(); }
	void sRGB_renderingIntent(jint v) { set_field<"sRGB_renderingIntent", jint>(v); }
	jni::ref<java::util::ArrayList> tEXt_keyword() { return get_field<"tEXt_keyword", jni::ref<java::util::ArrayList>>(); }
	void tEXt_keyword(jni::ref<java::util::ArrayList> v) { set_field<"tEXt_keyword", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> tEXt_text() { return get_field<"tEXt_text", jni::ref<java::util::ArrayList>>(); }
	void tEXt_text(jni::ref<java::util::ArrayList> v) { set_field<"tEXt_text", jni::ref<java::util::ArrayList>>(v); }
	jboolean tIME_present() { return get_field<"tIME_present", jboolean>(); }
	void tIME_present(jboolean v) { set_field<"tIME_present", jboolean>(v); }
	jint tIME_year() { return get_field<"tIME_year", jint>(); }
	void tIME_year(jint v) { set_field<"tIME_year", jint>(v); }
	jint tIME_month() { return get_field<"tIME_month", jint>(); }
	void tIME_month(jint v) { set_field<"tIME_month", jint>(v); }
	jint tIME_day() { return get_field<"tIME_day", jint>(); }
	void tIME_day(jint v) { set_field<"tIME_day", jint>(v); }
	jint tIME_hour() { return get_field<"tIME_hour", jint>(); }
	void tIME_hour(jint v) { set_field<"tIME_hour", jint>(v); }
	jint tIME_minute() { return get_field<"tIME_minute", jint>(); }
	void tIME_minute(jint v) { set_field<"tIME_minute", jint>(v); }
	jint tIME_second() { return get_field<"tIME_second", jint>(); }
	void tIME_second(jint v) { set_field<"tIME_second", jint>(v); }
	jboolean tRNS_present() { return get_field<"tRNS_present", jboolean>(); }
	void tRNS_present(jboolean v) { set_field<"tRNS_present", jboolean>(v); }
	jint tRNS_colorType() { return get_field<"tRNS_colorType", jint>(); }
	void tRNS_colorType(jint v) { set_field<"tRNS_colorType", jint>(v); }
	jni::ref<jni::array<jbyte>> tRNS_alpha() { return get_field<"tRNS_alpha", jni::ref<jni::array<jbyte>>>(); }
	void tRNS_alpha(jni::ref<jni::array<jbyte>> v) { set_field<"tRNS_alpha", jni::ref<jni::array<jbyte>>>(v); }
	jint tRNS_gray() { return get_field<"tRNS_gray", jint>(); }
	void tRNS_gray(jint v) { set_field<"tRNS_gray", jint>(v); }
	jint tRNS_red() { return get_field<"tRNS_red", jint>(); }
	void tRNS_red(jint v) { set_field<"tRNS_red", jint>(v); }
	jint tRNS_green() { return get_field<"tRNS_green", jint>(); }
	void tRNS_green(jint v) { set_field<"tRNS_green", jint>(v); }
	jint tRNS_blue() { return get_field<"tRNS_blue", jint>(); }
	void tRNS_blue(jint v) { set_field<"tRNS_blue", jint>(v); }
	jni::ref<java::util::ArrayList> zTXt_keyword() { return get_field<"zTXt_keyword", jni::ref<java::util::ArrayList>>(); }
	void zTXt_keyword(jni::ref<java::util::ArrayList> v) { set_field<"zTXt_keyword", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> zTXt_compressionMethod() { return get_field<"zTXt_compressionMethod", jni::ref<java::util::ArrayList>>(); }
	void zTXt_compressionMethod(jni::ref<java::util::ArrayList> v) { set_field<"zTXt_compressionMethod", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> zTXt_text() { return get_field<"zTXt_text", jni::ref<java::util::ArrayList>>(); }
	void zTXt_text(jni::ref<java::util::ArrayList> v) { set_field<"zTXt_text", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> unknownChunkType() { return get_field<"unknownChunkType", jni::ref<java::util::ArrayList>>(); }
	void unknownChunkType(jni::ref<java::util::ArrayList> v) { set_field<"unknownChunkType", jni::ref<java::util::ArrayList>>(v); }
	jni::ref<java::util::ArrayList> unknownChunkData() { return get_field<"unknownChunkData", jni::ref<java::util::ArrayList>>(); }
	void unknownChunkData(jni::ref<java::util::ArrayList> v) { set_field<"unknownChunkData", jni::ref<java::util::ArrayList>>(v); }

	static jni::ref<com::sun::imageio::plugins::png::PNGMetadata> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::imageio::plugins::png::PNGMetadata> new_object(jni::ref<javax::imageio::metadata::IIOMetadata> p1) { return base_::new_object(p1); }
	void initialize(jni::ref<javax::imageio::ImageTypeSpecifier> p1, jint p2) { return call_method<"initialize", void>(p1, p2); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<org::w3c::dom::Node> getAsTree(jni::ref<java::lang::String> p1) { return call_method<"getAsTree", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardChromaNode() { return call_method<"getStandardChromaNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardCompressionNode() { return call_method<"getStandardCompressionNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardDataNode() { return call_method<"getStandardDataNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardDimensionNode() { return call_method<"getStandardDimensionNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardDocumentNode() { return call_method<"getStandardDocumentNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardTextNode() { return call_method<"getStandardTextNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadataNode> getStandardTransparencyNode() { return call_method<"getStandardTransparencyNode", jni::ref<javax::imageio::metadata::IIOMetadataNode>>(); }
	void mergeTree(jni::ref<java::lang::String> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"mergeTree", void>(p1, p2); }
	void reset() { return call_method<"reset", void>(); }

protected:

	PNGMetadata(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_PNG_PNGMETADATA
