// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/imageio/ImageReader.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFIMAGEREADER_FWD
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFIMAGEREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::imageio::plugins::gif { class GIFImageReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::imageio::plugins::gif::GIFImageReader>
{
	static constexpr fixed_string class_name = "com/sun/imageio/plugins/gif/GIFImageReader";
	using base_classes = std::tuple<scapix::java_api::javax::imageio::ImageReader>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFIMAGEREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFIMAGEREADER)
#define SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFIMAGEREADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/awt/image/BufferedImage.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/javax/imageio/ImageReadParam.h>
#include <scapix/java_api/javax/imageio/metadata/IIOMetadata.h>
#include <scapix/java_api/javax/imageio/spi/ImageReaderSpi.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::imageio::plugins::gif::GIFImageReader : public jni::object_base<"com/sun/imageio/plugins/gif/GIFImageReader",
	javax::imageio::ImageReader>
{
public:

	static jni::ref<com::sun::imageio::plugins::gif::GIFImageReader> new_object(jni::ref<javax::imageio::spi::ImageReaderSpi> p1) { return base_::new_object(p1); }
	void setInput(jni::ref<java::lang::Object> p1, jboolean p2, jboolean p3) { return call_method<"setInput", void>(p1, p2, p3); }
	jint getNumImages(jboolean p1) { return call_method<"getNumImages", jint>(p1); }
	jint getWidth(jint p1) { return call_method<"getWidth", jint>(p1); }
	jint getHeight(jint p1) { return call_method<"getHeight", jint>(p1); }
	jni::ref<java::util::Iterator> getImageTypes(jint p1) { return call_method<"getImageTypes", jni::ref<java::util::Iterator>>(p1); }
	jni::ref<javax::imageio::ImageReadParam> getDefaultReadParam() { return call_method<"getDefaultReadParam", jni::ref<javax::imageio::ImageReadParam>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadata> getStreamMetadata() { return call_method<"getStreamMetadata", jni::ref<javax::imageio::metadata::IIOMetadata>>(); }
	jni::ref<javax::imageio::metadata::IIOMetadata> getImageMetadata(jint p1) { return call_method<"getImageMetadata", jni::ref<javax::imageio::metadata::IIOMetadata>>(p1); }
	void initializeStringTable(jni::ref<jni::array<jint>> p1, jni::ref<jni::array<jbyte>> p2, jni::ref<jni::array<jbyte>> p3, jni::ref<jni::array<jint>> p4) { return call_method<"initializeStringTable", void>(p1, p2, p3, p4); }
	jni::ref<java::awt::image::BufferedImage> read(jint p1, jni::ref<javax::imageio::ImageReadParam> p2) { return call_method<"read", jni::ref<java::awt::image::BufferedImage>>(p1, p2); }
	void reset() { return call_method<"reset", void>(); }

protected:

	GIFImageReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_IMAGEIO_PLUGINS_GIF_GIFIMAGEREADER
