// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/xml/sax/helpers/DefaultHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ROWSET_INTERNAL_XMLREADERCONTENTHANDLER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ROWSET_INTERNAL_XMLREADERCONTENTHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::rowset::internal { class XmlReaderContentHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::rowset::internal::XmlReaderContentHandler>
{
	static constexpr fixed_string class_name = "com/sun/rowset/internal/XmlReaderContentHandler";
	using base_classes = std::tuple<scapix::java_api::org::xml::sax::helpers::DefaultHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ROWSET_INTERNAL_XMLREADERCONTENTHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ROWSET_INTERNAL_XMLREADERCONTENTHANDLER)
#define SCAPIX_JAVA_API_COM_SUN_ROWSET_INTERNAL_XMLREADERCONTENTHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/sql/RowSet.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/SAXParseException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::rowset::internal::XmlReaderContentHandler : public jni::object_base<"com/sun/rowset/internal/XmlReaderContentHandler",
	org::xml::sax::helpers::DefaultHandler>
{
public:

	static jni::ref<com::sun::rowset::internal::XmlReaderContentHandler> new_object(jni::ref<javax::sql::RowSet> p1) { return base_::new_object(p1); }
	void startDocument() { return call_method<"startDocument", void>(); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void error(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"error", void>(p1); }
	void warning(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"warning", void>(p1); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }

protected:

	XmlReaderContentHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ROWSET_INTERNAL_XMLREADERCONTENTHANDLER
