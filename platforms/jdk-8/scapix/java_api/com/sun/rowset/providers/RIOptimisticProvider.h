// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/sql/rowset/spi/SyncProvider.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ROWSET_PROVIDERS_RIOPTIMISTICPROVIDER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ROWSET_PROVIDERS_RIOPTIMISTICPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::rowset::providers { class RIOptimisticProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::rowset::providers::RIOptimisticProvider>
{
	static constexpr fixed_string class_name = "com/sun/rowset/providers/RIOptimisticProvider";
	using base_classes = std::tuple<scapix::java_api::javax::sql::rowset::spi::SyncProvider, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ROWSET_PROVIDERS_RIOPTIMISTICPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ROWSET_PROVIDERS_RIOPTIMISTICPROVIDER)
#define SCAPIX_JAVA_API_COM_SUN_ROWSET_PROVIDERS_RIOPTIMISTICPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/sql/RowSetReader.h>
#include <scapix/java_api/javax/sql/RowSetWriter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::rowset::providers::RIOptimisticProvider : public jni::object_base<"com/sun/rowset/providers/RIOptimisticProvider",
	javax::sql::rowset::spi::SyncProvider,
	java::io::Serializable>
{
public:

	static jni::ref<com::sun::rowset::providers::RIOptimisticProvider> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> getProviderID() { return call_method<"getProviderID", jni::ref<java::lang::String>>(); }
	jni::ref<javax::sql::RowSetWriter> getRowSetWriter() { return call_method<"getRowSetWriter", jni::ref<javax::sql::RowSetWriter>>(); }
	jni::ref<javax::sql::RowSetReader> getRowSetReader() { return call_method<"getRowSetReader", jni::ref<javax::sql::RowSetReader>>(); }
	jint getProviderGrade() { return call_method<"getProviderGrade", jint>(); }
	void setDataSourceLock(jint p1) { return call_method<"setDataSourceLock", void>(p1); }
	jint getDataSourceLock() { return call_method<"getDataSourceLock", jint>(); }
	jint supportsUpdatableView() { return call_method<"supportsUpdatableView", jint>(); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVendor() { return call_method<"getVendor", jni::ref<java::lang::String>>(); }

protected:

	RIOptimisticProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ROWSET_PROVIDERS_RIOPTIMISTICPROVIDER
