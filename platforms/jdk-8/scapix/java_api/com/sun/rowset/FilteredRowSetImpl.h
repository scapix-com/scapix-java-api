// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/rowset/WebRowSetImpl.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/javax/sql/rowset/FilteredRowSet.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ROWSET_FILTEREDROWSETIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ROWSET_FILTEREDROWSETIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::rowset { class FilteredRowSetImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::rowset::FilteredRowSetImpl>
{
	static constexpr fixed_string class_name = "com/sun/rowset/FilteredRowSetImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::rowset::WebRowSetImpl, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Cloneable, scapix::java_api::javax::sql::rowset::FilteredRowSet>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ROWSET_FILTEREDROWSETIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ROWSET_FILTEREDROWSETIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ROWSET_FILTEREDROWSETIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigDecimal.h>
#include <scapix/java_api/java/sql/Date.h>
#include <scapix/java_api/java/sql/Time.h>
#include <scapix/java_api/java/sql/Timestamp.h>
#include <scapix/java_api/java/util/Hashtable.h>
#include <scapix/java_api/javax/sql/rowset/Predicate.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::rowset::FilteredRowSetImpl : public jni::object_base<"com/sun/rowset/FilteredRowSetImpl",
	com::sun::rowset::WebRowSetImpl,
	java::io::Serializable,
	java::lang::Cloneable,
	javax::sql::rowset::FilteredRowSet>
{
public:

	static jni::ref<com::sun::rowset::FilteredRowSetImpl> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::rowset::FilteredRowSetImpl> new_object(jni::ref<java::util::Hashtable> p1) { return base_::new_object(p1); }
	void setFilter(jni::ref<javax::sql::rowset::Predicate> p1) { return call_method<"setFilter", void>(p1); }
	jni::ref<javax::sql::rowset::Predicate> getFilter() { return call_method<"getFilter", jni::ref<javax::sql::rowset::Predicate>>(); }
	jboolean relative(jint p1) { return call_method<"relative", jboolean>(p1); }
	jboolean absolute(jint p1) { return call_method<"absolute", jboolean>(p1); }
	void moveToInsertRow() { return call_method<"moveToInsertRow", void>(); }
	void updateInt(jint p1, jint p2) { return call_method<"updateInt", void>(p1, p2); }
	void updateInt(jni::ref<java::lang::String> p1, jint p2) { return call_method<"updateInt", void>(p1, p2); }
	void updateBoolean(jint p1, jboolean p2) { return call_method<"updateBoolean", void>(p1, p2); }
	void updateBoolean(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"updateBoolean", void>(p1, p2); }
	void updateByte(jint p1, jbyte p2) { return call_method<"updateByte", void>(p1, p2); }
	void updateByte(jni::ref<java::lang::String> p1, jbyte p2) { return call_method<"updateByte", void>(p1, p2); }
	void updateShort(jint p1, jshort p2) { return call_method<"updateShort", void>(p1, p2); }
	void updateShort(jni::ref<java::lang::String> p1, jshort p2) { return call_method<"updateShort", void>(p1, p2); }
	void updateLong(jint p1, jlong p2) { return call_method<"updateLong", void>(p1, p2); }
	void updateLong(jni::ref<java::lang::String> p1, jlong p2) { return call_method<"updateLong", void>(p1, p2); }
	void updateFloat(jint p1, jfloat p2) { return call_method<"updateFloat", void>(p1, p2); }
	void updateFloat(jni::ref<java::lang::String> p1, jfloat p2) { return call_method<"updateFloat", void>(p1, p2); }
	void updateDouble(jint p1, jdouble p2) { return call_method<"updateDouble", void>(p1, p2); }
	void updateDouble(jni::ref<java::lang::String> p1, jdouble p2) { return call_method<"updateDouble", void>(p1, p2); }
	void updateBigDecimal(jint p1, jni::ref<java::math::BigDecimal> p2) { return call_method<"updateBigDecimal", void>(p1, p2); }
	void updateBigDecimal(jni::ref<java::lang::String> p1, jni::ref<java::math::BigDecimal> p2) { return call_method<"updateBigDecimal", void>(p1, p2); }
	void updateString(jint p1, jni::ref<java::lang::String> p2) { return call_method<"updateString", void>(p1, p2); }
	void updateString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"updateString", void>(p1, p2); }
	void updateBytes(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"updateBytes", void>(p1, p2); }
	void updateBytes(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"updateBytes", void>(p1, p2); }
	void updateDate(jint p1, jni::ref<java::sql::Date> p2) { return call_method<"updateDate", void>(p1, p2); }
	void updateDate(jni::ref<java::lang::String> p1, jni::ref<java::sql::Date> p2) { return call_method<"updateDate", void>(p1, p2); }
	void updateTime(jint p1, jni::ref<java::sql::Time> p2) { return call_method<"updateTime", void>(p1, p2); }
	void updateTime(jni::ref<java::lang::String> p1, jni::ref<java::sql::Time> p2) { return call_method<"updateTime", void>(p1, p2); }
	void updateTimestamp(jint p1, jni::ref<java::sql::Timestamp> p2) { return call_method<"updateTimestamp", void>(p1, p2); }
	void updateTimestamp(jni::ref<java::lang::String> p1, jni::ref<java::sql::Timestamp> p2) { return call_method<"updateTimestamp", void>(p1, p2); }
	void updateAsciiStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"updateAsciiStream", void>(p1, p2, p3); }
	void updateAsciiStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"updateAsciiStream", void>(p1, p2, p3); }
	void updateCharacterStream(jint p1, jni::ref<java::io::Reader> p2, jint p3) { return call_method<"updateCharacterStream", void>(p1, p2, p3); }
	void updateCharacterStream(jni::ref<java::lang::String> p1, jni::ref<java::io::Reader> p2, jint p3) { return call_method<"updateCharacterStream", void>(p1, p2, p3); }
	void updateBinaryStream(jint p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"updateBinaryStream", void>(p1, p2, p3); }
	void updateBinaryStream(jni::ref<java::lang::String> p1, jni::ref<java::io::InputStream> p2, jint p3) { return call_method<"updateBinaryStream", void>(p1, p2, p3); }
	void updateObject(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"updateObject", void>(p1, p2); }
	void updateObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"updateObject", void>(p1, p2); }
	void updateObject(jint p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"updateObject", void>(p1, p2, p3); }
	void updateObject(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jint p3) { return call_method<"updateObject", void>(p1, p2, p3); }
	void insertRow() { return call_method<"insertRow", void>(); }

protected:

	FilteredRowSetImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ROWSET_FILTEREDROWSETIMPL
