// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Constants.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_TYPE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_TYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::util { class Type; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/util/Type";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::Constants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_TYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_TYPE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_TYPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/BranchInstruction.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Instruction.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Type.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/FlowList.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/BooleanType.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ClassGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodGenerator.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/util/Type",
	java::lang::Object,
	com::sun::org::apache::xalan::internal::xsltc::compiler::Constants>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Int() { return get_static_field<"Int", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Real() { return get_static_field<"Real", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Boolean() { return get_static_field<"Boolean", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> NodeSet() { return get_static_field<"NodeSet", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> String() { return get_static_field<"String", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> ResultTree() { return get_static_field<"ResultTree", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Reference() { return get_static_field<"Reference", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Void() { return get_static_field<"Void", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Object() { return get_static_field<"Object", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> ObjectString() { return get_static_field<"ObjectString", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Node() { return get_static_field<"Node", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Root() { return get_static_field<"Root", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Element() { return get_static_field<"Element", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Attribute() { return get_static_field<"Attribute", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Text() { return get_static_field<"Text", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Comment() { return get_static_field<"Comment", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> Processing_Instruction() { return get_static_field<"Processing_Instruction", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> newObjectType(jni::ref<java::lang::String> p1) { return call_static_method<"newObjectType", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(p1); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> newObjectType(jni::ref<java::lang::Class> p1) { return call_static_method<"newObjectType", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean identicalTo(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> p1) { return call_method<"identicalTo", jboolean>(p1); }
	jboolean isNumber() { return call_method<"isNumber", jboolean>(); }
	jboolean implementedAsMethod() { return call_method<"implementedAsMethod", jboolean>(); }
	jboolean isSimple() { return call_method<"isSimple", jboolean>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Type> toJCType() { return call_method<"toJCType", jni::ref<com::sun::org::apache::bcel::internal::generic::Type>>(); }
	jint distanceTo(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> p1) { return call_method<"distanceTo", jint>(p1); }
	jni::ref<java::lang::String> toSignature() { return call_method<"toSignature", jni::ref<java::lang::String>>(); }
	void translateTo(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> p3) { return call_method<"translateTo", void>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> translateToDesynthesized(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> p3) { return call_method<"translateToDesynthesized", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList>>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> translateToDesynthesized(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::BooleanType> p3) { return call_method<"translateToDesynthesized", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList>>(p1, p2, p3); }
	void translateTo(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2, jni::ref<java::lang::Class> p3) { return call_method<"translateTo", void>(p1, p2, p3); }
	void translateFrom(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2, jni::ref<java::lang::Class> p3) { return call_method<"translateFrom", void>(p1, p2, p3); }
	void translateBox(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"translateBox", void>(p1, p2); }
	void translateUnBox(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"translateUnBox", void>(p1, p2); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> ADD() { return call_method<"ADD", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> SUB() { return call_method<"SUB", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> MUL() { return call_method<"MUL", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> DIV() { return call_method<"DIV", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> REM() { return call_method<"REM", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> NEG() { return call_method<"NEG", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> LOAD(jint p1) { return call_method<"LOAD", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> STORE(jint p1) { return call_method<"STORE", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> POP() { return call_method<"POP", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> GT(jboolean p1) { return call_method<"GT", jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> GE(jboolean p1) { return call_method<"GE", jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> LT(jboolean p1) { return call_method<"LT", jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> LE(jboolean p1) { return call_method<"LE", jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> CMP(jboolean p1) { return call_method<"CMP", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> DUP() { return call_method<"DUP", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }

protected:

	Type(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_TYPE
