// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_EXCEPTIONCONST_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_EXCEPTIONCONST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal { class ExceptionConst; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::ExceptionConst>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/ExceptionConst";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_EXCEPTIONCONST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_EXCEPTIONCONST)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_EXCEPTIONCONST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/ExceptionConst_EXCS.h>
#include <scapix/java_api/java/lang/Class.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::ExceptionConst : public jni::object_base<"com/sun/org/apache/bcel/internal/ExceptionConst",
	java::lang::Object>
{
public:

	using EXCS = ExceptionConst_EXCS;

	static jni::ref<java::lang::Class> THROWABLE() { return get_static_field<"THROWABLE", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> RUNTIME_EXCEPTION() { return get_static_field<"RUNTIME_EXCEPTION", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> LINKING_EXCEPTION() { return get_static_field<"LINKING_EXCEPTION", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> CLASS_CIRCULARITY_ERROR() { return get_static_field<"CLASS_CIRCULARITY_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> CLASS_FORMAT_ERROR() { return get_static_field<"CLASS_FORMAT_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> EXCEPTION_IN_INITIALIZER_ERROR() { return get_static_field<"EXCEPTION_IN_INITIALIZER_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> INCOMPATIBLE_CLASS_CHANGE_ERROR() { return get_static_field<"INCOMPATIBLE_CLASS_CHANGE_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> ABSTRACT_METHOD_ERROR() { return get_static_field<"ABSTRACT_METHOD_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> ILLEGAL_ACCESS_ERROR() { return get_static_field<"ILLEGAL_ACCESS_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> INSTANTIATION_ERROR() { return get_static_field<"INSTANTIATION_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> NO_SUCH_FIELD_ERROR() { return get_static_field<"NO_SUCH_FIELD_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> NO_SUCH_METHOD_ERROR() { return get_static_field<"NO_SUCH_METHOD_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> NO_CLASS_DEF_FOUND_ERROR() { return get_static_field<"NO_CLASS_DEF_FOUND_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> UNSATISFIED_LINK_ERROR() { return get_static_field<"UNSATISFIED_LINK_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> VERIFY_ERROR() { return get_static_field<"VERIFY_ERROR", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> NULL_POINTER_EXCEPTION() { return get_static_field<"NULL_POINTER_EXCEPTION", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION() { return get_static_field<"ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> ARITHMETIC_EXCEPTION() { return get_static_field<"ARITHMETIC_EXCEPTION", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> NEGATIVE_ARRAY_SIZE_EXCEPTION() { return get_static_field<"NEGATIVE_ARRAY_SIZE_EXCEPTION", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> CLASS_CAST_EXCEPTION() { return get_static_field<"CLASS_CAST_EXCEPTION", jni::ref<java::lang::Class>>(); }
	static jni::ref<java::lang::Class> ILLEGAL_MONITOR_STATE() { return get_static_field<"ILLEGAL_MONITOR_STATE", jni::ref<java::lang::Class>>(); }

	static jni::ref<com::sun::org::apache::bcel::internal::ExceptionConst> new_object() { return base_::new_object(); }
	static jni::ref<jni::array<java::lang::Class>> createExceptions(jni::ref<com::sun::org::apache::bcel::internal::ExceptionConst_EXCS> p1, jni::ref<jni::array<java::lang::Class>> p2) { return call_static_method<"createExceptions", jni::ref<jni::array<java::lang::Class>>>(p1, p2); }

protected:

	ExceptionConst(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_EXCEPTIONCONST
