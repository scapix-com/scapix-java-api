// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLDTDHandler.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLDTDContentModelHandler.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/validation/EntityState.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/grammars/Grammar.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_DTD_DTDGRAMMAR_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_DTD_DTDGRAMMAR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::impl::dtd { class DTDGrammar; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::impl::dtd::DTDGrammar>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/impl/dtd/DTDGrammar";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xerces::internal::xni::XMLDTDHandler, scapix::java_api::com::sun::org::apache::xerces::internal::xni::XMLDTDContentModelHandler, scapix::java_api::com::sun::org::apache::xerces::internal::impl::validation::EntityState, scapix::java_api::com::sun::org::apache::xerces::internal::xni::grammars::Grammar>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_DTD_DTDGRAMMAR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_DTD_DTDGRAMMAR)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_DTD_DTDGRAMMAR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/dtd/XMLAttributeDecl.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/dtd/XMLContentSpec.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDDescription.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/dtd/XMLElementDecl.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/dtd/XMLEntityDecl.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/dtd/XMLNotationDecl.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/util/SymbolTable.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/Augmentations.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/QName.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLLocator.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLResourceIdentifier.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLString.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/grammars/XMLGrammarDescription.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLDTDContentModelSource.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLDTDSource.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::impl::dtd::DTDGrammar : public jni::object_base<"com/sun/org/apache/xerces/internal/impl/dtd/DTDGrammar",
	java::lang::Object,
	com::sun::org::apache::xerces::internal::xni::XMLDTDHandler,
	com::sun::org::apache::xerces::internal::xni::XMLDTDContentModelHandler,
	com::sun::org::apache::xerces::internal::impl::validation::EntityState,
	com::sun::org::apache::xerces::internal::xni::grammars::Grammar>
{
public:

	static jint TOP_LEVEL_SCOPE() { return get_static_field<"TOP_LEVEL_SCOPE", jint>(); }

	static jni::ref<com::sun::org::apache::xerces::internal::impl::dtd::DTDGrammar> new_object(jni::ref<com::sun::org::apache::xerces::internal::util::SymbolTable> p1, jni::ref<com::sun::org::apache::xerces::internal::impl::dtd::XMLDTDDescription> p2) { return base_::new_object(p1, p2); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::grammars::XMLGrammarDescription> getGrammarDescription() { return call_method<"getGrammarDescription", jni::ref<com::sun::org::apache::xerces::internal::xni::grammars::XMLGrammarDescription>>(); }
	jboolean getElementDeclIsExternal(jint p1) { return call_method<"getElementDeclIsExternal", jboolean>(p1); }
	jboolean getAttributeDeclIsExternal(jint p1) { return call_method<"getAttributeDeclIsExternal", jboolean>(p1); }
	jint getAttributeDeclIndex(jint p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeDeclIndex", jint>(p1, p2); }
	void startDTD(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLLocator> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startDTD", void>(p1, p2); }
	void startParameterEntity(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"startParameterEntity", void>(p1, p2, p3, p4); }
	void startExternalSubset(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startExternalSubset", void>(p1, p2); }
	void endParameterEntity(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"endParameterEntity", void>(p1, p2); }
	void endExternalSubset(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endExternalSubset", void>(p1); }
	void elementDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"elementDecl", void>(p1, p2, p3); }
	void attributeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<java::lang::String>> p4, jni::ref<java::lang::String> p5, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p6, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p7, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p8) { return call_method<"attributeDecl", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void internalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"internalEntityDecl", void>(p1, p2, p3, p4); }
	void externalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"externalEntityDecl", void>(p1, p2, p3); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }
	void endDTD(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endDTD", void>(p1); }
	void setDTDSource(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDSource> p1) { return call_method<"setDTDSource", void>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDSource> getDTDSource() { return call_method<"getDTDSource", jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDSource>>(); }
	void textDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"textDecl", void>(p1, p2, p3); }
	void comment(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"comment", void>(p1, p2); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"processingInstruction", void>(p1, p2, p3); }
	void startAttlist(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startAttlist", void>(p1, p2); }
	void endAttlist(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endAttlist", void>(p1); }
	void startConditional(jshort p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startConditional", void>(p1, p2); }
	void ignoredCharacters(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"ignoredCharacters", void>(p1, p2); }
	void endConditional(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endConditional", void>(p1); }
	void setDTDContentModelSource(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDContentModelSource> p1) { return call_method<"setDTDContentModelSource", void>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDContentModelSource> getDTDContentModelSource() { return call_method<"getDTDContentModelSource", jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDContentModelSource>>(); }
	void startContentModel(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startContentModel", void>(p1, p2); }
	void startGroup(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"startGroup", void>(p1); }
	void pcdata(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"pcdata", void>(p1); }
	void element(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"element", void>(p1, p2); }
	void separator(jshort p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"separator", void>(p1, p2); }
	void occurrence(jshort p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"occurrence", void>(p1, p2); }
	void endGroup(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endGroup", void>(p1); }
	void any(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"any", void>(p1); }
	void empty(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"empty", void>(p1); }
	void endContentModel(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endContentModel", void>(p1); }
	jboolean isNamespaceAware() { return call_method<"isNamespaceAware", jboolean>(); }
	jni::ref<com::sun::org::apache::xerces::internal::util::SymbolTable> getSymbolTable() { return call_method<"getSymbolTable", jni::ref<com::sun::org::apache::xerces::internal::util::SymbolTable>>(); }
	jint getFirstElementDeclIndex() { return call_method<"getFirstElementDeclIndex", jint>(); }
	jint getNextElementDeclIndex(jint p1) { return call_method<"getNextElementDeclIndex", jint>(p1); }
	jint getElementDeclIndex(jni::ref<java::lang::String> p1) { return call_method<"getElementDeclIndex", jint>(p1); }
	jint getElementDeclIndex(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1) { return call_method<"getElementDeclIndex", jint>(p1); }
	jshort getContentSpecType(jint p1) { return call_method<"getContentSpecType", jshort>(p1); }
	jboolean getElementDecl(jint p1, jni::ref<com::sun::org::apache::xerces::internal::impl::dtd::XMLElementDecl> p2) { return call_method<"getElementDecl", jboolean>(p1, p2); }
	jint getFirstAttributeDeclIndex(jint p1) { return call_method<"getFirstAttributeDeclIndex", jint>(p1); }
	jint getNextAttributeDeclIndex(jint p1) { return call_method<"getNextAttributeDeclIndex", jint>(p1); }
	jboolean getAttributeDecl(jint p1, jni::ref<com::sun::org::apache::xerces::internal::impl::dtd::XMLAttributeDecl> p2) { return call_method<"getAttributeDecl", jboolean>(p1, p2); }
	jboolean isCDATAAttribute(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p2) { return call_method<"isCDATAAttribute", jboolean>(p1, p2); }
	jint getEntityDeclIndex(jni::ref<java::lang::String> p1) { return call_method<"getEntityDeclIndex", jint>(p1); }
	jboolean getEntityDecl(jint p1, jni::ref<com::sun::org::apache::xerces::internal::impl::dtd::XMLEntityDecl> p2) { return call_method<"getEntityDecl", jboolean>(p1, p2); }
	jint getNotationDeclIndex(jni::ref<java::lang::String> p1) { return call_method<"getNotationDeclIndex", jint>(p1); }
	jboolean getNotationDecl(jint p1, jni::ref<com::sun::org::apache::xerces::internal::impl::dtd::XMLNotationDecl> p2) { return call_method<"getNotationDecl", jboolean>(p1, p2); }
	jboolean getContentSpec(jint p1, jni::ref<com::sun::org::apache::xerces::internal::impl::dtd::XMLContentSpec> p2) { return call_method<"getContentSpec", jboolean>(p1, p2); }
	jint getContentSpecIndex(jint p1) { return call_method<"getContentSpecIndex", jint>(p1); }
	jni::ref<java::lang::String> getContentSpecAsString(jint p1) { return call_method<"getContentSpecAsString", jni::ref<java::lang::String>>(p1); }
	void printElements() { return call_method<"printElements", void>(); }
	void printAttributes(jint p1) { return call_method<"printAttributes", void>(p1); }
	jboolean isEntityDeclared(jni::ref<java::lang::String> p1) { return call_method<"isEntityDeclared", jboolean>(p1); }
	jboolean isEntityUnparsed(jni::ref<java::lang::String> p1) { return call_method<"isEntityUnparsed", jboolean>(p1); }

protected:

	DTDGrammar(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_DTD_DTDGRAMMAR
