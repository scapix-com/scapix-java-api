// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_QNAME_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_QNAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::utils { class QName; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::utils::QName>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/utils/QName";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_QNAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_QNAME)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_QNAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/PrefixResolver.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Stack.h>
#include <scapix/java_api/org/w3c/dom/Element.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::utils::QName : public jni::object_base<"com/sun/org/apache/xml/internal/utils/QName",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::lang::String> S_XMLNAMESPACEURI() { return get_static_field<"S_XMLNAMESPACEURI", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jboolean p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<java::util::Stack> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<java::util::Stack> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<org::w3c::dom::Element> p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<org::w3c::dom::Element> p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3, jboolean p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> new_object(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::String> getNamespaceURI() { return call_method<"getNamespaceURI", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPrefix() { return call_method<"getPrefix", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getLocalName() { return call_method<"getLocalName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toNamespacedString() { return call_method<"toNamespacedString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getNamespace() { return call_method<"getNamespace", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getLocalPart() { return call_method<"getLocalPart", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"equals", jboolean>(p1, p2); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::QName> getQNameFromString(jni::ref<java::lang::String> p1) { return call_static_method<"getQNameFromString", jni::ref<com::sun::org::apache::xml::internal::utils::QName>>(p1); }
	static jboolean isXMLNSDecl(jni::ref<java::lang::String> p1) { return call_static_method<"isXMLNSDecl", jboolean>(p1); }
	static jni::ref<java::lang::String> getPrefixFromXMLNSDecl(jni::ref<java::lang::String> p1) { return call_static_method<"getPrefixFromXMLNSDecl", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> getLocalPart(jni::ref<java::lang::String> p1) { return call_static_method<"getLocalPart", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> getPrefixPart(jni::ref<java::lang::String> p1) { return call_static_method<"getPrefixPart", jni::ref<java::lang::String>>(p1); }

protected:

	QName(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_QNAME
