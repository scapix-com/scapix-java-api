// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_REGEX_REGULAREXPRESSION_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_REGEX_REGULAREXPRESSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::impl::xpath::regex { class RegularExpression; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::impl::xpath::regex::RegularExpression>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_REGEX_REGULAREXPRESSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_REGEX_REGULAREXPRESSION)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_REGEX_REGULAREXPRESSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/xpath/regex/Match.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/CharacterIterator.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::impl::xpath::regex::RegularExpression : public jni::object_base<"com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression",
	java::lang::Object,
	java::io::Serializable>
{
public:

	jboolean matches(jni::ref<jni::array<jchar>> p1) { return call_method<"matches", jboolean>(p1); }
	jboolean matches(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"matches", jboolean>(p1, p2, p3); }
	jboolean matches(jni::ref<jni::array<jchar>> p1, jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::regex::Match> p2) { return call_method<"matches", jboolean>(p1, p2); }
	jboolean matches(jni::ref<jni::array<jchar>> p1, jint p2, jint p3, jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::regex::Match> p4) { return call_method<"matches", jboolean>(p1, p2, p3, p4); }
	jboolean matches(jni::ref<java::lang::String> p1) { return call_method<"matches", jboolean>(p1); }
	jboolean matches(jni::ref<java::lang::String> p1, jint p2, jint p3) { return call_method<"matches", jboolean>(p1, p2, p3); }
	jboolean matches(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::regex::Match> p2) { return call_method<"matches", jboolean>(p1, p2); }
	jboolean matches(jni::ref<java::lang::String> p1, jint p2, jint p3, jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::regex::Match> p4) { return call_method<"matches", jboolean>(p1, p2, p3, p4); }
	jboolean matches(jni::ref<java::text::CharacterIterator> p1) { return call_method<"matches", jboolean>(p1); }
	jboolean matches(jni::ref<java::text::CharacterIterator> p1, jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::regex::Match> p2) { return call_method<"matches", jboolean>(p1, p2); }
	static jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::regex::RegularExpression> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::regex::RegularExpression> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::regex::RegularExpression> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Locale> p3) { return base_::new_object(p1, p2, p3); }
	void setPattern(jni::ref<java::lang::String> p1) { return call_method<"setPattern", void>(p1); }
	void setPattern(jni::ref<java::lang::String> p1, jni::ref<java::util::Locale> p2) { return call_method<"setPattern", void>(p1, p2); }
	void setPattern(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setPattern", void>(p1, p2); }
	void setPattern(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Locale> p3) { return call_method<"setPattern", void>(p1, p2, p3); }
	jni::ref<java::lang::String> getPattern() { return call_method<"getPattern", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getOptions() { return call_method<"getOptions", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint getNumberOfGroups() { return call_method<"getNumberOfGroups", jint>(); }

protected:

	RegularExpression(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_REGEX_REGULAREXPRESSION
