// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_XMLSERIALIZER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_XMLSERIALIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serialize { class XMLSerializer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serialize::XMLSerializer>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serialize/XMLSerializer";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xml::internal::serialize::BaseMarkupSerializer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_XMLSERIALIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_XMLSERIALIZER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_XMLSERIALIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/serialize/OutputFormat.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xml/sax/AttributeList.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serialize::XMLSerializer : public jni::object_base<"com/sun/org/apache/xml/internal/serialize/XMLSerializer",
	com::sun::org::apache::xml::internal::serialize::BaseMarkupSerializer>
{
public:

	static jni::ref<com::sun::org::apache::xml::internal::serialize::XMLSerializer> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xml::internal::serialize::XMLSerializer> new_object(jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::serialize::XMLSerializer> new_object(jni::ref<java::io::Writer> p1, jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xml::internal::serialize::XMLSerializer> new_object(jni::ref<java::io::OutputStream> p1, jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> p2) { return base_::new_object(p1, p2); }
	void setOutputFormat(jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> p1) { return call_method<"setOutputFormat", void>(p1); }
	void setNamespaces(jboolean p1) { return call_method<"setNamespaces", void>(p1); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void endElementIO(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElementIO", void>(p1, p2, p3); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<org::xml::sax::AttributeList> p2) { return call_method<"startElement", void>(p1, p2); }
	void endElement(jni::ref<java::lang::String> p1) { return call_method<"endElement", void>(p1); }
	jboolean reset() { return call_method<"reset", jboolean>(); }

protected:

	XMLSerializer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_XMLSERIALIZER
