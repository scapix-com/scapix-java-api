// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTM_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::dtm { class DTM; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::dtm::DTM>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/dtm/DTM";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTM)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMAxisIterator.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMAxisTraverser.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMManager.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/XMLString.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/transform/SourceLocator.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/org/xml/sax/EntityResolver.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>
#include <scapix/java_api/org/xml/sax/ext/DeclHandler.h>
#include <scapix/java_api/org/xml/sax/ext/LexicalHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::dtm::DTM : public jni::object_base<"com/sun/org/apache/xml/internal/dtm/DTM",
	java::lang::Object>
{
public:

	static jint NULL() { return get_static_field<"NULL", jint>(); }
	static jshort ROOT_NODE() { return get_static_field<"ROOT_NODE", jshort>(); }
	static jshort ELEMENT_NODE() { return get_static_field<"ELEMENT_NODE", jshort>(); }
	static jshort ATTRIBUTE_NODE() { return get_static_field<"ATTRIBUTE_NODE", jshort>(); }
	static jshort TEXT_NODE() { return get_static_field<"TEXT_NODE", jshort>(); }
	static jshort CDATA_SECTION_NODE() { return get_static_field<"CDATA_SECTION_NODE", jshort>(); }
	static jshort ENTITY_REFERENCE_NODE() { return get_static_field<"ENTITY_REFERENCE_NODE", jshort>(); }
	static jshort ENTITY_NODE() { return get_static_field<"ENTITY_NODE", jshort>(); }
	static jshort PROCESSING_INSTRUCTION_NODE() { return get_static_field<"PROCESSING_INSTRUCTION_NODE", jshort>(); }
	static jshort COMMENT_NODE() { return get_static_field<"COMMENT_NODE", jshort>(); }
	static jshort DOCUMENT_NODE() { return get_static_field<"DOCUMENT_NODE", jshort>(); }
	static jshort DOCUMENT_TYPE_NODE() { return get_static_field<"DOCUMENT_TYPE_NODE", jshort>(); }
	static jshort DOCUMENT_FRAGMENT_NODE() { return get_static_field<"DOCUMENT_FRAGMENT_NODE", jshort>(); }
	static jshort NOTATION_NODE() { return get_static_field<"NOTATION_NODE", jshort>(); }
	static jshort NAMESPACE_NODE() { return get_static_field<"NAMESPACE_NODE", jshort>(); }
	static jshort NTYPES() { return get_static_field<"NTYPES", jshort>(); }

	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisTraverser> getAxisTraverser(jint p1) { return call_method<"getAxisTraverser", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisTraverser>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getAxisIterator(jint p1) { return call_method<"getAxisIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getTypedAxisIterator(jint p1, jint p2) { return call_method<"getTypedAxisIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1, p2); }
	jboolean hasChildNodes(jint p1) { return call_method<"hasChildNodes", jboolean>(p1); }
	jint getFirstChild(jint p1) { return call_method<"getFirstChild", jint>(p1); }
	jint getLastChild(jint p1) { return call_method<"getLastChild", jint>(p1); }
	jint getAttributeNode(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getAttributeNode", jint>(p1, p2, p3); }
	jint getFirstAttribute(jint p1) { return call_method<"getFirstAttribute", jint>(p1); }
	jint getFirstNamespaceNode(jint p1, jboolean p2) { return call_method<"getFirstNamespaceNode", jint>(p1, p2); }
	jint getNextSibling(jint p1) { return call_method<"getNextSibling", jint>(p1); }
	jint getPreviousSibling(jint p1) { return call_method<"getPreviousSibling", jint>(p1); }
	jint getNextAttribute(jint p1) { return call_method<"getNextAttribute", jint>(p1); }
	jint getNextNamespaceNode(jint p1, jint p2, jboolean p3) { return call_method<"getNextNamespaceNode", jint>(p1, p2, p3); }
	jint getParent(jint p1) { return call_method<"getParent", jint>(p1); }
	jint getDocument() { return call_method<"getDocument", jint>(); }
	jint getOwnerDocument(jint p1) { return call_method<"getOwnerDocument", jint>(p1); }
	jint getDocumentRoot(jint p1) { return call_method<"getDocumentRoot", jint>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::utils::XMLString> getStringValue(jint p1) { return call_method<"getStringValue", jni::ref<com::sun::org::apache::xml::internal::utils::XMLString>>(p1); }
	jint getStringValueChunkCount(jint p1) { return call_method<"getStringValueChunkCount", jint>(p1); }
	jni::ref<jni::array<jchar>> getStringValueChunk(jint p1, jint p2, jni::ref<jni::array<jint>> p3) { return call_method<"getStringValueChunk", jni::ref<jni::array<jchar>>>(p1, p2, p3); }
	jint getExpandedTypeID(jint p1) { return call_method<"getExpandedTypeID", jint>(p1); }
	jint getExpandedTypeID(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"getExpandedTypeID", jint>(p1, p2, p3); }
	jni::ref<java::lang::String> getLocalNameFromExpandedNameID(jint p1) { return call_method<"getLocalNameFromExpandedNameID", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNamespaceFromExpandedNameID(jint p1) { return call_method<"getNamespaceFromExpandedNameID", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNodeName(jint p1) { return call_method<"getNodeName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNodeNameX(jint p1) { return call_method<"getNodeNameX", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getLocalName(jint p1) { return call_method<"getLocalName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getPrefix(jint p1) { return call_method<"getPrefix", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNamespaceURI(jint p1) { return call_method<"getNamespaceURI", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNodeValue(jint p1) { return call_method<"getNodeValue", jni::ref<java::lang::String>>(p1); }
	jshort getNodeType(jint p1) { return call_method<"getNodeType", jshort>(p1); }
	jshort getLevel(jint p1) { return call_method<"getLevel", jshort>(p1); }
	jboolean isSupported(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"isSupported", jboolean>(p1, p2); }
	jni::ref<java::lang::String> getDocumentBaseURI() { return call_method<"getDocumentBaseURI", jni::ref<java::lang::String>>(); }
	void setDocumentBaseURI(jni::ref<java::lang::String> p1) { return call_method<"setDocumentBaseURI", void>(p1); }
	jni::ref<java::lang::String> getDocumentSystemIdentifier(jint p1) { return call_method<"getDocumentSystemIdentifier", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getDocumentEncoding(jint p1) { return call_method<"getDocumentEncoding", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getDocumentStandalone(jint p1) { return call_method<"getDocumentStandalone", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getDocumentVersion(jint p1) { return call_method<"getDocumentVersion", jni::ref<java::lang::String>>(p1); }
	jboolean getDocumentAllDeclarationsProcessed() { return call_method<"getDocumentAllDeclarationsProcessed", jboolean>(); }
	jni::ref<java::lang::String> getDocumentTypeDeclarationSystemIdentifier() { return call_method<"getDocumentTypeDeclarationSystemIdentifier", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDocumentTypeDeclarationPublicIdentifier() { return call_method<"getDocumentTypeDeclarationPublicIdentifier", jni::ref<java::lang::String>>(); }
	jint getElementById(jni::ref<java::lang::String> p1) { return call_method<"getElementById", jint>(p1); }
	jni::ref<java::lang::String> getUnparsedEntityURI(jni::ref<java::lang::String> p1) { return call_method<"getUnparsedEntityURI", jni::ref<java::lang::String>>(p1); }
	jboolean supportsPreStripping() { return call_method<"supportsPreStripping", jboolean>(); }
	jboolean isNodeAfter(jint p1, jint p2) { return call_method<"isNodeAfter", jboolean>(p1, p2); }
	jboolean isCharacterElementContentWhitespace(jint p1) { return call_method<"isCharacterElementContentWhitespace", jboolean>(p1); }
	jboolean isDocumentAllDeclarationsProcessed(jint p1) { return call_method<"isDocumentAllDeclarationsProcessed", jboolean>(p1); }
	jboolean isAttributeSpecified(jint p1) { return call_method<"isAttributeSpecified", jboolean>(p1); }
	void dispatchCharactersEvents(jint p1, jni::ref<org::xml::sax::ContentHandler> p2, jboolean p3) { return call_method<"dispatchCharactersEvents", void>(p1, p2, p3); }
	void dispatchToEvents(jint p1, jni::ref<org::xml::sax::ContentHandler> p2) { return call_method<"dispatchToEvents", void>(p1, p2); }
	jni::ref<org::w3c::dom::Node> getNode(jint p1) { return call_method<"getNode", jni::ref<org::w3c::dom::Node>>(p1); }
	jboolean needsTwoThreads() { return call_method<"needsTwoThreads", jboolean>(); }
	jni::ref<org::xml::sax::ContentHandler> getContentHandler() { return call_method<"getContentHandler", jni::ref<org::xml::sax::ContentHandler>>(); }
	jni::ref<org::xml::sax::ext::LexicalHandler> getLexicalHandler() { return call_method<"getLexicalHandler", jni::ref<org::xml::sax::ext::LexicalHandler>>(); }
	jni::ref<org::xml::sax::EntityResolver> getEntityResolver() { return call_method<"getEntityResolver", jni::ref<org::xml::sax::EntityResolver>>(); }
	jni::ref<org::xml::sax::DTDHandler> getDTDHandler() { return call_method<"getDTDHandler", jni::ref<org::xml::sax::DTDHandler>>(); }
	jni::ref<org::xml::sax::ErrorHandler> getErrorHandler() { return call_method<"getErrorHandler", jni::ref<org::xml::sax::ErrorHandler>>(); }
	jni::ref<org::xml::sax::ext::DeclHandler> getDeclHandler() { return call_method<"getDeclHandler", jni::ref<org::xml::sax::ext::DeclHandler>>(); }
	void appendChild(jint p1, jboolean p2, jboolean p3) { return call_method<"appendChild", void>(p1, p2, p3); }
	void appendTextChild(jni::ref<java::lang::String> p1) { return call_method<"appendTextChild", void>(p1); }
	jni::ref<javax::xml::transform::SourceLocator> getSourceLocatorFor(jint p1) { return call_method<"getSourceLocatorFor", jni::ref<javax::xml::transform::SourceLocator>>(p1); }
	void documentRegistration() { return call_method<"documentRegistration", void>(); }
	void documentRelease() { return call_method<"documentRelease", void>(); }
	void migrateTo(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> p1) { return call_method<"migrateTo", void>(p1); }

protected:

	DTM(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTM
