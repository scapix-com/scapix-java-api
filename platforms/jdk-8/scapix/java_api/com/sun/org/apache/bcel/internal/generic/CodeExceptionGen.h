// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionTargeter.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_CODEEXCEPTIONGEN_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_CODEEXCEPTIONGEN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::generic { class CodeExceptionGen; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::generic::CodeExceptionGen>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/generic/CodeExceptionGen";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::bcel::internal::generic::InstructionTargeter, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_CODEEXCEPTIONGEN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_CODEEXCEPTIONGEN)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_CODEEXCEPTIONGEN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/CodeException.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/ObjectType.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::generic::CodeExceptionGen : public jni::object_base<"com/sun/org/apache/bcel/internal/generic/CodeExceptionGen",
	java::lang::Object,
	com::sun::org::apache::bcel::internal::generic::InstructionTargeter,
	java::lang::Cloneable>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::generic::CodeExceptionGen> new_object(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p3, jni::ref<com::sun::org::apache::bcel::internal::generic::ObjectType> p4) { return base_::new_object(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean containsTarget(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"containsTarget", jboolean>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::ObjectType> getCatchType() { return call_method<"getCatchType", jni::ref<com::sun::org::apache::bcel::internal::generic::ObjectType>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::CodeException> getCodeException(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1) { return call_method<"getCodeException", jni::ref<com::sun::org::apache::bcel::internal::classfile::CodeException>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getEndPC() { return call_method<"getEndPC", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getHandlerPC() { return call_method<"getHandlerPC", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getStartPC() { return call_method<"getStartPC", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	void setCatchType(jni::ref<com::sun::org::apache::bcel::internal::generic::ObjectType> p1) { return call_method<"setCatchType", void>(p1); }
	void setEndPC(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"setEndPC", void>(p1); }
	void setHandlerPC(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"setHandlerPC", void>(p1); }
	void setStartPC(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"setStartPC", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void updateTarget(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2) { return call_method<"updateTarget", void>(p1, p2); }

protected:

	CodeExceptionGen(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_CODEEXCEPTIONGEN
