// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/FieldGenOrMethodGen.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_FIELDGEN_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_FIELDGEN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::generic { class FieldGen; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::generic::FieldGen>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/generic/FieldGen";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::bcel::internal::generic::FieldGenOrMethodGen>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_FIELDGEN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_FIELDGEN)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_FIELDGEN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Field.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/FieldObserver.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Type.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/util/BCELComparator.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::generic::FieldGen : public jni::object_base<"com/sun/org/apache/bcel/internal/generic/FieldGen",
	com::sun::org::apache::bcel::internal::generic::FieldGenOrMethodGen>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator> getComparator() { return call_static_method<"getComparator", jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator>>(); }
	static void setComparator(jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator> p1) { return call_static_method<"setComparator", void>(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::FieldGen> new_object(jni::ref<com::sun::org::apache::bcel::internal::classfile::Field> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::FieldGen> new_object(jint p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p4) { return base_::new_object(p1, p2, p3, p4); }
	void addObserver(jni::ref<com::sun::org::apache::bcel::internal::generic::FieldObserver> p1) { return call_method<"addObserver", void>(p1); }
	void cancelInitValue() { return call_method<"cancelInitValue", void>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::FieldGen> copy(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1) { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::generic::FieldGen>>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Field> getField() { return call_method<"getField", jni::ref<com::sun::org::apache::bcel::internal::classfile::Field>>(); }
	jni::ref<java::lang::String> getInitValue() { return call_method<"getInitValue", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSignature() { return call_method<"getSignature", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void removeObserver(jni::ref<com::sun::org::apache::bcel::internal::generic::FieldObserver> p1) { return call_method<"removeObserver", void>(p1); }
	void setInitValue(jboolean p1) { return call_method<"setInitValue", void>(p1); }
	void setInitValue(jbyte p1) { return call_method<"setInitValue", void>(p1); }
	void setInitValue(jchar p1) { return call_method<"setInitValue", void>(p1); }
	void setInitValue(jdouble p1) { return call_method<"setInitValue", void>(p1); }
	void setInitValue(jfloat p1) { return call_method<"setInitValue", void>(p1); }
	void setInitValue(jint p1) { return call_method<"setInitValue", void>(p1); }
	void setInitValue(jlong p1) { return call_method<"setInitValue", void>(p1); }
	void setInitValue(jshort p1) { return call_method<"setInitValue", void>(p1); }
	void setInitValue(jni::ref<java::lang::String> p1) { return call_method<"setInitValue", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void update() { return call_method<"update", void>(); }

protected:

	FieldGen(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_FIELDGEN
