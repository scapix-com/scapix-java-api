// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_VARIABLESTACK_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_VARIABLESTACK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xpath::internal { class VariableStack; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xpath::internal::VariableStack>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xpath/internal/VariableStack";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_VARIABLESTACK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_VARIABLESTACK)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_VARIABLESTACK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/QName.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/XPathContext.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/objects/XObject.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xpath::internal::VariableStack : public jni::object_base<"com/sun/org/apache/xpath/internal/VariableStack",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jint CLEARLIMITATION() { return get_static_field<"CLEARLIMITATION", jint>(); }

	static jni::ref<com::sun::org::apache::xpath::internal::VariableStack> new_object() { return base_::new_object(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> elementAt(jint p1) { return call_method<"elementAt", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1); }
	jint size() { return call_method<"size", jint>(); }
	void reset() { return call_method<"reset", void>(); }
	void setStackFrame(jint p1) { return call_method<"setStackFrame", void>(p1); }
	jint getStackFrame() { return call_method<"getStackFrame", jint>(); }
	jint link(jint p1) { return call_method<"link", jint>(p1); }
	void unlink() { return call_method<"unlink", void>(); }
	void unlink(jint p1) { return call_method<"unlink", void>(p1); }
	void setLocalVariable(jint p1, jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> p2) { return call_method<"setLocalVariable", void>(p1, p2); }
	void setLocalVariable(jint p1, jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> p2, jint p3) { return call_method<"setLocalVariable", void>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> getLocalVariable(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2) { return call_method<"getLocalVariable", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> getLocalVariable(jint p1, jint p2) { return call_method<"getLocalVariable", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> getLocalVariable(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2, jboolean p3) { return call_method<"getLocalVariable", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2, p3); }
	jboolean isLocalSet(jint p1) { return call_method<"isLocalSet", jboolean>(p1); }
	void clearLocalSlots(jint p1, jint p2) { return call_method<"clearLocalSlots", void>(p1, p2); }
	void setGlobalVariable(jint p1, jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> p2) { return call_method<"setGlobalVariable", void>(p1, p2); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> getGlobalVariable(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2) { return call_method<"getGlobalVariable", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> getGlobalVariable(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2, jboolean p3) { return call_method<"getGlobalVariable", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> getVariableOrParam(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jni::ref<com::sun::org::apache::xml::internal::utils::QName> p2) { return call_method<"getVariableOrParam", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2); }

protected:

	VariableStack(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_VARIABLESTACK
