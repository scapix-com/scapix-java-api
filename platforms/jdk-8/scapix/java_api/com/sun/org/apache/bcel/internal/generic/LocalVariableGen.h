// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionTargeter.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/NamedAndTyped.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_LOCALVARIABLEGEN_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_LOCALVARIABLEGEN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::generic { class LocalVariableGen; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::generic::LocalVariableGen>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/generic/LocalVariableGen";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::bcel::internal::generic::InstructionTargeter, scapix::java_api::com::sun::org::apache::bcel::internal::generic::NamedAndTyped, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_LOCALVARIABLEGEN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_LOCALVARIABLEGEN)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_LOCALVARIABLEGEN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/LocalVariable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Type.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::generic::LocalVariableGen : public jni::object_base<"com/sun/org/apache/bcel/internal/generic/LocalVariableGen",
	java::lang::Object,
	com::sun::org::apache::bcel::internal::generic::InstructionTargeter,
	com::sun::org::apache::bcel::internal::generic::NamedAndTyped,
	java::lang::Cloneable>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> new_object(jint p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p3, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p4, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> new_object(jint p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p3, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p4, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p5, jint p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean containsTarget(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"containsTarget", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getEnd() { return call_method<"getEnd", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	jint getIndex() { return call_method<"getIndex", jint>(); }
	jboolean getLiveToEnd() { return call_method<"getLiveToEnd", jboolean>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariable> getLocalVariable(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1) { return call_method<"getLocalVariable", jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariable>>(p1); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getOrigIndex() { return call_method<"getOrigIndex", jint>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getStart() { return call_method<"getStart", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Type> getType() { return call_method<"getType", jni::ref<com::sun::org::apache::bcel::internal::generic::Type>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void setEnd(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"setEnd", void>(p1); }
	void setIndex(jint p1) { return call_method<"setIndex", void>(p1); }
	void setLiveToEnd(jboolean p1) { return call_method<"setLiveToEnd", void>(p1); }
	void setName(jni::ref<java::lang::String> p1) { return call_method<"setName", void>(p1); }
	void setStart(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"setStart", void>(p1); }
	void setType(jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p1) { return call_method<"setType", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void updateTarget(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2) { return call_method<"updateTarget", void>(p1, p2); }

protected:

	LocalVariableGen(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_LOCALVARIABLEGEN
