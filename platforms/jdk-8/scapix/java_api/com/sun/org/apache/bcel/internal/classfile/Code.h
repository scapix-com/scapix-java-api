// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Attribute.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CODE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class Code; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Code>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/Code";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Attribute>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CODE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/CodeException.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantPool.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/LineNumberTable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/LocalVariableTable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Visitor.h>
#include <scapix/java_api/java/io/DataOutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::Code : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/Code",
	com::sun::org::apache::bcel::internal::classfile::Attribute>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::classfile::Code> new_object(jni::ref<com::sun::org::apache::bcel::internal::classfile::Code> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::Code> new_object(jint p1, jint p2, jint p3, jint p4, jni::ref<jni::array<jbyte>> p5, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::CodeException>> p6, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> p7, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	void accept(jni::ref<com::sun::org::apache::bcel::internal::classfile::Visitor> p1) { return call_method<"accept", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute> copy(jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p1) { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute>>(p1); }
	void dump(jni::ref<java::io::DataOutputStream> p1) { return call_method<"dump", void>(p1); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> getAttributes() { return call_method<"getAttributes", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>>>(); }
	jni::ref<jni::array<jbyte>> getCode() { return call_method<"getCode", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::CodeException>> getExceptionTable() { return call_method<"getExceptionTable", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::CodeException>>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::LineNumberTable> getLineNumberTable() { return call_method<"getLineNumberTable", jni::ref<com::sun::org::apache::bcel::internal::classfile::LineNumberTable>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariableTable> getLocalVariableTable() { return call_method<"getLocalVariableTable", jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariableTable>>(); }
	jint getMaxLocals() { return call_method<"getMaxLocals", jint>(); }
	jint getMaxStack() { return call_method<"getMaxStack", jint>(); }
	void setAttributes(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> p1) { return call_method<"setAttributes", void>(p1); }
	void setCode(jni::ref<jni::array<jbyte>> p1) { return call_method<"setCode", void>(p1); }
	void setExceptionTable(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::CodeException>> p1) { return call_method<"setExceptionTable", void>(p1); }
	void setMaxLocals(jint p1) { return call_method<"setMaxLocals", void>(p1); }
	void setMaxStack(jint p1) { return call_method<"setMaxStack", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString(jboolean p1) { return call_method<"toString", jni::ref<java::lang::String>>(p1); }

protected:

	Code(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CODE
