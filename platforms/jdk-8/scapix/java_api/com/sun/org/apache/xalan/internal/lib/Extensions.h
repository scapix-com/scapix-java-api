// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXTENSIONS_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXTENSIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::lib { class Extensions; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::lib::Extensions>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/lib/Extensions";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXTENSIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXTENSIONS)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXTENSIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xalan/internal/extensions/ExpressionContext.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/NodeSet.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/objects/XObject.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::lib::Extensions : public jni::object_base<"com/sun/org/apache/xalan/internal/lib/Extensions",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::org::apache::xpath::internal::NodeSet> nodeset(jni::ref<com::sun::org::apache::xalan::internal::extensions::ExpressionContext> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"nodeset", jni::ref<com::sun::org::apache::xpath::internal::NodeSet>>(p1, p2); }
	static jni::ref<org::w3c::dom::NodeList> intersection(jni::ref<org::w3c::dom::NodeList> p1, jni::ref<org::w3c::dom::NodeList> p2) { return call_static_method<"intersection", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	static jni::ref<org::w3c::dom::NodeList> difference(jni::ref<org::w3c::dom::NodeList> p1, jni::ref<org::w3c::dom::NodeList> p2) { return call_static_method<"difference", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	static jni::ref<org::w3c::dom::NodeList> distinct(jni::ref<org::w3c::dom::NodeList> p1) { return call_static_method<"distinct", jni::ref<org::w3c::dom::NodeList>>(p1); }
	static jboolean hasSameNodes(jni::ref<org::w3c::dom::NodeList> p1, jni::ref<org::w3c::dom::NodeList> p2) { return call_static_method<"hasSameNodes", jboolean>(p1, p2); }
	static jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> evaluate(jni::ref<com::sun::org::apache::xalan::internal::extensions::ExpressionContext> p1, jni::ref<java::lang::String> p2) { return call_static_method<"evaluate", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2); }
	static jni::ref<org::w3c::dom::NodeList> tokenize(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"tokenize", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	static jni::ref<org::w3c::dom::NodeList> tokenize(jni::ref<java::lang::String> p1) { return call_static_method<"tokenize", jni::ref<org::w3c::dom::NodeList>>(p1); }

protected:

	Extensions(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXTENSIONS
