// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xalan/internal/lib/ExsltBase.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTSTRINGS_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTSTRINGS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::lib { class ExsltStrings; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::lib::ExsltStrings>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/lib/ExsltStrings";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xalan::internal::lib::ExsltBase>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTSTRINGS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTSTRINGS)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTSTRINGS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::lib::ExsltStrings : public jni::object_base<"com/sun/org/apache/xalan/internal/lib/ExsltStrings",
	com::sun::org::apache::xalan::internal::lib::ExsltBase>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::lib::ExsltStrings> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> align(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"align", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> align(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"align", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> concat(jni::ref<org::w3c::dom::NodeList> p1) { return call_static_method<"concat", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> padding(jdouble p1, jni::ref<java::lang::String> p2) { return call_static_method<"padding", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> padding(jdouble p1) { return call_static_method<"padding", jni::ref<java::lang::String>>(p1); }
	static jni::ref<org::w3c::dom::NodeList> split(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"split", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	static jni::ref<org::w3c::dom::NodeList> split(jni::ref<java::lang::String> p1) { return call_static_method<"split", jni::ref<org::w3c::dom::NodeList>>(p1); }
	static jni::ref<org::w3c::dom::NodeList> tokenize(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"tokenize", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	static jni::ref<org::w3c::dom::NodeList> tokenize(jni::ref<java::lang::String> p1) { return call_static_method<"tokenize", jni::ref<org::w3c::dom::NodeList>>(p1); }

protected:

	ExsltStrings(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTSTRINGS
