// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/ToStream.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOHTMLSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOHTMLSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serializer { class ToHTMLStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serializer::ToHTMLStream>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serializer/ToHTMLStream";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xml::internal::serializer::ToStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOHTMLSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOHTMLSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOHTMLSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/ElemDesc.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serializer::ToHTMLStream : public jni::object_base<"com/sun/org/apache/xml/internal/serializer/ToHTMLStream",
	com::sun::org::apache::xml::internal::serializer::ToStream>
{
public:

	void setSpecialEscapeURLs(jboolean p1) { return call_method<"setSpecialEscapeURLs", void>(p1); }
	void setOmitMetaTag(jboolean p1) { return call_method<"setOmitMetaTag", void>(p1); }
	void setOutputFormat(jni::ref<java::util::Properties> p1) { return call_method<"setOutputFormat", void>(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::serializer::ElemDesc> getElemDesc(jni::ref<java::lang::String> p1) { return call_static_method<"getElemDesc", jni::ref<com::sun::org::apache::xml::internal::serializer::ElemDesc>>(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::serializer::ToHTMLStream> new_object() { return base_::new_object(); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void writeAttrURI(jni::ref<java::io::Writer> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"writeAttrURI", void>(p1, p2, p3); }
	void writeAttrString(jni::ref<java::io::Writer> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"writeAttrString", void>(p1, p2, p3); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void cdata(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"cdata", void>(p1, p2, p3); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void entityReference(jni::ref<java::lang::String> p1) { return call_method<"entityReference", void>(p1); }
	void endElement(jni::ref<java::lang::String> p1) { return call_method<"endElement", void>(p1); }
	void processAttributes(jni::ref<java::io::Writer> p1, jint p2) { return call_method<"processAttributes", void>(p1, p2); }
	void namespaceAfterStartElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"namespaceAfterStartElement", void>(p1, p2); }
	void startDTD(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startDTD", void>(p1, p2, p3); }
	void endDTD() { return call_method<"endDTD", void>(); }
	void attributeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"attributeDecl", void>(p1, p2, p3, p4, p5); }
	void elementDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"elementDecl", void>(p1, p2); }
	void internalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"internalEntityDecl", void>(p1, p2); }
	void externalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"externalEntityDecl", void>(p1, p2, p3); }
	void addUniqueAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"addUniqueAttribute", void>(p1, p2, p3); }
	void comment(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"comment", void>(p1, p2, p3); }
	jboolean reset() { return call_method<"reset", jboolean>(); }

protected:

	ToHTMLStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOHTMLSTREAM
