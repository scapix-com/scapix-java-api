// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKERFACTORY_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKERFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xpath::internal::axes { class WalkerFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xpath::internal::axes::WalkerFactory>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xpath/internal/axes/WalkerFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKERFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKERFACTORY)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKERFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMIterator.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/compiler/Compiler.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xpath::internal::axes::WalkerFactory : public jni::object_base<"com/sun/org/apache/xpath/internal/axes/WalkerFactory",
	java::lang::Object>
{
public:

	static jint BITS_COUNT() { return get_static_field<"BITS_COUNT", jint>(); }
	static jint BITS_RESERVED() { return get_static_field<"BITS_RESERVED", jint>(); }
	static jint BIT_PREDICATE() { return get_static_field<"BIT_PREDICATE", jint>(); }
	static jint BIT_ANCESTOR() { return get_static_field<"BIT_ANCESTOR", jint>(); }
	static jint BIT_ANCESTOR_OR_SELF() { return get_static_field<"BIT_ANCESTOR_OR_SELF", jint>(); }
	static jint BIT_ATTRIBUTE() { return get_static_field<"BIT_ATTRIBUTE", jint>(); }
	static jint BIT_CHILD() { return get_static_field<"BIT_CHILD", jint>(); }
	static jint BIT_DESCENDANT() { return get_static_field<"BIT_DESCENDANT", jint>(); }
	static jint BIT_DESCENDANT_OR_SELF() { return get_static_field<"BIT_DESCENDANT_OR_SELF", jint>(); }
	static jint BIT_FOLLOWING() { return get_static_field<"BIT_FOLLOWING", jint>(); }
	static jint BIT_FOLLOWING_SIBLING() { return get_static_field<"BIT_FOLLOWING_SIBLING", jint>(); }
	static jint BIT_NAMESPACE() { return get_static_field<"BIT_NAMESPACE", jint>(); }
	static jint BIT_PARENT() { return get_static_field<"BIT_PARENT", jint>(); }
	static jint BIT_PRECEDING() { return get_static_field<"BIT_PRECEDING", jint>(); }
	static jint BIT_PRECEDING_SIBLING() { return get_static_field<"BIT_PRECEDING_SIBLING", jint>(); }
	static jint BIT_SELF() { return get_static_field<"BIT_SELF", jint>(); }
	static jint BIT_FILTER() { return get_static_field<"BIT_FILTER", jint>(); }
	static jint BIT_ROOT() { return get_static_field<"BIT_ROOT", jint>(); }
	static jint BITMASK_TRAVERSES_OUTSIDE_SUBTREE() { return get_static_field<"BITMASK_TRAVERSES_OUTSIDE_SUBTREE", jint>(); }
	static jint BIT_BACKWARDS_SELF() { return get_static_field<"BIT_BACKWARDS_SELF", jint>(); }
	static jint BIT_ANY_DESCENDANT_FROM_ROOT() { return get_static_field<"BIT_ANY_DESCENDANT_FROM_ROOT", jint>(); }
	static jint BIT_NODETEST_ANY() { return get_static_field<"BIT_NODETEST_ANY", jint>(); }
	static jint BIT_MATCH_PATTERN() { return get_static_field<"BIT_MATCH_PATTERN", jint>(); }

	static jni::ref<com::sun::org::apache::xpath::internal::axes::WalkerFactory> new_object() { return base_::new_object(); }
	static jboolean isSet(jint p1, jint p2) { return call_static_method<"isSet", jboolean>(p1, p2); }
	static void diagnoseIterator(jni::ref<java::lang::String> p1, jint p2, jni::ref<com::sun::org::apache::xpath::internal::compiler::Compiler> p3) { return call_static_method<"diagnoseIterator", void>(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> newDTMIterator(jni::ref<com::sun::org::apache::xpath::internal::compiler::Compiler> p1, jint p2, jboolean p3) { return call_static_method<"newDTMIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator>>(p1, p2, p3); }
	static jint getAxisFromStep(jni::ref<com::sun::org::apache::xpath::internal::compiler::Compiler> p1, jint p2) { return call_static_method<"getAxisFromStep", jint>(p1, p2); }
	static jint getAnalysisBitFromAxes(jint p1) { return call_static_method<"getAnalysisBitFromAxes", jint>(p1); }
	static jboolean mightBeProximate(jni::ref<com::sun::org::apache::xpath::internal::compiler::Compiler> p1, jint p2, jint p3) { return call_static_method<"mightBeProximate", jboolean>(p1, p2, p3); }
	static jboolean isDownwardAxisOfMany(jint p1) { return call_static_method<"isDownwardAxisOfMany", jboolean>(p1); }
	static jni::ref<java::lang::String> getAnalysisString(jint p1) { return call_static_method<"getAnalysisString", jni::ref<java::lang::String>>(p1); }
	static jboolean hasPredicate(jint p1) { return call_static_method<"hasPredicate", jboolean>(p1); }
	static jboolean isWild(jint p1) { return call_static_method<"isWild", jboolean>(p1); }
	static jboolean walksAncestors(jint p1) { return call_static_method<"walksAncestors", jboolean>(p1); }
	static jboolean walksAttributes(jint p1) { return call_static_method<"walksAttributes", jboolean>(p1); }
	static jboolean walksNamespaces(jint p1) { return call_static_method<"walksNamespaces", jboolean>(p1); }
	static jboolean walksChildren(jint p1) { return call_static_method<"walksChildren", jboolean>(p1); }
	static jboolean walksDescendants(jint p1) { return call_static_method<"walksDescendants", jboolean>(p1); }
	static jboolean walksSubtree(jint p1) { return call_static_method<"walksSubtree", jboolean>(p1); }
	static jboolean walksSubtreeOnlyMaybeAbsolute(jint p1) { return call_static_method<"walksSubtreeOnlyMaybeAbsolute", jboolean>(p1); }
	static jboolean walksSubtreeOnly(jint p1) { return call_static_method<"walksSubtreeOnly", jboolean>(p1); }
	static jboolean walksFilteredList(jint p1) { return call_static_method<"walksFilteredList", jboolean>(p1); }
	static jboolean walksSubtreeOnlyFromRootOrContext(jint p1) { return call_static_method<"walksSubtreeOnlyFromRootOrContext", jboolean>(p1); }
	static jboolean walksInDocOrder(jint p1) { return call_static_method<"walksInDocOrder", jboolean>(p1); }
	static jboolean walksFollowingOnlyMaybeAbsolute(jint p1) { return call_static_method<"walksFollowingOnlyMaybeAbsolute", jboolean>(p1); }
	static jboolean walksUp(jint p1) { return call_static_method<"walksUp", jboolean>(p1); }
	static jboolean walksSideways(jint p1) { return call_static_method<"walksSideways", jboolean>(p1); }
	static jboolean walksExtraNodes(jint p1) { return call_static_method<"walksExtraNodes", jboolean>(p1); }
	static jboolean walksExtraNodesOnly(jint p1) { return call_static_method<"walksExtraNodesOnly", jboolean>(p1); }
	static jboolean isAbsolute(jint p1) { return call_static_method<"isAbsolute", jboolean>(p1); }
	static jboolean walksChildrenOnly(jint p1) { return call_static_method<"walksChildrenOnly", jboolean>(p1); }
	static jboolean walksChildrenAndExtraAndSelfOnly(jint p1) { return call_static_method<"walksChildrenAndExtraAndSelfOnly", jboolean>(p1); }
	static jboolean walksDescendantsAndExtraAndSelfOnly(jint p1) { return call_static_method<"walksDescendantsAndExtraAndSelfOnly", jboolean>(p1); }
	static jboolean walksSelfOnly(jint p1) { return call_static_method<"walksSelfOnly", jboolean>(p1); }
	static jboolean walksUpOnly(jint p1) { return call_static_method<"walksUpOnly", jboolean>(p1); }
	static jboolean walksDownOnly(jint p1) { return call_static_method<"walksDownOnly", jboolean>(p1); }
	static jboolean walksDownExtraOnly(jint p1) { return call_static_method<"walksDownExtraOnly", jboolean>(p1); }
	static jboolean canSkipSubtrees(jint p1) { return call_static_method<"canSkipSubtrees", jboolean>(p1); }
	static jboolean canCrissCross(jint p1) { return call_static_method<"canCrissCross", jboolean>(p1); }
	static jboolean isNaturalDocOrder(jint p1) { return call_static_method<"isNaturalDocOrder", jboolean>(p1); }
	static jboolean isOneStep(jint p1) { return call_static_method<"isOneStep", jboolean>(p1); }
	static jint getStepCount(jint p1) { return call_static_method<"getStepCount", jint>(p1); }

protected:

	WalkerFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKERFACTORY
