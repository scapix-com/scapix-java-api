// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLComponent.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLEntityResolver.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYMANAGER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::impl { class XMLEntityManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::impl::XMLEntityManager>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/impl/XMLEntityManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xerces::internal::xni::parser::XMLComponent, scapix::java_api::com::sun::org::apache::xerces::internal::xni::parser::XMLEntityResolver>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYMANAGER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/PropertyManager.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/XMLEntityHandler.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/util/URI.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/utils/XMLLimitAnalyzer.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLResourceIdentifier.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLComponentManager.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLInputSource.h>
#include <scapix/java_api/com/sun/xml/internal/stream/Entity_ScannedEntity.h>
#include <scapix/java_api/com/sun/xml/internal/stream/StaxXMLInputSource.h>
#include <scapix/java_api/com/sun/xml/internal/stream/XMLEntityStorage.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/HttpURLConnection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::impl::XMLEntityManager : public jni::object_base<"com/sun/org/apache/xerces/internal/impl/XMLEntityManager",
	java::lang::Object,
	com::sun::org::apache::xerces::internal::xni::parser::XMLComponent,
	com::sun::org::apache::xerces::internal::xni::parser::XMLEntityResolver>
{
public:

	static jint DEFAULT_BUFFER_SIZE() { return get_static_field<"DEFAULT_BUFFER_SIZE", jint>(); }
	static jint DEFAULT_XMLDECL_BUFFER_SIZE() { return get_static_field<"DEFAULT_XMLDECL_BUFFER_SIZE", jint>(); }
	static jint DEFAULT_INTERNAL_BUFFER_SIZE() { return get_static_field<"DEFAULT_INTERNAL_BUFFER_SIZE", jint>(); }

	static jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityManager> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityManager> new_object(jni::ref<com::sun::org::apache::xerces::internal::impl::PropertyManager> p1) { return base_::new_object(p1); }
	void addInternalEntity(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"addInternalEntity", void>(p1, p2); }
	void addExternalEntity(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"addExternalEntity", void>(p1, p2, p3, p4); }
	void addUnparsedEntity(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"addUnparsedEntity", void>(p1, p2, p3, p4, p5); }
	jni::ref<com::sun::xml::internal::stream::XMLEntityStorage> getEntityStore() { return call_method<"getEntityStore", jni::ref<com::sun::xml::internal::stream::XMLEntityStorage>>(); }
	jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityScanner> getEntityScanner() { return call_method<"getEntityScanner", jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityScanner>>(); }
	void setScannerVersion(jshort p1) { return call_method<"setScannerVersion", void>(p1); }
	jni::ref<java::lang::String> setupCurrentEntity(jboolean p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLInputSource> p3, jboolean p4, jboolean p5) { return call_method<"setupCurrentEntity", jni::ref<java::lang::String>>(p1, p2, p3, p4, p5); }
	jboolean isExternalEntity(jni::ref<java::lang::String> p1) { return call_method<"isExternalEntity", jboolean>(p1); }
	jboolean isEntityDeclInExternalSubset(jni::ref<java::lang::String> p1) { return call_method<"isEntityDeclInExternalSubset", jboolean>(p1); }
	void setStandalone(jboolean p1) { return call_method<"setStandalone", void>(p1); }
	jboolean isStandalone() { return call_method<"isStandalone", jboolean>(); }
	jboolean isDeclaredEntity(jni::ref<java::lang::String> p1) { return call_method<"isDeclaredEntity", jboolean>(p1); }
	jboolean isUnparsedEntity(jni::ref<java::lang::String> p1) { return call_method<"isUnparsedEntity", jboolean>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> getCurrentResourceIdentifier() { return call_method<"getCurrentResourceIdentifier", jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier>>(); }
	void setEntityHandler(jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityHandler> p1) { return call_method<"setEntityHandler", void>(p1); }
	jni::ref<com::sun::xml::internal::stream::StaxXMLInputSource> resolveEntityAsPerStax(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p1) { return call_method<"resolveEntityAsPerStax", jni::ref<com::sun::xml::internal::stream::StaxXMLInputSource>>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLInputSource> resolveEntity(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p1) { return call_method<"resolveEntity", jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLInputSource>>(p1); }
	void startEntity(jboolean p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"startEntity", void>(p1, p2, p3); }
	void startDocumentEntity(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLInputSource> p1) { return call_method<"startDocumentEntity", void>(p1); }
	void startDTDEntity(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLInputSource> p1) { return call_method<"startDTDEntity", void>(p1); }
	void startExternalSubset() { return call_method<"startExternalSubset", void>(); }
	void endExternalSubset() { return call_method<"endExternalSubset", void>(); }
	void startEntity(jboolean p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLInputSource> p3, jboolean p4, jboolean p5) { return call_method<"startEntity", void>(p1, p2, p3, p4, p5); }
	jni::ref<com::sun::xml::internal::stream::Entity_ScannedEntity> getCurrentEntity() { return call_method<"getCurrentEntity", jni::ref<com::sun::xml::internal::stream::Entity_ScannedEntity>>(); }
	jni::ref<com::sun::xml::internal::stream::Entity_ScannedEntity> getTopLevelEntity() { return call_method<"getTopLevelEntity", jni::ref<com::sun::xml::internal::stream::Entity_ScannedEntity>>(); }
	void closeReaders() { return call_method<"closeReaders", void>(); }
	void endEntity() { return call_method<"endEntity", void>(); }
	void reset(jni::ref<com::sun::org::apache::xerces::internal::impl::PropertyManager> p1) { return call_method<"reset", void>(p1); }
	void reset(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLComponentManager> p1) { return call_method<"reset", void>(p1); }
	void reset() { return call_method<"reset", void>(); }
	jni::ref<jni::array<java::lang::String>> getRecognizedFeatures() { return call_method<"getRecognizedFeatures", jni::ref<jni::array<java::lang::String>>>(); }
	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	void setLimitAnalyzer(jni::ref<com::sun::org::apache::xerces::internal::utils::XMLLimitAnalyzer> p1) { return call_method<"setLimitAnalyzer", void>(p1); }
	jni::ref<jni::array<java::lang::String>> getRecognizedProperties() { return call_method<"getRecognizedProperties", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::lang::Boolean> getFeatureDefault(jni::ref<java::lang::String> p1) { return call_method<"getFeatureDefault", jni::ref<java::lang::Boolean>>(p1); }
	jni::ref<java::lang::Object> getPropertyDefault(jni::ref<java::lang::String> p1) { return call_method<"getPropertyDefault", jni::ref<java::lang::Object>>(p1); }
	static jni::ref<java::lang::String> expandSystemId(jni::ref<java::lang::String> p1) { return call_static_method<"expandSystemId", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::io::OutputStream> createOutputStream(jni::ref<java::lang::String> p1) { return call_static_method<"createOutputStream", jni::ref<java::io::OutputStream>>(p1); }
	static void absolutizeAgainstUserDir(jni::ref<com::sun::org::apache::xerces::internal::util::URI> p1) { return call_static_method<"absolutizeAgainstUserDir", void>(p1); }
	static jni::ref<java::lang::String> expandSystemId(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"expandSystemId", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> expandSystemId(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_static_method<"expandSystemId", jni::ref<java::lang::String>>(p1, p2, p3); }
	static void setInstanceFollowRedirects(jni::ref<java::net::HttpURLConnection> p1, jboolean p2) { return call_static_method<"setInstanceFollowRedirects", void>(p1, p2); }
	jni::ref<java::lang::String> getPublicId() { return call_method<"getPublicId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getExpandedSystemId() { return call_method<"getExpandedSystemId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getLiteralSystemId() { return call_method<"getLiteralSystemId", jni::ref<java::lang::String>>(); }
	jint getLineNumber() { return call_method<"getLineNumber", jint>(); }
	jint getColumnNumber() { return call_method<"getColumnNumber", jint>(); }
	void test() { return call_method<"test", void>(); }

protected:

	XMLEntityManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYMANAGER
