// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/SerializerBase.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSAXHANDLER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSAXHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serializer { class ToSAXHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serializer::ToSAXHandler>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serializer/ToSAXHandler";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xml::internal::serializer::SerializerBase>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSAXHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSAXHANDLER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSAXHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/TransformStateSetter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/SAXParseException.h>
#include <scapix/java_api/org/xml/sax/ext/LexicalHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serializer::ToSAXHandler : public jni::object_base<"com/sun/org/apache/xml/internal/serializer/ToSAXHandler",
	com::sun::org::apache::xml::internal::serializer::SerializerBase>
{
public:

	static jni::ref<com::sun::org::apache::xml::internal::serializer::ToSAXHandler> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xml::internal::serializer::ToSAXHandler> new_object(jni::ref<org::xml::sax::ContentHandler> p1, jni::ref<org::xml::sax::ext::LexicalHandler> p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::serializer::ToSAXHandler> new_object(jni::ref<org::xml::sax::ContentHandler> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	void startDTD(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startDTD", void>(p1, p2, p3); }
	void characters(jni::ref<java::lang::String> p1) { return call_method<"characters", void>(p1); }
	void comment(jni::ref<java::lang::String> p1) { return call_method<"comment", void>(p1); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void setLexHandler(jni::ref<org::xml::sax::ext::LexicalHandler> p1) { return call_method<"setLexHandler", void>(p1); }
	void setContentHandler(jni::ref<org::xml::sax::ContentHandler> p1) { return call_method<"setContentHandler", void>(p1); }
	void setCdataSectionElements(jni::ref<java::util::List> p1) { return call_method<"setCdataSectionElements", void>(p1); }
	void setShouldOutputNSAttr(jboolean p1) { return call_method<"setShouldOutputNSAttr", void>(p1); }
	void flushPending() { return call_method<"flushPending", void>(); }
	void setTransformState(jni::ref<com::sun::org::apache::xml::internal::serializer::TransformStateSetter> p1) { return call_method<"setTransformState", void>(p1); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startElement", void>(p1, p2, p3); }
	void startElement(jni::ref<java::lang::String> p1) { return call_method<"startElement", void>(p1); }
	void characters(jni::ref<org::w3c::dom::Node> p1) { return call_method<"characters", void>(p1); }
	void fatalError(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"fatalError", void>(p1); }
	void error(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"error", void>(p1); }
	void warning(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"warning", void>(p1); }
	jboolean reset() { return call_method<"reset", jboolean>(); }
	void addUniqueAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"addUniqueAttribute", void>(p1, p2, p3); }

protected:

	ToSAXHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSAXHANDLER
