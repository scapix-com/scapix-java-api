// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Iterator.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_NAMESPACESUPPORT_ITERATORPREFIXES_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_NAMESPACESUPPORT_ITERATORPREFIXES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::util { class NamespaceSupport_IteratorPrefixes; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::util::NamespaceSupport_IteratorPrefixes>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/util/NamespaceSupport$IteratorPrefixes";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::Iterator>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_NAMESPACESUPPORT_ITERATORPREFIXES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_NAMESPACESUPPORT_ITERATORPREFIXES)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_NAMESPACESUPPORT_ITERATORPREFIXES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/util/NamespaceSupport.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::util::NamespaceSupport_IteratorPrefixes : public jni::object_base<"com/sun/org/apache/xerces/internal/util/NamespaceSupport$IteratorPrefixes",
	java::lang::Object,
	java::util::Iterator>
{
public:

	static jni::ref<com::sun::org::apache::xerces::internal::util::NamespaceSupport_IteratorPrefixes> new_object(jni::ref<com::sun::org::apache::xerces::internal::util::NamespaceSupport> p1, jni::ref<jni::array<java::lang::String>> p2, jint p3) { return base_::new_object(p1, p2, p3); }
	jboolean hasNext() { return call_method<"hasNext", jboolean>(); }
	jni::ref<java::lang::String> next() { return call_method<"next", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void remove() { return call_method<"remove", void>(); }

protected:

	NamespaceSupport_IteratorPrefixes(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_NAMESPACESUPPORT_ITERATORPREFIXES
