// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/SerializationHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_EMPTYSERIALIZER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_EMPTYSERIALIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serializer { class EmptySerializer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serializer::EmptySerializer>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serializer/EmptySerializer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xml::internal::serializer::SerializationHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_EMPTYSERIALIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_EMPTYSERIALIZER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_EMPTYSERIALIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/DOMSerializer.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/NamespaceMappings.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/javax/xml/transform/SourceLocator.h>
#include <scapix/java_api/javax/xml/transform/Transformer.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#include <scapix/java_api/org/xml/sax/SAXParseException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serializer::EmptySerializer : public jni::object_base<"com/sun/org/apache/xml/internal/serializer/EmptySerializer",
	java::lang::Object,
	com::sun::org::apache::xml::internal::serializer::SerializationHandler>
{
public:

	static jni::ref<com::sun::org::apache::xml::internal::serializer::EmptySerializer> new_object() { return base_::new_object(); }
	jni::ref<org::xml::sax::ContentHandler> asContentHandler() { return call_method<"asContentHandler", jni::ref<org::xml::sax::ContentHandler>>(); }
	void setContentHandler(jni::ref<org::xml::sax::ContentHandler> p1) { return call_method<"setContentHandler", void>(p1); }
	void close() { return call_method<"close", void>(); }
	jni::ref<java::util::Properties> getOutputFormat() { return call_method<"getOutputFormat", jni::ref<java::util::Properties>>(); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	jni::ref<java::io::Writer> getWriter() { return call_method<"getWriter", jni::ref<java::io::Writer>>(); }
	jboolean reset() { return call_method<"reset", jboolean>(); }
	void serialize(jni::ref<org::w3c::dom::Node> p1) { return call_method<"serialize", void>(p1); }
	void setCdataSectionElements(jni::ref<java::util::List> p1) { return call_method<"setCdataSectionElements", void>(p1); }
	jboolean setEscaping(jboolean p1) { return call_method<"setEscaping", jboolean>(p1); }
	void setIndent(jboolean p1) { return call_method<"setIndent", void>(p1); }
	void setIndentAmount(jint p1) { return call_method<"setIndentAmount", void>(p1); }
	void setIsStandalone(jboolean p1) { return call_method<"setIsStandalone", void>(p1); }
	void setOutputFormat(jni::ref<java::util::Properties> p1) { return call_method<"setOutputFormat", void>(p1); }
	void setOutputStream(jni::ref<java::io::OutputStream> p1) { return call_method<"setOutputStream", void>(p1); }
	void setVersion(jni::ref<java::lang::String> p1) { return call_method<"setVersion", void>(p1); }
	void setWriter(jni::ref<java::io::Writer> p1) { return call_method<"setWriter", void>(p1); }
	void setTransformer(jni::ref<javax::xml::transform::Transformer> p1) { return call_method<"setTransformer", void>(p1); }
	jni::ref<javax::xml::transform::Transformer> getTransformer() { return call_method<"getTransformer", jni::ref<javax::xml::transform::Transformer>>(); }
	void flushPending() { return call_method<"flushPending", void>(); }
	void addAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jboolean p6) { return call_method<"addAttribute", void>(p1, p2, p3, p4, p5, p6); }
	void addAttributes(jni::ref<org::xml::sax::Attributes> p1) { return call_method<"addAttributes", void>(p1); }
	void addAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"addAttribute", void>(p1, p2); }
	void characters(jni::ref<java::lang::String> p1) { return call_method<"characters", void>(p1); }
	void endElement(jni::ref<java::lang::String> p1) { return call_method<"endElement", void>(p1); }
	void startDocument() { return call_method<"startDocument", void>(); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startElement", void>(p1, p2, p3); }
	void startElement(jni::ref<java::lang::String> p1) { return call_method<"startElement", void>(p1); }
	void namespaceAfterStartElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"namespaceAfterStartElement", void>(p1, p2); }
	jboolean startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"startPrefixMapping", jboolean>(p1, p2, p3); }
	void entityReference(jni::ref<java::lang::String> p1) { return call_method<"entityReference", void>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::serializer::NamespaceMappings> getNamespaceMappings() { return call_method<"getNamespaceMappings", jni::ref<com::sun::org::apache::xml::internal::serializer::NamespaceMappings>>(); }
	jni::ref<java::lang::String> getPrefix(jni::ref<java::lang::String> p1) { return call_method<"getPrefix", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNamespaceURI(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"getNamespaceURI", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getNamespaceURIFromPrefix(jni::ref<java::lang::String> p1) { return call_method<"getNamespaceURIFromPrefix", jni::ref<java::lang::String>>(p1); }
	void setDocumentLocator(jni::ref<org::xml::sax::Locator> p1) { return call_method<"setDocumentLocator", void>(p1); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"startPrefixMapping", void>(p1, p2); }
	void endPrefixMapping(jni::ref<java::lang::String> p1) { return call_method<"endPrefixMapping", void>(p1); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"ignorableWhitespace", void>(p1, p2, p3); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void skippedEntity(jni::ref<java::lang::String> p1) { return call_method<"skippedEntity", void>(p1); }
	void comment(jni::ref<java::lang::String> p1) { return call_method<"comment", void>(p1); }
	void startDTD(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startDTD", void>(p1, p2, p3); }
	void endDTD() { return call_method<"endDTD", void>(); }
	void startEntity(jni::ref<java::lang::String> p1) { return call_method<"startEntity", void>(p1); }
	void endEntity(jni::ref<java::lang::String> p1) { return call_method<"endEntity", void>(p1); }
	void startCDATA() { return call_method<"startCDATA", void>(); }
	void endCDATA() { return call_method<"endCDATA", void>(); }
	void comment(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"comment", void>(p1, p2, p3); }
	jni::ref<java::lang::String> getDoctypePublic() { return call_method<"getDoctypePublic", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDoctypeSystem() { return call_method<"getDoctypeSystem", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncoding() { return call_method<"getEncoding", jni::ref<java::lang::String>>(); }
	jboolean getIndent() { return call_method<"getIndent", jboolean>(); }
	jint getIndentAmount() { return call_method<"getIndentAmount", jint>(); }
	jni::ref<java::lang::String> getMediaType() { return call_method<"getMediaType", jni::ref<java::lang::String>>(); }
	jboolean getOmitXMLDeclaration() { return call_method<"getOmitXMLDeclaration", jboolean>(); }
	jni::ref<java::lang::String> getStandalone() { return call_method<"getStandalone", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }
	void setDoctype(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setDoctype", void>(p1, p2); }
	void setDoctypePublic(jni::ref<java::lang::String> p1) { return call_method<"setDoctypePublic", void>(p1); }
	void setDoctypeSystem(jni::ref<java::lang::String> p1) { return call_method<"setDoctypeSystem", void>(p1); }
	void setEncoding(jni::ref<java::lang::String> p1) { return call_method<"setEncoding", void>(p1); }
	void setMediaType(jni::ref<java::lang::String> p1) { return call_method<"setMediaType", void>(p1); }
	void setOmitXMLDeclaration(jboolean p1) { return call_method<"setOmitXMLDeclaration", void>(p1); }
	void setStandalone(jni::ref<java::lang::String> p1) { return call_method<"setStandalone", void>(p1); }
	void elementDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"elementDecl", void>(p1, p2); }
	void attributeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"attributeDecl", void>(p1, p2, p3, p4, p5); }
	void internalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"internalEntityDecl", void>(p1, p2); }
	void externalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"externalEntityDecl", void>(p1, p2, p3); }
	void warning(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"warning", void>(p1); }
	void error(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"error", void>(p1); }
	void fatalError(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"fatalError", void>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::serializer::DOMSerializer> asDOMSerializer() { return call_method<"asDOMSerializer", jni::ref<com::sun::org::apache::xml::internal::serializer::DOMSerializer>>(); }
	void setNamespaceMappings(jni::ref<com::sun::org::apache::xml::internal::serializer::NamespaceMappings> p1) { return call_method<"setNamespaceMappings", void>(p1); }
	void setSourceLocator(jni::ref<javax::xml::transform::SourceLocator> p1) { return call_method<"setSourceLocator", void>(p1); }
	void addUniqueAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"addUniqueAttribute", void>(p1, p2, p3); }
	void characters(jni::ref<org::w3c::dom::Node> p1) { return call_method<"characters", void>(p1); }
	void addXSLAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"addXSLAttribute", void>(p1, p2, p3); }
	void addAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"addAttribute", void>(p1, p2, p3, p4, p5); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }
	void setDTDEntityExpansion(jboolean p1) { return call_method<"setDTDEntityExpansion", void>(p1); }
	jni::ref<java::lang::String> getOutputProperty(jni::ref<java::lang::String> p1) { return call_method<"getOutputProperty", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getOutputPropertyDefault(jni::ref<java::lang::String> p1) { return call_method<"getOutputPropertyDefault", jni::ref<java::lang::String>>(p1); }
	void setOutputProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setOutputProperty", void>(p1, p2); }
	void setOutputPropertyDefault(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setOutputPropertyDefault", void>(p1, p2); }
	jni::ref<java::lang::Object> asDOM3Serializer() { return call_method<"asDOM3Serializer", jni::ref<java::lang::Object>>(); }

protected:

	EmptySerializer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_EMPTYSERIALIZER
