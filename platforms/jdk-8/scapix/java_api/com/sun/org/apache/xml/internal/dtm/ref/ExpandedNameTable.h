// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_EXPANDEDNAMETABLE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_EXPANDEDNAMETABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref { class ExpandedNameTable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref::ExpandedNameTable>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/dtm/ref/ExpandedNameTable";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_EXPANDEDNAMETABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_EXPANDEDNAMETABLE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_EXPANDEDNAMETABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/ref/ExtendedType.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::dtm::ref::ExpandedNameTable : public jni::object_base<"com/sun/org/apache/xml/internal/dtm/ref/ExpandedNameTable",
	java::lang::Object>
{
public:

	static jint ELEMENT() { return get_static_field<"ELEMENT", jint>(); }
	static jint ATTRIBUTE() { return get_static_field<"ATTRIBUTE", jint>(); }
	static jint TEXT() { return get_static_field<"TEXT", jint>(); }
	static jint CDATA_SECTION() { return get_static_field<"CDATA_SECTION", jint>(); }
	static jint ENTITY_REFERENCE() { return get_static_field<"ENTITY_REFERENCE", jint>(); }
	static jint ENTITY() { return get_static_field<"ENTITY", jint>(); }
	static jint PROCESSING_INSTRUCTION() { return get_static_field<"PROCESSING_INSTRUCTION", jint>(); }
	static jint COMMENT() { return get_static_field<"COMMENT", jint>(); }
	static jint DOCUMENT() { return get_static_field<"DOCUMENT", jint>(); }
	static jint DOCUMENT_TYPE() { return get_static_field<"DOCUMENT_TYPE", jint>(); }
	static jint DOCUMENT_FRAGMENT() { return get_static_field<"DOCUMENT_FRAGMENT", jint>(); }
	static jint NOTATION() { return get_static_field<"NOTATION", jint>(); }
	static jint NAMESPACE() { return get_static_field<"NAMESPACE", jint>(); }

	static jni::ref<com::sun::org::apache::xml::internal::dtm::ref::ExpandedNameTable> new_object() { return base_::new_object(); }
	jint getExpandedTypeID(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"getExpandedTypeID", jint>(p1, p2, p3); }
	jint getExpandedTypeID(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3, jboolean p4) { return call_method<"getExpandedTypeID", jint>(p1, p2, p3, p4); }
	jint getExpandedTypeID(jint p1) { return call_method<"getExpandedTypeID", jint>(p1); }
	jni::ref<java::lang::String> getLocalName(jint p1) { return call_method<"getLocalName", jni::ref<java::lang::String>>(p1); }
	jint getLocalNameID(jint p1) { return call_method<"getLocalNameID", jint>(p1); }
	jni::ref<java::lang::String> getNamespace(jint p1) { return call_method<"getNamespace", jni::ref<java::lang::String>>(p1); }
	jint getNamespaceID(jint p1) { return call_method<"getNamespaceID", jint>(p1); }
	jshort getType(jint p1) { return call_method<"getType", jshort>(p1); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jni::ref<jni::array<com::sun::org::apache::xml::internal::dtm::ref::ExtendedType>> getExtendedTypes() { return call_method<"getExtendedTypes", jni::ref<jni::array<com::sun::org::apache::xml::internal::dtm::ref::ExtendedType>>>(); }

protected:

	ExpandedNameTable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_EXPANDEDNAMETABLE
