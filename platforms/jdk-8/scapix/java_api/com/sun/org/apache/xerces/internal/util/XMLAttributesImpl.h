// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLAttributes.h>
#include <scapix/java_api/com/sun/xml/internal/stream/XMLBufferListener.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_XMLATTRIBUTESIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_XMLATTRIBUTESIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::util { class XMLAttributesImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::util::XMLAttributesImpl>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/util/XMLAttributesImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xerces::internal::xni::XMLAttributes, scapix::java_api::com::sun::xml::internal::stream::XMLBufferListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_XMLATTRIBUTESIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_XMLATTRIBUTESIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_XMLATTRIBUTESIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/Augmentations.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/QName.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLString.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::util::XMLAttributesImpl : public jni::object_base<"com/sun/org/apache/xerces/internal/util/XMLAttributesImpl",
	java::lang::Object,
	com::sun::org::apache::xerces::internal::xni::XMLAttributes,
	com::sun::xml::internal::stream::XMLBufferListener>
{
public:

	static jni::ref<com::sun::org::apache::xerces::internal::util::XMLAttributesImpl> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::XMLAttributesImpl> new_object(jint p1) { return base_::new_object(p1); }
	void setNamespaces(jboolean p1) { return call_method<"setNamespaces", void>(p1); }
	jint addAttribute(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"addAttribute", jint>(p1, p2, p3); }
	jint addAttribute(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p4) { return call_method<"addAttribute", jint>(p1, p2, p3, p4); }
	void removeAllAttributes() { return call_method<"removeAllAttributes", void>(); }
	void removeAttributeAt(jint p1) { return call_method<"removeAttributeAt", void>(p1); }
	void setName(jint p1, jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p2) { return call_method<"setName", void>(p1, p2); }
	void getName(jint p1, jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p2) { return call_method<"getName", void>(p1, p2); }
	void setType(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setType", void>(p1, p2); }
	void setValue(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setValue", void>(p1, p2); }
	void setValue(jint p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p3) { return call_method<"setValue", void>(p1, p2, p3); }
	void setNonNormalizedValue(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setNonNormalizedValue", void>(p1, p2); }
	jni::ref<java::lang::String> getNonNormalizedValue(jint p1) { return call_method<"getNonNormalizedValue", jni::ref<java::lang::String>>(p1); }
	void setSpecified(jint p1, jboolean p2) { return call_method<"setSpecified", void>(p1, p2); }
	jboolean isSpecified(jint p1) { return call_method<"isSpecified", jboolean>(p1); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<java::lang::String> getType(jint p1) { return call_method<"getType", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getType(jni::ref<java::lang::String> p1) { return call_method<"getType", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getValue(jint p1) { return call_method<"getValue", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getValue(jni::ref<java::lang::String> p1) { return call_method<"getValue", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getName(jint p1) { return call_method<"getName", jni::ref<java::lang::String>>(p1); }
	jint getIndex(jni::ref<java::lang::String> p1) { return call_method<"getIndex", jint>(p1); }
	jint getIndex(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getIndex", jint>(p1, p2); }
	jint getIndexByLocalName(jni::ref<java::lang::String> p1) { return call_method<"getIndexByLocalName", jint>(p1); }
	jni::ref<java::lang::String> getLocalName(jint p1) { return call_method<"getLocalName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getQName(jint p1) { return call_method<"getQName", jni::ref<java::lang::String>>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::QName> getQualifiedName(jint p1) { return call_method<"getQualifiedName", jni::ref<com::sun::org::apache::xerces::internal::xni::QName>>(p1); }
	jni::ref<java::lang::String> getType(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getType", jni::ref<java::lang::String>>(p1, p2); }
	jint getIndexFast(jni::ref<java::lang::String> p1) { return call_method<"getIndexFast", jint>(p1); }
	void addAttributeNS(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"addAttributeNS", void>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::QName> checkDuplicatesNS() { return call_method<"checkDuplicatesNS", jni::ref<com::sun::org::apache::xerces::internal::xni::QName>>(); }
	jint getIndexFast(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getIndexFast", jint>(p1, p2); }
	jni::ref<java::lang::String> getPrefix(jint p1) { return call_method<"getPrefix", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getURI(jint p1) { return call_method<"getURI", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getValue(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getValue", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> getAugmentations(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAugmentations", jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations>>(p1, p2); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> getAugmentations(jni::ref<java::lang::String> p1) { return call_method<"getAugmentations", jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations>>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> getAugmentations(jint p1) { return call_method<"getAugmentations", jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations>>(p1); }
	void setAugmentations(jint p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"setAugmentations", void>(p1, p2); }
	void setURI(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setURI", void>(p1, p2); }
	void refresh() { return call_method<"refresh", void>(); }
	void refresh(jint p1) { return call_method<"refresh", void>(p1); }

protected:

	XMLAttributesImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_XMLATTRIBUTESIMPL
