// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/FieldGenOrMethodGen.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_METHODGEN_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_METHODGEN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::generic { class MethodGen; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::generic::MethodGen>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/generic/MethodGen";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::bcel::internal::generic::FieldGenOrMethodGen>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_METHODGEN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_METHODGEN)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_METHODGEN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Attribute.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/LineNumberTable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/LocalVariableTable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/LocalVariableTypeTable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Method.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/AnnotationEntryGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/CodeExceptionGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionList.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/LineNumberGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/LocalVariableGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/MethodObserver.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/ObjectType.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Type.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/util/BCELComparator.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::generic::MethodGen : public jni::object_base<"com/sun/org/apache/bcel/internal/generic/MethodGen",
	com::sun::org::apache::bcel::internal::generic::FieldGenOrMethodGen>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator> getComparator() { return call_static_method<"getComparator", jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator>>(); }
	static jint getMaxStack(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p2, jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::CodeExceptionGen>> p3) { return call_static_method<"getMaxStack", jint>(p1, p2, p3); }
	static void setComparator(jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator> p1) { return call_static_method<"setComparator", void>(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::MethodGen> new_object(jint p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2, jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::Type>> p3, jni::ref<jni::array<java::lang::String>> p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::String> p6, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p7, jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::MethodGen> new_object(jni::ref<com::sun::org::apache::bcel::internal::classfile::Method> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p3) { return base_::new_object(p1, p2, p3); }
	void addAnnotationsAsAttribute(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1) { return call_method<"addAnnotationsAsAttribute", void>(p1); }
	void addCodeAttribute(jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute> p1) { return call_method<"addCodeAttribute", void>(p1); }
	void addException(jni::ref<java::lang::String> p1) { return call_method<"addException", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::CodeExceptionGen> addExceptionHandler(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p3, jni::ref<com::sun::org::apache::bcel::internal::generic::ObjectType> p4) { return call_method<"addExceptionHandler", jni::ref<com::sun::org::apache::bcel::internal::generic::CodeExceptionGen>>(p1, p2, p3, p4); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::LineNumberGen> addLineNumber(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jint p2) { return call_method<"addLineNumber", jni::ref<com::sun::org::apache::bcel::internal::generic::LineNumberGen>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> addLocalVariable(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p3, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p4) { return call_method<"addLocalVariable", jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>>(p1, p2, p3, p4); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> addLocalVariable(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2, jint p3, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p4, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p5) { return call_method<"addLocalVariable", jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>>(p1, p2, p3, p4, p5); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> addLocalVariable(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2, jint p3, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p4, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p5, jint p6) { return call_method<"addLocalVariable", jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>>(p1, p2, p3, p4, p5, p6); }
	void addObserver(jni::ref<com::sun::org::apache::bcel::internal::generic::MethodObserver> p1) { return call_method<"addObserver", void>(p1); }
	void addParameterAnnotation(jint p1, jni::ref<com::sun::org::apache::bcel::internal::generic::AnnotationEntryGen> p2) { return call_method<"addParameterAnnotation", void>(p1, p2); }
	void addParameterAnnotationsAsAttribute(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1) { return call_method<"addParameterAnnotationsAsAttribute", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::MethodGen> copy(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p2) { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::generic::MethodGen>>(p1, p2); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::util::List> getAnnotationsOnParameter(jint p1) { return call_method<"getAnnotationsOnParameter", jni::ref<java::util::List>>(p1); }
	jni::ref<java::lang::String> getArgumentName(jint p1) { return call_method<"getArgumentName", jni::ref<java::lang::String>>(p1); }
	jni::ref<jni::array<java::lang::String>> getArgumentNames() { return call_method<"getArgumentNames", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Type> getArgumentType(jint p1) { return call_method<"getArgumentType", jni::ref<com::sun::org::apache::bcel::internal::generic::Type>>(p1); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::Type>> getArgumentTypes() { return call_method<"getArgumentTypes", jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::Type>>>(); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> getCodeAttributes() { return call_method<"getCodeAttributes", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::CodeExceptionGen>> getExceptionHandlers() { return call_method<"getExceptionHandlers", jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::CodeExceptionGen>>>(); }
	jni::ref<jni::array<java::lang::String>> getExceptions() { return call_method<"getExceptions", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> getInstructionList() { return call_method<"getInstructionList", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::LineNumberGen>> getLineNumbers() { return call_method<"getLineNumbers", jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::LineNumberGen>>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::LineNumberTable> getLineNumberTable(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1) { return call_method<"getLineNumberTable", jni::ref<com::sun::org::apache::bcel::internal::classfile::LineNumberTable>>(p1); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>> getLocalVariables() { return call_method<"getLocalVariables", jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariableTable> getLocalVariableTable(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1) { return call_method<"getLocalVariableTable", jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariableTable>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariableTypeTable> getLocalVariableTypeTable() { return call_method<"getLocalVariableTypeTable", jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariableTypeTable>>(); }
	jint getMaxLocals() { return call_method<"getMaxLocals", jint>(); }
	jint getMaxStack() { return call_method<"getMaxStack", jint>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Method> getMethod() { return call_method<"getMethod", jni::ref<com::sun::org::apache::bcel::internal::classfile::Method>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Type> getReturnType() { return call_method<"getReturnType", jni::ref<com::sun::org::apache::bcel::internal::generic::Type>>(); }
	jni::ref<java::lang::String> getSignature() { return call_method<"getSignature", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void removeCodeAttribute(jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute> p1) { return call_method<"removeCodeAttribute", void>(p1); }
	void removeCodeAttributes() { return call_method<"removeCodeAttributes", void>(); }
	void removeException(jni::ref<java::lang::String> p1) { return call_method<"removeException", void>(p1); }
	void removeExceptionHandler(jni::ref<com::sun::org::apache::bcel::internal::generic::CodeExceptionGen> p1) { return call_method<"removeExceptionHandler", void>(p1); }
	void removeExceptionHandlers() { return call_method<"removeExceptionHandlers", void>(); }
	void removeExceptions() { return call_method<"removeExceptions", void>(); }
	void removeLineNumber(jni::ref<com::sun::org::apache::bcel::internal::generic::LineNumberGen> p1) { return call_method<"removeLineNumber", void>(p1); }
	void removeLineNumbers() { return call_method<"removeLineNumbers", void>(); }
	void removeLocalVariable(jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> p1) { return call_method<"removeLocalVariable", void>(p1); }
	void removeLocalVariables() { return call_method<"removeLocalVariables", void>(); }
	void removeLocalVariableTypeTable() { return call_method<"removeLocalVariableTypeTable", void>(); }
	void removeNOPs() { return call_method<"removeNOPs", void>(); }
	void removeObserver(jni::ref<com::sun::org::apache::bcel::internal::generic::MethodObserver> p1) { return call_method<"removeObserver", void>(p1); }
	void removeRuntimeAttributes(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> p1) { return call_method<"removeRuntimeAttributes", void>(p1); }
	void setArgumentName(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setArgumentName", void>(p1, p2); }
	void setArgumentNames(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"setArgumentNames", void>(p1); }
	void setArgumentType(jint p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2) { return call_method<"setArgumentType", void>(p1, p2); }
	void setArgumentTypes(jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::Type>> p1) { return call_method<"setArgumentTypes", void>(p1); }
	void setClassName(jni::ref<java::lang::String> p1) { return call_method<"setClassName", void>(p1); }
	void setInstructionList(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p1) { return call_method<"setInstructionList", void>(p1); }
	void setMaxLocals() { return call_method<"setMaxLocals", void>(); }
	void setMaxLocals(jint p1) { return call_method<"setMaxLocals", void>(p1); }
	void setMaxStack() { return call_method<"setMaxStack", void>(); }
	void setMaxStack(jint p1) { return call_method<"setMaxStack", void>(p1); }
	void setReturnType(jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p1) { return call_method<"setReturnType", void>(p1); }
	void stripAttributes(jboolean p1) { return call_method<"stripAttributes", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void update() { return call_method<"update", void>(); }

protected:

	MethodGen(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_METHODGEN
