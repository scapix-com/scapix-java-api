// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Constants.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_MODE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_MODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler { class Mode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::Mode>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/Mode";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::Constants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_MODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_MODE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_MODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionHandle.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/QName.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Stylesheet.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Template.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ClassGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodGenerator.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::org::apache::xalan::internal::xsltc::compiler::Mode : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/Mode",
	java::lang::Object,
	com::sun::org::apache::xalan::internal::xsltc::compiler::Constants>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Mode> new_object(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::String> functionName() { return call_method<"functionName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> functionName(jint p1, jint p2) { return call_method<"functionName", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> getStylesheet() { return call_method<"getStylesheet", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>>(); }
	void addTemplate(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Template> p1) { return call_method<"addTemplate", void>(p1); }
	void processPatterns(jni::ref<java::util::Map> p1) { return call_method<"processPatterns", void>(p1); }
	static void compileGetChildren(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2, jint p3) { return call_static_method<"compileGetChildren", void>(p1, p2, p3); }
	void compileApplyTemplates(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1) { return call_method<"compileApplyTemplates", void>(p1); }
	void compileApplyImports(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jint p2, jint p3) { return call_method<"compileApplyImports", void>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getTemplateInstructionHandle(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Template> p1) { return call_method<"getTemplateInstructionHandle", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1); }

protected:

	Mode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_MODE
