// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPTYPE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPTYPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class StackMapType; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::StackMapType>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/StackMapType";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPTYPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPTYPE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPTYPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantPool.h>
#include <scapix/java_api/java/io/DataOutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::StackMapType : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/StackMapType",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> EMPTY_ARRAY() { return get_static_field<"EMPTY_ARRAY", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>>>(); }

	static jni::ref<com::sun::org::apache::bcel::internal::classfile::StackMapType> new_object(jbyte p1, jint p2, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::StackMapType> copy() { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::classfile::StackMapType>>(); }
	void dump(jni::ref<java::io::DataOutputStream> p1) { return call_method<"dump", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> getConstantPool() { return call_method<"getConstantPool", jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool>>(); }
	jint getIndex() { return call_method<"getIndex", jint>(); }
	jbyte getType() { return call_method<"getType", jbyte>(); }
	jboolean hasIndex() { return call_method<"hasIndex", jboolean>(); }
	void setConstantPool(jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p1) { return call_method<"setConstantPool", void>(p1); }
	void setIndex(jint p1) { return call_method<"setIndex", void>(p1); }
	void setType(jbyte p1) { return call_method<"setType", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	StackMapType(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPTYPE
