// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/xml/transform/sax/SAXTransformerFactory.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_SMARTTRANSFORMERFACTORYIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_SMARTTRANSFORMERFACTORYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::trax { class SmartTransformerFactoryImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::trax::SmartTransformerFactoryImpl>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl";
	using base_classes = std::tuple<scapix::java_api::javax::xml::transform::sax::SAXTransformerFactory>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_SMARTTRANSFORMERFACTORYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_SMARTTRANSFORMERFACTORYIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_SMARTTRANSFORMERFACTORYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/transform/ErrorListener.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/transform/Templates.h>
#include <scapix/java_api/javax/xml/transform/Transformer.h>
#include <scapix/java_api/javax/xml/transform/URIResolver.h>
#include <scapix/java_api/javax/xml/transform/sax/TemplatesHandler.h>
#include <scapix/java_api/javax/xml/transform/sax/TransformerHandler.h>
#include <scapix/java_api/org/xml/sax/XMLFilter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::trax::SmartTransformerFactoryImpl : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl",
	javax::xml::transform::sax::SAXTransformerFactory>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::trax::SmartTransformerFactoryImpl> new_object() { return base_::new_object(); }
	void setErrorListener(jni::ref<javax::xml::transform::ErrorListener> p1) { return call_method<"setErrorListener", void>(p1); }
	jni::ref<javax::xml::transform::ErrorListener> getErrorListener() { return call_method<"getErrorListener", jni::ref<javax::xml::transform::ErrorListener>>(); }
	jni::ref<java::lang::Object> getAttribute(jni::ref<java::lang::String> p1) { return call_method<"getAttribute", jni::ref<java::lang::Object>>(p1); }
	void setAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setAttribute", void>(p1, p2); }
	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	jboolean getFeature(jni::ref<java::lang::String> p1) { return call_method<"getFeature", jboolean>(p1); }
	jni::ref<javax::xml::transform::URIResolver> getURIResolver() { return call_method<"getURIResolver", jni::ref<javax::xml::transform::URIResolver>>(); }
	void setURIResolver(jni::ref<javax::xml::transform::URIResolver> p1) { return call_method<"setURIResolver", void>(p1); }
	jni::ref<javax::xml::transform::Source> getAssociatedStylesheet(jni::ref<javax::xml::transform::Source> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"getAssociatedStylesheet", jni::ref<javax::xml::transform::Source>>(p1, p2, p3, p4); }
	jni::ref<javax::xml::transform::Transformer> newTransformer() { return call_method<"newTransformer", jni::ref<javax::xml::transform::Transformer>>(); }
	jni::ref<javax::xml::transform::Transformer> newTransformer(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTransformer", jni::ref<javax::xml::transform::Transformer>>(p1); }
	jni::ref<javax::xml::transform::Templates> newTemplates(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTemplates", jni::ref<javax::xml::transform::Templates>>(p1); }
	jni::ref<javax::xml::transform::sax::TemplatesHandler> newTemplatesHandler() { return call_method<"newTemplatesHandler", jni::ref<javax::xml::transform::sax::TemplatesHandler>>(); }
	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler() { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(); }
	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(p1); }
	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler(jni::ref<javax::xml::transform::Templates> p1) { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(p1); }
	jni::ref<org::xml::sax::XMLFilter> newXMLFilter(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newXMLFilter", jni::ref<org::xml::sax::XMLFilter>>(p1); }
	jni::ref<org::xml::sax::XMLFilter> newXMLFilter(jni::ref<javax::xml::transform::Templates> p1) { return call_method<"newXMLFilter", jni::ref<org::xml::sax::XMLFilter>>(p1); }

protected:

	SmartTransformerFactoryImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_SMARTTRANSFORMERFACTORYIMPL
