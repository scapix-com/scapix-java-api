// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xerces/internal/dom/DocumentImpl.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/dom/DeferredNode.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_DEFERREDDOCUMENTIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_DEFERREDDOCUMENTIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::dom { class DeferredDocumentImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::dom::DeferredDocumentImpl>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xerces::internal::dom::DocumentImpl, scapix::java_api::com::sun::org::apache::xerces::internal::dom::DeferredNode>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_DEFERREDDOCUMENTIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_DEFERREDDOCUMENTIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_DEFERREDDOCUMENTIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/DOMImplementation.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::dom::DeferredDocumentImpl : public jni::object_base<"com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl",
	com::sun::org::apache::xerces::internal::dom::DocumentImpl,
	com::sun::org::apache::xerces::internal::dom::DeferredNode>
{
public:

	static jni::ref<com::sun::org::apache::xerces::internal::dom::DeferredDocumentImpl> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xerces::internal::dom::DeferredDocumentImpl> new_object(jboolean p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xerces::internal::dom::DeferredDocumentImpl> new_object(jboolean p1, jboolean p2) { return base_::new_object(p1, p2); }
	jni::ref<org::w3c::dom::DOMImplementation> getImplementation() { return call_method<"getImplementation", jni::ref<org::w3c::dom::DOMImplementation>>(); }
	jint createDeferredDocument() { return call_method<"createDeferredDocument", jint>(); }
	jint createDeferredDocumentType(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"createDeferredDocumentType", jint>(p1, p2, p3); }
	void setInternalSubset(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setInternalSubset", void>(p1, p2); }
	jint createDeferredNotation(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"createDeferredNotation", jint>(p1, p2, p3, p4); }
	jint createDeferredEntity(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"createDeferredEntity", jint>(p1, p2, p3, p4, p5); }
	jni::ref<java::lang::String> getDeferredEntityBaseURI(jint p1) { return call_method<"getDeferredEntityBaseURI", jni::ref<java::lang::String>>(p1); }
	void setEntityInfo(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"setEntityInfo", void>(p1, p2, p3); }
	void setTypeInfo(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"setTypeInfo", void>(p1, p2); }
	void setInputEncoding(jint p1, jni::ref<java::lang::String> p2) { return call_method<"setInputEncoding", void>(p1, p2); }
	jint createDeferredEntityReference(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createDeferredEntityReference", jint>(p1, p2); }
	jint createDeferredElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3) { return call_method<"createDeferredElement", jint>(p1, p2, p3); }
	jint createDeferredElement(jni::ref<java::lang::String> p1) { return call_method<"createDeferredElement", jint>(p1); }
	jint createDeferredElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createDeferredElement", jint>(p1, p2); }
	jint setDeferredAttribute(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jboolean p5, jboolean p6, jni::ref<java::lang::Object> p7) { return call_method<"setDeferredAttribute", jint>(p1, p2, p3, p4, p5, p6, p7); }
	jint createDeferredAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"createDeferredAttribute", jint>(p1, p2, p3); }
	jint createDeferredAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jboolean p4) { return call_method<"createDeferredAttribute", jint>(p1, p2, p3, p4); }
	jint createDeferredElementDefinition(jni::ref<java::lang::String> p1) { return call_method<"createDeferredElementDefinition", jint>(p1); }
	jint createDeferredTextNode(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"createDeferredTextNode", jint>(p1, p2); }
	jint createDeferredCDATASection(jni::ref<java::lang::String> p1) { return call_method<"createDeferredCDATASection", jint>(p1); }
	jint createDeferredProcessingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createDeferredProcessingInstruction", jint>(p1, p2); }
	jint createDeferredComment(jni::ref<java::lang::String> p1) { return call_method<"createDeferredComment", jint>(p1); }
	jint cloneNode(jint p1, jboolean p2) { return call_method<"cloneNode", jint>(p1, p2); }
	void appendChild(jint p1, jint p2) { return call_method<"appendChild", void>(p1, p2); }
	jint setAttributeNode(jint p1, jint p2) { return call_method<"setAttributeNode", jint>(p1, p2); }
	void setIdAttributeNode(jint p1, jint p2) { return call_method<"setIdAttributeNode", void>(p1, p2); }
	void setIdAttribute(jint p1) { return call_method<"setIdAttribute", void>(p1); }
	jint insertBefore(jint p1, jint p2, jint p3) { return call_method<"insertBefore", jint>(p1, p2, p3); }
	void setAsLastChild(jint p1, jint p2) { return call_method<"setAsLastChild", void>(p1, p2); }
	jint getParentNode(jint p1) { return call_method<"getParentNode", jint>(p1); }
	jint getParentNode(jint p1, jboolean p2) { return call_method<"getParentNode", jint>(p1, p2); }
	jint getLastChild(jint p1) { return call_method<"getLastChild", jint>(p1); }
	jint getLastChild(jint p1, jboolean p2) { return call_method<"getLastChild", jint>(p1, p2); }
	jint getPrevSibling(jint p1) { return call_method<"getPrevSibling", jint>(p1); }
	jint getPrevSibling(jint p1, jboolean p2) { return call_method<"getPrevSibling", jint>(p1, p2); }
	jint getRealPrevSibling(jint p1) { return call_method<"getRealPrevSibling", jint>(p1); }
	jint getRealPrevSibling(jint p1, jboolean p2) { return call_method<"getRealPrevSibling", jint>(p1, p2); }
	jint lookupElementDefinition(jni::ref<java::lang::String> p1) { return call_method<"lookupElementDefinition", jint>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::dom::DeferredNode> getNodeObject(jint p1) { return call_method<"getNodeObject", jni::ref<com::sun::org::apache::xerces::internal::dom::DeferredNode>>(p1); }
	jni::ref<java::lang::String> getNodeName(jint p1) { return call_method<"getNodeName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNodeName(jint p1, jboolean p2) { return call_method<"getNodeName", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getNodeValueString(jint p1) { return call_method<"getNodeValueString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNodeValueString(jint p1, jboolean p2) { return call_method<"getNodeValueString", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getNodeValue(jint p1) { return call_method<"getNodeValue", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::Object> getTypeInfo(jint p1) { return call_method<"getTypeInfo", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::String> getNodeValue(jint p1, jboolean p2) { return call_method<"getNodeValue", jni::ref<java::lang::String>>(p1, p2); }
	jint getNodeExtra(jint p1) { return call_method<"getNodeExtra", jint>(p1); }
	jint getNodeExtra(jint p1, jboolean p2) { return call_method<"getNodeExtra", jint>(p1, p2); }
	jshort getNodeType(jint p1) { return call_method<"getNodeType", jshort>(p1); }
	jshort getNodeType(jint p1, jboolean p2) { return call_method<"getNodeType", jshort>(p1, p2); }
	jni::ref<java::lang::String> getAttribute(jint p1, jni::ref<java::lang::String> p2) { return call_method<"getAttribute", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getNodeURI(jint p1) { return call_method<"getNodeURI", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNodeURI(jint p1, jboolean p2) { return call_method<"getNodeURI", jni::ref<java::lang::String>>(p1, p2); }
	void putIdentifier(jni::ref<java::lang::String> p1, jint p2) { return call_method<"putIdentifier", void>(p1, p2); }
	void print() { return call_method<"print", void>(); }
	jint getNodeIndex() { return call_method<"getNodeIndex", jint>(); }

protected:

	DeferredDocumentImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_DEFERREDDOCUMENTIMPL
