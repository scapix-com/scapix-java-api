// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xerces/internal/dom/NodeImpl.h>
#include <scapix/java_api/org/w3c/dom/Attr.h>
#include <scapix/java_api/org/w3c/dom/TypeInfo.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_ATTRIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_ATTRIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::dom { class AttrImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::dom::AttrImpl>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/dom/AttrImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xerces::internal::dom::NodeImpl, scapix::java_api::org::w3c::dom::Attr, scapix::java_api::org::w3c::dom::TypeInfo>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_ATTRIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_ATTRIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_ATTRIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/Element.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::dom::AttrImpl : public jni::object_base<"com/sun/org/apache/xerces/internal/dom/AttrImpl",
	com::sun::org::apache::xerces::internal::dom::NodeImpl,
	org::w3c::dom::Attr,
	org::w3c::dom::TypeInfo>
{
public:

	void setIdAttribute(jboolean p1) { return call_method<"setIdAttribute", void>(p1); }
	jboolean isId() { return call_method<"isId", jboolean>(); }
	jni::ref<org::w3c::dom::Node> cloneNode(jboolean p1) { return call_method<"cloneNode", jni::ref<org::w3c::dom::Node>>(p1); }
	jshort getNodeType() { return call_method<"getNodeType", jshort>(); }
	jni::ref<java::lang::String> getNodeName() { return call_method<"getNodeName", jni::ref<java::lang::String>>(); }
	void setNodeValue(jni::ref<java::lang::String> p1) { return call_method<"setNodeValue", void>(p1); }
	jni::ref<java::lang::String> getTypeName() { return call_method<"getTypeName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getTypeNamespace() { return call_method<"getTypeNamespace", jni::ref<java::lang::String>>(); }
	jni::ref<org::w3c::dom::TypeInfo> getSchemaTypeInfo() { return call_method<"getSchemaTypeInfo", jni::ref<org::w3c::dom::TypeInfo>>(); }
	jni::ref<java::lang::String> getNodeValue() { return call_method<"getNodeValue", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void setValue(jni::ref<java::lang::String> p1) { return call_method<"setValue", void>(p1); }
	jni::ref<java::lang::String> getValue() { return call_method<"getValue", jni::ref<java::lang::String>>(); }
	jboolean getSpecified() { return call_method<"getSpecified", jboolean>(); }
	jni::ref<org::w3c::dom::Element> getElement() { return call_method<"getElement", jni::ref<org::w3c::dom::Element>>(); }
	jni::ref<org::w3c::dom::Element> getOwnerElement() { return call_method<"getOwnerElement", jni::ref<org::w3c::dom::Element>>(); }
	void normalize() { return call_method<"normalize", void>(); }
	void setSpecified(jboolean p1) { return call_method<"setSpecified", void>(p1); }
	void setType(jni::ref<java::lang::Object> p1) { return call_method<"setType", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean hasChildNodes() { return call_method<"hasChildNodes", jboolean>(); }
	jni::ref<org::w3c::dom::NodeList> getChildNodes() { return call_method<"getChildNodes", jni::ref<org::w3c::dom::NodeList>>(); }
	jni::ref<org::w3c::dom::Node> getFirstChild() { return call_method<"getFirstChild", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> getLastChild() { return call_method<"getLastChild", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> insertBefore(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"insertBefore", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<org::w3c::dom::Node> removeChild(jni::ref<org::w3c::dom::Node> p1) { return call_method<"removeChild", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::Node> replaceChild(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"replaceChild", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<org::w3c::dom::Node> item(jint p1) { return call_method<"item", jni::ref<org::w3c::dom::Node>>(p1); }
	jboolean isEqualNode(jni::ref<org::w3c::dom::Node> p1) { return call_method<"isEqualNode", jboolean>(p1); }
	jboolean isDerivedFrom(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jint p3) { return call_method<"isDerivedFrom", jboolean>(p1, p2, p3); }
	void setReadOnly(jboolean p1, jboolean p2) { return call_method<"setReadOnly", void>(p1, p2); }

protected:

	AttrImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_ATTRIMPL
