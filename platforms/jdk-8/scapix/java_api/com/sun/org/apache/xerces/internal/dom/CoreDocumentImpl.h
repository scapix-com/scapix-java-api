// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xerces/internal/dom/ParentNode.h>
#include <scapix/java_api/org/w3c/dom/Document.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_COREDOCUMENTIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_COREDOCUMENTIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::dom { class CoreDocumentImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::dom::CoreDocumentImpl>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xerces::internal::dom::ParentNode, scapix::java_api::org::w3c::dom::Document>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_COREDOCUMENTIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_COREDOCUMENTIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_COREDOCUMENTIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/dom/ElementDefinitionImpl.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/Attr.h>
#include <scapix/java_api/org/w3c/dom/CDATASection.h>
#include <scapix/java_api/org/w3c/dom/Comment.h>
#include <scapix/java_api/org/w3c/dom/DOMConfiguration.h>
#include <scapix/java_api/org/w3c/dom/DOMImplementation.h>
#include <scapix/java_api/org/w3c/dom/DocumentFragment.h>
#include <scapix/java_api/org/w3c/dom/DocumentType.h>
#include <scapix/java_api/org/w3c/dom/Element.h>
#include <scapix/java_api/org/w3c/dom/Entity.h>
#include <scapix/java_api/org/w3c/dom/EntityReference.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#include <scapix/java_api/org/w3c/dom/Notation.h>
#include <scapix/java_api/org/w3c/dom/ProcessingInstruction.h>
#include <scapix/java_api/org/w3c/dom/Text.h>
#include <scapix/java_api/org/w3c/dom/UserDataHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::dom::CoreDocumentImpl : public jni::object_base<"com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl",
	com::sun::org::apache::xerces::internal::dom::ParentNode,
	org::w3c::dom::Document>
{
public:

	static jni::ref<com::sun::org::apache::xerces::internal::dom::CoreDocumentImpl> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xerces::internal::dom::CoreDocumentImpl> new_object(jboolean p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xerces::internal::dom::CoreDocumentImpl> new_object(jni::ref<org::w3c::dom::DocumentType> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xerces::internal::dom::CoreDocumentImpl> new_object(jni::ref<org::w3c::dom::DocumentType> p1, jboolean p2) { return base_::new_object(p1, p2); }
	jni::ref<org::w3c::dom::Document> getOwnerDocument() { return call_method<"getOwnerDocument", jni::ref<org::w3c::dom::Document>>(); }
	jshort getNodeType() { return call_method<"getNodeType", jshort>(); }
	jni::ref<java::lang::String> getNodeName() { return call_method<"getNodeName", jni::ref<java::lang::String>>(); }
	jni::ref<org::w3c::dom::Node> cloneNode(jboolean p1) { return call_method<"cloneNode", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::Node> insertBefore(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"insertBefore", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<org::w3c::dom::Node> removeChild(jni::ref<org::w3c::dom::Node> p1) { return call_method<"removeChild", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::Node> replaceChild(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"replaceChild", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<java::lang::String> getTextContent() { return call_method<"getTextContent", jni::ref<java::lang::String>>(); }
	void setTextContent(jni::ref<java::lang::String> p1) { return call_method<"setTextContent", void>(p1); }
	jni::ref<java::lang::Object> getFeature(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getFeature", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<org::w3c::dom::Attr> createAttribute(jni::ref<java::lang::String> p1) { return call_method<"createAttribute", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<org::w3c::dom::CDATASection> createCDATASection(jni::ref<java::lang::String> p1) { return call_method<"createCDATASection", jni::ref<org::w3c::dom::CDATASection>>(p1); }
	jni::ref<org::w3c::dom::Comment> createComment(jni::ref<java::lang::String> p1) { return call_method<"createComment", jni::ref<org::w3c::dom::Comment>>(p1); }
	jni::ref<org::w3c::dom::DocumentFragment> createDocumentFragment() { return call_method<"createDocumentFragment", jni::ref<org::w3c::dom::DocumentFragment>>(); }
	jni::ref<org::w3c::dom::Element> createElement(jni::ref<java::lang::String> p1) { return call_method<"createElement", jni::ref<org::w3c::dom::Element>>(p1); }
	jni::ref<org::w3c::dom::EntityReference> createEntityReference(jni::ref<java::lang::String> p1) { return call_method<"createEntityReference", jni::ref<org::w3c::dom::EntityReference>>(p1); }
	jni::ref<org::w3c::dom::ProcessingInstruction> createProcessingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createProcessingInstruction", jni::ref<org::w3c::dom::ProcessingInstruction>>(p1, p2); }
	jni::ref<org::w3c::dom::Text> createTextNode(jni::ref<java::lang::String> p1) { return call_method<"createTextNode", jni::ref<org::w3c::dom::Text>>(p1); }
	jni::ref<org::w3c::dom::DocumentType> getDoctype() { return call_method<"getDoctype", jni::ref<org::w3c::dom::DocumentType>>(); }
	jni::ref<org::w3c::dom::Element> getDocumentElement() { return call_method<"getDocumentElement", jni::ref<org::w3c::dom::Element>>(); }
	jni::ref<org::w3c::dom::NodeList> getElementsByTagName(jni::ref<java::lang::String> p1) { return call_method<"getElementsByTagName", jni::ref<org::w3c::dom::NodeList>>(p1); }
	jni::ref<org::w3c::dom::DOMImplementation> getImplementation() { return call_method<"getImplementation", jni::ref<org::w3c::dom::DOMImplementation>>(); }
	void setErrorChecking(jboolean p1) { return call_method<"setErrorChecking", void>(p1); }
	void setStrictErrorChecking(jboolean p1) { return call_method<"setStrictErrorChecking", void>(p1); }
	jboolean getErrorChecking() { return call_method<"getErrorChecking", jboolean>(); }
	jboolean getStrictErrorChecking() { return call_method<"getStrictErrorChecking", jboolean>(); }
	jni::ref<java::lang::String> getInputEncoding() { return call_method<"getInputEncoding", jni::ref<java::lang::String>>(); }
	void setInputEncoding(jni::ref<java::lang::String> p1) { return call_method<"setInputEncoding", void>(p1); }
	void setXmlEncoding(jni::ref<java::lang::String> p1) { return call_method<"setXmlEncoding", void>(p1); }
	void setEncoding(jni::ref<java::lang::String> p1) { return call_method<"setEncoding", void>(p1); }
	jni::ref<java::lang::String> getXmlEncoding() { return call_method<"getXmlEncoding", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncoding() { return call_method<"getEncoding", jni::ref<java::lang::String>>(); }
	void setXmlVersion(jni::ref<java::lang::String> p1) { return call_method<"setXmlVersion", void>(p1); }
	void setVersion(jni::ref<java::lang::String> p1) { return call_method<"setVersion", void>(p1); }
	jni::ref<java::lang::String> getXmlVersion() { return call_method<"getXmlVersion", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }
	void setXmlStandalone(jboolean p1) { return call_method<"setXmlStandalone", void>(p1); }
	void setStandalone(jboolean p1) { return call_method<"setStandalone", void>(p1); }
	jboolean getXmlStandalone() { return call_method<"getXmlStandalone", jboolean>(); }
	jboolean getStandalone() { return call_method<"getStandalone", jboolean>(); }
	jni::ref<java::lang::String> getDocumentURI() { return call_method<"getDocumentURI", jni::ref<java::lang::String>>(); }
	jni::ref<org::w3c::dom::Node> renameNode(jni::ref<org::w3c::dom::Node> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"renameNode", jni::ref<org::w3c::dom::Node>>(p1, p2, p3); }
	void normalizeDocument() { return call_method<"normalizeDocument", void>(); }
	jni::ref<org::w3c::dom::DOMConfiguration> getDomConfig() { return call_method<"getDomConfig", jni::ref<org::w3c::dom::DOMConfiguration>>(); }
	jni::ref<java::lang::String> getBaseURI() { return call_method<"getBaseURI", jni::ref<java::lang::String>>(); }
	void setDocumentURI(jni::ref<java::lang::String> p1) { return call_method<"setDocumentURI", void>(p1); }
	jboolean getAsync() { return call_method<"getAsync", jboolean>(); }
	void setAsync(jboolean p1) { return call_method<"setAsync", void>(p1); }
	void abort() { return call_method<"abort", void>(); }
	jboolean load(jni::ref<java::lang::String> p1) { return call_method<"load", jboolean>(p1); }
	jboolean loadXML(jni::ref<java::lang::String> p1) { return call_method<"loadXML", jboolean>(p1); }
	jni::ref<java::lang::String> saveXML(jni::ref<org::w3c::dom::Node> p1) { return call_method<"saveXML", jni::ref<java::lang::String>>(p1); }
	jni::ref<org::w3c::dom::DocumentType> createDocumentType(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"createDocumentType", jni::ref<org::w3c::dom::DocumentType>>(p1, p2, p3); }
	jni::ref<org::w3c::dom::Entity> createEntity(jni::ref<java::lang::String> p1) { return call_method<"createEntity", jni::ref<org::w3c::dom::Entity>>(p1); }
	jni::ref<org::w3c::dom::Notation> createNotation(jni::ref<java::lang::String> p1) { return call_method<"createNotation", jni::ref<org::w3c::dom::Notation>>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::dom::ElementDefinitionImpl> createElementDefinition(jni::ref<java::lang::String> p1) { return call_method<"createElementDefinition", jni::ref<com::sun::org::apache::xerces::internal::dom::ElementDefinitionImpl>>(p1); }
	jni::ref<org::w3c::dom::Node> importNode(jni::ref<org::w3c::dom::Node> p1, jboolean p2) { return call_method<"importNode", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<org::w3c::dom::Node> adoptNode(jni::ref<org::w3c::dom::Node> p1) { return call_method<"adoptNode", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::Element> getElementById(jni::ref<java::lang::String> p1) { return call_method<"getElementById", jni::ref<org::w3c::dom::Element>>(p1); }
	void putIdentifier(jni::ref<java::lang::String> p1, jni::ref<org::w3c::dom::Element> p2) { return call_method<"putIdentifier", void>(p1, p2); }
	jni::ref<org::w3c::dom::Element> getIdentifier(jni::ref<java::lang::String> p1) { return call_method<"getIdentifier", jni::ref<org::w3c::dom::Element>>(p1); }
	void removeIdentifier(jni::ref<java::lang::String> p1) { return call_method<"removeIdentifier", void>(p1); }
	jni::ref<org::w3c::dom::Element> createElementNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createElementNS", jni::ref<org::w3c::dom::Element>>(p1, p2); }
	jni::ref<org::w3c::dom::Element> createElementNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"createElementNS", jni::ref<org::w3c::dom::Element>>(p1, p2, p3); }
	jni::ref<org::w3c::dom::Attr> createAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createAttributeNS", jni::ref<org::w3c::dom::Attr>>(p1, p2); }
	jni::ref<org::w3c::dom::Attr> createAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"createAttributeNS", jni::ref<org::w3c::dom::Attr>>(p1, p2, p3); }
	jni::ref<org::w3c::dom::NodeList> getElementsByTagNameNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getElementsByTagNameNS", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	static jboolean isXMLName(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"isXMLName", jboolean>(p1, p2); }
	static jboolean isValidQName(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_static_method<"isValidQName", jboolean>(p1, p2, p3); }
	jni::ref<java::lang::Object> setUserData(jni::ref<org::w3c::dom::Node> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3, jni::ref<org::w3c::dom::UserDataHandler> p4) { return call_method<"setUserData", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> getUserData(jni::ref<org::w3c::dom::Node> p1, jni::ref<java::lang::String> p2) { return call_method<"getUserData", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	CoreDocumentImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_DOM_COREDOCUMENTIMPL
