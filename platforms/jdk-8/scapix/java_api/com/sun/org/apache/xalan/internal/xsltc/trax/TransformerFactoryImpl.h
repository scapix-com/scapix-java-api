// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/xml/transform/sax/SAXTransformerFactory.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SourceLoader.h>
#include <scapix/java_api/javax/xml/transform/ErrorListener.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_TRANSFORMERFACTORYIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_TRANSFORMERFACTORYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::trax { class TransformerFactoryImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::trax::TransformerFactoryImpl>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl";
	using base_classes = std::tuple<scapix::java_api::javax::xml::transform::sax::SAXTransformerFactory, scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::SourceLoader, scapix::java_api::javax::xml::transform::ErrorListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_TRANSFORMERFACTORYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_TRANSFORMERFACTORYIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_TRANSFORMERFACTORYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/XSLTC.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/transform/Templates.h>
#include <scapix/java_api/javax/xml/transform/Transformer.h>
#include <scapix/java_api/javax/xml/transform/TransformerException.h>
#include <scapix/java_api/javax/xml/transform/URIResolver.h>
#include <scapix/java_api/javax/xml/transform/sax/TemplatesHandler.h>
#include <scapix/java_api/javax/xml/transform/sax/TransformerHandler.h>
#include <scapix/java_api/jdk/xml/internal/JdkXmlFeatures.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xml/sax/XMLFilter.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::trax::TransformerFactoryImpl : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl",
	javax::xml::transform::sax::SAXTransformerFactory,
	com::sun::org::apache::xalan::internal::xsltc::compiler::SourceLoader,
	javax::xml::transform::ErrorListener>
{
public:

	static jni::ref<java::lang::String> TRANSLET_NAME() { return get_static_field<"TRANSLET_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DESTINATION_DIRECTORY() { return get_static_field<"DESTINATION_DIRECTORY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PACKAGE_NAME() { return get_static_field<"PACKAGE_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> JAR_NAME() { return get_static_field<"JAR_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> GENERATE_TRANSLET() { return get_static_field<"GENERATE_TRANSLET", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AUTO_TRANSLET() { return get_static_field<"AUTO_TRANSLET", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> USE_CLASSPATH() { return get_static_field<"USE_CLASSPATH", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEBUG() { return get_static_field<"DEBUG", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ENABLE_INLINING() { return get_static_field<"ENABLE_INLINING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INDENT_NUMBER() { return get_static_field<"INDENT_NUMBER", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::trax::TransformerFactoryImpl> new_object() { return base_::new_object(); }
	jni::ref<java::util::Map> getExternalExtensionsMap() { return call_method<"getExternalExtensionsMap", jni::ref<java::util::Map>>(); }
	void setErrorListener(jni::ref<javax::xml::transform::ErrorListener> p1) { return call_method<"setErrorListener", void>(p1); }
	jni::ref<javax::xml::transform::ErrorListener> getErrorListener() { return call_method<"getErrorListener", jni::ref<javax::xml::transform::ErrorListener>>(); }
	jni::ref<java::lang::Object> getAttribute(jni::ref<java::lang::String> p1) { return call_method<"getAttribute", jni::ref<java::lang::Object>>(p1); }
	void setAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setAttribute", void>(p1, p2); }
	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	jboolean getFeature(jni::ref<java::lang::String> p1) { return call_method<"getFeature", jboolean>(p1); }
	jboolean overrideDefaultParser() { return call_method<"overrideDefaultParser", jboolean>(); }
	jni::ref<jdk::xml::internal::JdkXmlFeatures> getJdkXmlFeatures() { return call_method<"getJdkXmlFeatures", jni::ref<jdk::xml::internal::JdkXmlFeatures>>(); }
	jni::ref<javax::xml::transform::URIResolver> getURIResolver() { return call_method<"getURIResolver", jni::ref<javax::xml::transform::URIResolver>>(); }
	void setURIResolver(jni::ref<javax::xml::transform::URIResolver> p1) { return call_method<"setURIResolver", void>(p1); }
	jni::ref<javax::xml::transform::Source> getAssociatedStylesheet(jni::ref<javax::xml::transform::Source> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"getAssociatedStylesheet", jni::ref<javax::xml::transform::Source>>(p1, p2, p3, p4); }
	jni::ref<javax::xml::transform::Transformer> newTransformer() { return call_method<"newTransformer", jni::ref<javax::xml::transform::Transformer>>(); }
	jni::ref<javax::xml::transform::Transformer> newTransformer(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTransformer", jni::ref<javax::xml::transform::Transformer>>(p1); }
	jni::ref<javax::xml::transform::Templates> newTemplates(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTemplates", jni::ref<javax::xml::transform::Templates>>(p1); }
	jni::ref<javax::xml::transform::sax::TemplatesHandler> newTemplatesHandler() { return call_method<"newTemplatesHandler", jni::ref<javax::xml::transform::sax::TemplatesHandler>>(); }
	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler() { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(); }
	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(p1); }
	jni::ref<javax::xml::transform::sax::TransformerHandler> newTransformerHandler(jni::ref<javax::xml::transform::Templates> p1) { return call_method<"newTransformerHandler", jni::ref<javax::xml::transform::sax::TransformerHandler>>(p1); }
	jni::ref<org::xml::sax::XMLFilter> newXMLFilter(jni::ref<javax::xml::transform::Source> p1) { return call_method<"newXMLFilter", jni::ref<org::xml::sax::XMLFilter>>(p1); }
	jni::ref<org::xml::sax::XMLFilter> newXMLFilter(jni::ref<javax::xml::transform::Templates> p1) { return call_method<"newXMLFilter", jni::ref<org::xml::sax::XMLFilter>>(p1); }
	void error(jni::ref<javax::xml::transform::TransformerException> p1) { return call_method<"error", void>(p1); }
	void fatalError(jni::ref<javax::xml::transform::TransformerException> p1) { return call_method<"fatalError", void>(p1); }
	void warning(jni::ref<javax::xml::transform::TransformerException> p1) { return call_method<"warning", void>(p1); }
	jni::ref<org::xml::sax::InputSource> loadSource(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::XSLTC> p3) { return call_method<"loadSource", jni::ref<org::xml::sax::InputSource>>(p1, p2, p3); }

protected:

	TransformerFactoryImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_TRAX_TRANSFORMERFACTORYIMPL
