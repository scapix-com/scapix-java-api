// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_XSLTC_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_XSLTC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler { class XSLTC; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::XSLTC>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/XSLTC";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_XSLTC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_XSLTC)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_XSLTC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/JavaClass.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Parser.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/QName.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SourceLoader.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Stylesheet.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URL.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/jdk/xml/internal/JdkXmlFeatures.h>
#include <scapix/java_api/jdk/xml/internal/JdkXmlFeatures_XmlFeature.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xml/sax/XMLReader.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::compiler::XSLTC : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/XSLTC",
	java::lang::Object>
{
public:

	static jint JAR_OUTPUT() { return get_static_field<"JAR_OUTPUT", jint>(); }
	static jint BYTEARRAY_OUTPUT() { return get_static_field<"BYTEARRAY_OUTPUT", jint>(); }
	static jint CLASSLOADER_OUTPUT() { return get_static_field<"CLASSLOADER_OUTPUT", jint>(); }
	static jint BYTEARRAY_AND_FILE_OUTPUT() { return get_static_field<"BYTEARRAY_AND_FILE_OUTPUT", jint>(); }
	static jint BYTEARRAY_AND_JAR_OUTPUT() { return get_static_field<"BYTEARRAY_AND_JAR_OUTPUT", jint>(); }

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::XSLTC> new_object(jni::ref<jdk::xml::internal::JdkXmlFeatures> p1) { return base_::new_object(p1); }
	void setSecureProcessing(jboolean p1) { return call_method<"setSecureProcessing", void>(p1); }
	jboolean isSecureProcessing() { return call_method<"isSecureProcessing", jboolean>(); }
	jboolean getFeature(jni::ref<jdk::xml::internal::JdkXmlFeatures_XmlFeature> p1) { return call_method<"getFeature", jboolean>(p1); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser> getParser() { return call_method<"getParser", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser>>(); }
	void setOutputType(jint p1) { return call_method<"setOutputType", void>(p1); }
	jni::ref<java::util::Properties> getOutputProperties() { return call_method<"getOutputProperties", jni::ref<java::util::Properties>>(); }
	void init() { return call_method<"init", void>(); }
	jni::ref<java::util::Map> getExternalExtensionFunctions() { return call_method<"getExternalExtensionFunctions", jni::ref<java::util::Map>>(); }
	void setSourceLoader(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SourceLoader> p1) { return call_method<"setSourceLoader", void>(p1); }
	void setTemplateInlining(jboolean p1) { return call_method<"setTemplateInlining", void>(p1); }
	jboolean getTemplateInlining() { return call_method<"getTemplateInlining", jboolean>(); }
	void setPIParameters(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"setPIParameters", void>(p1, p2, p3); }
	jboolean compile(jni::ref<java::net::URL> p1) { return call_method<"compile", jboolean>(p1); }
	jboolean compile(jni::ref<java::net::URL> p1, jni::ref<java::lang::String> p2) { return call_method<"compile", jboolean>(p1, p2); }
	jboolean compile(jni::ref<java::io::InputStream> p1, jni::ref<java::lang::String> p2) { return call_method<"compile", jboolean>(p1, p2); }
	jboolean compile(jni::ref<org::xml::sax::InputSource> p1, jni::ref<java::lang::String> p2) { return call_method<"compile", jboolean>(p1, p2); }
	jboolean compile(jni::ref<java::util::Vector> p1) { return call_method<"compile", jboolean>(p1); }
	jni::ref<jni::array<jni::array<jbyte>>> getBytecodes() { return call_method<"getBytecodes", jni::ref<jni::array<jni::array<jbyte>>>>(); }
	jni::ref<jni::array<jni::array<jbyte>>> compile(jni::ref<java::lang::String> p1, jni::ref<org::xml::sax::InputSource> p2, jint p3) { return call_method<"compile", jni::ref<jni::array<jni::array<jbyte>>>>(p1, p2, p3); }
	jni::ref<jni::array<jni::array<jbyte>>> compile(jni::ref<java::lang::String> p1, jni::ref<org::xml::sax::InputSource> p2) { return call_method<"compile", jni::ref<jni::array<jni::array<jbyte>>>>(p1, p2); }
	void setXMLReader(jni::ref<org::xml::sax::XMLReader> p1) { return call_method<"setXMLReader", void>(p1); }
	jni::ref<org::xml::sax::XMLReader> getXMLReader() { return call_method<"getXMLReader", jni::ref<org::xml::sax::XMLReader>>(); }
	jni::ref<java::util::ArrayList> getErrors() { return call_method<"getErrors", jni::ref<java::util::ArrayList>>(); }
	jni::ref<java::util::ArrayList> getWarnings() { return call_method<"getWarnings", jni::ref<java::util::ArrayList>>(); }
	void printErrors() { return call_method<"printErrors", void>(); }
	void printWarnings() { return call_method<"printWarnings", void>(); }
	jboolean isMultiDocument() { return call_method<"isMultiDocument", jboolean>(); }
	jboolean callsNodeset() { return call_method<"callsNodeset", jboolean>(); }
	jboolean hasIdCall() { return call_method<"hasIdCall", jboolean>(); }
	void setClassName(jni::ref<java::lang::String> p1) { return call_method<"setClassName", void>(p1); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jboolean setDestDirectory(jni::ref<java::lang::String> p1) { return call_method<"setDestDirectory", jboolean>(p1); }
	void setPackageName(jni::ref<java::lang::String> p1) { return call_method<"setPackageName", void>(p1); }
	void setJarFileName(jni::ref<java::lang::String> p1) { return call_method<"setJarFileName", void>(p1); }
	jni::ref<java::lang::String> getJarFileName() { return call_method<"getJarFileName", jni::ref<java::lang::String>>(); }
	void setStylesheet(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> p1) { return call_method<"setStylesheet", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> getStylesheet() { return call_method<"getStylesheet", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>>(); }
	jint registerAttribute(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName> p1) { return call_method<"registerAttribute", jint>(p1); }
	jint registerElement(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName> p1) { return call_method<"registerElement", jint>(p1); }
	jint registerNamespacePrefix(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName> p1) { return call_method<"registerNamespacePrefix", jint>(p1); }
	jint registerNamespace(jni::ref<java::lang::String> p1) { return call_method<"registerNamespace", jint>(p1); }
	jint nextModeSerial() { return call_method<"nextModeSerial", jint>(); }
	jint nextStylesheetSerial() { return call_method<"nextStylesheetSerial", jint>(); }
	jint nextStepPatternSerial() { return call_method<"nextStepPatternSerial", jint>(); }
	jni::ref<jni::array<jint>> getNumberFieldIndexes() { return call_method<"getNumberFieldIndexes", jni::ref<jni::array<jint>>>(); }
	jint nextHelperClassSerial() { return call_method<"nextHelperClassSerial", jint>(); }
	jint nextAttributeSetSerial() { return call_method<"nextAttributeSetSerial", jint>(); }
	jni::ref<java::util::Vector> getNamesIndex() { return call_method<"getNamesIndex", jni::ref<java::util::Vector>>(); }
	jni::ref<java::util::Vector> getNamespaceIndex() { return call_method<"getNamespaceIndex", jni::ref<java::util::Vector>>(); }
	jni::ref<java::lang::String> getHelperClassName() { return call_method<"getHelperClassName", jni::ref<java::lang::String>>(); }
	void dumpClass(jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass> p1) { return call_method<"dumpClass", void>(p1); }
	void outputToJar() { return call_method<"outputToJar", void>(); }
	void setDebug(jboolean p1) { return call_method<"setDebug", void>(p1); }
	jboolean debug() { return call_method<"debug", jboolean>(); }
	jni::ref<java::lang::String> getCharacterData(jint p1) { return call_method<"getCharacterData", jni::ref<java::lang::String>>(p1); }
	jint getCharacterDataCount() { return call_method<"getCharacterDataCount", jint>(); }
	jint addCharacterData(jni::ref<java::lang::String> p1) { return call_method<"addCharacterData", jint>(p1); }

protected:

	XSLTC(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_XSLTC
