// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/DocumentHandler.h>
#include <scapix/java_api/org/xml/sax/ext/LexicalHandler.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/org/xml/sax/ext/DeclHandler.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serialize/DOMSerializer.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serialize/Serializer.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_BASEMARKUPSERIALIZER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_BASEMARKUPSERIALIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serialize { class BaseMarkupSerializer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serialize::BaseMarkupSerializer>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::xml::sax::ContentHandler, scapix::java_api::org::xml::sax::DocumentHandler, scapix::java_api::org::xml::sax::ext::LexicalHandler, scapix::java_api::org::xml::sax::DTDHandler, scapix::java_api::org::xml::sax::ext::DeclHandler, scapix::java_api::com::sun::org::apache::xml::internal::serialize::DOMSerializer, scapix::java_api::com::sun::org::apache::xml::internal::serialize::Serializer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_BASEMARKUPSERIALIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_BASEMARKUPSERIALIZER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_BASEMARKUPSERIALIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/serialize/OutputFormat.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/Document.h>
#include <scapix/java_api/org/w3c/dom/DocumentFragment.h>
#include <scapix/java_api/org/w3c/dom/Element.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serialize::BaseMarkupSerializer : public jni::object_base<"com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer",
	java::lang::Object,
	org::xml::sax::ContentHandler,
	org::xml::sax::DocumentHandler,
	org::xml::sax::ext::LexicalHandler,
	org::xml::sax::DTDHandler,
	org::xml::sax::ext::DeclHandler,
	com::sun::org::apache::xml::internal::serialize::DOMSerializer,
	com::sun::org::apache::xml::internal::serialize::Serializer>
{
public:

	jni::ref<org::xml::sax::DocumentHandler> asDocumentHandler() { return call_method<"asDocumentHandler", jni::ref<org::xml::sax::DocumentHandler>>(); }
	jni::ref<org::xml::sax::ContentHandler> asContentHandler() { return call_method<"asContentHandler", jni::ref<org::xml::sax::ContentHandler>>(); }
	jni::ref<com::sun::org::apache::xml::internal::serialize::DOMSerializer> asDOMSerializer() { return call_method<"asDOMSerializer", jni::ref<com::sun::org::apache::xml::internal::serialize::DOMSerializer>>(); }
	void setOutputByteStream(jni::ref<java::io::OutputStream> p1) { return call_method<"setOutputByteStream", void>(p1); }
	void setOutputCharStream(jni::ref<java::io::Writer> p1) { return call_method<"setOutputCharStream", void>(p1); }
	void setOutputFormat(jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> p1) { return call_method<"setOutputFormat", void>(p1); }
	jboolean reset() { return call_method<"reset", jboolean>(); }
	void serialize(jni::ref<org::w3c::dom::Element> p1) { return call_method<"serialize", void>(p1); }
	void serialize(jni::ref<org::w3c::dom::Node> p1) { return call_method<"serialize", void>(p1); }
	void serialize(jni::ref<org::w3c::dom::DocumentFragment> p1) { return call_method<"serialize", void>(p1); }
	void serialize(jni::ref<org::w3c::dom::Document> p1) { return call_method<"serialize", void>(p1); }
	void startDocument() { return call_method<"startDocument", void>(); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"ignorableWhitespace", void>(p1, p2, p3); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void processingInstructionIO(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstructionIO", void>(p1, p2); }
	void comment(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"comment", void>(p1, p2, p3); }
	void comment(jni::ref<java::lang::String> p1) { return call_method<"comment", void>(p1); }
	void startCDATA() { return call_method<"startCDATA", void>(); }
	void endCDATA() { return call_method<"endCDATA", void>(); }
	void startNonEscaping() { return call_method<"startNonEscaping", void>(); }
	void endNonEscaping() { return call_method<"endNonEscaping", void>(); }
	void startPreserving() { return call_method<"startPreserving", void>(); }
	void endPreserving() { return call_method<"endPreserving", void>(); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void startEntity(jni::ref<java::lang::String> p1) { return call_method<"startEntity", void>(p1); }
	void endEntity(jni::ref<java::lang::String> p1) { return call_method<"endEntity", void>(p1); }
	void setDocumentLocator(jni::ref<org::xml::sax::Locator> p1) { return call_method<"setDocumentLocator", void>(p1); }
	void skippedEntity(jni::ref<java::lang::String> p1) { return call_method<"skippedEntity", void>(p1); }
	void startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"startPrefixMapping", void>(p1, p2); }
	void endPrefixMapping(jni::ref<java::lang::String> p1) { return call_method<"endPrefixMapping", void>(p1); }
	void startDTD(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startDTD", void>(p1, p2, p3); }
	void endDTD() { return call_method<"endDTD", void>(); }
	void elementDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"elementDecl", void>(p1, p2); }
	void attributeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"attributeDecl", void>(p1, p2, p3, p4, p5); }
	void internalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"internalEntityDecl", void>(p1, p2); }
	void externalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"externalEntityDecl", void>(p1, p2, p3); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }

protected:

	BaseMarkupSerializer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_BASEMARKUPSERIALIZER
