// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xpath/internal/objects/XObject.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_OBJECTS_XRTREEFRAG_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_OBJECTS_XRTREEFRAG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xpath::internal::objects { class XRTreeFrag; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xpath::internal::objects::XRTreeFrag>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xpath/internal/objects/XRTreeFrag";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xpath::internal::objects::XObject, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_OBJECTS_XRTREEFRAG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_OBJECTS_XRTREEFRAG)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_OBJECTS_XRTREEFRAG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMIterator.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/FastStringBuffer.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/XMLString.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/Expression.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/ExpressionNode.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/XPathContext.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xpath::internal::objects::XRTreeFrag : public jni::object_base<"com/sun/org/apache/xpath/internal/objects/XRTreeFrag",
	com::sun::org::apache::xpath::internal::objects::XObject,
	java::lang::Cloneable>
{
public:

	static jni::ref<com::sun::org::apache::xpath::internal::objects::XRTreeFrag> new_object(jint p1, jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p2, jni::ref<com::sun::org::apache::xpath::internal::ExpressionNode> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xpath::internal::objects::XRTreeFrag> new_object(jint p1, jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p2) { return base_::new_object(p1, p2); }
	jni::ref<java::lang::Object> object() { return call_method<"object", jni::ref<java::lang::Object>>(); }
	static jni::ref<com::sun::org::apache::xpath::internal::objects::XRTreeFrag> new_object(jni::ref<com::sun::org::apache::xpath::internal::Expression> p1) { return base_::new_object(p1); }
	void allowDetachToRelease(jboolean p1) { return call_method<"allowDetachToRelease", void>(p1); }
	void detach() { return call_method<"detach", void>(); }
	jint getType() { return call_method<"getType", jint>(); }
	jni::ref<java::lang::String> getTypeString() { return call_method<"getTypeString", jni::ref<java::lang::String>>(); }
	jdouble num() { return call_method<"num", jdouble>(); }
	jboolean bool_() { return call_method<"bool", jboolean>(); }
	jni::ref<com::sun::org::apache::xml::internal::utils::XMLString> xstr() { return call_method<"xstr", jni::ref<com::sun::org::apache::xml::internal::utils::XMLString>>(); }
	void appendToFsb(jni::ref<com::sun::org::apache::xml::internal::utils::FastStringBuffer> p1) { return call_method<"appendToFsb", void>(p1); }
	jni::ref<java::lang::String> str() { return call_method<"str", jni::ref<java::lang::String>>(); }
	jint rtf() { return call_method<"rtf", jint>(); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> asNodeIterator() { return call_method<"asNodeIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator>>(); }
	jni::ref<org::w3c::dom::NodeList> convertToNodeset() { return call_method<"convertToNodeset", jni::ref<org::w3c::dom::NodeList>>(); }
	jboolean equals(jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	XRTreeFrag(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_OBJECTS_XRTREEFRAG
