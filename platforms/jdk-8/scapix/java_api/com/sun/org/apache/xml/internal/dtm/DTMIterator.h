// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMITERATOR_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMITERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::dtm { class DTMIterator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::dtm::DTMIterator>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/dtm/DTMIterator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMITERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMITERATOR)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMITERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTM.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMManager.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::dtm::DTMIterator : public jni::object_base<"com/sun/org/apache/xml/internal/dtm/DTMIterator",
	java::lang::Object>
{
public:

	static jshort FILTER_ACCEPT() { return get_static_field<"FILTER_ACCEPT", jshort>(); }
	static jshort FILTER_REJECT() { return get_static_field<"FILTER_REJECT", jshort>(); }
	static jshort FILTER_SKIP() { return get_static_field<"FILTER_SKIP", jshort>(); }

	jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> getDTM(jint p1) { return call_method<"getDTM", jni::ref<com::sun::org::apache::xml::internal::dtm::DTM>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> getDTMManager() { return call_method<"getDTMManager", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager>>(); }
	jint getRoot() { return call_method<"getRoot", jint>(); }
	void setRoot(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"setRoot", void>(p1, p2); }
	void reset() { return call_method<"reset", void>(); }
	jint getWhatToShow() { return call_method<"getWhatToShow", jint>(); }
	jboolean getExpandEntityReferences() { return call_method<"getExpandEntityReferences", jboolean>(); }
	jint nextNode() { return call_method<"nextNode", jint>(); }
	jint previousNode() { return call_method<"previousNode", jint>(); }
	void detach() { return call_method<"detach", void>(); }
	void allowDetachToRelease(jboolean p1) { return call_method<"allowDetachToRelease", void>(p1); }
	jint getCurrentNode() { return call_method<"getCurrentNode", jint>(); }
	jboolean isFresh() { return call_method<"isFresh", jboolean>(); }
	void setShouldCacheNodes(jboolean p1) { return call_method<"setShouldCacheNodes", void>(p1); }
	jboolean isMutable() { return call_method<"isMutable", jboolean>(); }
	jint getCurrentPos() { return call_method<"getCurrentPos", jint>(); }
	void runTo(jint p1) { return call_method<"runTo", void>(p1); }
	void setCurrentPos(jint p1) { return call_method<"setCurrentPos", void>(p1); }
	jint item(jint p1) { return call_method<"item", jint>(p1); }
	void setItem(jint p1, jint p2) { return call_method<"setItem", void>(p1, p2); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> cloneWithReset() { return call_method<"cloneWithReset", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean isDocOrdered() { return call_method<"isDocOrdered", jboolean>(); }
	jint getAxis() { return call_method<"getAxis", jint>(); }

protected:

	DTMIterator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMITERATOR
