// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xpath/internal/Expression.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_PATTERNS_NODETEST_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_PATTERNS_NODETEST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xpath::internal::patterns { class NodeTest; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xpath::internal::patterns::NodeTest>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xpath/internal/patterns/NodeTest";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xpath::internal::Expression>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_PATTERNS_NODETEST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_PATTERNS_NODETEST)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_PATTERNS_NODETEST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTM.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/ExpressionOwner.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/XPathContext.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/XPathVisitor.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/objects/XNumber.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/objects/XObject.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xpath::internal::patterns::NodeTest : public jni::object_base<"com/sun/org/apache/xpath/internal/patterns/NodeTest",
	com::sun::org::apache::xpath::internal::Expression>
{
public:

	static jni::ref<java::lang::String> WILD() { return get_static_field<"WILD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SUPPORTS_PRE_STRIPPING() { return get_static_field<"SUPPORTS_PRE_STRIPPING", jni::ref<java::lang::String>>(); }
	static jint SHOW_BYFUNCTION() { return get_static_field<"SHOW_BYFUNCTION", jint>(); }
	static jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber> SCORE_NODETEST() { return get_static_field<"SCORE_NODETEST", jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber>>(); }
	static jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber> SCORE_NSWILD() { return get_static_field<"SCORE_NSWILD", jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber>>(); }
	static jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber> SCORE_QNAME() { return get_static_field<"SCORE_QNAME", jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber>>(); }
	static jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber> SCORE_OTHER() { return get_static_field<"SCORE_OTHER", jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber>>(); }
	static jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber> SCORE_NONE() { return get_static_field<"SCORE_NONE", jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber>>(); }

	jint getWhatToShow() { return call_method<"getWhatToShow", jint>(); }
	void setWhatToShow(jint p1) { return call_method<"setWhatToShow", void>(p1); }
	jni::ref<java::lang::String> getNamespace() { return call_method<"getNamespace", jni::ref<java::lang::String>>(); }
	void setNamespace(jni::ref<java::lang::String> p1) { return call_method<"setNamespace", void>(p1); }
	jni::ref<java::lang::String> getLocalName() { return call_method<"getLocalName", jni::ref<java::lang::String>>(); }
	void setLocalName(jni::ref<java::lang::String> p1) { return call_method<"setLocalName", void>(p1); }
	static jni::ref<com::sun::org::apache::xpath::internal::patterns::NodeTest> new_object(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xpath::internal::patterns::NodeTest> new_object(jint p1) { return base_::new_object(p1); }
	jboolean deepEquals(jni::ref<com::sun::org::apache::xpath::internal::Expression> p1) { return call_method<"deepEquals", jboolean>(p1); }
	static jni::ref<com::sun::org::apache::xpath::internal::patterns::NodeTest> new_object() { return base_::new_object(); }
	void initNodeTest(jint p1) { return call_method<"initNodeTest", void>(p1); }
	void initNodeTest(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"initNodeTest", void>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber> getStaticScore() { return call_method<"getStaticScore", jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber>>(); }
	void setStaticScore(jni::ref<com::sun::org::apache::xpath::internal::objects::XNumber> p1) { return call_method<"setStaticScore", void>(p1); }
	jdouble getDefaultScore() { return call_method<"getDefaultScore", jdouble>(); }
	static jint getNodeTypeTest(jint p1) { return call_static_method<"getNodeTypeTest", jint>(p1); }
	static void debugWhatToShow(jint p1) { return call_static_method<"debugWhatToShow", void>(p1); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> execute(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2) { return call_method<"execute", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> execute(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2, jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> p3, jint p4) { return call_method<"execute", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2, p3, p4); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> execute(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1) { return call_method<"execute", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1); }
	void fixupVariables(jni::ref<java::util::Vector> p1, jint p2) { return call_method<"fixupVariables", void>(p1, p2); }
	void callVisitors(jni::ref<com::sun::org::apache::xpath::internal::ExpressionOwner> p1, jni::ref<com::sun::org::apache::xpath::internal::XPathVisitor> p2) { return call_method<"callVisitors", void>(p1, p2); }

protected:

	NodeTest(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_PATTERNS_NODETEST
