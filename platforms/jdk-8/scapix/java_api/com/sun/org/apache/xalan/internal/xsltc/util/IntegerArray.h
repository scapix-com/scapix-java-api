// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_UTIL_INTEGERARRAY_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_UTIL_INTEGERARRAY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::util { class IntegerArray; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::util::IntegerArray>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/util/IntegerArray";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_UTIL_INTEGERARRAY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_UTIL_INTEGERARRAY)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_UTIL_INTEGERARRAY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::util::IntegerArray : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/util/IntegerArray",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::util::IntegerArray> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::util::IntegerArray> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::util::IntegerArray> new_object(jni::ref<jni::array<jint>> p1) { return base_::new_object(p1); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<jni::array<jint>> toIntArray() { return call_method<"toIntArray", jni::ref<jni::array<jint>>>(); }
	jint at(jint p1) { return call_method<"at", jint>(p1); }
	void set(jint p1, jint p2) { return call_method<"set", void>(p1, p2); }
	jint indexOf(jint p1) { return call_method<"indexOf", jint>(p1); }
	void add(jint p1) { return call_method<"add", void>(p1); }
	void addNew(jint p1) { return call_method<"addNew", void>(p1); }
	void reverse() { return call_method<"reverse", void>(); }
	void merge(jni::ref<com::sun::org::apache::xalan::internal::xsltc::util::IntegerArray> p1) { return call_method<"merge", void>(p1); }
	void sort() { return call_method<"sort", void>(); }
	jint popLast() { return call_method<"popLast", jint>(); }
	jint last() { return call_method<"last", jint>(); }
	void setLast(jint p1) { return call_method<"setLast", void>(p1); }
	void pop() { return call_method<"pop", void>(); }
	void pop(jint p1) { return call_method<"pop", void>(p1); }
	jint cardinality() { return call_method<"cardinality", jint>(); }
	void print(jni::ref<java::io::PrintStream> p1) { return call_method<"print", void>(p1); }

protected:

	IntegerArray(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_UTIL_INTEGERARRAY
