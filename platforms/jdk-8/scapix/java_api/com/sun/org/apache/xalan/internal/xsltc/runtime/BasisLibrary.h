// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_BASISLIBRARY_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_BASISLIBRARY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::runtime { class BasisLibrary; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::runtime::BasisLibrary>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/runtime/BasisLibrary";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_BASISLIBRARY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_BASISLIBRARY)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_BASISLIBRARY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/DOM.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/Translet.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMAxisIterator.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/SerializationHandler.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/DecimalFormat.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::runtime::BasisLibrary : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/runtime/BasisLibrary",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> RUN_TIME_INTERNAL_ERR() { return get_static_field<"RUN_TIME_INTERNAL_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> RUN_TIME_COPY_ERR() { return get_static_field<"RUN_TIME_COPY_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DATA_CONVERSION_ERR() { return get_static_field<"DATA_CONVERSION_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTERNAL_FUNC_ERR() { return get_static_field<"EXTERNAL_FUNC_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EQUALITY_EXPR_ERR() { return get_static_field<"EQUALITY_EXPR_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_ARGUMENT_ERR() { return get_static_field<"INVALID_ARGUMENT_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FORMAT_NUMBER_ERR() { return get_static_field<"FORMAT_NUMBER_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ITERATOR_CLONE_ERR() { return get_static_field<"ITERATOR_CLONE_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> AXIS_SUPPORT_ERR() { return get_static_field<"AXIS_SUPPORT_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> TYPED_AXIS_SUPPORT_ERR() { return get_static_field<"TYPED_AXIS_SUPPORT_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> STRAY_ATTRIBUTE_ERR() { return get_static_field<"STRAY_ATTRIBUTE_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> STRAY_NAMESPACE_ERR() { return get_static_field<"STRAY_NAMESPACE_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NAMESPACE_PREFIX_ERR() { return get_static_field<"NAMESPACE_PREFIX_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DOM_ADAPTER_INIT_ERR() { return get_static_field<"DOM_ADAPTER_INIT_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> PARSER_DTD_SUPPORT_ERR() { return get_static_field<"PARSER_DTD_SUPPORT_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NAMESPACES_SUPPORT_ERR() { return get_static_field<"NAMESPACES_SUPPORT_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CANT_RESOLVE_RELATIVE_URI_ERR() { return get_static_field<"CANT_RESOLVE_RELATIVE_URI_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNSUPPORTED_XSL_ERR() { return get_static_field<"UNSUPPORTED_XSL_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNSUPPORTED_EXT_ERR() { return get_static_field<"UNSUPPORTED_EXT_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNKNOWN_TRANSLET_VERSION_ERR() { return get_static_field<"UNKNOWN_TRANSLET_VERSION_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_QNAME_ERR() { return get_static_field<"INVALID_QNAME_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INVALID_NCNAME_ERR() { return get_static_field<"INVALID_NCNAME_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNALLOWED_EXTENSION_FUNCTION_ERR() { return get_static_field<"UNALLOWED_EXTENSION_FUNCTION_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> UNALLOWED_EXTENSION_ELEMENT_ERR() { return get_static_field<"UNALLOWED_EXTENSION_ELEMENT_ERR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ERROR_MESSAGES_KEY() { return get_static_field<"ERROR_MESSAGES_KEY", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::runtime::BasisLibrary> new_object() { return base_::new_object(); }
	static jint countF(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1) { return call_static_method<"countF", jint>(p1); }
	static jint positionF(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1) { return call_static_method<"positionF", jint>(p1); }
	static jdouble sumF(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"sumF", jdouble>(p1, p2); }
	static jni::ref<java::lang::String> stringF(jint p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"stringF", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> stringF(jni::ref<java::lang::Object> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"stringF", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> stringF(jni::ref<java::lang::Object> p1, jint p2, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p3) { return call_static_method<"stringF", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jdouble numberF(jint p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"numberF", jdouble>(p1, p2); }
	static jdouble numberF(jni::ref<java::lang::Object> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"numberF", jdouble>(p1, p2); }
	static jdouble roundF(jdouble p1) { return call_static_method<"roundF", jdouble>(p1); }
	static jboolean booleanF(jni::ref<java::lang::Object> p1) { return call_static_method<"booleanF", jboolean>(p1); }
	static jni::ref<java::lang::String> substringF(jni::ref<java::lang::String> p1, jdouble p2) { return call_static_method<"substringF", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> substringF(jni::ref<java::lang::String> p1, jdouble p2, jdouble p3) { return call_static_method<"substringF", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> substring_afterF(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"substring_afterF", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> substring_beforeF(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"substring_beforeF", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> translateF(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"translateF", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> normalize_spaceF(jint p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"normalize_spaceF", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> normalize_spaceF(jni::ref<java::lang::String> p1) { return call_static_method<"normalize_spaceF", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> generate_idF(jint p1) { return call_static_method<"generate_idF", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> getLocalName(jni::ref<java::lang::String> p1) { return call_static_method<"getLocalName", jni::ref<java::lang::String>>(p1); }
	static void unresolved_externalF(jni::ref<java::lang::String> p1) { return call_static_method<"unresolved_externalF", void>(p1); }
	static void unallowed_extension_functionF(jni::ref<java::lang::String> p1) { return call_static_method<"unallowed_extension_functionF", void>(p1); }
	static void unallowed_extension_elementF(jni::ref<java::lang::String> p1) { return call_static_method<"unallowed_extension_elementF", void>(p1); }
	static void unsupported_ElementF(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"unsupported_ElementF", void>(p1, p2); }
	static jni::ref<java::lang::String> namespace_uriF(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"namespace_uriF", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> system_propertyF(jni::ref<java::lang::String> p1) { return call_static_method<"system_propertyF", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> namespace_uriF(jint p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"namespace_uriF", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> objectTypeF(jni::ref<java::lang::Object> p1) { return call_static_method<"objectTypeF", jni::ref<java::lang::String>>(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> nodesetF(jni::ref<java::lang::Object> p1) { return call_static_method<"nodesetF", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1); }
	static jboolean compare(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p2, jint p3, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p4) { return call_static_method<"compare", jboolean>(p1, p2, p3, p4); }
	static jboolean compare(jint p1, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p2, jint p3, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p4) { return call_static_method<"compare", jboolean>(p1, p2, p3, p4); }
	static jboolean compare(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1, jdouble p2, jint p3, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p4) { return call_static_method<"compare", jboolean>(p1, p2, p3, p4); }
	static jboolean compare(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1, jni::ref<java::lang::String> p2, jint p3, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p4) { return call_static_method<"compare", jboolean>(p1, p2, p3, p4); }
	static jboolean compare(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2, jint p3, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p4) { return call_static_method<"compare", jboolean>(p1, p2, p3, p4); }
	static jboolean testLanguage(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2, jint p3) { return call_static_method<"testLanguage", jboolean>(p1, p2, p3); }
	static jdouble stringToReal(jni::ref<java::lang::String> p1) { return call_static_method<"stringToReal", jdouble>(p1); }
	static jint stringToInt(jni::ref<java::lang::String> p1) { return call_static_method<"stringToInt", jint>(p1); }
	static jni::ref<java::lang::String> realToString(jdouble p1) { return call_static_method<"realToString", jni::ref<java::lang::String>>(p1); }
	static jint realToInt(jdouble p1) { return call_static_method<"realToInt", jint>(p1); }
	static jni::ref<java::lang::String> formatNumber(jdouble p1, jni::ref<java::lang::String> p2, jni::ref<java::text::DecimalFormat> p3) { return call_static_method<"formatNumber", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> referenceToNodeSet(jni::ref<java::lang::Object> p1) { return call_static_method<"referenceToNodeSet", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1); }
	static jni::ref<org::w3c::dom::NodeList> referenceToNodeList(jni::ref<java::lang::Object> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"referenceToNodeList", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	static jni::ref<org::w3c::dom::Node> referenceToNode(jni::ref<java::lang::Object> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"referenceToNode", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	static jlong referenceToLong(jni::ref<java::lang::Object> p1) { return call_static_method<"referenceToLong", jlong>(p1); }
	static jdouble referenceToDouble(jni::ref<java::lang::Object> p1) { return call_static_method<"referenceToDouble", jdouble>(p1); }
	static jboolean referenceToBoolean(jni::ref<java::lang::Object> p1) { return call_static_method<"referenceToBoolean", jboolean>(p1); }
	static jni::ref<java::lang::String> referenceToString(jni::ref<java::lang::Object> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_static_method<"referenceToString", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> node2Iterator(jni::ref<org::w3c::dom::Node> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::Translet> p2, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p3) { return call_static_method<"node2Iterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> nodeList2Iterator(jni::ref<org::w3c::dom::NodeList> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::Translet> p2, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p3) { return call_static_method<"nodeList2Iterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> referenceToResultTree(jni::ref<java::lang::Object> p1) { return call_static_method<"referenceToResultTree", jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM>>(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getSingleNode(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1) { return call_static_method<"getSingleNode", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1); }
	static void copy(jni::ref<java::lang::Object> p1, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p2, jint p3, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p4) { return call_static_method<"copy", void>(p1, p2, p3, p4); }
	static void checkAttribQName(jni::ref<java::lang::String> p1) { return call_static_method<"checkAttribQName", void>(p1); }
	static void checkNCName(jni::ref<java::lang::String> p1) { return call_static_method<"checkNCName", void>(p1); }
	static void checkQName(jni::ref<java::lang::String> p1) { return call_static_method<"checkQName", void>(p1); }
	static jni::ref<java::lang::String> startXslElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p3, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p4, jint p5) { return call_static_method<"startXslElement", jni::ref<java::lang::String>>(p1, p2, p3, p4, p5); }
	static jni::ref<java::lang::String> getPrefix(jni::ref<java::lang::String> p1) { return call_static_method<"getPrefix", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> generatePrefix() { return call_static_method<"generatePrefix", jni::ref<java::lang::String>>(); }
	static void resetPrefixIndex() { return call_static_method<"resetPrefixIndex", void>(); }
	static void runTimeError(jni::ref<java::lang::String> p1) { return call_static_method<"runTimeError", void>(p1); }
	static void runTimeError(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_static_method<"runTimeError", void>(p1, p2); }
	static void runTimeError(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"runTimeError", void>(p1, p2); }
	static void runTimeError(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_static_method<"runTimeError", void>(p1, p2, p3); }
	static void consoleOutput(jni::ref<java::lang::String> p1) { return call_static_method<"consoleOutput", void>(p1); }
	static jni::ref<java::lang::String> replace(jni::ref<java::lang::String> p1, jchar p2, jni::ref<java::lang::String> p3) { return call_static_method<"replace", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> replace(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::lang::String>> p3) { return call_static_method<"replace", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> mapQNameToJavaName(jni::ref<java::lang::String> p1) { return call_static_method<"mapQNameToJavaName", jni::ref<java::lang::String>>(p1); }
	static jint getStringLength(jni::ref<java::lang::String> p1) { return call_static_method<"getStringLength", jint>(p1); }

protected:

	BasisLibrary(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_BASISLIBRARY
