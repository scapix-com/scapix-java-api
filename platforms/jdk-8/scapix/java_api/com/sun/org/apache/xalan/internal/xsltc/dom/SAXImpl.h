// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/DOMEnhancedForDTM.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/dom/DOMBuilder.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_DOM_SAXIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_DOM_SAXIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::dom { class SAXImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::dom::SAXImpl>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref::sax2dtm::SAX2DTM2, scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::DOMEnhancedForDTM, scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::dom::DOMBuilder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_DOM_SAXIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_DOM_SAXIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_DOM_SAXIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/DOM.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/StripFilter.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/dom/XSLTCDTMManager.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMAxisIterator.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMManager.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMWSFilter.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/SerializationHandler.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/XMLStringFactory.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl_TypedNamespaceIterator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl_NamespaceWildcardIterator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl_NamespaceChildrenIterator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl_NamespaceAttributeIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::dom::SAXImpl : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl",
	com::sun::org::apache::xml::internal::dtm::ref::sax2dtm::SAX2DTM2,
	com::sun::org::apache::xalan::internal::xsltc::DOMEnhancedForDTM,
	com::sun::org::apache::xalan::internal::xsltc::dom::DOMBuilder>
{
public:

	using TypedNamespaceIterator = SAXImpl_TypedNamespaceIterator;
	using NamespaceWildcardIterator = SAXImpl_NamespaceWildcardIterator;
	using NamespaceChildrenIterator = SAXImpl_NamespaceChildrenIterator;
	using NamespaceAttributeIterator = SAXImpl_NamespaceAttributeIterator;

	void setDocumentURI(jni::ref<java::lang::String> p1) { return call_method<"setDocumentURI", void>(p1); }
	jni::ref<java::lang::String> getDocumentURI() { return call_method<"getDocumentURI", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDocumentURI(jint p1) { return call_method<"getDocumentURI", jni::ref<java::lang::String>>(p1); }
	void setupMapping(jni::ref<jni::array<java::lang::String>> p1, jni::ref<jni::array<java::lang::String>> p2, jni::ref<jni::array<jint>> p3, jni::ref<jni::array<java::lang::String>> p4) { return call_method<"setupMapping", void>(p1, p2, p3, p4); }
	jni::ref<java::lang::String> lookupNamespace(jint p1, jni::ref<java::lang::String> p2) { return call_method<"lookupNamespace", jni::ref<java::lang::String>>(p1, p2); }
	jboolean isElement(jint p1) { return call_method<"isElement", jboolean>(p1); }
	jboolean isAttribute(jint p1) { return call_method<"isAttribute", jboolean>(p1); }
	jint getSize() { return call_method<"getSize", jint>(); }
	void setFilter(jni::ref<com::sun::org::apache::xalan::internal::xsltc::StripFilter> p1) { return call_method<"setFilter", void>(p1); }
	jboolean lessThan(jint p1, jint p2) { return call_method<"lessThan", jboolean>(p1, p2); }
	jni::ref<org::w3c::dom::Node> makeNode(jint p1) { return call_method<"makeNode", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::Node> makeNode(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1) { return call_method<"makeNode", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::NodeList> makeNodeList(jint p1) { return call_method<"makeNodeList", jni::ref<org::w3c::dom::NodeList>>(p1); }
	jni::ref<org::w3c::dom::NodeList> makeNodeList(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1) { return call_method<"makeNodeList", jni::ref<org::w3c::dom::NodeList>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getNodeValueIterator(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1, jint p2, jni::ref<java::lang::String> p3, jboolean p4) { return call_method<"getNodeValueIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1, p2, p3, p4); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> orderNodes(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1, jint p2) { return call_method<"orderNodes", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getIterator() { return call_method<"getIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(); }
	jint getNSType(jint p1) { return call_method<"getNSType", jint>(p1); }
	jint getNamespaceType(jint p1) { return call_method<"getNamespaceType", jint>(p1); }
	jint getGeneralizedType(jni::ref<java::lang::String> p1) { return call_method<"getGeneralizedType", jint>(p1); }
	jint getGeneralizedType(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"getGeneralizedType", jint>(p1, p2); }
	jni::ref<jni::array<jshort>> getMapping(jni::ref<jni::array<java::lang::String>> p1, jni::ref<jni::array<java::lang::String>> p2, jni::ref<jni::array<jint>> p3) { return call_method<"getMapping", jni::ref<jni::array<jshort>>>(p1, p2, p3); }
	jni::ref<jni::array<jint>> getReverseMapping(jni::ref<jni::array<java::lang::String>> p1, jni::ref<jni::array<java::lang::String>> p2, jni::ref<jni::array<jint>> p3) { return call_method<"getReverseMapping", jni::ref<jni::array<jint>>>(p1, p2, p3); }
	jni::ref<jni::array<jshort>> getNamespaceMapping(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"getNamespaceMapping", jni::ref<jni::array<jshort>>>(p1); }
	jni::ref<jni::array<jshort>> getReverseNamespaceMapping(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"getReverseNamespaceMapping", jni::ref<jni::array<jshort>>>(p1); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::SAXImpl> new_object(jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::XSLTCDTMManager> p1, jni::ref<javax::xml::transform::Source> p2, jint p3, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMWSFilter> p4, jni::ref<com::sun::org::apache::xml::internal::utils::XMLStringFactory> p5, jboolean p6, jboolean p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::SAXImpl> new_object(jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::XSLTCDTMManager> p1, jni::ref<javax::xml::transform::Source> p2, jint p3, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMWSFilter> p4, jni::ref<com::sun::org::apache::xml::internal::utils::XMLStringFactory> p5, jboolean p6, jint p7, jboolean p8, jboolean p9) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
	void migrateTo(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> p1) { return call_method<"migrateTo", void>(p1); }
	jint getElementById(jni::ref<java::lang::String> p1) { return call_method<"getElementById", jint>(p1); }
	jboolean hasDOMSource() { return call_method<"hasDOMSource", jboolean>(); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void startDocument() { return call_method<"startDocument", void>(); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4, jni::ref<org::w3c::dom::Node> p5) { return call_method<"startElement", void>(p1, p2, p3, p4, p5); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"ignorableWhitespace", void>(p1, p2, p3); }
	void startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"startPrefixMapping", void>(p1, p2); }
	void comment(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"comment", void>(p1, p2, p3); }
	jboolean setEscaping(jboolean p1) { return call_method<"setEscaping", jboolean>(p1); }
	void print(jint p1, jint p2) { return call_method<"print", void>(p1, p2); }
	jni::ref<java::lang::String> getNodeName(jint p1) { return call_method<"getNodeName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNamespaceName(jint p1) { return call_method<"getNamespaceName", jni::ref<java::lang::String>>(p1); }
	jint getAttributeNode(jint p1, jint p2) { return call_method<"getAttributeNode", jint>(p1, p2); }
	jni::ref<java::lang::String> getAttributeValue(jint p1, jint p2) { return call_method<"getAttributeValue", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getAttributeValue(jni::ref<java::lang::String> p1, jint p2) { return call_method<"getAttributeValue", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getChildren(jint p1) { return call_method<"getChildren", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getTypedChildren(jint p1) { return call_method<"getTypedChildren", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getAxisIterator(jint p1) { return call_method<"getAxisIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getTypedAxisIterator(jint p1, jint p2) { return call_method<"getTypedAxisIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getNamespaceAxisIterator(jint p1, jint p2) { return call_method<"getNamespaceAxisIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getTypedDescendantIterator(jint p1) { return call_method<"getTypedDescendantIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> getNthDescendant(jint p1, jint p2, jboolean p3) { return call_method<"getNthDescendant", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator>>(p1, p2, p3); }
	void characters(jint p1, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p2) { return call_method<"characters", void>(p1, p2); }
	void copy(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p1, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p2) { return call_method<"copy", void>(p1, p2); }
	void copy(jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p1) { return call_method<"copy", void>(p1); }
	void copy(jint p1, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p2) { return call_method<"copy", void>(p1, p2); }
	jni::ref<java::lang::String> shallowCopy(jint p1, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p2) { return call_method<"shallowCopy", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getLanguage(jint p1) { return call_method<"getLanguage", jni::ref<java::lang::String>>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::DOMBuilder> getBuilder() { return call_method<"getBuilder", jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::DOMBuilder>>(); }
	jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> getOutputDomBuilder() { return call_method<"getOutputDomBuilder", jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler>>(); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> getResultTreeFrag(jint p1, jint p2) { return call_method<"getResultTreeFrag", jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM>>(p1, p2); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> getResultTreeFrag(jint p1, jint p2, jboolean p3) { return call_method<"getResultTreeFrag", jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM>>(p1, p2, p3); }
	jni::ref<java::util::Map> getElementsWithIDs() { return call_method<"getElementsWithIDs", jni::ref<java::util::Map>>(); }
	jni::ref<java::lang::String> getUnparsedEntityURI(jni::ref<java::lang::String> p1) { return call_method<"getUnparsedEntityURI", jni::ref<java::lang::String>>(p1); }
	void release() { return call_method<"release", void>(); }

protected:

	SAXImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_DOM_SAXIMPL
