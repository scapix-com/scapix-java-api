// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Node.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPENTRY_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPENTRY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class StackMapEntry; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::StackMapEntry>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/StackMapEntry";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Node, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPENTRY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPENTRY)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPENTRY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantPool.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/StackMapType.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Visitor.h>
#include <scapix/java_api/java/io/DataOutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::StackMapEntry : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/StackMapEntry",
	java::lang::Object,
	com::sun::org::apache::bcel::internal::classfile::Node,
	java::lang::Cloneable>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::classfile::StackMapEntry> new_object(jint p1, jint p2, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> p3, jint p4, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> p5, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::StackMapEntry> new_object(jint p1, jint p2, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> p3, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> p4, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	void accept(jni::ref<com::sun::org::apache::bcel::internal::classfile::Visitor> p1) { return call_method<"accept", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::StackMapEntry> copy() { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::classfile::StackMapEntry>>(); }
	void dump(jni::ref<java::io::DataOutputStream> p1) { return call_method<"dump", void>(p1); }
	jint getByteCodeOffset() { return call_method<"getByteCodeOffset", jint>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> getConstantPool() { return call_method<"getConstantPool", jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool>>(); }
	jint getFrameType() { return call_method<"getFrameType", jint>(); }
	jint getNumberOfLocals() { return call_method<"getNumberOfLocals", jint>(); }
	jint getNumberOfStackItems() { return call_method<"getNumberOfStackItems", jint>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> getTypesOfLocals() { return call_method<"getTypesOfLocals", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> getTypesOfStackItems() { return call_method<"getTypesOfStackItems", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>>>(); }
	void setByteCodeOffset(jint p1) { return call_method<"setByteCodeOffset", void>(p1); }
	void setConstantPool(jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p1) { return call_method<"setConstantPool", void>(p1); }
	void setFrameType(jint p1) { return call_method<"setFrameType", void>(p1); }
	void setNumberOfLocals(jint p1) { return call_method<"setNumberOfLocals", void>(p1); }
	void setNumberOfStackItems(jint p1) { return call_method<"setNumberOfStackItems", void>(p1); }
	void setTypesOfLocals(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> p1) { return call_method<"setTypesOfLocals", void>(p1); }
	void setTypesOfStackItems(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::StackMapType>> p1) { return call_method<"setTypesOfStackItems", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void updateByteCodeOffset(jint p1) { return call_method<"updateByteCodeOffset", void>(p1); }

protected:

	StackMapEntry(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_STACKMAPENTRY
