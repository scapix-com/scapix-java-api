// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/org/xml/sax/ext/LexicalHandler.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>
#include <scapix/java_api/java/lang/Runnable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_INCREMENTALSAXSOURCE_FILTER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_INCREMENTALSAXSOURCE_FILTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref { class IncrementalSAXSource_Filter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource_Filter>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource_Filter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource, scapix::java_api::org::xml::sax::ContentHandler, scapix::java_api::org::xml::sax::DTDHandler, scapix::java_api::org::xml::sax::ext::LexicalHandler, scapix::java_api::org::xml::sax::ErrorHandler, scapix::java_api::java::lang::Runnable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_INCREMENTALSAXSOURCE_FILTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_INCREMENTALSAXSOURCE_FILTER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_INCREMENTALSAXSOURCE_FILTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/ref/CoroutineManager.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#include <scapix/java_api/org/xml/sax/SAXParseException.h>
#include <scapix/java_api/org/xml/sax/XMLReader.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource_Filter : public jni::object_base<"com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource_Filter",
	java::lang::Object,
	com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource,
	org::xml::sax::ContentHandler,
	org::xml::sax::DTDHandler,
	org::xml::sax::ext::LexicalHandler,
	org::xml::sax::ErrorHandler,
	java::lang::Runnable>
{
public:

	static jni::ref<com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource_Filter> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource_Filter> new_object(jni::ref<com::sun::org::apache::xml::internal::dtm::ref::CoroutineManager> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource> createIncrementalSAXSource(jni::ref<com::sun::org::apache::xml::internal::dtm::ref::CoroutineManager> p1, jint p2) { return call_static_method<"createIncrementalSAXSource", jni::ref<com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource>>(p1, p2); }
	void init(jni::ref<com::sun::org::apache::xml::internal::dtm::ref::CoroutineManager> p1, jint p2, jint p3) { return call_method<"init", void>(p1, p2, p3); }
	void setXMLReader(jni::ref<org::xml::sax::XMLReader> p1) { return call_method<"setXMLReader", void>(p1); }
	void setContentHandler(jni::ref<org::xml::sax::ContentHandler> p1) { return call_method<"setContentHandler", void>(p1); }
	void setDTDHandler(jni::ref<org::xml::sax::DTDHandler> p1) { return call_method<"setDTDHandler", void>(p1); }
	void setLexicalHandler(jni::ref<org::xml::sax::ext::LexicalHandler> p1) { return call_method<"setLexicalHandler", void>(p1); }
	void setErrHandler(jni::ref<org::xml::sax::ErrorHandler> p1) { return call_method<"setErrHandler", void>(p1); }
	void setReturnFrequency(jint p1) { return call_method<"setReturnFrequency", void>(p1); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void endPrefixMapping(jni::ref<java::lang::String> p1) { return call_method<"endPrefixMapping", void>(p1); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"ignorableWhitespace", void>(p1, p2, p3); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void setDocumentLocator(jni::ref<org::xml::sax::Locator> p1) { return call_method<"setDocumentLocator", void>(p1); }
	void skippedEntity(jni::ref<java::lang::String> p1) { return call_method<"skippedEntity", void>(p1); }
	void startDocument() { return call_method<"startDocument", void>(); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"startPrefixMapping", void>(p1, p2); }
	void comment(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"comment", void>(p1, p2, p3); }
	void endCDATA() { return call_method<"endCDATA", void>(); }
	void endDTD() { return call_method<"endDTD", void>(); }
	void endEntity(jni::ref<java::lang::String> p1) { return call_method<"endEntity", void>(p1); }
	void startCDATA() { return call_method<"startCDATA", void>(); }
	void startDTD(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startDTD", void>(p1, p2, p3); }
	void startEntity(jni::ref<java::lang::String> p1) { return call_method<"startEntity", void>(p1); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }
	void error(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"error", void>(p1); }
	void fatalError(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"fatalError", void>(p1); }
	void warning(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"warning", void>(p1); }
	jint getSourceCoroutineID() { return call_method<"getSourceCoroutineID", jint>(); }
	jint getControllerCoroutineID() { return call_method<"getControllerCoroutineID", jint>(); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::ref::CoroutineManager> getCoroutineManager() { return call_method<"getCoroutineManager", jni::ref<com::sun::org::apache::xml::internal::dtm::ref::CoroutineManager>>(); }
	void startParse(jni::ref<org::xml::sax::InputSource> p1) { return call_method<"startParse", void>(p1); }
	void run() { return call_method<"run", void>(); }
	jni::ref<java::lang::Object> deliverMoreNodes(jboolean p1) { return call_method<"deliverMoreNodes", jni::ref<java::lang::Object>>(p1); }

protected:

	IncrementalSAXSource_Filter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_INCREMENTALSAXSOURCE_FILTER
