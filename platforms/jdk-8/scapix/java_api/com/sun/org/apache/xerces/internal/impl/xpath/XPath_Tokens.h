// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_XPATH_TOKENS_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_XPATH_TOKENS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::impl::xpath { class XPath_Tokens; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::impl::xpath::XPath_Tokens>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/impl/xpath/XPath$Tokens";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_XPATH_TOKENS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_XPATH_TOKENS)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_XPATH_TOKENS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/util/SymbolTable.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::org::apache::xerces::internal::impl::xpath::XPath_Tokens : public jni::object_base<"com/sun/org/apache/xerces/internal/impl/xpath/XPath$Tokens",
	java::lang::Object>
{
public:

	static jint EXPRTOKEN_OPEN_PAREN() { return get_static_field<"EXPRTOKEN_OPEN_PAREN", jint>(); }
	static jint EXPRTOKEN_CLOSE_PAREN() { return get_static_field<"EXPRTOKEN_CLOSE_PAREN", jint>(); }
	static jint EXPRTOKEN_OPEN_BRACKET() { return get_static_field<"EXPRTOKEN_OPEN_BRACKET", jint>(); }
	static jint EXPRTOKEN_CLOSE_BRACKET() { return get_static_field<"EXPRTOKEN_CLOSE_BRACKET", jint>(); }
	static jint EXPRTOKEN_PERIOD() { return get_static_field<"EXPRTOKEN_PERIOD", jint>(); }
	static jint EXPRTOKEN_DOUBLE_PERIOD() { return get_static_field<"EXPRTOKEN_DOUBLE_PERIOD", jint>(); }
	static jint EXPRTOKEN_ATSIGN() { return get_static_field<"EXPRTOKEN_ATSIGN", jint>(); }
	static jint EXPRTOKEN_COMMA() { return get_static_field<"EXPRTOKEN_COMMA", jint>(); }
	static jint EXPRTOKEN_DOUBLE_COLON() { return get_static_field<"EXPRTOKEN_DOUBLE_COLON", jint>(); }
	static jint EXPRTOKEN_NAMETEST_ANY() { return get_static_field<"EXPRTOKEN_NAMETEST_ANY", jint>(); }
	static jint EXPRTOKEN_NAMETEST_NAMESPACE() { return get_static_field<"EXPRTOKEN_NAMETEST_NAMESPACE", jint>(); }
	static jint EXPRTOKEN_NAMETEST_QNAME() { return get_static_field<"EXPRTOKEN_NAMETEST_QNAME", jint>(); }
	static jint EXPRTOKEN_NODETYPE_COMMENT() { return get_static_field<"EXPRTOKEN_NODETYPE_COMMENT", jint>(); }
	static jint EXPRTOKEN_NODETYPE_TEXT() { return get_static_field<"EXPRTOKEN_NODETYPE_TEXT", jint>(); }
	static jint EXPRTOKEN_NODETYPE_PI() { return get_static_field<"EXPRTOKEN_NODETYPE_PI", jint>(); }
	static jint EXPRTOKEN_NODETYPE_NODE() { return get_static_field<"EXPRTOKEN_NODETYPE_NODE", jint>(); }
	static jint EXPRTOKEN_OPERATOR_AND() { return get_static_field<"EXPRTOKEN_OPERATOR_AND", jint>(); }
	static jint EXPRTOKEN_OPERATOR_OR() { return get_static_field<"EXPRTOKEN_OPERATOR_OR", jint>(); }
	static jint EXPRTOKEN_OPERATOR_MOD() { return get_static_field<"EXPRTOKEN_OPERATOR_MOD", jint>(); }
	static jint EXPRTOKEN_OPERATOR_DIV() { return get_static_field<"EXPRTOKEN_OPERATOR_DIV", jint>(); }
	static jint EXPRTOKEN_OPERATOR_MULT() { return get_static_field<"EXPRTOKEN_OPERATOR_MULT", jint>(); }
	static jint EXPRTOKEN_OPERATOR_SLASH() { return get_static_field<"EXPRTOKEN_OPERATOR_SLASH", jint>(); }
	static jint EXPRTOKEN_OPERATOR_DOUBLE_SLASH() { return get_static_field<"EXPRTOKEN_OPERATOR_DOUBLE_SLASH", jint>(); }
	static jint EXPRTOKEN_OPERATOR_UNION() { return get_static_field<"EXPRTOKEN_OPERATOR_UNION", jint>(); }
	static jint EXPRTOKEN_OPERATOR_PLUS() { return get_static_field<"EXPRTOKEN_OPERATOR_PLUS", jint>(); }
	static jint EXPRTOKEN_OPERATOR_MINUS() { return get_static_field<"EXPRTOKEN_OPERATOR_MINUS", jint>(); }
	static jint EXPRTOKEN_OPERATOR_EQUAL() { return get_static_field<"EXPRTOKEN_OPERATOR_EQUAL", jint>(); }
	static jint EXPRTOKEN_OPERATOR_NOT_EQUAL() { return get_static_field<"EXPRTOKEN_OPERATOR_NOT_EQUAL", jint>(); }
	static jint EXPRTOKEN_OPERATOR_LESS() { return get_static_field<"EXPRTOKEN_OPERATOR_LESS", jint>(); }
	static jint EXPRTOKEN_OPERATOR_LESS_EQUAL() { return get_static_field<"EXPRTOKEN_OPERATOR_LESS_EQUAL", jint>(); }
	static jint EXPRTOKEN_OPERATOR_GREATER() { return get_static_field<"EXPRTOKEN_OPERATOR_GREATER", jint>(); }
	static jint EXPRTOKEN_OPERATOR_GREATER_EQUAL() { return get_static_field<"EXPRTOKEN_OPERATOR_GREATER_EQUAL", jint>(); }
	static jint EXPRTOKEN_FUNCTION_NAME() { return get_static_field<"EXPRTOKEN_FUNCTION_NAME", jint>(); }
	static jint EXPRTOKEN_AXISNAME_ANCESTOR() { return get_static_field<"EXPRTOKEN_AXISNAME_ANCESTOR", jint>(); }
	static jint EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF() { return get_static_field<"EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF", jint>(); }
	static jint EXPRTOKEN_AXISNAME_ATTRIBUTE() { return get_static_field<"EXPRTOKEN_AXISNAME_ATTRIBUTE", jint>(); }
	static jint EXPRTOKEN_AXISNAME_CHILD() { return get_static_field<"EXPRTOKEN_AXISNAME_CHILD", jint>(); }
	static jint EXPRTOKEN_AXISNAME_DESCENDANT() { return get_static_field<"EXPRTOKEN_AXISNAME_DESCENDANT", jint>(); }
	static jint EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF() { return get_static_field<"EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF", jint>(); }
	static jint EXPRTOKEN_AXISNAME_FOLLOWING() { return get_static_field<"EXPRTOKEN_AXISNAME_FOLLOWING", jint>(); }
	static jint EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING() { return get_static_field<"EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING", jint>(); }
	static jint EXPRTOKEN_AXISNAME_NAMESPACE() { return get_static_field<"EXPRTOKEN_AXISNAME_NAMESPACE", jint>(); }
	static jint EXPRTOKEN_AXISNAME_PARENT() { return get_static_field<"EXPRTOKEN_AXISNAME_PARENT", jint>(); }
	static jint EXPRTOKEN_AXISNAME_PRECEDING() { return get_static_field<"EXPRTOKEN_AXISNAME_PRECEDING", jint>(); }
	static jint EXPRTOKEN_AXISNAME_PRECEDING_SIBLING() { return get_static_field<"EXPRTOKEN_AXISNAME_PRECEDING_SIBLING", jint>(); }
	static jint EXPRTOKEN_AXISNAME_SELF() { return get_static_field<"EXPRTOKEN_AXISNAME_SELF", jint>(); }
	static jint EXPRTOKEN_LITERAL() { return get_static_field<"EXPRTOKEN_LITERAL", jint>(); }
	static jint EXPRTOKEN_NUMBER() { return get_static_field<"EXPRTOKEN_NUMBER", jint>(); }
	static jint EXPRTOKEN_VARIABLE_REFERENCE() { return get_static_field<"EXPRTOKEN_VARIABLE_REFERENCE", jint>(); }

	static jni::ref<com::sun::org::apache::xerces::internal::impl::xpath::XPath_Tokens> new_object(jni::ref<com::sun::org::apache::xerces::internal::util::SymbolTable> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::String> getTokenString(jint p1) { return call_method<"getTokenString", jni::ref<java::lang::String>>(p1); }
	void addToken(jni::ref<java::lang::String> p1) { return call_method<"addToken", void>(p1); }
	void addToken(jint p1) { return call_method<"addToken", void>(p1); }
	void rewind() { return call_method<"rewind", void>(); }
	jboolean hasMore() { return call_method<"hasMore", jboolean>(); }
	jint nextToken() { return call_method<"nextToken", jint>(); }
	jint peekToken() { return call_method<"peekToken", jint>(); }
	jni::ref<java::lang::String> nextTokenAsString() { return call_method<"nextTokenAsString", jni::ref<java::lang::String>>(); }
	void dumpTokens() { return call_method<"dumpTokens", void>(); }

protected:

	XPath_Tokens(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XPATH_XPATH_TOKENS
