// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Iterable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONLIST_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONLIST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::generic { class InstructionList; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::generic::InstructionList>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/generic/InstructionList";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Iterable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONLIST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONLIST)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONLIST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/BranchHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/BranchInstruction.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/CodeExceptionGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/CompoundInstruction.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Instruction.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionListObserver.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/LocalVariableGen.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::generic::InstructionList : public jni::object_base<"com/sun/org/apache/bcel/internal/generic/InstructionList",
	java::lang::Object,
	java::lang::Iterable>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> findHandle(jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::InstructionHandle>> p1, jni::ref<jni::array<jint>> p2, jint p3, jint p4) { return call_static_method<"findHandle", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2, p3, p4); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> new_object(jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> new_object(jni::ref<com::sun::org::apache::bcel::internal::generic::CompoundInstruction> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> new_object(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1) { return base_::new_object(p1); }
	void addObserver(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionListObserver> p1) { return call_method<"addObserver", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::BranchHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> p1) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::BranchHandle>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::CompoundInstruction> p1) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::CompoundInstruction> p2) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p2) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p2) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::BranchHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> p2) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::BranchHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::CompoundInstruction> p2) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p2) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p2) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> append(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p1) { return call_method<"append", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1); }
	jboolean contains(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1) { return call_method<"contains", jboolean>(p1); }
	jboolean contains(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"contains", jboolean>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> copy() { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList>>(); }
	void delete_(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1) { return call_method<"delete", void>(p1); }
	void delete_(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p2) { return call_method<"delete", void>(p1, p2); }
	void delete_(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"delete", void>(p1); }
	void delete_(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2) { return call_method<"delete", void>(p1, p2); }
	void dispose() { return call_method<"dispose", void>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> findHandle(jint p1) { return call_method<"findHandle", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1); }
	jni::ref<jni::array<jbyte>> getByteCode() { return call_method<"getByteCode", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getEnd() { return call_method<"getEnd", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::InstructionHandle>> getInstructionHandles() { return call_method<"getInstructionHandles", jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>>(); }
	jni::ref<jni::array<jint>> getInstructionPositions() { return call_method<"getInstructionPositions", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::Instruction>> getInstructions() { return call_method<"getInstructions", jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::Instruction>>>(); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getStart() { return call_method<"getStart", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::BranchHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> p1) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::BranchHandle>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::CompoundInstruction> p1) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::CompoundInstruction> p2) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p2) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p2) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::BranchHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::BranchInstruction> p2) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::BranchHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::CompoundInstruction> p2) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p2) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p2) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> insert(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p1) { return call_method<"insert", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(p1); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	void move(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2) { return call_method<"move", void>(p1, p2); }
	void move(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p3) { return call_method<"move", void>(p1, p2, p3); }
	void redirectBranches(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2) { return call_method<"redirectBranches", void>(p1, p2); }
	void redirectExceptionHandlers(jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::CodeExceptionGen>> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p3) { return call_method<"redirectExceptionHandlers", void>(p1, p2, p3); }
	void redirectLocalVariables(jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p3) { return call_method<"redirectLocalVariables", void>(p1, p2, p3); }
	void removeObserver(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionListObserver> p1) { return call_method<"removeObserver", void>(p1); }
	void replaceConstantPool(jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p2) { return call_method<"replaceConstantPool", void>(p1, p2); }
	void setPositions() { return call_method<"setPositions", void>(); }
	void setPositions(jboolean p1) { return call_method<"setPositions", void>(p1); }
	jint size() { return call_method<"size", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString(jboolean p1) { return call_method<"toString", jni::ref<java::lang::String>>(p1); }
	void update() { return call_method<"update", void>(); }

protected:

	InstructionList(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONLIST
