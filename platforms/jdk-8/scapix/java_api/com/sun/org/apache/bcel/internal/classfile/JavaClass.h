// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/AccessFlags.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Node.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_JAVACLASS_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_JAVACLASS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class JavaClass; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::JavaClass>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/JavaClass";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::AccessFlags, scapix::java_api::java::lang::Cloneable, scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Node, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_JAVACLASS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_JAVACLASS)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_JAVACLASS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/AnnotationEntry.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Attribute.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantPool.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Field.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Method.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Visitor.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/util/BCELComparator.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/util/Repository.h>
#include <scapix/java_api/java/io/DataOutputStream.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::JavaClass : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/JavaClass",
	com::sun::org::apache::bcel::internal::classfile::AccessFlags,
	java::lang::Cloneable,
	com::sun::org::apache::bcel::internal::classfile::Node,
	java::lang::Comparable>
{
public:

	static jni::ref<java::lang::String> EXTENSION() { return get_static_field<"EXTENSION", jni::ref<java::lang::String>>(); }
	static jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::JavaClass>> EMPTY_ARRAY() { return get_static_field<"EMPTY_ARRAY", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::JavaClass>>>(); }
	static jbyte HEAP() { return get_static_field<"HEAP", jbyte>(); }
	static jbyte FILE() { return get_static_field<"FILE", jbyte>(); }
	static jbyte ZIP() { return get_static_field<"ZIP", jbyte>(); }

	static jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator> getComparator() { return call_static_method<"getComparator", jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator>>(); }
	static void setComparator(jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator> p1) { return call_static_method<"setComparator", void>(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass> new_object(jint p1, jint p2, jni::ref<java::lang::String> p3, jint p4, jint p5, jint p6, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p7, jni::ref<jni::array<jint>> p8, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Field>> p9, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Method>> p10, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> p11) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass> new_object(jint p1, jint p2, jni::ref<java::lang::String> p3, jint p4, jint p5, jint p6, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p7, jni::ref<jni::array<jint>> p8, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Field>> p9, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Method>> p10, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> p11, jbyte p12) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
	void accept(jni::ref<com::sun::org::apache::bcel::internal::classfile::Visitor> p1) { return call_method<"accept", void>(p1); }
	jint compareTo(jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass> p1) { return call_method<"compareTo", jint>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass> copy() { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass>>(); }
	void dump(jni::ref<java::io::DataOutputStream> p1) { return call_method<"dump", void>(p1); }
	void dump(jni::ref<java::io::File> p1) { return call_method<"dump", void>(p1); }
	void dump(jni::ref<java::io::OutputStream> p1) { return call_method<"dump", void>(p1); }
	void dump(jni::ref<java::lang::String> p1) { return call_method<"dump", void>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::JavaClass>> getAllInterfaces() { return call_method<"getAllInterfaces", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::JavaClass>>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::AnnotationEntry>> getAnnotationEntries() { return call_method<"getAnnotationEntries", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::AnnotationEntry>>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> getAttributes() { return call_method<"getAttributes", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>>>(); }
	jni::ref<jni::array<jbyte>> getBytes() { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jint getClassNameIndex() { return call_method<"getClassNameIndex", jint>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> getConstantPool() { return call_method<"getConstantPool", jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Field>> getFields() { return call_method<"getFields", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Field>>>(); }
	jni::ref<java::lang::String> getFileName() { return call_method<"getFileName", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<jint>> getInterfaceIndices() { return call_method<"getInterfaceIndices", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<java::lang::String>> getInterfaceNames() { return call_method<"getInterfaceNames", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::JavaClass>> getInterfaces() { return call_method<"getInterfaces", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::JavaClass>>>(); }
	jint getMajor() { return call_method<"getMajor", jint>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Method> getMethod(jni::ref<java::lang::reflect::Method> p1) { return call_method<"getMethod", jni::ref<com::sun::org::apache::bcel::internal::classfile::Method>>(p1); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Method>> getMethods() { return call_method<"getMethods", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Method>>>(); }
	jint getMinor() { return call_method<"getMinor", jint>(); }
	jni::ref<java::lang::String> getPackageName() { return call_method<"getPackageName", jni::ref<java::lang::String>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::util::Repository> getRepository() { return call_method<"getRepository", jni::ref<com::sun::org::apache::bcel::internal::util::Repository>>(); }
	jbyte getSource() { return call_method<"getSource", jbyte>(); }
	jni::ref<java::lang::String> getSourceFileName() { return call_method<"getSourceFileName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSourceFilePath() { return call_method<"getSourceFilePath", jni::ref<java::lang::String>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass> getSuperClass() { return call_method<"getSuperClass", jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::JavaClass>> getSuperClasses() { return call_method<"getSuperClasses", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::JavaClass>>>(); }
	jni::ref<java::lang::String> getSuperclassName() { return call_method<"getSuperclassName", jni::ref<java::lang::String>>(); }
	jint getSuperclassNameIndex() { return call_method<"getSuperclassNameIndex", jint>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean implementationOf(jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass> p1) { return call_method<"implementationOf", jboolean>(p1); }
	jboolean instanceOf(jni::ref<com::sun::org::apache::bcel::internal::classfile::JavaClass> p1) { return call_method<"instanceOf", jboolean>(p1); }
	jboolean isAnonymous() { return call_method<"isAnonymous", jboolean>(); }
	jboolean isClass() { return call_method<"isClass", jboolean>(); }
	jboolean isNested() { return call_method<"isNested", jboolean>(); }
	jboolean isSuper() { return call_method<"isSuper", jboolean>(); }
	void setAttributes(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> p1) { return call_method<"setAttributes", void>(p1); }
	void setClassName(jni::ref<java::lang::String> p1) { return call_method<"setClassName", void>(p1); }
	void setClassNameIndex(jint p1) { return call_method<"setClassNameIndex", void>(p1); }
	void setConstantPool(jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p1) { return call_method<"setConstantPool", void>(p1); }
	void setFields(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Field>> p1) { return call_method<"setFields", void>(p1); }
	void setFileName(jni::ref<java::lang::String> p1) { return call_method<"setFileName", void>(p1); }
	void setInterfaceNames(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"setInterfaceNames", void>(p1); }
	void setInterfaces(jni::ref<jni::array<jint>> p1) { return call_method<"setInterfaces", void>(p1); }
	void setMajor(jint p1) { return call_method<"setMajor", void>(p1); }
	void setMethods(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Method>> p1) { return call_method<"setMethods", void>(p1); }
	void setMinor(jint p1) { return call_method<"setMinor", void>(p1); }
	void setRepository(jni::ref<com::sun::org::apache::bcel::internal::util::Repository> p1) { return call_method<"setRepository", void>(p1); }
	void setSourceFileName(jni::ref<java::lang::String> p1) { return call_method<"setSourceFileName", void>(p1); }
	void setSuperclassName(jni::ref<java::lang::String> p1) { return call_method<"setSuperclassName", void>(p1); }
	void setSuperclassNameIndex(jint p1) { return call_method<"setSuperclassNameIndex", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	JavaClass(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_JAVACLASS
