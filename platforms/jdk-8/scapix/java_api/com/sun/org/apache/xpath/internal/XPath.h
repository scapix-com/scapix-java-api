// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/ExpressionOwner.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_XPATH_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_XPATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xpath::internal { class XPath; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xpath::internal::XPath>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xpath/internal/XPath";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::com::sun::org::apache::xpath::internal::ExpressionOwner>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_XPATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_XPATH)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_XPATH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/PrefixResolver.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/Expression.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/XPathContext.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/XPathVisitor.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/compiler/FunctionTable.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/objects/XObject.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/xml/transform/ErrorListener.h>
#include <scapix/java_api/javax/xml/transform/SourceLocator.h>
#include <scapix/java_api/jdk/xml/internal/XMLSecurityManager.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xpath::internal::XPath : public jni::object_base<"com/sun/org/apache/xpath/internal/XPath",
	java::lang::Object,
	java::io::Serializable,
	com::sun::org::apache::xpath::internal::ExpressionOwner>
{
public:

	static jint SELECT() { return get_static_field<"SELECT", jint>(); }
	static jint MATCH() { return get_static_field<"MATCH", jint>(); }
	static jdouble MATCH_SCORE_NONE() { return get_static_field<"MATCH_SCORE_NONE", jdouble>(); }
	static jdouble MATCH_SCORE_QNAME() { return get_static_field<"MATCH_SCORE_QNAME", jdouble>(); }
	static jdouble MATCH_SCORE_NSWILD() { return get_static_field<"MATCH_SCORE_NSWILD", jdouble>(); }
	static jdouble MATCH_SCORE_NODETEST() { return get_static_field<"MATCH_SCORE_NODETEST", jdouble>(); }
	static jdouble MATCH_SCORE_OTHER() { return get_static_field<"MATCH_SCORE_OTHER", jdouble>(); }

	jni::ref<com::sun::org::apache::xpath::internal::Expression> getExpression() { return call_method<"getExpression", jni::ref<com::sun::org::apache::xpath::internal::Expression>>(); }
	void fixupVariables(jni::ref<java::util::Vector> p1, jint p2) { return call_method<"fixupVariables", void>(p1, p2); }
	void setExpression(jni::ref<com::sun::org::apache::xpath::internal::Expression> p1) { return call_method<"setExpression", void>(p1); }
	jni::ref<javax::xml::transform::SourceLocator> getLocator() { return call_method<"getLocator", jni::ref<javax::xml::transform::SourceLocator>>(); }
	jni::ref<java::lang::String> getPatternString() { return call_method<"getPatternString", jni::ref<java::lang::String>>(); }
	static jni::ref<com::sun::org::apache::xpath::internal::XPath> new_object(jni::ref<java::lang::String> p1, jni::ref<javax::xml::transform::SourceLocator> p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3, jint p4, jni::ref<javax::xml::transform::ErrorListener> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::org::apache::xpath::internal::XPath> new_object(jni::ref<java::lang::String> p1, jni::ref<javax::xml::transform::SourceLocator> p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3, jint p4, jni::ref<javax::xml::transform::ErrorListener> p5, jni::ref<com::sun::org::apache::xpath::internal::compiler::FunctionTable> p6, jni::ref<jdk::xml::internal::XMLSecurityManager> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	static jni::ref<com::sun::org::apache::xpath::internal::XPath> new_object(jni::ref<java::lang::String> p1, jni::ref<javax::xml::transform::SourceLocator> p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::org::apache::xpath::internal::XPath> new_object(jni::ref<java::lang::String> p1, jni::ref<javax::xml::transform::SourceLocator> p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3, jint p4, jni::ref<javax::xml::transform::ErrorListener> p5, jni::ref<com::sun::org::apache::xpath::internal::compiler::FunctionTable> p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<com::sun::org::apache::xpath::internal::XPath> new_object(jni::ref<com::sun::org::apache::xpath::internal::Expression> p1) { return base_::new_object(p1); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> execute(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jni::ref<org::w3c::dom::Node> p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3) { return call_method<"execute", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xpath::internal::objects::XObject> execute(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3) { return call_method<"execute", jni::ref<com::sun::org::apache::xpath::internal::objects::XObject>>(p1, p2, p3); }
	jboolean bool_(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p3) { return call_method<"bool", jboolean>(p1, p2, p3); }
	jdouble getMatchScore(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2) { return call_method<"getMatchScore", jdouble>(p1, p2); }
	void warn(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<java::lang::Object>> p4) { return call_method<"warn", void>(p1, p2, p3, p4); }
	void assertion(jboolean p1, jni::ref<java::lang::String> p2) { return call_method<"assertion", void>(p1, p2); }
	void error(jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<java::lang::Object>> p4) { return call_method<"error", void>(p1, p2, p3, p4); }
	void callVisitors(jni::ref<com::sun::org::apache::xpath::internal::ExpressionOwner> p1, jni::ref<com::sun::org::apache::xpath::internal::XPathVisitor> p2) { return call_method<"callVisitors", void>(p1, p2); }

protected:

	XPath(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_XPATH
