// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_SYM_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_SYM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler { class sym; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::sym>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/sym";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_SYM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_SYM)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_SYM

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::compiler::sym : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/sym",
	java::lang::Object>
{
public:

	static jint Literal() { return get_static_field<"Literal", jint>(); }
	static jint GE() { return get_static_field<"GE", jint>(); }
	static jint NAMESPACE() { return get_static_field<"NAMESPACE", jint>(); }
	static jint SLASH() { return get_static_field<"SLASH", jint>(); }
	static jint PI() { return get_static_field<"PI", jint>(); }
	static jint COMMENT() { return get_static_field<"COMMENT", jint>(); }
	static jint PIPARAM() { return get_static_field<"PIPARAM", jint>(); }
	static jint FOLLOWINGSIBLING() { return get_static_field<"FOLLOWINGSIBLING", jint>(); }
	static jint ATSIGN() { return get_static_field<"ATSIGN", jint>(); }
	static jint DSLASH() { return get_static_field<"DSLASH", jint>(); }
	static jint LPAREN() { return get_static_field<"LPAREN", jint>(); }
	static jint EXPRESSION() { return get_static_field<"EXPRESSION", jint>(); }
	static jint INT() { return get_static_field<"INT", jint>(); }
	static jint CHILD() { return get_static_field<"CHILD", jint>(); }
	static jint MINUS() { return get_static_field<"MINUS", jint>(); }
	static jint STAR() { return get_static_field<"STAR", jint>(); }
	static jint DESCENDANTORSELF() { return get_static_field<"DESCENDANTORSELF", jint>(); }
	static jint RPAREN() { return get_static_field<"RPAREN", jint>(); }
	static jint AND() { return get_static_field<"AND", jint>(); }
	static jint LT() { return get_static_field<"LT", jint>(); }
	static jint OR() { return get_static_field<"OR", jint>(); }
	static jint COMMA() { return get_static_field<"COMMA", jint>(); }
	static jint DDOT() { return get_static_field<"DDOT", jint>(); }
	static jint DIV() { return get_static_field<"DIV", jint>(); }
	static jint PLUS() { return get_static_field<"PLUS", jint>(); }
	static jint DOT() { return get_static_field<"DOT", jint>(); }
	static jint ID() { return get_static_field<"ID", jint>(); }
	static jint LE() { return get_static_field<"LE", jint>(); }
	static jint QNAME() { return get_static_field<"QNAME", jint>(); }
	static jint DESCENDANT() { return get_static_field<"DESCENDANT", jint>(); }
	static jint PRECEDINGSIBLING() { return get_static_field<"PRECEDINGSIBLING", jint>(); }
	static jint EOF() { return get_static_field<"EOF", jint>(); }
	static jint error() { return get_static_field<"error", jint>(); }
	static jint SELF() { return get_static_field<"SELF", jint>(); }
	static jint VBAR() { return get_static_field<"VBAR", jint>(); }
	static jint MOD() { return get_static_field<"MOD", jint>(); }
	static jint ANCESTORORSELF() { return get_static_field<"ANCESTORORSELF", jint>(); }
	static jint PRECEDING() { return get_static_field<"PRECEDING", jint>(); }
	static jint EQ() { return get_static_field<"EQ", jint>(); }
	static jint PATTERN() { return get_static_field<"PATTERN", jint>(); }
	static jint LBRACK() { return get_static_field<"LBRACK", jint>(); }
	static jint REAL() { return get_static_field<"REAL", jint>(); }
	static jint ANCESTOR() { return get_static_field<"ANCESTOR", jint>(); }
	static jint RBRACK() { return get_static_field<"RBRACK", jint>(); }
	static jint DCOLON() { return get_static_field<"DCOLON", jint>(); }
	static jint DOLLAR() { return get_static_field<"DOLLAR", jint>(); }
	static jint NE() { return get_static_field<"NE", jint>(); }
	static jint PARENT() { return get_static_field<"PARENT", jint>(); }
	static jint FOLLOWING() { return get_static_field<"FOLLOWING", jint>(); }
	static jint KEY() { return get_static_field<"KEY", jint>(); }
	static jint TEXT() { return get_static_field<"TEXT", jint>(); }
	static jint ATTRIBUTE() { return get_static_field<"ATTRIBUTE", jint>(); }
	static jint GT() { return get_static_field<"GT", jint>(); }
	static jint NODE() { return get_static_field<"NODE", jint>(); }
	static jni::ref<jni::array<jint>> OPERATORS() { return get_static_field<"OPERATORS", jni::ref<jni::array<jint>>>(); }

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::sym> new_object() { return base_::new_object(); }

protected:

	sym(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_SYM
