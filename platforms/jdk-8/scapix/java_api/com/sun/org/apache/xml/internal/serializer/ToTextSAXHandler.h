// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/ToSAXHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOTEXTSAXHANDLER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOTEXTSAXHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serializer { class ToTextSAXHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serializer::ToTextSAXHandler>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xml::internal::serializer::ToSAXHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOTEXTSAXHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOTEXTSAXHANDLER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOTEXTSAXHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#include <scapix/java_api/org/xml/sax/ext/LexicalHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serializer::ToTextSAXHandler : public jni::object_base<"com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler",
	com::sun::org::apache::xml::internal::serializer::ToSAXHandler>
{
public:

	void endElement(jni::ref<java::lang::String> p1) { return call_method<"endElement", void>(p1); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::serializer::ToTextSAXHandler> new_object(jni::ref<org::xml::sax::ContentHandler> p1, jni::ref<org::xml::sax::ext::LexicalHandler> p2, jni::ref<java::lang::String> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::serializer::ToTextSAXHandler> new_object(jni::ref<org::xml::sax::ContentHandler> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	void comment(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"comment", void>(p1, p2, p3); }
	void comment(jni::ref<java::lang::String> p1) { return call_method<"comment", void>(p1); }
	jni::ref<java::util::Properties> getOutputFormat() { return call_method<"getOutputFormat", jni::ref<java::util::Properties>>(); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	jni::ref<java::io::Writer> getWriter() { return call_method<"getWriter", jni::ref<java::io::Writer>>(); }
	void indent(jint p1) { return call_method<"indent", void>(p1); }
	jboolean reset() { return call_method<"reset", jboolean>(); }
	void serialize(jni::ref<org::w3c::dom::Node> p1) { return call_method<"serialize", void>(p1); }
	jboolean setEscaping(jboolean p1) { return call_method<"setEscaping", jboolean>(p1); }
	void setIndent(jboolean p1) { return call_method<"setIndent", void>(p1); }
	void setOutputFormat(jni::ref<java::util::Properties> p1) { return call_method<"setOutputFormat", void>(p1); }
	void setOutputStream(jni::ref<java::io::OutputStream> p1) { return call_method<"setOutputStream", void>(p1); }
	void setWriter(jni::ref<java::io::Writer> p1) { return call_method<"setWriter", void>(p1); }
	void addAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jboolean p6) { return call_method<"addAttribute", void>(p1, p2, p3, p4, p5, p6); }
	void attributeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"attributeDecl", void>(p1, p2, p3, p4, p5); }
	void elementDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"elementDecl", void>(p1, p2); }
	void externalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"externalEntityDecl", void>(p1, p2, p3); }
	void internalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"internalEntityDecl", void>(p1, p2); }
	void endPrefixMapping(jni::ref<java::lang::String> p1) { return call_method<"endPrefixMapping", void>(p1); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"ignorableWhitespace", void>(p1, p2, p3); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void setDocumentLocator(jni::ref<org::xml::sax::Locator> p1) { return call_method<"setDocumentLocator", void>(p1); }
	void skippedEntity(jni::ref<java::lang::String> p1) { return call_method<"skippedEntity", void>(p1); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void endCDATA() { return call_method<"endCDATA", void>(); }
	void endDTD() { return call_method<"endDTD", void>(); }
	void startCDATA() { return call_method<"startCDATA", void>(); }
	void startEntity(jni::ref<java::lang::String> p1) { return call_method<"startEntity", void>(p1); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startElement", void>(p1, p2, p3); }
	void startElement(jni::ref<java::lang::String> p1) { return call_method<"startElement", void>(p1); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void characters(jni::ref<java::lang::String> p1) { return call_method<"characters", void>(p1); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void addAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"addAttribute", void>(p1, p2); }
	jboolean startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"startPrefixMapping", jboolean>(p1, p2, p3); }
	void startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"startPrefixMapping", void>(p1, p2); }
	void namespaceAfterStartElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"namespaceAfterStartElement", void>(p1, p2); }

protected:

	ToTextSAXHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOTEXTSAXHANDLER
