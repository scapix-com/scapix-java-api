// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_URI_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_URI_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::util { class URI; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::util::URI>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/util/URI";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_URI_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_URI)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_URI

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/util/URI_MalformedURIException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::util::URI : public jni::object_base<"com/sun/org/apache/xerces/internal/util/URI",
	java::lang::Object,
	java::io::Serializable>
{
public:

	using MalformedURIException = URI_MalformedURIException;

	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object(jni::ref<com::sun::org::apache::xerces::internal::util::URI> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object(jni::ref<java::lang::String> p1, jboolean p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object(jni::ref<com::sun::org::apache::xerces::internal::util::URI> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object(jni::ref<com::sun::org::apache::xerces::internal::util::URI> p1, jni::ref<java::lang::String> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	static jni::ref<com::sun::org::apache::xerces::internal::util::URI> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jint p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::String> p6, jni::ref<java::lang::String> p7) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7); }
	void absolutize(jni::ref<com::sun::org::apache::xerces::internal::util::URI> p1) { return call_method<"absolutize", void>(p1); }
	jni::ref<java::lang::String> getScheme() { return call_method<"getScheme", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getSchemeSpecificPart() { return call_method<"getSchemeSpecificPart", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getUserinfo() { return call_method<"getUserinfo", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getHost() { return call_method<"getHost", jni::ref<java::lang::String>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	jni::ref<java::lang::String> getRegBasedAuthority() { return call_method<"getRegBasedAuthority", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAuthority() { return call_method<"getAuthority", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPath(jboolean p1, jboolean p2) { return call_method<"getPath", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::String> getPath() { return call_method<"getPath", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getQueryString() { return call_method<"getQueryString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getFragment() { return call_method<"getFragment", jni::ref<java::lang::String>>(); }
	void setScheme(jni::ref<java::lang::String> p1) { return call_method<"setScheme", void>(p1); }
	void setUserinfo(jni::ref<java::lang::String> p1) { return call_method<"setUserinfo", void>(p1); }
	void setHost(jni::ref<java::lang::String> p1) { return call_method<"setHost", void>(p1); }
	void setPort(jint p1) { return call_method<"setPort", void>(p1); }
	void setRegBasedAuthority(jni::ref<java::lang::String> p1) { return call_method<"setRegBasedAuthority", void>(p1); }
	void setPath(jni::ref<java::lang::String> p1) { return call_method<"setPath", void>(p1); }
	void appendPath(jni::ref<java::lang::String> p1) { return call_method<"appendPath", void>(p1); }
	void setQueryString(jni::ref<java::lang::String> p1) { return call_method<"setQueryString", void>(p1); }
	void setFragment(jni::ref<java::lang::String> p1) { return call_method<"setFragment", void>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean isGenericURI() { return call_method<"isGenericURI", jboolean>(); }
	jboolean isAbsoluteURI() { return call_method<"isAbsoluteURI", jboolean>(); }
	static jboolean isConformantSchemeName(jni::ref<java::lang::String> p1) { return call_static_method<"isConformantSchemeName", jboolean>(p1); }
	static jboolean isWellFormedAddress(jni::ref<java::lang::String> p1) { return call_static_method<"isWellFormedAddress", jboolean>(p1); }
	static jboolean isWellFormedIPv4Address(jni::ref<java::lang::String> p1) { return call_static_method<"isWellFormedIPv4Address", jboolean>(p1); }
	static jboolean isWellFormedIPv6Reference(jni::ref<java::lang::String> p1) { return call_static_method<"isWellFormedIPv6Reference", jboolean>(p1); }

protected:

	URI(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_UTIL_URI
