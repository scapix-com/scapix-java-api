// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_HTMLDTD_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_HTMLDTD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serialize { class HTMLdtd; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serialize::HTMLdtd>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serialize/HTMLdtd";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_HTMLDTD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_HTMLDTD)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_HTMLDTD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serialize::HTMLdtd : public jni::object_base<"com/sun/org/apache/xml/internal/serialize/HTMLdtd",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> HTMLPublicId() { return get_static_field<"HTMLPublicId", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> HTMLSystemId() { return get_static_field<"HTMLSystemId", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XHTMLPublicId() { return get_static_field<"XHTMLPublicId", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XHTMLSystemId() { return get_static_field<"XHTMLSystemId", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::org::apache::xml::internal::serialize::HTMLdtd> new_object() { return base_::new_object(); }
	static jboolean isEmptyTag(jni::ref<java::lang::String> p1) { return call_static_method<"isEmptyTag", jboolean>(p1); }
	static jboolean isElementContent(jni::ref<java::lang::String> p1) { return call_static_method<"isElementContent", jboolean>(p1); }
	static jboolean isPreserveSpace(jni::ref<java::lang::String> p1) { return call_static_method<"isPreserveSpace", jboolean>(p1); }
	static jboolean isOptionalClosing(jni::ref<java::lang::String> p1) { return call_static_method<"isOptionalClosing", jboolean>(p1); }
	static jboolean isOnlyOpening(jni::ref<java::lang::String> p1) { return call_static_method<"isOnlyOpening", jboolean>(p1); }
	static jboolean isClosing(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"isClosing", jboolean>(p1, p2); }
	static jboolean isURI(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"isURI", jboolean>(p1, p2); }
	static jboolean isBoolean(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_static_method<"isBoolean", jboolean>(p1, p2); }
	static jint charFromName(jni::ref<java::lang::String> p1) { return call_static_method<"charFromName", jint>(p1); }
	static jni::ref<java::lang::String> fromChar(jint p1) { return call_static_method<"fromChar", jni::ref<java::lang::String>>(p1); }

protected:

	HTMLdtd(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_HTMLDTD
