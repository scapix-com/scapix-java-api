// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/MethodGen.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Constants.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_METHODGENERATOR_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_METHODGENERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::util { class MethodGenerator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodGenerator";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::bcel::internal::generic::MethodGen, scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::Constants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_METHODGENERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_METHODGENERATOR)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_METHODGENERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Method.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Instruction.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionList.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/LocalVariableGen.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Type.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Pattern.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ClassGenerator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodGenerator",
	com::sun::org::apache::bcel::internal::generic::MethodGen,
	com::sun::org::apache::xalan::internal::xsltc::compiler::Constants>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> new_object(jint p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2, jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::Type>> p3, jni::ref<jni::array<java::lang::String>> p4, jni::ref<java::lang::String> p5, jni::ref<java::lang::String> p6, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p7, jni::ref<com::sun::org::apache::bcel::internal::generic::ConstantPoolGen> p8) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> addLocalVariable(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p3, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p4) { return call_method<"addLocalVariable", jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>>(p1, p2, p3, p4); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> addLocalVariable2(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::Type> p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p3) { return call_method<"addLocalVariable2", jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>>(p1, p2, p3); }
	void removeLocalVariable(jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> p1) { return call_method<"removeLocalVariable", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> loadDOM() { return call_method<"loadDOM", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> storeDOM() { return call_method<"storeDOM", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> storeHandler() { return call_method<"storeHandler", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> loadHandler() { return call_method<"loadHandler", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> storeIterator() { return call_method<"storeIterator", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> loadIterator() { return call_method<"loadIterator", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> setStartNode() { return call_method<"setStartNode", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> reset() { return call_method<"reset", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> nextNode() { return call_method<"nextNode", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> startElement() { return call_method<"startElement", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> endElement() { return call_method<"endElement", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> startDocument() { return call_method<"startDocument", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> endDocument() { return call_method<"endDocument", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> attribute() { return call_method<"attribute", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> uniqueAttribute() { return call_method<"uniqueAttribute", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> namespace_() { return call_method<"namespace", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> loadCurrentNode() { return call_method<"loadCurrentNode", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> storeCurrentNode() { return call_method<"storeCurrentNode", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> loadContextNode() { return call_method<"loadContextNode", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> storeContextNode() { return call_method<"storeContextNode", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jint getLocalIndex(jni::ref<java::lang::String> p1) { return call_method<"getLocalIndex", jint>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen> getLocalVariable(jni::ref<java::lang::String> p1) { return call_method<"getLocalVariable", jni::ref<com::sun::org::apache::bcel::internal::generic::LocalVariableGen>>(p1); }
	void setMaxLocals() { return call_method<"setMaxLocals", void>(); }
	void addInstructionList(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Pattern> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p2) { return call_method<"addInstructionList", void>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> getInstructionList(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Pattern> p1) { return call_method<"getInstructionList", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList>>(p1); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Method>> outlineChunks(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jint p2) { return call_method<"outlineChunks", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Method>>>(p1, p2); }
	void markChunkStart() { return call_method<"markChunkStart", void>(); }
	void markChunkEnd() { return call_method<"markChunkEnd", void>(); }

protected:

	MethodGenerator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_UTIL_METHODGENERATOR
