// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLComponent.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLDocumentFilter.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLDTDFilter.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XINCLUDE_XINCLUDEHANDLER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XINCLUDE_XINCLUDEHANDLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::xinclude { class XIncludeHandler; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::xinclude::XIncludeHandler>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xerces::internal::xni::parser::XMLComponent, scapix::java_api::com::sun::org::apache::xerces::internal::xni::parser::XMLDocumentFilter, scapix::java_api::com::sun::org::apache::xerces::internal::xni::parser::XMLDTDFilter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XINCLUDE_XINCLUDEHANDLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XINCLUDE_XINCLUDEHANDLER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XINCLUDE_XINCLUDEHANDLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/Augmentations.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/NamespaceContext.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/QName.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLAttributes.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLDTDHandler.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLDocumentHandler.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLLocator.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLResourceIdentifier.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLString.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLComponentManager.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLDTDSource.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLDocumentSource.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::xinclude::XIncludeHandler : public jni::object_base<"com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler",
	java::lang::Object,
	com::sun::org::apache::xerces::internal::xni::parser::XMLComponent,
	com::sun::org::apache::xerces::internal::xni::parser::XMLDocumentFilter,
	com::sun::org::apache::xerces::internal::xni::parser::XMLDTDFilter>
{
public:

	static jni::ref<java::lang::String> XINCLUDE_DEFAULT_CONFIGURATION() { return get_static_field<"XINCLUDE_DEFAULT_CONFIGURATION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> HTTP_ACCEPT() { return get_static_field<"HTTP_ACCEPT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> HTTP_ACCEPT_LANGUAGE() { return get_static_field<"HTTP_ACCEPT_LANGUAGE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XPOINTER() { return get_static_field<"XPOINTER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_NS_URI() { return get_static_field<"XINCLUDE_NS_URI", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_INCLUDE() { return get_static_field<"XINCLUDE_INCLUDE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_FALLBACK() { return get_static_field<"XINCLUDE_FALLBACK", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_PARSE_XML() { return get_static_field<"XINCLUDE_PARSE_XML", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_PARSE_TEXT() { return get_static_field<"XINCLUDE_PARSE_TEXT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_ATTR_HREF() { return get_static_field<"XINCLUDE_ATTR_HREF", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_ATTR_PARSE() { return get_static_field<"XINCLUDE_ATTR_PARSE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_ATTR_ENCODING() { return get_static_field<"XINCLUDE_ATTR_ENCODING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_ATTR_ACCEPT() { return get_static_field<"XINCLUDE_ATTR_ACCEPT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_ATTR_ACCEPT_LANGUAGE() { return get_static_field<"XINCLUDE_ATTR_ACCEPT_LANGUAGE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> XINCLUDE_INCLUDED() { return get_static_field<"XINCLUDE_INCLUDED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CURRENT_BASE_URI() { return get_static_field<"CURRENT_BASE_URI", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::org::apache::xerces::internal::xinclude::XIncludeHandler> new_object() { return base_::new_object(); }
	void reset(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLComponentManager> p1) { return call_method<"reset", void>(p1); }
	jni::ref<jni::array<java::lang::String>> getRecognizedFeatures() { return call_method<"getRecognizedFeatures", jni::ref<jni::array<java::lang::String>>>(); }
	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	jni::ref<jni::array<java::lang::String>> getRecognizedProperties() { return call_method<"getRecognizedProperties", jni::ref<jni::array<java::lang::String>>>(); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<java::lang::Boolean> getFeatureDefault(jni::ref<java::lang::String> p1) { return call_method<"getFeatureDefault", jni::ref<java::lang::Boolean>>(p1); }
	jni::ref<java::lang::Object> getPropertyDefault(jni::ref<java::lang::String> p1) { return call_method<"getPropertyDefault", jni::ref<java::lang::Object>>(p1); }
	void setDocumentHandler(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLDocumentHandler> p1) { return call_method<"setDocumentHandler", void>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::XMLDocumentHandler> getDocumentHandler() { return call_method<"getDocumentHandler", jni::ref<com::sun::org::apache::xerces::internal::xni::XMLDocumentHandler>>(); }
	void startDocument(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLLocator> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::NamespaceContext> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"startDocument", void>(p1, p2, p3, p4); }
	void xmlDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"xmlDecl", void>(p1, p2, p3, p4); }
	void doctypeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"doctypeDecl", void>(p1, p2, p3, p4); }
	void comment(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"comment", void>(p1, p2); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"processingInstruction", void>(p1, p2, p3); }
	void startElement(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLAttributes> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"startElement", void>(p1, p2, p3); }
	void emptyElement(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLAttributes> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"emptyElement", void>(p1, p2, p3); }
	void endElement(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"endElement", void>(p1, p2); }
	void startGeneralEntity(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"startGeneralEntity", void>(p1, p2, p3, p4); }
	void textDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"textDecl", void>(p1, p2, p3); }
	void endGeneralEntity(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"endGeneralEntity", void>(p1, p2); }
	void characters(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"characters", void>(p1, p2); }
	void ignorableWhitespace(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"ignorableWhitespace", void>(p1, p2); }
	void startCDATA(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"startCDATA", void>(p1); }
	void endCDATA(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endCDATA", void>(p1); }
	void endDocument(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endDocument", void>(p1); }
	void setDocumentSource(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDocumentSource> p1) { return call_method<"setDocumentSource", void>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDocumentSource> getDocumentSource() { return call_method<"getDocumentSource", jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDocumentSource>>(); }
	void attributeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<jni::array<java::lang::String>> p4, jni::ref<java::lang::String> p5, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p6, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p7, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p8) { return call_method<"attributeDecl", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void elementDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"elementDecl", void>(p1, p2, p3); }
	void endAttlist(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endAttlist", void>(p1); }
	void endConditional(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endConditional", void>(p1); }
	void endDTD(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endDTD", void>(p1); }
	void endExternalSubset(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endExternalSubset", void>(p1); }
	void endParameterEntity(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"endParameterEntity", void>(p1, p2); }
	void externalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"externalEntityDecl", void>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDSource> getDTDSource() { return call_method<"getDTDSource", jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDSource>>(); }
	void ignoredCharacters(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"ignoredCharacters", void>(p1, p2); }
	void internalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"internalEntityDecl", void>(p1, p2, p3, p4); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }
	void setDTDSource(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDTDSource> p1) { return call_method<"setDTDSource", void>(p1); }
	void startAttlist(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startAttlist", void>(p1, p2); }
	void startConditional(jshort p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startConditional", void>(p1, p2); }
	void startDTD(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLLocator> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startDTD", void>(p1, p2); }
	void startExternalSubset(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"startExternalSubset", void>(p1, p2); }
	void startParameterEntity(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"startParameterEntity", void>(p1, p2, p3, p4); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::XMLDTDHandler> getDTDHandler() { return call_method<"getDTDHandler", jni::ref<com::sun::org::apache::xerces::internal::xni::XMLDTDHandler>>(); }
	void setDTDHandler(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLDTDHandler> p1) { return call_method<"setDTDHandler", void>(p1); }
	jni::ref<java::lang::String> restoreLanguage() { return call_method<"restoreLanguage", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getBaseURI(jint p1) { return call_method<"getBaseURI", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getLanguage(jint p1) { return call_method<"getLanguage", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getRelativeURI(jint p1) { return call_method<"getRelativeURI", jni::ref<java::lang::String>>(p1); }

protected:

	XIncludeHandler(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XINCLUDE_XINCLUDEHANDLER
