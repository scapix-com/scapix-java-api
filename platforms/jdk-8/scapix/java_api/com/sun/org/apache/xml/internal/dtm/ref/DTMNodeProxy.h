// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/w3c/dom/Document.h>
#include <scapix/java_api/org/w3c/dom/Text.h>
#include <scapix/java_api/org/w3c/dom/Element.h>
#include <scapix/java_api/org/w3c/dom/Attr.h>
#include <scapix/java_api/org/w3c/dom/ProcessingInstruction.h>
#include <scapix/java_api/org/w3c/dom/Comment.h>
#include <scapix/java_api/org/w3c/dom/DocumentFragment.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_DTMNODEPROXY_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_DTMNODEPROXY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref { class DTMNodeProxy; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref::DTMNodeProxy>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::w3c::dom::Node, scapix::java_api::org::w3c::dom::Document, scapix::java_api::org::w3c::dom::Text, scapix::java_api::org::w3c::dom::Element, scapix::java_api::org::w3c::dom::Attr, scapix::java_api::org::w3c::dom::ProcessingInstruction, scapix::java_api::org::w3c::dom::Comment, scapix::java_api::org::w3c::dom::DocumentFragment>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_DTMNODEPROXY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_DTMNODEPROXY)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_DTMNODEPROXY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTM.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/CDATASection.h>
#include <scapix/java_api/org/w3c/dom/DOMConfiguration.h>
#include <scapix/java_api/org/w3c/dom/DOMImplementation.h>
#include <scapix/java_api/org/w3c/dom/DocumentType.h>
#include <scapix/java_api/org/w3c/dom/EntityReference.h>
#include <scapix/java_api/org/w3c/dom/NamedNodeMap.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#include <scapix/java_api/org/w3c/dom/TypeInfo.h>
#include <scapix/java_api/org/w3c/dom/UserDataHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::dtm::ref::DTMNodeProxy : public jni::object_base<"com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy",
	java::lang::Object,
	org::w3c::dom::Node,
	org::w3c::dom::Document,
	org::w3c::dom::Text,
	org::w3c::dom::Element,
	org::w3c::dom::Attr,
	org::w3c::dom::ProcessingInstruction,
	org::w3c::dom::Comment,
	org::w3c::dom::DocumentFragment>
{
public:

	jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> dtm() { return get_field<"dtm", jni::ref<com::sun::org::apache::xml::internal::dtm::DTM>>(); }
	void dtm(jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> v) { set_field<"dtm", jni::ref<com::sun::org::apache::xml::internal::dtm::DTM>>(v); }

	static jni::ref<com::sun::org::apache::xml::internal::dtm::ref::DTMNodeProxy> new_object(jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> p1, jint p2) { return base_::new_object(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> getDTM() { return call_method<"getDTM", jni::ref<com::sun::org::apache::xml::internal::dtm::DTM>>(); }
	jint getDTMNodeNumber() { return call_method<"getDTMNodeNumber", jint>(); }
	jboolean equals(jni::ref<org::w3c::dom::Node> p1) { return call_method<"equals", jboolean>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean sameNodeAs(jni::ref<org::w3c::dom::Node> p1) { return call_method<"sameNodeAs", jboolean>(p1); }
	jni::ref<java::lang::String> getNodeName() { return call_method<"getNodeName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getTarget() { return call_method<"getTarget", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getLocalName() { return call_method<"getLocalName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getPrefix() { return call_method<"getPrefix", jni::ref<java::lang::String>>(); }
	void setPrefix(jni::ref<java::lang::String> p1) { return call_method<"setPrefix", void>(p1); }
	jni::ref<java::lang::String> getNamespaceURI() { return call_method<"getNamespaceURI", jni::ref<java::lang::String>>(); }
	jboolean supports(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"supports", jboolean>(p1, p2); }
	jboolean isSupported(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"isSupported", jboolean>(p1, p2); }
	jni::ref<java::lang::String> getNodeValue() { return call_method<"getNodeValue", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getStringValue() { return call_method<"getStringValue", jni::ref<java::lang::String>>(); }
	void setNodeValue(jni::ref<java::lang::String> p1) { return call_method<"setNodeValue", void>(p1); }
	jshort getNodeType() { return call_method<"getNodeType", jshort>(); }
	jni::ref<org::w3c::dom::Node> getParentNode() { return call_method<"getParentNode", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> getOwnerNode() { return call_method<"getOwnerNode", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::NodeList> getChildNodes() { return call_method<"getChildNodes", jni::ref<org::w3c::dom::NodeList>>(); }
	jni::ref<org::w3c::dom::Node> getFirstChild() { return call_method<"getFirstChild", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> getLastChild() { return call_method<"getLastChild", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> getPreviousSibling() { return call_method<"getPreviousSibling", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::Node> getNextSibling() { return call_method<"getNextSibling", jni::ref<org::w3c::dom::Node>>(); }
	jni::ref<org::w3c::dom::NamedNodeMap> getAttributes() { return call_method<"getAttributes", jni::ref<org::w3c::dom::NamedNodeMap>>(); }
	jboolean hasAttribute(jni::ref<java::lang::String> p1) { return call_method<"hasAttribute", jboolean>(p1); }
	jboolean hasAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"hasAttributeNS", jboolean>(p1, p2); }
	jni::ref<org::w3c::dom::Document> getOwnerDocument() { return call_method<"getOwnerDocument", jni::ref<org::w3c::dom::Document>>(); }
	jni::ref<org::w3c::dom::Node> insertBefore(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"insertBefore", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<org::w3c::dom::Node> replaceChild(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Node> p2) { return call_method<"replaceChild", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<org::w3c::dom::Node> removeChild(jni::ref<org::w3c::dom::Node> p1) { return call_method<"removeChild", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::Node> appendChild(jni::ref<org::w3c::dom::Node> p1) { return call_method<"appendChild", jni::ref<org::w3c::dom::Node>>(p1); }
	jboolean hasChildNodes() { return call_method<"hasChildNodes", jboolean>(); }
	jni::ref<org::w3c::dom::Node> cloneNode(jboolean p1) { return call_method<"cloneNode", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<org::w3c::dom::DocumentType> getDoctype() { return call_method<"getDoctype", jni::ref<org::w3c::dom::DocumentType>>(); }
	jni::ref<org::w3c::dom::DOMImplementation> getImplementation() { return call_method<"getImplementation", jni::ref<org::w3c::dom::DOMImplementation>>(); }
	jni::ref<org::w3c::dom::Element> getDocumentElement() { return call_method<"getDocumentElement", jni::ref<org::w3c::dom::Element>>(); }
	jni::ref<org::w3c::dom::Element> createElement(jni::ref<java::lang::String> p1) { return call_method<"createElement", jni::ref<org::w3c::dom::Element>>(p1); }
	jni::ref<org::w3c::dom::DocumentFragment> createDocumentFragment() { return call_method<"createDocumentFragment", jni::ref<org::w3c::dom::DocumentFragment>>(); }
	jni::ref<org::w3c::dom::Text> createTextNode(jni::ref<java::lang::String> p1) { return call_method<"createTextNode", jni::ref<org::w3c::dom::Text>>(p1); }
	jni::ref<org::w3c::dom::Comment> createComment(jni::ref<java::lang::String> p1) { return call_method<"createComment", jni::ref<org::w3c::dom::Comment>>(p1); }
	jni::ref<org::w3c::dom::CDATASection> createCDATASection(jni::ref<java::lang::String> p1) { return call_method<"createCDATASection", jni::ref<org::w3c::dom::CDATASection>>(p1); }
	jni::ref<org::w3c::dom::ProcessingInstruction> createProcessingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createProcessingInstruction", jni::ref<org::w3c::dom::ProcessingInstruction>>(p1, p2); }
	jni::ref<org::w3c::dom::Attr> createAttribute(jni::ref<java::lang::String> p1) { return call_method<"createAttribute", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<org::w3c::dom::EntityReference> createEntityReference(jni::ref<java::lang::String> p1) { return call_method<"createEntityReference", jni::ref<org::w3c::dom::EntityReference>>(p1); }
	jni::ref<org::w3c::dom::NodeList> getElementsByTagName(jni::ref<java::lang::String> p1) { return call_method<"getElementsByTagName", jni::ref<org::w3c::dom::NodeList>>(p1); }
	jni::ref<org::w3c::dom::Node> importNode(jni::ref<org::w3c::dom::Node> p1, jboolean p2) { return call_method<"importNode", jni::ref<org::w3c::dom::Node>>(p1, p2); }
	jni::ref<org::w3c::dom::Element> createElementNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createElementNS", jni::ref<org::w3c::dom::Element>>(p1, p2); }
	jni::ref<org::w3c::dom::Attr> createAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"createAttributeNS", jni::ref<org::w3c::dom::Attr>>(p1, p2); }
	jni::ref<org::w3c::dom::NodeList> getElementsByTagNameNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getElementsByTagNameNS", jni::ref<org::w3c::dom::NodeList>>(p1, p2); }
	jni::ref<org::w3c::dom::Element> getElementById(jni::ref<java::lang::String> p1) { return call_method<"getElementById", jni::ref<org::w3c::dom::Element>>(p1); }
	jni::ref<org::w3c::dom::Text> splitText(jint p1) { return call_method<"splitText", jni::ref<org::w3c::dom::Text>>(p1); }
	jni::ref<java::lang::String> getData() { return call_method<"getData", jni::ref<java::lang::String>>(); }
	void setData(jni::ref<java::lang::String> p1) { return call_method<"setData", void>(p1); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<java::lang::String> substringData(jint p1, jint p2) { return call_method<"substringData", jni::ref<java::lang::String>>(p1, p2); }
	void appendData(jni::ref<java::lang::String> p1) { return call_method<"appendData", void>(p1); }
	void insertData(jint p1, jni::ref<java::lang::String> p2) { return call_method<"insertData", void>(p1, p2); }
	void deleteData(jint p1, jint p2) { return call_method<"deleteData", void>(p1, p2); }
	void replaceData(jint p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"replaceData", void>(p1, p2, p3); }
	jni::ref<java::lang::String> getTagName() { return call_method<"getTagName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getAttribute(jni::ref<java::lang::String> p1) { return call_method<"getAttribute", jni::ref<java::lang::String>>(p1); }
	void setAttribute(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setAttribute", void>(p1, p2); }
	void removeAttribute(jni::ref<java::lang::String> p1) { return call_method<"removeAttribute", void>(p1); }
	jni::ref<org::w3c::dom::Attr> getAttributeNode(jni::ref<java::lang::String> p1) { return call_method<"getAttributeNode", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<org::w3c::dom::Attr> setAttributeNode(jni::ref<org::w3c::dom::Attr> p1) { return call_method<"setAttributeNode", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<org::w3c::dom::Attr> removeAttributeNode(jni::ref<org::w3c::dom::Attr> p1) { return call_method<"removeAttributeNode", jni::ref<org::w3c::dom::Attr>>(p1); }
	jboolean hasAttributes() { return call_method<"hasAttributes", jboolean>(); }
	void normalize() { return call_method<"normalize", void>(); }
	jni::ref<java::lang::String> getAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeNS", jni::ref<java::lang::String>>(p1, p2); }
	void setAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"setAttributeNS", void>(p1, p2, p3); }
	void removeAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"removeAttributeNS", void>(p1, p2); }
	jni::ref<org::w3c::dom::Attr> getAttributeNodeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributeNodeNS", jni::ref<org::w3c::dom::Attr>>(p1, p2); }
	jni::ref<org::w3c::dom::Attr> setAttributeNodeNS(jni::ref<org::w3c::dom::Attr> p1) { return call_method<"setAttributeNodeNS", jni::ref<org::w3c::dom::Attr>>(p1); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jboolean getSpecified() { return call_method<"getSpecified", jboolean>(); }
	jni::ref<java::lang::String> getValue() { return call_method<"getValue", jni::ref<java::lang::String>>(); }
	void setValue(jni::ref<java::lang::String> p1) { return call_method<"setValue", void>(p1); }
	jni::ref<org::w3c::dom::Element> getOwnerElement() { return call_method<"getOwnerElement", jni::ref<org::w3c::dom::Element>>(); }
	jni::ref<org::w3c::dom::Node> adoptNode(jni::ref<org::w3c::dom::Node> p1) { return call_method<"adoptNode", jni::ref<org::w3c::dom::Node>>(p1); }
	jni::ref<java::lang::String> getInputEncoding() { return call_method<"getInputEncoding", jni::ref<java::lang::String>>(); }
	void setEncoding(jni::ref<java::lang::String> p1) { return call_method<"setEncoding", void>(p1); }
	jboolean getStandalone() { return call_method<"getStandalone", jboolean>(); }
	void setStandalone(jboolean p1) { return call_method<"setStandalone", void>(p1); }
	jboolean getStrictErrorChecking() { return call_method<"getStrictErrorChecking", jboolean>(); }
	void setStrictErrorChecking(jboolean p1) { return call_method<"setStrictErrorChecking", void>(p1); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }
	void setVersion(jni::ref<java::lang::String> p1) { return call_method<"setVersion", void>(p1); }
	jni::ref<java::lang::Object> setUserData(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jni::ref<org::w3c::dom::UserDataHandler> p3) { return call_method<"setUserData", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::lang::Object> getUserData(jni::ref<java::lang::String> p1) { return call_method<"getUserData", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> getFeature(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getFeature", jni::ref<java::lang::Object>>(p1, p2); }
	jboolean isEqualNode(jni::ref<org::w3c::dom::Node> p1) { return call_method<"isEqualNode", jboolean>(p1); }
	jni::ref<java::lang::String> lookupNamespaceURI(jni::ref<java::lang::String> p1) { return call_method<"lookupNamespaceURI", jni::ref<java::lang::String>>(p1); }
	jboolean isDefaultNamespace(jni::ref<java::lang::String> p1) { return call_method<"isDefaultNamespace", jboolean>(p1); }
	jni::ref<java::lang::String> lookupPrefix(jni::ref<java::lang::String> p1) { return call_method<"lookupPrefix", jni::ref<java::lang::String>>(p1); }
	jboolean isSameNode(jni::ref<org::w3c::dom::Node> p1) { return call_method<"isSameNode", jboolean>(p1); }
	void setTextContent(jni::ref<java::lang::String> p1) { return call_method<"setTextContent", void>(p1); }
	jni::ref<java::lang::String> getTextContent() { return call_method<"getTextContent", jni::ref<java::lang::String>>(); }
	jshort compareDocumentPosition(jni::ref<org::w3c::dom::Node> p1) { return call_method<"compareDocumentPosition", jshort>(p1); }
	jni::ref<java::lang::String> getBaseURI() { return call_method<"getBaseURI", jni::ref<java::lang::String>>(); }
	jni::ref<org::w3c::dom::Node> renameNode(jni::ref<org::w3c::dom::Node> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"renameNode", jni::ref<org::w3c::dom::Node>>(p1, p2, p3); }
	void normalizeDocument() { return call_method<"normalizeDocument", void>(); }
	jni::ref<org::w3c::dom::DOMConfiguration> getDomConfig() { return call_method<"getDomConfig", jni::ref<org::w3c::dom::DOMConfiguration>>(); }
	void setDocumentURI(jni::ref<java::lang::String> p1) { return call_method<"setDocumentURI", void>(p1); }
	jni::ref<java::lang::String> getDocumentURI() { return call_method<"getDocumentURI", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getActualEncoding() { return call_method<"getActualEncoding", jni::ref<java::lang::String>>(); }
	void setActualEncoding(jni::ref<java::lang::String> p1) { return call_method<"setActualEncoding", void>(p1); }
	jni::ref<org::w3c::dom::Text> replaceWholeText(jni::ref<java::lang::String> p1) { return call_method<"replaceWholeText", jni::ref<org::w3c::dom::Text>>(p1); }
	jni::ref<java::lang::String> getWholeText() { return call_method<"getWholeText", jni::ref<java::lang::String>>(); }
	jboolean isElementContentWhitespace() { return call_method<"isElementContentWhitespace", jboolean>(); }
	void setIdAttribute(jboolean p1) { return call_method<"setIdAttribute", void>(p1); }
	void setIdAttribute(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setIdAttribute", void>(p1, p2); }
	void setIdAttributeNode(jni::ref<org::w3c::dom::Attr> p1, jboolean p2) { return call_method<"setIdAttributeNode", void>(p1, p2); }
	void setIdAttributeNS(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"setIdAttributeNS", void>(p1, p2, p3); }
	jni::ref<org::w3c::dom::TypeInfo> getSchemaTypeInfo() { return call_method<"getSchemaTypeInfo", jni::ref<org::w3c::dom::TypeInfo>>(); }
	jboolean isId() { return call_method<"isId", jboolean>(); }
	jni::ref<java::lang::String> getXmlEncoding() { return call_method<"getXmlEncoding", jni::ref<java::lang::String>>(); }
	void setXmlEncoding(jni::ref<java::lang::String> p1) { return call_method<"setXmlEncoding", void>(p1); }
	jboolean getXmlStandalone() { return call_method<"getXmlStandalone", jboolean>(); }
	void setXmlStandalone(jboolean p1) { return call_method<"setXmlStandalone", void>(p1); }
	jni::ref<java::lang::String> getXmlVersion() { return call_method<"getXmlVersion", jni::ref<java::lang::String>>(); }
	void setXmlVersion(jni::ref<java::lang::String> p1) { return call_method<"setXmlVersion", void>(p1); }

protected:

	DTMNodeProxy(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_DTMNODEPROXY
