// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/NodeVector.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMIterator.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_NODESETDTM_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_NODESETDTM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xpath::internal { class NodeSetDTM; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xpath::internal::NodeSetDTM>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xpath/internal/NodeSetDTM";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xml::internal::utils::NodeVector, scapix::java_api::com::sun::org::apache::xml::internal::dtm::DTMIterator, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_NODESETDTM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_NODESETDTM)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_NODESETDTM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTM.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMFilter.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMManager.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/XPathContext.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#include <scapix/java_api/org/w3c/dom/traversal/NodeIterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xpath::internal::NodeSetDTM : public jni::object_base<"com/sun/org/apache/xpath/internal/NodeSetDTM",
	com::sun::org::apache::xml::internal::utils::NodeVector,
	com::sun::org::apache::xml::internal::dtm::DTMIterator,
	java::lang::Cloneable>
{
public:

	static jni::ref<com::sun::org::apache::xpath::internal::NodeSetDTM> new_object(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xpath::internal::NodeSetDTM> new_object(jint p1, jint p2, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xpath::internal::NodeSetDTM> new_object(jni::ref<com::sun::org::apache::xpath::internal::NodeSetDTM> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xpath::internal::NodeSetDTM> new_object(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xpath::internal::NodeSetDTM> new_object(jni::ref<org::w3c::dom::traversal::NodeIterator> p1, jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xpath::internal::NodeSetDTM> new_object(jni::ref<org::w3c::dom::NodeList> p1, jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xpath::internal::NodeSetDTM> new_object(jint p1, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> p2) { return base_::new_object(p1, p2); }
	void setEnvironment(jni::ref<java::lang::Object> p1) { return call_method<"setEnvironment", void>(p1); }
	jint getRoot() { return call_method<"getRoot", jint>(); }
	void setRoot(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"setRoot", void>(p1, p2); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> cloneWithReset() { return call_method<"cloneWithReset", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator>>(); }
	void reset() { return call_method<"reset", void>(); }
	jint getWhatToShow() { return call_method<"getWhatToShow", jint>(); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMFilter> getFilter() { return call_method<"getFilter", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMFilter>>(); }
	jboolean getExpandEntityReferences() { return call_method<"getExpandEntityReferences", jboolean>(); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> getDTM(jint p1) { return call_method<"getDTM", jni::ref<com::sun::org::apache::xml::internal::dtm::DTM>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> getDTMManager() { return call_method<"getDTMManager", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager>>(); }
	jint nextNode() { return call_method<"nextNode", jint>(); }
	jint previousNode() { return call_method<"previousNode", jint>(); }
	void detach() { return call_method<"detach", void>(); }
	void allowDetachToRelease(jboolean p1) { return call_method<"allowDetachToRelease", void>(p1); }
	jboolean isFresh() { return call_method<"isFresh", jboolean>(); }
	void runTo(jint p1) { return call_method<"runTo", void>(p1); }
	jint item(jint p1) { return call_method<"item", jint>(p1); }
	jint getLength() { return call_method<"getLength", jint>(); }
	void addNode(jint p1) { return call_method<"addNode", void>(p1); }
	void insertNode(jint p1, jint p2) { return call_method<"insertNode", void>(p1, p2); }
	void removeNode(jint p1) { return call_method<"removeNode", void>(p1); }
	void addNodes(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> p1) { return call_method<"addNodes", void>(p1); }
	void addNodesInDocOrder(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> p1, jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p2) { return call_method<"addNodesInDocOrder", void>(p1, p2); }
	jint addNodeInDocOrder(jint p1, jboolean p2, jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p3) { return call_method<"addNodeInDocOrder", jint>(p1, p2, p3); }
	jint addNodeInDocOrder(jint p1, jni::ref<com::sun::org::apache::xpath::internal::XPathContext> p2) { return call_method<"addNodeInDocOrder", jint>(p1, p2); }
	jint size() { return call_method<"size", jint>(); }
	void addElement(jint p1) { return call_method<"addElement", void>(p1); }
	void insertElementAt(jint p1, jint p2) { return call_method<"insertElementAt", void>(p1, p2); }
	void appendNodes(jni::ref<com::sun::org::apache::xml::internal::utils::NodeVector> p1) { return call_method<"appendNodes", void>(p1); }
	void removeAllElements() { return call_method<"removeAllElements", void>(); }
	jboolean removeElement(jint p1) { return call_method<"removeElement", jboolean>(p1); }
	void removeElementAt(jint p1) { return call_method<"removeElementAt", void>(p1); }
	void setElementAt(jint p1, jint p2) { return call_method<"setElementAt", void>(p1, p2); }
	void setItem(jint p1, jint p2) { return call_method<"setItem", void>(p1, p2); }
	jint elementAt(jint p1) { return call_method<"elementAt", jint>(p1); }
	jboolean contains(jint p1) { return call_method<"contains", jboolean>(p1); }
	jint indexOf(jint p1, jint p2) { return call_method<"indexOf", jint>(p1, p2); }
	jint indexOf(jint p1) { return call_method<"indexOf", jint>(p1); }
	jint getCurrentPos() { return call_method<"getCurrentPos", jint>(); }
	void setCurrentPos(jint p1) { return call_method<"setCurrentPos", void>(p1); }
	jint getCurrentNode() { return call_method<"getCurrentNode", jint>(); }
	jboolean getShouldCacheNodes() { return call_method<"getShouldCacheNodes", jboolean>(); }
	void setShouldCacheNodes(jboolean p1) { return call_method<"setShouldCacheNodes", void>(p1); }
	jboolean isMutable() { return call_method<"isMutable", jboolean>(); }
	jint getLast() { return call_method<"getLast", jint>(); }
	void setLast(jint p1) { return call_method<"setLast", void>(p1); }
	jboolean isDocOrdered() { return call_method<"isDocOrdered", jboolean>(); }
	jint getAxis() { return call_method<"getAxis", jint>(); }

protected:

	NodeSetDTM(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_NODESETDTM
