// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_XMLCHAR_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_XMLCHAR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::utils { class XMLChar; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::utils::XMLChar>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/utils/XMLChar";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_XMLCHAR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_XMLCHAR)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_XMLCHAR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::utils::XMLChar : public jni::object_base<"com/sun/org/apache/xml/internal/utils/XMLChar",
	java::lang::Object>
{
public:

	static jint MASK_VALID() { return get_static_field<"MASK_VALID", jint>(); }
	static jint MASK_SPACE() { return get_static_field<"MASK_SPACE", jint>(); }
	static jint MASK_NAME_START() { return get_static_field<"MASK_NAME_START", jint>(); }
	static jint MASK_NAME() { return get_static_field<"MASK_NAME", jint>(); }
	static jint MASK_PUBID() { return get_static_field<"MASK_PUBID", jint>(); }
	static jint MASK_CONTENT() { return get_static_field<"MASK_CONTENT", jint>(); }
	static jint MASK_NCNAME_START() { return get_static_field<"MASK_NCNAME_START", jint>(); }
	static jint MASK_NCNAME() { return get_static_field<"MASK_NCNAME", jint>(); }

	static jni::ref<com::sun::org::apache::xml::internal::utils::XMLChar> new_object() { return base_::new_object(); }
	static jboolean isSupplemental(jint p1) { return call_static_method<"isSupplemental", jboolean>(p1); }
	static jint supplemental(jchar p1, jchar p2) { return call_static_method<"supplemental", jint>(p1, p2); }
	static jchar highSurrogate(jint p1) { return call_static_method<"highSurrogate", jchar>(p1); }
	static jchar lowSurrogate(jint p1) { return call_static_method<"lowSurrogate", jchar>(p1); }
	static jboolean isHighSurrogate(jint p1) { return call_static_method<"isHighSurrogate", jboolean>(p1); }
	static jboolean isLowSurrogate(jint p1) { return call_static_method<"isLowSurrogate", jboolean>(p1); }
	static jboolean isValid(jint p1) { return call_static_method<"isValid", jboolean>(p1); }
	static jboolean isInvalid(jint p1) { return call_static_method<"isInvalid", jboolean>(p1); }
	static jboolean isContent(jint p1) { return call_static_method<"isContent", jboolean>(p1); }
	static jboolean isMarkup(jint p1) { return call_static_method<"isMarkup", jboolean>(p1); }
	static jboolean isSpace(jint p1) { return call_static_method<"isSpace", jboolean>(p1); }
	static jboolean isNameStart(jint p1) { return call_static_method<"isNameStart", jboolean>(p1); }
	static jboolean isName(jint p1) { return call_static_method<"isName", jboolean>(p1); }
	static jboolean isNCNameStart(jint p1) { return call_static_method<"isNCNameStart", jboolean>(p1); }
	static jboolean isNCName(jint p1) { return call_static_method<"isNCName", jboolean>(p1); }
	static jboolean isPubid(jint p1) { return call_static_method<"isPubid", jboolean>(p1); }
	static jboolean isValidName(jni::ref<java::lang::String> p1) { return call_static_method<"isValidName", jboolean>(p1); }
	static jboolean isValidNCName(jni::ref<java::lang::String> p1) { return call_static_method<"isValidNCName", jboolean>(p1); }
	static jboolean isValidNmtoken(jni::ref<java::lang::String> p1) { return call_static_method<"isValidNmtoken", jboolean>(p1); }
	static jboolean isValidIANAEncoding(jni::ref<java::lang::String> p1) { return call_static_method<"isValidIANAEncoding", jboolean>(p1); }
	static jboolean isValidJavaEncoding(jni::ref<java::lang::String> p1) { return call_static_method<"isValidJavaEncoding", jboolean>(p1); }
	static jboolean isValidQName(jni::ref<java::lang::String> p1) { return call_static_method<"isValidQName", jboolean>(p1); }

protected:

	XMLChar(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_XMLCHAR
