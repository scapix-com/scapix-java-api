// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/SerializerBase.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSTREAM_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serializer { class ToStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serializer::ToStream>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serializer/ToStream";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xml::internal::serializer::SerializerBase>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSTREAM)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/javax/xml/transform/Transformer.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serializer::ToStream : public jni::object_base<"com/sun/org/apache/xml/internal/serializer/ToStream",
	com::sun::org::apache::xml::internal::serializer::SerializerBase>
{
public:

	static jni::ref<com::sun::org::apache::xml::internal::serializer::ToStream> new_object() { return base_::new_object(); }
	void serialize(jni::ref<org::w3c::dom::Node> p1) { return call_method<"serialize", void>(p1); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	void elementDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"elementDecl", void>(p1, p2); }
	void internalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"internalEntityDecl", void>(p1, p2); }
	void setOutputFormat(jni::ref<java::util::Properties> p1) { return call_method<"setOutputFormat", void>(p1); }
	jni::ref<java::util::Properties> getOutputFormat() { return call_method<"getOutputFormat", jni::ref<java::util::Properties>>(); }
	void setWriter(jni::ref<java::io::Writer> p1) { return call_method<"setWriter", void>(p1); }
	jboolean setLineSepUse(jboolean p1) { return call_method<"setLineSepUse", jboolean>(p1); }
	void setOutputStream(jni::ref<java::io::OutputStream> p1) { return call_method<"setOutputStream", void>(p1); }
	jboolean setEscaping(jboolean p1) { return call_method<"setEscaping", jboolean>(p1); }
	void attributeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"attributeDecl", void>(p1, p2, p3, p4, p5); }
	jni::ref<java::io::Writer> getWriter() { return call_method<"getWriter", jni::ref<java::io::Writer>>(); }
	void externalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"externalEntityDecl", void>(p1, p2, p3); }
	void endNonEscaping() { return call_method<"endNonEscaping", void>(); }
	void startNonEscaping() { return call_method<"startNonEscaping", void>(); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void characters(jni::ref<java::lang::String> p1) { return call_method<"characters", void>(p1); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startElement", void>(p1, p2, p3); }
	void startElement(jni::ref<java::lang::String> p1) { return call_method<"startElement", void>(p1); }
	void processAttributes(jni::ref<java::io::Writer> p1, jint p2) { return call_method<"processAttributes", void>(p1, p2); }
	void writeAttrString(jni::ref<java::io::Writer> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"writeAttrString", void>(p1, p2, p3); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void endElement(jni::ref<java::lang::String> p1) { return call_method<"endElement", void>(p1); }
	void startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"startPrefixMapping", void>(p1, p2); }
	jboolean startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"startPrefixMapping", jboolean>(p1, p2, p3); }
	void comment(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"comment", void>(p1, p2, p3); }
	void endCDATA() { return call_method<"endCDATA", void>(); }
	void endDTD() { return call_method<"endDTD", void>(); }
	void endPrefixMapping(jni::ref<java::lang::String> p1) { return call_method<"endPrefixMapping", void>(p1); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"ignorableWhitespace", void>(p1, p2, p3); }
	void skippedEntity(jni::ref<java::lang::String> p1) { return call_method<"skippedEntity", void>(p1); }
	void startCDATA() { return call_method<"startCDATA", void>(); }
	void startEntity(jni::ref<java::lang::String> p1) { return call_method<"startEntity", void>(p1); }
	void startDTD(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startDTD", void>(p1, p2, p3); }
	jint getIndentAmount() { return call_method<"getIndentAmount", jint>(); }
	void setIndentAmount(jint p1) { return call_method<"setIndentAmount", void>(p1); }
	void setCdataSectionElements(jni::ref<java::util::List> p1) { return call_method<"setCdataSectionElements", void>(p1); }
	void flushPending() { return call_method<"flushPending", void>(); }
	void setContentHandler(jni::ref<org::xml::sax::ContentHandler> p1) { return call_method<"setContentHandler", void>(p1); }
	jboolean addAttributeAlways(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jboolean p6) { return call_method<"addAttributeAlways", jboolean>(p1, p2, p3, p4, p5, p6); }
	void setTransformer(jni::ref<javax::xml::transform::Transformer> p1) { return call_method<"setTransformer", void>(p1); }
	jboolean reset() { return call_method<"reset", jboolean>(); }
	void setEncoding(jni::ref<java::lang::String> p1) { return call_method<"setEncoding", void>(p1); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }
	void setDTDEntityExpansion(jboolean p1) { return call_method<"setDTDEntityExpansion", void>(p1); }
	void addCdataSectionElements(jni::ref<java::lang::String> p1) { return call_method<"addCdataSectionElements", void>(p1); }

protected:

	ToStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZER_TOSTREAM
