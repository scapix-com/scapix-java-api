// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLLocator.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYSCANNER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYSCANNER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::impl { class XMLEntityScanner; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::impl::XMLEntityScanner>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/impl/XMLEntityScanner";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xerces::internal::xni::XMLLocator>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYSCANNER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYSCANNER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYSCANNER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/PropertyManager.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/XMLEntityManager.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/util/SymbolTable.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLComponentManager.h>
#include <scapix/java_api/com/sun/xml/internal/stream/Entity_ScannedEntity.h>
#include <scapix/java_api/com/sun/xml/internal/stream/XMLBufferListener.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::impl::XMLEntityScanner : public jni::object_base<"com/sun/org/apache/xerces/internal/impl/XMLEntityScanner",
	java::lang::Object,
	com::sun::org::apache::xerces::internal::xni::XMLLocator>
{
public:

	static jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityScanner> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityScanner> new_object(jni::ref<com::sun::org::apache::xerces::internal::impl::PropertyManager> p1, jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityManager> p2) { return base_::new_object(p1, p2); }
	void setBufferSize(jint p1) { return call_method<"setBufferSize", void>(p1); }
	void reset(jni::ref<com::sun::org::apache::xerces::internal::impl::PropertyManager> p1) { return call_method<"reset", void>(p1); }
	void reset(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLComponentManager> p1) { return call_method<"reset", void>(p1); }
	void reset(jni::ref<com::sun::org::apache::xerces::internal::util::SymbolTable> p1, jni::ref<com::sun::org::apache::xerces::internal::impl::XMLEntityManager> p2, jni::ref<com::sun::org::apache::xerces::internal::impl::XMLErrorReporter> p3) { return call_method<"reset", void>(p1, p2, p3); }
	jni::ref<java::lang::String> getXMLVersion() { return call_method<"getXMLVersion", jni::ref<java::lang::String>>(); }
	void setXMLVersion(jni::ref<java::lang::String> p1) { return call_method<"setXMLVersion", void>(p1); }
	void setCurrentEntity(jni::ref<com::sun::xml::internal::stream::Entity_ScannedEntity> p1) { return call_method<"setCurrentEntity", void>(p1); }
	jni::ref<com::sun::xml::internal::stream::Entity_ScannedEntity> getCurrentEntity() { return call_method<"getCurrentEntity", jni::ref<com::sun::xml::internal::stream::Entity_ScannedEntity>>(); }
	jni::ref<java::lang::String> getBaseSystemId() { return call_method<"getBaseSystemId", jni::ref<java::lang::String>>(); }
	void setBaseSystemId(jni::ref<java::lang::String> p1) { return call_method<"setBaseSystemId", void>(p1); }
	jint getLineNumber() { return call_method<"getLineNumber", jint>(); }
	void setLineNumber(jint p1) { return call_method<"setLineNumber", void>(p1); }
	jint getColumnNumber() { return call_method<"getColumnNumber", jint>(); }
	void setColumnNumber(jint p1) { return call_method<"setColumnNumber", void>(p1); }
	jint getCharacterOffset() { return call_method<"getCharacterOffset", jint>(); }
	jni::ref<java::lang::String> getExpandedSystemId() { return call_method<"getExpandedSystemId", jni::ref<java::lang::String>>(); }
	void setExpandedSystemId(jni::ref<java::lang::String> p1) { return call_method<"setExpandedSystemId", void>(p1); }
	jni::ref<java::lang::String> getLiteralSystemId() { return call_method<"getLiteralSystemId", jni::ref<java::lang::String>>(); }
	void setLiteralSystemId(jni::ref<java::lang::String> p1) { return call_method<"setLiteralSystemId", void>(p1); }
	jni::ref<java::lang::String> getPublicId() { return call_method<"getPublicId", jni::ref<java::lang::String>>(); }
	void setPublicId(jni::ref<java::lang::String> p1) { return call_method<"setPublicId", void>(p1); }
	void setVersion(jni::ref<java::lang::String> p1) { return call_method<"setVersion", void>(p1); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getEncoding() { return call_method<"getEncoding", jni::ref<java::lang::String>>(); }
	void setEncoding(jni::ref<java::lang::String> p1) { return call_method<"setEncoding", void>(p1); }
	jboolean isExternal() { return call_method<"isExternal", jboolean>(); }
	jint getChar(jint p1) { return call_method<"getChar", jint>(p1); }
	jint peekChar() { return call_method<"peekChar", jint>(); }
	jboolean isSpace(jchar p1) { return call_method<"isSpace", jboolean>(p1); }
	jboolean arrangeCapacity(jint p1) { return call_method<"arrangeCapacity", jboolean>(p1); }
	jboolean arrangeCapacity(jint p1, jboolean p2) { return call_method<"arrangeCapacity", jboolean>(p1, p2); }
	void registerListener(jni::ref<com::sun::xml::internal::stream::XMLBufferListener> p1) { return call_method<"registerListener", void>(p1); }
	void invokeListeners(jint p1) { return call_method<"invokeListeners", void>(p1); }

protected:

	XMLEntityScanner(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_IMPL_XMLENTITYSCANNER
