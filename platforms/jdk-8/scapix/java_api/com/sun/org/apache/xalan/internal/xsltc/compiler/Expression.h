// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SyntaxTreeNode.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_EXPRESSION_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_EXPRESSION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler { class Expression; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::Expression>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/Expression";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::SyntaxTreeNode>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_EXPRESSION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_EXPRESSION)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_EXPRESSION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionList.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/FlowList.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SymbolTable.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ClassGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodType.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/Type.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::org::apache::xalan::internal::xsltc::compiler::Expression : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/Expression",
	com::sun::org::apache::xalan::internal::xsltc::compiler::SyntaxTreeNode>
{
public:

	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> getType() { return call_method<"getType", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jboolean hasPositionCall() { return call_method<"hasPositionCall", jboolean>(); }
	jboolean hasLastCall() { return call_method<"hasLastCall", jboolean>(); }
	jni::ref<java::lang::Object> evaluateAtCompileTime() { return call_method<"evaluateAtCompileTime", jni::ref<java::lang::Object>>(); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> typeCheck(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SymbolTable> p1) { return call_method<"typeCheck", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(p1); }
	void translate(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"translate", void>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> compile(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"compile", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList>>(p1, p2); }
	void translateDesynthesized(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"translateDesynthesized", void>(p1, p2); }
	void startIterator(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"startIterator", void>(p1, p2); }
	void synthesize(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"synthesize", void>(p1, p2); }
	void desynthesize(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"desynthesize", void>(p1, p2); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> getFalseList() { return call_method<"getFalseList", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList>>(); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> getTrueList() { return call_method<"getTrueList", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList>>(); }
	void backPatchFalseList(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"backPatchFalseList", void>(p1); }
	void backPatchTrueList(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"backPatchTrueList", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodType> lookupPrimop(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SymbolTable> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodType> p3) { return call_method<"lookupPrimop", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodType>>(p1, p2, p3); }

protected:

	Expression(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_EXPRESSION
