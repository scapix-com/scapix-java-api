// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Node.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_ATTRIBUTE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_ATTRIBUTE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class Attribute; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Attribute>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/Attribute";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable, scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Node>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_ATTRIBUTE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_ATTRIBUTE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_ATTRIBUTE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantPool.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/UnknownAttributeReader.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Visitor.h>
#include <scapix/java_api/java/io/DataInput.h>
#include <scapix/java_api/java/io/DataInputStream.h>
#include <scapix/java_api/java/io/DataOutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::Attribute : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/Attribute",
	java::lang::Object,
	java::lang::Cloneable,
	com::sun::org::apache::bcel::internal::classfile::Node>
{
public:

	static jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> EMPTY_ARRAY() { return get_static_field<"EMPTY_ARRAY", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>>>(); }

	static void addAttributeReader(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::bcel::internal::classfile::UnknownAttributeReader> p2) { return call_static_method<"addAttributeReader", void>(p1, p2); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute> readAttribute(jni::ref<java::io::DataInput> p1, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p2) { return call_static_method<"readAttribute", jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute>>(p1, p2); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute> readAttribute(jni::ref<java::io::DataInputStream> p1, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p2) { return call_static_method<"readAttribute", jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute>>(p1, p2); }
	static void removeAttributeReader(jni::ref<java::lang::String> p1) { return call_static_method<"removeAttributeReader", void>(p1); }
	void accept(jni::ref<com::sun::org::apache::bcel::internal::classfile::Visitor> p1) { return call_method<"accept", void>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute> copy(jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p1) { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::classfile::Attribute>>(p1); }
	void dump(jni::ref<java::io::DataOutputStream> p1) { return call_method<"dump", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> getConstantPool() { return call_method<"getConstantPool", jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool>>(); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jint getNameIndex() { return call_method<"getNameIndex", jint>(); }
	jbyte getTag() { return call_method<"getTag", jbyte>(); }
	void setConstantPool(jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p1) { return call_method<"setConstantPool", void>(p1); }
	void setLength(jint p1) { return call_method<"setLength", void>(p1); }
	void setNameIndex(jint p1) { return call_method<"setNameIndex", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Attribute(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_ATTRIBUTE
