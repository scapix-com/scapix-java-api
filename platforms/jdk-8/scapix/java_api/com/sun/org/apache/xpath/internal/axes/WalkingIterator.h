// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xpath/internal/axes/LocPathIterator.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/ExpressionOwner.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKINGITERATOR_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKINGITERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xpath::internal::axes { class WalkingIterator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xpath::internal::axes::WalkingIterator>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xpath/internal/axes/WalkingIterator";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xpath::internal::axes::LocPathIterator, scapix::java_api::com::sun::org::apache::xpath::internal::ExpressionOwner>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKINGITERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKINGITERATOR)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKINGITERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/PrefixResolver.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/Expression.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/XPathVisitor.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/axes/AxesWalker.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xpath::internal::axes::WalkingIterator : public jni::object_base<"com/sun/org/apache/xpath/internal/axes/WalkingIterator",
	com::sun::org::apache::xpath::internal::axes::LocPathIterator,
	com::sun::org::apache::xpath::internal::ExpressionOwner>
{
public:

	static jni::ref<com::sun::org::apache::xpath::internal::axes::WalkingIterator> new_object(jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p1) { return base_::new_object(p1); }
	jint getAnalysisBits() { return call_method<"getAnalysisBits", jint>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	void reset() { return call_method<"reset", void>(); }
	void setRoot(jint p1, jni::ref<java::lang::Object> p2) { return call_method<"setRoot", void>(p1, p2); }
	jint nextNode() { return call_method<"nextNode", jint>(); }
	jni::ref<com::sun::org::apache::xpath::internal::axes::AxesWalker> getFirstWalker() { return call_method<"getFirstWalker", jni::ref<com::sun::org::apache::xpath::internal::axes::AxesWalker>>(); }
	void setFirstWalker(jni::ref<com::sun::org::apache::xpath::internal::axes::AxesWalker> p1) { return call_method<"setFirstWalker", void>(p1); }
	void setLastUsedWalker(jni::ref<com::sun::org::apache::xpath::internal::axes::AxesWalker> p1) { return call_method<"setLastUsedWalker", void>(p1); }
	jni::ref<com::sun::org::apache::xpath::internal::axes::AxesWalker> getLastUsedWalker() { return call_method<"getLastUsedWalker", jni::ref<com::sun::org::apache::xpath::internal::axes::AxesWalker>>(); }
	void detach() { return call_method<"detach", void>(); }
	void fixupVariables(jni::ref<java::util::Vector> p1, jint p2) { return call_method<"fixupVariables", void>(p1, p2); }
	void callVisitors(jni::ref<com::sun::org::apache::xpath::internal::ExpressionOwner> p1, jni::ref<com::sun::org::apache::xpath::internal::XPathVisitor> p2) { return call_method<"callVisitors", void>(p1, p2); }
	jni::ref<com::sun::org::apache::xpath::internal::Expression> getExpression() { return call_method<"getExpression", jni::ref<com::sun::org::apache::xpath::internal::Expression>>(); }
	void setExpression(jni::ref<com::sun::org::apache::xpath::internal::Expression> p1) { return call_method<"setExpression", void>(p1); }
	jboolean deepEquals(jni::ref<com::sun::org::apache::xpath::internal::Expression> p1) { return call_method<"deepEquals", jboolean>(p1); }

protected:

	WalkingIterator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_AXES_WALKINGITERATOR
