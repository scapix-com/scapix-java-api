// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XNIException.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_PARSER_XMLPARSEEXCEPTION_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_PARSER_XMLPARSEEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::xni::parser { class XMLParseException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::xni::parser::XMLParseException>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/xni/parser/XMLParseException";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xerces::internal::xni::XNIException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_PARSER_XMLPARSEEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_PARSER_XMLPARSEEXCEPTION)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_PARSER_XMLPARSEEXCEPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLLocator.h>
#include <scapix/java_api/java/lang/Exception.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::xni::parser::XMLParseException : public jni::object_base<"com/sun/org/apache/xerces/internal/xni/parser/XMLParseException",
	com::sun::org::apache::xerces::internal::xni::XNIException>
{
public:

	static jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLParseException> new_object(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLLocator> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLParseException> new_object(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLLocator> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Exception> p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::String> getPublicId() { return call_method<"getPublicId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getExpandedSystemId() { return call_method<"getExpandedSystemId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getLiteralSystemId() { return call_method<"getLiteralSystemId", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getBaseSystemId() { return call_method<"getBaseSystemId", jni::ref<java::lang::String>>(); }
	jint getLineNumber() { return call_method<"getLineNumber", jint>(); }
	jint getColumnNumber() { return call_method<"getColumnNumber", jint>(); }
	jint getCharacterOffset() { return call_method<"getCharacterOffset", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	XMLParseException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_PARSER_XMLPARSEEXCEPTION
