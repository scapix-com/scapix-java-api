// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_FLOWLIST_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_FLOWLIST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler { class FlowList; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/FlowList";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_FLOWLIST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_FLOWLIST)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_FLOWLIST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/FlowList",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> new_object(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> new_object(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> p1) { return base_::new_object(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> add(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"add", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList>>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> append(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> p1) { return call_method<"append", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList>>(p1); }
	void backPatch(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> p1) { return call_method<"backPatch", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList> copyAndRedirect(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p1, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p2) { return call_method<"copyAndRedirect", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::FlowList>>(p1, p2); }

protected:

	FlowList(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_FLOWLIST
