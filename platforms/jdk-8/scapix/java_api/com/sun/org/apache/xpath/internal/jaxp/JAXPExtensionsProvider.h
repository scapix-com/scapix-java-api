// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xpath/internal/ExtensionsProvider.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_JAXP_JAXPEXTENSIONSPROVIDER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_JAXP_JAXPEXTENSIONSPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xpath::internal::jaxp { class JAXPExtensionsProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xpath::internal::jaxp::JAXPExtensionsProvider>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xpath/internal/jaxp/JAXPExtensionsProvider";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xpath::internal::ExtensionsProvider>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_JAXP_JAXPEXTENSIONSPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_JAXP_JAXPEXTENSIONSPROVIDER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_JAXP_JAXPEXTENSIONSPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xpath/internal/functions/FuncExtFunction.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/xml/xpath/XPathFunctionResolver.h>
#include <scapix/java_api/jdk/xml/internal/JdkXmlFeatures.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xpath::internal::jaxp::JAXPExtensionsProvider : public jni::object_base<"com/sun/org/apache/xpath/internal/jaxp/JAXPExtensionsProvider",
	java::lang::Object,
	com::sun::org::apache::xpath::internal::ExtensionsProvider>
{
public:

	static jni::ref<com::sun::org::apache::xpath::internal::jaxp::JAXPExtensionsProvider> new_object(jni::ref<javax::xml::xpath::XPathFunctionResolver> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xpath::internal::jaxp::JAXPExtensionsProvider> new_object(jni::ref<javax::xml::xpath::XPathFunctionResolver> p1, jboolean p2, jni::ref<jdk::xml::internal::JdkXmlFeatures> p3) { return base_::new_object(p1, p2, p3); }
	jboolean functionAvailable(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"functionAvailable", jboolean>(p1, p2); }
	jboolean elementAvailable(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"elementAvailable", jboolean>(p1, p2); }
	jni::ref<java::lang::Object> extFunction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::util::Vector> p3, jni::ref<java::lang::Object> p4) { return call_method<"extFunction", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<java::lang::Object> extFunction(jni::ref<com::sun::org::apache::xpath::internal::functions::FuncExtFunction> p1, jni::ref<java::util::Vector> p2) { return call_method<"extFunction", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	JAXPExtensionsProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XPATH_INTERNAL_JAXP_JAXPEXTENSIONSPROVIDER
