// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/TopLevelElement.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_WHITESPACE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_WHITESPACE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler { class Whitespace; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::Whitespace>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/Whitespace";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::TopLevelElement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_WHITESPACE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_WHITESPACE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_WHITESPACE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/BranchHandle.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionList.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Parser.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SymbolTable.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ClassGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/Type.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::org::apache::xalan::internal::xsltc::compiler::Whitespace : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/Whitespace",
	com::sun::org::apache::xalan::internal::xsltc::compiler::TopLevelElement>
{
public:

	static jint USE_PREDICATE() { return get_static_field<"USE_PREDICATE", jint>(); }
	static jint STRIP_SPACE() { return get_static_field<"STRIP_SPACE", jint>(); }
	static jint PRESERVE_SPACE() { return get_static_field<"PRESERVE_SPACE", jint>(); }
	static jint RULE_NONE() { return get_static_field<"RULE_NONE", jint>(); }
	static jint RULE_ELEMENT() { return get_static_field<"RULE_ELEMENT", jint>(); }
	static jint RULE_NAMESPACE() { return get_static_field<"RULE_NAMESPACE", jint>(); }
	static jint RULE_ALL() { return get_static_field<"RULE_ALL", jint>(); }

	void parseContents(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser> p1) { return call_method<"parseContents", void>(p1); }
	jni::ref<java::util::Vector> getRules() { return call_method<"getRules", jni::ref<java::util::Vector>>(); }
	static void compileStripSpace(jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::BranchHandle>> p1, jint p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p3) { return call_static_method<"compileStripSpace", void>(p1, p2, p3); }
	static void compilePreserveSpace(jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::BranchHandle>> p1, jint p2, jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionList> p3) { return call_static_method<"compilePreserveSpace", void>(p1, p2, p3); }
	static jint translateRules(jni::ref<java::util::Vector> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p2) { return call_static_method<"translateRules", jint>(p1, p2); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> typeCheck(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SymbolTable> p1) { return call_method<"typeCheck", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(p1); }
	void translate(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"translate", void>(p1, p2); }

protected:

	Whitespace(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_WHITESPACE
