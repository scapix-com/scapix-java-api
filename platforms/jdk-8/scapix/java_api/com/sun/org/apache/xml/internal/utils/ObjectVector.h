// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_OBJECTVECTOR_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_OBJECTVECTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::utils { class ObjectVector; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::utils::ObjectVector>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/utils/ObjectVector";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_OBJECTVECTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_OBJECTVECTOR)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_OBJECTVECTOR

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::utils::ObjectVector : public jni::object_base<"com/sun/org/apache/xml/internal/utils/ObjectVector",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<com::sun::org::apache::xml::internal::utils::ObjectVector> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::ObjectVector> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::ObjectVector> new_object(jint p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::org::apache::xml::internal::utils::ObjectVector> new_object(jni::ref<com::sun::org::apache::xml::internal::utils::ObjectVector> p1) { return base_::new_object(p1); }
	jint size() { return call_method<"size", jint>(); }
	void setSize(jint p1) { return call_method<"setSize", void>(p1); }
	void addElement(jni::ref<java::lang::Object> p1) { return call_method<"addElement", void>(p1); }
	void addElements(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"addElements", void>(p1, p2); }
	void addElements(jint p1) { return call_method<"addElements", void>(p1); }
	void insertElementAt(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"insertElementAt", void>(p1, p2); }
	void removeAllElements() { return call_method<"removeAllElements", void>(); }
	jboolean removeElement(jni::ref<java::lang::Object> p1) { return call_method<"removeElement", jboolean>(p1); }
	void removeElementAt(jint p1) { return call_method<"removeElementAt", void>(p1); }
	void setElementAt(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"setElementAt", void>(p1, p2); }
	jni::ref<java::lang::Object> elementAt(jint p1) { return call_method<"elementAt", jni::ref<java::lang::Object>>(p1); }
	jboolean contains(jni::ref<java::lang::Object> p1) { return call_method<"contains", jboolean>(p1); }
	jint indexOf(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"indexOf", jint>(p1, p2); }
	jint indexOf(jni::ref<java::lang::Object> p1) { return call_method<"indexOf", jint>(p1); }
	jint lastIndexOf(jni::ref<java::lang::Object> p1) { return call_method<"lastIndexOf", jint>(p1); }
	void setToSize(jint p1) { return call_method<"setToSize", void>(p1); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	ObjectVector(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_OBJECTVECTOR
