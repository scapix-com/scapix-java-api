// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/Translet.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_ABSTRACTTRANSLET_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_ABSTRACTTRANSLET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::runtime { class AbstractTranslet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::runtime::AbstractTranslet>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/runtime/AbstractTranslet";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::Translet>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_ABSTRACTTRANSLET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_ABSTRACTTRANSLET)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_ABSTRACTTRANSLET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/DOM.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/DOMCache.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/dom/KeyIndex.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/runtime/MessageHandler.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMAxisIterator.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serializer/SerializationHandler.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/DecimalFormat.h>
#include <scapix/java_api/java/text/DecimalFormatSymbols.h>
#include <scapix/java_api/java/util/ArrayList.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/xml/transform/Templates.h>
#include <scapix/java_api/org/w3c/dom/Document.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::runtime::AbstractTranslet : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/runtime/AbstractTranslet",
	java::lang::Object,
	com::sun::org::apache::xalan::internal::xsltc::Translet>
{
public:

	jni::ref<java::lang::String> _version() { return get_field<"_version", jni::ref<java::lang::String>>(); }
	void _version(jni::ref<java::lang::String> v) { set_field<"_version", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> _method() { return get_field<"_method", jni::ref<java::lang::String>>(); }
	void _method(jni::ref<java::lang::String> v) { set_field<"_method", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> _encoding() { return get_field<"_encoding", jni::ref<java::lang::String>>(); }
	void _encoding(jni::ref<java::lang::String> v) { set_field<"_encoding", jni::ref<java::lang::String>>(v); }
	jboolean _omitHeader() { return get_field<"_omitHeader", jboolean>(); }
	void _omitHeader(jboolean v) { set_field<"_omitHeader", jboolean>(v); }
	jni::ref<java::lang::String> _standalone() { return get_field<"_standalone", jni::ref<java::lang::String>>(); }
	void _standalone(jni::ref<java::lang::String> v) { set_field<"_standalone", jni::ref<java::lang::String>>(v); }
	jboolean _isStandalone() { return get_field<"_isStandalone", jboolean>(); }
	void _isStandalone(jboolean v) { set_field<"_isStandalone", jboolean>(v); }
	jni::ref<java::lang::String> _doctypePublic() { return get_field<"_doctypePublic", jni::ref<java::lang::String>>(); }
	void _doctypePublic(jni::ref<java::lang::String> v) { set_field<"_doctypePublic", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> _doctypeSystem() { return get_field<"_doctypeSystem", jni::ref<java::lang::String>>(); }
	void _doctypeSystem(jni::ref<java::lang::String> v) { set_field<"_doctypeSystem", jni::ref<java::lang::String>>(v); }
	jboolean _indent() { return get_field<"_indent", jboolean>(); }
	void _indent(jboolean v) { set_field<"_indent", jboolean>(v); }
	jni::ref<java::lang::String> _mediaType() { return get_field<"_mediaType", jni::ref<java::lang::String>>(); }
	void _mediaType(jni::ref<java::lang::String> v) { set_field<"_mediaType", jni::ref<java::lang::String>>(v); }
	jni::ref<java::util::ArrayList> _cdata() { return get_field<"_cdata", jni::ref<java::util::ArrayList>>(); }
	void _cdata(jni::ref<java::util::ArrayList> v) { set_field<"_cdata", jni::ref<java::util::ArrayList>>(v); }
	jint _indentamount() { return get_field<"_indentamount", jint>(); }
	void _indentamount(jint v) { set_field<"_indentamount", jint>(v); }
	static jint FIRST_TRANSLET_VERSION() { return get_static_field<"FIRST_TRANSLET_VERSION", jint>(); }
	static jint VER_SPLIT_NAMES_ARRAY() { return get_static_field<"VER_SPLIT_NAMES_ARRAY", jint>(); }
	static jint CURRENT_TRANSLET_VERSION() { return get_static_field<"CURRENT_TRANSLET_VERSION", jint>(); }
	jni::ref<java::util::Map> _formatSymbols() { return get_field<"_formatSymbols", jni::ref<java::util::Map>>(); }
	void _formatSymbols(jni::ref<java::util::Map> v) { set_field<"_formatSymbols", jni::ref<java::util::Map>>(v); }

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::runtime::AbstractTranslet> new_object() { return base_::new_object(); }
	void printInternalState() { return call_method<"printInternalState", void>(); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::DOMAdapter> makeDOMAdapter(jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p1) { return call_method<"makeDOMAdapter", jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::DOMAdapter>>(p1); }
	void pushParamFrame() { return call_method<"pushParamFrame", void>(); }
	void popParamFrame() { return call_method<"popParamFrame", void>(); }
	jni::ref<java::lang::Object> addParameter(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"addParameter", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> addParameter(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2, jboolean p3) { return call_method<"addParameter", jni::ref<java::lang::Object>>(p1, p2, p3); }
	void clearParameters() { return call_method<"clearParameters", void>(); }
	jni::ref<java::lang::Object> getParameter(jni::ref<java::lang::String> p1) { return call_method<"getParameter", jni::ref<java::lang::Object>>(p1); }
	void setMessageHandler(jni::ref<com::sun::org::apache::xalan::internal::xsltc::runtime::MessageHandler> p1) { return call_method<"setMessageHandler", void>(p1); }
	void displayMessage(jni::ref<java::lang::String> p1) { return call_method<"displayMessage", void>(p1); }
	void addDecimalFormat(jni::ref<java::lang::String> p1, jni::ref<java::text::DecimalFormatSymbols> p2) { return call_method<"addDecimalFormat", void>(p1, p2); }
	jni::ref<java::text::DecimalFormat> getDecimalFormat(jni::ref<java::lang::String> p1) { return call_method<"getDecimalFormat", jni::ref<java::text::DecimalFormat>>(p1); }
	void prepassDocument(jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p1) { return call_method<"prepassDocument", void>(p1); }
	void postInitialization() { return call_method<"postInitialization", void>(); }
	void setIndexSize(jint p1) { return call_method<"setIndexSize", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::KeyIndex> createKeyIndex() { return call_method<"createKeyIndex", jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::KeyIndex>>(); }
	void buildKeyIndex(jni::ref<java::lang::String> p1, jint p2, jni::ref<java::lang::String> p3) { return call_method<"buildKeyIndex", void>(p1, p2, p3); }
	void buildKeyIndex(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_method<"buildKeyIndex", void>(p1, p2); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::KeyIndex> getKeyIndex(jni::ref<java::lang::String> p1) { return call_method<"getKeyIndex", jni::ref<com::sun::org::apache::xalan::internal::xsltc::dom::KeyIndex>>(p1); }
	void buildKeys(jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p1, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p2, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p3, jint p4) { return call_method<"buildKeys", void>(p1, p2, p3, p4); }
	void setKeyIndexDom(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p2) { return call_method<"setKeyIndexDom", void>(p1, p2); }
	void setDOMCache(jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOMCache> p1) { return call_method<"setDOMCache", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOMCache> getDOMCache() { return call_method<"getDOMCache", jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOMCache>>(); }
	jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> openOutputHandler(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"openOutputHandler", jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler>>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> openOutputHandler(jni::ref<java::lang::String> p1) { return call_method<"openOutputHandler", jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler>>(p1); }
	void closeOutputHandler(jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p1) { return call_method<"closeOutputHandler", void>(p1); }
	void transform(jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p1, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMAxisIterator> p2, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p3) { return call_method<"transform", void>(p1, p2, p3); }
	void transform(jni::ref<com::sun::org::apache::xalan::internal::xsltc::DOM> p1, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p2) { return call_method<"transform", void>(p1, p2); }
	void characters(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xml::internal::serializer::SerializationHandler> p2) { return call_method<"characters", void>(p1, p2); }
	void addCdataElement(jni::ref<java::lang::String> p1) { return call_method<"addCdataElement", void>(p1); }
	void addAuxiliaryClass(jni::ref<java::lang::Class> p1) { return call_method<"addAuxiliaryClass", void>(p1); }
	void setAuxiliaryClasses(jni::ref<java::util::Map> p1) { return call_method<"setAuxiliaryClasses", void>(p1); }
	jni::ref<java::lang::Class> getAuxiliaryClass(jni::ref<java::lang::String> p1) { return call_method<"getAuxiliaryClass", jni::ref<java::lang::Class>>(p1); }
	jni::ref<jni::array<java::lang::String>> getNamesArray() { return call_method<"getNamesArray", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getUrisArray() { return call_method<"getUrisArray", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<jint>> getTypesArray() { return call_method<"getTypesArray", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<java::lang::String>> getNamespaceArray() { return call_method<"getNamespaceArray", jni::ref<jni::array<java::lang::String>>>(); }
	jboolean hasIdCall() { return call_method<"hasIdCall", jboolean>(); }
	jni::ref<javax::xml::transform::Templates> getTemplates() { return call_method<"getTemplates", jni::ref<javax::xml::transform::Templates>>(); }
	void setTemplates(jni::ref<javax::xml::transform::Templates> p1) { return call_method<"setTemplates", void>(p1); }
	jboolean overrideDefaultParser() { return call_method<"overrideDefaultParser", jboolean>(); }
	void setOverrideDefaultParser(jboolean p1) { return call_method<"setOverrideDefaultParser", void>(p1); }
	jni::ref<java::lang::String> getAllowedProtocols() { return call_method<"getAllowedProtocols", jni::ref<java::lang::String>>(); }
	void setAllowedProtocols(jni::ref<java::lang::String> p1) { return call_method<"setAllowedProtocols", void>(p1); }
	jni::ref<java::lang::String> getAccessError() { return call_method<"getAccessError", jni::ref<java::lang::String>>(); }
	void setAccessError(jni::ref<java::lang::String> p1) { return call_method<"setAccessError", void>(p1); }
	jni::ref<org::w3c::dom::Document> newDocument(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"newDocument", jni::ref<org::w3c::dom::Document>>(p1, p2); }

protected:

	AbstractTranslet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_RUNTIME_ABSTRACTTRANSLET
