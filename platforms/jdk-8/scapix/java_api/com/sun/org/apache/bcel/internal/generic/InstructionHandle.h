// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONHANDLE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONHANDLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::generic { class InstructionHandle; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::generic::InstructionHandle>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/generic/InstructionHandle";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONHANDLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONHANDLE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONHANDLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Instruction.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/InstructionTargeter.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Visitor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::generic::InstructionHandle : public jni::object_base<"com/sun/org/apache/bcel/internal/generic/InstructionHandle",
	java::lang::Object>
{
public:

	static jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::InstructionHandle>> EMPTY_ARRAY() { return get_static_field<"EMPTY_ARRAY", jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>>(); }

	void accept(jni::ref<com::sun::org::apache::bcel::internal::generic::Visitor> p1) { return call_method<"accept", void>(p1); }
	void addAttribute(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"addAttribute", void>(p1, p2); }
	void addTargeter(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionTargeter> p1) { return call_method<"addTargeter", void>(p1); }
	jni::ref<java::lang::Object> getAttribute(jni::ref<java::lang::Object> p1) { return call_method<"getAttribute", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::util::Collection> getAttributes() { return call_method<"getAttributes", jni::ref<java::util::Collection>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> getInstruction() { return call_method<"getInstruction", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getNext() { return call_method<"getNext", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	jint getPosition() { return call_method<"getPosition", jint>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle> getPrev() { return call_method<"getPrev", jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionHandle>>(); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::InstructionTargeter>> getTargeters() { return call_method<"getTargeters", jni::ref<jni::array<com::sun::org::apache::bcel::internal::generic::InstructionTargeter>>>(); }
	jboolean hasTargeters() { return call_method<"hasTargeters", jboolean>(); }
	void removeAllTargeters() { return call_method<"removeAllTargeters", void>(); }
	void removeAttribute(jni::ref<java::lang::Object> p1) { return call_method<"removeAttribute", void>(p1); }
	void removeTargeter(jni::ref<com::sun::org::apache::bcel::internal::generic::InstructionTargeter> p1) { return call_method<"removeTargeter", void>(p1); }
	void setInstruction(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1) { return call_method<"setInstruction", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> swapInstruction(jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction> p1) { return call_method<"swapInstruction", jni::ref<com::sun::org::apache::bcel::internal::generic::Instruction>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString(jboolean p1) { return call_method<"toString", jni::ref<java::lang::String>>(p1); }

protected:

	InstructionHandle(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_GENERIC_INSTRUCTIONHANDLE
