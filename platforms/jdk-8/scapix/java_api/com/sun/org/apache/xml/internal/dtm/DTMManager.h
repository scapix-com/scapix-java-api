// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMMANAGER_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::dtm { class DTMManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::dtm::DTMManager>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/dtm/DTMManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMMANAGER)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTM.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMFilter.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMIterator.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMWSFilter.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/PrefixResolver.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/XMLStringFactory.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::dtm::DTMManager : public jni::object_base<"com/sun/org/apache/xml/internal/dtm/DTMManager",
	java::lang::Object>
{
public:

	jboolean m_incremental() { return get_field<"m_incremental", jboolean>(); }
	void m_incremental(jboolean v) { set_field<"m_incremental", jboolean>(v); }
	jboolean m_source_location() { return get_field<"m_source_location", jboolean>(); }
	void m_source_location(jboolean v) { set_field<"m_source_location", jboolean>(v); }
	static jint IDENT_DTM_NODE_BITS() { return get_static_field<"IDENT_DTM_NODE_BITS", jint>(); }
	static jint IDENT_NODE_DEFAULT() { return get_static_field<"IDENT_NODE_DEFAULT", jint>(); }
	static jint IDENT_DTM_DEFAULT() { return get_static_field<"IDENT_DTM_DEFAULT", jint>(); }
	static jint IDENT_MAX_DTMS() { return get_static_field<"IDENT_MAX_DTMS", jint>(); }

	jni::ref<com::sun::org::apache::xml::internal::utils::XMLStringFactory> getXMLStringFactory() { return call_method<"getXMLStringFactory", jni::ref<com::sun::org::apache::xml::internal::utils::XMLStringFactory>>(); }
	void setXMLStringFactory(jni::ref<com::sun::org::apache::xml::internal::utils::XMLStringFactory> p1) { return call_method<"setXMLStringFactory", void>(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> newInstance(jni::ref<com::sun::org::apache::xml::internal::utils::XMLStringFactory> p1) { return call_static_method<"newInstance", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> getDTM(jni::ref<javax::xml::transform::Source> p1, jboolean p2, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMWSFilter> p3, jboolean p4, jboolean p5) { return call_method<"getDTM", jni::ref<com::sun::org::apache::xml::internal::dtm::DTM>>(p1, p2, p3, p4, p5); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> getDTM(jint p1) { return call_method<"getDTM", jni::ref<com::sun::org::apache::xml::internal::dtm::DTM>>(p1); }
	jint getDTMHandleFromNode(jni::ref<org::w3c::dom::Node> p1) { return call_method<"getDTMHandleFromNode", jint>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> createDocumentFragment() { return call_method<"createDocumentFragment", jni::ref<com::sun::org::apache::xml::internal::dtm::DTM>>(); }
	jboolean release(jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> p1, jboolean p2) { return call_method<"release", jboolean>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> createDTMIterator(jni::ref<java::lang::Object> p1, jint p2) { return call_method<"createDTMIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator>>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> createDTMIterator(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xml::internal::utils::PrefixResolver> p2) { return call_method<"createDTMIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator>>(p1, p2); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> createDTMIterator(jint p1, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMFilter> p2, jboolean p3) { return call_method<"createDTMIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator>>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator> createDTMIterator(jint p1) { return call_method<"createDTMIterator", jni::ref<com::sun::org::apache::xml::internal::dtm::DTMIterator>>(p1); }
	jboolean getIncremental() { return call_method<"getIncremental", jboolean>(); }
	void setIncremental(jboolean p1) { return call_method<"setIncremental", void>(p1); }
	jboolean getSource_location() { return call_method<"getSource_location", jboolean>(); }
	void setSource_location(jboolean p1) { return call_method<"setSource_location", void>(p1); }
	jboolean overrideDefaultParser() { return call_method<"overrideDefaultParser", jboolean>(); }
	void setOverrideDefaultParser(jboolean p1) { return call_method<"setOverrideDefaultParser", void>(p1); }
	jint getDTMIdentity(jni::ref<com::sun::org::apache::xml::internal::dtm::DTM> p1) { return call_method<"getDTMIdentity", jint>(p1); }
	jint getDTMIdentityMask() { return call_method<"getDTMIdentityMask", jint>(); }
	jint getNodeIdentityMask() { return call_method<"getNodeIdentityMask", jint>(); }

protected:

	DTMManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_DTMMANAGER
