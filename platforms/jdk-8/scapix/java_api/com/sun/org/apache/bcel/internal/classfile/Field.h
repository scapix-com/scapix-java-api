// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/FieldOrMethod.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_FIELD_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_FIELD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class Field; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Field>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/Field";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::FieldOrMethod>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_FIELD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_FIELD)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_FIELD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Attribute.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantPool.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantValue.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Visitor.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/generic/Type.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/util/BCELComparator.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::Field : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/Field",
	com::sun::org::apache::bcel::internal::classfile::FieldOrMethod>
{
public:

	static jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Field>> EMPTY_ARRAY() { return get_static_field<"EMPTY_ARRAY", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Field>>>(); }

	static jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator> getComparator() { return call_static_method<"getComparator", jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator>>(); }
	static void setComparator(jni::ref<com::sun::org::apache::bcel::internal::util::BCELComparator> p1) { return call_static_method<"setComparator", void>(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::Field> new_object(jni::ref<com::sun::org::apache::bcel::internal::classfile::Field> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::Field> new_object(jint p1, jint p2, jint p3, jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Attribute>> p4, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p5) { return base_::new_object(p1, p2, p3, p4, p5); }
	void accept(jni::ref<com::sun::org::apache::bcel::internal::classfile::Visitor> p1) { return call_method<"accept", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Field> copy(jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p1) { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::classfile::Field>>(p1); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantValue> getConstantValue() { return call_method<"getConstantValue", jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantValue>>(); }
	jni::ref<com::sun::org::apache::bcel::internal::generic::Type> getType() { return call_method<"getType", jni::ref<com::sun::org::apache::bcel::internal::generic::Type>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Field(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_FIELD
