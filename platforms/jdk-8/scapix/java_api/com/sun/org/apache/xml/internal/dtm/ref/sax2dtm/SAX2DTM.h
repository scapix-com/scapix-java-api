// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.h>
#include <scapix/java_api/org/xml/sax/EntityResolver.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>
#include <scapix/java_api/org/xml/sax/ext/DeclHandler.h>
#include <scapix/java_api/org/xml/sax/ext/LexicalHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_SAX2DTM_SAX2DTM_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_SAX2DTM_SAX2DTM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref::sax2dtm { class SAX2DTM; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref::sax2dtm::SAX2DTM>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xml::internal::dtm::ref::DTMDefaultBaseIterators, scapix::java_api::org::xml::sax::EntityResolver, scapix::java_api::org::xml::sax::DTDHandler, scapix::java_api::org::xml::sax::ContentHandler, scapix::java_api::org::xml::sax::ErrorHandler, scapix::java_api::org::xml::sax::ext::DeclHandler, scapix::java_api::org::xml::sax::ext::LexicalHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_SAX2DTM_SAX2DTM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_SAX2DTM_SAX2DTM)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_SAX2DTM_SAX2DTM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMManager.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/DTMWSFilter.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/XMLString.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/utils/XMLStringFactory.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/transform/SourceLocator.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/InputSource.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#include <scapix/java_api/org/xml/sax/SAXParseException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::dtm::ref::sax2dtm::SAX2DTM : public jni::object_base<"com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM",
	com::sun::org::apache::xml::internal::dtm::ref::DTMDefaultBaseIterators,
	org::xml::sax::EntityResolver,
	org::xml::sax::DTDHandler,
	org::xml::sax::ContentHandler,
	org::xml::sax::ErrorHandler,
	org::xml::sax::ext::DeclHandler,
	org::xml::sax::ext::LexicalHandler>
{
public:

	static jni::ref<com::sun::org::apache::xml::internal::dtm::ref::sax2dtm::SAX2DTM> new_object(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> p1, jni::ref<javax::xml::transform::Source> p2, jint p3, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMWSFilter> p4, jni::ref<com::sun::org::apache::xml::internal::utils::XMLStringFactory> p5, jboolean p6) { return base_::new_object(p1, p2, p3, p4, p5, p6); }
	static jni::ref<com::sun::org::apache::xml::internal::dtm::ref::sax2dtm::SAX2DTM> new_object(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> p1, jni::ref<javax::xml::transform::Source> p2, jint p3, jni::ref<com::sun::org::apache::xml::internal::dtm::DTMWSFilter> p4, jni::ref<com::sun::org::apache::xml::internal::utils::XMLStringFactory> p5, jboolean p6, jint p7, jboolean p8, jboolean p9) { return base_::new_object(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
	void setUseSourceLocation(jboolean p1) { return call_method<"setUseSourceLocation", void>(p1); }
	void clearCoRoutine() { return call_method<"clearCoRoutine", void>(); }
	void clearCoRoutine(jboolean p1) { return call_method<"clearCoRoutine", void>(p1); }
	void setIncrementalSAXSource(jni::ref<com::sun::org::apache::xml::internal::dtm::ref::IncrementalSAXSource> p1) { return call_method<"setIncrementalSAXSource", void>(p1); }
	jni::ref<org::xml::sax::ContentHandler> getContentHandler() { return call_method<"getContentHandler", jni::ref<org::xml::sax::ContentHandler>>(); }
	jni::ref<org::xml::sax::ext::LexicalHandler> getLexicalHandler() { return call_method<"getLexicalHandler", jni::ref<org::xml::sax::ext::LexicalHandler>>(); }
	jni::ref<org::xml::sax::EntityResolver> getEntityResolver() { return call_method<"getEntityResolver", jni::ref<org::xml::sax::EntityResolver>>(); }
	jni::ref<org::xml::sax::DTDHandler> getDTDHandler() { return call_method<"getDTDHandler", jni::ref<org::xml::sax::DTDHandler>>(); }
	jni::ref<org::xml::sax::ErrorHandler> getErrorHandler() { return call_method<"getErrorHandler", jni::ref<org::xml::sax::ErrorHandler>>(); }
	jni::ref<org::xml::sax::ext::DeclHandler> getDeclHandler() { return call_method<"getDeclHandler", jni::ref<org::xml::sax::ext::DeclHandler>>(); }
	jboolean needsTwoThreads() { return call_method<"needsTwoThreads", jboolean>(); }
	void dispatchCharactersEvents(jint p1, jni::ref<org::xml::sax::ContentHandler> p2, jboolean p3) { return call_method<"dispatchCharactersEvents", void>(p1, p2, p3); }
	jni::ref<java::lang::String> getNodeName(jint p1) { return call_method<"getNodeName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getNodeNameX(jint p1) { return call_method<"getNodeNameX", jni::ref<java::lang::String>>(p1); }
	jboolean isAttributeSpecified(jint p1) { return call_method<"isAttributeSpecified", jboolean>(p1); }
	jni::ref<java::lang::String> getDocumentTypeDeclarationSystemIdentifier() { return call_method<"getDocumentTypeDeclarationSystemIdentifier", jni::ref<java::lang::String>>(); }
	void dispatchToEvents(jint p1, jni::ref<org::xml::sax::ContentHandler> p2) { return call_method<"dispatchToEvents", void>(p1, p2); }
	jint getNumberOfNodes() { return call_method<"getNumberOfNodes", jint>(); }
	void migrateTo(jni::ref<com::sun::org::apache::xml::internal::dtm::DTMManager> p1) { return call_method<"migrateTo", void>(p1); }
	jni::ref<java::lang::String> getNodeValue(jint p1) { return call_method<"getNodeValue", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getLocalName(jint p1) { return call_method<"getLocalName", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getUnparsedEntityURI(jni::ref<java::lang::String> p1) { return call_method<"getUnparsedEntityURI", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getPrefix(jint p1) { return call_method<"getPrefix", jni::ref<java::lang::String>>(p1); }
	jint getAttributeNode(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"getAttributeNode", jint>(p1, p2, p3); }
	jni::ref<java::lang::String> getDocumentTypeDeclarationPublicIdentifier() { return call_method<"getDocumentTypeDeclarationPublicIdentifier", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getNamespaceURI(jint p1) { return call_method<"getNamespaceURI", jni::ref<java::lang::String>>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::utils::XMLString> getStringValue(jint p1) { return call_method<"getStringValue", jni::ref<com::sun::org::apache::xml::internal::utils::XMLString>>(p1); }
	jboolean isWhitespace(jint p1) { return call_method<"isWhitespace", jboolean>(p1); }
	jint getElementById(jni::ref<java::lang::String> p1) { return call_method<"getElementById", jint>(p1); }
	jni::ref<java::lang::String> getPrefix(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getPrefix", jni::ref<java::lang::String>>(p1, p2); }
	jint getIdForNamespace(jni::ref<java::lang::String> p1) { return call_method<"getIdForNamespace", jint>(p1); }
	jni::ref<java::lang::String> getNamespaceURI(jni::ref<java::lang::String> p1) { return call_method<"getNamespaceURI", jni::ref<java::lang::String>>(p1); }
	void setIDAttribute(jni::ref<java::lang::String> p1, jint p2) { return call_method<"setIDAttribute", void>(p1, p2); }
	jni::ref<org::xml::sax::InputSource> resolveEntity(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"resolveEntity", jni::ref<org::xml::sax::InputSource>>(p1, p2); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }
	void setDocumentLocator(jni::ref<org::xml::sax::Locator> p1) { return call_method<"setDocumentLocator", void>(p1); }
	void startDocument() { return call_method<"startDocument", void>(); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"startPrefixMapping", void>(p1, p2); }
	void endPrefixMapping(jni::ref<java::lang::String> p1) { return call_method<"endPrefixMapping", void>(p1); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"ignorableWhitespace", void>(p1, p2, p3); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void skippedEntity(jni::ref<java::lang::String> p1) { return call_method<"skippedEntity", void>(p1); }
	void warning(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"warning", void>(p1); }
	void error(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"error", void>(p1); }
	void fatalError(jni::ref<org::xml::sax::SAXParseException> p1) { return call_method<"fatalError", void>(p1); }
	void elementDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"elementDecl", void>(p1, p2); }
	void attributeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_method<"attributeDecl", void>(p1, p2, p3, p4, p5); }
	void internalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"internalEntityDecl", void>(p1, p2); }
	void externalEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"externalEntityDecl", void>(p1, p2, p3); }
	void startDTD(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"startDTD", void>(p1, p2, p3); }
	void endDTD() { return call_method<"endDTD", void>(); }
	void startEntity(jni::ref<java::lang::String> p1) { return call_method<"startEntity", void>(p1); }
	void endEntity(jni::ref<java::lang::String> p1) { return call_method<"endEntity", void>(p1); }
	void startCDATA() { return call_method<"startCDATA", void>(); }
	void endCDATA() { return call_method<"endCDATA", void>(); }
	void comment(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"comment", void>(p1, p2, p3); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jni::ref<javax::xml::transform::SourceLocator> getSourceLocatorFor(jint p1) { return call_method<"getSourceLocatorFor", jni::ref<javax::xml::transform::SourceLocator>>(p1); }
	jni::ref<java::lang::String> getFixedNames(jint p1) { return call_method<"getFixedNames", jni::ref<java::lang::String>>(p1); }

protected:

	SAX2DTM(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_DTM_REF_SAX2DTM_SAX2DTM
