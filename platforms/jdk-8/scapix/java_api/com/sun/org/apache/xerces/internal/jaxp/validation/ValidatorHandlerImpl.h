// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/xml/validation/ValidatorHandler.h>
#include <scapix/java_api/org/xml/sax/DTDHandler.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/impl/validation/EntityState.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xs/PSVIProvider.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHelper.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLDocumentHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_JAXP_VALIDATION_VALIDATORHANDLERIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_JAXP_VALIDATION_VALIDATORHANDLERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::jaxp::validation { class ValidatorHandlerImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::jaxp::validation::ValidatorHandlerImpl>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl";
	using base_classes = std::tuple<scapix::java_api::javax::xml::validation::ValidatorHandler, scapix::java_api::org::xml::sax::DTDHandler, scapix::java_api::com::sun::org::apache::xerces::internal::impl::validation::EntityState, scapix::java_api::com::sun::org::apache::xerces::internal::xs::PSVIProvider, scapix::java_api::com::sun::org::apache::xerces::internal::jaxp::validation::ValidatorHelper, scapix::java_api::com::sun::org::apache::xerces::internal::xni::XMLDocumentHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_JAXP_VALIDATION_VALIDATORHANDLERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_JAXP_VALIDATION_VALIDATORHANDLERIMPL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_JAXP_VALIDATION_VALIDATORHANDLERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaValidatorComponentManager.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/jaxp/validation/XSGrammarPoolContainer.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/Augmentations.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/NamespaceContext.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/QName.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLAttributes.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLLocator.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLResourceIdentifier.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/XMLString.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xni/parser/XMLDocumentSource.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xs/AttributePSVI.h>
#include <scapix/java_api/com/sun/org/apache/xerces/internal/xs/ElementPSVI.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/xml/transform/Result.h>
#include <scapix/java_api/javax/xml/transform/Source.h>
#include <scapix/java_api/javax/xml/validation/TypeInfoProvider.h>
#include <scapix/java_api/org/w3c/dom/ls/LSResourceResolver.h>
#include <scapix/java_api/org/xml/sax/Attributes.h>
#include <scapix/java_api/org/xml/sax/ContentHandler.h>
#include <scapix/java_api/org/xml/sax/ErrorHandler.h>
#include <scapix/java_api/org/xml/sax/Locator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::org::apache::xerces::internal::jaxp::validation::ValidatorHandlerImpl : public jni::object_base<"com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl",
	javax::xml::validation::ValidatorHandler,
	org::xml::sax::DTDHandler,
	com::sun::org::apache::xerces::internal::impl::validation::EntityState,
	com::sun::org::apache::xerces::internal::xs::PSVIProvider,
	com::sun::org::apache::xerces::internal::jaxp::validation::ValidatorHelper,
	com::sun::org::apache::xerces::internal::xni::XMLDocumentHandler>
{
public:

	static jni::ref<com::sun::org::apache::xerces::internal::jaxp::validation::ValidatorHandlerImpl> new_object(jni::ref<com::sun::org::apache::xerces::internal::jaxp::validation::XSGrammarPoolContainer> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xerces::internal::jaxp::validation::ValidatorHandlerImpl> new_object(jni::ref<com::sun::org::apache::xerces::internal::jaxp::validation::XMLSchemaValidatorComponentManager> p1) { return base_::new_object(p1); }
	void setContentHandler(jni::ref<org::xml::sax::ContentHandler> p1) { return call_method<"setContentHandler", void>(p1); }
	jni::ref<org::xml::sax::ContentHandler> getContentHandler() { return call_method<"getContentHandler", jni::ref<org::xml::sax::ContentHandler>>(); }
	void setErrorHandler(jni::ref<org::xml::sax::ErrorHandler> p1) { return call_method<"setErrorHandler", void>(p1); }
	jni::ref<org::xml::sax::ErrorHandler> getErrorHandler() { return call_method<"getErrorHandler", jni::ref<org::xml::sax::ErrorHandler>>(); }
	void setResourceResolver(jni::ref<org::w3c::dom::ls::LSResourceResolver> p1) { return call_method<"setResourceResolver", void>(p1); }
	jni::ref<org::w3c::dom::ls::LSResourceResolver> getResourceResolver() { return call_method<"getResourceResolver", jni::ref<org::w3c::dom::ls::LSResourceResolver>>(); }
	jni::ref<javax::xml::validation::TypeInfoProvider> getTypeInfoProvider() { return call_method<"getTypeInfoProvider", jni::ref<javax::xml::validation::TypeInfoProvider>>(); }
	jboolean getFeature(jni::ref<java::lang::String> p1) { return call_method<"getFeature", jboolean>(p1); }
	void setFeature(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"setFeature", void>(p1, p2); }
	jni::ref<java::lang::Object> getProperty(jni::ref<java::lang::String> p1) { return call_method<"getProperty", jni::ref<java::lang::Object>>(p1); }
	void setProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"setProperty", void>(p1, p2); }
	jboolean isEntityDeclared(jni::ref<java::lang::String> p1) { return call_method<"isEntityDeclared", jboolean>(p1); }
	jboolean isEntityUnparsed(jni::ref<java::lang::String> p1) { return call_method<"isEntityUnparsed", jboolean>(p1); }
	void startDocument(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLLocator> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::NamespaceContext> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"startDocument", void>(p1, p2, p3, p4); }
	void xmlDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"xmlDecl", void>(p1, p2, p3, p4); }
	void doctypeDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"doctypeDecl", void>(p1, p2, p3, p4); }
	void comment(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"comment", void>(p1, p2); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"processingInstruction", void>(p1, p2, p3); }
	void startElement(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLAttributes> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"startElement", void>(p1, p2, p3); }
	void emptyElement(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLAttributes> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"emptyElement", void>(p1, p2, p3); }
	void startGeneralEntity(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::XMLResourceIdentifier> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p4) { return call_method<"startGeneralEntity", void>(p1, p2, p3, p4); }
	void textDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p3) { return call_method<"textDecl", void>(p1, p2, p3); }
	void endGeneralEntity(jni::ref<java::lang::String> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"endGeneralEntity", void>(p1, p2); }
	void characters(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"characters", void>(p1, p2); }
	void ignorableWhitespace(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"ignorableWhitespace", void>(p1, p2); }
	void endElement(jni::ref<com::sun::org::apache::xerces::internal::xni::QName> p1, jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p2) { return call_method<"endElement", void>(p1, p2); }
	void startCDATA(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"startCDATA", void>(p1); }
	void endCDATA(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endCDATA", void>(p1); }
	void endDocument(jni::ref<com::sun::org::apache::xerces::internal::xni::Augmentations> p1) { return call_method<"endDocument", void>(p1); }
	void setDocumentSource(jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDocumentSource> p1) { return call_method<"setDocumentSource", void>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDocumentSource> getDocumentSource() { return call_method<"getDocumentSource", jni::ref<com::sun::org::apache::xerces::internal::xni::parser::XMLDocumentSource>>(); }
	void setDocumentLocator(jni::ref<org::xml::sax::Locator> p1) { return call_method<"setDocumentLocator", void>(p1); }
	void startDocument() { return call_method<"startDocument", void>(); }
	void endDocument() { return call_method<"endDocument", void>(); }
	void startPrefixMapping(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"startPrefixMapping", void>(p1, p2); }
	void endPrefixMapping(jni::ref<java::lang::String> p1) { return call_method<"endPrefixMapping", void>(p1); }
	void startElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<org::xml::sax::Attributes> p4) { return call_method<"startElement", void>(p1, p2, p3, p4); }
	void endElement(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"endElement", void>(p1, p2, p3); }
	void characters(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"characters", void>(p1, p2, p3); }
	void ignorableWhitespace(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"ignorableWhitespace", void>(p1, p2, p3); }
	void processingInstruction(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"processingInstruction", void>(p1, p2); }
	void skippedEntity(jni::ref<java::lang::String> p1) { return call_method<"skippedEntity", void>(p1); }
	void notationDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"notationDecl", void>(p1, p2, p3); }
	void unparsedEntityDecl(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"unparsedEntityDecl", void>(p1, p2, p3, p4); }
	void validate(jni::ref<javax::xml::transform::Source> p1, jni::ref<javax::xml::transform::Result> p2) { return call_method<"validate", void>(p1, p2); }
	jni::ref<com::sun::org::apache::xerces::internal::xs::ElementPSVI> getElementPSVI() { return call_method<"getElementPSVI", jni::ref<com::sun::org::apache::xerces::internal::xs::ElementPSVI>>(); }
	jni::ref<com::sun::org::apache::xerces::internal::xs::AttributePSVI> getAttributePSVI(jint p1) { return call_method<"getAttributePSVI", jni::ref<com::sun::org::apache::xerces::internal::xs::AttributePSVI>>(p1); }
	jni::ref<com::sun::org::apache::xerces::internal::xs::AttributePSVI> getAttributePSVIByName(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getAttributePSVIByName", jni::ref<com::sun::org::apache::xerces::internal::xs::AttributePSVI>>(p1, p2); }

protected:

	ValidatorHandlerImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_JAXP_VALIDATION_VALIDATORHANDLERIMPL
