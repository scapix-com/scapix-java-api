// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_UTILITY_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_UTILITY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class Utility; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Utility>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/Utility";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_UTILITY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_UTILITY)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_UTILITY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantPool.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/LocalVariableTable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/util/ByteSequence.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::Utility : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/Utility",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::classfile::Utility> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> accessToString(jint p1) { return call_static_method<"accessToString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> accessToString(jint p1, jboolean p2) { return call_static_method<"accessToString", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> classOrInterface(jint p1) { return call_static_method<"classOrInterface", jni::ref<java::lang::String>>(p1); }
	static jint clearBit(jint p1, jint p2) { return call_static_method<"clearBit", jint>(p1, p2); }
	static jni::ref<java::lang::String> codeToString(jni::ref<jni::array<jbyte>> p1, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p2, jint p3, jint p4) { return call_static_method<"codeToString", jni::ref<java::lang::String>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> codeToString(jni::ref<jni::array<jbyte>> p1, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p2, jint p3, jint p4, jboolean p5) { return call_static_method<"codeToString", jni::ref<java::lang::String>>(p1, p2, p3, p4, p5); }
	static jni::ref<java::lang::String> codeToString(jni::ref<com::sun::org::apache::bcel::internal::util::ByteSequence> p1, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p2) { return call_static_method<"codeToString", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> codeToString(jni::ref<com::sun::org::apache::bcel::internal::util::ByteSequence> p1, jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p2, jboolean p3) { return call_static_method<"codeToString", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> compactClassName(jni::ref<java::lang::String> p1) { return call_static_method<"compactClassName", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> compactClassName(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"compactClassName", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> compactClassName(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_static_method<"compactClassName", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> convertString(jni::ref<java::lang::String> p1) { return call_static_method<"convertString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<jni::array<jbyte>> decode(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"decode", jni::ref<jni::array<jbyte>>>(p1, p2); }
	static jni::ref<java::lang::String> encode(jni::ref<jni::array<jbyte>> p1, jboolean p2) { return call_static_method<"encode", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> fillup(jni::ref<java::lang::String> p1, jint p2, jboolean p3, jchar p4) { return call_static_method<"fillup", jni::ref<java::lang::String>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> format(jint p1, jint p2, jboolean p3, jchar p4) { return call_static_method<"format", jni::ref<java::lang::String>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> getSignature(jni::ref<java::lang::String> p1) { return call_static_method<"getSignature", jni::ref<java::lang::String>>(p1); }
	static jboolean isJavaIdentifierPart(jchar p1) { return call_static_method<"isJavaIdentifierPart", jboolean>(p1); }
	static jboolean isSet(jint p1, jint p2) { return call_static_method<"isSet", jboolean>(p1, p2); }
	static jni::ref<jni::array<java::lang::String>> methodSignatureArgumentTypes(jni::ref<java::lang::String> p1) { return call_static_method<"methodSignatureArgumentTypes", jni::ref<jni::array<java::lang::String>>>(p1); }
	static jni::ref<jni::array<java::lang::String>> methodSignatureArgumentTypes(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"methodSignatureArgumentTypes", jni::ref<jni::array<java::lang::String>>>(p1, p2); }
	static jni::ref<java::lang::String> methodSignatureReturnType(jni::ref<java::lang::String> p1) { return call_static_method<"methodSignatureReturnType", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> methodSignatureReturnType(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"methodSignatureReturnType", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> methodSignatureToString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"methodSignatureToString", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jni::ref<java::lang::String> methodSignatureToString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jboolean p4) { return call_static_method<"methodSignatureToString", jni::ref<java::lang::String>>(p1, p2, p3, p4); }
	static jni::ref<java::lang::String> methodSignatureToString(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jboolean p4, jni::ref<com::sun::org::apache::bcel::internal::classfile::LocalVariableTable> p5) { return call_static_method<"methodSignatureToString", jni::ref<java::lang::String>>(p1, p2, p3, p4, p5); }
	static jni::ref<java::lang::String> methodTypeToSignature(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::String>> p2) { return call_static_method<"methodTypeToSignature", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> packageToPath(jni::ref<java::lang::String> p1) { return call_static_method<"packageToPath", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> pathToPackage(jni::ref<java::lang::String> p1) { return call_static_method<"pathToPackage", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printArray(jni::ref<jni::array<java::lang::Object>> p1) { return call_static_method<"printArray", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> printArray(jni::ref<jni::array<java::lang::Object>> p1, jboolean p2) { return call_static_method<"printArray", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> printArray(jni::ref<jni::array<java::lang::Object>> p1, jboolean p2, jboolean p3) { return call_static_method<"printArray", jni::ref<java::lang::String>>(p1, p2, p3); }
	static void printArray(jni::ref<java::io::PrintStream> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_static_method<"printArray", void>(p1, p2); }
	static void printArray(jni::ref<java::io::PrintWriter> p1, jni::ref<jni::array<java::lang::Object>> p2) { return call_static_method<"printArray", void>(p1, p2); }
	static jni::ref<java::lang::String> replace(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_static_method<"replace", jni::ref<java::lang::String>>(p1, p2, p3); }
	static jshort searchOpcode(jni::ref<java::lang::String> p1) { return call_static_method<"searchOpcode", jshort>(p1); }
	static jint setBit(jint p1, jint p2) { return call_static_method<"setBit", jint>(p1, p2); }
	static jni::ref<java::lang::String> signatureToString(jni::ref<java::lang::String> p1) { return call_static_method<"signatureToString", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> signatureToString(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"signatureToString", jni::ref<java::lang::String>>(p1, p2); }
	static jni::ref<java::lang::String> toHexString(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"toHexString", jni::ref<java::lang::String>>(p1); }
	static jbyte typeOfMethodSignature(jni::ref<java::lang::String> p1) { return call_static_method<"typeOfMethodSignature", jbyte>(p1); }
	static jbyte typeOfSignature(jni::ref<java::lang::String> p1) { return call_static_method<"typeOfSignature", jbyte>(p1); }
	static jni::ref<java::lang::String> typeSignatureToString(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"typeSignatureToString", jni::ref<java::lang::String>>(p1, p2); }

protected:

	Utility(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_UTILITY
