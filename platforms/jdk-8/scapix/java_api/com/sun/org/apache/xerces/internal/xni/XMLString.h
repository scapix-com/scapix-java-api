// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_XMLSTRING_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_XMLSTRING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xerces::internal::xni { class XMLString; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xerces::internal::xni::XMLString>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xerces/internal/xni/XMLString";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_XMLSTRING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_XMLSTRING)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_XMLSTRING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xerces::internal::xni::XMLString : public jni::object_base<"com/sun/org/apache/xerces/internal/xni/XMLString",
	java::lang::Object>
{
public:

	static jint DEFAULT_SIZE() { return get_static_field<"DEFAULT_SIZE", jint>(); }
	jni::ref<jni::array<jchar>> ch() { return get_field<"ch", jni::ref<jni::array<jchar>>>(); }
	void ch(jni::ref<jni::array<jchar>> v) { set_field<"ch", jni::ref<jni::array<jchar>>>(v); }
	jint offset() { return get_field<"offset", jint>(); }
	void offset(jint v) { set_field<"offset", jint>(v); }
	jint length() { return get_field<"length", jint>(); }
	void length(jint v) { set_field<"length", jint>(v); }

	static jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> new_object(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> new_object(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1) { return base_::new_object(p1); }
	void setValues(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"setValues", void>(p1, p2, p3); }
	void setValues(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1) { return call_method<"setValues", void>(p1); }
	void clear() { return call_method<"clear", void>(); }
	jboolean equals(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"equals", jboolean>(p1, p2, p3); }
	jboolean equals(jni::ref<java::lang::String> p1) { return call_method<"equals", jboolean>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void append(jchar p1) { return call_method<"append", void>(p1); }
	void append(jni::ref<java::lang::String> p1) { return call_method<"append", void>(p1); }
	void append(jni::ref<jni::array<jchar>> p1, jint p2, jint p3) { return call_method<"append", void>(p1, p2, p3); }
	void append(jni::ref<com::sun::org::apache::xerces::internal::xni::XMLString> p1) { return call_method<"append", void>(p1); }

protected:

	XMLString(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XERCES_INTERNAL_XNI_XMLSTRING
