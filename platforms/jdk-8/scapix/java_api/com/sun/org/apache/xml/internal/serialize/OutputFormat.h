// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_OUTPUTFORMAT_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_OUTPUTFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::serialize { class OutputFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::serialize::OutputFormat>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/serialize/OutputFormat";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_OUTPUTFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_OUTPUTFORMAT)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_OUTPUTFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xml/internal/serialize/EncodingInfo.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/Document.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serialize/OutputFormat_DTD.h>
#include <scapix/java_api/com/sun/org/apache/xml/internal/serialize/OutputFormat_Defaults.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::serialize::OutputFormat : public jni::object_base<"com/sun/org/apache/xml/internal/serialize/OutputFormat",
	java::lang::Object>
{
public:

	using DTD = OutputFormat_DTD;
	using Defaults = OutputFormat_Defaults;

	static jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> new_object(jni::ref<org::w3c::dom::Document> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::xml::internal::serialize::OutputFormat> new_object(jni::ref<org::w3c::dom::Document> p1, jni::ref<java::lang::String> p2, jboolean p3) { return base_::new_object(p1, p2, p3); }
	jni::ref<java::lang::String> getMethod() { return call_method<"getMethod", jni::ref<java::lang::String>>(); }
	void setMethod(jni::ref<java::lang::String> p1) { return call_method<"setMethod", void>(p1); }
	jni::ref<java::lang::String> getVersion() { return call_method<"getVersion", jni::ref<java::lang::String>>(); }
	void setVersion(jni::ref<java::lang::String> p1) { return call_method<"setVersion", void>(p1); }
	jint getIndent() { return call_method<"getIndent", jint>(); }
	jboolean getIndenting() { return call_method<"getIndenting", jboolean>(); }
	void setIndent(jint p1) { return call_method<"setIndent", void>(p1); }
	void setIndenting(jboolean p1) { return call_method<"setIndenting", void>(p1); }
	jni::ref<java::lang::String> getEncoding() { return call_method<"getEncoding", jni::ref<java::lang::String>>(); }
	void setEncoding(jni::ref<java::lang::String> p1) { return call_method<"setEncoding", void>(p1); }
	void setEncoding(jni::ref<com::sun::org::apache::xml::internal::serialize::EncodingInfo> p1) { return call_method<"setEncoding", void>(p1); }
	jni::ref<com::sun::org::apache::xml::internal::serialize::EncodingInfo> getEncodingInfo() { return call_method<"getEncodingInfo", jni::ref<com::sun::org::apache::xml::internal::serialize::EncodingInfo>>(); }
	void setAllowJavaNames(jboolean p1) { return call_method<"setAllowJavaNames", void>(p1); }
	jboolean setAllowJavaNames() { return call_method<"setAllowJavaNames", jboolean>(); }
	jni::ref<java::lang::String> getMediaType() { return call_method<"getMediaType", jni::ref<java::lang::String>>(); }
	void setMediaType(jni::ref<java::lang::String> p1) { return call_method<"setMediaType", void>(p1); }
	void setDoctype(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setDoctype", void>(p1, p2); }
	jni::ref<java::lang::String> getDoctypePublic() { return call_method<"getDoctypePublic", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getDoctypeSystem() { return call_method<"getDoctypeSystem", jni::ref<java::lang::String>>(); }
	jboolean getOmitComments() { return call_method<"getOmitComments", jboolean>(); }
	void setOmitComments(jboolean p1) { return call_method<"setOmitComments", void>(p1); }
	jboolean getOmitDocumentType() { return call_method<"getOmitDocumentType", jboolean>(); }
	void setOmitDocumentType(jboolean p1) { return call_method<"setOmitDocumentType", void>(p1); }
	jboolean getOmitXMLDeclaration() { return call_method<"getOmitXMLDeclaration", jboolean>(); }
	void setOmitXMLDeclaration(jboolean p1) { return call_method<"setOmitXMLDeclaration", void>(p1); }
	jboolean getStandalone() { return call_method<"getStandalone", jboolean>(); }
	void setStandalone(jboolean p1) { return call_method<"setStandalone", void>(p1); }
	jni::ref<jni::array<java::lang::String>> getCDataElements() { return call_method<"getCDataElements", jni::ref<jni::array<java::lang::String>>>(); }
	jboolean isCDataElement(jni::ref<java::lang::String> p1) { return call_method<"isCDataElement", jboolean>(p1); }
	void setCDataElements(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"setCDataElements", void>(p1); }
	jni::ref<jni::array<java::lang::String>> getNonEscapingElements() { return call_method<"getNonEscapingElements", jni::ref<jni::array<java::lang::String>>>(); }
	jboolean isNonEscapingElement(jni::ref<java::lang::String> p1) { return call_method<"isNonEscapingElement", jboolean>(p1); }
	void setNonEscapingElements(jni::ref<jni::array<java::lang::String>> p1) { return call_method<"setNonEscapingElements", void>(p1); }
	jni::ref<java::lang::String> getLineSeparator() { return call_method<"getLineSeparator", jni::ref<java::lang::String>>(); }
	void setLineSeparator(jni::ref<java::lang::String> p1) { return call_method<"setLineSeparator", void>(p1); }
	jboolean getPreserveSpace() { return call_method<"getPreserveSpace", jboolean>(); }
	void setPreserveSpace(jboolean p1) { return call_method<"setPreserveSpace", void>(p1); }
	jint getLineWidth() { return call_method<"getLineWidth", jint>(); }
	void setLineWidth(jint p1) { return call_method<"setLineWidth", void>(p1); }
	jboolean getPreserveEmptyAttributes() { return call_method<"getPreserveEmptyAttributes", jboolean>(); }
	void setPreserveEmptyAttributes(jboolean p1) { return call_method<"setPreserveEmptyAttributes", void>(p1); }
	jchar getLastPrintable() { return call_method<"getLastPrintable", jchar>(); }
	static jni::ref<java::lang::String> whichMethod(jni::ref<org::w3c::dom::Document> p1) { return call_static_method<"whichMethod", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> whichDoctypePublic(jni::ref<org::w3c::dom::Document> p1) { return call_static_method<"whichDoctypePublic", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> whichDoctypeSystem(jni::ref<org::w3c::dom::Document> p1) { return call_static_method<"whichDoctypeSystem", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> whichMediaType(jni::ref<java::lang::String> p1) { return call_static_method<"whichMediaType", jni::ref<java::lang::String>>(p1); }

protected:

	OutputFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_SERIALIZE_OUTPUTFORMAT
