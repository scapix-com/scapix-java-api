// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_BOOTSTRAPMETHOD_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_BOOTSTRAPMETHOD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class BootstrapMethod; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::BootstrapMethod>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/BootstrapMethod";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_BOOTSTRAPMETHOD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_BOOTSTRAPMETHOD)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_BOOTSTRAPMETHOD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantPool.h>
#include <scapix/java_api/java/io/DataOutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::BootstrapMethod : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/BootstrapMethod",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::classfile::BootstrapMethod> new_object(jni::ref<com::sun::org::apache::bcel::internal::classfile::BootstrapMethod> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::BootstrapMethod> new_object(jint p1, jni::ref<jni::array<jint>> p2) { return base_::new_object(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::BootstrapMethod> copy() { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::classfile::BootstrapMethod>>(); }
	void dump(jni::ref<java::io::DataOutputStream> p1) { return call_method<"dump", void>(p1); }
	jni::ref<jni::array<jint>> getBootstrapArguments() { return call_method<"getBootstrapArguments", jni::ref<jni::array<jint>>>(); }
	jint getBootstrapMethodRef() { return call_method<"getBootstrapMethodRef", jint>(); }
	jint getNumBootstrapArguments() { return call_method<"getNumBootstrapArguments", jint>(); }
	void setBootstrapArguments(jni::ref<jni::array<jint>> p1) { return call_method<"setBootstrapArguments", void>(p1); }
	void setBootstrapMethodRef(jint p1) { return call_method<"setBootstrapMethodRef", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString(jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> p1) { return call_method<"toString", jni::ref<java::lang::String>>(p1); }

protected:

	BootstrapMethod(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_BOOTSTRAPMETHOD
