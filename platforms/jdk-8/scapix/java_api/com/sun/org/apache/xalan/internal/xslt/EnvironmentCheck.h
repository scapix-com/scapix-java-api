// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLT_ENVIRONMENTCHECK_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLT_ENVIRONMENTCHECK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xslt { class EnvironmentCheck; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xslt::EnvironmentCheck>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xslt/EnvironmentCheck";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLT_ENVIRONMENTCHECK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLT_ENVIRONMENTCHECK)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLT_ENVIRONMENTCHECK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/org/w3c/dom/Document.h>
#include <scapix/java_api/org/w3c/dom/Node.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xslt::EnvironmentCheck : public jni::object_base<"com/sun/org/apache/xalan/internal/xslt/EnvironmentCheck",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> ERROR() { return get_static_field<"ERROR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> WARNING() { return get_static_field<"WARNING", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ERROR_FOUND() { return get_static_field<"ERROR_FOUND", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> VERSION() { return get_static_field<"VERSION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FOUNDCLASSES() { return get_static_field<"FOUNDCLASSES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CLASS_PRESENT() { return get_static_field<"CLASS_PRESENT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CLASS_NOTPRESENT() { return get_static_field<"CLASS_NOTPRESENT", jni::ref<java::lang::String>>(); }
	jni::ref<jni::array<java::lang::String>> jarNames() { return get_field<"jarNames", jni::ref<jni::array<java::lang::String>>>(); }
	void jarNames(jni::ref<jni::array<java::lang::String>> v) { set_field<"jarNames", jni::ref<jni::array<java::lang::String>>>(v); }

	static jni::ref<com::sun::org::apache::xalan::internal::xslt::EnvironmentCheck> new_object() { return base_::new_object(); }
	static void main(jni::ref<jni::array<java::lang::String>> p1) { return call_static_method<"main", void>(p1); }
	jboolean checkEnvironment(jni::ref<java::io::PrintWriter> p1) { return call_method<"checkEnvironment", jboolean>(p1); }
	jni::ref<java::util::Map> getEnvironmentHash() { return call_method<"getEnvironmentHash", jni::ref<java::util::Map>>(); }
	void appendEnvironmentReport(jni::ref<org::w3c::dom::Node> p1, jni::ref<org::w3c::dom::Document> p2, jni::ref<java::util::Map> p3) { return call_method<"appendEnvironmentReport", void>(p1, p2, p3); }

protected:

	EnvironmentCheck(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLT_ENVIRONMENTCHECK
