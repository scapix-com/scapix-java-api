// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/TopLevelElement.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_TEMPLATE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_TEMPLATE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler { class Template; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::Template>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/Template";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::TopLevelElement>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_TEMPLATE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_TEMPLATE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_TEMPLATE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Param.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Parser.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Pattern.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/QName.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Stylesheet.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SymbolTable.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ClassGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/Type.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::compiler::Template : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/Template",
	com::sun::org::apache::xalan::internal::xsltc::compiler::TopLevelElement>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Template> new_object() { return base_::new_object(); }
	jboolean hasParams() { return call_method<"hasParams", jboolean>(); }
	jboolean isSimplified() { return call_method<"isSimplified", jboolean>(); }
	void setSimplified() { return call_method<"setSimplified", void>(); }
	jboolean isSimpleNamedTemplate() { return call_method<"isSimpleNamedTemplate", jboolean>(); }
	void addParameter(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Param> p1) { return call_method<"addParameter", void>(p1); }
	jni::ref<java::util::Vector> getParameters() { return call_method<"getParameters", jni::ref<java::util::Vector>>(); }
	void disable() { return call_method<"disable", void>(); }
	jboolean disabled() { return call_method<"disabled", jboolean>(); }
	jdouble getPriority() { return call_method<"getPriority", jdouble>(); }
	jint getPosition() { return call_method<"getPosition", jint>(); }
	jboolean isNamed() { return call_method<"isNamed", jboolean>(); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Pattern> getPattern() { return call_method<"getPattern", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Pattern>>(); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName> getName() { return call_method<"getName", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName>>(); }
	void setName(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName> p1) { return call_method<"setName", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName> getModeName() { return call_method<"getModeName", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName>>(); }
	jint compareTo(jni::ref<java::lang::Object> p1) { return call_method<"compareTo", jint>(p1); }
	void display(jint p1) { return call_method<"display", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> getStylesheet() { return call_method<"getStylesheet", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>>(); }
	void parseContents(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser> p1) { return call_method<"parseContents", void>(p1); }
	void parseSimplified(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser> p2) { return call_method<"parseSimplified", void>(p1, p2); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> typeCheck(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SymbolTable> p1) { return call_method<"typeCheck", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(p1); }
	void translate(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"translate", void>(p1, p2); }

protected:

	Template(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_TEMPLATE
