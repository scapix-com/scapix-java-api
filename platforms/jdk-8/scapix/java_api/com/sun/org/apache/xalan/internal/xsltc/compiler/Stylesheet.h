// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SyntaxTreeNode.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_STYLESHEET_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_STYLESHEET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler { class Stylesheet; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/xsltc/compiler/Stylesheet";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xalan::internal::xsltc::compiler::SyntaxTreeNode>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_STYLESHEET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_STYLESHEET)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_STYLESHEET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Mode.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Output.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Param.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Parser.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/QName.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SourceLoader.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/SymbolTable.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/Variable.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ClassGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/MethodGenerator.h>
#include <scapix/java_api/com/sun/org/apache/xalan/internal/xsltc/compiler/util/Type.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Properties.h>
#include <scapix/java_api/java/util/Vector.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet : public jni::object_base<"com/sun/org/apache/xalan/internal/xsltc/compiler/Stylesheet",
	com::sun::org::apache::xalan::internal::xsltc::compiler::SyntaxTreeNode>
{
public:

	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> _importedFrom() { return get_field<"_importedFrom", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>>(); }
	void _importedFrom(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> v) { set_field<"_importedFrom", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>>(v); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> _includedFrom() { return get_field<"_includedFrom", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>>(); }
	void _includedFrom(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> v) { set_field<"_includedFrom", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>>(v); }
	static jint UNKNOWN_OUTPUT() { return get_static_field<"UNKNOWN_OUTPUT", jint>(); }
	static jint XML_OUTPUT() { return get_static_field<"XML_OUTPUT", jint>(); }
	static jint HTML_OUTPUT() { return get_static_field<"HTML_OUTPUT", jint>(); }
	static jint TEXT_OUTPUT() { return get_static_field<"TEXT_OUTPUT", jint>(); }

	static jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> new_object() { return base_::new_object(); }
	jint getOutputMethod() { return call_method<"getOutputMethod", jint>(); }
	jboolean getTemplateInlining() { return call_method<"getTemplateInlining", jboolean>(); }
	void setTemplateInlining(jboolean p1) { return call_method<"setTemplateInlining", void>(p1); }
	jboolean isSimplified() { return call_method<"isSimplified", jboolean>(); }
	void setSimplified() { return call_method<"setSimplified", void>(); }
	void setHasIdCall(jboolean p1) { return call_method<"setHasIdCall", void>(p1); }
	void setOutputProperty(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"setOutputProperty", void>(p1, p2); }
	void setOutputProperties(jni::ref<java::util::Properties> p1) { return call_method<"setOutputProperties", void>(p1); }
	jni::ref<java::util::Properties> getOutputProperties() { return call_method<"getOutputProperties", jni::ref<java::util::Properties>>(); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Output> getLastOutputElement() { return call_method<"getLastOutputElement", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Output>>(); }
	void setMultiDocument(jboolean p1) { return call_method<"setMultiDocument", void>(p1); }
	jboolean isMultiDocument() { return call_method<"isMultiDocument", jboolean>(); }
	void setCallsNodeset(jboolean p1) { return call_method<"setCallsNodeset", void>(p1); }
	jboolean callsNodeset() { return call_method<"callsNodeset", jboolean>(); }
	void numberFormattingUsed() { return call_method<"numberFormattingUsed", void>(); }
	void setImportPrecedence(jint p1) { return call_method<"setImportPrecedence", void>(p1); }
	jint getImportPrecedence() { return call_method<"getImportPrecedence", jint>(); }
	jint getMinimumDescendantPrecedence() { return call_method<"getMinimumDescendantPrecedence", jint>(); }
	jboolean checkForLoop(jni::ref<java::lang::String> p1) { return call_method<"checkForLoop", jboolean>(p1); }
	void setParser(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser> p1) { return call_method<"setParser", void>(p1); }
	void setParentStylesheet(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> p1) { return call_method<"setParentStylesheet", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> getParentStylesheet() { return call_method<"getParentStylesheet", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet>>(); }
	void setImportingStylesheet(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> p1) { return call_method<"setImportingStylesheet", void>(p1); }
	void setIncludingStylesheet(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> p1) { return call_method<"setIncludingStylesheet", void>(p1); }
	void addIncludedStylesheet(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Stylesheet> p1) { return call_method<"addIncludedStylesheet", void>(p1); }
	void setSystemId(jni::ref<java::lang::String> p1) { return call_method<"setSystemId", void>(p1); }
	jni::ref<java::lang::String> getSystemId() { return call_method<"getSystemId", jni::ref<java::lang::String>>(); }
	void setSourceLoader(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SourceLoader> p1) { return call_method<"setSourceLoader", void>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SourceLoader> getSourceLoader() { return call_method<"getSourceLoader", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SourceLoader>>(); }
	jboolean hasGlobals() { return call_method<"hasGlobals", jboolean>(); }
	jboolean hasLocalParams() { return call_method<"hasLocalParams", jboolean>(); }
	jboolean isExtension(jni::ref<java::lang::String> p1) { return call_method<"isExtension", jboolean>(p1); }
	void declareExtensionPrefixes(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser> p1) { return call_method<"declareExtensionPrefixes", void>(p1); }
	void parseContents(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser> p1) { return call_method<"parseContents", void>(p1); }
	void parseOwnChildren(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Parser> p1) { return call_method<"parseOwnChildren", void>(p1); }
	void processModes() { return call_method<"processModes", void>(); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Mode> getMode(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::QName> p1) { return call_method<"getMode", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Mode>>(p1); }
	jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type> typeCheck(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::SymbolTable> p1) { return call_method<"typeCheck", jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::Type>>(p1); }
	void translate(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::ClassGenerator> p1, jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::util::MethodGenerator> p2) { return call_method<"translate", void>(p1, p2); }
	void translate() { return call_method<"translate", void>(); }
	jint addParam(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Param> p1) { return call_method<"addParam", jint>(p1); }
	jint addVariable(jni::ref<com::sun::org::apache::xalan::internal::xsltc::compiler::Variable> p1) { return call_method<"addVariable", jint>(p1); }
	void display(jint p1) { return call_method<"display", void>(p1); }
	jni::ref<java::lang::String> getNamespace(jni::ref<java::lang::String> p1) { return call_method<"getNamespace", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getClassName() { return call_method<"getClassName", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Vector> getTemplates() { return call_method<"getTemplates", jni::ref<java::util::Vector>>(); }
	jni::ref<java::util::Vector> getAllValidTemplates() { return call_method<"getAllValidTemplates", jni::ref<java::util::Vector>>(); }

protected:

	Stylesheet(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_XSLTC_COMPILER_STYLESHEET
