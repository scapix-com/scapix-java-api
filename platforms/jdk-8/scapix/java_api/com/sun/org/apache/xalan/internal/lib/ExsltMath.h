// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/org/apache/xalan/internal/lib/ExsltBase.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTMATH_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTMATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xalan::internal::lib { class ExsltMath; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xalan::internal::lib::ExsltMath>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xalan/internal/lib/ExsltMath";
	using base_classes = std::tuple<scapix::java_api::com::sun::org::apache::xalan::internal::lib::ExsltBase>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTMATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTMATH)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTMATH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/w3c/dom/NodeList.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xalan::internal::lib::ExsltMath : public jni::object_base<"com/sun/org/apache/xalan/internal/lib/ExsltMath",
	com::sun::org::apache::xalan::internal::lib::ExsltBase>
{
public:

	static jni::ref<com::sun::org::apache::xalan::internal::lib::ExsltMath> new_object() { return base_::new_object(); }
	static jdouble max(jni::ref<org::w3c::dom::NodeList> p1) { return call_static_method<"max", jdouble>(p1); }
	static jdouble min(jni::ref<org::w3c::dom::NodeList> p1) { return call_static_method<"min", jdouble>(p1); }
	static jni::ref<org::w3c::dom::NodeList> highest(jni::ref<org::w3c::dom::NodeList> p1) { return call_static_method<"highest", jni::ref<org::w3c::dom::NodeList>>(p1); }
	static jni::ref<org::w3c::dom::NodeList> lowest(jni::ref<org::w3c::dom::NodeList> p1) { return call_static_method<"lowest", jni::ref<org::w3c::dom::NodeList>>(p1); }
	static jdouble abs(jdouble p1) { return call_static_method<"abs", jdouble>(p1); }
	static jdouble acos(jdouble p1) { return call_static_method<"acos", jdouble>(p1); }
	static jdouble asin(jdouble p1) { return call_static_method<"asin", jdouble>(p1); }
	static jdouble atan(jdouble p1) { return call_static_method<"atan", jdouble>(p1); }
	static jdouble atan2(jdouble p1, jdouble p2) { return call_static_method<"atan2", jdouble>(p1, p2); }
	static jdouble cos(jdouble p1) { return call_static_method<"cos", jdouble>(p1); }
	static jdouble exp(jdouble p1) { return call_static_method<"exp", jdouble>(p1); }
	static jdouble log(jdouble p1) { return call_static_method<"log", jdouble>(p1); }
	static jdouble power(jdouble p1, jdouble p2) { return call_static_method<"power", jdouble>(p1, p2); }
	static jdouble random() { return call_static_method<"random", jdouble>(); }
	static jdouble sin(jdouble p1) { return call_static_method<"sin", jdouble>(p1); }
	static jdouble sqrt(jdouble p1) { return call_static_method<"sqrt", jdouble>(p1); }
	static jdouble tan(jdouble p1) { return call_static_method<"tan", jdouble>(p1); }
	static jdouble constant(jni::ref<java::lang::String> p1, jdouble p2) { return call_static_method<"constant", jdouble>(p1, p2); }

protected:

	ExsltMath(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XALAN_INTERNAL_LIB_EXSLTMATH
