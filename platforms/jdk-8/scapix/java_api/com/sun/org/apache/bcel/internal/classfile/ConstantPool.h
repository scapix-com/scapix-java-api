// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Node.h>
#include <scapix/java_api/java/lang/Iterable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CONSTANTPOOL_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CONSTANTPOOL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::classfile { class ConstantPool; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::classfile::ConstantPool>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/classfile/ConstantPool";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable, scapix::java_api::com::sun::org::apache::bcel::internal::classfile::Node, scapix::java_api::java::lang::Iterable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CONSTANTPOOL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CONSTANTPOOL)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CONSTANTPOOL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Constant.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantInteger.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/ConstantUtf8.h>
#include <scapix/java_api/com/sun/org/apache/bcel/internal/classfile/Visitor.h>
#include <scapix/java_api/java/io/DataInput.h>
#include <scapix/java_api/java/io/DataOutputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::classfile::ConstantPool : public jni::object_base<"com/sun/org/apache/bcel/internal/classfile/ConstantPool",
	java::lang::Object,
	java::lang::Cloneable,
	com::sun::org::apache::bcel::internal::classfile::Node,
	java::lang::Iterable>
{
public:

	static jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> new_object(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Constant>> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> new_object(jni::ref<java::io::DataInput> p1) { return base_::new_object(p1); }
	void accept(jni::ref<com::sun::org::apache::bcel::internal::classfile::Visitor> p1) { return call_method<"accept", void>(p1); }
	jni::ref<java::lang::String> constantToString(jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant> p1) { return call_method<"constantToString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> constantToString(jint p1, jbyte p2) { return call_method<"constantToString", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool> copy() { return call_method<"copy", jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantPool>>(); }
	void dump(jni::ref<java::io::DataOutputStream> p1) { return call_method<"dump", void>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant> getConstant(jint p1) { return call_method<"getConstant", jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant>>(p1); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant> getConstant(jint p1, jbyte p2) { return call_method<"getConstant", jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant> getConstant(jint p1, jbyte p2, jni::ref<java::lang::Class> p3) { return call_method<"getConstant", jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant>>(p1, p2, p3); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant> getConstant(jint p1, jni::ref<java::lang::Class> p2) { return call_method<"getConstant", jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantInteger> getConstantInteger(jint p1) { return call_method<"getConstantInteger", jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantInteger>>(p1); }
	jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Constant>> getConstantPool() { return call_method<"getConstantPool", jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Constant>>>(); }
	jni::ref<java::lang::String> getConstantString(jint p1, jbyte p2) { return call_method<"getConstantString", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantUtf8> getConstantUtf8(jint p1) { return call_method<"getConstantUtf8", jni::ref<com::sun::org::apache::bcel::internal::classfile::ConstantUtf8>>(p1); }
	jint getLength() { return call_method<"getLength", jint>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	void setConstant(jint p1, jni::ref<com::sun::org::apache::bcel::internal::classfile::Constant> p2) { return call_method<"setConstant", void>(p1, p2); }
	void setConstantPool(jni::ref<jni::array<com::sun::org::apache::bcel::internal::classfile::Constant>> p1) { return call_method<"setConstantPool", void>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ConstantPool(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_CLASSFILE_CONSTANTPOOL
