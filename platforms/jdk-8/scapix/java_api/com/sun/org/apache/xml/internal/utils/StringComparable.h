// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_STRINGCOMPARABLE_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_STRINGCOMPARABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::xml::internal::utils { class StringComparable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::xml::internal::utils::StringComparable>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/xml/internal/utils/StringComparable";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_STRINGCOMPARABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_STRINGCOMPARABLE)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_STRINGCOMPARABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/Collator.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::xml::internal::utils::StringComparable : public jni::object_base<"com/sun/org/apache/xml/internal/utils/StringComparable",
	java::lang::Object,
	java::lang::Comparable>
{
public:

	static jint UNKNOWN_CASE() { return get_static_field<"UNKNOWN_CASE", jint>(); }
	static jint UPPER_CASE() { return get_static_field<"UPPER_CASE", jint>(); }
	static jint LOWER_CASE() { return get_static_field<"LOWER_CASE", jint>(); }

	static jni::ref<com::sun::org::apache::xml::internal::utils::StringComparable> new_object(jni::ref<java::lang::String> p1, jni::ref<java::util::Locale> p2, jni::ref<java::text::Collator> p3, jni::ref<java::lang::String> p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<java::lang::Comparable> getComparator(jni::ref<java::lang::String> p1, jni::ref<java::util::Locale> p2, jni::ref<java::text::Collator> p3, jni::ref<java::lang::String> p4) { return call_static_method<"getComparator", jni::ref<java::lang::Comparable>>(p1, p2, p3, p4); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint compareTo(jni::ref<java::lang::Object> p1) { return call_method<"compareTo", jint>(p1); }

protected:

	StringComparable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_XML_INTERNAL_UTILS_STRINGCOMPARABLE
