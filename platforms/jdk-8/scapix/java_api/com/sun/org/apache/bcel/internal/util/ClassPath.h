// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_UTIL_CLASSPATH_FWD
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_UTIL_CLASSPATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::org::apache::bcel::internal::util { class ClassPath; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::org::apache::bcel::internal::util::ClassPath>
{
	static constexpr fixed_string class_name = "com/sun/org/apache/bcel/internal/util/ClassPath";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_UTIL_CLASSPATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_UTIL_CLASSPATH)
#define SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_UTIL_CLASSPATH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/org/apache/bcel/internal/util/ClassPath_ClassFile.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::org::apache::bcel::internal::util::ClassPath : public jni::object_base<"com/sun/org/apache/bcel/internal/util/ClassPath",
	java::lang::Object,
	java::io::Serializable>
{
public:

	using ClassFile = ClassPath_ClassFile;

	static jni::ref<com::sun::org::apache::bcel::internal::util::ClassPath> SYSTEM_CLASS_PATH() { return get_static_field<"SYSTEM_CLASS_PATH", jni::ref<com::sun::org::apache::bcel::internal::util::ClassPath>>(); }

	static jni::ref<com::sun::org::apache::bcel::internal::util::ClassPath> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::org::apache::bcel::internal::util::ClassPath> new_object() { return base_::new_object(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }
	static jni::ref<java::lang::String> getClassPath() { return call_static_method<"getClassPath", jni::ref<java::lang::String>>(); }
	jni::ref<java::io::InputStream> getInputStream(jni::ref<java::lang::String> p1) { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(p1); }
	jni::ref<java::io::InputStream> getInputStream(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::util::ClassPath_ClassFile> getClassFile(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getClassFile", jni::ref<com::sun::org::apache::bcel::internal::util::ClassPath_ClassFile>>(p1, p2); }
	jni::ref<com::sun::org::apache::bcel::internal::util::ClassPath_ClassFile> getClassFile(jni::ref<java::lang::String> p1) { return call_method<"getClassFile", jni::ref<com::sun::org::apache::bcel::internal::util::ClassPath_ClassFile>>(p1); }
	jni::ref<jni::array<jbyte>> getBytes(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1, p2); }
	jni::ref<jni::array<jbyte>> getBytes(jni::ref<java::lang::String> p1) { return call_method<"getBytes", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<java::lang::String> getPath(jni::ref<java::lang::String> p1) { return call_method<"getPath", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> getPath(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"getPath", jni::ref<java::lang::String>>(p1, p2); }

protected:

	ClassPath(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_ORG_APACHE_BCEL_INTERNAL_UTIL_CLASSPATH
