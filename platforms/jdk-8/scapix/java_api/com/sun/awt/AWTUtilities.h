// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_AWT_AWTUTILITIES_FWD
#define SCAPIX_JAVA_API_COM_SUN_AWT_AWTUTILITIES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::awt { class AWTUtilities; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::awt::AWTUtilities>
{
	static constexpr fixed_string class_name = "com/sun/awt/AWTUtilities";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_AWT_AWTUTILITIES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_AWT_AWTUTILITIES)
#define SCAPIX_JAVA_API_COM_SUN_AWT_AWTUTILITIES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/awt/AWTUtilities_Translucency.h>
#include <scapix/java_api/java/awt/Component.h>
#include <scapix/java_api/java/awt/GraphicsConfiguration.h>
#include <scapix/java_api/java/awt/Shape.h>
#include <scapix/java_api/java/awt/Window.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::awt::AWTUtilities : public jni::object_base<"com/sun/awt/AWTUtilities",
	java::lang::Object>
{
public:

	using Translucency = AWTUtilities_Translucency;

	static jboolean isTranslucencySupported(jni::ref<com::sun::awt::AWTUtilities_Translucency> p1) { return call_static_method<"isTranslucencySupported", jboolean>(p1); }
	static void setWindowOpacity(jni::ref<java::awt::Window> p1, jfloat p2) { return call_static_method<"setWindowOpacity", void>(p1, p2); }
	static jfloat getWindowOpacity(jni::ref<java::awt::Window> p1) { return call_static_method<"getWindowOpacity", jfloat>(p1); }
	static jboolean isWindowShapingSupported() { return call_static_method<"isWindowShapingSupported", jboolean>(); }
	static jni::ref<java::awt::Shape> getWindowShape(jni::ref<java::awt::Window> p1) { return call_static_method<"getWindowShape", jni::ref<java::awt::Shape>>(p1); }
	static void setWindowShape(jni::ref<java::awt::Window> p1, jni::ref<java::awt::Shape> p2) { return call_static_method<"setWindowShape", void>(p1, p2); }
	static void setWindowOpaque(jni::ref<java::awt::Window> p1, jboolean p2) { return call_static_method<"setWindowOpaque", void>(p1, p2); }
	static jboolean isWindowOpaque(jni::ref<java::awt::Window> p1) { return call_static_method<"isWindowOpaque", jboolean>(p1); }
	static jboolean isTranslucencyCapable(jni::ref<java::awt::GraphicsConfiguration> p1) { return call_static_method<"isTranslucencyCapable", jboolean>(p1); }
	static void setComponentMixingCutoutShape(jni::ref<java::awt::Component> p1, jni::ref<java::awt::Shape> p2) { return call_static_method<"setComponentMixingCutoutShape", void>(p1, p2); }

protected:

	AWTUtilities(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_AWT_AWTUTILITIES
