// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_MANAGEMENT_JMX_TRACE_FWD
#define SCAPIX_JAVA_API_COM_SUN_MANAGEMENT_JMX_TRACE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::management::jmx { class Trace; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::management::jmx::Trace>
{
	static constexpr fixed_string class_name = "com/sun/management/jmx/Trace";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MANAGEMENT_JMX_TRACE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_MANAGEMENT_JMX_TRACE)
#define SCAPIX_JAVA_API_COM_SUN_MANAGEMENT_JMX_TRACE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/management/jmx/TraceListener.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/javax/management/NotificationFilter.h>
#include <scapix/java_api/javax/management/NotificationListener.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::management::jmx::Trace : public jni::object_base<"com/sun/management/jmx/Trace",
	java::lang::Object>
{
public:

	static jint LEVEL_TRACE() { return get_static_field<"LEVEL_TRACE", jint>(); }
	static jint LEVEL_DEBUG() { return get_static_field<"LEVEL_DEBUG", jint>(); }
	static jint INFO_MBEANSERVER() { return get_static_field<"INFO_MBEANSERVER", jint>(); }
	static jint INFO_MLET() { return get_static_field<"INFO_MLET", jint>(); }
	static jint INFO_MONITOR() { return get_static_field<"INFO_MONITOR", jint>(); }
	static jint INFO_TIMER() { return get_static_field<"INFO_TIMER", jint>(); }
	static jint INFO_ADAPTOR_HTML() { return get_static_field<"INFO_ADAPTOR_HTML", jint>(); }
	static jint INFO_MISC() { return get_static_field<"INFO_MISC", jint>(); }
	static jint INFO_RELATION() { return get_static_field<"INFO_RELATION", jint>(); }
	static jint INFO_MODELMBEAN() { return get_static_field<"INFO_MODELMBEAN", jint>(); }
	static jint INFO_ALL() { return get_static_field<"INFO_ALL", jint>(); }

	static jni::ref<com::sun::management::jmx::Trace> new_object() { return base_::new_object(); }
	static jboolean isSelected(jint p1, jint p2) { return call_static_method<"isSelected", jboolean>(p1, p2); }
	static void parseTraceProperties() { return call_static_method<"parseTraceProperties", void>(); }
	static jboolean send(jint p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5) { return call_static_method<"send", jboolean>(p1, p2, p3, p4, p5); }
	static jboolean send(jint p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::Throwable> p5) { return call_static_method<"send", jboolean>(p1, p2, p3, p4, p5); }
	static void addNotificationListener(jni::ref<javax::management::NotificationListener> p1, jni::ref<javax::management::NotificationFilter> p2, jni::ref<java::lang::Object> p3) { return call_static_method<"addNotificationListener", void>(p1, p2, p3); }
	static void addNotificationListener(jni::ref<com::sun::management::jmx::TraceListener> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"addNotificationListener", void>(p1, p2); }
	static void removeNotificationListener(jni::ref<javax::management::NotificationListener> p1) { return call_static_method<"removeNotificationListener", void>(p1); }
	static void removeAllListeners() { return call_static_method<"removeAllListeners", void>(); }

protected:

	Trace(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_MANAGEMENT_JMX_TRACE
