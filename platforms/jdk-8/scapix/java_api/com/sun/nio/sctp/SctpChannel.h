// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/spi/AbstractSelectableChannel.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPCHANNEL_FWD
#define SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPCHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::nio::sctp { class SctpChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::nio::sctp::SctpChannel>
{
	static constexpr fixed_string class_name = "com/sun/nio/sctp/SctpChannel";
	using base_classes = std::tuple<scapix::java_api::java::nio::channels::spi::AbstractSelectableChannel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPCHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPCHANNEL)
#define SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPCHANNEL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/nio/sctp/Association.h>
#include <scapix/java_api/com/sun/nio/sctp/MessageInfo.h>
#include <scapix/java_api/com/sun/nio/sctp/NotificationHandler.h>
#include <scapix/java_api/com/sun/nio/sctp/SctpSocketOption.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::nio::sctp::SctpChannel : public jni::object_base<"com/sun/nio/sctp/SctpChannel",
	java::nio::channels::spi::AbstractSelectableChannel>
{
public:

	static jni::ref<com::sun::nio::sctp::SctpChannel> open() { return call_static_method<"open", jni::ref<com::sun::nio::sctp::SctpChannel>>(); }
	static jni::ref<com::sun::nio::sctp::SctpChannel> open(jni::ref<java::net::SocketAddress> p1, jint p2, jint p3) { return call_static_method<"open", jni::ref<com::sun::nio::sctp::SctpChannel>>(p1, p2, p3); }
	jni::ref<com::sun::nio::sctp::Association> association() { return call_method<"association", jni::ref<com::sun::nio::sctp::Association>>(); }
	jni::ref<com::sun::nio::sctp::SctpChannel> bind(jni::ref<java::net::SocketAddress> p1) { return call_method<"bind", jni::ref<com::sun::nio::sctp::SctpChannel>>(p1); }
	jni::ref<com::sun::nio::sctp::SctpChannel> bindAddress(jni::ref<java::net::InetAddress> p1) { return call_method<"bindAddress", jni::ref<com::sun::nio::sctp::SctpChannel>>(p1); }
	jni::ref<com::sun::nio::sctp::SctpChannel> unbindAddress(jni::ref<java::net::InetAddress> p1) { return call_method<"unbindAddress", jni::ref<com::sun::nio::sctp::SctpChannel>>(p1); }
	jboolean connect(jni::ref<java::net::SocketAddress> p1) { return call_method<"connect", jboolean>(p1); }
	jboolean connect(jni::ref<java::net::SocketAddress> p1, jint p2, jint p3) { return call_method<"connect", jboolean>(p1, p2, p3); }
	jboolean isConnectionPending() { return call_method<"isConnectionPending", jboolean>(); }
	jboolean finishConnect() { return call_method<"finishConnect", jboolean>(); }
	jni::ref<java::util::Set> getAllLocalAddresses() { return call_method<"getAllLocalAddresses", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> getRemoteAddresses() { return call_method<"getRemoteAddresses", jni::ref<java::util::Set>>(); }
	jni::ref<com::sun::nio::sctp::SctpChannel> shutdown() { return call_method<"shutdown", jni::ref<com::sun::nio::sctp::SctpChannel>>(); }
	jni::ref<java::lang::Object> getOption(jni::ref<com::sun::nio::sctp::SctpSocketOption> p1) { return call_method<"getOption", jni::ref<java::lang::Object>>(p1); }
	jni::ref<com::sun::nio::sctp::SctpChannel> setOption(jni::ref<com::sun::nio::sctp::SctpSocketOption> p1, jni::ref<java::lang::Object> p2) { return call_method<"setOption", jni::ref<com::sun::nio::sctp::SctpChannel>>(p1, p2); }
	jni::ref<java::util::Set> supportedOptions() { return call_method<"supportedOptions", jni::ref<java::util::Set>>(); }
	jint validOps() { return call_method<"validOps", jint>(); }
	jni::ref<com::sun::nio::sctp::MessageInfo> receive(jni::ref<java::nio::ByteBuffer> p1, jni::ref<java::lang::Object> p2, jni::ref<com::sun::nio::sctp::NotificationHandler> p3) { return call_method<"receive", jni::ref<com::sun::nio::sctp::MessageInfo>>(p1, p2, p3); }
	jint send(jni::ref<java::nio::ByteBuffer> p1, jni::ref<com::sun::nio::sctp::MessageInfo> p2) { return call_method<"send", jint>(p1, p2); }

protected:

	SctpChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPCHANNEL
