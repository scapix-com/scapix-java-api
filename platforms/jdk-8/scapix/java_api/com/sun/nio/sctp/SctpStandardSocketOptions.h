// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPSTANDARDSOCKETOPTIONS_FWD
#define SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPSTANDARDSOCKETOPTIONS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::nio::sctp { class SctpStandardSocketOptions; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::nio::sctp::SctpStandardSocketOptions>
{
	static constexpr fixed_string class_name = "com/sun/nio/sctp/SctpStandardSocketOptions";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPSTANDARDSOCKETOPTIONS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPSTANDARDSOCKETOPTIONS)
#define SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPSTANDARDSOCKETOPTIONS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/nio/sctp/SctpSocketOption.h>
#include <scapix/java_api/com/sun/nio/sctp/SctpStandardSocketOptions_InitMaxStreams.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::nio::sctp::SctpStandardSocketOptions : public jni::object_base<"com/sun/nio/sctp/SctpStandardSocketOptions",
	java::lang::Object>
{
public:

	using InitMaxStreams = SctpStandardSocketOptions_InitMaxStreams;

	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SCTP_DISABLE_FRAGMENTS() { return get_static_field<"SCTP_DISABLE_FRAGMENTS", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SCTP_EXPLICIT_COMPLETE() { return get_static_field<"SCTP_EXPLICIT_COMPLETE", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SCTP_FRAGMENT_INTERLEAVE() { return get_static_field<"SCTP_FRAGMENT_INTERLEAVE", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SCTP_INIT_MAXSTREAMS() { return get_static_field<"SCTP_INIT_MAXSTREAMS", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SCTP_NODELAY() { return get_static_field<"SCTP_NODELAY", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SCTP_PRIMARY_ADDR() { return get_static_field<"SCTP_PRIMARY_ADDR", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SCTP_SET_PEER_PRIMARY_ADDR() { return get_static_field<"SCTP_SET_PEER_PRIMARY_ADDR", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SO_SNDBUF() { return get_static_field<"SO_SNDBUF", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SO_RCVBUF() { return get_static_field<"SO_RCVBUF", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }
	static jni::ref<com::sun::nio::sctp::SctpSocketOption> SO_LINGER() { return get_static_field<"SO_LINGER", jni::ref<com::sun::nio::sctp::SctpSocketOption>>(); }


protected:

	SctpStandardSocketOptions(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_SCTPSTANDARDSOCKETOPTIONS
