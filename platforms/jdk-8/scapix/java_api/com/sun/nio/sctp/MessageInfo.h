// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_MESSAGEINFO_FWD
#define SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_MESSAGEINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::nio::sctp { class MessageInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::nio::sctp::MessageInfo>
{
	static constexpr fixed_string class_name = "com/sun/nio/sctp/MessageInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_MESSAGEINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_MESSAGEINFO)
#define SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_MESSAGEINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/nio/sctp/Association.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::nio::sctp::MessageInfo : public jni::object_base<"com/sun/nio/sctp/MessageInfo",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::nio::sctp::MessageInfo> createOutgoing(jni::ref<java::net::SocketAddress> p1, jint p2) { return call_static_method<"createOutgoing", jni::ref<com::sun::nio::sctp::MessageInfo>>(p1, p2); }
	static jni::ref<com::sun::nio::sctp::MessageInfo> createOutgoing(jni::ref<com::sun::nio::sctp::Association> p1, jni::ref<java::net::SocketAddress> p2, jint p3) { return call_static_method<"createOutgoing", jni::ref<com::sun::nio::sctp::MessageInfo>>(p1, p2, p3); }
	jni::ref<java::net::SocketAddress> address() { return call_method<"address", jni::ref<java::net::SocketAddress>>(); }
	jni::ref<com::sun::nio::sctp::Association> association() { return call_method<"association", jni::ref<com::sun::nio::sctp::Association>>(); }
	jint bytes() { return call_method<"bytes", jint>(); }
	jboolean isComplete() { return call_method<"isComplete", jboolean>(); }
	jni::ref<com::sun::nio::sctp::MessageInfo> complete(jboolean p1) { return call_method<"complete", jni::ref<com::sun::nio::sctp::MessageInfo>>(p1); }
	jboolean isUnordered() { return call_method<"isUnordered", jboolean>(); }
	jni::ref<com::sun::nio::sctp::MessageInfo> unordered(jboolean p1) { return call_method<"unordered", jni::ref<com::sun::nio::sctp::MessageInfo>>(p1); }
	jint payloadProtocolID() { return call_method<"payloadProtocolID", jint>(); }
	jni::ref<com::sun::nio::sctp::MessageInfo> payloadProtocolID(jint p1) { return call_method<"payloadProtocolID", jni::ref<com::sun::nio::sctp::MessageInfo>>(p1); }
	jint streamNumber() { return call_method<"streamNumber", jint>(); }
	jni::ref<com::sun::nio::sctp::MessageInfo> streamNumber(jint p1) { return call_method<"streamNumber", jni::ref<com::sun::nio::sctp::MessageInfo>>(p1); }
	jlong timeToLive() { return call_method<"timeToLive", jlong>(); }
	jni::ref<com::sun::nio::sctp::MessageInfo> timeToLive(jlong p1) { return call_method<"timeToLive", jni::ref<com::sun::nio::sctp::MessageInfo>>(p1); }

protected:

	MessageInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_NIO_SCTP_MESSAGEINFO
