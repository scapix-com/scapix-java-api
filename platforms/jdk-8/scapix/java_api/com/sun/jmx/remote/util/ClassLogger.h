// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_CLASSLOGGER_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_CLASSLOGGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::remote::util { class ClassLogger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::remote::util::ClassLogger>
{
	static constexpr fixed_string class_name = "com/sun/jmx/remote/util/ClassLogger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_CLASSLOGGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_CLASSLOGGER)
#define SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_CLASSLOGGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::remote::util::ClassLogger : public jni::object_base<"com/sun/jmx/remote/util/ClassLogger",
	java::lang::Object>
{
public:

	static jni::ref<com::sun::jmx::remote::util::ClassLogger> new_object(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return base_::new_object(p1, p2); }
	jboolean traceOn() { return call_method<"traceOn", jboolean>(); }
	jboolean debugOn() { return call_method<"debugOn", jboolean>(); }
	jboolean warningOn() { return call_method<"warningOn", jboolean>(); }
	jboolean infoOn() { return call_method<"infoOn", jboolean>(); }
	jboolean configOn() { return call_method<"configOn", jboolean>(); }
	jboolean fineOn() { return call_method<"fineOn", jboolean>(); }
	jboolean finerOn() { return call_method<"finerOn", jboolean>(); }
	jboolean finestOn() { return call_method<"finestOn", jboolean>(); }
	void debug(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"debug", void>(p1, p2); }
	void debug(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"debug", void>(p1, p2); }
	void debug(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"debug", void>(p1, p2, p3); }
	void trace(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"trace", void>(p1, p2); }
	void trace(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"trace", void>(p1, p2); }
	void trace(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"trace", void>(p1, p2, p3); }
	void error(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"error", void>(p1, p2); }
	void error(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"error", void>(p1, p2); }
	void error(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"error", void>(p1, p2, p3); }
	void finest(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"finest", void>(p1, p2); }
	void finest(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"finest", void>(p1, p2); }
	void finest(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"finest", void>(p1, p2, p3); }
	void finer(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"finer", void>(p1, p2); }
	void finer(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"finer", void>(p1, p2); }
	void finer(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"finer", void>(p1, p2, p3); }
	void fine(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"fine", void>(p1, p2); }
	void fine(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"fine", void>(p1, p2); }
	void fine(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"fine", void>(p1, p2, p3); }
	void config(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"config", void>(p1, p2); }
	void config(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"config", void>(p1, p2); }
	void config(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"config", void>(p1, p2, p3); }
	void info(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"info", void>(p1, p2); }
	void info(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"info", void>(p1, p2); }
	void info(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"info", void>(p1, p2, p3); }
	void warning(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"warning", void>(p1, p2); }
	void warning(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"warning", void>(p1, p2); }
	void warning(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"warning", void>(p1, p2, p3); }
	void severe(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"severe", void>(p1, p2); }
	void severe(jni::ref<java::lang::String> p1, jni::ref<java::lang::Throwable> p2) { return call_method<"severe", void>(p1, p2); }
	void severe(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"severe", void>(p1, p2, p3); }

protected:

	ClassLogger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_CLASSLOGGER
