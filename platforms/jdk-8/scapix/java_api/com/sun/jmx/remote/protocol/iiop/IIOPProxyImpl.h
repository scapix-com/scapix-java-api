// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/remote/internal/IIOPProxy.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_PROTOCOL_IIOP_IIOPPROXYIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_PROTOCOL_IIOP_IIOPPROXYIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::remote::protocol::iiop { class IIOPProxyImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::remote::protocol::iiop::IIOPProxyImpl>
{
	static constexpr fixed_string class_name = "com/sun/jmx/remote/protocol/iiop/IIOPProxyImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::remote::internal::IIOPProxy>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_PROTOCOL_IIOP_IIOPPROXYIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_PROTOCOL_IIOP_IIOPPROXYIMPL)
#define SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_PROTOCOL_IIOP_IIOPPROXYIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/rmi/Remote.h>
#include <scapix/java_api/java/util/Properties.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::remote::protocol::iiop::IIOPProxyImpl : public jni::object_base<"com/sun/jmx/remote/protocol/iiop/IIOPProxyImpl",
	java::lang::Object,
	com::sun::jmx::remote::internal::IIOPProxy>
{
public:

	static jni::ref<com::sun::jmx::remote::protocol::iiop::IIOPProxyImpl> new_object() { return base_::new_object(); }
	jboolean isStub(jni::ref<java::lang::Object> p1) { return call_method<"isStub", jboolean>(p1); }
	jni::ref<java::lang::Object> getDelegate(jni::ref<java::lang::Object> p1) { return call_method<"getDelegate", jni::ref<java::lang::Object>>(p1); }
	void setDelegate(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"setDelegate", void>(p1, p2); }
	jni::ref<java::lang::Object> getOrb(jni::ref<java::lang::Object> p1) { return call_method<"getOrb", jni::ref<java::lang::Object>>(p1); }
	void connect(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"connect", void>(p1, p2); }
	jboolean isOrb(jni::ref<java::lang::Object> p1) { return call_method<"isOrb", jboolean>(p1); }
	jni::ref<java::lang::Object> createOrb(jni::ref<jni::array<java::lang::String>> p1, jni::ref<java::util::Properties> p2) { return call_method<"createOrb", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> stringToObject(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2) { return call_method<"stringToObject", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::String> objectToString(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"objectToString", jni::ref<java::lang::String>>(p1, p2); }
	jni::ref<java::lang::Object> narrow(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Class> p2) { return call_method<"narrow", jni::ref<java::lang::Object>>(p1, p2); }
	void exportObject(jni::ref<java::rmi::Remote> p1) { return call_method<"exportObject", void>(p1); }
	void unexportObject(jni::ref<java::rmi::Remote> p1) { return call_method<"unexportObject", void>(p1); }
	jni::ref<java::rmi::Remote> toStub(jni::ref<java::rmi::Remote> p1) { return call_method<"toStub", jni::ref<java::rmi::Remote>>(p1); }

protected:

	IIOPProxyImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_PROTOCOL_IIOP_IIOPPROXYIMPL
