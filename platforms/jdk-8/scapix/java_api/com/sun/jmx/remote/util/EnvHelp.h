// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_ENVHELP_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_ENVHELP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::remote::util { class EnvHelp; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::remote::util::EnvHelp>
{
	static constexpr fixed_string class_name = "com/sun/jmx/remote/util/EnvHelp";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_ENVHELP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_ENVHELP)
#define SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_ENVHELP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/remote/security/NotificationAccessController.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/Hashtable.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::remote::util::EnvHelp : public jni::object_base<"com/sun/jmx/remote/util/EnvHelp",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> CREDENTIAL_TYPES() { return get_static_field<"CREDENTIAL_TYPES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> BUFFER_SIZE_PROPERTY() { return get_static_field<"BUFFER_SIZE_PROPERTY", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MAX_FETCH_NOTIFS() { return get_static_field<"MAX_FETCH_NOTIFS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> FETCH_TIMEOUT() { return get_static_field<"FETCH_TIMEOUT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> NOTIF_ACCESS_CONTROLLER() { return get_static_field<"NOTIF_ACCESS_CONTROLLER", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFAULT_ORB() { return get_static_field<"DEFAULT_ORB", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> HIDDEN_ATTRIBUTES() { return get_static_field<"HIDDEN_ATTRIBUTES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> DEFAULT_HIDDEN_ATTRIBUTES() { return get_static_field<"DEFAULT_HIDDEN_ATTRIBUTES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> SERVER_CONNECTION_TIMEOUT() { return get_static_field<"SERVER_CONNECTION_TIMEOUT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> CLIENT_CONNECTION_CHECK_PERIOD() { return get_static_field<"CLIENT_CONNECTION_CHECK_PERIOD", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> JMX_SERVER_DAEMON() { return get_static_field<"JMX_SERVER_DAEMON", jni::ref<java::lang::String>>(); }

	static jni::ref<com::sun::jmx::remote::util::EnvHelp> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::ClassLoader> resolveServerClassLoader(jni::ref<java::util::Map> p1, jni::ref<javax::management::MBeanServer> p2) { return call_static_method<"resolveServerClassLoader", jni::ref<java::lang::ClassLoader>>(p1, p2); }
	static jni::ref<java::lang::ClassLoader> resolveClientClassLoader(jni::ref<java::util::Map> p1) { return call_static_method<"resolveClientClassLoader", jni::ref<java::lang::ClassLoader>>(p1); }
	static jni::ref<java::lang::Throwable> initCause(jni::ref<java::lang::Throwable> p1, jni::ref<java::lang::Throwable> p2) { return call_static_method<"initCause", jni::ref<java::lang::Throwable>>(p1, p2); }
	static jni::ref<java::lang::Throwable> getCause(jni::ref<java::lang::Throwable> p1) { return call_static_method<"getCause", jni::ref<java::lang::Throwable>>(p1); }
	static jint getNotifBufferSize(jni::ref<java::util::Map> p1) { return call_static_method<"getNotifBufferSize", jint>(p1); }
	static jint getMaxFetchNotifNumber(jni::ref<java::util::Map> p1) { return call_static_method<"getMaxFetchNotifNumber", jint>(p1); }
	static jlong getFetchTimeout(jni::ref<java::util::Map> p1) { return call_static_method<"getFetchTimeout", jlong>(p1); }
	static jni::ref<com::sun::jmx::remote::security::NotificationAccessController> getNotificationAccessController(jni::ref<java::util::Map> p1) { return call_static_method<"getNotificationAccessController", jni::ref<com::sun::jmx::remote::security::NotificationAccessController>>(p1); }
	static jlong getIntegerAttribute(jni::ref<java::util::Map> p1, jni::ref<java::lang::String> p2, jlong p3, jlong p4, jlong p5) { return call_static_method<"getIntegerAttribute", jlong>(p1, p2, p3, p4, p5); }
	static void checkAttributes(jni::ref<java::util::Map> p1) { return call_static_method<"checkAttributes", void>(p1); }
	static jni::ref<java::util::Map> filterAttributes(jni::ref<java::util::Map> p1) { return call_static_method<"filterAttributes", jni::ref<java::util::Map>>(p1); }
	static jlong getServerConnectionTimeout(jni::ref<java::util::Map> p1) { return call_static_method<"getServerConnectionTimeout", jlong>(p1); }
	static jlong getConnectionCheckPeriod(jni::ref<java::util::Map> p1) { return call_static_method<"getConnectionCheckPeriod", jlong>(p1); }
	static jboolean computeBooleanFromString(jni::ref<java::lang::String> p1) { return call_static_method<"computeBooleanFromString", jboolean>(p1); }
	static jboolean computeBooleanFromString(jni::ref<java::lang::String> p1, jboolean p2) { return call_static_method<"computeBooleanFromString", jboolean>(p1, p2); }
	static jni::ref<java::util::Hashtable> mapToHashtable(jni::ref<java::util::Map> p1) { return call_static_method<"mapToHashtable", jni::ref<java::util::Hashtable>>(p1); }
	static jboolean isServerDaemon(jni::ref<java::util::Map> p1) { return call_static_method<"isServerDaemon", jboolean>(p1); }

protected:

	EnvHelp(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_REMOTE_UTIL_ENVHELP
