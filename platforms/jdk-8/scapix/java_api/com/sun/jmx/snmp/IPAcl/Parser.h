// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/ParserTreeConstants.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/ParserConstants.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSER_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::IPAcl { class Parser; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::IPAcl::Parser>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/IPAcl/Parser";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::snmp::IPAcl::ParserTreeConstants, scapix::java_api::com::sun::jmx::snmp::IPAcl::ParserConstants>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSER)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/JDMAccess.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/JDMCommunities.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/JDMInformCommunity.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/JDMSecurityDefs.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/JDMTrapCommunity.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/ParseException.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/ParserTokenManager.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/Token.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::jmx::snmp::IPAcl::Parser : public jni::object_base<"com/sun/jmx/snmp/IPAcl/Parser",
	java::lang::Object,
	com::sun::jmx::snmp::IPAcl::ParserTreeConstants,
	com::sun::jmx::snmp::IPAcl::ParserConstants>
{
public:

	jni::ref<com::sun::jmx::snmp::IPAcl::ParserTokenManager> token_source() { return get_field<"token_source", jni::ref<com::sun::jmx::snmp::IPAcl::ParserTokenManager>>(); }
	void token_source(jni::ref<com::sun::jmx::snmp::IPAcl::ParserTokenManager> v) { set_field<"token_source", jni::ref<com::sun::jmx::snmp::IPAcl::ParserTokenManager>>(v); }
	jni::ref<com::sun::jmx::snmp::IPAcl::Token> token() { return get_field<"token", jni::ref<com::sun::jmx::snmp::IPAcl::Token>>(); }
	void token(jni::ref<com::sun::jmx::snmp::IPAcl::Token> v) { set_field<"token", jni::ref<com::sun::jmx::snmp::IPAcl::Token>>(v); }
	jni::ref<com::sun::jmx::snmp::IPAcl::Token> jj_nt() { return get_field<"jj_nt", jni::ref<com::sun::jmx::snmp::IPAcl::Token>>(); }
	void jj_nt(jni::ref<com::sun::jmx::snmp::IPAcl::Token> v) { set_field<"jj_nt", jni::ref<com::sun::jmx::snmp::IPAcl::Token>>(v); }
	jboolean lookingAhead() { return get_field<"lookingAhead", jboolean>(); }
	void lookingAhead(jboolean v) { set_field<"lookingAhead", jboolean>(v); }

	jni::ref<com::sun::jmx::snmp::IPAcl::JDMSecurityDefs> SecurityDefs() { return call_method<"SecurityDefs", jni::ref<com::sun::jmx::snmp::IPAcl::JDMSecurityDefs>>(); }
	void AclBlock() { return call_method<"AclBlock", void>(); }
	void AclItem() { return call_method<"AclItem", void>(); }
	jni::ref<com::sun::jmx::snmp::IPAcl::JDMCommunities> Communities() { return call_method<"Communities", jni::ref<com::sun::jmx::snmp::IPAcl::JDMCommunities>>(); }
	void Community() { return call_method<"Community", void>(); }
	jni::ref<com::sun::jmx::snmp::IPAcl::JDMAccess> Access() { return call_method<"Access", jni::ref<com::sun::jmx::snmp::IPAcl::JDMAccess>>(); }
	void Managers() { return call_method<"Managers", void>(); }
	void Host() { return call_method<"Host", void>(); }
	void HostName() { return call_method<"HostName", void>(); }
	void IpAddress() { return call_method<"IpAddress", void>(); }
	void IpV6Address() { return call_method<"IpV6Address", void>(); }
	void IpMask() { return call_method<"IpMask", void>(); }
	void NetMask() { return call_method<"NetMask", void>(); }
	void NetMaskV6() { return call_method<"NetMaskV6", void>(); }
	void TrapBlock() { return call_method<"TrapBlock", void>(); }
	void TrapItem() { return call_method<"TrapItem", void>(); }
	jni::ref<com::sun::jmx::snmp::IPAcl::JDMTrapCommunity> TrapCommunity() { return call_method<"TrapCommunity", jni::ref<com::sun::jmx::snmp::IPAcl::JDMTrapCommunity>>(); }
	void TrapInterestedHost() { return call_method<"TrapInterestedHost", void>(); }
	void HostTrap() { return call_method<"HostTrap", void>(); }
	void Enterprise() { return call_method<"Enterprise", void>(); }
	void TrapNum() { return call_method<"TrapNum", void>(); }
	void InformBlock() { return call_method<"InformBlock", void>(); }
	void InformItem() { return call_method<"InformItem", void>(); }
	jni::ref<com::sun::jmx::snmp::IPAcl::JDMInformCommunity> InformCommunity() { return call_method<"InformCommunity", jni::ref<com::sun::jmx::snmp::IPAcl::JDMInformCommunity>>(); }
	void InformInterestedHost() { return call_method<"InformInterestedHost", void>(); }
	void HostInform() { return call_method<"HostInform", void>(); }
	static jni::ref<com::sun::jmx::snmp::IPAcl::Parser> new_object(jni::ref<java::io::InputStream> p1) { return base_::new_object(p1); }
	void ReInit(jni::ref<java::io::InputStream> p1) { return call_method<"ReInit", void>(p1); }
	static jni::ref<com::sun::jmx::snmp::IPAcl::Parser> new_object(jni::ref<java::io::Reader> p1) { return base_::new_object(p1); }
	void ReInit(jni::ref<java::io::Reader> p1) { return call_method<"ReInit", void>(p1); }
	static jni::ref<com::sun::jmx::snmp::IPAcl::Parser> new_object(jni::ref<com::sun::jmx::snmp::IPAcl::ParserTokenManager> p1) { return base_::new_object(p1); }
	void ReInit(jni::ref<com::sun::jmx::snmp::IPAcl::ParserTokenManager> p1) { return call_method<"ReInit", void>(p1); }
	jni::ref<com::sun::jmx::snmp::IPAcl::Token> getNextToken() { return call_method<"getNextToken", jni::ref<com::sun::jmx::snmp::IPAcl::Token>>(); }
	jni::ref<com::sun::jmx::snmp::IPAcl::Token> getToken(jint p1) { return call_method<"getToken", jni::ref<com::sun::jmx::snmp::IPAcl::Token>>(p1); }
	jni::ref<com::sun::jmx::snmp::IPAcl::ParseException> generateParseException() { return call_method<"generateParseException", jni::ref<com::sun::jmx::snmp::IPAcl::ParseException>>(); }
	void enable_tracing() { return call_method<"enable_tracing", void>(); }
	void disable_tracing() { return call_method<"disable_tracing", void>(); }

protected:

	Parser(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSER
