// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERDECODER_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERDECODER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp { class BerDecoder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::BerDecoder>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/BerDecoder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERDECODER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERDECODER)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERDECODER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::BerDecoder : public jni::object_base<"com/sun/jmx/snmp/BerDecoder",
	java::lang::Object>
{
public:

	static jint BooleanTag() { return get_static_field<"BooleanTag", jint>(); }
	static jint IntegerTag() { return get_static_field<"IntegerTag", jint>(); }
	static jint OctetStringTag() { return get_static_field<"OctetStringTag", jint>(); }
	static jint NullTag() { return get_static_field<"NullTag", jint>(); }
	static jint OidTag() { return get_static_field<"OidTag", jint>(); }
	static jint SequenceTag() { return get_static_field<"SequenceTag", jint>(); }

	static jni::ref<com::sun::jmx::snmp::BerDecoder> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	void reset() { return call_method<"reset", void>(); }
	jint fetchInteger() { return call_method<"fetchInteger", jint>(); }
	jint fetchInteger(jint p1) { return call_method<"fetchInteger", jint>(p1); }
	jlong fetchIntegerAsLong() { return call_method<"fetchIntegerAsLong", jlong>(); }
	jlong fetchIntegerAsLong(jint p1) { return call_method<"fetchIntegerAsLong", jlong>(p1); }
	jni::ref<jni::array<jbyte>> fetchOctetString() { return call_method<"fetchOctetString", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> fetchOctetString(jint p1) { return call_method<"fetchOctetString", jni::ref<jni::array<jbyte>>>(p1); }
	jni::ref<jni::array<jlong>> fetchOid() { return call_method<"fetchOid", jni::ref<jni::array<jlong>>>(); }
	jni::ref<jni::array<jlong>> fetchOid(jint p1) { return call_method<"fetchOid", jni::ref<jni::array<jlong>>>(p1); }
	void fetchNull() { return call_method<"fetchNull", void>(); }
	void fetchNull(jint p1) { return call_method<"fetchNull", void>(p1); }
	jni::ref<jni::array<jbyte>> fetchAny() { return call_method<"fetchAny", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<jbyte>> fetchAny(jint p1) { return call_method<"fetchAny", jni::ref<jni::array<jbyte>>>(p1); }
	void openSequence() { return call_method<"openSequence", void>(); }
	void openSequence(jint p1) { return call_method<"openSequence", void>(p1); }
	void closeSequence() { return call_method<"closeSequence", void>(); }
	jboolean cannotCloseSequence() { return call_method<"cannotCloseSequence", jboolean>(); }
	jint getTag() { return call_method<"getTag", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	BerDecoder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERDECODER
