// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Exception.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSEEXCEPTION_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSEEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::IPAcl { class ParseException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::IPAcl::ParseException>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/IPAcl/ParseException";
	using base_classes = std::tuple<scapix::java_api::java::lang::Exception>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSEEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSEEXCEPTION)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSEEXCEPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/Token.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::jmx::snmp::IPAcl::ParseException : public jni::object_base<"com/sun/jmx/snmp/IPAcl/ParseException",
	java::lang::Exception>
{
public:

	jni::ref<com::sun::jmx::snmp::IPAcl::Token> currentToken() { return get_field<"currentToken", jni::ref<com::sun::jmx::snmp::IPAcl::Token>>(); }
	void currentToken(jni::ref<com::sun::jmx::snmp::IPAcl::Token> v) { set_field<"currentToken", jni::ref<com::sun::jmx::snmp::IPAcl::Token>>(v); }
	jni::ref<jni::array<jni::array<jint>>> expectedTokenSequences() { return get_field<"expectedTokenSequences", jni::ref<jni::array<jni::array<jint>>>>(); }
	void expectedTokenSequences(jni::ref<jni::array<jni::array<jint>>> v) { set_field<"expectedTokenSequences", jni::ref<jni::array<jni::array<jint>>>>(v); }
	jni::ref<jni::array<java::lang::String>> tokenImage() { return get_field<"tokenImage", jni::ref<jni::array<java::lang::String>>>(); }
	void tokenImage(jni::ref<jni::array<java::lang::String>> v) { set_field<"tokenImage", jni::ref<jni::array<java::lang::String>>>(v); }

	static jni::ref<com::sun::jmx::snmp::IPAcl::ParseException> new_object(jni::ref<com::sun::jmx::snmp::IPAcl::Token> p1, jni::ref<jni::array<jni::array<jint>>> p2, jni::ref<jni::array<java::lang::String>> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::jmx::snmp::IPAcl::ParseException> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::jmx::snmp::IPAcl::ParseException> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::String> getMessage() { return call_method<"getMessage", jni::ref<java::lang::String>>(); }

protected:

	ParseException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSEEXCEPTION
