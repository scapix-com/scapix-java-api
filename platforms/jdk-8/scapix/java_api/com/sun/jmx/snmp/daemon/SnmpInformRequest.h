// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpDefinitions.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPINFORMREQUEST_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPINFORMREQUEST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::daemon { class SnmpInformRequest; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::daemon::SnmpInformRequest>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/daemon/SnmpInformRequest";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::snmp::SnmpDefinitions>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPINFORMREQUEST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPINFORMREQUEST)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPINFORMREQUEST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/SnmpVarBindList.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::daemon::SnmpInformRequest : public jni::object_base<"com/sun/jmx/snmp/daemon/SnmpInformRequest",
	java::lang::Object,
	com::sun::jmx::snmp::SnmpDefinitions>
{
public:

	static jint stInProgress() { return get_static_field<"stInProgress", jint>(); }
	static jint stWaitingToSend() { return get_static_field<"stWaitingToSend", jint>(); }
	static jint stWaitingForReply() { return get_static_field<"stWaitingForReply", jint>(); }
	static jint stReceivedReply() { return get_static_field<"stReceivedReply", jint>(); }
	static jint stAborted() { return get_static_field<"stAborted", jint>(); }
	static jint stTimeout() { return get_static_field<"stTimeout", jint>(); }
	static jint stInternalError() { return get_static_field<"stInternalError", jint>(); }
	static jint stResultsAvailable() { return get_static_field<"stResultsAvailable", jint>(); }
	static jint stNeverUsed() { return get_static_field<"stNeverUsed", jint>(); }

	jint getRequestId() { return call_method<"getRequestId", jint>(); }
	jint getRequestStatus() { return call_method<"getRequestStatus", jint>(); }
	jboolean isAborted() { return call_method<"isAborted", jboolean>(); }
	jboolean inProgress() { return call_method<"inProgress", jboolean>(); }
	jboolean isResultAvailable() { return call_method<"isResultAvailable", jboolean>(); }
	jint getErrorStatus() { return call_method<"getErrorStatus", jint>(); }
	jint getErrorIndex() { return call_method<"getErrorIndex", jint>(); }
	jint getMaxTries() { return call_method<"getMaxTries", jint>(); }
	jint getNumTries() { return call_method<"getNumTries", jint>(); }
	jlong getAbsNextPollTime() { return call_method<"getAbsNextPollTime", jlong>(); }
	jlong getAbsMaxTimeToWait() { return call_method<"getAbsMaxTimeToWait", jlong>(); }
	jni::ref<com::sun::jmx::snmp::SnmpVarBindList> getResponseVarBindList() { return call_method<"getResponseVarBindList", jni::ref<com::sun::jmx::snmp::SnmpVarBindList>>(); }
	jboolean waitForCompletion(jlong p1) { return call_method<"waitForCompletion", jboolean>(p1); }
	void cancelRequest() { return call_method<"cancelRequest", void>(); }
	void notifyClient() { return call_method<"notifyClient", void>(); }
	static jni::ref<java::lang::String> snmpErrorToString(jint p1) { return call_static_method<"snmpErrorToString", jni::ref<java::lang::String>>(p1); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SnmpInformRequest(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPINFORMREQUEST
