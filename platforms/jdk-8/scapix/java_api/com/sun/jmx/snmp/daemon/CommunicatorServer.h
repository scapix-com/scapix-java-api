// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/javax/management/MBeanRegistration.h>
#include <scapix/java_api/javax/management/NotificationBroadcaster.h>
#include <scapix/java_api/com/sun/jmx/snmp/daemon/CommunicatorServerMBean.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_COMMUNICATORSERVER_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_COMMUNICATORSERVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::daemon { class CommunicatorServer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::daemon::CommunicatorServer>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/daemon/CommunicatorServer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Runnable, scapix::java_api::javax::management::MBeanRegistration, scapix::java_api::javax::management::NotificationBroadcaster, scapix::java_api::com::sun::jmx::snmp::daemon::CommunicatorServerMBean>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_COMMUNICATORSERVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_COMMUNICATORSERVER)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_COMMUNICATORSERVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/management/MBeanNotificationInfo.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#include <scapix/java_api/javax/management/NotificationFilter.h>
#include <scapix/java_api/javax/management/NotificationListener.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::daemon::CommunicatorServer : public jni::object_base<"com/sun/jmx/snmp/daemon/CommunicatorServer",
	java::lang::Object,
	java::lang::Runnable,
	javax::management::MBeanRegistration,
	javax::management::NotificationBroadcaster,
	com::sun::jmx::snmp::daemon::CommunicatorServerMBean>
{
public:

	static jint ONLINE() { return get_static_field<"ONLINE", jint>(); }
	static jint OFFLINE() { return get_static_field<"OFFLINE", jint>(); }
	static jint STOPPING() { return get_static_field<"STOPPING", jint>(); }
	static jint STARTING() { return get_static_field<"STARTING", jint>(); }
	static jint SNMP_TYPE() { return get_static_field<"SNMP_TYPE", jint>(); }

	static jni::ref<com::sun::jmx::snmp::daemon::CommunicatorServer> new_object(jint p1) { return base_::new_object(p1); }
	void start(jlong p1) { return call_method<"start", void>(p1); }
	void start() { return call_method<"start", void>(); }
	void stop() { return call_method<"stop", void>(); }
	jboolean isActive() { return call_method<"isActive", jboolean>(); }
	jboolean waitState(jint p1, jlong p2) { return call_method<"waitState", jboolean>(p1, p2); }
	jint getState() { return call_method<"getState", jint>(); }
	jni::ref<java::lang::String> getStateString() { return call_method<"getStateString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getHost() { return call_method<"getHost", jni::ref<java::lang::String>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	void setPort(jint p1) { return call_method<"setPort", void>(p1); }
	jni::ref<java::lang::String> getProtocol() { return call_method<"getProtocol", jni::ref<java::lang::String>>(); }
	void run() { return call_method<"run", void>(); }
	jni::ref<javax::management::MBeanServer> getMBeanServer() { return call_method<"getMBeanServer", jni::ref<javax::management::MBeanServer>>(); }
	void setMBeanServer(jni::ref<javax::management::MBeanServer> p1) { return call_method<"setMBeanServer", void>(p1); }
	void addNotificationListener(jni::ref<javax::management::NotificationListener> p1, jni::ref<javax::management::NotificationFilter> p2, jni::ref<java::lang::Object> p3) { return call_method<"addNotificationListener", void>(p1, p2, p3); }
	void removeNotificationListener(jni::ref<javax::management::NotificationListener> p1) { return call_method<"removeNotificationListener", void>(p1); }
	jni::ref<jni::array<javax::management::MBeanNotificationInfo>> getNotificationInfo() { return call_method<"getNotificationInfo", jni::ref<jni::array<javax::management::MBeanNotificationInfo>>>(); }
	jni::ref<javax::management::ObjectName> preRegister(jni::ref<javax::management::MBeanServer> p1, jni::ref<javax::management::ObjectName> p2) { return call_method<"preRegister", jni::ref<javax::management::ObjectName>>(p1, p2); }
	void postRegister(jni::ref<java::lang::Boolean> p1) { return call_method<"postRegister", void>(p1); }
	void preDeregister() { return call_method<"preDeregister", void>(); }
	void postDeregister() { return call_method<"postDeregister", void>(); }

protected:

	CommunicatorServer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_COMMUNICATORSERVER
