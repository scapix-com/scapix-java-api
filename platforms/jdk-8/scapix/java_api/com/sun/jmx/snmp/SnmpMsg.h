// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpDefinitions.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPMSG_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPMSG_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp { class SnmpMsg; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::SnmpMsg>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/SnmpMsg";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::snmp::SnmpDefinitions>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPMSG_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPMSG)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPMSG

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/BerDecoder.h>
#include <scapix/java_api/com/sun/jmx/snmp/BerEncoder.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpPdu.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpSecurityParameters.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpVarBind.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::SnmpMsg : public jni::object_base<"com/sun/jmx/snmp/SnmpMsg",
	java::lang::Object,
	com::sun::jmx::snmp::SnmpDefinitions>
{
public:

	jint version() { return get_field<"version", jint>(); }
	void version(jint v) { set_field<"version", jint>(v); }
	jni::ref<jni::array<jbyte>> data() { return get_field<"data", jni::ref<jni::array<jbyte>>>(); }
	void data(jni::ref<jni::array<jbyte>> v) { set_field<"data", jni::ref<jni::array<jbyte>>>(v); }
	jint dataLength() { return get_field<"dataLength", jint>(); }
	void dataLength(jint v) { set_field<"dataLength", jint>(v); }
	jni::ref<java::net::InetAddress> address() { return get_field<"address", jni::ref<java::net::InetAddress>>(); }
	void address(jni::ref<java::net::InetAddress> v) { set_field<"address", jni::ref<java::net::InetAddress>>(v); }
	jint port() { return get_field<"port", jint>(); }
	void port(jint v) { set_field<"port", jint>(v); }
	jni::ref<com::sun::jmx::snmp::SnmpSecurityParameters> securityParameters() { return get_field<"securityParameters", jni::ref<com::sun::jmx::snmp::SnmpSecurityParameters>>(); }
	void securityParameters(jni::ref<com::sun::jmx::snmp::SnmpSecurityParameters> v) { set_field<"securityParameters", jni::ref<com::sun::jmx::snmp::SnmpSecurityParameters>>(v); }

	static jni::ref<com::sun::jmx::snmp::SnmpMsg> new_object() { return base_::new_object(); }
	static jint getProtocolVersion(jni::ref<jni::array<jbyte>> p1) { return call_static_method<"getProtocolVersion", jint>(p1); }
	jint getRequestId(jni::ref<jni::array<jbyte>> p1) { return call_method<"getRequestId", jint>(p1); }
	jint encodeMessage(jni::ref<jni::array<jbyte>> p1) { return call_method<"encodeMessage", jint>(p1); }
	void decodeMessage(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_method<"decodeMessage", void>(p1, p2); }
	void encodeSnmpPdu(jni::ref<com::sun::jmx::snmp::SnmpPdu> p1, jint p2) { return call_method<"encodeSnmpPdu", void>(p1, p2); }
	jni::ref<com::sun::jmx::snmp::SnmpPdu> decodeSnmpPdu() { return call_method<"decodeSnmpPdu", jni::ref<com::sun::jmx::snmp::SnmpPdu>>(); }
	static jni::ref<java::lang::String> dumpHexBuffer(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_static_method<"dumpHexBuffer", jni::ref<java::lang::String>>(p1, p2, p3); }
	jni::ref<java::lang::String> printMessage() { return call_method<"printMessage", jni::ref<java::lang::String>>(); }
	void encodeVarBindList(jni::ref<com::sun::jmx::snmp::BerEncoder> p1, jni::ref<jni::array<com::sun::jmx::snmp::SnmpVarBind>> p2) { return call_method<"encodeVarBindList", void>(p1, p2); }
	jni::ref<jni::array<com::sun::jmx::snmp::SnmpVarBind>> decodeVarBindList(jni::ref<com::sun::jmx::snmp::BerDecoder> p1) { return call_method<"decodeVarBindList", jni::ref<jni::array<com::sun::jmx::snmp::SnmpVarBind>>>(p1); }

protected:

	SnmpMsg(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPMSG
