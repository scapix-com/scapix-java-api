// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERENCODER_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERENCODER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp { class BerEncoder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::BerEncoder>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/BerEncoder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERENCODER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERENCODER)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERENCODER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::BerEncoder : public jni::object_base<"com/sun/jmx/snmp/BerEncoder",
	java::lang::Object>
{
public:

	static jint BooleanTag() { return get_static_field<"BooleanTag", jint>(); }
	static jint IntegerTag() { return get_static_field<"IntegerTag", jint>(); }
	static jint OctetStringTag() { return get_static_field<"OctetStringTag", jint>(); }
	static jint NullTag() { return get_static_field<"NullTag", jint>(); }
	static jint OidTag() { return get_static_field<"OidTag", jint>(); }
	static jint SequenceTag() { return get_static_field<"SequenceTag", jint>(); }

	static jni::ref<com::sun::jmx::snmp::BerEncoder> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	jint trim() { return call_method<"trim", jint>(); }
	void putInteger(jint p1) { return call_method<"putInteger", void>(p1); }
	void putInteger(jint p1, jint p2) { return call_method<"putInteger", void>(p1, p2); }
	void putInteger(jlong p1) { return call_method<"putInteger", void>(p1); }
	void putInteger(jlong p1, jint p2) { return call_method<"putInteger", void>(p1, p2); }
	void putOctetString(jni::ref<jni::array<jbyte>> p1) { return call_method<"putOctetString", void>(p1); }
	void putOctetString(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_method<"putOctetString", void>(p1, p2); }
	void putOid(jni::ref<jni::array<jlong>> p1) { return call_method<"putOid", void>(p1); }
	void putOid(jni::ref<jni::array<jlong>> p1, jint p2) { return call_method<"putOid", void>(p1, p2); }
	void putNull() { return call_method<"putNull", void>(); }
	void putNull(jint p1) { return call_method<"putNull", void>(p1); }
	void putAny(jni::ref<jni::array<jbyte>> p1) { return call_method<"putAny", void>(p1); }
	void putAny(jni::ref<jni::array<jbyte>> p1, jint p2) { return call_method<"putAny", void>(p1, p2); }
	void openSequence() { return call_method<"openSequence", void>(); }
	void closeSequence() { return call_method<"closeSequence", void>(); }
	void closeSequence(jint p1) { return call_method<"closeSequence", void>(p1); }

protected:

	BerEncoder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_BERENCODER
