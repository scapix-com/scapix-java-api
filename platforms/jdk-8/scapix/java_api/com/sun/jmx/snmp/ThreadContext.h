// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_THREADCONTEXT_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_THREADCONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp { class ThreadContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::ThreadContext>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/ThreadContext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_THREADCONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_THREADCONTEXT)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_THREADCONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::ThreadContext : public jni::object_base<"com/sun/jmx/snmp/ThreadContext",
	java::lang::Object,
	java::lang::Cloneable>
{
public:

	static jni::ref<java::lang::Object> get(jni::ref<java::lang::String> p1) { return call_static_method<"get", jni::ref<java::lang::Object>>(p1); }
	static jboolean contains(jni::ref<java::lang::String> p1) { return call_static_method<"contains", jboolean>(p1); }
	static jni::ref<com::sun::jmx::snmp::ThreadContext> push(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_static_method<"push", jni::ref<com::sun::jmx::snmp::ThreadContext>>(p1, p2); }
	static jni::ref<com::sun::jmx::snmp::ThreadContext> getThreadContext() { return call_static_method<"getThreadContext", jni::ref<com::sun::jmx::snmp::ThreadContext>>(); }
	static void restore(jni::ref<com::sun::jmx::snmp::ThreadContext> p1) { return call_static_method<"restore", void>(p1); }
	void setInitialContext(jni::ref<com::sun::jmx::snmp::ThreadContext> p1) { return call_method<"setInitialContext", void>(p1); }

protected:

	ThreadContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_THREADCONTEXT
