// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSERCONSTANTS_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSERCONSTANTS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::IPAcl { class ParserConstants; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::IPAcl::ParserConstants>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/IPAcl/ParserConstants";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSERCONSTANTS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSERCONSTANTS)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSERCONSTANTS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::jmx::snmp::IPAcl::ParserConstants : public jni::object_base<"com/sun/jmx/snmp/IPAcl/ParserConstants",
	java::lang::Object>
{
public:

	static jint EOF() { return get_static_field<"EOF", jint>(); }
	static jint ACCESS() { return get_static_field<"ACCESS", jint>(); }
	static jint ACL() { return get_static_field<"ACL", jint>(); }
	static jint ASSIGN() { return get_static_field<"ASSIGN", jint>(); }
	static jint COMMUNITIES() { return get_static_field<"COMMUNITIES", jint>(); }
	static jint ENTERPRISE() { return get_static_field<"ENTERPRISE", jint>(); }
	static jint HOSTS() { return get_static_field<"HOSTS", jint>(); }
	static jint LBRACE() { return get_static_field<"LBRACE", jint>(); }
	static jint MANAGERS() { return get_static_field<"MANAGERS", jint>(); }
	static jint RANGE() { return get_static_field<"RANGE", jint>(); }
	static jint RBRACE() { return get_static_field<"RBRACE", jint>(); }
	static jint RO() { return get_static_field<"RO", jint>(); }
	static jint RW() { return get_static_field<"RW", jint>(); }
	static jint TRAP() { return get_static_field<"TRAP", jint>(); }
	static jint INFORM() { return get_static_field<"INFORM", jint>(); }
	static jint TRAPCOMMUNITY() { return get_static_field<"TRAPCOMMUNITY", jint>(); }
	static jint INFORMCOMMUNITY() { return get_static_field<"INFORMCOMMUNITY", jint>(); }
	static jint TRAPNUM() { return get_static_field<"TRAPNUM", jint>(); }
	static jint INTEGER_LITERAL() { return get_static_field<"INTEGER_LITERAL", jint>(); }
	static jint DECIMAL_LITERAL() { return get_static_field<"DECIMAL_LITERAL", jint>(); }
	static jint HEX_LITERAL() { return get_static_field<"HEX_LITERAL", jint>(); }
	static jint OCTAL_LITERAL() { return get_static_field<"OCTAL_LITERAL", jint>(); }
	static jint V6_ADDRESS() { return get_static_field<"V6_ADDRESS", jint>(); }
	static jint H() { return get_static_field<"H", jint>(); }
	static jint D() { return get_static_field<"D", jint>(); }
	static jint IDENTIFIER() { return get_static_field<"IDENTIFIER", jint>(); }
	static jint LETTER() { return get_static_field<"LETTER", jint>(); }
	static jint SEPARATOR() { return get_static_field<"SEPARATOR", jint>(); }
	static jint DIGIT() { return get_static_field<"DIGIT", jint>(); }
	static jint CSTRING() { return get_static_field<"CSTRING", jint>(); }
	static jint COMMA() { return get_static_field<"COMMA", jint>(); }
	static jint DOT() { return get_static_field<"DOT", jint>(); }
	static jint MARK() { return get_static_field<"MARK", jint>(); }
	static jint MASK() { return get_static_field<"MASK", jint>(); }
	static jint DEFAULT() { return get_static_field<"DEFAULT", jint>(); }
	static jni::ref<jni::array<java::lang::String>> tokenImage() { return get_static_field<"tokenImage", jni::ref<jni::array<java::lang::String>>>(); }


protected:

	ParserConstants(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_PARSERCONSTANTS
