// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/jmx/snmp/SnmpValue.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPSTRING_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPSTRING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp { class SnmpString; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::SnmpString>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/SnmpString";
	using base_classes = std::tuple<scapix::java_api::com::sun::jmx::snmp::SnmpValue>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPSTRING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPSTRING)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPSTRING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/SnmpOid.h>
#include <scapix/java_api/java/lang/Byte.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::SnmpString : public jni::object_base<"com/sun/jmx/snmp/SnmpString",
	com::sun::jmx::snmp::SnmpValue>
{
public:

	static jni::ref<com::sun::jmx::snmp::SnmpString> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::jmx::snmp::SnmpString> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::SnmpString> new_object(jni::ref<jni::array<java::lang::Byte>> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::SnmpString> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::SnmpString> new_object(jni::ref<java::net::InetAddress> p1) { return base_::new_object(p1); }
	jni::ref<java::net::InetAddress> inetAddressValue() { return call_method<"inetAddressValue", jni::ref<java::net::InetAddress>>(); }
	static jni::ref<java::lang::String> BinToChar(jni::ref<java::lang::String> p1) { return call_static_method<"BinToChar", jni::ref<java::lang::String>>(p1); }
	static jni::ref<java::lang::String> HexToChar(jni::ref<java::lang::String> p1) { return call_static_method<"HexToChar", jni::ref<java::lang::String>>(p1); }
	jni::ref<jni::array<jbyte>> byteValue() { return call_method<"byteValue", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<jni::array<java::lang::Byte>> toByte() { return call_method<"toByte", jni::ref<jni::array<java::lang::Byte>>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<com::sun::jmx::snmp::SnmpOid> toOid() { return call_method<"toOid", jni::ref<com::sun::jmx::snmp::SnmpOid>>(); }
	static jni::ref<com::sun::jmx::snmp::SnmpOid> toOid(jni::ref<jni::array<jlong>> p1, jint p2) { return call_static_method<"toOid", jni::ref<com::sun::jmx::snmp::SnmpOid>>(p1, p2); }
	static jint nextOid(jni::ref<jni::array<jlong>> p1, jint p2) { return call_static_method<"nextOid", jint>(p1, p2); }
	static void appendToOid(jni::ref<com::sun::jmx::snmp::SnmpOid> p1, jni::ref<com::sun::jmx::snmp::SnmpOid> p2) { return call_static_method<"appendToOid", void>(p1, p2); }
	jni::ref<com::sun::jmx::snmp::SnmpValue> duplicate() { return call_method<"duplicate", jni::ref<com::sun::jmx::snmp::SnmpValue>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> getTypeName() { return call_method<"getTypeName", jni::ref<java::lang::String>>(); }

protected:

	SnmpString(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPSTRING
