// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/jmx/snmp/SnmpOid.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPIPADDRESS_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPIPADDRESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp { class SnmpIpAddress; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::SnmpIpAddress>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/SnmpIpAddress";
	using base_classes = std::tuple<scapix::java_api::com::sun::jmx::snmp::SnmpOid>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPIPADDRESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPIPADDRESS)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPIPADDRESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::SnmpIpAddress : public jni::object_base<"com/sun/jmx/snmp/SnmpIpAddress",
	com::sun::jmx::snmp::SnmpOid>
{
public:

	static jni::ref<com::sun::jmx::snmp::SnmpIpAddress> new_object(jni::ref<jni::array<jbyte>> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::SnmpIpAddress> new_object(jlong p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::SnmpIpAddress> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::SnmpIpAddress> new_object(jlong p1, jlong p2, jlong p3, jlong p4) { return base_::new_object(p1, p2, p3, p4); }
	jni::ref<jni::array<jbyte>> byteValue() { return call_method<"byteValue", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::lang::String> stringValue() { return call_method<"stringValue", jni::ref<java::lang::String>>(); }
	static jni::ref<com::sun::jmx::snmp::SnmpOid> toOid(jni::ref<jni::array<jlong>> p1, jint p2) { return call_static_method<"toOid", jni::ref<com::sun::jmx::snmp::SnmpOid>>(p1, p2); }
	static jint nextOid(jni::ref<jni::array<jlong>> p1, jint p2) { return call_static_method<"nextOid", jint>(p1, p2); }
	static void appendToOid(jni::ref<com::sun::jmx::snmp::SnmpOid> p1, jni::ref<com::sun::jmx::snmp::SnmpOid> p2) { return call_static_method<"appendToOid", void>(p1, p2); }
	jni::ref<java::lang::String> getTypeName() { return call_method<"getTypeName", jni::ref<java::lang::String>>(); }

protected:

	SnmpIpAddress(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPIPADDRESS
