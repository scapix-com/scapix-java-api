// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPINCOMINGRESPONSE_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPINCOMINGRESPONSE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::internal { class SnmpIncomingResponse; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::internal::SnmpIncomingResponse>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/internal/SnmpIncomingResponse";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPINCOMINGRESPONSE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPINCOMINGRESPONSE)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPINCOMINGRESPONSE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/SnmpMsg.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpPdu.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpSecurityParameters.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpSecurityCache.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::internal::SnmpIncomingResponse : public jni::object_base<"com/sun/jmx/snmp/internal/SnmpIncomingResponse",
	java::lang::Object>
{
public:

	jni::ref<java::net::InetAddress> getAddress() { return call_method<"getAddress", jni::ref<java::net::InetAddress>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	jni::ref<com::sun::jmx::snmp::SnmpSecurityParameters> getSecurityParameters() { return call_method<"getSecurityParameters", jni::ref<com::sun::jmx::snmp::SnmpSecurityParameters>>(); }
	void setSecurityCache(jni::ref<com::sun::jmx::snmp::internal::SnmpSecurityCache> p1) { return call_method<"setSecurityCache", void>(p1); }
	jint getSecurityLevel() { return call_method<"getSecurityLevel", jint>(); }
	jint getSecurityModel() { return call_method<"getSecurityModel", jint>(); }
	jni::ref<jni::array<jbyte>> getContextName() { return call_method<"getContextName", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<com::sun::jmx::snmp::SnmpMsg> decodeMessage(jni::ref<jni::array<jbyte>> p1, jint p2, jni::ref<java::net::InetAddress> p3, jint p4) { return call_method<"decodeMessage", jni::ref<com::sun::jmx::snmp::SnmpMsg>>(p1, p2, p3, p4); }
	jni::ref<com::sun::jmx::snmp::SnmpPdu> decodeSnmpPdu() { return call_method<"decodeSnmpPdu", jni::ref<com::sun::jmx::snmp::SnmpPdu>>(); }
	jint getRequestId(jni::ref<jni::array<jbyte>> p1) { return call_method<"getRequestId", jint>(p1); }
	jni::ref<java::lang::String> printMessage() { return call_method<"printMessage", jni::ref<java::lang::String>>(); }

protected:

	SnmpIncomingResponse(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPINCOMINGRESPONSE
