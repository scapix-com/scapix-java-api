// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/snmp/agent/SnmpMibAgentMBean.h>
#include <scapix/java_api/javax/management/MBeanRegistration.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_AGENT_SNMPMIBAGENT_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_AGENT_SNMPMIBAGENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::agent { class SnmpMibAgent; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::agent::SnmpMibAgent>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/agent/SnmpMibAgent";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::snmp::agent::SnmpMibAgentMBean, scapix::java_api::javax::management::MBeanRegistration, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_AGENT_SNMPMIBAGENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_AGENT_SNMPMIBAGENT)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_AGENT_SNMPMIBAGENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/SnmpEngine.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpOid.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpPdu.h>
#include <scapix/java_api/com/sun/jmx/snmp/agent/SnmpMibHandler.h>
#include <scapix/java_api/com/sun/jmx/snmp/agent/SnmpMibRequest.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::agent::SnmpMibAgent : public jni::object_base<"com/sun/jmx/snmp/agent/SnmpMibAgent",
	java::lang::Object,
	com::sun::jmx::snmp::agent::SnmpMibAgentMBean,
	javax::management::MBeanRegistration,
	java::io::Serializable>
{
public:

	static jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> new_object() { return base_::new_object(); }
	void init() { return call_method<"init", void>(); }
	jni::ref<javax::management::ObjectName> preRegister(jni::ref<javax::management::MBeanServer> p1, jni::ref<javax::management::ObjectName> p2) { return call_method<"preRegister", jni::ref<javax::management::ObjectName>>(p1, p2); }
	void postRegister(jni::ref<java::lang::Boolean> p1) { return call_method<"postRegister", void>(p1); }
	void preDeregister() { return call_method<"preDeregister", void>(); }
	void postDeregister() { return call_method<"postDeregister", void>(); }
	void get(jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest> p1) { return call_method<"get", void>(p1); }
	void getNext(jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest> p1) { return call_method<"getNext", void>(p1); }
	void getBulk(jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest> p1, jint p2, jint p3) { return call_method<"getBulk", void>(p1, p2, p3); }
	void set(jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest> p1) { return call_method<"set", void>(p1); }
	void check(jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest> p1) { return call_method<"check", void>(p1); }
	jni::ref<jni::array<jlong>> getRootOid() { return call_method<"getRootOid", jni::ref<jni::array<jlong>>>(); }
	jni::ref<javax::management::MBeanServer> getMBeanServer() { return call_method<"getMBeanServer", jni::ref<javax::management::MBeanServer>>(); }
	jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> getSnmpAdaptor() { return call_method<"getSnmpAdaptor", jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler>>(); }
	void setSnmpAdaptor(jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> p1) { return call_method<"setSnmpAdaptor", void>(p1); }
	void setSnmpAdaptor(jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> p1, jni::ref<jni::array<com::sun::jmx::snmp::SnmpOid>> p2) { return call_method<"setSnmpAdaptor", void>(p1, p2); }
	void setSnmpAdaptor(jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> p1, jni::ref<java::lang::String> p2) { return call_method<"setSnmpAdaptor", void>(p1, p2); }
	void setSnmpAdaptor(jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<com::sun::jmx::snmp::SnmpOid>> p3) { return call_method<"setSnmpAdaptor", void>(p1, p2, p3); }
	jni::ref<javax::management::ObjectName> getSnmpAdaptorName() { return call_method<"getSnmpAdaptorName", jni::ref<javax::management::ObjectName>>(); }
	void setSnmpAdaptorName(jni::ref<javax::management::ObjectName> p1) { return call_method<"setSnmpAdaptorName", void>(p1); }
	void setSnmpAdaptorName(jni::ref<javax::management::ObjectName> p1, jni::ref<jni::array<com::sun::jmx::snmp::SnmpOid>> p2) { return call_method<"setSnmpAdaptorName", void>(p1, p2); }
	void setSnmpAdaptorName(jni::ref<javax::management::ObjectName> p1, jni::ref<java::lang::String> p2) { return call_method<"setSnmpAdaptorName", void>(p1, p2); }
	void setSnmpAdaptorName(jni::ref<javax::management::ObjectName> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<com::sun::jmx::snmp::SnmpOid>> p3) { return call_method<"setSnmpAdaptorName", void>(p1, p2, p3); }
	jboolean getBindingState() { return call_method<"getBindingState", jboolean>(); }
	jni::ref<java::lang::String> getMibName() { return call_method<"getMibName", jni::ref<java::lang::String>>(); }
	static jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest> newMibRequest(jni::ref<com::sun::jmx::snmp::SnmpPdu> p1, jni::ref<java::util::Vector> p2, jint p3, jni::ref<java::lang::Object> p4) { return call_static_method<"newMibRequest", jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest>>(p1, p2, p3, p4); }
	static jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest> newMibRequest(jni::ref<com::sun::jmx::snmp::SnmpEngine> p1, jni::ref<com::sun::jmx::snmp::SnmpPdu> p2, jni::ref<java::util::Vector> p3, jint p4, jni::ref<java::lang::Object> p5, jni::ref<java::lang::String> p6, jint p7, jint p8, jni::ref<jni::array<jbyte>> p9, jni::ref<jni::array<jbyte>> p10) { return call_static_method<"newMibRequest", jni::ref<com::sun::jmx::snmp::agent::SnmpMibRequest>>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }

protected:

	SnmpMibAgent(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_AGENT_SNMPMIBAGENT
