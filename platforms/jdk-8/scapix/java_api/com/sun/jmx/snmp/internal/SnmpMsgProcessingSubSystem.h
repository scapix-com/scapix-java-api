// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpSubSystem.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPMSGPROCESSINGSUBSYSTEM_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPMSGPROCESSINGSUBSYSTEM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::internal { class SnmpMsgProcessingSubSystem; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::internal::SnmpMsgProcessingSubSystem>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/internal/SnmpMsgProcessingSubSystem";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::snmp::internal::SnmpSubSystem>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPMSGPROCESSINGSUBSYSTEM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPMSGPROCESSINGSUBSYSTEM)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPMSGPROCESSINGSUBSYSTEM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/SnmpParams.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpPdu.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpPduFactory.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpSecurityParameters.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpDecryptedPdu.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpIncomingRequest.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpIncomingResponse.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpOutgoingRequest.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpSecuritySubSystem.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::internal::SnmpMsgProcessingSubSystem : public jni::object_base<"com/sun/jmx/snmp/internal/SnmpMsgProcessingSubSystem",
	java::lang::Object,
	com::sun::jmx::snmp::internal::SnmpSubSystem>
{
public:

	void setSecuritySubSystem(jni::ref<com::sun::jmx::snmp::internal::SnmpSecuritySubSystem> p1) { return call_method<"setSecuritySubSystem", void>(p1); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpSecuritySubSystem> getSecuritySubSystem() { return call_method<"getSecuritySubSystem", jni::ref<com::sun::jmx::snmp::internal::SnmpSecuritySubSystem>>(); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpIncomingRequest> getIncomingRequest(jint p1, jni::ref<com::sun::jmx::snmp::SnmpPduFactory> p2) { return call_method<"getIncomingRequest", jni::ref<com::sun::jmx::snmp::internal::SnmpIncomingRequest>>(p1, p2); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpOutgoingRequest> getOutgoingRequest(jint p1, jni::ref<com::sun::jmx::snmp::SnmpPduFactory> p2) { return call_method<"getOutgoingRequest", jni::ref<com::sun::jmx::snmp::internal::SnmpOutgoingRequest>>(p1, p2); }
	jni::ref<com::sun::jmx::snmp::SnmpPdu> getRequestPdu(jint p1, jni::ref<com::sun::jmx::snmp::SnmpParams> p2, jint p3) { return call_method<"getRequestPdu", jni::ref<com::sun::jmx::snmp::SnmpPdu>>(p1, p2, p3); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpIncomingResponse> getIncomingResponse(jint p1, jni::ref<com::sun::jmx::snmp::SnmpPduFactory> p2) { return call_method<"getIncomingResponse", jni::ref<com::sun::jmx::snmp::internal::SnmpIncomingResponse>>(p1, p2); }
	jint encode(jint p1, jint p2, jint p3, jbyte p4, jint p5, jni::ref<com::sun::jmx::snmp::SnmpSecurityParameters> p6, jni::ref<jni::array<jbyte>> p7, jni::ref<jni::array<jbyte>> p8, jni::ref<jni::array<jbyte>> p9, jint p10, jni::ref<jni::array<jbyte>> p11) { return call_method<"encode", jint>(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
	jint encodePriv(jint p1, jint p2, jint p3, jbyte p4, jint p5, jni::ref<com::sun::jmx::snmp::SnmpSecurityParameters> p6, jni::ref<jni::array<jbyte>> p7, jni::ref<jni::array<jbyte>> p8) { return call_method<"encodePriv", jint>(p1, p2, p3, p4, p5, p6, p7, p8); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpDecryptedPdu> decode(jint p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"decode", jni::ref<com::sun::jmx::snmp::internal::SnmpDecryptedPdu>>(p1, p2); }
	jint encode(jint p1, jni::ref<com::sun::jmx::snmp::internal::SnmpDecryptedPdu> p2, jni::ref<jni::array<jbyte>> p3) { return call_method<"encode", jint>(p1, p2, p3); }

protected:

	SnmpMsgProcessingSubSystem(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPMSGPROCESSINGSUBSYSTEM
