// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpDataTypeEnums.h>
#include <scapix/java_api/java/lang/Cloneable.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPVARBIND_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPVARBIND_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp { class SnmpVarBind; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::SnmpVarBind>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/SnmpVarBind";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::snmp::SnmpDataTypeEnums, scapix::java_api::java::lang::Cloneable, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPVARBIND_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPVARBIND)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPVARBIND

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/SnmpCounter.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpCounter64.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpGauge.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpInt.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpIpAddress.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpNull.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpOid.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpOidRecord.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpOpaque.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpString.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpStringFixed.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpTimeticks.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpValue.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::SnmpVarBind : public jni::object_base<"com/sun/jmx/snmp/SnmpVarBind",
	java::lang::Object,
	com::sun::jmx::snmp::SnmpDataTypeEnums,
	java::lang::Cloneable,
	java::io::Serializable>
{
public:

	static jint stValueUnspecified() { return get_static_field<"stValueUnspecified", jint>(); }
	static jint stValueOk() { return get_static_field<"stValueOk", jint>(); }
	static jint stValueNoSuchObject() { return get_static_field<"stValueNoSuchObject", jint>(); }
	static jint stValueNoSuchInstance() { return get_static_field<"stValueNoSuchInstance", jint>(); }
	static jint stValueEndOfMibView() { return get_static_field<"stValueEndOfMibView", jint>(); }
	static jni::ref<com::sun::jmx::snmp::SnmpNull> noSuchObject() { return get_static_field<"noSuchObject", jni::ref<com::sun::jmx::snmp::SnmpNull>>(); }
	static jni::ref<com::sun::jmx::snmp::SnmpNull> noSuchInstance() { return get_static_field<"noSuchInstance", jni::ref<com::sun::jmx::snmp::SnmpNull>>(); }
	static jni::ref<com::sun::jmx::snmp::SnmpNull> endOfMibView() { return get_static_field<"endOfMibView", jni::ref<com::sun::jmx::snmp::SnmpNull>>(); }
	jni::ref<com::sun::jmx::snmp::SnmpOid> oid() { return get_field<"oid", jni::ref<com::sun::jmx::snmp::SnmpOid>>(); }
	void oid(jni::ref<com::sun::jmx::snmp::SnmpOid> v) { set_field<"oid", jni::ref<com::sun::jmx::snmp::SnmpOid>>(v); }
	jni::ref<com::sun::jmx::snmp::SnmpValue> value() { return get_field<"value", jni::ref<com::sun::jmx::snmp::SnmpValue>>(); }
	void value(jni::ref<com::sun::jmx::snmp::SnmpValue> v) { set_field<"value", jni::ref<com::sun::jmx::snmp::SnmpValue>>(v); }
	jint status() { return get_field<"status", jint>(); }
	void status(jint v) { set_field<"status", jint>(v); }

	static jni::ref<com::sun::jmx::snmp::SnmpVarBind> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::jmx::snmp::SnmpVarBind> new_object(jni::ref<com::sun::jmx::snmp::SnmpOid> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::SnmpVarBind> new_object(jni::ref<com::sun::jmx::snmp::SnmpOid> p1, jni::ref<com::sun::jmx::snmp::SnmpValue> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::jmx::snmp::SnmpVarBind> new_object(jni::ref<java::lang::String> p1) { return base_::new_object(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpOid> getOid() { return call_method<"getOid", jni::ref<com::sun::jmx::snmp::SnmpOid>>(); }
	void setOid(jni::ref<com::sun::jmx::snmp::SnmpOid> p1) { return call_method<"setOid", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpValue> getSnmpValue() { return call_method<"getSnmpValue", jni::ref<com::sun::jmx::snmp::SnmpValue>>(); }
	void setSnmpValue(jni::ref<com::sun::jmx::snmp::SnmpValue> p1) { return call_method<"setSnmpValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpCounter64> getSnmpCounter64Value() { return call_method<"getSnmpCounter64Value", jni::ref<com::sun::jmx::snmp::SnmpCounter64>>(); }
	void setSnmpCounter64Value(jlong p1) { return call_method<"setSnmpCounter64Value", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpInt> getSnmpIntValue() { return call_method<"getSnmpIntValue", jni::ref<com::sun::jmx::snmp::SnmpInt>>(); }
	void setSnmpIntValue(jlong p1) { return call_method<"setSnmpIntValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpCounter> getSnmpCounterValue() { return call_method<"getSnmpCounterValue", jni::ref<com::sun::jmx::snmp::SnmpCounter>>(); }
	void setSnmpCounterValue(jlong p1) { return call_method<"setSnmpCounterValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpGauge> getSnmpGaugeValue() { return call_method<"getSnmpGaugeValue", jni::ref<com::sun::jmx::snmp::SnmpGauge>>(); }
	void setSnmpGaugeValue(jlong p1) { return call_method<"setSnmpGaugeValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpTimeticks> getSnmpTimeticksValue() { return call_method<"getSnmpTimeticksValue", jni::ref<com::sun::jmx::snmp::SnmpTimeticks>>(); }
	void setSnmpTimeticksValue(jlong p1) { return call_method<"setSnmpTimeticksValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpOid> getSnmpOidValue() { return call_method<"getSnmpOidValue", jni::ref<com::sun::jmx::snmp::SnmpOid>>(); }
	void setSnmpOidValue(jni::ref<java::lang::String> p1) { return call_method<"setSnmpOidValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpIpAddress> getSnmpIpAddressValue() { return call_method<"getSnmpIpAddressValue", jni::ref<com::sun::jmx::snmp::SnmpIpAddress>>(); }
	void setSnmpIpAddressValue(jni::ref<java::lang::String> p1) { return call_method<"setSnmpIpAddressValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpString> getSnmpStringValue() { return call_method<"getSnmpStringValue", jni::ref<com::sun::jmx::snmp::SnmpString>>(); }
	void setSnmpStringValue(jni::ref<java::lang::String> p1) { return call_method<"setSnmpStringValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpOpaque> getSnmpOpaqueValue() { return call_method<"getSnmpOpaqueValue", jni::ref<com::sun::jmx::snmp::SnmpOpaque>>(); }
	void setSnmpOpaqueValue(jni::ref<jni::array<jbyte>> p1) { return call_method<"setSnmpOpaqueValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpStringFixed> getSnmpStringFixedValue() { return call_method<"getSnmpStringFixedValue", jni::ref<com::sun::jmx::snmp::SnmpStringFixed>>(); }
	void setSnmpStringFixedValue(jni::ref<java::lang::String> p1) { return call_method<"setSnmpStringFixedValue", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpOidRecord> resolveVarName(jni::ref<java::lang::String> p1) { return call_method<"resolveVarName", jni::ref<com::sun::jmx::snmp::SnmpOidRecord>>(p1); }
	jint getValueStatus() { return call_method<"getValueStatus", jint>(); }
	jni::ref<java::lang::String> getValueStatusLegend() { return call_method<"getValueStatusLegend", jni::ref<java::lang::String>>(); }
	jboolean isValidValue() { return call_method<"isValidValue", jboolean>(); }
	jboolean isUnspecifiedValue() { return call_method<"isUnspecifiedValue", jboolean>(); }
	void clearValue() { return call_method<"clearValue", void>(); }
	jboolean isOidEqual(jni::ref<com::sun::jmx::snmp::SnmpVarBind> p1) { return call_method<"isOidEqual", jboolean>(p1); }
	void addInstance(jlong p1) { return call_method<"addInstance", void>(p1); }
	void addInstance(jni::ref<jni::array<jlong>> p1) { return call_method<"addInstance", void>(p1); }
	void addInstance(jni::ref<java::lang::String> p1) { return call_method<"addInstance", void>(p1); }
	void insertInOid(jint p1) { return call_method<"insertInOid", void>(p1); }
	void appendInOid(jni::ref<com::sun::jmx::snmp::SnmpOid> p1) { return call_method<"appendInOid", void>(p1); }
	jboolean hasVarBindException() { return call_method<"hasVarBindException", jboolean>(); }
	void copyValueAndOid(jni::ref<com::sun::jmx::snmp::SnmpVarBind> p1) { return call_method<"copyValueAndOid", void>(p1); }
	void copyValue(jni::ref<com::sun::jmx::snmp::SnmpVarBind> p1) { return call_method<"copyValue", void>(p1); }
	jni::ref<java::lang::Object> cloneWithoutValue() { return call_method<"cloneWithoutValue", jni::ref<java::lang::Object>>(); }
	jni::ref<com::sun::jmx::snmp::SnmpVarBind> clone() { return call_method<"clone", jni::ref<com::sun::jmx::snmp::SnmpVarBind>>(); }
	jni::ref<java::lang::String> getStringValue() { return call_method<"getStringValue", jni::ref<java::lang::String>>(); }
	void setNoSuchObject() { return call_method<"setNoSuchObject", void>(); }
	void setNoSuchInstance() { return call_method<"setNoSuchInstance", void>(); }
	void setEndOfMibView() { return call_method<"setEndOfMibView", void>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SnmpVarBind(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_SNMPVARBIND
