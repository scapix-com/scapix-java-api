// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpEngine.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPENGINEIMPL_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPENGINEIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::internal { class SnmpEngineImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::internal::SnmpEngineImpl>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/internal/SnmpEngineImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::snmp::SnmpEngine, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPENGINEIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPENGINEIMPL)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPENGINEIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/SnmpEngineFactory.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpEngineId.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpUsmKeyHandler.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpAccessControlSubSystem.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpLcd.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpMsgProcessingSubSystem.h>
#include <scapix/java_api/com/sun/jmx/snmp/internal/SnmpSecuritySubSystem.h>
#include <scapix/java_api/java/net/InetAddress.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::internal::SnmpEngineImpl : public jni::object_base<"com/sun/jmx/snmp/internal/SnmpEngineImpl",
	java::lang::Object,
	com::sun::jmx::snmp::SnmpEngine,
	java::io::Serializable>
{
public:

	static jint noAuthNoPriv() { return get_static_field<"noAuthNoPriv", jint>(); }
	static jint authNoPriv() { return get_static_field<"authNoPriv", jint>(); }
	static jint authPriv() { return get_static_field<"authPriv", jint>(); }
	static jint reportableFlag() { return get_static_field<"reportableFlag", jint>(); }
	static jint authMask() { return get_static_field<"authMask", jint>(); }
	static jint privMask() { return get_static_field<"privMask", jint>(); }
	static jint authPrivMask() { return get_static_field<"authPrivMask", jint>(); }

	jint getEngineTime() { return call_method<"getEngineTime", jint>(); }
	jni::ref<com::sun::jmx::snmp::SnmpEngineId> getEngineId() { return call_method<"getEngineId", jni::ref<com::sun::jmx::snmp::SnmpEngineId>>(); }
	jni::ref<com::sun::jmx::snmp::SnmpUsmKeyHandler> getUsmKeyHandler() { return call_method<"getUsmKeyHandler", jni::ref<com::sun::jmx::snmp::SnmpUsmKeyHandler>>(); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpLcd> getLcd() { return call_method<"getLcd", jni::ref<com::sun::jmx::snmp::internal::SnmpLcd>>(); }
	jint getEngineBoots() { return call_method<"getEngineBoots", jint>(); }
	static jni::ref<com::sun::jmx::snmp::internal::SnmpEngineImpl> new_object(jni::ref<com::sun::jmx::snmp::SnmpEngineFactory> p1, jni::ref<com::sun::jmx::snmp::internal::SnmpLcd> p2, jni::ref<com::sun::jmx::snmp::SnmpEngineId> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::jmx::snmp::internal::SnmpEngineImpl> new_object(jni::ref<com::sun::jmx::snmp::SnmpEngineFactory> p1, jni::ref<com::sun::jmx::snmp::internal::SnmpLcd> p2, jni::ref<java::net::InetAddress> p3, jint p4) { return base_::new_object(p1, p2, p3, p4); }
	static jni::ref<com::sun::jmx::snmp::internal::SnmpEngineImpl> new_object(jni::ref<com::sun::jmx::snmp::SnmpEngineFactory> p1, jni::ref<com::sun::jmx::snmp::internal::SnmpLcd> p2, jint p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::jmx::snmp::internal::SnmpEngineImpl> new_object(jni::ref<com::sun::jmx::snmp::SnmpEngineFactory> p1, jni::ref<com::sun::jmx::snmp::internal::SnmpLcd> p2) { return base_::new_object(p1, p2); }
	void activateCheckOid() { return call_method<"activateCheckOid", void>(); }
	void deactivateCheckOid() { return call_method<"deactivateCheckOid", void>(); }
	jboolean isCheckOidActivated() { return call_method<"isCheckOidActivated", jboolean>(); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpMsgProcessingSubSystem> getMsgProcessingSubSystem() { return call_method<"getMsgProcessingSubSystem", jni::ref<com::sun::jmx::snmp::internal::SnmpMsgProcessingSubSystem>>(); }
	void setMsgProcessingSubSystem(jni::ref<com::sun::jmx::snmp::internal::SnmpMsgProcessingSubSystem> p1) { return call_method<"setMsgProcessingSubSystem", void>(p1); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpSecuritySubSystem> getSecuritySubSystem() { return call_method<"getSecuritySubSystem", jni::ref<com::sun::jmx::snmp::internal::SnmpSecuritySubSystem>>(); }
	void setSecuritySubSystem(jni::ref<com::sun::jmx::snmp::internal::SnmpSecuritySubSystem> p1) { return call_method<"setSecuritySubSystem", void>(p1); }
	void setAccessControlSubSystem(jni::ref<com::sun::jmx::snmp::internal::SnmpAccessControlSubSystem> p1) { return call_method<"setAccessControlSubSystem", void>(p1); }
	jni::ref<com::sun::jmx::snmp::internal::SnmpAccessControlSubSystem> getAccessControlSubSystem() { return call_method<"getAccessControlSubSystem", jni::ref<com::sun::jmx::snmp::internal::SnmpAccessControlSubSystem>>(); }
	static void checkSecurityLevel(jbyte p1) { return call_static_method<"checkSecurityLevel", void>(p1); }

protected:

	SnmpEngineImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_INTERNAL_SNMPENGINEIMPL
