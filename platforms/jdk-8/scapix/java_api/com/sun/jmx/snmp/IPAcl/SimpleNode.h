// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/Node.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_SIMPLENODE_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_SIMPLENODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::IPAcl { class SimpleNode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::IPAcl::SimpleNode>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/IPAcl/SimpleNode";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::snmp::IPAcl::Node>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_SIMPLENODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_SIMPLENODE)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_SIMPLENODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/AclImpl.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/Parser.h>
#include <scapix/java_api/com/sun/jmx/snmp/IPAcl/PrincipalImpl.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Hashtable.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::jmx::snmp::IPAcl::SimpleNode : public jni::object_base<"com/sun/jmx/snmp/IPAcl/SimpleNode",
	java::lang::Object,
	com::sun::jmx::snmp::IPAcl::Node>
{
public:

	static jni::ref<com::sun::jmx::snmp::IPAcl::SimpleNode> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::IPAcl::SimpleNode> new_object(jni::ref<com::sun::jmx::snmp::IPAcl::Parser> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::jmx::snmp::IPAcl::Node> jjtCreate(jint p1) { return call_static_method<"jjtCreate", jni::ref<com::sun::jmx::snmp::IPAcl::Node>>(p1); }
	static jni::ref<com::sun::jmx::snmp::IPAcl::Node> jjtCreate(jni::ref<com::sun::jmx::snmp::IPAcl::Parser> p1, jint p2) { return call_static_method<"jjtCreate", jni::ref<com::sun::jmx::snmp::IPAcl::Node>>(p1, p2); }
	void jjtOpen() { return call_method<"jjtOpen", void>(); }
	void jjtClose() { return call_method<"jjtClose", void>(); }
	void jjtSetParent(jni::ref<com::sun::jmx::snmp::IPAcl::Node> p1) { return call_method<"jjtSetParent", void>(p1); }
	jni::ref<com::sun::jmx::snmp::IPAcl::Node> jjtGetParent() { return call_method<"jjtGetParent", jni::ref<com::sun::jmx::snmp::IPAcl::Node>>(); }
	void jjtAddChild(jni::ref<com::sun::jmx::snmp::IPAcl::Node> p1, jint p2) { return call_method<"jjtAddChild", void>(p1, p2); }
	jni::ref<com::sun::jmx::snmp::IPAcl::Node> jjtGetChild(jint p1) { return call_method<"jjtGetChild", jni::ref<com::sun::jmx::snmp::IPAcl::Node>>(p1); }
	jint jjtGetNumChildren() { return call_method<"jjtGetNumChildren", jint>(); }
	void buildTrapEntries(jni::ref<java::util::Hashtable> p1) { return call_method<"buildTrapEntries", void>(p1); }
	void buildInformEntries(jni::ref<java::util::Hashtable> p1) { return call_method<"buildInformEntries", void>(p1); }
	void buildAclEntries(jni::ref<com::sun::jmx::snmp::IPAcl::PrincipalImpl> p1, jni::ref<com::sun::jmx::snmp::IPAcl::AclImpl> p2) { return call_method<"buildAclEntries", void>(p1, p2); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString(jni::ref<java::lang::String> p1) { return call_method<"toString", jni::ref<java::lang::String>>(p1); }
	void dump(jni::ref<java::lang::String> p1) { return call_method<"dump", void>(p1); }

protected:

	SimpleNode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_IPACL_SIMPLENODE
