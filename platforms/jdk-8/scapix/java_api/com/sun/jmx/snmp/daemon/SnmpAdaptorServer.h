// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/com/sun/jmx/snmp/daemon/CommunicatorServer.h>
#include <scapix/java_api/com/sun/jmx/snmp/daemon/SnmpAdaptorServerMBean.h>
#include <scapix/java_api/javax/management/MBeanRegistration.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpDefinitions.h>
#include <scapix/java_api/com/sun/jmx/snmp/agent/SnmpMibHandler.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPADAPTORSERVER_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPADAPTORSERVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::snmp::daemon { class SnmpAdaptorServer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::snmp::daemon::SnmpAdaptorServer>
{
	static constexpr fixed_string class_name = "com/sun/jmx/snmp/daemon/SnmpAdaptorServer";
	using base_classes = std::tuple<scapix::java_api::com::sun::jmx::snmp::daemon::CommunicatorServer, scapix::java_api::com::sun::jmx::snmp::daemon::SnmpAdaptorServerMBean, scapix::java_api::javax::management::MBeanRegistration, scapix::java_api::com::sun::jmx::snmp::SnmpDefinitions, scapix::java_api::com::sun::jmx::snmp::agent::SnmpMibHandler>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPADAPTORSERVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPADAPTORSERVER)
#define SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPADAPTORSERVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/com/sun/jmx/snmp/InetAddressAcl.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpIpAddress.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpOid.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpPduFactory.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpPduPacket.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpPeer.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpTimeticks.h>
#include <scapix/java_api/com/sun/jmx/snmp/SnmpVarBindList.h>
#include <scapix/java_api/com/sun/jmx/snmp/agent/SnmpMibAgent.h>
#include <scapix/java_api/com/sun/jmx/snmp/agent/SnmpUserDataFactory.h>
#include <scapix/java_api/com/sun/jmx/snmp/daemon/SnmpInformHandler.h>
#include <scapix/java_api/com/sun/jmx/snmp/daemon/SnmpInformRequest.h>
#include <scapix/java_api/java/lang/Boolean.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/Long.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/util/Vector.h>
#include <scapix/java_api/javax/management/MBeanServer.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::snmp::daemon::SnmpAdaptorServer : public jni::object_base<"com/sun/jmx/snmp/daemon/SnmpAdaptorServer",
	com::sun::jmx::snmp::daemon::CommunicatorServer,
	com::sun::jmx::snmp::daemon::SnmpAdaptorServerMBean,
	javax::management::MBeanRegistration,
	com::sun::jmx::snmp::SnmpDefinitions,
	com::sun::jmx::snmp::agent::SnmpMibHandler>
{
public:

	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object() { return base_::new_object(); }
	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object(jint p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object(jni::ref<com::sun::jmx::snmp::InetAddressAcl> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object(jni::ref<java::net::InetAddress> p1) { return base_::new_object(p1); }
	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object(jni::ref<com::sun::jmx::snmp::InetAddressAcl> p1, jint p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object(jint p1, jni::ref<java::net::InetAddress> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object(jni::ref<com::sun::jmx::snmp::InetAddressAcl> p1, jni::ref<java::net::InetAddress> p2) { return base_::new_object(p1, p2); }
	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object(jni::ref<com::sun::jmx::snmp::InetAddressAcl> p1, jint p2, jni::ref<java::net::InetAddress> p3) { return base_::new_object(p1, p2, p3); }
	static jni::ref<com::sun::jmx::snmp::daemon::SnmpAdaptorServer> new_object(jboolean p1, jint p2, jni::ref<java::net::InetAddress> p3) { return base_::new_object(p1, p2, p3); }
	jint getServedClientCount() { return call_method<"getServedClientCount", jint>(); }
	jint getActiveClientCount() { return call_method<"getActiveClientCount", jint>(); }
	jint getMaxActiveClientCount() { return call_method<"getMaxActiveClientCount", jint>(); }
	void setMaxActiveClientCount(jint p1) { return call_method<"setMaxActiveClientCount", void>(p1); }
	jni::ref<com::sun::jmx::snmp::InetAddressAcl> getInetAddressAcl() { return call_method<"getInetAddressAcl", jni::ref<com::sun::jmx::snmp::InetAddressAcl>>(); }
	jni::ref<java::lang::Integer> getTrapPort() { return call_method<"getTrapPort", jni::ref<java::lang::Integer>>(); }
	void setTrapPort(jni::ref<java::lang::Integer> p1) { return call_method<"setTrapPort", void>(p1); }
	void setTrapPort(jint p1) { return call_method<"setTrapPort", void>(p1); }
	jint getInformPort() { return call_method<"getInformPort", jint>(); }
	void setInformPort(jint p1) { return call_method<"setInformPort", void>(p1); }
	jni::ref<java::lang::String> getProtocol() { return call_method<"getProtocol", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Integer> getBufferSize() { return call_method<"getBufferSize", jni::ref<java::lang::Integer>>(); }
	void setBufferSize(jni::ref<java::lang::Integer> p1) { return call_method<"setBufferSize", void>(p1); }
	jint getMaxTries() { return call_method<"getMaxTries", jint>(); }
	void setMaxTries(jint p1) { return call_method<"setMaxTries", void>(p1); }
	jint getTimeout() { return call_method<"getTimeout", jint>(); }
	void setTimeout(jint p1) { return call_method<"setTimeout", void>(p1); }
	jni::ref<com::sun::jmx::snmp::SnmpPduFactory> getPduFactory() { return call_method<"getPduFactory", jni::ref<com::sun::jmx::snmp::SnmpPduFactory>>(); }
	void setPduFactory(jni::ref<com::sun::jmx::snmp::SnmpPduFactory> p1) { return call_method<"setPduFactory", void>(p1); }
	void setUserDataFactory(jni::ref<com::sun::jmx::snmp::agent::SnmpUserDataFactory> p1) { return call_method<"setUserDataFactory", void>(p1); }
	jni::ref<com::sun::jmx::snmp::agent::SnmpUserDataFactory> getUserDataFactory() { return call_method<"getUserDataFactory", jni::ref<com::sun::jmx::snmp::agent::SnmpUserDataFactory>>(); }
	jboolean getAuthTrapEnabled() { return call_method<"getAuthTrapEnabled", jboolean>(); }
	void setAuthTrapEnabled(jboolean p1) { return call_method<"setAuthTrapEnabled", void>(p1); }
	jboolean getAuthRespEnabled() { return call_method<"getAuthRespEnabled", jboolean>(); }
	void setAuthRespEnabled(jboolean p1) { return call_method<"setAuthRespEnabled", void>(p1); }
	jni::ref<java::lang::String> getEnterpriseOid() { return call_method<"getEnterpriseOid", jni::ref<java::lang::String>>(); }
	void setEnterpriseOid(jni::ref<java::lang::String> p1) { return call_method<"setEnterpriseOid", void>(p1); }
	jni::ref<jni::array<java::lang::String>> getMibs() { return call_method<"getMibs", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::lang::Long> getSnmpOutTraps() { return call_method<"getSnmpOutTraps", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpOutGetResponses() { return call_method<"getSnmpOutGetResponses", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpOutGenErrs() { return call_method<"getSnmpOutGenErrs", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpOutBadValues() { return call_method<"getSnmpOutBadValues", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpOutNoSuchNames() { return call_method<"getSnmpOutNoSuchNames", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpOutTooBigs() { return call_method<"getSnmpOutTooBigs", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInASNParseErrs() { return call_method<"getSnmpInASNParseErrs", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInBadCommunityUses() { return call_method<"getSnmpInBadCommunityUses", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInBadCommunityNames() { return call_method<"getSnmpInBadCommunityNames", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInBadVersions() { return call_method<"getSnmpInBadVersions", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpOutPkts() { return call_method<"getSnmpOutPkts", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInPkts() { return call_method<"getSnmpInPkts", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInGetRequests() { return call_method<"getSnmpInGetRequests", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInGetNexts() { return call_method<"getSnmpInGetNexts", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInSetRequests() { return call_method<"getSnmpInSetRequests", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInTotalSetVars() { return call_method<"getSnmpInTotalSetVars", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpInTotalReqVars() { return call_method<"getSnmpInTotalReqVars", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpSilentDrops() { return call_method<"getSnmpSilentDrops", jni::ref<java::lang::Long>>(); }
	jni::ref<java::lang::Long> getSnmpProxyDrops() { return call_method<"getSnmpProxyDrops", jni::ref<java::lang::Long>>(); }
	jni::ref<javax::management::ObjectName> preRegister(jni::ref<javax::management::MBeanServer> p1, jni::ref<javax::management::ObjectName> p2) { return call_method<"preRegister", jni::ref<javax::management::ObjectName>>(p1, p2); }
	void postRegister(jni::ref<java::lang::Boolean> p1) { return call_method<"postRegister", void>(p1); }
	void preDeregister() { return call_method<"preDeregister", void>(); }
	void postDeregister() { return call_method<"postDeregister", void>(); }
	jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> addMib(jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> p1) { return call_method<"addMib", jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler>>(p1); }
	jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> addMib(jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> p1, jni::ref<jni::array<com::sun::jmx::snmp::SnmpOid>> p2) { return call_method<"addMib", jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler>>(p1, p2); }
	jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> addMib(jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> p1, jni::ref<java::lang::String> p2) { return call_method<"addMib", jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler>>(p1, p2); }
	jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler> addMib(jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<com::sun::jmx::snmp::SnmpOid>> p3) { return call_method<"addMib", jni::ref<com::sun::jmx::snmp::agent::SnmpMibHandler>>(p1, p2, p3); }
	jboolean removeMib(jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> p1, jni::ref<java::lang::String> p2) { return call_method<"removeMib", jboolean>(p1, p2); }
	jboolean removeMib(jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> p1) { return call_method<"removeMib", jboolean>(p1); }
	jboolean removeMib(jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> p1, jni::ref<jni::array<com::sun::jmx::snmp::SnmpOid>> p2) { return call_method<"removeMib", jboolean>(p1, p2); }
	jboolean removeMib(jni::ref<com::sun::jmx::snmp::agent::SnmpMibAgent> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<com::sun::jmx::snmp::SnmpOid>> p3) { return call_method<"removeMib", jboolean>(p1, p2, p3); }
	jint getPort() { return call_method<"getPort", jint>(); }
	void stop() { return call_method<"stop", void>(); }
	void snmpV1Trap(jint p1, jint p2, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p3) { return call_method<"snmpV1Trap", void>(p1, p2, p3); }
	void snmpV1Trap(jni::ref<java::net::InetAddress> p1, jni::ref<java::lang::String> p2, jint p3, jint p4, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p5) { return call_method<"snmpV1Trap", void>(p1, p2, p3, p4, p5); }
	void snmpV1Trap(jni::ref<java::net::InetAddress> p1, jni::ref<com::sun::jmx::snmp::SnmpIpAddress> p2, jni::ref<java::lang::String> p3, jni::ref<com::sun::jmx::snmp::SnmpOid> p4, jint p5, jint p6, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p7, jni::ref<com::sun::jmx::snmp::SnmpTimeticks> p8) { return call_method<"snmpV1Trap", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	void snmpV1Trap(jni::ref<com::sun::jmx::snmp::SnmpPeer> p1, jni::ref<com::sun::jmx::snmp::SnmpIpAddress> p2, jni::ref<com::sun::jmx::snmp::SnmpOid> p3, jint p4, jint p5, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p6, jni::ref<com::sun::jmx::snmp::SnmpTimeticks> p7) { return call_method<"snmpV1Trap", void>(p1, p2, p3, p4, p5, p6, p7); }
	void snmpV2Trap(jni::ref<com::sun::jmx::snmp::SnmpPeer> p1, jni::ref<com::sun::jmx::snmp::SnmpOid> p2, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p3, jni::ref<com::sun::jmx::snmp::SnmpTimeticks> p4) { return call_method<"snmpV2Trap", void>(p1, p2, p3, p4); }
	void snmpV2Trap(jni::ref<com::sun::jmx::snmp::SnmpOid> p1, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p2) { return call_method<"snmpV2Trap", void>(p1, p2); }
	void snmpV2Trap(jni::ref<java::net::InetAddress> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::jmx::snmp::SnmpOid> p3, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p4) { return call_method<"snmpV2Trap", void>(p1, p2, p3, p4); }
	void snmpV2Trap(jni::ref<java::net::InetAddress> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::jmx::snmp::SnmpOid> p3, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p4, jni::ref<com::sun::jmx::snmp::SnmpTimeticks> p5) { return call_method<"snmpV2Trap", void>(p1, p2, p3, p4, p5); }
	void snmpPduTrap(jni::ref<java::net::InetAddress> p1, jni::ref<com::sun::jmx::snmp::SnmpPduPacket> p2) { return call_method<"snmpPduTrap", void>(p1, p2); }
	void snmpPduTrap(jni::ref<com::sun::jmx::snmp::SnmpPeer> p1, jni::ref<com::sun::jmx::snmp::SnmpPduPacket> p2) { return call_method<"snmpPduTrap", void>(p1, p2); }
	jni::ref<java::util::Vector> snmpInformRequest(jni::ref<com::sun::jmx::snmp::daemon::SnmpInformHandler> p1, jni::ref<com::sun::jmx::snmp::SnmpOid> p2, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p3) { return call_method<"snmpInformRequest", jni::ref<java::util::Vector>>(p1, p2, p3); }
	jni::ref<com::sun::jmx::snmp::daemon::SnmpInformRequest> snmpInformRequest(jni::ref<java::net::InetAddress> p1, jni::ref<java::lang::String> p2, jni::ref<com::sun::jmx::snmp::daemon::SnmpInformHandler> p3, jni::ref<com::sun::jmx::snmp::SnmpOid> p4, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p5) { return call_method<"snmpInformRequest", jni::ref<com::sun::jmx::snmp::daemon::SnmpInformRequest>>(p1, p2, p3, p4, p5); }
	jni::ref<com::sun::jmx::snmp::daemon::SnmpInformRequest> snmpInformRequest(jni::ref<com::sun::jmx::snmp::SnmpPeer> p1, jni::ref<com::sun::jmx::snmp::daemon::SnmpInformHandler> p2, jni::ref<com::sun::jmx::snmp::SnmpOid> p3, jni::ref<com::sun::jmx::snmp::SnmpVarBindList> p4) { return call_method<"snmpInformRequest", jni::ref<com::sun::jmx::snmp::daemon::SnmpInformRequest>>(p1, p2, p3, p4); }
	static jint mapErrorStatus(jint p1, jint p2, jint p3) { return call_static_method<"mapErrorStatus", jint>(p1, p2, p3); }

protected:

	SnmpAdaptorServer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_SNMP_DAEMON_SNMPADAPTORSERVER
