// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/management/MBeanServer.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_INTERCEPTOR_MBEANSERVERINTERCEPTOR_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_INTERCEPTOR_MBEANSERVERINTERCEPTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::interceptor { class MBeanServerInterceptor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::interceptor::MBeanServerInterceptor>
{
	static constexpr fixed_string class_name = "com/sun/jmx/interceptor/MBeanServerInterceptor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::management::MBeanServer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_INTERCEPTOR_MBEANSERVERINTERCEPTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_INTERCEPTOR_MBEANSERVERINTERCEPTOR)
#define SCAPIX_JAVA_API_COM_SUN_JMX_INTERCEPTOR_MBEANSERVERINTERCEPTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/ObjectInputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#include <scapix/java_api/javax/management/loading/ClassLoaderRepository.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::interceptor::MBeanServerInterceptor : public jni::object_base<"com/sun/jmx/interceptor/MBeanServerInterceptor",
	java::lang::Object,
	javax::management::MBeanServer>
{
public:

	jni::ref<java::lang::Object> instantiate(jni::ref<java::lang::String> p1) { return call_method<"instantiate", jni::ref<java::lang::Object>>(p1); }
	jni::ref<java::lang::Object> instantiate(jni::ref<java::lang::String> p1, jni::ref<javax::management::ObjectName> p2) { return call_method<"instantiate", jni::ref<java::lang::Object>>(p1, p2); }
	jni::ref<java::lang::Object> instantiate(jni::ref<java::lang::String> p1, jni::ref<jni::array<java::lang::Object>> p2, jni::ref<jni::array<java::lang::String>> p3) { return call_method<"instantiate", jni::ref<java::lang::Object>>(p1, p2, p3); }
	jni::ref<java::lang::Object> instantiate(jni::ref<java::lang::String> p1, jni::ref<javax::management::ObjectName> p2, jni::ref<jni::array<java::lang::Object>> p3, jni::ref<jni::array<java::lang::String>> p4) { return call_method<"instantiate", jni::ref<java::lang::Object>>(p1, p2, p3, p4); }
	jni::ref<java::io::ObjectInputStream> deserialize(jni::ref<javax::management::ObjectName> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"deserialize", jni::ref<java::io::ObjectInputStream>>(p1, p2); }
	jni::ref<java::io::ObjectInputStream> deserialize(jni::ref<java::lang::String> p1, jni::ref<jni::array<jbyte>> p2) { return call_method<"deserialize", jni::ref<java::io::ObjectInputStream>>(p1, p2); }
	jni::ref<java::io::ObjectInputStream> deserialize(jni::ref<java::lang::String> p1, jni::ref<javax::management::ObjectName> p2, jni::ref<jni::array<jbyte>> p3) { return call_method<"deserialize", jni::ref<java::io::ObjectInputStream>>(p1, p2, p3); }
	jni::ref<javax::management::loading::ClassLoaderRepository> getClassLoaderRepository() { return call_method<"getClassLoaderRepository", jni::ref<javax::management::loading::ClassLoaderRepository>>(); }

protected:

	MBeanServerInterceptor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_INTERCEPTOR_MBEANSERVERINTERCEPTOR
