// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/com/sun/jmx/mbeanserver/ModifiableClassLoaderRepository.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_CLASSLOADERREPOSITORYSUPPORT_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_CLASSLOADERREPOSITORYSUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::mbeanserver { class ClassLoaderRepositorySupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::mbeanserver::ClassLoaderRepositorySupport>
{
	static constexpr fixed_string class_name = "com/sun/jmx/mbeanserver/ClassLoaderRepositorySupport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::com::sun::jmx::mbeanserver::ModifiableClassLoaderRepository>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_CLASSLOADERREPOSITORYSUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_CLASSLOADERREPOSITORYSUPPORT)
#define SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_CLASSLOADERREPOSITORYSUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/javax/management/ObjectName.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::jmx::mbeanserver::ClassLoaderRepositorySupport : public jni::object_base<"com/sun/jmx/mbeanserver/ClassLoaderRepositorySupport",
	java::lang::Object,
	com::sun::jmx::mbeanserver::ModifiableClassLoaderRepository>
{
public:

	jni::ref<java::lang::Class> loadClass(jni::ref<java::lang::String> p1) { return call_method<"loadClass", jni::ref<java::lang::Class>>(p1); }
	jni::ref<java::lang::Class> loadClassWithout(jni::ref<java::lang::ClassLoader> p1, jni::ref<java::lang::String> p2) { return call_method<"loadClassWithout", jni::ref<java::lang::Class>>(p1, p2); }
	jni::ref<java::lang::Class> loadClassBefore(jni::ref<java::lang::ClassLoader> p1, jni::ref<java::lang::String> p2) { return call_method<"loadClassBefore", jni::ref<java::lang::Class>>(p1, p2); }
	void addClassLoader(jni::ref<java::lang::ClassLoader> p1) { return call_method<"addClassLoader", void>(p1); }
	void removeClassLoader(jni::ref<java::lang::ClassLoader> p1) { return call_method<"removeClassLoader", void>(p1); }
	void addClassLoader(jni::ref<javax::management::ObjectName> p1, jni::ref<java::lang::ClassLoader> p2) { return call_method<"addClassLoader", void>(p1, p2); }
	void removeClassLoader(jni::ref<javax::management::ObjectName> p1) { return call_method<"removeClassLoader", void>(p1); }
	jni::ref<java::lang::ClassLoader> getClassLoader(jni::ref<javax::management::ObjectName> p1) { return call_method<"getClassLoader", jni::ref<java::lang::ClassLoader>>(p1); }

protected:

	ClassLoaderRepositorySupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_CLASSLOADERREPOSITORYSUPPORT
