// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/javax/management/loading/ClassLoaderRepository.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_SECURECLASSLOADERREPOSITORY_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_SECURECLASSLOADERREPOSITORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::mbeanserver { class SecureClassLoaderRepository; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::mbeanserver::SecureClassLoaderRepository>
{
	static constexpr fixed_string class_name = "com/sun/jmx/mbeanserver/SecureClassLoaderRepository";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::javax::management::loading::ClassLoaderRepository>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_SECURECLASSLOADERREPOSITORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_SECURECLASSLOADERREPOSITORY)
#define SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_SECURECLASSLOADERREPOSITORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class com::sun::jmx::mbeanserver::SecureClassLoaderRepository : public jni::object_base<"com/sun/jmx/mbeanserver/SecureClassLoaderRepository",
	java::lang::Object,
	javax::management::loading::ClassLoaderRepository>
{
public:

	static jni::ref<com::sun::jmx::mbeanserver::SecureClassLoaderRepository> new_object(jni::ref<javax::management::loading::ClassLoaderRepository> p1) { return base_::new_object(p1); }
	jni::ref<java::lang::Class> loadClass(jni::ref<java::lang::String> p1) { return call_method<"loadClass", jni::ref<java::lang::Class>>(p1); }
	jni::ref<java::lang::Class> loadClassWithout(jni::ref<java::lang::ClassLoader> p1, jni::ref<java::lang::String> p2) { return call_method<"loadClassWithout", jni::ref<java::lang::Class>>(p1, p2); }
	jni::ref<java::lang::Class> loadClassBefore(jni::ref<java::lang::ClassLoader> p1, jni::ref<java::lang::String> p2) { return call_method<"loadClassBefore", jni::ref<java::lang::Class>>(p1, p2); }

protected:

	SecureClassLoaderRepository(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_SECURECLASSLOADERREPOSITORY
