// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_INTROSPECTOR_FWD
#define SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_INTROSPECTOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::com::sun::jmx::mbeanserver { class Introspector; }

template<>
struct scapix::jni::object_traits<scapix::java_api::com::sun::jmx::mbeanserver::Introspector>
{
	static constexpr fixed_string class_name = "com/sun/jmx/mbeanserver/Introspector";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_INTROSPECTOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_INTROSPECTOR)
#define SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_INTROSPECTOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/annotation/Annotation.h>
#include <scapix/java_api/java/lang/reflect/AnnotatedElement.h>
#include <scapix/java_api/javax/management/Descriptor.h>
#include <scapix/java_api/javax/management/DynamicMBean.h>
#include <scapix/java_api/javax/management/MBeanInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class com::sun::jmx::mbeanserver::Introspector : public jni::object_base<"com/sun/jmx/mbeanserver/Introspector",
	java::lang::Object>
{
public:

	static jboolean ALLOW_NONPUBLIC_MBEAN() { return get_static_field<"ALLOW_NONPUBLIC_MBEAN", jboolean>(); }

	static jboolean isDynamic(jni::ref<java::lang::Class> p1) { return call_static_method<"isDynamic", jboolean>(p1); }
	static void testCreation(jni::ref<java::lang::Class> p1) { return call_static_method<"testCreation", void>(p1); }
	static void checkCompliance(jni::ref<java::lang::Class> p1) { return call_static_method<"checkCompliance", void>(p1); }
	static jni::ref<javax::management::DynamicMBean> makeDynamicMBean(jni::ref<java::lang::Object> p1) { return call_static_method<"makeDynamicMBean", jni::ref<javax::management::DynamicMBean>>(p1); }
	static jni::ref<javax::management::MBeanInfo> testCompliance(jni::ref<java::lang::Class> p1) { return call_static_method<"testCompliance", jni::ref<javax::management::MBeanInfo>>(p1); }
	static void testComplianceMXBeanInterface(jni::ref<java::lang::Class> p1) { return call_static_method<"testComplianceMXBeanInterface", void>(p1); }
	static void testComplianceMBeanInterface(jni::ref<java::lang::Class> p1) { return call_static_method<"testComplianceMBeanInterface", void>(p1); }
	static jni::ref<javax::management::MBeanInfo> testCompliance(jni::ref<java::lang::Class> p1, jni::ref<java::lang::Class> p2) { return call_static_method<"testCompliance", jni::ref<javax::management::MBeanInfo>>(p1, p2); }
	static jni::ref<java::lang::Class> getMBeanInterface(jni::ref<java::lang::Class> p1) { return call_static_method<"getMBeanInterface", jni::ref<java::lang::Class>>(p1); }
	static jni::ref<java::lang::Class> getStandardMBeanInterface(jni::ref<java::lang::Class> p1) { return call_static_method<"getStandardMBeanInterface", jni::ref<java::lang::Class>>(p1); }
	static jni::ref<java::lang::Class> getMXBeanInterface(jni::ref<java::lang::Class> p1) { return call_static_method<"getMXBeanInterface", jni::ref<java::lang::Class>>(p1); }
	static jni::ref<javax::management::Descriptor> descriptorForElement(jni::ref<java::lang::reflect::AnnotatedElement> p1) { return call_static_method<"descriptorForElement", jni::ref<javax::management::Descriptor>>(p1); }
	static jni::ref<javax::management::Descriptor> descriptorForAnnotations(jni::ref<jni::array<java::lang::annotation::Annotation>> p1) { return call_static_method<"descriptorForAnnotations", jni::ref<javax::management::Descriptor>>(p1); }
	static jni::ref<java::lang::Object> elementFromComplex(jni::ref<java::lang::Object> p1, jni::ref<java::lang::String> p2) { return call_static_method<"elementFromComplex", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	Introspector(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_COM_SUN_JMX_MBEANSERVER_INTROSPECTOR
