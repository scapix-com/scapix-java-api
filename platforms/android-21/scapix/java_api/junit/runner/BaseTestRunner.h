// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/junit/framework/TestListener.h>

#ifndef SCAPIX_JAVA_API_JUNIT_RUNNER_BASETESTRUNNER_FWD
#define SCAPIX_JAVA_API_JUNIT_RUNNER_BASETESTRUNNER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::junit::runner { class BaseTestRunner; }

template<>
struct scapix::jni::object_traits<scapix::java_api::junit::runner::BaseTestRunner>
{
	static constexpr fixed_string class_name = "junit/runner/BaseTestRunner";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::junit::framework::TestListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JUNIT_RUNNER_BASETESTRUNNER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JUNIT_RUNNER_BASETESTRUNNER)
#define SCAPIX_JAVA_API_JUNIT_RUNNER_BASETESTRUNNER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/junit/framework/AssertionFailedError.h>
#include <scapix/java_api/junit/framework/Test.h>
#include <scapix/java_api/junit/runner/TestSuiteLoader.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class junit::runner::BaseTestRunner : public jni::object_base<"junit/runner/BaseTestRunner",
	java::lang::Object,
	junit::framework::TestListener>
{
public:

	static jni::ref<java::lang::String> SUITE_METHODNAME() { return get_static_field<"SUITE_METHODNAME", jni::ref<java::lang::String>>(); }

	static jni::ref<junit::runner::BaseTestRunner> new_object() { return base_::new_object(); }
	void startTest(jni::ref<junit::framework::Test> test) { return call_method<"startTest", void>(test); }
	static void savePreferences() { return call_static_method<"savePreferences", void>(); }
	void setPreference(jni::ref<java::lang::String> key, jni::ref<java::lang::String> value) { return call_method<"setPreference", void>(key, value); }
	void endTest(jni::ref<junit::framework::Test> test) { return call_method<"endTest", void>(test); }
	void addError(jni::ref<junit::framework::Test> test, jni::ref<java::lang::Throwable> t) { return call_method<"addError", void>(test, t); }
	void addFailure(jni::ref<junit::framework::Test> test, jni::ref<junit::framework::AssertionFailedError> t) { return call_method<"addFailure", void>(test, t); }
	void testStarted(jni::ref<java::lang::String> p1) { return call_method<"testStarted", void>(p1); }
	void testEnded(jni::ref<java::lang::String> p1) { return call_method<"testEnded", void>(p1); }
	void testFailed(jint p1, jni::ref<junit::framework::Test> p2, jni::ref<java::lang::Throwable> p3) { return call_method<"testFailed", void>(p1, p2, p3); }
	jni::ref<junit::framework::Test> getTest(jni::ref<java::lang::String> suiteClassName) { return call_method<"getTest", jni::ref<junit::framework::Test>>(suiteClassName); }
	jni::ref<java::lang::String> elapsedTimeAsString(jlong runTime) { return call_method<"elapsedTimeAsString", jni::ref<java::lang::String>>(runTime); }
	void setLoading(jboolean enable) { return call_method<"setLoading", void>(enable); }
	jni::ref<java::lang::String> extractClassName(jni::ref<java::lang::String> className) { return call_method<"extractClassName", jni::ref<java::lang::String>>(className); }
	static jni::ref<java::lang::String> truncate(jni::ref<java::lang::String> s) { return call_static_method<"truncate", jni::ref<java::lang::String>>(s); }
	jni::ref<junit::runner::TestSuiteLoader> getLoader() { return call_method<"getLoader", jni::ref<junit::runner::TestSuiteLoader>>(); }
	static jni::ref<java::lang::String> getPreference(jni::ref<java::lang::String> key) { return call_static_method<"getPreference", jni::ref<java::lang::String>>(key); }
	static jint getPreference(jni::ref<java::lang::String> key, jint dflt) { return call_static_method<"getPreference", jint>(key, dflt); }
	static jni::ref<java::lang::String> getFilteredTrace(jni::ref<java::lang::Throwable> t) { return call_static_method<"getFilteredTrace", jni::ref<java::lang::String>>(t); }
	static jboolean inVAJava() { return call_static_method<"inVAJava", jboolean>(); }
	static jni::ref<java::lang::String> getFilteredTrace(jni::ref<java::lang::String> stack) { return call_static_method<"getFilteredTrace", jni::ref<java::lang::String>>(stack); }

protected:

	BaseTestRunner(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JUNIT_RUNNER_BASETESTRUNNER
