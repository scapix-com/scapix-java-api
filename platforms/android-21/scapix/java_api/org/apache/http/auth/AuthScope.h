// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_AUTH_AUTHSCOPE_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_AUTH_AUTHSCOPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::auth { class AuthScope; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::auth::AuthScope>
{
	static constexpr fixed_string class_name = "org/apache/http/auth/AuthScope";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_AUTH_AUTHSCOPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_AUTH_AUTHSCOPE)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_AUTH_AUTHSCOPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::auth::AuthScope : public jni::object_base<"org/apache/http/auth/AuthScope",
	java::lang::Object>
{
public:

	static jni::ref<org::apache::http::auth::AuthScope> ANY() { return get_static_field<"ANY", jni::ref<org::apache::http::auth::AuthScope>>(); }
	static jni::ref<java::lang::String> ANY_HOST() { return get_static_field<"ANY_HOST", jni::ref<java::lang::String>>(); }
	static jint ANY_PORT() { return get_static_field<"ANY_PORT", jint>(); }
	static jni::ref<java::lang::String> ANY_REALM() { return get_static_field<"ANY_REALM", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ANY_SCHEME() { return get_static_field<"ANY_SCHEME", jni::ref<java::lang::String>>(); }

	static jni::ref<org::apache::http::auth::AuthScope> new_object(jni::ref<java::lang::String> host, jint port, jni::ref<java::lang::String> realm, jni::ref<java::lang::String> scheme) { return base_::new_object(host, port, realm, scheme); }
	static jni::ref<org::apache::http::auth::AuthScope> new_object(jni::ref<java::lang::String> host, jint port, jni::ref<java::lang::String> realm) { return base_::new_object(host, port, realm); }
	static jni::ref<org::apache::http::auth::AuthScope> new_object(jni::ref<java::lang::String> host, jint port) { return base_::new_object(host, port); }
	static jni::ref<org::apache::http::auth::AuthScope> new_object(jni::ref<org::apache::http::auth::AuthScope> authscope) { return base_::new_object(authscope); }
	jni::ref<java::lang::String> getHost() { return call_method<"getHost", jni::ref<java::lang::String>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	jni::ref<java::lang::String> getRealm() { return call_method<"getRealm", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getScheme() { return call_method<"getScheme", jni::ref<java::lang::String>>(); }
	jint match(jni::ref<org::apache::http::auth::AuthScope> that) { return call_method<"match", jint>(that); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	AuthScope(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_AUTH_AUTHSCOPE
