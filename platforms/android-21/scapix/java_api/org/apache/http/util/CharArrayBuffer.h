// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::util { class CharArrayBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::util::CharArrayBuffer>
{
	static constexpr fixed_string class_name = "org/apache/http/util/CharArrayBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/apache/http/util/ByteArrayBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::util::CharArrayBuffer : public jni::object_base<"org/apache/http/util/CharArrayBuffer",
	java::lang::Object>
{
public:

	static jni::ref<org::apache::http::util::CharArrayBuffer> new_object(jint capacity) { return base_::new_object(capacity); }
	void append(jni::ref<jni::array<jchar>> b, jint off, jint len) { return call_method<"append", void>(b, off, len); }
	void append(jni::ref<java::lang::String> str) { return call_method<"append", void>(str); }
	void append(jni::ref<org::apache::http::util::CharArrayBuffer> b, jint off, jint len) { return call_method<"append", void>(b, off, len); }
	void append(jni::ref<org::apache::http::util::CharArrayBuffer> b) { return call_method<"append", void>(b); }
	void append(jchar ch) { return call_method<"append", void>(ch); }
	void append(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"append", void>(b, off, len); }
	void append(jni::ref<org::apache::http::util::ByteArrayBuffer> b, jint off, jint len) { return call_method<"append", void>(b, off, len); }
	void append(jni::ref<java::lang::Object> obj) { return call_method<"append", void>(obj); }
	void clear() { return call_method<"clear", void>(); }
	jni::ref<jni::array<jchar>> toCharArray() { return call_method<"toCharArray", jni::ref<jni::array<jchar>>>(); }
	jchar charAt(jint i) { return call_method<"charAt", jchar>(i); }
	jni::ref<jni::array<jchar>> buffer() { return call_method<"buffer", jni::ref<jni::array<jchar>>>(); }
	jint capacity() { return call_method<"capacity", jint>(); }
	jint length() { return call_method<"length", jint>(); }
	void ensureCapacity(jint required) { return call_method<"ensureCapacity", void>(required); }
	void setLength(jint len) { return call_method<"setLength", void>(len); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jboolean isFull() { return call_method<"isFull", jboolean>(); }
	jint indexOf(jint ch, jint beginIndex, jint endIndex) { return call_method<"indexOf", jint>(ch, beginIndex, endIndex); }
	jint indexOf(jint ch) { return call_method<"indexOf", jint>(ch); }
	jni::ref<java::lang::String> substring(jint beginIndex, jint endIndex) { return call_method<"substring", jni::ref<java::lang::String>>(beginIndex, endIndex); }
	jni::ref<java::lang::String> substringTrimmed(jint beginIndex, jint endIndex) { return call_method<"substringTrimmed", jni::ref<java::lang::String>>(beginIndex, endIndex); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	CharArrayBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_UTIL_CHARARRAYBUFFER
