// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/org/apache/http/conn/ConnectionReleaseTrigger.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::conn { class EofSensorInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::conn::EofSensorInputStream>
{
	static constexpr fixed_string class_name = "org/apache/http/conn/EofSensorInputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::InputStream, scapix::java_api::org::apache::http::conn::ConnectionReleaseTrigger>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/org/apache/http/conn/EofSensorWatcher.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::conn::EofSensorInputStream : public jni::object_base<"org/apache/http/conn/EofSensorInputStream",
	java::io::InputStream,
	org::apache::http::conn::ConnectionReleaseTrigger>
{
public:

	static jni::ref<org::apache::http::conn::EofSensorInputStream> new_object(jni::ref<java::io::InputStream> in, jni::ref<org::apache::http::conn::EofSensorWatcher> watcher) { return base_::new_object(in, watcher); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"read", jint>(b, off, len); }
	jint read(jni::ref<jni::array<jbyte>> b) { return call_method<"read", jint>(b); }
	jint available() { return call_method<"available", jint>(); }
	void close() { return call_method<"close", void>(); }
	void releaseConnection() { return call_method<"releaseConnection", void>(); }
	void abortConnection() { return call_method<"abortConnection", void>(); }

protected:

	EofSensorInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_EOFSENSORINPUTSTREAM
