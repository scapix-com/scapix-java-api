// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/HttpClientConnection.h>
#include <scapix/java_api/org/apache/http/HttpInetConnection.h>
#include <scapix/java_api/org/apache/http/conn/ConnectionReleaseTrigger.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_MANAGEDCLIENTCONNECTION_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_MANAGEDCLIENTCONNECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::conn { class ManagedClientConnection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::conn::ManagedClientConnection>
{
	static constexpr fixed_string class_name = "org/apache/http/conn/ManagedClientConnection";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::HttpClientConnection, scapix::java_api::org::apache::http::HttpInetConnection, scapix::java_api::org::apache::http::conn::ConnectionReleaseTrigger>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_MANAGEDCLIENTCONNECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_MANAGEDCLIENTCONNECTION)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_MANAGEDCLIENTCONNECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/javax/net/ssl/SSLSession.h>
#include <scapix/java_api/org/apache/http/HttpHost.h>
#include <scapix/java_api/org/apache/http/conn/routing/HttpRoute.h>
#include <scapix/java_api/org/apache/http/params/HttpParams.h>
#include <scapix/java_api/org/apache/http/protocol/HttpContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::conn::ManagedClientConnection : public jni::object_base<"org/apache/http/conn/ManagedClientConnection",
	java::lang::Object,
	org::apache::http::HttpClientConnection,
	org::apache::http::HttpInetConnection,
	org::apache::http::conn::ConnectionReleaseTrigger>
{
public:

	jboolean isSecure() { return call_method<"isSecure", jboolean>(); }
	jni::ref<org::apache::http::conn::routing::HttpRoute> getRoute() { return call_method<"getRoute", jni::ref<org::apache::http::conn::routing::HttpRoute>>(); }
	jni::ref<javax::net::ssl::SSLSession> getSSLSession() { return call_method<"getSSLSession", jni::ref<javax::net::ssl::SSLSession>>(); }
	void open(jni::ref<org::apache::http::conn::routing::HttpRoute> p1, jni::ref<org::apache::http::protocol::HttpContext> p2, jni::ref<org::apache::http::params::HttpParams> p3) { return call_method<"open", void>(p1, p2, p3); }
	void tunnelTarget(jboolean p1, jni::ref<org::apache::http::params::HttpParams> p2) { return call_method<"tunnelTarget", void>(p1, p2); }
	void tunnelProxy(jni::ref<org::apache::http::HttpHost> p1, jboolean p2, jni::ref<org::apache::http::params::HttpParams> p3) { return call_method<"tunnelProxy", void>(p1, p2, p3); }
	void layerProtocol(jni::ref<org::apache::http::protocol::HttpContext> p1, jni::ref<org::apache::http::params::HttpParams> p2) { return call_method<"layerProtocol", void>(p1, p2); }
	void markReusable() { return call_method<"markReusable", void>(); }
	void unmarkReusable() { return call_method<"unmarkReusable", void>(); }
	jboolean isMarkedReusable() { return call_method<"isMarkedReusable", jboolean>(); }
	void setState(jni::ref<java::lang::Object> p1) { return call_method<"setState", void>(p1); }
	jni::ref<java::lang::Object> getState() { return call_method<"getState", jni::ref<java::lang::Object>>(); }
	void setIdleDuration(jlong p1, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"setIdleDuration", void>(p1, p2); }

protected:

	ManagedClientConnection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_CONN_MANAGEDCLIENTCONNECTION
