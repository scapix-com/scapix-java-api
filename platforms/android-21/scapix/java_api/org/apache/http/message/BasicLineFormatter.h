// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/message/LineFormatter.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICLINEFORMATTER_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICLINEFORMATTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::message { class BasicLineFormatter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::message::BasicLineFormatter>
{
	static constexpr fixed_string class_name = "org/apache/http/message/BasicLineFormatter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::message::LineFormatter>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICLINEFORMATTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICLINEFORMATTER)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICLINEFORMATTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/apache/http/Header.h>
#include <scapix/java_api/org/apache/http/ProtocolVersion.h>
#include <scapix/java_api/org/apache/http/RequestLine.h>
#include <scapix/java_api/org/apache/http/StatusLine.h>
#include <scapix/java_api/org/apache/http/util/CharArrayBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::message::BasicLineFormatter : public jni::object_base<"org/apache/http/message/BasicLineFormatter",
	java::lang::Object,
	org::apache::http::message::LineFormatter>
{
public:

	static jni::ref<org::apache::http::message::BasicLineFormatter> DEFAULT() { return get_static_field<"DEFAULT", jni::ref<org::apache::http::message::BasicLineFormatter>>(); }

	static jni::ref<org::apache::http::message::BasicLineFormatter> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::String> formatProtocolVersion(jni::ref<org::apache::http::ProtocolVersion> version, jni::ref<org::apache::http::message::LineFormatter> formatter) { return call_static_method<"formatProtocolVersion", jni::ref<java::lang::String>>(version, formatter); }
	jni::ref<org::apache::http::util::CharArrayBuffer> appendProtocolVersion(jni::ref<org::apache::http::util::CharArrayBuffer> buffer, jni::ref<org::apache::http::ProtocolVersion> version) { return call_method<"appendProtocolVersion", jni::ref<org::apache::http::util::CharArrayBuffer>>(buffer, version); }
	static jni::ref<java::lang::String> formatRequestLine(jni::ref<org::apache::http::RequestLine> reqline, jni::ref<org::apache::http::message::LineFormatter> formatter) { return call_static_method<"formatRequestLine", jni::ref<java::lang::String>>(reqline, formatter); }
	jni::ref<org::apache::http::util::CharArrayBuffer> formatRequestLine(jni::ref<org::apache::http::util::CharArrayBuffer> buffer, jni::ref<org::apache::http::RequestLine> reqline) { return call_method<"formatRequestLine", jni::ref<org::apache::http::util::CharArrayBuffer>>(buffer, reqline); }
	static jni::ref<java::lang::String> formatStatusLine(jni::ref<org::apache::http::StatusLine> statline, jni::ref<org::apache::http::message::LineFormatter> formatter) { return call_static_method<"formatStatusLine", jni::ref<java::lang::String>>(statline, formatter); }
	jni::ref<org::apache::http::util::CharArrayBuffer> formatStatusLine(jni::ref<org::apache::http::util::CharArrayBuffer> buffer, jni::ref<org::apache::http::StatusLine> statline) { return call_method<"formatStatusLine", jni::ref<org::apache::http::util::CharArrayBuffer>>(buffer, statline); }
	static jni::ref<java::lang::String> formatHeader(jni::ref<org::apache::http::Header> header, jni::ref<org::apache::http::message::LineFormatter> formatter) { return call_static_method<"formatHeader", jni::ref<java::lang::String>>(header, formatter); }
	jni::ref<org::apache::http::util::CharArrayBuffer> formatHeader(jni::ref<org::apache::http::util::CharArrayBuffer> buffer, jni::ref<org::apache::http::Header> header) { return call_method<"formatHeader", jni::ref<org::apache::http::util::CharArrayBuffer>>(buffer, header); }

protected:

	BasicLineFormatter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_MESSAGE_BASICLINEFORMATTER
