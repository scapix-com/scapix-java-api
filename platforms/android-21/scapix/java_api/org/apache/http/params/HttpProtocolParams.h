// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/params/CoreProtocolPNames.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_HTTPPROTOCOLPARAMS_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_HTTPPROTOCOLPARAMS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::params { class HttpProtocolParams; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::params::HttpProtocolParams>
{
	static constexpr fixed_string class_name = "org/apache/http/params/HttpProtocolParams";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::params::CoreProtocolPNames>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_HTTPPROTOCOLPARAMS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_HTTPPROTOCOLPARAMS)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_HTTPPROTOCOLPARAMS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/org/apache/http/ProtocolVersion.h>
#include <scapix/java_api/org/apache/http/params/HttpParams.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::params::HttpProtocolParams : public jni::object_base<"org/apache/http/params/HttpProtocolParams",
	java::lang::Object,
	org::apache::http::params::CoreProtocolPNames>
{
public:

	static jni::ref<java::lang::String> getHttpElementCharset(jni::ref<org::apache::http::params::HttpParams> params) { return call_static_method<"getHttpElementCharset", jni::ref<java::lang::String>>(params); }
	static void setHttpElementCharset(jni::ref<org::apache::http::params::HttpParams> params, jni::ref<java::lang::String> charset) { return call_static_method<"setHttpElementCharset", void>(params, charset); }
	static jni::ref<java::lang::String> getContentCharset(jni::ref<org::apache::http::params::HttpParams> params) { return call_static_method<"getContentCharset", jni::ref<java::lang::String>>(params); }
	static void setContentCharset(jni::ref<org::apache::http::params::HttpParams> params, jni::ref<java::lang::String> charset) { return call_static_method<"setContentCharset", void>(params, charset); }
	static jni::ref<org::apache::http::ProtocolVersion> getVersion(jni::ref<org::apache::http::params::HttpParams> params) { return call_static_method<"getVersion", jni::ref<org::apache::http::ProtocolVersion>>(params); }
	static void setVersion(jni::ref<org::apache::http::params::HttpParams> params, jni::ref<org::apache::http::ProtocolVersion> version) { return call_static_method<"setVersion", void>(params, version); }
	static jni::ref<java::lang::String> getUserAgent(jni::ref<org::apache::http::params::HttpParams> params) { return call_static_method<"getUserAgent", jni::ref<java::lang::String>>(params); }
	static void setUserAgent(jni::ref<org::apache::http::params::HttpParams> params, jni::ref<java::lang::String> useragent) { return call_static_method<"setUserAgent", void>(params, useragent); }
	static jboolean useExpectContinue(jni::ref<org::apache::http::params::HttpParams> params) { return call_static_method<"useExpectContinue", jboolean>(params); }
	static void setUseExpectContinue(jni::ref<org::apache::http::params::HttpParams> params, jboolean b) { return call_static_method<"setUseExpectContinue", void>(params, b); }

protected:

	HttpProtocolParams(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_HTTPPROTOCOLPARAMS
