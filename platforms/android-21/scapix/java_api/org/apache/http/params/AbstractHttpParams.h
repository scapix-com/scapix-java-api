// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/params/HttpParams.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::params { class AbstractHttpParams; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::params::AbstractHttpParams>
{
	static constexpr fixed_string class_name = "org/apache/http/params/AbstractHttpParams";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::params::HttpParams>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::params::AbstractHttpParams : public jni::object_base<"org/apache/http/params/AbstractHttpParams",
	java::lang::Object,
	org::apache::http::params::HttpParams>
{
public:

	jlong getLongParameter(jni::ref<java::lang::String> name, jlong defaultValue) { return call_method<"getLongParameter", jlong>(name, defaultValue); }
	jni::ref<org::apache::http::params::HttpParams> setLongParameter(jni::ref<java::lang::String> name, jlong value) { return call_method<"setLongParameter", jni::ref<org::apache::http::params::HttpParams>>(name, value); }
	jint getIntParameter(jni::ref<java::lang::String> name, jint defaultValue) { return call_method<"getIntParameter", jint>(name, defaultValue); }
	jni::ref<org::apache::http::params::HttpParams> setIntParameter(jni::ref<java::lang::String> name, jint value) { return call_method<"setIntParameter", jni::ref<org::apache::http::params::HttpParams>>(name, value); }
	jdouble getDoubleParameter(jni::ref<java::lang::String> name, jdouble defaultValue) { return call_method<"getDoubleParameter", jdouble>(name, defaultValue); }
	jni::ref<org::apache::http::params::HttpParams> setDoubleParameter(jni::ref<java::lang::String> name, jdouble value) { return call_method<"setDoubleParameter", jni::ref<org::apache::http::params::HttpParams>>(name, value); }
	jboolean getBooleanParameter(jni::ref<java::lang::String> name, jboolean defaultValue) { return call_method<"getBooleanParameter", jboolean>(name, defaultValue); }
	jni::ref<org::apache::http::params::HttpParams> setBooleanParameter(jni::ref<java::lang::String> name, jboolean value) { return call_method<"setBooleanParameter", jni::ref<org::apache::http::params::HttpParams>>(name, value); }
	jboolean isParameterTrue(jni::ref<java::lang::String> name) { return call_method<"isParameterTrue", jboolean>(name); }
	jboolean isParameterFalse(jni::ref<java::lang::String> name) { return call_method<"isParameterFalse", jboolean>(name); }

protected:

	AbstractHttpParams(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_PARAMS_ABSTRACTHTTPPARAMS
