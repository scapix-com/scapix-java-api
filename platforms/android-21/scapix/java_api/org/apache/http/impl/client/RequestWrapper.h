// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/org/apache/http/message/AbstractHttpMessage.h>
#include <scapix/java_api/org/apache/http/client/methods/HttpUriRequest.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_REQUESTWRAPPER_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_REQUESTWRAPPER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::impl::client { class RequestWrapper; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::impl::client::RequestWrapper>
{
	static constexpr fixed_string class_name = "org/apache/http/impl/client/RequestWrapper";
	using base_classes = std::tuple<scapix::java_api::org::apache::http::message::AbstractHttpMessage, scapix::java_api::org::apache::http::client::methods::HttpUriRequest>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_REQUESTWRAPPER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_REQUESTWRAPPER)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_REQUESTWRAPPER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/org/apache/http/HttpRequest.h>
#include <scapix/java_api/org/apache/http/ProtocolVersion.h>
#include <scapix/java_api/org/apache/http/RequestLine.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::impl::client::RequestWrapper : public jni::object_base<"org/apache/http/impl/client/RequestWrapper",
	org::apache::http::message::AbstractHttpMessage,
	org::apache::http::client::methods::HttpUriRequest>
{
public:

	static jni::ref<org::apache::http::impl::client::RequestWrapper> new_object(jni::ref<org::apache::http::HttpRequest> request) { return base_::new_object(request); }
	void resetHeaders() { return call_method<"resetHeaders", void>(); }
	jni::ref<java::lang::String> getMethod() { return call_method<"getMethod", jni::ref<java::lang::String>>(); }
	void setMethod(jni::ref<java::lang::String> method) { return call_method<"setMethod", void>(method); }
	jni::ref<org::apache::http::ProtocolVersion> getProtocolVersion() { return call_method<"getProtocolVersion", jni::ref<org::apache::http::ProtocolVersion>>(); }
	void setProtocolVersion(jni::ref<org::apache::http::ProtocolVersion> version) { return call_method<"setProtocolVersion", void>(version); }
	jni::ref<java::net::URI> getURI() { return call_method<"getURI", jni::ref<java::net::URI>>(); }
	void setURI(jni::ref<java::net::URI> uri) { return call_method<"setURI", void>(uri); }
	jni::ref<org::apache::http::RequestLine> getRequestLine() { return call_method<"getRequestLine", jni::ref<org::apache::http::RequestLine>>(); }
	void abort() { return call_method<"abort", void>(); }
	jboolean isAborted() { return call_method<"isAborted", jboolean>(); }
	jni::ref<org::apache::http::HttpRequest> getOriginal() { return call_method<"getOriginal", jni::ref<org::apache::http::HttpRequest>>(); }
	jboolean isRepeatable() { return call_method<"isRepeatable", jboolean>(); }
	jint getExecCount() { return call_method<"getExecCount", jint>(); }
	void incrementExecCount() { return call_method<"incrementExecCount", void>(); }

protected:

	RequestWrapper(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_REQUESTWRAPPER
