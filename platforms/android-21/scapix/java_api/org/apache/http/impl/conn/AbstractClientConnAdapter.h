// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/conn/ManagedClientConnection.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::impl::conn { class AbstractClientConnAdapter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::impl::conn::AbstractClientConnAdapter>
{
	static constexpr fixed_string class_name = "org/apache/http/impl/conn/AbstractClientConnAdapter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::conn::ManagedClientConnection>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#include <scapix/java_api/javax/net/ssl/SSLSession.h>
#include <scapix/java_api/org/apache/http/HttpConnectionMetrics.h>
#include <scapix/java_api/org/apache/http/HttpEntityEnclosingRequest.h>
#include <scapix/java_api/org/apache/http/HttpRequest.h>
#include <scapix/java_api/org/apache/http/HttpResponse.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::impl::conn::AbstractClientConnAdapter : public jni::object_base<"org/apache/http/impl/conn/AbstractClientConnAdapter",
	java::lang::Object,
	org::apache::http::conn::ManagedClientConnection>
{
public:

	jboolean isOpen() { return call_method<"isOpen", jboolean>(); }
	jboolean isStale() { return call_method<"isStale", jboolean>(); }
	void setSocketTimeout(jint timeout) { return call_method<"setSocketTimeout", void>(timeout); }
	jint getSocketTimeout() { return call_method<"getSocketTimeout", jint>(); }
	jni::ref<org::apache::http::HttpConnectionMetrics> getMetrics() { return call_method<"getMetrics", jni::ref<org::apache::http::HttpConnectionMetrics>>(); }
	void flush() { return call_method<"flush", void>(); }
	jboolean isResponseAvailable(jint timeout) { return call_method<"isResponseAvailable", jboolean>(timeout); }
	void receiveResponseEntity(jni::ref<org::apache::http::HttpResponse> response) { return call_method<"receiveResponseEntity", void>(response); }
	jni::ref<org::apache::http::HttpResponse> receiveResponseHeader() { return call_method<"receiveResponseHeader", jni::ref<org::apache::http::HttpResponse>>(); }
	void sendRequestEntity(jni::ref<org::apache::http::HttpEntityEnclosingRequest> request) { return call_method<"sendRequestEntity", void>(request); }
	void sendRequestHeader(jni::ref<org::apache::http::HttpRequest> request) { return call_method<"sendRequestHeader", void>(request); }
	jni::ref<java::net::InetAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::InetAddress>>(); }
	jint getLocalPort() { return call_method<"getLocalPort", jint>(); }
	jni::ref<java::net::InetAddress> getRemoteAddress() { return call_method<"getRemoteAddress", jni::ref<java::net::InetAddress>>(); }
	jint getRemotePort() { return call_method<"getRemotePort", jint>(); }
	jboolean isSecure() { return call_method<"isSecure", jboolean>(); }
	jni::ref<javax::net::ssl::SSLSession> getSSLSession() { return call_method<"getSSLSession", jni::ref<javax::net::ssl::SSLSession>>(); }
	void markReusable() { return call_method<"markReusable", void>(); }
	void unmarkReusable() { return call_method<"unmarkReusable", void>(); }
	jboolean isMarkedReusable() { return call_method<"isMarkedReusable", jboolean>(); }
	void setIdleDuration(jlong duration, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"setIdleDuration", void>(duration, p2); }
	void releaseConnection() { return call_method<"releaseConnection", void>(); }
	void abortConnection() { return call_method<"abortConnection", void>(); }

protected:

	AbstractClientConnAdapter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER
