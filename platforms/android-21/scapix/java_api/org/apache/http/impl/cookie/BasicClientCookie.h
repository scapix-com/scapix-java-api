// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/cookie/SetCookie.h>
#include <scapix/java_api/org/apache/http/cookie/ClientCookie.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::impl::cookie { class BasicClientCookie; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::impl::cookie::BasicClientCookie>
{
	static constexpr fixed_string class_name = "org/apache/http/impl/cookie/BasicClientCookie";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::cookie::SetCookie, scapix::java_api::org::apache::http::cookie::ClientCookie, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Date.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::impl::cookie::BasicClientCookie : public jni::object_base<"org/apache/http/impl/cookie/BasicClientCookie",
	java::lang::Object,
	org::apache::http::cookie::SetCookie,
	org::apache::http::cookie::ClientCookie,
	java::lang::Cloneable>
{
public:

	static jni::ref<org::apache::http::impl::cookie::BasicClientCookie> new_object(jni::ref<java::lang::String> name, jni::ref<java::lang::String> value) { return base_::new_object(name, value); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getValue() { return call_method<"getValue", jni::ref<java::lang::String>>(); }
	void setValue(jni::ref<java::lang::String> value) { return call_method<"setValue", void>(value); }
	jni::ref<java::lang::String> getComment() { return call_method<"getComment", jni::ref<java::lang::String>>(); }
	void setComment(jni::ref<java::lang::String> comment) { return call_method<"setComment", void>(comment); }
	jni::ref<java::lang::String> getCommentURL() { return call_method<"getCommentURL", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::Date> getExpiryDate() { return call_method<"getExpiryDate", jni::ref<java::util::Date>>(); }
	void setExpiryDate(jni::ref<java::util::Date> expiryDate) { return call_method<"setExpiryDate", void>(expiryDate); }
	jboolean isPersistent() { return call_method<"isPersistent", jboolean>(); }
	jni::ref<java::lang::String> getDomain() { return call_method<"getDomain", jni::ref<java::lang::String>>(); }
	void setDomain(jni::ref<java::lang::String> domain) { return call_method<"setDomain", void>(domain); }
	jni::ref<java::lang::String> getPath() { return call_method<"getPath", jni::ref<java::lang::String>>(); }
	void setPath(jni::ref<java::lang::String> path) { return call_method<"setPath", void>(path); }
	jboolean isSecure() { return call_method<"isSecure", jboolean>(); }
	void setSecure(jboolean secure) { return call_method<"setSecure", void>(secure); }
	jni::ref<jni::array<jint>> getPorts() { return call_method<"getPorts", jni::ref<jni::array<jint>>>(); }
	jint getVersion() { return call_method<"getVersion", jint>(); }
	void setVersion(jint version) { return call_method<"setVersion", void>(version); }
	jboolean isExpired(jni::ref<java::util::Date> date) { return call_method<"isExpired", jboolean>(date); }
	void setAttribute(jni::ref<java::lang::String> name, jni::ref<java::lang::String> value) { return call_method<"setAttribute", void>(name, value); }
	jni::ref<java::lang::String> getAttribute(jni::ref<java::lang::String> name) { return call_method<"getAttribute", jni::ref<java::lang::String>>(name); }
	jboolean containsAttribute(jni::ref<java::lang::String> name) { return call_method<"containsAttribute", jboolean>(name); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	BasicClientCookie(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_COOKIE_BASICCLIENTCOOKIE
