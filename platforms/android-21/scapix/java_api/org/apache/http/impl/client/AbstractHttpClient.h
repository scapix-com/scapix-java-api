// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/client/HttpClient.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::impl::client { class AbstractHttpClient; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::impl::client::AbstractHttpClient>
{
	static constexpr fixed_string class_name = "org/apache/http/impl/client/AbstractHttpClient";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::client::HttpClient>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/org/apache/http/ConnectionReuseStrategy.h>
#include <scapix/java_api/org/apache/http/HttpHost.h>
#include <scapix/java_api/org/apache/http/HttpRequest.h>
#include <scapix/java_api/org/apache/http/HttpRequestInterceptor.h>
#include <scapix/java_api/org/apache/http/HttpResponse.h>
#include <scapix/java_api/org/apache/http/HttpResponseInterceptor.h>
#include <scapix/java_api/org/apache/http/auth/AuthSchemeRegistry.h>
#include <scapix/java_api/org/apache/http/client/AuthenticationHandler.h>
#include <scapix/java_api/org/apache/http/client/CookieStore.h>
#include <scapix/java_api/org/apache/http/client/CredentialsProvider.h>
#include <scapix/java_api/org/apache/http/client/HttpRequestRetryHandler.h>
#include <scapix/java_api/org/apache/http/client/RedirectHandler.h>
#include <scapix/java_api/org/apache/http/client/ResponseHandler.h>
#include <scapix/java_api/org/apache/http/client/UserTokenHandler.h>
#include <scapix/java_api/org/apache/http/client/methods/HttpUriRequest.h>
#include <scapix/java_api/org/apache/http/conn/ClientConnectionManager.h>
#include <scapix/java_api/org/apache/http/conn/ConnectionKeepAliveStrategy.h>
#include <scapix/java_api/org/apache/http/conn/routing/HttpRoutePlanner.h>
#include <scapix/java_api/org/apache/http/cookie/CookieSpecRegistry.h>
#include <scapix/java_api/org/apache/http/params/HttpParams.h>
#include <scapix/java_api/org/apache/http/protocol/HttpContext.h>
#include <scapix/java_api/org/apache/http/protocol/HttpRequestExecutor.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::impl::client::AbstractHttpClient : public jni::object_base<"org/apache/http/impl/client/AbstractHttpClient",
	java::lang::Object,
	org::apache::http::client::HttpClient>
{
public:

	jni::ref<org::apache::http::params::HttpParams> getParams() { return call_method<"getParams", jni::ref<org::apache::http::params::HttpParams>>(); }
	void setParams(jni::ref<org::apache::http::params::HttpParams> params) { return call_method<"setParams", void>(params); }
	jni::ref<org::apache::http::conn::ClientConnectionManager> getConnectionManager() { return call_method<"getConnectionManager", jni::ref<org::apache::http::conn::ClientConnectionManager>>(); }
	jni::ref<org::apache::http::protocol::HttpRequestExecutor> getRequestExecutor() { return call_method<"getRequestExecutor", jni::ref<org::apache::http::protocol::HttpRequestExecutor>>(); }
	jni::ref<org::apache::http::auth::AuthSchemeRegistry> getAuthSchemes() { return call_method<"getAuthSchemes", jni::ref<org::apache::http::auth::AuthSchemeRegistry>>(); }
	void setAuthSchemes(jni::ref<org::apache::http::auth::AuthSchemeRegistry> authSchemeRegistry) { return call_method<"setAuthSchemes", void>(authSchemeRegistry); }
	jni::ref<org::apache::http::cookie::CookieSpecRegistry> getCookieSpecs() { return call_method<"getCookieSpecs", jni::ref<org::apache::http::cookie::CookieSpecRegistry>>(); }
	void setCookieSpecs(jni::ref<org::apache::http::cookie::CookieSpecRegistry> cookieSpecRegistry) { return call_method<"setCookieSpecs", void>(cookieSpecRegistry); }
	jni::ref<org::apache::http::ConnectionReuseStrategy> getConnectionReuseStrategy() { return call_method<"getConnectionReuseStrategy", jni::ref<org::apache::http::ConnectionReuseStrategy>>(); }
	void setReuseStrategy(jni::ref<org::apache::http::ConnectionReuseStrategy> reuseStrategy) { return call_method<"setReuseStrategy", void>(reuseStrategy); }
	jni::ref<org::apache::http::conn::ConnectionKeepAliveStrategy> getConnectionKeepAliveStrategy() { return call_method<"getConnectionKeepAliveStrategy", jni::ref<org::apache::http::conn::ConnectionKeepAliveStrategy>>(); }
	void setKeepAliveStrategy(jni::ref<org::apache::http::conn::ConnectionKeepAliveStrategy> keepAliveStrategy) { return call_method<"setKeepAliveStrategy", void>(keepAliveStrategy); }
	jni::ref<org::apache::http::client::HttpRequestRetryHandler> getHttpRequestRetryHandler() { return call_method<"getHttpRequestRetryHandler", jni::ref<org::apache::http::client::HttpRequestRetryHandler>>(); }
	void setHttpRequestRetryHandler(jni::ref<org::apache::http::client::HttpRequestRetryHandler> retryHandler) { return call_method<"setHttpRequestRetryHandler", void>(retryHandler); }
	jni::ref<org::apache::http::client::RedirectHandler> getRedirectHandler() { return call_method<"getRedirectHandler", jni::ref<org::apache::http::client::RedirectHandler>>(); }
	void setRedirectHandler(jni::ref<org::apache::http::client::RedirectHandler> redirectHandler) { return call_method<"setRedirectHandler", void>(redirectHandler); }
	jni::ref<org::apache::http::client::AuthenticationHandler> getTargetAuthenticationHandler() { return call_method<"getTargetAuthenticationHandler", jni::ref<org::apache::http::client::AuthenticationHandler>>(); }
	void setTargetAuthenticationHandler(jni::ref<org::apache::http::client::AuthenticationHandler> targetAuthHandler) { return call_method<"setTargetAuthenticationHandler", void>(targetAuthHandler); }
	jni::ref<org::apache::http::client::AuthenticationHandler> getProxyAuthenticationHandler() { return call_method<"getProxyAuthenticationHandler", jni::ref<org::apache::http::client::AuthenticationHandler>>(); }
	void setProxyAuthenticationHandler(jni::ref<org::apache::http::client::AuthenticationHandler> proxyAuthHandler) { return call_method<"setProxyAuthenticationHandler", void>(proxyAuthHandler); }
	jni::ref<org::apache::http::client::CookieStore> getCookieStore() { return call_method<"getCookieStore", jni::ref<org::apache::http::client::CookieStore>>(); }
	void setCookieStore(jni::ref<org::apache::http::client::CookieStore> cookieStore) { return call_method<"setCookieStore", void>(cookieStore); }
	jni::ref<org::apache::http::client::CredentialsProvider> getCredentialsProvider() { return call_method<"getCredentialsProvider", jni::ref<org::apache::http::client::CredentialsProvider>>(); }
	void setCredentialsProvider(jni::ref<org::apache::http::client::CredentialsProvider> credsProvider) { return call_method<"setCredentialsProvider", void>(credsProvider); }
	jni::ref<org::apache::http::conn::routing::HttpRoutePlanner> getRoutePlanner() { return call_method<"getRoutePlanner", jni::ref<org::apache::http::conn::routing::HttpRoutePlanner>>(); }
	void setRoutePlanner(jni::ref<org::apache::http::conn::routing::HttpRoutePlanner> routePlanner) { return call_method<"setRoutePlanner", void>(routePlanner); }
	jni::ref<org::apache::http::client::UserTokenHandler> getUserTokenHandler() { return call_method<"getUserTokenHandler", jni::ref<org::apache::http::client::UserTokenHandler>>(); }
	void setUserTokenHandler(jni::ref<org::apache::http::client::UserTokenHandler> userTokenHandler) { return call_method<"setUserTokenHandler", void>(userTokenHandler); }
	void addResponseInterceptor(jni::ref<org::apache::http::HttpResponseInterceptor> itcp) { return call_method<"addResponseInterceptor", void>(itcp); }
	void addResponseInterceptor(jni::ref<org::apache::http::HttpResponseInterceptor> itcp, jint index) { return call_method<"addResponseInterceptor", void>(itcp, index); }
	jni::ref<org::apache::http::HttpResponseInterceptor> getResponseInterceptor(jint index) { return call_method<"getResponseInterceptor", jni::ref<org::apache::http::HttpResponseInterceptor>>(index); }
	jint getResponseInterceptorCount() { return call_method<"getResponseInterceptorCount", jint>(); }
	void clearResponseInterceptors() { return call_method<"clearResponseInterceptors", void>(); }
	void removeResponseInterceptorByClass(jni::ref<java::lang::Class> clazz) { return call_method<"removeResponseInterceptorByClass", void>(clazz); }
	void addRequestInterceptor(jni::ref<org::apache::http::HttpRequestInterceptor> itcp) { return call_method<"addRequestInterceptor", void>(itcp); }
	void addRequestInterceptor(jni::ref<org::apache::http::HttpRequestInterceptor> itcp, jint index) { return call_method<"addRequestInterceptor", void>(itcp, index); }
	jni::ref<org::apache::http::HttpRequestInterceptor> getRequestInterceptor(jint index) { return call_method<"getRequestInterceptor", jni::ref<org::apache::http::HttpRequestInterceptor>>(index); }
	jint getRequestInterceptorCount() { return call_method<"getRequestInterceptorCount", jint>(); }
	void clearRequestInterceptors() { return call_method<"clearRequestInterceptors", void>(); }
	void removeRequestInterceptorByClass(jni::ref<java::lang::Class> clazz) { return call_method<"removeRequestInterceptorByClass", void>(clazz); }
	jni::ref<org::apache::http::HttpResponse> execute(jni::ref<org::apache::http::client::methods::HttpUriRequest> request) { return call_method<"execute", jni::ref<org::apache::http::HttpResponse>>(request); }
	jni::ref<org::apache::http::HttpResponse> execute(jni::ref<org::apache::http::client::methods::HttpUriRequest> request, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"execute", jni::ref<org::apache::http::HttpResponse>>(request, context); }
	jni::ref<org::apache::http::HttpResponse> execute(jni::ref<org::apache::http::HttpHost> target, jni::ref<org::apache::http::HttpRequest> request) { return call_method<"execute", jni::ref<org::apache::http::HttpResponse>>(target, request); }
	jni::ref<org::apache::http::HttpResponse> execute(jni::ref<org::apache::http::HttpHost> target, jni::ref<org::apache::http::HttpRequest> request, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"execute", jni::ref<org::apache::http::HttpResponse>>(target, request, context); }
	jni::ref<java::lang::Object> execute(jni::ref<org::apache::http::client::methods::HttpUriRequest> request, jni::ref<org::apache::http::client::ResponseHandler> responseHandler) { return call_method<"execute", jni::ref<java::lang::Object>>(request, responseHandler); }
	jni::ref<java::lang::Object> execute(jni::ref<org::apache::http::client::methods::HttpUriRequest> request, jni::ref<org::apache::http::client::ResponseHandler> responseHandler, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"execute", jni::ref<java::lang::Object>>(request, responseHandler, context); }
	jni::ref<java::lang::Object> execute(jni::ref<org::apache::http::HttpHost> target, jni::ref<org::apache::http::HttpRequest> request, jni::ref<org::apache::http::client::ResponseHandler> responseHandler) { return call_method<"execute", jni::ref<java::lang::Object>>(target, request, responseHandler); }
	jni::ref<java::lang::Object> execute(jni::ref<org::apache::http::HttpHost> target, jni::ref<org::apache::http::HttpRequest> request, jni::ref<org::apache::http::client::ResponseHandler> responseHandler, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"execute", jni::ref<java::lang::Object>>(target, request, responseHandler, context); }

protected:

	AbstractHttpClient(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_IMPL_CLIENT_ABSTRACTHTTPCLIENT
