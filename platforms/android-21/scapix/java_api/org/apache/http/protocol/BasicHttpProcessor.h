// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/org/apache/http/protocol/HttpProcessor.h>
#include <scapix/java_api/org/apache/http/protocol/HttpRequestInterceptorList.h>
#include <scapix/java_api/org/apache/http/protocol/HttpResponseInterceptorList.h>
#include <scapix/java_api/java/lang/Cloneable.h>

#ifndef SCAPIX_JAVA_API_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_FWD
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::org::apache::http::protocol { class BasicHttpProcessor; }

template<>
struct scapix::jni::object_traits<scapix::java_api::org::apache::http::protocol::BasicHttpProcessor>
{
	static constexpr fixed_string class_name = "org/apache/http/protocol/BasicHttpProcessor";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::org::apache::http::protocol::HttpProcessor, scapix::java_api::org::apache::http::protocol::HttpRequestInterceptorList, scapix::java_api::org::apache::http::protocol::HttpResponseInterceptorList, scapix::java_api::java::lang::Cloneable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR)
#define SCAPIX_JAVA_API_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/org/apache/http/HttpRequest.h>
#include <scapix/java_api/org/apache/http/HttpRequestInterceptor.h>
#include <scapix/java_api/org/apache/http/HttpResponse.h>
#include <scapix/java_api/org/apache/http/HttpResponseInterceptor.h>
#include <scapix/java_api/org/apache/http/protocol/HttpContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class org::apache::http::protocol::BasicHttpProcessor : public jni::object_base<"org/apache/http/protocol/BasicHttpProcessor",
	java::lang::Object,
	org::apache::http::protocol::HttpProcessor,
	org::apache::http::protocol::HttpRequestInterceptorList,
	org::apache::http::protocol::HttpResponseInterceptorList,
	java::lang::Cloneable>
{
public:

	static jni::ref<org::apache::http::protocol::BasicHttpProcessor> new_object() { return base_::new_object(); }
	void addRequestInterceptor(jni::ref<org::apache::http::HttpRequestInterceptor> itcp) { return call_method<"addRequestInterceptor", void>(itcp); }
	void addRequestInterceptor(jni::ref<org::apache::http::HttpRequestInterceptor> itcp, jint index) { return call_method<"addRequestInterceptor", void>(itcp, index); }
	void addResponseInterceptor(jni::ref<org::apache::http::HttpResponseInterceptor> itcp, jint index) { return call_method<"addResponseInterceptor", void>(itcp, index); }
	void removeRequestInterceptorByClass(jni::ref<java::lang::Class> clazz) { return call_method<"removeRequestInterceptorByClass", void>(clazz); }
	void removeResponseInterceptorByClass(jni::ref<java::lang::Class> clazz) { return call_method<"removeResponseInterceptorByClass", void>(clazz); }
	void addInterceptor(jni::ref<org::apache::http::HttpRequestInterceptor> interceptor) { return call_method<"addInterceptor", void>(interceptor); }
	void addInterceptor(jni::ref<org::apache::http::HttpRequestInterceptor> interceptor, jint index) { return call_method<"addInterceptor", void>(interceptor, index); }
	jint getRequestInterceptorCount() { return call_method<"getRequestInterceptorCount", jint>(); }
	jni::ref<org::apache::http::HttpRequestInterceptor> getRequestInterceptor(jint index) { return call_method<"getRequestInterceptor", jni::ref<org::apache::http::HttpRequestInterceptor>>(index); }
	void clearRequestInterceptors() { return call_method<"clearRequestInterceptors", void>(); }
	void addResponseInterceptor(jni::ref<org::apache::http::HttpResponseInterceptor> itcp) { return call_method<"addResponseInterceptor", void>(itcp); }
	void addInterceptor(jni::ref<org::apache::http::HttpResponseInterceptor> interceptor) { return call_method<"addInterceptor", void>(interceptor); }
	void addInterceptor(jni::ref<org::apache::http::HttpResponseInterceptor> interceptor, jint index) { return call_method<"addInterceptor", void>(interceptor, index); }
	jint getResponseInterceptorCount() { return call_method<"getResponseInterceptorCount", jint>(); }
	jni::ref<org::apache::http::HttpResponseInterceptor> getResponseInterceptor(jint index) { return call_method<"getResponseInterceptor", jni::ref<org::apache::http::HttpResponseInterceptor>>(index); }
	void clearResponseInterceptors() { return call_method<"clearResponseInterceptors", void>(); }
	void setInterceptors(jni::ref<java::util::List> list) { return call_method<"setInterceptors", void>(list); }
	void clearInterceptors() { return call_method<"clearInterceptors", void>(); }
	void process(jni::ref<org::apache::http::HttpRequest> request, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"process", void>(request, context); }
	void process(jni::ref<org::apache::http::HttpResponse> response, jni::ref<org::apache::http::protocol::HttpContext> context) { return call_method<"process", void>(response, context); }
	jni::ref<org::apache::http::protocol::BasicHttpProcessor> copy() { return call_method<"copy", jni::ref<org::apache::http::protocol::BasicHttpProcessor>>(); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }

protected:

	BasicHttpProcessor(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR
