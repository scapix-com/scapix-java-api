// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/net/ssl/SSLSocketFactory.h>

#ifndef SCAPIX_JAVA_API_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_FWD
#define SCAPIX_JAVA_API_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::net { class SSLCertificateSocketFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::net::SSLCertificateSocketFactory>
{
	static constexpr fixed_string class_name = "android/net/SSLCertificateSocketFactory";
	using base_classes = std::tuple<scapix::java_api::javax::net::ssl::SSLSocketFactory>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY)
#define SCAPIX_JAVA_API_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/net/SSLSessionCache.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/javax/net/SocketFactory.h>
#include <scapix/java_api/javax/net/ssl/KeyManager.h>
#include <scapix/java_api/javax/net/ssl/TrustManager.h>
#include <scapix/java_api/org/apache/http/conn/ssl/SSLSocketFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::net::SSLCertificateSocketFactory : public jni::object_base<"android/net/SSLCertificateSocketFactory",
	javax::net::ssl::SSLSocketFactory>
{
public:

	static jni::ref<android::net::SSLCertificateSocketFactory> new_object(jint handshakeTimeoutMillis) { return base_::new_object(handshakeTimeoutMillis); }
	static jni::ref<javax::net::SocketFactory> getDefault(jint handshakeTimeoutMillis) { return call_static_method<"getDefault", jni::ref<javax::net::SocketFactory>>(handshakeTimeoutMillis); }
	static jni::ref<javax::net::ssl::SSLSocketFactory> getDefault(jint handshakeTimeoutMillis, jni::ref<android::net::SSLSessionCache> cache) { return call_static_method<"getDefault", jni::ref<javax::net::ssl::SSLSocketFactory>>(handshakeTimeoutMillis, cache); }
	static jni::ref<javax::net::ssl::SSLSocketFactory> getInsecure(jint handshakeTimeoutMillis, jni::ref<android::net::SSLSessionCache> cache) { return call_static_method<"getInsecure", jni::ref<javax::net::ssl::SSLSocketFactory>>(handshakeTimeoutMillis, cache); }
	static jni::ref<org::apache::http::conn::ssl::SSLSocketFactory> getHttpSocketFactory(jint handshakeTimeoutMillis, jni::ref<android::net::SSLSessionCache> cache) { return call_static_method<"getHttpSocketFactory", jni::ref<org::apache::http::conn::ssl::SSLSocketFactory>>(handshakeTimeoutMillis, cache); }
	void setTrustManagers(jni::ref<jni::array<javax::net::ssl::TrustManager>> trustManager) { return call_method<"setTrustManagers", void>(trustManager); }
	void setNpnProtocols(jni::ref<jni::array<jni::array<jbyte>>> npnProtocols) { return call_method<"setNpnProtocols", void>(npnProtocols); }
	jni::ref<jni::array<jbyte>> getNpnSelectedProtocol(jni::ref<java::net::Socket> socket) { return call_method<"getNpnSelectedProtocol", jni::ref<jni::array<jbyte>>>(socket); }
	void setKeyManagers(jni::ref<jni::array<javax::net::ssl::KeyManager>> keyManagers) { return call_method<"setKeyManagers", void>(keyManagers); }
	void setUseSessionTickets(jni::ref<java::net::Socket> socket, jboolean useSessionTickets) { return call_method<"setUseSessionTickets", void>(socket, useSessionTickets); }
	void setHostname(jni::ref<java::net::Socket> socket, jni::ref<java::lang::String> hostName) { return call_method<"setHostname", void>(socket, hostName); }
	jni::ref<java::net::Socket> createSocket(jni::ref<java::net::Socket> k, jni::ref<java::lang::String> host, jint port, jboolean close) { return call_method<"createSocket", jni::ref<java::net::Socket>>(k, host, port, close); }
	jni::ref<java::net::Socket> createSocket() { return call_method<"createSocket", jni::ref<java::net::Socket>>(); }
	jni::ref<java::net::Socket> createSocket(jni::ref<java::net::InetAddress> addr, jint port, jni::ref<java::net::InetAddress> localAddr, jint localPort) { return call_method<"createSocket", jni::ref<java::net::Socket>>(addr, port, localAddr, localPort); }
	jni::ref<java::net::Socket> createSocket(jni::ref<java::net::InetAddress> addr, jint port) { return call_method<"createSocket", jni::ref<java::net::Socket>>(addr, port); }
	jni::ref<java::net::Socket> createSocket(jni::ref<java::lang::String> host, jint port, jni::ref<java::net::InetAddress> localAddr, jint localPort) { return call_method<"createSocket", jni::ref<java::net::Socket>>(host, port, localAddr, localPort); }
	jni::ref<java::net::Socket> createSocket(jni::ref<java::lang::String> host, jint port) { return call_method<"createSocket", jni::ref<java::net::Socket>>(host, port); }
	jni::ref<jni::array<java::lang::String>> getDefaultCipherSuites() { return call_method<"getDefaultCipherSuites", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getSupportedCipherSuites() { return call_method<"getSupportedCipherSuites", jni::ref<jni::array<java::lang::String>>>(); }

protected:

	SSLCertificateSocketFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_NET_SSLCERTIFICATESOCKETFACTORY
