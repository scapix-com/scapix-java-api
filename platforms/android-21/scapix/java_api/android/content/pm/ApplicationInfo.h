// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/content/pm/PackageItemInfo.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_PM_APPLICATIONINFO_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_APPLICATIONINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content::pm { class ApplicationInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::pm::ApplicationInfo>
{
	static constexpr fixed_string class_name = "android/content/pm/ApplicationInfo";
	using base_classes = std::tuple<scapix::java_api::android::content::pm::PackageItemInfo, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_APPLICATIONINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_PM_APPLICATIONINFO)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_PM_APPLICATIONINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/pm/PackageManager.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/android/util/Printer.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/content/pm/ApplicationInfo_DisplayNameComparator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::pm::ApplicationInfo : public jni::object_base<"android/content/pm/ApplicationInfo",
	android::content::pm::PackageItemInfo,
	android::os::Parcelable>
{
public:

	using DisplayNameComparator = ApplicationInfo_DisplayNameComparator;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jint FLAG_ALLOW_BACKUP() { return get_static_field<"FLAG_ALLOW_BACKUP", jint>(); }
	static jint FLAG_ALLOW_CLEAR_USER_DATA() { return get_static_field<"FLAG_ALLOW_CLEAR_USER_DATA", jint>(); }
	static jint FLAG_ALLOW_TASK_REPARENTING() { return get_static_field<"FLAG_ALLOW_TASK_REPARENTING", jint>(); }
	static jint FLAG_DEBUGGABLE() { return get_static_field<"FLAG_DEBUGGABLE", jint>(); }
	static jint FLAG_EXTERNAL_STORAGE() { return get_static_field<"FLAG_EXTERNAL_STORAGE", jint>(); }
	static jint FLAG_FACTORY_TEST() { return get_static_field<"FLAG_FACTORY_TEST", jint>(); }
	static jint FLAG_FULL_BACKUP_ONLY() { return get_static_field<"FLAG_FULL_BACKUP_ONLY", jint>(); }
	static jint FLAG_HAS_CODE() { return get_static_field<"FLAG_HAS_CODE", jint>(); }
	static jint FLAG_INSTALLED() { return get_static_field<"FLAG_INSTALLED", jint>(); }
	static jint FLAG_IS_DATA_ONLY() { return get_static_field<"FLAG_IS_DATA_ONLY", jint>(); }
	static jint FLAG_IS_GAME() { return get_static_field<"FLAG_IS_GAME", jint>(); }
	static jint FLAG_KILL_AFTER_RESTORE() { return get_static_field<"FLAG_KILL_AFTER_RESTORE", jint>(); }
	static jint FLAG_LARGE_HEAP() { return get_static_field<"FLAG_LARGE_HEAP", jint>(); }
	static jint FLAG_MULTIARCH() { return get_static_field<"FLAG_MULTIARCH", jint>(); }
	static jint FLAG_PERSISTENT() { return get_static_field<"FLAG_PERSISTENT", jint>(); }
	static jint FLAG_RESIZEABLE_FOR_SCREENS() { return get_static_field<"FLAG_RESIZEABLE_FOR_SCREENS", jint>(); }
	static jint FLAG_RESTORE_ANY_VERSION() { return get_static_field<"FLAG_RESTORE_ANY_VERSION", jint>(); }
	static jint FLAG_STOPPED() { return get_static_field<"FLAG_STOPPED", jint>(); }
	static jint FLAG_SUPPORTS_LARGE_SCREENS() { return get_static_field<"FLAG_SUPPORTS_LARGE_SCREENS", jint>(); }
	static jint FLAG_SUPPORTS_NORMAL_SCREENS() { return get_static_field<"FLAG_SUPPORTS_NORMAL_SCREENS", jint>(); }
	static jint FLAG_SUPPORTS_RTL() { return get_static_field<"FLAG_SUPPORTS_RTL", jint>(); }
	static jint FLAG_SUPPORTS_SCREEN_DENSITIES() { return get_static_field<"FLAG_SUPPORTS_SCREEN_DENSITIES", jint>(); }
	static jint FLAG_SUPPORTS_SMALL_SCREENS() { return get_static_field<"FLAG_SUPPORTS_SMALL_SCREENS", jint>(); }
	static jint FLAG_SUPPORTS_XLARGE_SCREENS() { return get_static_field<"FLAG_SUPPORTS_XLARGE_SCREENS", jint>(); }
	static jint FLAG_SYSTEM() { return get_static_field<"FLAG_SYSTEM", jint>(); }
	static jint FLAG_TEST_ONLY() { return get_static_field<"FLAG_TEST_ONLY", jint>(); }
	static jint FLAG_UPDATED_SYSTEM_APP() { return get_static_field<"FLAG_UPDATED_SYSTEM_APP", jint>(); }
	static jint FLAG_VM_SAFE_MODE() { return get_static_field<"FLAG_VM_SAFE_MODE", jint>(); }
	jni::ref<java::lang::String> backupAgentName() { return get_field<"backupAgentName", jni::ref<java::lang::String>>(); }
	void backupAgentName(jni::ref<java::lang::String> v) { set_field<"backupAgentName", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> className() { return get_field<"className", jni::ref<java::lang::String>>(); }
	void className(jni::ref<java::lang::String> v) { set_field<"className", jni::ref<java::lang::String>>(v); }
	jint compatibleWidthLimitDp() { return get_field<"compatibleWidthLimitDp", jint>(); }
	void compatibleWidthLimitDp(jint v) { set_field<"compatibleWidthLimitDp", jint>(v); }
	jni::ref<java::lang::String> dataDir() { return get_field<"dataDir", jni::ref<java::lang::String>>(); }
	void dataDir(jni::ref<java::lang::String> v) { set_field<"dataDir", jni::ref<java::lang::String>>(v); }
	jint descriptionRes() { return get_field<"descriptionRes", jint>(); }
	void descriptionRes(jint v) { set_field<"descriptionRes", jint>(v); }
	jboolean enabled() { return get_field<"enabled", jboolean>(); }
	void enabled(jboolean v) { set_field<"enabled", jboolean>(v); }
	jint flags() { return get_field<"flags", jint>(); }
	void flags(jint v) { set_field<"flags", jint>(v); }
	jint largestWidthLimitDp() { return get_field<"largestWidthLimitDp", jint>(); }
	void largestWidthLimitDp(jint v) { set_field<"largestWidthLimitDp", jint>(v); }
	jni::ref<java::lang::String> manageSpaceActivityName() { return get_field<"manageSpaceActivityName", jni::ref<java::lang::String>>(); }
	void manageSpaceActivityName(jni::ref<java::lang::String> v) { set_field<"manageSpaceActivityName", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> nativeLibraryDir() { return get_field<"nativeLibraryDir", jni::ref<java::lang::String>>(); }
	void nativeLibraryDir(jni::ref<java::lang::String> v) { set_field<"nativeLibraryDir", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> permission() { return get_field<"permission", jni::ref<java::lang::String>>(); }
	void permission(jni::ref<java::lang::String> v) { set_field<"permission", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> processName() { return get_field<"processName", jni::ref<java::lang::String>>(); }
	void processName(jni::ref<java::lang::String> v) { set_field<"processName", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> publicSourceDir() { return get_field<"publicSourceDir", jni::ref<java::lang::String>>(); }
	void publicSourceDir(jni::ref<java::lang::String> v) { set_field<"publicSourceDir", jni::ref<java::lang::String>>(v); }
	jint requiresSmallestWidthDp() { return get_field<"requiresSmallestWidthDp", jint>(); }
	void requiresSmallestWidthDp(jint v) { set_field<"requiresSmallestWidthDp", jint>(v); }
	jni::ref<jni::array<java::lang::String>> sharedLibraryFiles() { return get_field<"sharedLibraryFiles", jni::ref<jni::array<java::lang::String>>>(); }
	void sharedLibraryFiles(jni::ref<jni::array<java::lang::String>> v) { set_field<"sharedLibraryFiles", jni::ref<jni::array<java::lang::String>>>(v); }
	jni::ref<java::lang::String> sourceDir() { return get_field<"sourceDir", jni::ref<java::lang::String>>(); }
	void sourceDir(jni::ref<java::lang::String> v) { set_field<"sourceDir", jni::ref<java::lang::String>>(v); }
	jni::ref<jni::array<java::lang::String>> splitPublicSourceDirs() { return get_field<"splitPublicSourceDirs", jni::ref<jni::array<java::lang::String>>>(); }
	void splitPublicSourceDirs(jni::ref<jni::array<java::lang::String>> v) { set_field<"splitPublicSourceDirs", jni::ref<jni::array<java::lang::String>>>(v); }
	jni::ref<jni::array<java::lang::String>> splitSourceDirs() { return get_field<"splitSourceDirs", jni::ref<jni::array<java::lang::String>>>(); }
	void splitSourceDirs(jni::ref<jni::array<java::lang::String>> v) { set_field<"splitSourceDirs", jni::ref<jni::array<java::lang::String>>>(v); }
	jint targetSdkVersion() { return get_field<"targetSdkVersion", jint>(); }
	void targetSdkVersion(jint v) { set_field<"targetSdkVersion", jint>(v); }
	jni::ref<java::lang::String> taskAffinity() { return get_field<"taskAffinity", jni::ref<java::lang::String>>(); }
	void taskAffinity(jni::ref<java::lang::String> v) { set_field<"taskAffinity", jni::ref<java::lang::String>>(v); }
	jint theme() { return get_field<"theme", jint>(); }
	void theme(jint v) { set_field<"theme", jint>(v); }
	jint uiOptions() { return get_field<"uiOptions", jint>(); }
	void uiOptions(jint v) { set_field<"uiOptions", jint>(v); }
	jint uid() { return get_field<"uid", jint>(); }
	void uid(jint v) { set_field<"uid", jint>(v); }

	static jni::ref<android::content::pm::ApplicationInfo> new_object() { return base_::new_object(); }
	static jni::ref<android::content::pm::ApplicationInfo> new_object(jni::ref<android::content::pm::ApplicationInfo> orig) { return base_::new_object(orig); }
	void dump(jni::ref<android::util::Printer> pw, jni::ref<java::lang::String> prefix) { return call_method<"dump", void>(pw, prefix); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint parcelableFlags) { return call_method<"writeToParcel", void>(dest, parcelableFlags); }
	jni::ref<java::lang::CharSequence> loadDescription(jni::ref<android::content::pm::PackageManager> pm) { return call_method<"loadDescription", jni::ref<java::lang::CharSequence>>(pm); }

protected:

	ApplicationInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_PM_APPLICATIONINFO
