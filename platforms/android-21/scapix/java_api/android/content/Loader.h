// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_LOADER_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_LOADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class Loader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::Loader>
{
	static constexpr fixed_string class_name = "android/content/Loader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_LOADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_LOADER)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_LOADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Loader_OnLoadCanceledListener.h>
#include <scapix/java_api/android/content/Loader_OnLoadCompleteListener.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/content/Loader_ForceLoadContentObserver.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::Loader : public jni::object_base<"android/content/Loader",
	java::lang::Object>
{
public:

	using OnLoadCanceledListener = Loader_OnLoadCanceledListener;
	using OnLoadCompleteListener = Loader_OnLoadCompleteListener;
	using ForceLoadContentObserver = Loader_ForceLoadContentObserver;

	static jni::ref<android::content::Loader> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	void deliverResult(jni::ref<java::lang::Object> data) { return call_method<"deliverResult", void>(data); }
	void deliverCancellation() { return call_method<"deliverCancellation", void>(); }
	jni::ref<android::content::Context> getContext() { return call_method<"getContext", jni::ref<android::content::Context>>(); }
	jint getId() { return call_method<"getId", jint>(); }
	void registerListener(jint id, jni::ref<android::content::Loader_OnLoadCompleteListener> listener) { return call_method<"registerListener", void>(id, listener); }
	void unregisterListener(jni::ref<android::content::Loader_OnLoadCompleteListener> listener) { return call_method<"unregisterListener", void>(listener); }
	void registerOnLoadCanceledListener(jni::ref<android::content::Loader_OnLoadCanceledListener> listener) { return call_method<"registerOnLoadCanceledListener", void>(listener); }
	void unregisterOnLoadCanceledListener(jni::ref<android::content::Loader_OnLoadCanceledListener> listener) { return call_method<"unregisterOnLoadCanceledListener", void>(listener); }
	jboolean isStarted() { return call_method<"isStarted", jboolean>(); }
	jboolean isAbandoned() { return call_method<"isAbandoned", jboolean>(); }
	jboolean isReset() { return call_method<"isReset", jboolean>(); }
	void startLoading() { return call_method<"startLoading", void>(); }
	jboolean cancelLoad() { return call_method<"cancelLoad", jboolean>(); }
	void forceLoad() { return call_method<"forceLoad", void>(); }
	void stopLoading() { return call_method<"stopLoading", void>(); }
	void abandon() { return call_method<"abandon", void>(); }
	void reset() { return call_method<"reset", void>(); }
	jboolean takeContentChanged() { return call_method<"takeContentChanged", jboolean>(); }
	void commitContentChanged() { return call_method<"commitContentChanged", void>(); }
	void rollbackContentChanged() { return call_method<"rollbackContentChanged", void>(); }
	void onContentChanged() { return call_method<"onContentChanged", void>(); }
	jni::ref<java::lang::String> dataToString(jni::ref<java::lang::Object> data) { return call_method<"dataToString", jni::ref<java::lang::String>>(data); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void dump(jni::ref<java::lang::String> prefix, jni::ref<java::io::FileDescriptor> fd, jni::ref<java::io::PrintWriter> writer, jni::ref<jni::array<java::lang::String>> args) { return call_method<"dump", void>(prefix, fd, writer, args); }

protected:

	Loader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_LOADER
