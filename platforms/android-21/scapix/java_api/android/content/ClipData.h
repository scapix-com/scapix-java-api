// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDATA_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class ClipData; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::ClipData>
{
	static constexpr fixed_string class_name = "android/content/ClipData";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDATA)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ClipData_Item.h>
#include <scapix/java_api/android/content/ClipDescription.h>
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::ClipData : public jni::object_base<"android/content/ClipData",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	using Item = ClipData_Item;

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }

	static jni::ref<android::content::ClipData> new_object(jni::ref<java::lang::CharSequence> label, jni::ref<jni::array<java::lang::String>> mimeTypes, jni::ref<android::content::ClipData_Item> item) { return base_::new_object(label, mimeTypes, item); }
	static jni::ref<android::content::ClipData> new_object(jni::ref<android::content::ClipDescription> description, jni::ref<android::content::ClipData_Item> item) { return base_::new_object(description, item); }
	static jni::ref<android::content::ClipData> new_object(jni::ref<android::content::ClipData> other) { return base_::new_object(other); }
	static jni::ref<android::content::ClipData> newPlainText(jni::ref<java::lang::CharSequence> label, jni::ref<java::lang::CharSequence> text) { return call_static_method<"newPlainText", jni::ref<android::content::ClipData>>(label, text); }
	static jni::ref<android::content::ClipData> newHtmlText(jni::ref<java::lang::CharSequence> label, jni::ref<java::lang::CharSequence> text, jni::ref<java::lang::String> htmlText) { return call_static_method<"newHtmlText", jni::ref<android::content::ClipData>>(label, text, htmlText); }
	static jni::ref<android::content::ClipData> newIntent(jni::ref<java::lang::CharSequence> label, jni::ref<android::content::Intent> intent) { return call_static_method<"newIntent", jni::ref<android::content::ClipData>>(label, intent); }
	static jni::ref<android::content::ClipData> newUri(jni::ref<android::content::ContentResolver> resolver, jni::ref<java::lang::CharSequence> label, jni::ref<android::net::Uri> uri) { return call_static_method<"newUri", jni::ref<android::content::ClipData>>(resolver, label, uri); }
	static jni::ref<android::content::ClipData> newRawUri(jni::ref<java::lang::CharSequence> label, jni::ref<android::net::Uri> uri) { return call_static_method<"newRawUri", jni::ref<android::content::ClipData>>(label, uri); }
	jni::ref<android::content::ClipDescription> getDescription() { return call_method<"getDescription", jni::ref<android::content::ClipDescription>>(); }
	void addItem(jni::ref<android::content::ClipData_Item> item) { return call_method<"addItem", void>(item); }
	jint getItemCount() { return call_method<"getItemCount", jint>(); }
	jni::ref<android::content::ClipData_Item> getItemAt(jint index) { return call_method<"getItemAt", jni::ref<android::content::ClipData_Item>>(index); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	ClipData(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDATA
