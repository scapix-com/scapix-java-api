// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_SYNCSTATS_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_SYNCSTATS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class SyncStats; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::SyncStats>
{
	static constexpr fixed_string class_name = "android/content/SyncStats";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_SYNCSTATS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_SYNCSTATS)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_SYNCSTATS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::SyncStats : public jni::object_base<"android/content/SyncStats",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	jlong numAuthExceptions() { return get_field<"numAuthExceptions", jlong>(); }
	void numAuthExceptions(jlong v) { set_field<"numAuthExceptions", jlong>(v); }
	jlong numConflictDetectedExceptions() { return get_field<"numConflictDetectedExceptions", jlong>(); }
	void numConflictDetectedExceptions(jlong v) { set_field<"numConflictDetectedExceptions", jlong>(v); }
	jlong numDeletes() { return get_field<"numDeletes", jlong>(); }
	void numDeletes(jlong v) { set_field<"numDeletes", jlong>(v); }
	jlong numEntries() { return get_field<"numEntries", jlong>(); }
	void numEntries(jlong v) { set_field<"numEntries", jlong>(v); }
	jlong numInserts() { return get_field<"numInserts", jlong>(); }
	void numInserts(jlong v) { set_field<"numInserts", jlong>(v); }
	jlong numIoExceptions() { return get_field<"numIoExceptions", jlong>(); }
	void numIoExceptions(jlong v) { set_field<"numIoExceptions", jlong>(v); }
	jlong numParseExceptions() { return get_field<"numParseExceptions", jlong>(); }
	void numParseExceptions(jlong v) { set_field<"numParseExceptions", jlong>(v); }
	jlong numSkippedEntries() { return get_field<"numSkippedEntries", jlong>(); }
	void numSkippedEntries(jlong v) { set_field<"numSkippedEntries", jlong>(v); }
	jlong numUpdates() { return get_field<"numUpdates", jlong>(); }
	void numUpdates(jlong v) { set_field<"numUpdates", jlong>(v); }

	static jni::ref<android::content::SyncStats> new_object() { return base_::new_object(); }
	static jni::ref<android::content::SyncStats> new_object(jni::ref<android::os::Parcel> in) { return base_::new_object(in); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void clear() { return call_method<"clear", void>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	SyncStats(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_SYNCSTATS
