// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/TextView.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_EDITTEXT_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_EDITTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class EditText; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::EditText>
{
	static constexpr fixed_string class_name = "android/widget/EditText";
	using base_classes = std::tuple<scapix::java_api::android::widget::TextView>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_EDITTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_EDITTEXT)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_EDITTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/android/text/TextUtils_TruncateAt.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/widget/TextView_BufferType.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::EditText : public jni::object_base<"android/widget/EditText",
	android::widget::TextView>
{
public:

	static jni::ref<android::widget::EditText> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::EditText> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::EditText> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::widget::EditText> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jni::ref<android::text::Editable> getText() { return call_method<"getText", jni::ref<android::text::Editable>>(); }
	void setText(jni::ref<java::lang::CharSequence> text, jni::ref<android::widget::TextView_BufferType> type) { return call_method<"setText", void>(text, type); }
	void setSelection(jint start, jint stop) { return call_method<"setSelection", void>(start, stop); }
	void setSelection(jint index) { return call_method<"setSelection", void>(index); }
	void selectAll() { return call_method<"selectAll", void>(); }
	void extendSelection(jint index) { return call_method<"extendSelection", void>(index); }
	void setEllipsize(jni::ref<android::text::TextUtils_TruncateAt> ellipsis) { return call_method<"setEllipsize", void>(ellipsis); }
	void onInitializeAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onInitializeAccessibilityEvent", void>(event); }
	void onInitializeAccessibilityNodeInfo(jni::ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<"onInitializeAccessibilityNodeInfo", void>(info); }
	jboolean performAccessibilityAction(jint action, jni::ref<android::os::Bundle> arguments) { return call_method<"performAccessibilityAction", jboolean>(action, arguments); }

protected:

	EditText(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_EDITTEXT
