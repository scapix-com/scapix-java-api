// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/TextView.h>
#include <scapix/java_api/android/widget/Checkable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_CHECKEDTEXTVIEW_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_CHECKEDTEXTVIEW_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class CheckedTextView; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::CheckedTextView>
{
	static constexpr fixed_string class_name = "android/widget/CheckedTextView";
	using base_classes = std::tuple<scapix::java_api::android::widget::TextView, scapix::java_api::android::widget::Checkable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_CHECKEDTEXTVIEW_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_CHECKEDTEXTVIEW)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_CHECKEDTEXTVIEW

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::CheckedTextView : public jni::object_base<"android/widget/CheckedTextView",
	android::widget::TextView,
	android::widget::Checkable>
{
public:

	static jni::ref<android::widget::CheckedTextView> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::CheckedTextView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::CheckedTextView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::widget::CheckedTextView> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	void toggle() { return call_method<"toggle", void>(); }
	jboolean isChecked() { return call_method<"isChecked", jboolean>(); }
	void setChecked(jboolean checked) { return call_method<"setChecked", void>(checked); }
	void setCheckMarkDrawable(jint resid) { return call_method<"setCheckMarkDrawable", void>(resid); }
	void setCheckMarkDrawable(jni::ref<android::graphics::drawable::Drawable> d) { return call_method<"setCheckMarkDrawable", void>(d); }
	void setCheckMarkTintList(jni::ref<android::content::res::ColorStateList> tint) { return call_method<"setCheckMarkTintList", void>(tint); }
	jni::ref<android::content::res::ColorStateList> getCheckMarkTintList() { return call_method<"getCheckMarkTintList", jni::ref<android::content::res::ColorStateList>>(); }
	void setCheckMarkTintMode(jni::ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<"setCheckMarkTintMode", void>(tintMode); }
	jni::ref<android::graphics::PorterDuff_Mode> getCheckMarkTintMode() { return call_method<"getCheckMarkTintMode", jni::ref<android::graphics::PorterDuff_Mode>>(); }
	void setVisibility(jint visibility) { return call_method<"setVisibility", void>(visibility); }
	void jumpDrawablesToCurrentState() { return call_method<"jumpDrawablesToCurrentState", void>(); }
	jni::ref<android::graphics::drawable::Drawable> getCheckMarkDrawable() { return call_method<"getCheckMarkDrawable", jni::ref<android::graphics::drawable::Drawable>>(); }
	void onRtlPropertiesChanged(jint layoutDirection) { return call_method<"onRtlPropertiesChanged", void>(layoutDirection); }
	void drawableHotspotChanged(jfloat x, jfloat y) { return call_method<"drawableHotspotChanged", void>(x, y); }
	void onInitializeAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onInitializeAccessibilityEvent", void>(event); }
	void onInitializeAccessibilityNodeInfo(jni::ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<"onInitializeAccessibilityNodeInfo", void>(info); }

protected:

	CheckedTextView(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_CHECKEDTEXTVIEW
