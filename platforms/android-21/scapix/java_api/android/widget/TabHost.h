// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/FrameLayout.h>
#include <scapix/java_api/android/view/ViewTreeObserver_OnTouchModeChangeListener.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_TABHOST_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_TABHOST_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class TabHost; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::TabHost>
{
	static constexpr fixed_string class_name = "android/widget/TabHost";
	using base_classes = std::tuple<scapix::java_api::android::widget::FrameLayout, scapix::java_api::android::view::ViewTreeObserver_OnTouchModeChangeListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_TABHOST_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_TABHOST)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_TABHOST

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/LocalActivityManager.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/KeyEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityEvent.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/android/widget/TabHost_OnTabChangeListener.h>
#include <scapix/java_api/android/widget/TabHost_TabSpec.h>
#include <scapix/java_api/android/widget/TabWidget.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/widget/TabHost_TabContentFactory.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::TabHost : public jni::object_base<"android/widget/TabHost",
	android::widget::FrameLayout,
	android::view::ViewTreeObserver_OnTouchModeChangeListener>
{
public:

	using TabSpec = TabHost_TabSpec;
	using TabContentFactory = TabHost_TabContentFactory;
	using OnTabChangeListener = TabHost_OnTabChangeListener;

	static jni::ref<android::widget::TabHost> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::TabHost> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::TabHost> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::widget::TabHost> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	jni::ref<android::widget::TabHost_TabSpec> newTabSpec(jni::ref<java::lang::String> tag) { return call_method<"newTabSpec", jni::ref<android::widget::TabHost_TabSpec>>(tag); }
	void setup() { return call_method<"setup", void>(); }
	void sendAccessibilityEvent(jint eventType) { return call_method<"sendAccessibilityEvent", void>(eventType); }
	void setup(jni::ref<android::app::LocalActivityManager> activityGroup) { return call_method<"setup", void>(activityGroup); }
	void onTouchModeChanged(jboolean isInTouchMode) { return call_method<"onTouchModeChanged", void>(isInTouchMode); }
	void addTab(jni::ref<android::widget::TabHost_TabSpec> tabSpec) { return call_method<"addTab", void>(tabSpec); }
	void clearAllTabs() { return call_method<"clearAllTabs", void>(); }
	jni::ref<android::widget::TabWidget> getTabWidget() { return call_method<"getTabWidget", jni::ref<android::widget::TabWidget>>(); }
	jint getCurrentTab() { return call_method<"getCurrentTab", jint>(); }
	jni::ref<java::lang::String> getCurrentTabTag() { return call_method<"getCurrentTabTag", jni::ref<java::lang::String>>(); }
	jni::ref<android::view::View> getCurrentTabView() { return call_method<"getCurrentTabView", jni::ref<android::view::View>>(); }
	jni::ref<android::view::View> getCurrentView() { return call_method<"getCurrentView", jni::ref<android::view::View>>(); }
	void setCurrentTabByTag(jni::ref<java::lang::String> tag) { return call_method<"setCurrentTabByTag", void>(tag); }
	jni::ref<android::widget::FrameLayout> getTabContentView() { return call_method<"getTabContentView", jni::ref<android::widget::FrameLayout>>(); }
	jboolean dispatchKeyEvent(jni::ref<android::view::KeyEvent> event) { return call_method<"dispatchKeyEvent", jboolean>(event); }
	void dispatchWindowFocusChanged(jboolean hasFocus) { return call_method<"dispatchWindowFocusChanged", void>(hasFocus); }
	void onInitializeAccessibilityEvent(jni::ref<android::view::accessibility::AccessibilityEvent> event) { return call_method<"onInitializeAccessibilityEvent", void>(event); }
	void onInitializeAccessibilityNodeInfo(jni::ref<android::view::accessibility::AccessibilityNodeInfo> info) { return call_method<"onInitializeAccessibilityNodeInfo", void>(info); }
	void setCurrentTab(jint index) { return call_method<"setCurrentTab", void>(index); }
	void setOnTabChangedListener(jni::ref<android::widget::TabHost_OnTabChangeListener> l) { return call_method<"setOnTabChangedListener", void>(l); }

protected:

	TabHost(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_TABHOST
