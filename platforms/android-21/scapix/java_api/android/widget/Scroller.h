// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_SCROLLER_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_SCROLLER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class Scroller; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::Scroller>
{
	static constexpr fixed_string class_name = "android/widget/Scroller";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_SCROLLER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_SCROLLER)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_SCROLLER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/view/animation/Interpolator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::Scroller : public jni::object_base<"android/widget/Scroller",
	java::lang::Object>
{
public:

	static jni::ref<android::widget::Scroller> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::Scroller> new_object(jni::ref<android::content::Context> context, jni::ref<android::view::animation::Interpolator> interpolator) { return base_::new_object(context, interpolator); }
	static jni::ref<android::widget::Scroller> new_object(jni::ref<android::content::Context> context, jni::ref<android::view::animation::Interpolator> interpolator, jboolean flywheel) { return base_::new_object(context, interpolator, flywheel); }
	void setFriction(jfloat friction) { return call_method<"setFriction", void>(friction); }
	jboolean isFinished() { return call_method<"isFinished", jboolean>(); }
	void forceFinished(jboolean finished) { return call_method<"forceFinished", void>(finished); }
	jint getDuration() { return call_method<"getDuration", jint>(); }
	jint getCurrX() { return call_method<"getCurrX", jint>(); }
	jint getCurrY() { return call_method<"getCurrY", jint>(); }
	jfloat getCurrVelocity() { return call_method<"getCurrVelocity", jfloat>(); }
	jint getStartX() { return call_method<"getStartX", jint>(); }
	jint getStartY() { return call_method<"getStartY", jint>(); }
	jint getFinalX() { return call_method<"getFinalX", jint>(); }
	jint getFinalY() { return call_method<"getFinalY", jint>(); }
	jboolean computeScrollOffset() { return call_method<"computeScrollOffset", jboolean>(); }
	void startScroll(jint startX, jint startY, jint dx, jint dy) { return call_method<"startScroll", void>(startX, startY, dx, dy); }
	void startScroll(jint startX, jint startY, jint dx, jint dy, jint duration) { return call_method<"startScroll", void>(startX, startY, dx, dy, duration); }
	void fling(jint startX, jint startY, jint velocityX, jint velocityY, jint minX, jint maxX, jint minY, jint maxY) { return call_method<"fling", void>(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY); }
	void abortAnimation() { return call_method<"abortAnimation", void>(); }
	void extendDuration(jint extend) { return call_method<"extendDuration", void>(extend); }
	jint timePassed() { return call_method<"timePassed", jint>(); }
	void setFinalX(jint newX) { return call_method<"setFinalX", void>(newX); }
	void setFinalY(jint newY) { return call_method<"setFinalY", void>(newY); }

protected:

	Scroller(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_SCROLLER
