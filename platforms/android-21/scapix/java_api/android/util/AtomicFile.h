// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_UTIL_ATOMICFILE_FWD
#define SCAPIX_JAVA_API_ANDROID_UTIL_ATOMICFILE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::util { class AtomicFile; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::util::AtomicFile>
{
	static constexpr fixed_string class_name = "android/util/AtomicFile";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_ATOMICFILE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_UTIL_ATOMICFILE)
#define SCAPIX_JAVA_API_ANDROID_UTIL_ATOMICFILE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileInputStream.h>
#include <scapix/java_api/java/io/FileOutputStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::util::AtomicFile : public jni::object_base<"android/util/AtomicFile",
	java::lang::Object>
{
public:

	static jni::ref<android::util::AtomicFile> new_object(jni::ref<java::io::File> baseName) { return base_::new_object(baseName); }
	jni::ref<java::io::File> getBaseFile() { return call_method<"getBaseFile", jni::ref<java::io::File>>(); }
	void delete_() { return call_method<"delete", void>(); }
	jni::ref<java::io::FileOutputStream> startWrite() { return call_method<"startWrite", jni::ref<java::io::FileOutputStream>>(); }
	void finishWrite(jni::ref<java::io::FileOutputStream> str) { return call_method<"finishWrite", void>(str); }
	void failWrite(jni::ref<java::io::FileOutputStream> str) { return call_method<"failWrite", void>(str); }
	jni::ref<java::io::FileInputStream> openRead() { return call_method<"openRead", jni::ref<java::io::FileInputStream>>(); }
	jni::ref<jni::array<jbyte>> readFully() { return call_method<"readFully", jni::ref<jni::array<jbyte>>>(); }

protected:

	AtomicFile(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_UTIL_ATOMICFILE
