// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/hardware/SensorListener.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_ORIENTATIONLISTENER_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_ORIENTATIONLISTENER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view { class OrientationListener; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::OrientationListener>
{
	static constexpr fixed_string class_name = "android/view/OrientationListener";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::hardware::SensorListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ORIENTATIONLISTENER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_ORIENTATIONLISTENER)
#define SCAPIX_JAVA_API_ANDROID_VIEW_ORIENTATIONLISTENER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::OrientationListener : public jni::object_base<"android/view/OrientationListener",
	java::lang::Object,
	android::hardware::SensorListener>
{
public:

	static jint ORIENTATION_UNKNOWN() { return get_static_field<"ORIENTATION_UNKNOWN", jint>(); }

	static jni::ref<android::view::OrientationListener> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::view::OrientationListener> new_object(jni::ref<android::content::Context> context, jint rate) { return base_::new_object(context, rate); }
	void enable() { return call_method<"enable", void>(); }
	void disable() { return call_method<"disable", void>(); }
	void onAccuracyChanged(jint sensor, jint accuracy) { return call_method<"onAccuracyChanged", void>(sensor, accuracy); }
	void onSensorChanged(jint sensor, jni::ref<jni::array<jfloat>> values) { return call_method<"onSensorChanged", void>(sensor, values); }
	void onOrientationChanged(jint p1) { return call_method<"onOrientationChanged", void>(p1); }

protected:

	OrientationListener(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ORIENTATIONLISTENER
