// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class AudioRecord; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::AudioRecord>
{
	static constexpr fixed_string class_name = "android/media/AudioRecord";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/media/AudioRecord_OnRecordPositionUpdateListener.h>
#include <scapix/java_api/android/media/MediaSyncEvent.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::AudioRecord : public jni::object_base<"android/media/AudioRecord",
	java::lang::Object>
{
public:

	using OnRecordPositionUpdateListener = AudioRecord_OnRecordPositionUpdateListener;

	static jint ERROR() { return get_static_field<"ERROR", jint>(); }
	static jint ERROR_BAD_VALUE() { return get_static_field<"ERROR_BAD_VALUE", jint>(); }
	static jint ERROR_INVALID_OPERATION() { return get_static_field<"ERROR_INVALID_OPERATION", jint>(); }
	static jint RECORDSTATE_RECORDING() { return get_static_field<"RECORDSTATE_RECORDING", jint>(); }
	static jint RECORDSTATE_STOPPED() { return get_static_field<"RECORDSTATE_STOPPED", jint>(); }
	static jint STATE_INITIALIZED() { return get_static_field<"STATE_INITIALIZED", jint>(); }
	static jint STATE_UNINITIALIZED() { return get_static_field<"STATE_UNINITIALIZED", jint>(); }
	static jint SUCCESS() { return get_static_field<"SUCCESS", jint>(); }

	static jni::ref<android::media::AudioRecord> new_object(jint audioSource, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes) { return base_::new_object(audioSource, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes); }
	void release() { return call_method<"release", void>(); }
	jint getSampleRate() { return call_method<"getSampleRate", jint>(); }
	jint getAudioSource() { return call_method<"getAudioSource", jint>(); }
	jint getAudioFormat() { return call_method<"getAudioFormat", jint>(); }
	jint getChannelConfiguration() { return call_method<"getChannelConfiguration", jint>(); }
	jint getChannelCount() { return call_method<"getChannelCount", jint>(); }
	jint getState() { return call_method<"getState", jint>(); }
	jint getRecordingState() { return call_method<"getRecordingState", jint>(); }
	jint getNotificationMarkerPosition() { return call_method<"getNotificationMarkerPosition", jint>(); }
	jint getPositionNotificationPeriod() { return call_method<"getPositionNotificationPeriod", jint>(); }
	static jint getMinBufferSize(jint sampleRateInHz, jint channelConfig, jint audioFormat) { return call_static_method<"getMinBufferSize", jint>(sampleRateInHz, channelConfig, audioFormat); }
	jint getAudioSessionId() { return call_method<"getAudioSessionId", jint>(); }
	void startRecording() { return call_method<"startRecording", void>(); }
	void startRecording(jni::ref<android::media::MediaSyncEvent> syncEvent) { return call_method<"startRecording", void>(syncEvent); }
	void stop() { return call_method<"stop", void>(); }
	jint read(jni::ref<jni::array<jbyte>> audioData, jint offsetInBytes, jint sizeInBytes) { return call_method<"read", jint>(audioData, offsetInBytes, sizeInBytes); }
	jint read(jni::ref<jni::array<jshort>> audioData, jint offsetInShorts, jint sizeInShorts) { return call_method<"read", jint>(audioData, offsetInShorts, sizeInShorts); }
	jint read(jni::ref<java::nio::ByteBuffer> audioBuffer, jint sizeInBytes) { return call_method<"read", jint>(audioBuffer, sizeInBytes); }
	void setRecordPositionUpdateListener(jni::ref<android::media::AudioRecord_OnRecordPositionUpdateListener> listener) { return call_method<"setRecordPositionUpdateListener", void>(listener); }
	void setRecordPositionUpdateListener(jni::ref<android::media::AudioRecord_OnRecordPositionUpdateListener> listener, jni::ref<android::os::Handler> handler) { return call_method<"setRecordPositionUpdateListener", void>(listener, handler); }
	jint setNotificationMarkerPosition(jint markerInFrames) { return call_method<"setNotificationMarkerPosition", jint>(markerInFrames); }
	jint setPositionNotificationPeriod(jint periodInFrames) { return call_method<"setPositionNotificationPeriod", jint>(periodInFrames); }

protected:

	AudioRecord(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_AUDIORECORD
