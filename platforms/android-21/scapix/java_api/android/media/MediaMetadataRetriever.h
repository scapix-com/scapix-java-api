// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAMETADATARETRIEVER_FWD
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAMETADATARETRIEVER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::media { class MediaMetadataRetriever; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::media::MediaMetadataRetriever>
{
	static constexpr fixed_string class_name = "android/media/MediaMetadataRetriever";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAMETADATARETRIEVER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAMETADATARETRIEVER)
#define SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAMETADATARETRIEVER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::media::MediaMetadataRetriever : public jni::object_base<"android/media/MediaMetadataRetriever",
	java::lang::Object>
{
public:

	static jint METADATA_KEY_ALBUM() { return get_static_field<"METADATA_KEY_ALBUM", jint>(); }
	static jint METADATA_KEY_ALBUMARTIST() { return get_static_field<"METADATA_KEY_ALBUMARTIST", jint>(); }
	static jint METADATA_KEY_ARTIST() { return get_static_field<"METADATA_KEY_ARTIST", jint>(); }
	static jint METADATA_KEY_AUTHOR() { return get_static_field<"METADATA_KEY_AUTHOR", jint>(); }
	static jint METADATA_KEY_BITRATE() { return get_static_field<"METADATA_KEY_BITRATE", jint>(); }
	static jint METADATA_KEY_CD_TRACK_NUMBER() { return get_static_field<"METADATA_KEY_CD_TRACK_NUMBER", jint>(); }
	static jint METADATA_KEY_COMPILATION() { return get_static_field<"METADATA_KEY_COMPILATION", jint>(); }
	static jint METADATA_KEY_COMPOSER() { return get_static_field<"METADATA_KEY_COMPOSER", jint>(); }
	static jint METADATA_KEY_DATE() { return get_static_field<"METADATA_KEY_DATE", jint>(); }
	static jint METADATA_KEY_DISC_NUMBER() { return get_static_field<"METADATA_KEY_DISC_NUMBER", jint>(); }
	static jint METADATA_KEY_DURATION() { return get_static_field<"METADATA_KEY_DURATION", jint>(); }
	static jint METADATA_KEY_GENRE() { return get_static_field<"METADATA_KEY_GENRE", jint>(); }
	static jint METADATA_KEY_HAS_AUDIO() { return get_static_field<"METADATA_KEY_HAS_AUDIO", jint>(); }
	static jint METADATA_KEY_HAS_VIDEO() { return get_static_field<"METADATA_KEY_HAS_VIDEO", jint>(); }
	static jint METADATA_KEY_LOCATION() { return get_static_field<"METADATA_KEY_LOCATION", jint>(); }
	static jint METADATA_KEY_MIMETYPE() { return get_static_field<"METADATA_KEY_MIMETYPE", jint>(); }
	static jint METADATA_KEY_NUM_TRACKS() { return get_static_field<"METADATA_KEY_NUM_TRACKS", jint>(); }
	static jint METADATA_KEY_TITLE() { return get_static_field<"METADATA_KEY_TITLE", jint>(); }
	static jint METADATA_KEY_VIDEO_HEIGHT() { return get_static_field<"METADATA_KEY_VIDEO_HEIGHT", jint>(); }
	static jint METADATA_KEY_VIDEO_ROTATION() { return get_static_field<"METADATA_KEY_VIDEO_ROTATION", jint>(); }
	static jint METADATA_KEY_VIDEO_WIDTH() { return get_static_field<"METADATA_KEY_VIDEO_WIDTH", jint>(); }
	static jint METADATA_KEY_WRITER() { return get_static_field<"METADATA_KEY_WRITER", jint>(); }
	static jint METADATA_KEY_YEAR() { return get_static_field<"METADATA_KEY_YEAR", jint>(); }
	static jint OPTION_CLOSEST() { return get_static_field<"OPTION_CLOSEST", jint>(); }
	static jint OPTION_CLOSEST_SYNC() { return get_static_field<"OPTION_CLOSEST_SYNC", jint>(); }
	static jint OPTION_NEXT_SYNC() { return get_static_field<"OPTION_NEXT_SYNC", jint>(); }
	static jint OPTION_PREVIOUS_SYNC() { return get_static_field<"OPTION_PREVIOUS_SYNC", jint>(); }

	static jni::ref<android::media::MediaMetadataRetriever> new_object() { return base_::new_object(); }
	void setDataSource(jni::ref<java::lang::String> path) { return call_method<"setDataSource", void>(path); }
	void setDataSource(jni::ref<java::lang::String> uri, jni::ref<java::util::Map> headers) { return call_method<"setDataSource", void>(uri, headers); }
	void setDataSource(jni::ref<java::io::FileDescriptor> p1, jlong p2, jlong p3) { return call_method<"setDataSource", void>(p1, p2, p3); }
	void setDataSource(jni::ref<java::io::FileDescriptor> fd) { return call_method<"setDataSource", void>(fd); }
	void setDataSource(jni::ref<android::content::Context> context, jni::ref<android::net::Uri> uri) { return call_method<"setDataSource", void>(context, uri); }
	jni::ref<java::lang::String> extractMetadata(jint p1) { return call_method<"extractMetadata", jni::ref<java::lang::String>>(p1); }
	jni::ref<android::graphics::Bitmap> getFrameAtTime(jlong timeUs, jint p2) { return call_method<"getFrameAtTime", jni::ref<android::graphics::Bitmap>>(timeUs, p2); }
	jni::ref<android::graphics::Bitmap> getFrameAtTime(jlong timeUs) { return call_method<"getFrameAtTime", jni::ref<android::graphics::Bitmap>>(timeUs); }
	jni::ref<android::graphics::Bitmap> getFrameAtTime() { return call_method<"getFrameAtTime", jni::ref<android::graphics::Bitmap>>(); }
	jni::ref<jni::array<jbyte>> getEmbeddedPicture() { return call_method<"getEmbeddedPicture", jni::ref<jni::array<jbyte>>>(); }
	void release() { return call_method<"release", void>(); }

protected:

	MediaMetadataRetriever(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MEDIA_MEDIAMETADATARETRIEVER
