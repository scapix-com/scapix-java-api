// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_MTP_MTPDEVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_MTP_MTPDEVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::mtp { class MtpDevice; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::mtp::MtpDevice>
{
	static constexpr fixed_string class_name = "android/mtp/MtpDevice";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MTP_MTPDEVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_MTP_MTPDEVICE)
#define SCAPIX_JAVA_API_ANDROID_MTP_MTPDEVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/hardware/usb/UsbDevice.h>
#include <scapix/java_api/android/hardware/usb/UsbDeviceConnection.h>
#include <scapix/java_api/android/mtp/MtpDeviceInfo.h>
#include <scapix/java_api/android/mtp/MtpObjectInfo.h>
#include <scapix/java_api/android/mtp/MtpStorageInfo.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::mtp::MtpDevice : public jni::object_base<"android/mtp/MtpDevice",
	java::lang::Object>
{
public:

	static jni::ref<android::mtp::MtpDevice> new_object(jni::ref<android::hardware::usb::UsbDevice> device) { return base_::new_object(device); }
	jboolean open(jni::ref<android::hardware::usb::UsbDeviceConnection> connection) { return call_method<"open", jboolean>(connection); }
	void close() { return call_method<"close", void>(); }
	jni::ref<java::lang::String> getDeviceName() { return call_method<"getDeviceName", jni::ref<java::lang::String>>(); }
	jint getDeviceId() { return call_method<"getDeviceId", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<android::mtp::MtpDeviceInfo> getDeviceInfo() { return call_method<"getDeviceInfo", jni::ref<android::mtp::MtpDeviceInfo>>(); }
	jni::ref<jni::array<jint>> getStorageIds() { return call_method<"getStorageIds", jni::ref<jni::array<jint>>>(); }
	jni::ref<jni::array<jint>> getObjectHandles(jint storageId, jint format, jint objectHandle) { return call_method<"getObjectHandles", jni::ref<jni::array<jint>>>(storageId, format, objectHandle); }
	jni::ref<jni::array<jbyte>> getObject(jint objectHandle, jint objectSize) { return call_method<"getObject", jni::ref<jni::array<jbyte>>>(objectHandle, objectSize); }
	jni::ref<jni::array<jbyte>> getThumbnail(jint objectHandle) { return call_method<"getThumbnail", jni::ref<jni::array<jbyte>>>(objectHandle); }
	jni::ref<android::mtp::MtpStorageInfo> getStorageInfo(jint storageId) { return call_method<"getStorageInfo", jni::ref<android::mtp::MtpStorageInfo>>(storageId); }
	jni::ref<android::mtp::MtpObjectInfo> getObjectInfo(jint objectHandle) { return call_method<"getObjectInfo", jni::ref<android::mtp::MtpObjectInfo>>(objectHandle); }
	jboolean deleteObject(jint objectHandle) { return call_method<"deleteObject", jboolean>(objectHandle); }
	jlong getParent(jint objectHandle) { return call_method<"getParent", jlong>(objectHandle); }
	jlong getStorageId(jint objectHandle) { return call_method<"getStorageId", jlong>(objectHandle); }
	jboolean importFile(jint objectHandle, jni::ref<java::lang::String> destPath) { return call_method<"importFile", jboolean>(objectHandle, destPath); }

protected:

	MtpDevice(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_MTP_MTPDEVICE
