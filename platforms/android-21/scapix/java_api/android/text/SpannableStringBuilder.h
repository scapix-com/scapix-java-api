// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/android/text/GetChars.h>
#include <scapix/java_api/android/text/Spannable.h>
#include <scapix/java_api/android/text/Editable.h>
#include <scapix/java_api/java/lang/Appendable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGBUILDER_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class SpannableStringBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::SpannableStringBuilder>
{
	static constexpr fixed_string class_name = "android/text/SpannableStringBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::CharSequence, scapix::java_api::android::text::GetChars, scapix::java_api::android::text::Spannable, scapix::java_api::android::text::Editable, scapix::java_api::java::lang::Appendable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGBUILDER)
#define SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Paint.h>
#include <scapix/java_api/android/text/InputFilter.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::SpannableStringBuilder : public jni::object_base<"android/text/SpannableStringBuilder",
	java::lang::Object,
	java::lang::CharSequence,
	android::text::GetChars,
	android::text::Spannable,
	android::text::Editable,
	java::lang::Appendable>
{
public:

	static jni::ref<android::text::SpannableStringBuilder> new_object() { return base_::new_object(); }
	static jni::ref<android::text::SpannableStringBuilder> new_object(jni::ref<java::lang::CharSequence> text) { return base_::new_object(text); }
	static jni::ref<android::text::SpannableStringBuilder> new_object(jni::ref<java::lang::CharSequence> text, jint start, jint end) { return base_::new_object(text, start, end); }
	static jni::ref<android::text::SpannableStringBuilder> valueOf(jni::ref<java::lang::CharSequence> source) { return call_static_method<"valueOf", jni::ref<android::text::SpannableStringBuilder>>(source); }
	jchar charAt(jint where) { return call_method<"charAt", jchar>(where); }
	jint length() { return call_method<"length", jint>(); }
	jni::ref<android::text::SpannableStringBuilder> insert(jint where, jni::ref<java::lang::CharSequence> tb, jint start, jint end) { return call_method<"insert", jni::ref<android::text::SpannableStringBuilder>>(where, tb, start, end); }
	jni::ref<android::text::SpannableStringBuilder> insert(jint where, jni::ref<java::lang::CharSequence> tb) { return call_method<"insert", jni::ref<android::text::SpannableStringBuilder>>(where, tb); }
	jni::ref<android::text::SpannableStringBuilder> delete_(jint start, jint end) { return call_method<"delete", jni::ref<android::text::SpannableStringBuilder>>(start, end); }
	void clear() { return call_method<"clear", void>(); }
	void clearSpans() { return call_method<"clearSpans", void>(); }
	jni::ref<android::text::SpannableStringBuilder> append(jni::ref<java::lang::CharSequence> text) { return call_method<"append", jni::ref<android::text::SpannableStringBuilder>>(text); }
	jni::ref<android::text::SpannableStringBuilder> append(jni::ref<java::lang::CharSequence> text, jni::ref<java::lang::Object> what, jint flags) { return call_method<"append", jni::ref<android::text::SpannableStringBuilder>>(text, what, flags); }
	jni::ref<android::text::SpannableStringBuilder> append(jni::ref<java::lang::CharSequence> text, jint start, jint end) { return call_method<"append", jni::ref<android::text::SpannableStringBuilder>>(text, start, end); }
	jni::ref<android::text::SpannableStringBuilder> append(jchar text) { return call_method<"append", jni::ref<android::text::SpannableStringBuilder>>(text); }
	jni::ref<android::text::SpannableStringBuilder> replace(jint start, jint end, jni::ref<java::lang::CharSequence> tb) { return call_method<"replace", jni::ref<android::text::SpannableStringBuilder>>(start, end, tb); }
	jni::ref<android::text::SpannableStringBuilder> replace(jint start, jint end, jni::ref<java::lang::CharSequence> tb, jint tbstart, jint tbend) { return call_method<"replace", jni::ref<android::text::SpannableStringBuilder>>(start, end, tb, tbstart, tbend); }
	void setSpan(jni::ref<java::lang::Object> what, jint start, jint end, jint flags) { return call_method<"setSpan", void>(what, start, end, flags); }
	void removeSpan(jni::ref<java::lang::Object> what) { return call_method<"removeSpan", void>(what); }
	jint getSpanStart(jni::ref<java::lang::Object> what) { return call_method<"getSpanStart", jint>(what); }
	jint getSpanEnd(jni::ref<java::lang::Object> what) { return call_method<"getSpanEnd", jint>(what); }
	jint getSpanFlags(jni::ref<java::lang::Object> what) { return call_method<"getSpanFlags", jint>(what); }
	jni::ref<jni::array<java::lang::Object>> getSpans(jint queryStart, jint queryEnd, jni::ref<java::lang::Class> kind) { return call_method<"getSpans", jni::ref<jni::array<java::lang::Object>>>(queryStart, queryEnd, kind); }
	jint nextSpanTransition(jint start, jint limit, jni::ref<java::lang::Class> kind) { return call_method<"nextSpanTransition", jint>(start, limit, kind); }
	jni::ref<java::lang::CharSequence> subSequence(jint start, jint end) { return call_method<"subSequence", jni::ref<java::lang::CharSequence>>(start, end); }
	void getChars(jint start, jint end, jni::ref<jni::array<jchar>> dest, jint destoff) { return call_method<"getChars", void>(start, end, dest, destoff); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint getTextRunCursor(jint contextStart, jint contextEnd, jint dir, jint offset, jint cursorOpt, jni::ref<android::graphics::Paint> p) { return call_method<"getTextRunCursor", jint>(contextStart, contextEnd, dir, offset, cursorOpt, p); }
	void setFilters(jni::ref<jni::array<android::text::InputFilter>> filters) { return call_method<"setFilters", void>(filters); }
	jni::ref<jni::array<android::text::InputFilter>> getFilters() { return call_method<"getFilters", jni::ref<jni::array<android::text::InputFilter>>>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }

protected:

	SpannableStringBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_SPANNABLESTRINGBUILDER
