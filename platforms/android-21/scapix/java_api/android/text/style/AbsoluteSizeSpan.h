// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/text/style/MetricAffectingSpan.h>
#include <scapix/java_api/android/text/ParcelableSpan.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_STYLE_ABSOLUTESIZESPAN_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_STYLE_ABSOLUTESIZESPAN_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text::style { class AbsoluteSizeSpan; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::style::AbsoluteSizeSpan>
{
	static constexpr fixed_string class_name = "android/text/style/AbsoluteSizeSpan";
	using base_classes = std::tuple<scapix::java_api::android::text::style::MetricAffectingSpan, scapix::java_api::android::text::ParcelableSpan>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_STYLE_ABSOLUTESIZESPAN_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_STYLE_ABSOLUTESIZESPAN)
#define SCAPIX_JAVA_API_ANDROID_TEXT_STYLE_ABSOLUTESIZESPAN

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/text/TextPaint.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::style::AbsoluteSizeSpan : public jni::object_base<"android/text/style/AbsoluteSizeSpan",
	android::text::style::MetricAffectingSpan,
	android::text::ParcelableSpan>
{
public:

	static jni::ref<android::text::style::AbsoluteSizeSpan> new_object(jint size) { return base_::new_object(size); }
	static jni::ref<android::text::style::AbsoluteSizeSpan> new_object(jint size, jboolean dip) { return base_::new_object(size, dip); }
	static jni::ref<android::text::style::AbsoluteSizeSpan> new_object(jni::ref<android::os::Parcel> src) { return base_::new_object(src); }
	jint getSpanTypeId() { return call_method<"getSpanTypeId", jint>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }
	jint getSize() { return call_method<"getSize", jint>(); }
	jboolean getDip() { return call_method<"getDip", jboolean>(); }
	void updateDrawState(jni::ref<android::text::TextPaint> ds) { return call_method<"updateDrawState", void>(ds); }
	void updateMeasureState(jni::ref<android::text::TextPaint> ds) { return call_method<"updateMeasureState", void>(ds); }

protected:

	AbsoluteSizeSpan(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_STYLE_ABSOLUTESIZESPAN
