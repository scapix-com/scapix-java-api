// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/content/ContextWrapper.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_ISOLATEDCONTEXT_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_ISOLATEDCONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test { class IsolatedContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::IsolatedContext>
{
	static constexpr fixed_string class_name = "android/test/IsolatedContext";
	using base_classes = std::tuple<scapix::java_api::android::content::ContextWrapper>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_ISOLATEDCONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_ISOLATEDCONTEXT)
#define SCAPIX_JAVA_API_ANDROID_TEST_ISOLATEDCONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/BroadcastReceiver.h>
#include <scapix/java_api/android/content/ContentResolver.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/IntentFilter.h>
#include <scapix/java_api/android/content/ServiceConnection.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::IsolatedContext : public jni::object_base<"android/test/IsolatedContext",
	android::content::ContextWrapper>
{
public:

	static jni::ref<android::test::IsolatedContext> new_object(jni::ref<android::content::ContentResolver> resolver, jni::ref<android::content::Context> targetContext) { return base_::new_object(resolver, targetContext); }
	jni::ref<java::util::List> getAndClearBroadcastIntents() { return call_method<"getAndClearBroadcastIntents", jni::ref<java::util::List>>(); }
	jni::ref<android::content::ContentResolver> getContentResolver() { return call_method<"getContentResolver", jni::ref<android::content::ContentResolver>>(); }
	jboolean bindService(jni::ref<android::content::Intent> service, jni::ref<android::content::ServiceConnection> conn, jint flags) { return call_method<"bindService", jboolean>(service, conn, flags); }
	jni::ref<android::content::Intent> registerReceiver(jni::ref<android::content::BroadcastReceiver> receiver, jni::ref<android::content::IntentFilter> filter) { return call_method<"registerReceiver", jni::ref<android::content::Intent>>(receiver, filter); }
	void unregisterReceiver(jni::ref<android::content::BroadcastReceiver> receiver) { return call_method<"unregisterReceiver", void>(receiver); }
	void sendBroadcast(jni::ref<android::content::Intent> intent) { return call_method<"sendBroadcast", void>(intent); }
	void sendOrderedBroadcast(jni::ref<android::content::Intent> intent, jni::ref<java::lang::String> receiverPermission) { return call_method<"sendOrderedBroadcast", void>(intent, receiverPermission); }
	jint checkUriPermission(jni::ref<android::net::Uri> uri, jni::ref<java::lang::String> readPermission, jni::ref<java::lang::String> writePermission, jint pid, jint uid, jint modeFlags) { return call_method<"checkUriPermission", jint>(uri, readPermission, writePermission, pid, uid, modeFlags); }
	jint checkUriPermission(jni::ref<android::net::Uri> uri, jint pid, jint uid, jint modeFlags) { return call_method<"checkUriPermission", jint>(uri, pid, uid, modeFlags); }
	jni::ref<java::lang::Object> getSystemService(jni::ref<java::lang::String> name) { return call_method<"getSystemService", jni::ref<java::lang::Object>>(name); }
	jni::ref<java::io::File> getFilesDir() { return call_method<"getFilesDir", jni::ref<java::io::File>>(); }

protected:

	IsolatedContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_ISOLATEDCONTEXT
