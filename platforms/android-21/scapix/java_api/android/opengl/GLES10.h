// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OPENGL_GLES10_FWD
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLES10_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::opengl { class GLES10; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::opengl::GLES10>
{
	static constexpr fixed_string class_name = "android/opengl/GLES10";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLES10_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OPENGL_GLES10)
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLES10

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::opengl::GLES10 : public jni::object_base<"android/opengl/GLES10",
	java::lang::Object>
{
public:

	static jint GL_ADD() { return get_static_field<"GL_ADD", jint>(); }
	static jint GL_ALIASED_LINE_WIDTH_RANGE() { return get_static_field<"GL_ALIASED_LINE_WIDTH_RANGE", jint>(); }
	static jint GL_ALIASED_POINT_SIZE_RANGE() { return get_static_field<"GL_ALIASED_POINT_SIZE_RANGE", jint>(); }
	static jint GL_ALPHA() { return get_static_field<"GL_ALPHA", jint>(); }
	static jint GL_ALPHA_BITS() { return get_static_field<"GL_ALPHA_BITS", jint>(); }
	static jint GL_ALPHA_TEST() { return get_static_field<"GL_ALPHA_TEST", jint>(); }
	static jint GL_ALWAYS() { return get_static_field<"GL_ALWAYS", jint>(); }
	static jint GL_AMBIENT() { return get_static_field<"GL_AMBIENT", jint>(); }
	static jint GL_AMBIENT_AND_DIFFUSE() { return get_static_field<"GL_AMBIENT_AND_DIFFUSE", jint>(); }
	static jint GL_AND() { return get_static_field<"GL_AND", jint>(); }
	static jint GL_AND_INVERTED() { return get_static_field<"GL_AND_INVERTED", jint>(); }
	static jint GL_AND_REVERSE() { return get_static_field<"GL_AND_REVERSE", jint>(); }
	static jint GL_BACK() { return get_static_field<"GL_BACK", jint>(); }
	static jint GL_BLEND() { return get_static_field<"GL_BLEND", jint>(); }
	static jint GL_BLUE_BITS() { return get_static_field<"GL_BLUE_BITS", jint>(); }
	static jint GL_BYTE() { return get_static_field<"GL_BYTE", jint>(); }
	static jint GL_CCW() { return get_static_field<"GL_CCW", jint>(); }
	static jint GL_CLAMP_TO_EDGE() { return get_static_field<"GL_CLAMP_TO_EDGE", jint>(); }
	static jint GL_CLEAR() { return get_static_field<"GL_CLEAR", jint>(); }
	static jint GL_COLOR_ARRAY() { return get_static_field<"GL_COLOR_ARRAY", jint>(); }
	static jint GL_COLOR_BUFFER_BIT() { return get_static_field<"GL_COLOR_BUFFER_BIT", jint>(); }
	static jint GL_COLOR_LOGIC_OP() { return get_static_field<"GL_COLOR_LOGIC_OP", jint>(); }
	static jint GL_COLOR_MATERIAL() { return get_static_field<"GL_COLOR_MATERIAL", jint>(); }
	static jint GL_COMPRESSED_TEXTURE_FORMATS() { return get_static_field<"GL_COMPRESSED_TEXTURE_FORMATS", jint>(); }
	static jint GL_CONSTANT_ATTENUATION() { return get_static_field<"GL_CONSTANT_ATTENUATION", jint>(); }
	static jint GL_COPY() { return get_static_field<"GL_COPY", jint>(); }
	static jint GL_COPY_INVERTED() { return get_static_field<"GL_COPY_INVERTED", jint>(); }
	static jint GL_CULL_FACE() { return get_static_field<"GL_CULL_FACE", jint>(); }
	static jint GL_CW() { return get_static_field<"GL_CW", jint>(); }
	static jint GL_DECAL() { return get_static_field<"GL_DECAL", jint>(); }
	static jint GL_DECR() { return get_static_field<"GL_DECR", jint>(); }
	static jint GL_DEPTH_BITS() { return get_static_field<"GL_DEPTH_BITS", jint>(); }
	static jint GL_DEPTH_BUFFER_BIT() { return get_static_field<"GL_DEPTH_BUFFER_BIT", jint>(); }
	static jint GL_DEPTH_TEST() { return get_static_field<"GL_DEPTH_TEST", jint>(); }
	static jint GL_DIFFUSE() { return get_static_field<"GL_DIFFUSE", jint>(); }
	static jint GL_DITHER() { return get_static_field<"GL_DITHER", jint>(); }
	static jint GL_DONT_CARE() { return get_static_field<"GL_DONT_CARE", jint>(); }
	static jint GL_DST_ALPHA() { return get_static_field<"GL_DST_ALPHA", jint>(); }
	static jint GL_DST_COLOR() { return get_static_field<"GL_DST_COLOR", jint>(); }
	static jint GL_EMISSION() { return get_static_field<"GL_EMISSION", jint>(); }
	static jint GL_EQUAL() { return get_static_field<"GL_EQUAL", jint>(); }
	static jint GL_EQUIV() { return get_static_field<"GL_EQUIV", jint>(); }
	static jint GL_EXP() { return get_static_field<"GL_EXP", jint>(); }
	static jint GL_EXP2() { return get_static_field<"GL_EXP2", jint>(); }
	static jint GL_EXTENSIONS() { return get_static_field<"GL_EXTENSIONS", jint>(); }
	static jint GL_FALSE() { return get_static_field<"GL_FALSE", jint>(); }
	static jint GL_FASTEST() { return get_static_field<"GL_FASTEST", jint>(); }
	static jint GL_FIXED() { return get_static_field<"GL_FIXED", jint>(); }
	static jint GL_FLAT() { return get_static_field<"GL_FLAT", jint>(); }
	static jint GL_FLOAT() { return get_static_field<"GL_FLOAT", jint>(); }
	static jint GL_FOG() { return get_static_field<"GL_FOG", jint>(); }
	static jint GL_FOG_COLOR() { return get_static_field<"GL_FOG_COLOR", jint>(); }
	static jint GL_FOG_DENSITY() { return get_static_field<"GL_FOG_DENSITY", jint>(); }
	static jint GL_FOG_END() { return get_static_field<"GL_FOG_END", jint>(); }
	static jint GL_FOG_HINT() { return get_static_field<"GL_FOG_HINT", jint>(); }
	static jint GL_FOG_MODE() { return get_static_field<"GL_FOG_MODE", jint>(); }
	static jint GL_FOG_START() { return get_static_field<"GL_FOG_START", jint>(); }
	static jint GL_FRONT() { return get_static_field<"GL_FRONT", jint>(); }
	static jint GL_FRONT_AND_BACK() { return get_static_field<"GL_FRONT_AND_BACK", jint>(); }
	static jint GL_GEQUAL() { return get_static_field<"GL_GEQUAL", jint>(); }
	static jint GL_GREATER() { return get_static_field<"GL_GREATER", jint>(); }
	static jint GL_GREEN_BITS() { return get_static_field<"GL_GREEN_BITS", jint>(); }
	static jint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES() { return get_static_field<"GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES", jint>(); }
	static jint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES() { return get_static_field<"GL_IMPLEMENTATION_COLOR_READ_TYPE_OES", jint>(); }
	static jint GL_INCR() { return get_static_field<"GL_INCR", jint>(); }
	static jint GL_INVALID_ENUM() { return get_static_field<"GL_INVALID_ENUM", jint>(); }
	static jint GL_INVALID_OPERATION() { return get_static_field<"GL_INVALID_OPERATION", jint>(); }
	static jint GL_INVALID_VALUE() { return get_static_field<"GL_INVALID_VALUE", jint>(); }
	static jint GL_INVERT() { return get_static_field<"GL_INVERT", jint>(); }
	static jint GL_KEEP() { return get_static_field<"GL_KEEP", jint>(); }
	static jint GL_LEQUAL() { return get_static_field<"GL_LEQUAL", jint>(); }
	static jint GL_LESS() { return get_static_field<"GL_LESS", jint>(); }
	static jint GL_LIGHT0() { return get_static_field<"GL_LIGHT0", jint>(); }
	static jint GL_LIGHT1() { return get_static_field<"GL_LIGHT1", jint>(); }
	static jint GL_LIGHT2() { return get_static_field<"GL_LIGHT2", jint>(); }
	static jint GL_LIGHT3() { return get_static_field<"GL_LIGHT3", jint>(); }
	static jint GL_LIGHT4() { return get_static_field<"GL_LIGHT4", jint>(); }
	static jint GL_LIGHT5() { return get_static_field<"GL_LIGHT5", jint>(); }
	static jint GL_LIGHT6() { return get_static_field<"GL_LIGHT6", jint>(); }
	static jint GL_LIGHT7() { return get_static_field<"GL_LIGHT7", jint>(); }
	static jint GL_LIGHTING() { return get_static_field<"GL_LIGHTING", jint>(); }
	static jint GL_LIGHT_MODEL_AMBIENT() { return get_static_field<"GL_LIGHT_MODEL_AMBIENT", jint>(); }
	static jint GL_LIGHT_MODEL_TWO_SIDE() { return get_static_field<"GL_LIGHT_MODEL_TWO_SIDE", jint>(); }
	static jint GL_LINEAR() { return get_static_field<"GL_LINEAR", jint>(); }
	static jint GL_LINEAR_ATTENUATION() { return get_static_field<"GL_LINEAR_ATTENUATION", jint>(); }
	static jint GL_LINEAR_MIPMAP_LINEAR() { return get_static_field<"GL_LINEAR_MIPMAP_LINEAR", jint>(); }
	static jint GL_LINEAR_MIPMAP_NEAREST() { return get_static_field<"GL_LINEAR_MIPMAP_NEAREST", jint>(); }
	static jint GL_LINES() { return get_static_field<"GL_LINES", jint>(); }
	static jint GL_LINE_LOOP() { return get_static_field<"GL_LINE_LOOP", jint>(); }
	static jint GL_LINE_SMOOTH() { return get_static_field<"GL_LINE_SMOOTH", jint>(); }
	static jint GL_LINE_SMOOTH_HINT() { return get_static_field<"GL_LINE_SMOOTH_HINT", jint>(); }
	static jint GL_LINE_STRIP() { return get_static_field<"GL_LINE_STRIP", jint>(); }
	static jint GL_LUMINANCE() { return get_static_field<"GL_LUMINANCE", jint>(); }
	static jint GL_LUMINANCE_ALPHA() { return get_static_field<"GL_LUMINANCE_ALPHA", jint>(); }
	static jint GL_MAX_ELEMENTS_INDICES() { return get_static_field<"GL_MAX_ELEMENTS_INDICES", jint>(); }
	static jint GL_MAX_ELEMENTS_VERTICES() { return get_static_field<"GL_MAX_ELEMENTS_VERTICES", jint>(); }
	static jint GL_MAX_LIGHTS() { return get_static_field<"GL_MAX_LIGHTS", jint>(); }
	static jint GL_MAX_MODELVIEW_STACK_DEPTH() { return get_static_field<"GL_MAX_MODELVIEW_STACK_DEPTH", jint>(); }
	static jint GL_MAX_PROJECTION_STACK_DEPTH() { return get_static_field<"GL_MAX_PROJECTION_STACK_DEPTH", jint>(); }
	static jint GL_MAX_TEXTURE_SIZE() { return get_static_field<"GL_MAX_TEXTURE_SIZE", jint>(); }
	static jint GL_MAX_TEXTURE_STACK_DEPTH() { return get_static_field<"GL_MAX_TEXTURE_STACK_DEPTH", jint>(); }
	static jint GL_MAX_TEXTURE_UNITS() { return get_static_field<"GL_MAX_TEXTURE_UNITS", jint>(); }
	static jint GL_MAX_VIEWPORT_DIMS() { return get_static_field<"GL_MAX_VIEWPORT_DIMS", jint>(); }
	static jint GL_MODELVIEW() { return get_static_field<"GL_MODELVIEW", jint>(); }
	static jint GL_MODULATE() { return get_static_field<"GL_MODULATE", jint>(); }
	static jint GL_MULTISAMPLE() { return get_static_field<"GL_MULTISAMPLE", jint>(); }
	static jint GL_NAND() { return get_static_field<"GL_NAND", jint>(); }
	static jint GL_NEAREST() { return get_static_field<"GL_NEAREST", jint>(); }
	static jint GL_NEAREST_MIPMAP_LINEAR() { return get_static_field<"GL_NEAREST_MIPMAP_LINEAR", jint>(); }
	static jint GL_NEAREST_MIPMAP_NEAREST() { return get_static_field<"GL_NEAREST_MIPMAP_NEAREST", jint>(); }
	static jint GL_NEVER() { return get_static_field<"GL_NEVER", jint>(); }
	static jint GL_NICEST() { return get_static_field<"GL_NICEST", jint>(); }
	static jint GL_NOOP() { return get_static_field<"GL_NOOP", jint>(); }
	static jint GL_NOR() { return get_static_field<"GL_NOR", jint>(); }
	static jint GL_NORMALIZE() { return get_static_field<"GL_NORMALIZE", jint>(); }
	static jint GL_NORMAL_ARRAY() { return get_static_field<"GL_NORMAL_ARRAY", jint>(); }
	static jint GL_NOTEQUAL() { return get_static_field<"GL_NOTEQUAL", jint>(); }
	static jint GL_NO_ERROR() { return get_static_field<"GL_NO_ERROR", jint>(); }
	static jint GL_NUM_COMPRESSED_TEXTURE_FORMATS() { return get_static_field<"GL_NUM_COMPRESSED_TEXTURE_FORMATS", jint>(); }
	static jint GL_ONE() { return get_static_field<"GL_ONE", jint>(); }
	static jint GL_ONE_MINUS_DST_ALPHA() { return get_static_field<"GL_ONE_MINUS_DST_ALPHA", jint>(); }
	static jint GL_ONE_MINUS_DST_COLOR() { return get_static_field<"GL_ONE_MINUS_DST_COLOR", jint>(); }
	static jint GL_ONE_MINUS_SRC_ALPHA() { return get_static_field<"GL_ONE_MINUS_SRC_ALPHA", jint>(); }
	static jint GL_ONE_MINUS_SRC_COLOR() { return get_static_field<"GL_ONE_MINUS_SRC_COLOR", jint>(); }
	static jint GL_OR() { return get_static_field<"GL_OR", jint>(); }
	static jint GL_OR_INVERTED() { return get_static_field<"GL_OR_INVERTED", jint>(); }
	static jint GL_OR_REVERSE() { return get_static_field<"GL_OR_REVERSE", jint>(); }
	static jint GL_OUT_OF_MEMORY() { return get_static_field<"GL_OUT_OF_MEMORY", jint>(); }
	static jint GL_PACK_ALIGNMENT() { return get_static_field<"GL_PACK_ALIGNMENT", jint>(); }
	static jint GL_PALETTE4_R5_G6_B5_OES() { return get_static_field<"GL_PALETTE4_R5_G6_B5_OES", jint>(); }
	static jint GL_PALETTE4_RGB5_A1_OES() { return get_static_field<"GL_PALETTE4_RGB5_A1_OES", jint>(); }
	static jint GL_PALETTE4_RGB8_OES() { return get_static_field<"GL_PALETTE4_RGB8_OES", jint>(); }
	static jint GL_PALETTE4_RGBA4_OES() { return get_static_field<"GL_PALETTE4_RGBA4_OES", jint>(); }
	static jint GL_PALETTE4_RGBA8_OES() { return get_static_field<"GL_PALETTE4_RGBA8_OES", jint>(); }
	static jint GL_PALETTE8_R5_G6_B5_OES() { return get_static_field<"GL_PALETTE8_R5_G6_B5_OES", jint>(); }
	static jint GL_PALETTE8_RGB5_A1_OES() { return get_static_field<"GL_PALETTE8_RGB5_A1_OES", jint>(); }
	static jint GL_PALETTE8_RGB8_OES() { return get_static_field<"GL_PALETTE8_RGB8_OES", jint>(); }
	static jint GL_PALETTE8_RGBA4_OES() { return get_static_field<"GL_PALETTE8_RGBA4_OES", jint>(); }
	static jint GL_PALETTE8_RGBA8_OES() { return get_static_field<"GL_PALETTE8_RGBA8_OES", jint>(); }
	static jint GL_PERSPECTIVE_CORRECTION_HINT() { return get_static_field<"GL_PERSPECTIVE_CORRECTION_HINT", jint>(); }
	static jint GL_POINTS() { return get_static_field<"GL_POINTS", jint>(); }
	static jint GL_POINT_FADE_THRESHOLD_SIZE() { return get_static_field<"GL_POINT_FADE_THRESHOLD_SIZE", jint>(); }
	static jint GL_POINT_SIZE() { return get_static_field<"GL_POINT_SIZE", jint>(); }
	static jint GL_POINT_SMOOTH() { return get_static_field<"GL_POINT_SMOOTH", jint>(); }
	static jint GL_POINT_SMOOTH_HINT() { return get_static_field<"GL_POINT_SMOOTH_HINT", jint>(); }
	static jint GL_POLYGON_OFFSET_FILL() { return get_static_field<"GL_POLYGON_OFFSET_FILL", jint>(); }
	static jint GL_POLYGON_SMOOTH_HINT() { return get_static_field<"GL_POLYGON_SMOOTH_HINT", jint>(); }
	static jint GL_POSITION() { return get_static_field<"GL_POSITION", jint>(); }
	static jint GL_PROJECTION() { return get_static_field<"GL_PROJECTION", jint>(); }
	static jint GL_QUADRATIC_ATTENUATION() { return get_static_field<"GL_QUADRATIC_ATTENUATION", jint>(); }
	static jint GL_RED_BITS() { return get_static_field<"GL_RED_BITS", jint>(); }
	static jint GL_RENDERER() { return get_static_field<"GL_RENDERER", jint>(); }
	static jint GL_REPEAT() { return get_static_field<"GL_REPEAT", jint>(); }
	static jint GL_REPLACE() { return get_static_field<"GL_REPLACE", jint>(); }
	static jint GL_RESCALE_NORMAL() { return get_static_field<"GL_RESCALE_NORMAL", jint>(); }
	static jint GL_RGB() { return get_static_field<"GL_RGB", jint>(); }
	static jint GL_RGBA() { return get_static_field<"GL_RGBA", jint>(); }
	static jint GL_SAMPLE_ALPHA_TO_COVERAGE() { return get_static_field<"GL_SAMPLE_ALPHA_TO_COVERAGE", jint>(); }
	static jint GL_SAMPLE_ALPHA_TO_ONE() { return get_static_field<"GL_SAMPLE_ALPHA_TO_ONE", jint>(); }
	static jint GL_SAMPLE_COVERAGE() { return get_static_field<"GL_SAMPLE_COVERAGE", jint>(); }
	static jint GL_SCISSOR_TEST() { return get_static_field<"GL_SCISSOR_TEST", jint>(); }
	static jint GL_SET() { return get_static_field<"GL_SET", jint>(); }
	static jint GL_SHININESS() { return get_static_field<"GL_SHININESS", jint>(); }
	static jint GL_SHORT() { return get_static_field<"GL_SHORT", jint>(); }
	static jint GL_SMOOTH() { return get_static_field<"GL_SMOOTH", jint>(); }
	static jint GL_SMOOTH_LINE_WIDTH_RANGE() { return get_static_field<"GL_SMOOTH_LINE_WIDTH_RANGE", jint>(); }
	static jint GL_SMOOTH_POINT_SIZE_RANGE() { return get_static_field<"GL_SMOOTH_POINT_SIZE_RANGE", jint>(); }
	static jint GL_SPECULAR() { return get_static_field<"GL_SPECULAR", jint>(); }
	static jint GL_SPOT_CUTOFF() { return get_static_field<"GL_SPOT_CUTOFF", jint>(); }
	static jint GL_SPOT_DIRECTION() { return get_static_field<"GL_SPOT_DIRECTION", jint>(); }
	static jint GL_SPOT_EXPONENT() { return get_static_field<"GL_SPOT_EXPONENT", jint>(); }
	static jint GL_SRC_ALPHA() { return get_static_field<"GL_SRC_ALPHA", jint>(); }
	static jint GL_SRC_ALPHA_SATURATE() { return get_static_field<"GL_SRC_ALPHA_SATURATE", jint>(); }
	static jint GL_SRC_COLOR() { return get_static_field<"GL_SRC_COLOR", jint>(); }
	static jint GL_STACK_OVERFLOW() { return get_static_field<"GL_STACK_OVERFLOW", jint>(); }
	static jint GL_STACK_UNDERFLOW() { return get_static_field<"GL_STACK_UNDERFLOW", jint>(); }
	static jint GL_STENCIL_BITS() { return get_static_field<"GL_STENCIL_BITS", jint>(); }
	static jint GL_STENCIL_BUFFER_BIT() { return get_static_field<"GL_STENCIL_BUFFER_BIT", jint>(); }
	static jint GL_STENCIL_TEST() { return get_static_field<"GL_STENCIL_TEST", jint>(); }
	static jint GL_SUBPIXEL_BITS() { return get_static_field<"GL_SUBPIXEL_BITS", jint>(); }
	static jint GL_TEXTURE() { return get_static_field<"GL_TEXTURE", jint>(); }
	static jint GL_TEXTURE0() { return get_static_field<"GL_TEXTURE0", jint>(); }
	static jint GL_TEXTURE1() { return get_static_field<"GL_TEXTURE1", jint>(); }
	static jint GL_TEXTURE10() { return get_static_field<"GL_TEXTURE10", jint>(); }
	static jint GL_TEXTURE11() { return get_static_field<"GL_TEXTURE11", jint>(); }
	static jint GL_TEXTURE12() { return get_static_field<"GL_TEXTURE12", jint>(); }
	static jint GL_TEXTURE13() { return get_static_field<"GL_TEXTURE13", jint>(); }
	static jint GL_TEXTURE14() { return get_static_field<"GL_TEXTURE14", jint>(); }
	static jint GL_TEXTURE15() { return get_static_field<"GL_TEXTURE15", jint>(); }
	static jint GL_TEXTURE16() { return get_static_field<"GL_TEXTURE16", jint>(); }
	static jint GL_TEXTURE17() { return get_static_field<"GL_TEXTURE17", jint>(); }
	static jint GL_TEXTURE18() { return get_static_field<"GL_TEXTURE18", jint>(); }
	static jint GL_TEXTURE19() { return get_static_field<"GL_TEXTURE19", jint>(); }
	static jint GL_TEXTURE2() { return get_static_field<"GL_TEXTURE2", jint>(); }
	static jint GL_TEXTURE20() { return get_static_field<"GL_TEXTURE20", jint>(); }
	static jint GL_TEXTURE21() { return get_static_field<"GL_TEXTURE21", jint>(); }
	static jint GL_TEXTURE22() { return get_static_field<"GL_TEXTURE22", jint>(); }
	static jint GL_TEXTURE23() { return get_static_field<"GL_TEXTURE23", jint>(); }
	static jint GL_TEXTURE24() { return get_static_field<"GL_TEXTURE24", jint>(); }
	static jint GL_TEXTURE25() { return get_static_field<"GL_TEXTURE25", jint>(); }
	static jint GL_TEXTURE26() { return get_static_field<"GL_TEXTURE26", jint>(); }
	static jint GL_TEXTURE27() { return get_static_field<"GL_TEXTURE27", jint>(); }
	static jint GL_TEXTURE28() { return get_static_field<"GL_TEXTURE28", jint>(); }
	static jint GL_TEXTURE29() { return get_static_field<"GL_TEXTURE29", jint>(); }
	static jint GL_TEXTURE3() { return get_static_field<"GL_TEXTURE3", jint>(); }
	static jint GL_TEXTURE30() { return get_static_field<"GL_TEXTURE30", jint>(); }
	static jint GL_TEXTURE31() { return get_static_field<"GL_TEXTURE31", jint>(); }
	static jint GL_TEXTURE4() { return get_static_field<"GL_TEXTURE4", jint>(); }
	static jint GL_TEXTURE5() { return get_static_field<"GL_TEXTURE5", jint>(); }
	static jint GL_TEXTURE6() { return get_static_field<"GL_TEXTURE6", jint>(); }
	static jint GL_TEXTURE7() { return get_static_field<"GL_TEXTURE7", jint>(); }
	static jint GL_TEXTURE8() { return get_static_field<"GL_TEXTURE8", jint>(); }
	static jint GL_TEXTURE9() { return get_static_field<"GL_TEXTURE9", jint>(); }
	static jint GL_TEXTURE_2D() { return get_static_field<"GL_TEXTURE_2D", jint>(); }
	static jint GL_TEXTURE_COORD_ARRAY() { return get_static_field<"GL_TEXTURE_COORD_ARRAY", jint>(); }
	static jint GL_TEXTURE_ENV() { return get_static_field<"GL_TEXTURE_ENV", jint>(); }
	static jint GL_TEXTURE_ENV_COLOR() { return get_static_field<"GL_TEXTURE_ENV_COLOR", jint>(); }
	static jint GL_TEXTURE_ENV_MODE() { return get_static_field<"GL_TEXTURE_ENV_MODE", jint>(); }
	static jint GL_TEXTURE_MAG_FILTER() { return get_static_field<"GL_TEXTURE_MAG_FILTER", jint>(); }
	static jint GL_TEXTURE_MIN_FILTER() { return get_static_field<"GL_TEXTURE_MIN_FILTER", jint>(); }
	static jint GL_TEXTURE_WRAP_S() { return get_static_field<"GL_TEXTURE_WRAP_S", jint>(); }
	static jint GL_TEXTURE_WRAP_T() { return get_static_field<"GL_TEXTURE_WRAP_T", jint>(); }
	static jint GL_TRIANGLES() { return get_static_field<"GL_TRIANGLES", jint>(); }
	static jint GL_TRIANGLE_FAN() { return get_static_field<"GL_TRIANGLE_FAN", jint>(); }
	static jint GL_TRIANGLE_STRIP() { return get_static_field<"GL_TRIANGLE_STRIP", jint>(); }
	static jint GL_TRUE() { return get_static_field<"GL_TRUE", jint>(); }
	static jint GL_UNPACK_ALIGNMENT() { return get_static_field<"GL_UNPACK_ALIGNMENT", jint>(); }
	static jint GL_UNSIGNED_BYTE() { return get_static_field<"GL_UNSIGNED_BYTE", jint>(); }
	static jint GL_UNSIGNED_SHORT() { return get_static_field<"GL_UNSIGNED_SHORT", jint>(); }
	static jint GL_UNSIGNED_SHORT_4_4_4_4() { return get_static_field<"GL_UNSIGNED_SHORT_4_4_4_4", jint>(); }
	static jint GL_UNSIGNED_SHORT_5_5_5_1() { return get_static_field<"GL_UNSIGNED_SHORT_5_5_5_1", jint>(); }
	static jint GL_UNSIGNED_SHORT_5_6_5() { return get_static_field<"GL_UNSIGNED_SHORT_5_6_5", jint>(); }
	static jint GL_VENDOR() { return get_static_field<"GL_VENDOR", jint>(); }
	static jint GL_VERSION() { return get_static_field<"GL_VERSION", jint>(); }
	static jint GL_VERTEX_ARRAY() { return get_static_field<"GL_VERTEX_ARRAY", jint>(); }
	static jint GL_XOR() { return get_static_field<"GL_XOR", jint>(); }
	static jint GL_ZERO() { return get_static_field<"GL_ZERO", jint>(); }

	static jni::ref<android::opengl::GLES10> new_object() { return base_::new_object(); }
	static void glActiveTexture(jint p1) { return call_static_method<"glActiveTexture", void>(p1); }
	static void glAlphaFunc(jint p1, jfloat p2) { return call_static_method<"glAlphaFunc", void>(p1, p2); }
	static void glAlphaFuncx(jint p1, jint p2) { return call_static_method<"glAlphaFuncx", void>(p1, p2); }
	static void glBindTexture(jint p1, jint p2) { return call_static_method<"glBindTexture", void>(p1, p2); }
	static void glBlendFunc(jint p1, jint p2) { return call_static_method<"glBlendFunc", void>(p1, p2); }
	static void glClear(jint p1) { return call_static_method<"glClear", void>(p1); }
	static void glClearColor(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_static_method<"glClearColor", void>(p1, p2, p3, p4); }
	static void glClearColorx(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glClearColorx", void>(p1, p2, p3, p4); }
	static void glClearDepthf(jfloat p1) { return call_static_method<"glClearDepthf", void>(p1); }
	static void glClearDepthx(jint p1) { return call_static_method<"glClearDepthx", void>(p1); }
	static void glClearStencil(jint p1) { return call_static_method<"glClearStencil", void>(p1); }
	static void glClientActiveTexture(jint p1) { return call_static_method<"glClientActiveTexture", void>(p1); }
	static void glColor4f(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_static_method<"glColor4f", void>(p1, p2, p3, p4); }
	static void glColor4x(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glColor4x", void>(p1, p2, p3, p4); }
	static void glColorMask(jboolean p1, jboolean p2, jboolean p3, jboolean p4) { return call_static_method<"glColorMask", void>(p1, p2, p3, p4); }
	static void glColorPointer(jint size, jint type, jint stride, jni::ref<java::nio::Buffer> pointer) { return call_static_method<"glColorPointer", void>(size, type, stride, pointer); }
	static void glCompressedTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jni::ref<java::nio::Buffer> p8) { return call_static_method<"glCompressedTexImage2D", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static void glCompressedTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jni::ref<java::nio::Buffer> p9) { return call_static_method<"glCompressedTexSubImage2D", void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
	static void glCopyTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8) { return call_static_method<"glCopyTexImage2D", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static void glCopyTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8) { return call_static_method<"glCopyTexSubImage2D", void>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static void glCullFace(jint p1) { return call_static_method<"glCullFace", void>(p1); }
	static void glDeleteTextures(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glDeleteTextures", void>(p1, p2, p3); }
	static void glDeleteTextures(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glDeleteTextures", void>(p1, p2); }
	static void glDepthFunc(jint p1) { return call_static_method<"glDepthFunc", void>(p1); }
	static void glDepthMask(jboolean p1) { return call_static_method<"glDepthMask", void>(p1); }
	static void glDepthRangef(jfloat p1, jfloat p2) { return call_static_method<"glDepthRangef", void>(p1, p2); }
	static void glDepthRangex(jint p1, jint p2) { return call_static_method<"glDepthRangex", void>(p1, p2); }
	static void glDisable(jint p1) { return call_static_method<"glDisable", void>(p1); }
	static void glDisableClientState(jint p1) { return call_static_method<"glDisableClientState", void>(p1); }
	static void glDrawArrays(jint p1, jint p2, jint p3) { return call_static_method<"glDrawArrays", void>(p1, p2, p3); }
	static void glDrawElements(jint p1, jint p2, jint p3, jni::ref<java::nio::Buffer> p4) { return call_static_method<"glDrawElements", void>(p1, p2, p3, p4); }
	static void glEnable(jint p1) { return call_static_method<"glEnable", void>(p1); }
	static void glEnableClientState(jint p1) { return call_static_method<"glEnableClientState", void>(p1); }
	static void glFinish() { return call_static_method<"glFinish", void>(); }
	static void glFlush() { return call_static_method<"glFlush", void>(); }
	static void glFogf(jint p1, jfloat p2) { return call_static_method<"glFogf", void>(p1, p2); }
	static void glFogfv(jint p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_static_method<"glFogfv", void>(p1, p2, p3); }
	static void glFogfv(jint p1, jni::ref<java::nio::FloatBuffer> p2) { return call_static_method<"glFogfv", void>(p1, p2); }
	static void glFogx(jint p1, jint p2) { return call_static_method<"glFogx", void>(p1, p2); }
	static void glFogxv(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glFogxv", void>(p1, p2, p3); }
	static void glFogxv(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glFogxv", void>(p1, p2); }
	static void glFrontFace(jint p1) { return call_static_method<"glFrontFace", void>(p1); }
	static void glFrustumf(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_static_method<"glFrustumf", void>(p1, p2, p3, p4, p5, p6); }
	static void glFrustumx(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_static_method<"glFrustumx", void>(p1, p2, p3, p4, p5, p6); }
	static void glGenTextures(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glGenTextures", void>(p1, p2, p3); }
	static void glGenTextures(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glGenTextures", void>(p1, p2); }
	static jint glGetError() { return call_static_method<"glGetError", jint>(); }
	static void glGetIntegerv(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glGetIntegerv", void>(p1, p2, p3); }
	static void glGetIntegerv(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glGetIntegerv", void>(p1, p2); }
	static jni::ref<java::lang::String> glGetString(jint p1) { return call_static_method<"glGetString", jni::ref<java::lang::String>>(p1); }
	static void glHint(jint p1, jint p2) { return call_static_method<"glHint", void>(p1, p2); }
	static void glLightModelf(jint p1, jfloat p2) { return call_static_method<"glLightModelf", void>(p1, p2); }
	static void glLightModelfv(jint p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_static_method<"glLightModelfv", void>(p1, p2, p3); }
	static void glLightModelfv(jint p1, jni::ref<java::nio::FloatBuffer> p2) { return call_static_method<"glLightModelfv", void>(p1, p2); }
	static void glLightModelx(jint p1, jint p2) { return call_static_method<"glLightModelx", void>(p1, p2); }
	static void glLightModelxv(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glLightModelxv", void>(p1, p2, p3); }
	static void glLightModelxv(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glLightModelxv", void>(p1, p2); }
	static void glLightf(jint p1, jint p2, jfloat p3) { return call_static_method<"glLightf", void>(p1, p2, p3); }
	static void glLightfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_static_method<"glLightfv", void>(p1, p2, p3, p4); }
	static void glLightfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_static_method<"glLightfv", void>(p1, p2, p3); }
	static void glLightx(jint p1, jint p2, jint p3) { return call_static_method<"glLightx", void>(p1, p2, p3); }
	static void glLightxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glLightxv", void>(p1, p2, p3, p4); }
	static void glLightxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glLightxv", void>(p1, p2, p3); }
	static void glLineWidth(jfloat p1) { return call_static_method<"glLineWidth", void>(p1); }
	static void glLineWidthx(jint p1) { return call_static_method<"glLineWidthx", void>(p1); }
	static void glLoadIdentity() { return call_static_method<"glLoadIdentity", void>(); }
	static void glLoadMatrixf(jni::ref<jni::array<jfloat>> p1, jint p2) { return call_static_method<"glLoadMatrixf", void>(p1, p2); }
	static void glLoadMatrixf(jni::ref<java::nio::FloatBuffer> p1) { return call_static_method<"glLoadMatrixf", void>(p1); }
	static void glLoadMatrixx(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"glLoadMatrixx", void>(p1, p2); }
	static void glLoadMatrixx(jni::ref<java::nio::IntBuffer> p1) { return call_static_method<"glLoadMatrixx", void>(p1); }
	static void glLogicOp(jint p1) { return call_static_method<"glLogicOp", void>(p1); }
	static void glMaterialf(jint p1, jint p2, jfloat p3) { return call_static_method<"glMaterialf", void>(p1, p2, p3); }
	static void glMaterialfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_static_method<"glMaterialfv", void>(p1, p2, p3, p4); }
	static void glMaterialfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_static_method<"glMaterialfv", void>(p1, p2, p3); }
	static void glMaterialx(jint p1, jint p2, jint p3) { return call_static_method<"glMaterialx", void>(p1, p2, p3); }
	static void glMaterialxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glMaterialxv", void>(p1, p2, p3, p4); }
	static void glMaterialxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glMaterialxv", void>(p1, p2, p3); }
	static void glMatrixMode(jint p1) { return call_static_method<"glMatrixMode", void>(p1); }
	static void glMultMatrixf(jni::ref<jni::array<jfloat>> p1, jint p2) { return call_static_method<"glMultMatrixf", void>(p1, p2); }
	static void glMultMatrixf(jni::ref<java::nio::FloatBuffer> p1) { return call_static_method<"glMultMatrixf", void>(p1); }
	static void glMultMatrixx(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"glMultMatrixx", void>(p1, p2); }
	static void glMultMatrixx(jni::ref<java::nio::IntBuffer> p1) { return call_static_method<"glMultMatrixx", void>(p1); }
	static void glMultiTexCoord4f(jint p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) { return call_static_method<"glMultiTexCoord4f", void>(p1, p2, p3, p4, p5); }
	static void glMultiTexCoord4x(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glMultiTexCoord4x", void>(p1, p2, p3, p4, p5); }
	static void glNormal3f(jfloat p1, jfloat p2, jfloat p3) { return call_static_method<"glNormal3f", void>(p1, p2, p3); }
	static void glNormal3x(jint p1, jint p2, jint p3) { return call_static_method<"glNormal3x", void>(p1, p2, p3); }
	static void glNormalPointer(jint type, jint stride, jni::ref<java::nio::Buffer> pointer) { return call_static_method<"glNormalPointer", void>(type, stride, pointer); }
	static void glOrthof(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_static_method<"glOrthof", void>(p1, p2, p3, p4, p5, p6); }
	static void glOrthox(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_static_method<"glOrthox", void>(p1, p2, p3, p4, p5, p6); }
	static void glPixelStorei(jint p1, jint p2) { return call_static_method<"glPixelStorei", void>(p1, p2); }
	static void glPointSize(jfloat p1) { return call_static_method<"glPointSize", void>(p1); }
	static void glPointSizex(jint p1) { return call_static_method<"glPointSizex", void>(p1); }
	static void glPolygonOffset(jfloat p1, jfloat p2) { return call_static_method<"glPolygonOffset", void>(p1, p2); }
	static void glPolygonOffsetx(jint p1, jint p2) { return call_static_method<"glPolygonOffsetx", void>(p1, p2); }
	static void glPopMatrix() { return call_static_method<"glPopMatrix", void>(); }
	static void glPushMatrix() { return call_static_method<"glPushMatrix", void>(); }
	static void glReadPixels(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jni::ref<java::nio::Buffer> p7) { return call_static_method<"glReadPixels", void>(p1, p2, p3, p4, p5, p6, p7); }
	static void glRotatef(jfloat p1, jfloat p2, jfloat p3, jfloat p4) { return call_static_method<"glRotatef", void>(p1, p2, p3, p4); }
	static void glRotatex(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glRotatex", void>(p1, p2, p3, p4); }
	static void glSampleCoverage(jfloat p1, jboolean p2) { return call_static_method<"glSampleCoverage", void>(p1, p2); }
	static void glSampleCoveragex(jint p1, jboolean p2) { return call_static_method<"glSampleCoveragex", void>(p1, p2); }
	static void glScalef(jfloat p1, jfloat p2, jfloat p3) { return call_static_method<"glScalef", void>(p1, p2, p3); }
	static void glScalex(jint p1, jint p2, jint p3) { return call_static_method<"glScalex", void>(p1, p2, p3); }
	static void glScissor(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glScissor", void>(p1, p2, p3, p4); }
	static void glShadeModel(jint p1) { return call_static_method<"glShadeModel", void>(p1); }
	static void glStencilFunc(jint p1, jint p2, jint p3) { return call_static_method<"glStencilFunc", void>(p1, p2, p3); }
	static void glStencilMask(jint p1) { return call_static_method<"glStencilMask", void>(p1); }
	static void glStencilOp(jint p1, jint p2, jint p3) { return call_static_method<"glStencilOp", void>(p1, p2, p3); }
	static void glTexCoordPointer(jint size, jint type, jint stride, jni::ref<java::nio::Buffer> pointer) { return call_static_method<"glTexCoordPointer", void>(size, type, stride, pointer); }
	static void glTexEnvf(jint p1, jint p2, jfloat p3) { return call_static_method<"glTexEnvf", void>(p1, p2, p3); }
	static void glTexEnvfv(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_static_method<"glTexEnvfv", void>(p1, p2, p3, p4); }
	static void glTexEnvfv(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_static_method<"glTexEnvfv", void>(p1, p2, p3); }
	static void glTexEnvx(jint p1, jint p2, jint p3) { return call_static_method<"glTexEnvx", void>(p1, p2, p3); }
	static void glTexEnvxv(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glTexEnvxv", void>(p1, p2, p3, p4); }
	static void glTexEnvxv(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glTexEnvxv", void>(p1, p2, p3); }
	static void glTexImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jni::ref<java::nio::Buffer> p9) { return call_static_method<"glTexImage2D", void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
	static void glTexParameterf(jint p1, jint p2, jfloat p3) { return call_static_method<"glTexParameterf", void>(p1, p2, p3); }
	static void glTexParameterx(jint p1, jint p2, jint p3) { return call_static_method<"glTexParameterx", void>(p1, p2, p3); }
	static void glTexSubImage2D(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jni::ref<java::nio::Buffer> p9) { return call_static_method<"glTexSubImage2D", void>(p1, p2, p3, p4, p5, p6, p7, p8, p9); }
	static void glTranslatef(jfloat p1, jfloat p2, jfloat p3) { return call_static_method<"glTranslatef", void>(p1, p2, p3); }
	static void glTranslatex(jint p1, jint p2, jint p3) { return call_static_method<"glTranslatex", void>(p1, p2, p3); }
	static void glVertexPointer(jint size, jint type, jint stride, jni::ref<java::nio::Buffer> pointer) { return call_static_method<"glVertexPointer", void>(size, type, stride, pointer); }
	static void glViewport(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glViewport", void>(p1, p2, p3, p4); }

protected:

	GLES10(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLES10
