// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WEBKIT_COOKIEMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_WEBKIT_COOKIEMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::webkit { class CookieManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::webkit::CookieManager>
{
	static constexpr fixed_string class_name = "android/webkit/CookieManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WEBKIT_COOKIEMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WEBKIT_COOKIEMANAGER)
#define SCAPIX_JAVA_API_ANDROID_WEBKIT_COOKIEMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/webkit/ValueCallback.h>
#include <scapix/java_api/android/webkit/WebView.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::webkit::CookieManager : public jni::object_base<"android/webkit/CookieManager",
	java::lang::Object>
{
public:

	static jni::ref<android::webkit::CookieManager> getInstance() { return call_static_method<"getInstance", jni::ref<android::webkit::CookieManager>>(); }
	void setAcceptCookie(jboolean accept) { return call_method<"setAcceptCookie", void>(accept); }
	jboolean acceptCookie() { return call_method<"acceptCookie", jboolean>(); }
	void setAcceptThirdPartyCookies(jni::ref<android::webkit::WebView> webview, jboolean accept) { return call_method<"setAcceptThirdPartyCookies", void>(webview, accept); }
	jboolean acceptThirdPartyCookies(jni::ref<android::webkit::WebView> webview) { return call_method<"acceptThirdPartyCookies", jboolean>(webview); }
	void setCookie(jni::ref<java::lang::String> url, jni::ref<java::lang::String> value) { return call_method<"setCookie", void>(url, value); }
	void setCookie(jni::ref<java::lang::String> url, jni::ref<java::lang::String> value, jni::ref<android::webkit::ValueCallback> callback) { return call_method<"setCookie", void>(url, value, callback); }
	jni::ref<java::lang::String> getCookie(jni::ref<java::lang::String> url) { return call_method<"getCookie", jni::ref<java::lang::String>>(url); }
	void removeSessionCookie() { return call_method<"removeSessionCookie", void>(); }
	void removeSessionCookies(jni::ref<android::webkit::ValueCallback> callback) { return call_method<"removeSessionCookies", void>(callback); }
	void removeAllCookie() { return call_method<"removeAllCookie", void>(); }
	void removeAllCookies(jni::ref<android::webkit::ValueCallback> callback) { return call_method<"removeAllCookies", void>(callback); }
	jboolean hasCookies() { return call_method<"hasCookies", jboolean>(); }
	void removeExpiredCookie() { return call_method<"removeExpiredCookie", void>(); }
	void flush() { return call_method<"flush", void>(); }
	static jboolean allowFileSchemeCookies() { return call_static_method<"allowFileSchemeCookies", jboolean>(); }
	static void setAcceptFileSchemeCookies(jboolean accept) { return call_static_method<"setAcceptFileSchemeCookies", void>(accept); }

protected:

	CookieManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WEBKIT_COOKIEMANAGER
