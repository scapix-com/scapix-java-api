// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVERCALLBACK_FWD
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVERCALLBACK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::bluetooth { class BluetoothGattServerCallback; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::bluetooth::BluetoothGattServerCallback>
{
	static constexpr fixed_string class_name = "android/bluetooth/BluetoothGattServerCallback";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVERCALLBACK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVERCALLBACK)
#define SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVERCALLBACK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/bluetooth/BluetoothDevice.h>
#include <scapix/java_api/android/bluetooth/BluetoothGattCharacteristic.h>
#include <scapix/java_api/android/bluetooth/BluetoothGattDescriptor.h>
#include <scapix/java_api/android/bluetooth/BluetoothGattService.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::bluetooth::BluetoothGattServerCallback : public jni::object_base<"android/bluetooth/BluetoothGattServerCallback",
	java::lang::Object>
{
public:

	static jni::ref<android::bluetooth::BluetoothGattServerCallback> new_object() { return base_::new_object(); }
	void onConnectionStateChange(jni::ref<android::bluetooth::BluetoothDevice> device, jint status, jint newState) { return call_method<"onConnectionStateChange", void>(device, status, newState); }
	void onServiceAdded(jint status, jni::ref<android::bluetooth::BluetoothGattService> service) { return call_method<"onServiceAdded", void>(status, service); }
	void onCharacteristicReadRequest(jni::ref<android::bluetooth::BluetoothDevice> device, jint requestId, jint offset, jni::ref<android::bluetooth::BluetoothGattCharacteristic> characteristic) { return call_method<"onCharacteristicReadRequest", void>(device, requestId, offset, characteristic); }
	void onCharacteristicWriteRequest(jni::ref<android::bluetooth::BluetoothDevice> device, jint requestId, jni::ref<android::bluetooth::BluetoothGattCharacteristic> characteristic, jboolean preparedWrite, jboolean responseNeeded, jint offset, jni::ref<jni::array<jbyte>> value) { return call_method<"onCharacteristicWriteRequest", void>(device, requestId, characteristic, preparedWrite, responseNeeded, offset, value); }
	void onDescriptorReadRequest(jni::ref<android::bluetooth::BluetoothDevice> device, jint requestId, jint offset, jni::ref<android::bluetooth::BluetoothGattDescriptor> descriptor) { return call_method<"onDescriptorReadRequest", void>(device, requestId, offset, descriptor); }
	void onDescriptorWriteRequest(jni::ref<android::bluetooth::BluetoothDevice> device, jint requestId, jni::ref<android::bluetooth::BluetoothGattDescriptor> descriptor, jboolean preparedWrite, jboolean responseNeeded, jint offset, jni::ref<jni::array<jbyte>> value) { return call_method<"onDescriptorWriteRequest", void>(device, requestId, descriptor, preparedWrite, responseNeeded, offset, value); }
	void onExecuteWrite(jni::ref<android::bluetooth::BluetoothDevice> device, jint requestId, jboolean execute) { return call_method<"onExecuteWrite", void>(device, requestId, execute); }
	void onNotificationSent(jni::ref<android::bluetooth::BluetoothDevice> device, jint status) { return call_method<"onNotificationSent", void>(device, status); }

protected:

	BluetoothGattServerCallback(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_BLUETOOTH_BLUETOOTHGATTSERVERCALLBACK
