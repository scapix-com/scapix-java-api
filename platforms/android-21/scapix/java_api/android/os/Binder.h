// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/IBinder.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OS_BINDER_FWD
#define SCAPIX_JAVA_API_ANDROID_OS_BINDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::os { class Binder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::os::Binder>
{
	static constexpr fixed_string class_name = "android/os/Binder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::IBinder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_BINDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OS_BINDER)
#define SCAPIX_JAVA_API_ANDROID_OS_BINDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/IBinder_DeathRecipient.h>
#include <scapix/java_api/android/os/IInterface.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/UserHandle.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::os::Binder : public jni::object_base<"android/os/Binder",
	java::lang::Object,
	android::os::IBinder>
{
public:

	static jni::ref<android::os::Binder> new_object() { return base_::new_object(); }
	static jint getCallingPid() { return call_static_method<"getCallingPid", jint>(); }
	static jint getCallingUid() { return call_static_method<"getCallingUid", jint>(); }
	static jni::ref<android::os::UserHandle> getCallingUserHandle() { return call_static_method<"getCallingUserHandle", jni::ref<android::os::UserHandle>>(); }
	static jlong clearCallingIdentity() { return call_static_method<"clearCallingIdentity", jlong>(); }
	static void restoreCallingIdentity(jlong p1) { return call_static_method<"restoreCallingIdentity", void>(p1); }
	static void flushPendingCommands() { return call_static_method<"flushPendingCommands", void>(); }
	static void joinThreadPool() { return call_static_method<"joinThreadPool", void>(); }
	void attachInterface(jni::ref<android::os::IInterface> owner, jni::ref<java::lang::String> descriptor) { return call_method<"attachInterface", void>(owner, descriptor); }
	jni::ref<java::lang::String> getInterfaceDescriptor() { return call_method<"getInterfaceDescriptor", jni::ref<java::lang::String>>(); }
	jboolean pingBinder() { return call_method<"pingBinder", jboolean>(); }
	jboolean isBinderAlive() { return call_method<"isBinderAlive", jboolean>(); }
	jni::ref<android::os::IInterface> queryLocalInterface(jni::ref<java::lang::String> descriptor) { return call_method<"queryLocalInterface", jni::ref<android::os::IInterface>>(descriptor); }
	void dump(jni::ref<java::io::FileDescriptor> fd, jni::ref<jni::array<java::lang::String>> args) { return call_method<"dump", void>(fd, args); }
	void dumpAsync(jni::ref<java::io::FileDescriptor> fd, jni::ref<jni::array<java::lang::String>> args) { return call_method<"dumpAsync", void>(fd, args); }
	jboolean transact(jint code, jni::ref<android::os::Parcel> data, jni::ref<android::os::Parcel> reply, jint flags) { return call_method<"transact", jboolean>(code, data, reply, flags); }
	void linkToDeath(jni::ref<android::os::IBinder_DeathRecipient> recipient, jint flags) { return call_method<"linkToDeath", void>(recipient, flags); }
	jboolean unlinkToDeath(jni::ref<android::os::IBinder_DeathRecipient> recipient, jint flags) { return call_method<"unlinkToDeath", jboolean>(recipient, flags); }

protected:

	Binder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OS_BINDER
