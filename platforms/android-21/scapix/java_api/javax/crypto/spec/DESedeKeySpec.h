// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/security/spec/KeySpec.h>

#ifndef SCAPIX_JAVA_API_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_FWD
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::crypto::spec { class DESedeKeySpec; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::crypto::spec::DESedeKeySpec>
{
	static constexpr fixed_string class_name = "javax/crypto/spec/DESedeKeySpec";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::security::spec::KeySpec>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC)
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::crypto::spec::DESedeKeySpec : public jni::object_base<"javax/crypto/spec/DESedeKeySpec",
	java::lang::Object,
	java::security::spec::KeySpec>
{
public:

	static jint DES_EDE_KEY_LEN() { return get_static_field<"DES_EDE_KEY_LEN", jint>(); }

	static jni::ref<javax::crypto::spec::DESedeKeySpec> new_object(jni::ref<jni::array<jbyte>> key) { return base_::new_object(key); }
	static jni::ref<javax::crypto::spec::DESedeKeySpec> new_object(jni::ref<jni::array<jbyte>> key, jint offset) { return base_::new_object(key, offset); }
	jni::ref<jni::array<jbyte>> getKey() { return call_method<"getKey", jni::ref<jni::array<jbyte>>>(); }
	static jboolean isParityAdjusted(jni::ref<jni::array<jbyte>> key, jint offset) { return call_static_method<"isParityAdjusted", jboolean>(key, offset); }

protected:

	DESedeKeySpec(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC
