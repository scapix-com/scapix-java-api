// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYCHANGESUPPORT_FWD
#define SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYCHANGESUPPORT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::beans { class PropertyChangeSupport; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::beans::PropertyChangeSupport>
{
	static constexpr fixed_string class_name = "java/beans/PropertyChangeSupport";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYCHANGESUPPORT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYCHANGESUPPORT)
#define SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYCHANGESUPPORT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/beans/PropertyChangeEvent.h>
#include <scapix/java_api/java/beans/PropertyChangeListener.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::beans::PropertyChangeSupport : public jni::object_base<"java/beans/PropertyChangeSupport",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::beans::PropertyChangeSupport> new_object(jni::ref<java::lang::Object> sourceBean) { return base_::new_object(sourceBean); }
	void firePropertyChange(jni::ref<java::lang::String> propertyName, jni::ref<java::lang::Object> oldValue, jni::ref<java::lang::Object> newValue) { return call_method<"firePropertyChange", void>(propertyName, oldValue, newValue); }
	void fireIndexedPropertyChange(jni::ref<java::lang::String> propertyName, jint index, jni::ref<java::lang::Object> oldValue, jni::ref<java::lang::Object> newValue) { return call_method<"fireIndexedPropertyChange", void>(propertyName, index, oldValue, newValue); }
	void removePropertyChangeListener(jni::ref<java::lang::String> propertyName, jni::ref<java::beans::PropertyChangeListener> listener) { return call_method<"removePropertyChangeListener", void>(propertyName, listener); }
	void addPropertyChangeListener(jni::ref<java::lang::String> propertyName, jni::ref<java::beans::PropertyChangeListener> listener) { return call_method<"addPropertyChangeListener", void>(propertyName, listener); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners(jni::ref<java::lang::String> propertyName) { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(propertyName); }
	void firePropertyChange(jni::ref<java::lang::String> propertyName, jboolean oldValue, jboolean newValue) { return call_method<"firePropertyChange", void>(propertyName, oldValue, newValue); }
	void fireIndexedPropertyChange(jni::ref<java::lang::String> propertyName, jint index, jboolean oldValue, jboolean newValue) { return call_method<"fireIndexedPropertyChange", void>(propertyName, index, oldValue, newValue); }
	void firePropertyChange(jni::ref<java::lang::String> propertyName, jint oldValue, jint newValue) { return call_method<"firePropertyChange", void>(propertyName, oldValue, newValue); }
	void fireIndexedPropertyChange(jni::ref<java::lang::String> propertyName, jint index, jint oldValue, jint newValue) { return call_method<"fireIndexedPropertyChange", void>(propertyName, index, oldValue, newValue); }
	jboolean hasListeners(jni::ref<java::lang::String> propertyName) { return call_method<"hasListeners", jboolean>(propertyName); }
	void removePropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> listener) { return call_method<"removePropertyChangeListener", void>(listener); }
	void addPropertyChangeListener(jni::ref<java::beans::PropertyChangeListener> listener) { return call_method<"addPropertyChangeListener", void>(listener); }
	jni::ref<jni::array<java::beans::PropertyChangeListener>> getPropertyChangeListeners() { return call_method<"getPropertyChangeListeners", jni::ref<jni::array<java::beans::PropertyChangeListener>>>(); }
	void firePropertyChange(jni::ref<java::beans::PropertyChangeEvent> event) { return call_method<"firePropertyChange", void>(event); }

protected:

	PropertyChangeSupport(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_BEANS_PROPERTYCHANGESUPPORT
