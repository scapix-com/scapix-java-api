// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_SOCKET_FWD
#define SCAPIX_JAVA_API_JAVA_NET_SOCKET_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class Socket; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::Socket>
{
	static constexpr fixed_string class_name = "java/net/Socket";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKET_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_SOCKET)
#define SCAPIX_JAVA_API_JAVA_NET_SOCKET

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/net/Proxy.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketImplFactory.h>
#include <scapix/java_api/java/nio/channels/SocketChannel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::net::Socket : public jni::object_base<"java/net/Socket",
	java::lang::Object,
	java::io::Closeable>
{
public:

	static jni::ref<java::net::Socket> new_object() { return base_::new_object(); }
	static jni::ref<java::net::Socket> new_object(jni::ref<java::net::Proxy> proxy) { return base_::new_object(proxy); }
	static jni::ref<java::net::Socket> new_object(jni::ref<java::lang::String> dstName, jint dstPort) { return base_::new_object(dstName, dstPort); }
	static jni::ref<java::net::Socket> new_object(jni::ref<java::lang::String> dstName, jint dstPort, jni::ref<java::net::InetAddress> localAddress, jint localPort) { return base_::new_object(dstName, dstPort, localAddress, localPort); }
	static jni::ref<java::net::Socket> new_object(jni::ref<java::lang::String> hostName, jint port, jboolean streaming) { return base_::new_object(hostName, port, streaming); }
	static jni::ref<java::net::Socket> new_object(jni::ref<java::net::InetAddress> dstAddress, jint dstPort) { return base_::new_object(dstAddress, dstPort); }
	static jni::ref<java::net::Socket> new_object(jni::ref<java::net::InetAddress> dstAddress, jint dstPort, jni::ref<java::net::InetAddress> localAddress, jint localPort) { return base_::new_object(dstAddress, dstPort, localAddress, localPort); }
	static jni::ref<java::net::Socket> new_object(jni::ref<java::net::InetAddress> addr, jint port, jboolean streaming) { return base_::new_object(addr, port, streaming); }
	void close() { return call_method<"close", void>(); }
	jni::ref<java::net::InetAddress> getInetAddress() { return call_method<"getInetAddress", jni::ref<java::net::InetAddress>>(); }
	jni::ref<java::io::InputStream> getInputStream() { return call_method<"getInputStream", jni::ref<java::io::InputStream>>(); }
	jboolean getKeepAlive() { return call_method<"getKeepAlive", jboolean>(); }
	jni::ref<java::net::InetAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::InetAddress>>(); }
	jint getLocalPort() { return call_method<"getLocalPort", jint>(); }
	jni::ref<java::io::OutputStream> getOutputStream() { return call_method<"getOutputStream", jni::ref<java::io::OutputStream>>(); }
	jint getPort() { return call_method<"getPort", jint>(); }
	jint getSoLinger() { return call_method<"getSoLinger", jint>(); }
	jint getReceiveBufferSize() { return call_method<"getReceiveBufferSize", jint>(); }
	jint getSendBufferSize() { return call_method<"getSendBufferSize", jint>(); }
	jint getSoTimeout() { return call_method<"getSoTimeout", jint>(); }
	jboolean getTcpNoDelay() { return call_method<"getTcpNoDelay", jboolean>(); }
	void setKeepAlive(jboolean keepAlive) { return call_method<"setKeepAlive", void>(keepAlive); }
	static void setSocketImplFactory(jni::ref<java::net::SocketImplFactory> fac) { return call_static_method<"setSocketImplFactory", void>(fac); }
	void setSendBufferSize(jint size) { return call_method<"setSendBufferSize", void>(size); }
	void setReceiveBufferSize(jint size) { return call_method<"setReceiveBufferSize", void>(size); }
	void setSoLinger(jboolean on, jint timeout) { return call_method<"setSoLinger", void>(on, timeout); }
	void setSoTimeout(jint timeout) { return call_method<"setSoTimeout", void>(timeout); }
	void setTcpNoDelay(jboolean on) { return call_method<"setTcpNoDelay", void>(on); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void shutdownInput() { return call_method<"shutdownInput", void>(); }
	void shutdownOutput() { return call_method<"shutdownOutput", void>(); }
	jni::ref<java::net::SocketAddress> getLocalSocketAddress() { return call_method<"getLocalSocketAddress", jni::ref<java::net::SocketAddress>>(); }
	jni::ref<java::net::SocketAddress> getRemoteSocketAddress() { return call_method<"getRemoteSocketAddress", jni::ref<java::net::SocketAddress>>(); }
	jboolean isBound() { return call_method<"isBound", jboolean>(); }
	jboolean isConnected() { return call_method<"isConnected", jboolean>(); }
	jboolean isClosed() { return call_method<"isClosed", jboolean>(); }
	void bind(jni::ref<java::net::SocketAddress> localAddr) { return call_method<"bind", void>(localAddr); }
	void connect(jni::ref<java::net::SocketAddress> remoteAddr) { return call_method<"connect", void>(remoteAddr); }
	void connect(jni::ref<java::net::SocketAddress> remoteAddr, jint timeout) { return call_method<"connect", void>(remoteAddr, timeout); }
	jboolean isInputShutdown() { return call_method<"isInputShutdown", jboolean>(); }
	jboolean isOutputShutdown() { return call_method<"isOutputShutdown", jboolean>(); }
	void setReuseAddress(jboolean reuse) { return call_method<"setReuseAddress", void>(reuse); }
	jboolean getReuseAddress() { return call_method<"getReuseAddress", jboolean>(); }
	void setOOBInline(jboolean oobinline) { return call_method<"setOOBInline", void>(oobinline); }
	jboolean getOOBInline() { return call_method<"getOOBInline", jboolean>(); }
	void setTrafficClass(jint value) { return call_method<"setTrafficClass", void>(value); }
	jint getTrafficClass() { return call_method<"getTrafficClass", jint>(); }
	void sendUrgentData(jint value) { return call_method<"sendUrgentData", void>(value); }
	jni::ref<java::nio::channels::SocketChannel> getChannel() { return call_method<"getChannel", jni::ref<java::nio::channels::SocketChannel>>(); }
	void setPerformancePreferences(jint connectionTime, jint latency, jint bandwidth) { return call_method<"setPerformancePreferences", void>(connectionTime, latency, bandwidth); }

protected:

	Socket(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKET
