// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_SQL_SQLDATA_FWD
#define SCAPIX_JAVA_API_JAVA_SQL_SQLDATA_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::sql { class SQLData; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::sql::SQLData>
{
	static constexpr fixed_string class_name = "java/sql/SQLData";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_SQLDATA_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SQL_SQLDATA)
#define SCAPIX_JAVA_API_JAVA_SQL_SQLDATA

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/sql/SQLInput.h>
#include <scapix/java_api/java/sql/SQLOutput.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::sql::SQLData : public jni::object_base<"java/sql/SQLData",
	java::lang::Object>
{
public:

	jni::ref<java::lang::String> getSQLTypeName() { return call_method<"getSQLTypeName", jni::ref<java::lang::String>>(); }
	void readSQL(jni::ref<java::sql::SQLInput> p1, jni::ref<java::lang::String> p2) { return call_method<"readSQL", void>(p1, p2); }
	void writeSQL(jni::ref<java::sql::SQLOutput> p1) { return call_method<"writeSQL", void>(p1); }

protected:

	SQLData(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SQL_SQLDATA
