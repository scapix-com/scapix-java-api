// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/FilterInputStream.h>
#include <scapix/java_api/java/io/DataInput.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_DATAINPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_IO_DATAINPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class DataInputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::DataInputStream>
{
	static constexpr fixed_string class_name = "java/io/DataInputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::FilterInputStream, scapix::java_api::java::io::DataInput>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_DATAINPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_DATAINPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_IO_DATAINPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::DataInputStream : public jni::object_base<"java/io/DataInputStream",
	java::io::FilterInputStream,
	java::io::DataInput>
{
public:

	static jni::ref<java::io::DataInputStream> new_object(jni::ref<java::io::InputStream> in) { return base_::new_object(in); }
	jint read(jni::ref<jni::array<jbyte>> buffer) { return call_method<"read", jint>(buffer); }
	jint read(jni::ref<jni::array<jbyte>> buffer, jint byteOffset, jint byteCount) { return call_method<"read", jint>(buffer, byteOffset, byteCount); }
	jboolean readBoolean() { return call_method<"readBoolean", jboolean>(); }
	jbyte readByte() { return call_method<"readByte", jbyte>(); }
	jchar readChar() { return call_method<"readChar", jchar>(); }
	jdouble readDouble() { return call_method<"readDouble", jdouble>(); }
	jfloat readFloat() { return call_method<"readFloat", jfloat>(); }
	void readFully(jni::ref<jni::array<jbyte>> dst) { return call_method<"readFully", void>(dst); }
	void readFully(jni::ref<jni::array<jbyte>> dst, jint offset, jint byteCount) { return call_method<"readFully", void>(dst, offset, byteCount); }
	jint readInt() { return call_method<"readInt", jint>(); }
	jni::ref<java::lang::String> readLine() { return call_method<"readLine", jni::ref<java::lang::String>>(); }
	jlong readLong() { return call_method<"readLong", jlong>(); }
	jshort readShort() { return call_method<"readShort", jshort>(); }
	jint readUnsignedByte() { return call_method<"readUnsignedByte", jint>(); }
	jint readUnsignedShort() { return call_method<"readUnsignedShort", jint>(); }
	jni::ref<java::lang::String> readUTF() { return call_method<"readUTF", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> readUTF(jni::ref<java::io::DataInput> in) { return call_static_method<"readUTF", jni::ref<java::lang::String>>(in); }
	jint skipBytes(jint count) { return call_method<"skipBytes", jint>(count); }

protected:

	DataInputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_DATAINPUTSTREAM
