// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/DataInput.h>
#include <scapix/java_api/java/lang/AutoCloseable.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_OBJECTINPUT_FWD
#define SCAPIX_JAVA_API_JAVA_IO_OBJECTINPUT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class ObjectInput; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::ObjectInput>
{
	static constexpr fixed_string class_name = "java/io/ObjectInput";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::DataInput, scapix::java_api::java::lang::AutoCloseable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OBJECTINPUT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_OBJECTINPUT)
#define SCAPIX_JAVA_API_JAVA_IO_OBJECTINPUT

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::ObjectInput : public jni::object_base<"java/io/ObjectInput",
	java::lang::Object,
	java::io::DataInput,
	java::lang::AutoCloseable>
{
public:

	jint available() { return call_method<"available", jint>(); }
	void close() { return call_method<"close", void>(); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> p1) { return call_method<"read", jint>(p1); }
	jint read(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3) { return call_method<"read", jint>(p1, p2, p3); }
	jni::ref<java::lang::Object> readObject() { return call_method<"readObject", jni::ref<java::lang::Object>>(); }
	jlong skip(jlong p1) { return call_method<"skip", jlong>(p1); }

protected:

	ObjectInput(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_OBJECTINPUT
