// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/AbstractStringBuilder.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class StringBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::StringBuilder>
{
	static constexpr fixed_string class_name = "java/lang/StringBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::AbstractStringBuilder, scapix::java_api::java::lang::Appendable, scapix::java_api::java::lang::CharSequence, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER)
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::StringBuilder : public jni::object_base<"java/lang/StringBuilder",
	java::lang::AbstractStringBuilder,
	java::lang::Appendable,
	java::lang::CharSequence,
	java::io::Serializable>
{
public:

	static jni::ref<java::lang::StringBuilder> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::StringBuilder> new_object(jint capacity) { return base_::new_object(capacity); }
	static jni::ref<java::lang::StringBuilder> new_object(jni::ref<java::lang::CharSequence> seq) { return base_::new_object(seq); }
	static jni::ref<java::lang::StringBuilder> new_object(jni::ref<java::lang::String> str) { return base_::new_object(str); }
	jni::ref<java::lang::StringBuilder> append(jboolean b) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(b); }
	jni::ref<java::lang::StringBuilder> append(jchar c) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(c); }
	jni::ref<java::lang::StringBuilder> append(jint i) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(i); }
	jni::ref<java::lang::StringBuilder> append(jlong l) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(l); }
	jni::ref<java::lang::StringBuilder> append(jfloat f) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(f); }
	jni::ref<java::lang::StringBuilder> append(jdouble d) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(d); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::Object> obj) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(obj); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::String> str) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(str); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::StringBuffer> sb) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(sb); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<jni::array<jchar>> chars) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(chars); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<jni::array<jchar>> str, jint offset, jint len) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(str, offset, len); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::CharSequence> csq) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(csq); }
	jni::ref<java::lang::StringBuilder> append(jni::ref<java::lang::CharSequence> csq, jint start, jint end) { return call_method<"append", jni::ref<java::lang::StringBuilder>>(csq, start, end); }
	jni::ref<java::lang::StringBuilder> appendCodePoint(jint codePoint) { return call_method<"appendCodePoint", jni::ref<java::lang::StringBuilder>>(codePoint); }
	jni::ref<java::lang::StringBuilder> delete_(jint start, jint end) { return call_method<"delete", jni::ref<java::lang::StringBuilder>>(start, end); }
	jni::ref<java::lang::StringBuilder> deleteCharAt(jint index) { return call_method<"deleteCharAt", jni::ref<java::lang::StringBuilder>>(index); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jboolean b) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, b); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jchar c) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, c); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jint i) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, i); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jlong l) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, l); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jfloat f) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, f); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jdouble d) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, d); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jni::ref<java::lang::Object> obj) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, obj); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jni::ref<java::lang::String> str) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, str); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jni::ref<jni::array<jchar>> ch) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, ch); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jni::ref<jni::array<jchar>> str, jint strOffset, jint strLen) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, str, strOffset, strLen); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jni::ref<java::lang::CharSequence> s) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, s); }
	jni::ref<java::lang::StringBuilder> insert(jint offset, jni::ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<"insert", jni::ref<java::lang::StringBuilder>>(offset, s, start, end); }
	jni::ref<java::lang::StringBuilder> replace(jint start, jint end, jni::ref<java::lang::String> string) { return call_method<"replace", jni::ref<java::lang::StringBuilder>>(start, end, string); }
	jni::ref<java::lang::StringBuilder> reverse() { return call_method<"reverse", jni::ref<java::lang::StringBuilder>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	StringBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGBUILDER
