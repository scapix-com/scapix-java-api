// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PROXY_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PROXY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class Proxy; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::Proxy>
{
	static constexpr fixed_string class_name = "java/lang/reflect/Proxy";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PROXY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PROXY)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PROXY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/reflect/InvocationHandler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::Proxy : public jni::object_base<"java/lang/reflect/Proxy",
	java::lang::Object,
	java::io::Serializable>
{
public:

	static jni::ref<java::lang::Class> getProxyClass(jni::ref<java::lang::ClassLoader> loader, jni::ref<jni::array<java::lang::Class>> interfaces) { return call_static_method<"getProxyClass", jni::ref<java::lang::Class>>(loader, interfaces); }
	static jni::ref<java::lang::Object> newProxyInstance(jni::ref<java::lang::ClassLoader> loader, jni::ref<jni::array<java::lang::Class>> interfaces, jni::ref<java::lang::reflect::InvocationHandler> invocationHandler) { return call_static_method<"newProxyInstance", jni::ref<java::lang::Object>>(loader, interfaces, invocationHandler); }
	static jboolean isProxyClass(jni::ref<java::lang::Class> cl) { return call_static_method<"isProxyClass", jboolean>(cl); }
	static jni::ref<java::lang::reflect::InvocationHandler> getInvocationHandler(jni::ref<java::lang::Object> proxy) { return call_static_method<"getInvocationHandler", jni::ref<java::lang::reflect::InvocationHandler>>(proxy); }

protected:

	Proxy(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_PROXY
