// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ABSTRACTCOLLECTION_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ABSTRACTCOLLECTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class AbstractCollection; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::AbstractCollection>
{
	static constexpr fixed_string class_name = "java/util/AbstractCollection";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::Collection>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ABSTRACTCOLLECTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ABSTRACTCOLLECTION)
#define SCAPIX_JAVA_API_JAVA_UTIL_ABSTRACTCOLLECTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Iterator.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::AbstractCollection : public jni::object_base<"java/util/AbstractCollection",
	java::lang::Object,
	java::util::Collection>
{
public:

	jboolean add(jni::ref<java::lang::Object> object) { return call_method<"add", jboolean>(object); }
	jboolean addAll(jni::ref<java::util::Collection> collection) { return call_method<"addAll", jboolean>(collection); }
	void clear() { return call_method<"clear", void>(); }
	jboolean contains(jni::ref<java::lang::Object> object) { return call_method<"contains", jboolean>(object); }
	jboolean containsAll(jni::ref<java::util::Collection> collection) { return call_method<"containsAll", jboolean>(collection); }
	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }
	jboolean remove(jni::ref<java::lang::Object> object) { return call_method<"remove", jboolean>(object); }
	jboolean removeAll(jni::ref<java::util::Collection> collection) { return call_method<"removeAll", jboolean>(collection); }
	jboolean retainAll(jni::ref<java::util::Collection> collection) { return call_method<"retainAll", jboolean>(collection); }
	jint size() { return call_method<"size", jint>(); }
	jni::ref<jni::array<java::lang::Object>> toArray() { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<jni::array<java::lang::Object>> toArray(jni::ref<jni::array<java::lang::Object>> contents) { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(contents); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AbstractCollection(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ABSTRACTCOLLECTION
