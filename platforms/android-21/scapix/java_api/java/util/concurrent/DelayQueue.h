// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractQueue.h>
#include <scapix/java_api/java/util/concurrent/BlockingQueue.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYQUEUE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYQUEUE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class DelayQueue; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::DelayQueue>
{
	static constexpr fixed_string class_name = "java/util/concurrent/DelayQueue";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractQueue, scapix::java_api::java::util::concurrent::BlockingQueue>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYQUEUE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYQUEUE)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYQUEUE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Iterator.h>
#include <scapix/java_api/java/util/concurrent/Delayed.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::DelayQueue : public jni::object_base<"java/util/concurrent/DelayQueue",
	java::util::AbstractQueue,
	java::util::concurrent::BlockingQueue>
{
public:

	static jni::ref<java::util::concurrent::DelayQueue> new_object() { return base_::new_object(); }
	static jni::ref<java::util::concurrent::DelayQueue> new_object(jni::ref<java::util::Collection> c) { return base_::new_object(c); }
	jboolean add(jni::ref<java::util::concurrent::Delayed> e) { return call_method<"add", jboolean>(e); }
	jboolean offer(jni::ref<java::util::concurrent::Delayed> e) { return call_method<"offer", jboolean>(e); }
	void put(jni::ref<java::util::concurrent::Delayed> e) { return call_method<"put", void>(e); }
	jboolean offer(jni::ref<java::util::concurrent::Delayed> e, jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"offer", jboolean>(e, timeout, p3); }
	jni::ref<java::util::concurrent::Delayed> poll() { return call_method<"poll", jni::ref<java::util::concurrent::Delayed>>(); }
	jni::ref<java::util::concurrent::Delayed> take() { return call_method<"take", jni::ref<java::util::concurrent::Delayed>>(); }
	jni::ref<java::util::concurrent::Delayed> poll(jlong timeout, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"poll", jni::ref<java::util::concurrent::Delayed>>(timeout, p2); }
	jni::ref<java::util::concurrent::Delayed> peek() { return call_method<"peek", jni::ref<java::util::concurrent::Delayed>>(); }
	jint size() { return call_method<"size", jint>(); }
	jint drainTo(jni::ref<java::util::Collection> c) { return call_method<"drainTo", jint>(c); }
	jint drainTo(jni::ref<java::util::Collection> c, jint maxElements) { return call_method<"drainTo", jint>(c, maxElements); }
	void clear() { return call_method<"clear", void>(); }
	jint remainingCapacity() { return call_method<"remainingCapacity", jint>(); }
	jni::ref<jni::array<java::lang::Object>> toArray() { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(); }
	jni::ref<jni::array<java::lang::Object>> toArray(jni::ref<jni::array<java::lang::Object>> a) { return call_method<"toArray", jni::ref<jni::array<java::lang::Object>>>(a); }
	jboolean remove(jni::ref<java::lang::Object> o) { return call_method<"remove", jboolean>(o); }
	jni::ref<java::util::Iterator> iterator() { return call_method<"iterator", jni::ref<java::util::Iterator>>(); }

protected:

	DelayQueue(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_DELAYQUEUE
