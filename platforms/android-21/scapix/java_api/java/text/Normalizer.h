// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_TEXT_NORMALIZER_FWD
#define SCAPIX_JAVA_API_JAVA_TEXT_NORMALIZER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::text { class Normalizer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::text::Normalizer>
{
	static constexpr fixed_string class_name = "java/text/Normalizer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_NORMALIZER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TEXT_NORMALIZER)
#define SCAPIX_JAVA_API_JAVA_TEXT_NORMALIZER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/Normalizer_Form.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::text::Normalizer : public jni::object_base<"java/text/Normalizer",
	java::lang::Object>
{
public:

	using Form = Normalizer_Form;

	static jboolean isNormalized(jni::ref<java::lang::CharSequence> src, jni::ref<java::text::Normalizer_Form> form) { return call_static_method<"isNormalized", jboolean>(src, form); }
	static jni::ref<java::lang::String> normalize(jni::ref<java::lang::CharSequence> src, jni::ref<java::text::Normalizer_Form> form) { return call_static_method<"normalize", jni::ref<java::lang::String>>(src, form); }

protected:

	Normalizer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_NORMALIZER
