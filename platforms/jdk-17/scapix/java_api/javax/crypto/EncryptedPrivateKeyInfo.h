// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVAX_CRYPTO_ENCRYPTEDPRIVATEKEYINFO_FWD
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_ENCRYPTEDPRIVATEKEYINFO_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::javax::crypto { class EncryptedPrivateKeyInfo; }

template<>
struct scapix::jni::object_traits<scapix::java_api::javax::crypto::EncryptedPrivateKeyInfo>
{
	static constexpr fixed_string class_name = "javax/crypto/EncryptedPrivateKeyInfo";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_ENCRYPTEDPRIVATEKEYINFO_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVAX_CRYPTO_ENCRYPTEDPRIVATEKEYINFO)
#define SCAPIX_JAVA_API_JAVAX_CRYPTO_ENCRYPTEDPRIVATEKEYINFO

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/AlgorithmParameters.h>
#include <scapix/java_api/java/security/Key.h>
#include <scapix/java_api/java/security/Provider.h>
#include <scapix/java_api/java/security/spec/PKCS8EncodedKeySpec.h>
#include <scapix/java_api/javax/crypto/Cipher.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class javax::crypto::EncryptedPrivateKeyInfo : public jni::object_base<"javax/crypto/EncryptedPrivateKeyInfo",
	java::lang::Object>
{
public:

	static jni::ref<javax::crypto::EncryptedPrivateKeyInfo> new_object(jni::ref<jni::array<jbyte>> encoded) { return base_::new_object(encoded); }
	static jni::ref<javax::crypto::EncryptedPrivateKeyInfo> new_object(jni::ref<java::lang::String> algName, jni::ref<jni::array<jbyte>> encryptedData) { return base_::new_object(algName, encryptedData); }
	static jni::ref<javax::crypto::EncryptedPrivateKeyInfo> new_object(jni::ref<java::security::AlgorithmParameters> algParams, jni::ref<jni::array<jbyte>> encryptedData) { return base_::new_object(algParams, encryptedData); }
	jni::ref<java::lang::String> getAlgName() { return call_method<"getAlgName", jni::ref<java::lang::String>>(); }
	jni::ref<java::security::AlgorithmParameters> getAlgParameters() { return call_method<"getAlgParameters", jni::ref<java::security::AlgorithmParameters>>(); }
	jni::ref<jni::array<jbyte>> getEncryptedData() { return call_method<"getEncryptedData", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<java::security::spec::PKCS8EncodedKeySpec> getKeySpec(jni::ref<javax::crypto::Cipher> cipher) { return call_method<"getKeySpec", jni::ref<java::security::spec::PKCS8EncodedKeySpec>>(cipher); }
	jni::ref<java::security::spec::PKCS8EncodedKeySpec> getKeySpec(jni::ref<java::security::Key> decryptKey) { return call_method<"getKeySpec", jni::ref<java::security::spec::PKCS8EncodedKeySpec>>(decryptKey); }
	jni::ref<java::security::spec::PKCS8EncodedKeySpec> getKeySpec(jni::ref<java::security::Key> decryptKey, jni::ref<java::lang::String> providerName) { return call_method<"getKeySpec", jni::ref<java::security::spec::PKCS8EncodedKeySpec>>(decryptKey, providerName); }
	jni::ref<java::security::spec::PKCS8EncodedKeySpec> getKeySpec(jni::ref<java::security::Key> decryptKey, jni::ref<java::security::Provider> provider) { return call_method<"getKeySpec", jni::ref<java::security::spec::PKCS8EncodedKeySpec>>(decryptKey, provider); }
	jni::ref<jni::array<jbyte>> getEncoded() { return call_method<"getEncoded", jni::ref<jni::array<jbyte>>>(); }

protected:

	EncryptedPrivateKeyInfo(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVAX_CRYPTO_ENCRYPTEDPRIVATEKEYINFO
