// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/OutputStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class Socket_SocketOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::Socket_SocketOutputStream>
{
	static constexpr fixed_string class_name = "java/net/Socket$SocketOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::OutputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETOUTPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETOUTPUTSTREAM

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::net::Socket_SocketOutputStream : public jni::object_base<"java/net/Socket$SocketOutputStream",
	java::io::OutputStream>
{
public:

	void write(jint b) { return call_method<"write", void>(b); }
	void write(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"write", void>(b, off, len); }
	void close() { return call_method<"close", void>(); }

protected:

	Socket_SocketOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKET_SOCKETOUTPUTSTREAM
