// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/FileOutputStream.h>

#ifndef SCAPIX_JAVA_API_JAVA_NET_SOCKETOUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_JAVA_NET_SOCKETOUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::net { class SocketOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::net::SocketOutputStream>
{
	static constexpr fixed_string class_name = "java/net/SocketOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::FileOutputStream>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKETOUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NET_SOCKETOUTPUTSTREAM)
#define SCAPIX_JAVA_API_JAVA_NET_SOCKETOUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/channels/FileChannel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::net::SocketOutputStream : public jni::object_base<"java/net/SocketOutputStream",
	java::io::FileOutputStream>
{
public:

	jni::ref<java::nio::channels::FileChannel> getChannel() { return call_method<"getChannel", jni::ref<java::nio::channels::FileChannel>>(); }
	void write(jint b) { return call_method<"write", void>(b); }
	void write(jni::ref<jni::array<jbyte>> b) { return call_method<"write", void>(b); }
	void write(jni::ref<jni::array<jbyte>> b, jint off, jint len) { return call_method<"write", void>(b, off, len); }
	void close() { return call_method<"close", void>(); }

protected:

	SocketOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NET_SOCKETOUTPUTSTREAM
