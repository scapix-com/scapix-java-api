// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATORFACTORY_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATORFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::random { class RandomGeneratorFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::random::RandomGeneratorFactory>
{
	static constexpr fixed_string class_name = "java/util/random/RandomGeneratorFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATORFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATORFACTORY)
#define SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATORFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/util/random/RandomGenerator.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::random::RandomGeneratorFactory : public jni::object_base<"java/util/random/RandomGeneratorFactory",
	java::lang::Object>
{
public:

	static jni::ref<java::util::random::RandomGeneratorFactory> of(jni::ref<java::lang::String> name) { return call_static_method<"of", jni::ref<java::util::random::RandomGeneratorFactory>>(name); }
	static jni::ref<java::util::random::RandomGeneratorFactory> getDefault() { return call_static_method<"getDefault", jni::ref<java::util::random::RandomGeneratorFactory>>(); }
	static jni::ref<java::util::stream::Stream> all() { return call_static_method<"all", jni::ref<java::util::stream::Stream>>(); }
	jni::ref<java::lang::String> name() { return call_method<"name", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> group() { return call_method<"group", jni::ref<java::lang::String>>(); }
	jint stateBits() { return call_method<"stateBits", jint>(); }
	jint equidistribution() { return call_method<"equidistribution", jint>(); }
	jni::ref<java::math::BigInteger> period() { return call_method<"period", jni::ref<java::math::BigInteger>>(); }
	jboolean isStatistical() { return call_method<"isStatistical", jboolean>(); }
	jboolean isStochastic() { return call_method<"isStochastic", jboolean>(); }
	jboolean isHardware() { return call_method<"isHardware", jboolean>(); }
	jboolean isArbitrarilyJumpable() { return call_method<"isArbitrarilyJumpable", jboolean>(); }
	jboolean isJumpable() { return call_method<"isJumpable", jboolean>(); }
	jboolean isLeapable() { return call_method<"isLeapable", jboolean>(); }
	jboolean isSplittable() { return call_method<"isSplittable", jboolean>(); }
	jboolean isStreamable() { return call_method<"isStreamable", jboolean>(); }
	jboolean isDeprecated() { return call_method<"isDeprecated", jboolean>(); }
	jni::ref<java::util::random::RandomGenerator> create() { return call_method<"create", jni::ref<java::util::random::RandomGenerator>>(); }
	jni::ref<java::util::random::RandomGenerator> create(jlong seed) { return call_method<"create", jni::ref<java::util::random::RandomGenerator>>(seed); }
	jni::ref<java::util::random::RandomGenerator> create(jni::ref<jni::array<jbyte>> seed) { return call_method<"create", jni::ref<java::util::random::RandomGenerator>>(seed); }

protected:

	RandomGeneratorFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_RANDOM_RANDOMGENERATORFACTORY
