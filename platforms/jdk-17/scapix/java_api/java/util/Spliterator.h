// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATOR_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Spliterator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Spliterator>
{
	static constexpr fixed_string class_name = "java/util/Spliterator";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATOR)
#define SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/Spliterator_OfDouble.h>
#include <scapix/java_api/java/util/Spliterator_OfLong.h>
#include <scapix/java_api/java/util/Spliterator_OfInt.h>
#include <scapix/java_api/java/util/Spliterator_OfPrimitive.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Spliterator : public jni::object_base<"java/util/Spliterator",
	java::lang::Object>
{
public:

	using OfDouble = Spliterator_OfDouble;
	using OfLong = Spliterator_OfLong;
	using OfInt = Spliterator_OfInt;
	using OfPrimitive = Spliterator_OfPrimitive;

	static jint ORDERED() { return get_static_field<"ORDERED", jint>(); }
	static jint DISTINCT() { return get_static_field<"DISTINCT", jint>(); }
	static jint SORTED() { return get_static_field<"SORTED", jint>(); }
	static jint SIZED() { return get_static_field<"SIZED", jint>(); }
	static jint NONNULL() { return get_static_field<"NONNULL", jint>(); }
	static jint IMMUTABLE() { return get_static_field<"IMMUTABLE", jint>(); }
	static jint CONCURRENT() { return get_static_field<"CONCURRENT", jint>(); }
	static jint SUBSIZED() { return get_static_field<"SUBSIZED", jint>(); }

	jboolean tryAdvance(jni::ref<java::util::function::Consumer> p1) { return call_method<"tryAdvance", jboolean>(p1); }
	void forEachRemaining(jni::ref<java::util::function::Consumer> action) { return call_method<"forEachRemaining", void>(action); }
	jni::ref<java::util::Spliterator> trySplit() { return call_method<"trySplit", jni::ref<java::util::Spliterator>>(); }
	jlong estimateSize() { return call_method<"estimateSize", jlong>(); }
	jlong getExactSizeIfKnown() { return call_method<"getExactSizeIfKnown", jlong>(); }
	jint characteristics() { return call_method<"characteristics", jint>(); }
	jboolean hasCharacteristics(jint characteristics) { return call_method<"hasCharacteristics", jboolean>(characteristics); }
	jni::ref<java::util::Comparator> getComparator() { return call_method<"getComparator", jni::ref<java::util::Comparator>>(); }

protected:

	Spliterator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_SPLITERATOR
