// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_ATOMICINTEGERFIELDUPDATERIMPL_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_ATOMICINTEGERFIELDUPDATERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::atomic { class AtomicIntegerFieldUpdater_AtomicIntegerFieldUpdaterImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::atomic::AtomicIntegerFieldUpdater_AtomicIntegerFieldUpdaterImpl>
{
	static constexpr fixed_string class_name = "java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl";
	using base_classes = std::tuple<scapix::java_api::java::util::concurrent::atomic::AtomicIntegerFieldUpdater>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_ATOMICINTEGERFIELDUPDATERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_ATOMICINTEGERFIELDUPDATERIMPL)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_ATOMICINTEGERFIELDUPDATERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::concurrent::atomic::AtomicIntegerFieldUpdater_AtomicIntegerFieldUpdaterImpl : public jni::object_base<"java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl",
	java::util::concurrent::atomic::AtomicIntegerFieldUpdater>
{
public:

	jboolean compareAndSet(jni::ref<java::lang::Object> obj, jint expect, jint update) { return call_method<"compareAndSet", jboolean>(obj, expect, update); }
	jboolean weakCompareAndSet(jni::ref<java::lang::Object> obj, jint expect, jint update) { return call_method<"weakCompareAndSet", jboolean>(obj, expect, update); }
	void set(jni::ref<java::lang::Object> obj, jint newValue) { return call_method<"set", void>(obj, newValue); }
	void lazySet(jni::ref<java::lang::Object> obj, jint newValue) { return call_method<"lazySet", void>(obj, newValue); }
	jint get(jni::ref<java::lang::Object> obj) { return call_method<"get", jint>(obj); }
	jint getAndSet(jni::ref<java::lang::Object> obj, jint newValue) { return call_method<"getAndSet", jint>(obj, newValue); }
	jint getAndAdd(jni::ref<java::lang::Object> obj, jint delta) { return call_method<"getAndAdd", jint>(obj, delta); }
	jint getAndIncrement(jni::ref<java::lang::Object> obj) { return call_method<"getAndIncrement", jint>(obj); }
	jint getAndDecrement(jni::ref<java::lang::Object> obj) { return call_method<"getAndDecrement", jint>(obj); }
	jint incrementAndGet(jni::ref<java::lang::Object> obj) { return call_method<"incrementAndGet", jint>(obj); }
	jint decrementAndGet(jni::ref<java::lang::Object> obj) { return call_method<"decrementAndGet", jint>(obj); }
	jint addAndGet(jni::ref<java::lang::Object> obj, jint delta) { return call_method<"addAndGet", jint>(obj, delta); }

protected:

	AtomicIntegerFieldUpdater_AtomicIntegerFieldUpdaterImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICINTEGERFIELDUPDATER_ATOMICINTEGERFIELDUPDATERIMPL
