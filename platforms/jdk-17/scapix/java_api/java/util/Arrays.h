// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class Arrays; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::Arrays>
{
	static constexpr fixed_string class_name = "java/util/Arrays";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS)
#define SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Comparator.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/Spliterator_OfDouble.h>
#include <scapix/java_api/java/util/Spliterator_OfInt.h>
#include <scapix/java_api/java/util/Spliterator_OfLong.h>
#include <scapix/java_api/java/util/function/BinaryOperator.h>
#include <scapix/java_api/java/util/function/DoubleBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntBinaryOperator.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/function/IntToDoubleFunction.h>
#include <scapix/java_api/java/util/function/IntToLongFunction.h>
#include <scapix/java_api/java/util/function/IntUnaryOperator.h>
#include <scapix/java_api/java/util/function/LongBinaryOperator.h>
#include <scapix/java_api/java/util/stream/DoubleStream.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#include <scapix/java_api/java/util/stream/LongStream.h>
#include <scapix/java_api/java/util/stream/Stream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::Arrays : public jni::object_base<"java/util/Arrays",
	java::lang::Object>
{
public:

	static void sort(jni::ref<jni::array<jint>> a) { return call_static_method<"sort", void>(a); }
	static void sort(jni::ref<jni::array<jint>> a, jint fromIndex, jint toIndex) { return call_static_method<"sort", void>(a, fromIndex, toIndex); }
	static void sort(jni::ref<jni::array<jlong>> a) { return call_static_method<"sort", void>(a); }
	static void sort(jni::ref<jni::array<jlong>> a, jint fromIndex, jint toIndex) { return call_static_method<"sort", void>(a, fromIndex, toIndex); }
	static void sort(jni::ref<jni::array<jshort>> a) { return call_static_method<"sort", void>(a); }
	static void sort(jni::ref<jni::array<jshort>> a, jint fromIndex, jint toIndex) { return call_static_method<"sort", void>(a, fromIndex, toIndex); }
	static void sort(jni::ref<jni::array<jchar>> a) { return call_static_method<"sort", void>(a); }
	static void sort(jni::ref<jni::array<jchar>> a, jint fromIndex, jint toIndex) { return call_static_method<"sort", void>(a, fromIndex, toIndex); }
	static void sort(jni::ref<jni::array<jbyte>> a) { return call_static_method<"sort", void>(a); }
	static void sort(jni::ref<jni::array<jbyte>> a, jint fromIndex, jint toIndex) { return call_static_method<"sort", void>(a, fromIndex, toIndex); }
	static void sort(jni::ref<jni::array<jfloat>> a) { return call_static_method<"sort", void>(a); }
	static void sort(jni::ref<jni::array<jfloat>> a, jint fromIndex, jint toIndex) { return call_static_method<"sort", void>(a, fromIndex, toIndex); }
	static void sort(jni::ref<jni::array<jdouble>> a) { return call_static_method<"sort", void>(a); }
	static void sort(jni::ref<jni::array<jdouble>> a, jint fromIndex, jint toIndex) { return call_static_method<"sort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<jbyte>> a) { return call_static_method<"parallelSort", void>(a); }
	static void parallelSort(jni::ref<jni::array<jbyte>> a, jint fromIndex, jint toIndex) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<jchar>> a) { return call_static_method<"parallelSort", void>(a); }
	static void parallelSort(jni::ref<jni::array<jchar>> a, jint fromIndex, jint toIndex) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<jshort>> a) { return call_static_method<"parallelSort", void>(a); }
	static void parallelSort(jni::ref<jni::array<jshort>> a, jint fromIndex, jint toIndex) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<jint>> a) { return call_static_method<"parallelSort", void>(a); }
	static void parallelSort(jni::ref<jni::array<jint>> a, jint fromIndex, jint toIndex) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<jlong>> a) { return call_static_method<"parallelSort", void>(a); }
	static void parallelSort(jni::ref<jni::array<jlong>> a, jint fromIndex, jint toIndex) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<jfloat>> a) { return call_static_method<"parallelSort", void>(a); }
	static void parallelSort(jni::ref<jni::array<jfloat>> a, jint fromIndex, jint toIndex) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<jdouble>> a) { return call_static_method<"parallelSort", void>(a); }
	static void parallelSort(jni::ref<jni::array<jdouble>> a, jint fromIndex, jint toIndex) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<java::lang::Comparable>> a) { return call_static_method<"parallelSort", void>(a); }
	static void parallelSort(jni::ref<jni::array<java::lang::Comparable>> a, jint fromIndex, jint toIndex) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex); }
	static void parallelSort(jni::ref<jni::array<java::lang::Object>> a, jni::ref<java::util::Comparator> cmp) { return call_static_method<"parallelSort", void>(a, cmp); }
	static void parallelSort(jni::ref<jni::array<java::lang::Object>> a, jint fromIndex, jint toIndex, jni::ref<java::util::Comparator> cmp) { return call_static_method<"parallelSort", void>(a, fromIndex, toIndex, cmp); }
	static void sort(jni::ref<jni::array<java::lang::Object>> a) { return call_static_method<"sort", void>(a); }
	static void sort(jni::ref<jni::array<java::lang::Object>> a, jint fromIndex, jint toIndex) { return call_static_method<"sort", void>(a, fromIndex, toIndex); }
	static void sort(jni::ref<jni::array<java::lang::Object>> a, jni::ref<java::util::Comparator> c) { return call_static_method<"sort", void>(a, c); }
	static void sort(jni::ref<jni::array<java::lang::Object>> a, jint fromIndex, jint toIndex, jni::ref<java::util::Comparator> c) { return call_static_method<"sort", void>(a, fromIndex, toIndex, c); }
	static void parallelPrefix(jni::ref<jni::array<java::lang::Object>> array, jni::ref<java::util::function::BinaryOperator> op) { return call_static_method<"parallelPrefix", void>(array, op); }
	static void parallelPrefix(jni::ref<jni::array<java::lang::Object>> array, jint fromIndex, jint toIndex, jni::ref<java::util::function::BinaryOperator> op) { return call_static_method<"parallelPrefix", void>(array, fromIndex, toIndex, op); }
	static void parallelPrefix(jni::ref<jni::array<jlong>> array, jni::ref<java::util::function::LongBinaryOperator> op) { return call_static_method<"parallelPrefix", void>(array, op); }
	static void parallelPrefix(jni::ref<jni::array<jlong>> array, jint fromIndex, jint toIndex, jni::ref<java::util::function::LongBinaryOperator> op) { return call_static_method<"parallelPrefix", void>(array, fromIndex, toIndex, op); }
	static void parallelPrefix(jni::ref<jni::array<jdouble>> array, jni::ref<java::util::function::DoubleBinaryOperator> op) { return call_static_method<"parallelPrefix", void>(array, op); }
	static void parallelPrefix(jni::ref<jni::array<jdouble>> array, jint fromIndex, jint toIndex, jni::ref<java::util::function::DoubleBinaryOperator> op) { return call_static_method<"parallelPrefix", void>(array, fromIndex, toIndex, op); }
	static void parallelPrefix(jni::ref<jni::array<jint>> array, jni::ref<java::util::function::IntBinaryOperator> op) { return call_static_method<"parallelPrefix", void>(array, op); }
	static void parallelPrefix(jni::ref<jni::array<jint>> array, jint fromIndex, jint toIndex, jni::ref<java::util::function::IntBinaryOperator> op) { return call_static_method<"parallelPrefix", void>(array, fromIndex, toIndex, op); }
	static jint binarySearch(jni::ref<jni::array<jlong>> a, jlong key) { return call_static_method<"binarySearch", jint>(a, key); }
	static jint binarySearch(jni::ref<jni::array<jlong>> a, jint fromIndex, jint toIndex, jlong key) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key); }
	static jint binarySearch(jni::ref<jni::array<jint>> a, jint key) { return call_static_method<"binarySearch", jint>(a, key); }
	static jint binarySearch(jni::ref<jni::array<jint>> a, jint fromIndex, jint toIndex, jint key) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key); }
	static jint binarySearch(jni::ref<jni::array<jshort>> a, jshort key) { return call_static_method<"binarySearch", jint>(a, key); }
	static jint binarySearch(jni::ref<jni::array<jshort>> a, jint fromIndex, jint toIndex, jshort key) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key); }
	static jint binarySearch(jni::ref<jni::array<jchar>> a, jchar key) { return call_static_method<"binarySearch", jint>(a, key); }
	static jint binarySearch(jni::ref<jni::array<jchar>> a, jint fromIndex, jint toIndex, jchar key) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key); }
	static jint binarySearch(jni::ref<jni::array<jbyte>> a, jbyte key) { return call_static_method<"binarySearch", jint>(a, key); }
	static jint binarySearch(jni::ref<jni::array<jbyte>> a, jint fromIndex, jint toIndex, jbyte key) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key); }
	static jint binarySearch(jni::ref<jni::array<jdouble>> a, jdouble key) { return call_static_method<"binarySearch", jint>(a, key); }
	static jint binarySearch(jni::ref<jni::array<jdouble>> a, jint fromIndex, jint toIndex, jdouble key) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key); }
	static jint binarySearch(jni::ref<jni::array<jfloat>> a, jfloat key) { return call_static_method<"binarySearch", jint>(a, key); }
	static jint binarySearch(jni::ref<jni::array<jfloat>> a, jint fromIndex, jint toIndex, jfloat key) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> a, jni::ref<java::lang::Object> key) { return call_static_method<"binarySearch", jint>(a, key); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> a, jint fromIndex, jint toIndex, jni::ref<java::lang::Object> key) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> a, jni::ref<java::lang::Object> key, jni::ref<java::util::Comparator> c) { return call_static_method<"binarySearch", jint>(a, key, c); }
	static jint binarySearch(jni::ref<jni::array<java::lang::Object>> a, jint fromIndex, jint toIndex, jni::ref<java::lang::Object> key, jni::ref<java::util::Comparator> c) { return call_static_method<"binarySearch", jint>(a, fromIndex, toIndex, key, c); }
	static jboolean equals(jni::ref<jni::array<jlong>> a, jni::ref<jni::array<jlong>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<jlong>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jlong>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<jint>> a, jni::ref<jni::array<jint>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<jint>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jint>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<jshort>> a, jni::ref<jni::array<jshort>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<jshort>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jshort>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<jchar>> a, jni::ref<jni::array<jchar>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<jchar>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jchar>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<jbyte>> a, jni::ref<jni::array<jbyte>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<jbyte>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jbyte>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<jboolean>> a, jni::ref<jni::array<jboolean>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<jboolean>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jboolean>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<jdouble>> a, jni::ref<jni::array<jdouble>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<jdouble>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jdouble>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<jfloat>> a, jni::ref<jni::array<jfloat>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<jfloat>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jfloat>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<java::lang::Object>> a, jni::ref<jni::array<java::lang::Object>> a2) { return call_static_method<"equals", jboolean>(a, a2); }
	static jboolean equals(jni::ref<jni::array<java::lang::Object>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<java::lang::Object>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jboolean equals(jni::ref<jni::array<java::lang::Object>> a, jni::ref<jni::array<java::lang::Object>> a2, jni::ref<java::util::Comparator> cmp) { return call_static_method<"equals", jboolean>(a, a2, cmp); }
	static jboolean equals(jni::ref<jni::array<java::lang::Object>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<java::lang::Object>> b, jint bFromIndex, jint bToIndex, jni::ref<java::util::Comparator> cmp) { return call_static_method<"equals", jboolean>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex, cmp); }
	static void fill(jni::ref<jni::array<jlong>> a, jlong val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<jlong>> a, jint fromIndex, jint toIndex, jlong val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static void fill(jni::ref<jni::array<jint>> a, jint val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<jint>> a, jint fromIndex, jint toIndex, jint val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static void fill(jni::ref<jni::array<jshort>> a, jshort val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<jshort>> a, jint fromIndex, jint toIndex, jshort val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static void fill(jni::ref<jni::array<jchar>> a, jchar val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<jchar>> a, jint fromIndex, jint toIndex, jchar val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static void fill(jni::ref<jni::array<jbyte>> a, jbyte val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<jbyte>> a, jint fromIndex, jint toIndex, jbyte val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static void fill(jni::ref<jni::array<jboolean>> a, jboolean val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<jboolean>> a, jint fromIndex, jint toIndex, jboolean val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static void fill(jni::ref<jni::array<jdouble>> a, jdouble val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<jdouble>> a, jint fromIndex, jint toIndex, jdouble val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static void fill(jni::ref<jni::array<jfloat>> a, jfloat val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<jfloat>> a, jint fromIndex, jint toIndex, jfloat val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static void fill(jni::ref<jni::array<java::lang::Object>> a, jni::ref<java::lang::Object> val) { return call_static_method<"fill", void>(a, val); }
	static void fill(jni::ref<jni::array<java::lang::Object>> a, jint fromIndex, jint toIndex, jni::ref<java::lang::Object> val) { return call_static_method<"fill", void>(a, fromIndex, toIndex, val); }
	static jni::ref<jni::array<java::lang::Object>> copyOf(jni::ref<jni::array<java::lang::Object>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<java::lang::Object>>>(original, newLength); }
	static jni::ref<jni::array<java::lang::Object>> copyOf(jni::ref<jni::array<java::lang::Object>> original, jint newLength, jni::ref<java::lang::Class> newType) { return call_static_method<"copyOf", jni::ref<jni::array<java::lang::Object>>>(original, newLength, newType); }
	static jni::ref<jni::array<jbyte>> copyOf(jni::ref<jni::array<jbyte>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jbyte>>>(original, newLength); }
	static jni::ref<jni::array<jshort>> copyOf(jni::ref<jni::array<jshort>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jshort>>>(original, newLength); }
	static jni::ref<jni::array<jint>> copyOf(jni::ref<jni::array<jint>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jint>>>(original, newLength); }
	static jni::ref<jni::array<jlong>> copyOf(jni::ref<jni::array<jlong>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jlong>>>(original, newLength); }
	static jni::ref<jni::array<jchar>> copyOf(jni::ref<jni::array<jchar>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jchar>>>(original, newLength); }
	static jni::ref<jni::array<jfloat>> copyOf(jni::ref<jni::array<jfloat>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jfloat>>>(original, newLength); }
	static jni::ref<jni::array<jdouble>> copyOf(jni::ref<jni::array<jdouble>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jdouble>>>(original, newLength); }
	static jni::ref<jni::array<jboolean>> copyOf(jni::ref<jni::array<jboolean>> original, jint newLength) { return call_static_method<"copyOf", jni::ref<jni::array<jboolean>>>(original, newLength); }
	static jni::ref<jni::array<java::lang::Object>> copyOfRange(jni::ref<jni::array<java::lang::Object>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<java::lang::Object>>>(original, from, to); }
	static jni::ref<jni::array<java::lang::Object>> copyOfRange(jni::ref<jni::array<java::lang::Object>> original, jint from, jint to, jni::ref<java::lang::Class> newType) { return call_static_method<"copyOfRange", jni::ref<jni::array<java::lang::Object>>>(original, from, to, newType); }
	static jni::ref<jni::array<jbyte>> copyOfRange(jni::ref<jni::array<jbyte>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<jbyte>>>(original, from, to); }
	static jni::ref<jni::array<jshort>> copyOfRange(jni::ref<jni::array<jshort>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<jshort>>>(original, from, to); }
	static jni::ref<jni::array<jint>> copyOfRange(jni::ref<jni::array<jint>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<jint>>>(original, from, to); }
	static jni::ref<jni::array<jlong>> copyOfRange(jni::ref<jni::array<jlong>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<jlong>>>(original, from, to); }
	static jni::ref<jni::array<jchar>> copyOfRange(jni::ref<jni::array<jchar>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<jchar>>>(original, from, to); }
	static jni::ref<jni::array<jfloat>> copyOfRange(jni::ref<jni::array<jfloat>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<jfloat>>>(original, from, to); }
	static jni::ref<jni::array<jdouble>> copyOfRange(jni::ref<jni::array<jdouble>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<jdouble>>>(original, from, to); }
	static jni::ref<jni::array<jboolean>> copyOfRange(jni::ref<jni::array<jboolean>> original, jint from, jint to) { return call_static_method<"copyOfRange", jni::ref<jni::array<jboolean>>>(original, from, to); }
	static jni::ref<java::util::List> asList(jni::ref<jni::array<java::lang::Object>> a) { return call_static_method<"asList", jni::ref<java::util::List>>(a); }
	static jint hashCode(jni::ref<jni::array<jlong>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint hashCode(jni::ref<jni::array<jint>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint hashCode(jni::ref<jni::array<jshort>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint hashCode(jni::ref<jni::array<jchar>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint hashCode(jni::ref<jni::array<jbyte>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint hashCode(jni::ref<jni::array<jboolean>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint hashCode(jni::ref<jni::array<jfloat>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint hashCode(jni::ref<jni::array<jdouble>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint hashCode(jni::ref<jni::array<java::lang::Object>> a) { return call_static_method<"hashCode", jint>(a); }
	static jint deepHashCode(jni::ref<jni::array<java::lang::Object>> a) { return call_static_method<"deepHashCode", jint>(a); }
	static jboolean deepEquals(jni::ref<jni::array<java::lang::Object>> a1, jni::ref<jni::array<java::lang::Object>> a2) { return call_static_method<"deepEquals", jboolean>(a1, a2); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jlong>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jint>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jshort>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jchar>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jbyte>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jboolean>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jfloat>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<jdouble>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> toString(jni::ref<jni::array<java::lang::Object>> a) { return call_static_method<"toString", jni::ref<java::lang::String>>(a); }
	static jni::ref<java::lang::String> deepToString(jni::ref<jni::array<java::lang::Object>> a) { return call_static_method<"deepToString", jni::ref<java::lang::String>>(a); }
	static void setAll(jni::ref<jni::array<java::lang::Object>> array, jni::ref<java::util::function::IntFunction> generator) { return call_static_method<"setAll", void>(array, generator); }
	static void parallelSetAll(jni::ref<jni::array<java::lang::Object>> array, jni::ref<java::util::function::IntFunction> generator) { return call_static_method<"parallelSetAll", void>(array, generator); }
	static void setAll(jni::ref<jni::array<jint>> array, jni::ref<java::util::function::IntUnaryOperator> generator) { return call_static_method<"setAll", void>(array, generator); }
	static void parallelSetAll(jni::ref<jni::array<jint>> array, jni::ref<java::util::function::IntUnaryOperator> generator) { return call_static_method<"parallelSetAll", void>(array, generator); }
	static void setAll(jni::ref<jni::array<jlong>> array, jni::ref<java::util::function::IntToLongFunction> generator) { return call_static_method<"setAll", void>(array, generator); }
	static void parallelSetAll(jni::ref<jni::array<jlong>> array, jni::ref<java::util::function::IntToLongFunction> generator) { return call_static_method<"parallelSetAll", void>(array, generator); }
	static void setAll(jni::ref<jni::array<jdouble>> array, jni::ref<java::util::function::IntToDoubleFunction> generator) { return call_static_method<"setAll", void>(array, generator); }
	static void parallelSetAll(jni::ref<jni::array<jdouble>> array, jni::ref<java::util::function::IntToDoubleFunction> generator) { return call_static_method<"parallelSetAll", void>(array, generator); }
	static jni::ref<java::util::Spliterator> spliterator(jni::ref<jni::array<java::lang::Object>> array) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator>>(array); }
	static jni::ref<java::util::Spliterator> spliterator(jni::ref<jni::array<java::lang::Object>> array, jint startInclusive, jint endExclusive) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator>>(array, startInclusive, endExclusive); }
	static jni::ref<java::util::Spliterator_OfInt> spliterator(jni::ref<jni::array<jint>> array) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfInt>>(array); }
	static jni::ref<java::util::Spliterator_OfInt> spliterator(jni::ref<jni::array<jint>> array, jint startInclusive, jint endExclusive) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfInt>>(array, startInclusive, endExclusive); }
	static jni::ref<java::util::Spliterator_OfLong> spliterator(jni::ref<jni::array<jlong>> array) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfLong>>(array); }
	static jni::ref<java::util::Spliterator_OfLong> spliterator(jni::ref<jni::array<jlong>> array, jint startInclusive, jint endExclusive) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfLong>>(array, startInclusive, endExclusive); }
	static jni::ref<java::util::Spliterator_OfDouble> spliterator(jni::ref<jni::array<jdouble>> array) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfDouble>>(array); }
	static jni::ref<java::util::Spliterator_OfDouble> spliterator(jni::ref<jni::array<jdouble>> array, jint startInclusive, jint endExclusive) { return call_static_method<"spliterator", jni::ref<java::util::Spliterator_OfDouble>>(array, startInclusive, endExclusive); }
	static jni::ref<java::util::stream::Stream> stream(jni::ref<jni::array<java::lang::Object>> array) { return call_static_method<"stream", jni::ref<java::util::stream::Stream>>(array); }
	static jni::ref<java::util::stream::Stream> stream(jni::ref<jni::array<java::lang::Object>> array, jint startInclusive, jint endExclusive) { return call_static_method<"stream", jni::ref<java::util::stream::Stream>>(array, startInclusive, endExclusive); }
	static jni::ref<java::util::stream::IntStream> stream(jni::ref<jni::array<jint>> array) { return call_static_method<"stream", jni::ref<java::util::stream::IntStream>>(array); }
	static jni::ref<java::util::stream::IntStream> stream(jni::ref<jni::array<jint>> array, jint startInclusive, jint endExclusive) { return call_static_method<"stream", jni::ref<java::util::stream::IntStream>>(array, startInclusive, endExclusive); }
	static jni::ref<java::util::stream::LongStream> stream(jni::ref<jni::array<jlong>> array) { return call_static_method<"stream", jni::ref<java::util::stream::LongStream>>(array); }
	static jni::ref<java::util::stream::LongStream> stream(jni::ref<jni::array<jlong>> array, jint startInclusive, jint endExclusive) { return call_static_method<"stream", jni::ref<java::util::stream::LongStream>>(array, startInclusive, endExclusive); }
	static jni::ref<java::util::stream::DoubleStream> stream(jni::ref<jni::array<jdouble>> array) { return call_static_method<"stream", jni::ref<java::util::stream::DoubleStream>>(array); }
	static jni::ref<java::util::stream::DoubleStream> stream(jni::ref<jni::array<jdouble>> array, jint startInclusive, jint endExclusive) { return call_static_method<"stream", jni::ref<java::util::stream::DoubleStream>>(array, startInclusive, endExclusive); }
	static jint compare(jni::ref<jni::array<jboolean>> a, jni::ref<jni::array<jboolean>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<jboolean>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jboolean>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<jbyte>> a, jni::ref<jni::array<jbyte>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<jbyte>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jbyte>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compareUnsigned(jni::ref<jni::array<jbyte>> a, jni::ref<jni::array<jbyte>> b) { return call_static_method<"compareUnsigned", jint>(a, b); }
	static jint compareUnsigned(jni::ref<jni::array<jbyte>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jbyte>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compareUnsigned", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<jshort>> a, jni::ref<jni::array<jshort>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<jshort>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jshort>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compareUnsigned(jni::ref<jni::array<jshort>> a, jni::ref<jni::array<jshort>> b) { return call_static_method<"compareUnsigned", jint>(a, b); }
	static jint compareUnsigned(jni::ref<jni::array<jshort>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jshort>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compareUnsigned", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<jchar>> a, jni::ref<jni::array<jchar>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<jchar>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jchar>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<jint>> a, jni::ref<jni::array<jint>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<jint>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jint>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compareUnsigned(jni::ref<jni::array<jint>> a, jni::ref<jni::array<jint>> b) { return call_static_method<"compareUnsigned", jint>(a, b); }
	static jint compareUnsigned(jni::ref<jni::array<jint>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jint>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compareUnsigned", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<jlong>> a, jni::ref<jni::array<jlong>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<jlong>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jlong>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compareUnsigned(jni::ref<jni::array<jlong>> a, jni::ref<jni::array<jlong>> b) { return call_static_method<"compareUnsigned", jint>(a, b); }
	static jint compareUnsigned(jni::ref<jni::array<jlong>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jlong>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compareUnsigned", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<jfloat>> a, jni::ref<jni::array<jfloat>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<jfloat>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jfloat>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<jdouble>> a, jni::ref<jni::array<jdouble>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<jdouble>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jdouble>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<java::lang::Comparable>> a, jni::ref<jni::array<java::lang::Comparable>> b) { return call_static_method<"compare", jint>(a, b); }
	static jint compare(jni::ref<jni::array<java::lang::Comparable>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<java::lang::Comparable>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint compare(jni::ref<jni::array<java::lang::Object>> a, jni::ref<jni::array<java::lang::Object>> b, jni::ref<java::util::Comparator> cmp) { return call_static_method<"compare", jint>(a, b, cmp); }
	static jint compare(jni::ref<jni::array<java::lang::Object>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<java::lang::Object>> b, jint bFromIndex, jint bToIndex, jni::ref<java::util::Comparator> cmp) { return call_static_method<"compare", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex, cmp); }
	static jint mismatch(jni::ref<jni::array<jboolean>> a, jni::ref<jni::array<jboolean>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<jboolean>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jboolean>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<jbyte>> a, jni::ref<jni::array<jbyte>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<jbyte>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jbyte>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<jchar>> a, jni::ref<jni::array<jchar>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<jchar>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jchar>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<jshort>> a, jni::ref<jni::array<jshort>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<jshort>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jshort>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<jint>> a, jni::ref<jni::array<jint>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<jint>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jint>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<jlong>> a, jni::ref<jni::array<jlong>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<jlong>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jlong>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<jfloat>> a, jni::ref<jni::array<jfloat>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<jfloat>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jfloat>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<jdouble>> a, jni::ref<jni::array<jdouble>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<jdouble>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<jdouble>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<java::lang::Object>> a, jni::ref<jni::array<java::lang::Object>> b) { return call_static_method<"mismatch", jint>(a, b); }
	static jint mismatch(jni::ref<jni::array<java::lang::Object>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<java::lang::Object>> b, jint bFromIndex, jint bToIndex) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex); }
	static jint mismatch(jni::ref<jni::array<java::lang::Object>> a, jni::ref<jni::array<java::lang::Object>> b, jni::ref<java::util::Comparator> cmp) { return call_static_method<"mismatch", jint>(a, b, cmp); }
	static jint mismatch(jni::ref<jni::array<java::lang::Object>> a, jint aFromIndex, jint aToIndex, jni::ref<jni::array<java::lang::Object>> b, jint bFromIndex, jint bToIndex, jni::ref<java::util::Comparator> cmp) { return call_static_method<"mismatch", jint>(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex, cmp); }

protected:

	Arrays(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ARRAYS
