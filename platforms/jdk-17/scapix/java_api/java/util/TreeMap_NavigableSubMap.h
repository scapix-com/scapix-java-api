// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/AbstractMap.h>
#include <scapix/java_api/java/util/NavigableMap.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_TREEMAP_NAVIGABLESUBMAP_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_TREEMAP_NAVIGABLESUBMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util { class TreeMap_NavigableSubMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::TreeMap_NavigableSubMap>
{
	static constexpr fixed_string class_name = "java/util/TreeMap$NavigableSubMap";
	using base_classes = std::tuple<scapix::java_api::java::util::AbstractMap, scapix::java_api::java::util::NavigableMap, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_TREEMAP_NAVIGABLESUBMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_TREEMAP_NAVIGABLESUBMAP)
#define SCAPIX_JAVA_API_JAVA_UTIL_TREEMAP_NAVIGABLESUBMAP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Map_Entry.h>
#include <scapix/java_api/java/util/NavigableSet.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/SortedMap.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Function.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::TreeMap_NavigableSubMap : public jni::object_base<"java/util/TreeMap$NavigableSubMap",
	java::util::AbstractMap,
	java::util::NavigableMap,
	java::io::Serializable>
{
public:

	jboolean isEmpty() { return call_method<"isEmpty", jboolean>(); }
	jint size() { return call_method<"size", jint>(); }
	jboolean containsKey(jni::ref<java::lang::Object> key) { return call_method<"containsKey", jboolean>(key); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"put", jni::ref<java::lang::Object>>(key, value); }
	jni::ref<java::lang::Object> putIfAbsent(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"putIfAbsent", jni::ref<java::lang::Object>>(key, value); }
	jni::ref<java::lang::Object> merge(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"merge", jni::ref<java::lang::Object>>(key, value, remappingFunction); }
	jni::ref<java::lang::Object> computeIfAbsent(jni::ref<java::lang::Object> key, jni::ref<java::util::function::Function> mappingFunction) { return call_method<"computeIfAbsent", jni::ref<java::lang::Object>>(key, mappingFunction); }
	jni::ref<java::lang::Object> compute(jni::ref<java::lang::Object> key, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"compute", jni::ref<java::lang::Object>>(key, remappingFunction); }
	jni::ref<java::lang::Object> computeIfPresent(jni::ref<java::lang::Object> key, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"computeIfPresent", jni::ref<java::lang::Object>>(key, remappingFunction); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> key) { return call_method<"get", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::lang::Object> remove(jni::ref<java::lang::Object> key) { return call_method<"remove", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::util::Map_Entry> ceilingEntry(jni::ref<java::lang::Object> key) { return call_method<"ceilingEntry", jni::ref<java::util::Map_Entry>>(key); }
	jni::ref<java::lang::Object> ceilingKey(jni::ref<java::lang::Object> key) { return call_method<"ceilingKey", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::util::Map_Entry> higherEntry(jni::ref<java::lang::Object> key) { return call_method<"higherEntry", jni::ref<java::util::Map_Entry>>(key); }
	jni::ref<java::lang::Object> higherKey(jni::ref<java::lang::Object> key) { return call_method<"higherKey", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::util::Map_Entry> floorEntry(jni::ref<java::lang::Object> key) { return call_method<"floorEntry", jni::ref<java::util::Map_Entry>>(key); }
	jni::ref<java::lang::Object> floorKey(jni::ref<java::lang::Object> key) { return call_method<"floorKey", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::util::Map_Entry> lowerEntry(jni::ref<java::lang::Object> key) { return call_method<"lowerEntry", jni::ref<java::util::Map_Entry>>(key); }
	jni::ref<java::lang::Object> lowerKey(jni::ref<java::lang::Object> key) { return call_method<"lowerKey", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::lang::Object> firstKey() { return call_method<"firstKey", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> lastKey() { return call_method<"lastKey", jni::ref<java::lang::Object>>(); }
	jni::ref<java::util::Map_Entry> firstEntry() { return call_method<"firstEntry", jni::ref<java::util::Map_Entry>>(); }
	jni::ref<java::util::Map_Entry> lastEntry() { return call_method<"lastEntry", jni::ref<java::util::Map_Entry>>(); }
	jni::ref<java::util::Map_Entry> pollFirstEntry() { return call_method<"pollFirstEntry", jni::ref<java::util::Map_Entry>>(); }
	jni::ref<java::util::Map_Entry> pollLastEntry() { return call_method<"pollLastEntry", jni::ref<java::util::Map_Entry>>(); }
	jni::ref<java::util::NavigableSet> navigableKeySet() { return call_method<"navigableKeySet", jni::ref<java::util::NavigableSet>>(); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::NavigableSet> descendingKeySet() { return call_method<"descendingKeySet", jni::ref<java::util::NavigableSet>>(); }
	jni::ref<java::util::SortedMap> subMap(jni::ref<java::lang::Object> fromKey, jni::ref<java::lang::Object> toKey) { return call_method<"subMap", jni::ref<java::util::SortedMap>>(fromKey, toKey); }
	jni::ref<java::util::SortedMap> headMap(jni::ref<java::lang::Object> toKey) { return call_method<"headMap", jni::ref<java::util::SortedMap>>(toKey); }
	jni::ref<java::util::SortedMap> tailMap(jni::ref<java::lang::Object> fromKey) { return call_method<"tailMap", jni::ref<java::util::SortedMap>>(fromKey); }

protected:

	TreeMap_NavigableSubMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_TREEMAP_NAVIGABLESUBMAP
