// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/stream/SpinedBuffer_OfDouble.h>
#include <scapix/java_api/java/util/stream/Node_OfDouble.h>
#include <scapix/java_api/java/util/stream/Node_Builder_OfDouble.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_DOUBLESPINEDNODEBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_DOUBLESPINEDNODEBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class Nodes_DoubleSpinedNodeBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::Nodes_DoubleSpinedNodeBuilder>
{
	static constexpr fixed_string class_name = "java/util/stream/Nodes$DoubleSpinedNodeBuilder";
	using base_classes = std::tuple<scapix::java_api::java::util::stream::SpinedBuffer_OfDouble, scapix::java_api::java::util::stream::Node_OfDouble, scapix::java_api::java::util::stream::Node_Builder_OfDouble>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_DOUBLESPINEDNODEBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_DOUBLESPINEDNODEBUILDER)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_DOUBLESPINEDNODEBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Spliterator_OfDouble.h>
#include <scapix/java_api/java/util/function/DoubleConsumer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::Nodes_DoubleSpinedNodeBuilder : public jni::object_base<"java/util/stream/Nodes$DoubleSpinedNodeBuilder",
	java::util::stream::SpinedBuffer_OfDouble,
	java::util::stream::Node_OfDouble,
	java::util::stream::Node_Builder_OfDouble>
{
public:

	jni::ref<java::util::Spliterator_OfDouble> spliterator() { return call_method<"spliterator", jni::ref<java::util::Spliterator_OfDouble>>(); }
	void forEach(jni::ref<java::util::function::DoubleConsumer> consumer) { return call_method<"forEach", void>(consumer); }
	void begin(jlong size) { return call_method<"begin", void>(size); }
	void accept(jdouble i) { return call_method<"accept", void>(i); }
	void end() { return call_method<"end", void>(); }
	void copyInto(jni::ref<jni::array<jdouble>> array, jint offset) { return call_method<"copyInto", void>(array, offset); }
	jni::ref<jni::array<jdouble>> asPrimitiveArray() { return call_method<"asPrimitiveArray", jni::ref<jni::array<jdouble>>>(); }
	jni::ref<java::util::stream::Node_OfDouble> build() { return call_method<"build", jni::ref<java::util::stream::Node_OfDouble>>(); }

protected:

	Nodes_DoubleSpinedNodeBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_DOUBLESPINEDNODEBUILDER
