// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class Nodes; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::Nodes>
{
	static constexpr fixed_string class_name = "java/util/stream/Nodes";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Spliterator.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/stream/Node.h>
#include <scapix/java_api/java/util/stream/Node_OfDouble.h>
#include <scapix/java_api/java/util/stream/Node_OfInt.h>
#include <scapix/java_api/java/util/stream/Node_OfLong.h>
#include <scapix/java_api/java/util/stream/PipelineHelper.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::util::stream::Nodes : public jni::object_base<"java/util/stream/Nodes",
	java::lang::Object>
{
public:

	static jni::ref<java::util::stream::Node> collect(jni::ref<java::util::stream::PipelineHelper> helper, jni::ref<java::util::Spliterator> spliterator, jboolean flattenTree, jni::ref<java::util::function::IntFunction> generator) { return call_static_method<"collect", jni::ref<java::util::stream::Node>>(helper, spliterator, flattenTree, generator); }
	static jni::ref<java::util::stream::Node_OfInt> collectInt(jni::ref<java::util::stream::PipelineHelper> helper, jni::ref<java::util::Spliterator> spliterator, jboolean flattenTree) { return call_static_method<"collectInt", jni::ref<java::util::stream::Node_OfInt>>(helper, spliterator, flattenTree); }
	static jni::ref<java::util::stream::Node_OfLong> collectLong(jni::ref<java::util::stream::PipelineHelper> helper, jni::ref<java::util::Spliterator> spliterator, jboolean flattenTree) { return call_static_method<"collectLong", jni::ref<java::util::stream::Node_OfLong>>(helper, spliterator, flattenTree); }
	static jni::ref<java::util::stream::Node_OfDouble> collectDouble(jni::ref<java::util::stream::PipelineHelper> helper, jni::ref<java::util::Spliterator> spliterator, jboolean flattenTree) { return call_static_method<"collectDouble", jni::ref<java::util::stream::Node_OfDouble>>(helper, spliterator, flattenTree); }
	static jni::ref<java::util::stream::Node> flatten(jni::ref<java::util::stream::Node> node, jni::ref<java::util::function::IntFunction> generator) { return call_static_method<"flatten", jni::ref<java::util::stream::Node>>(node, generator); }
	static jni::ref<java::util::stream::Node_OfInt> flattenInt(jni::ref<java::util::stream::Node_OfInt> node) { return call_static_method<"flattenInt", jni::ref<java::util::stream::Node_OfInt>>(node); }
	static jni::ref<java::util::stream::Node_OfLong> flattenLong(jni::ref<java::util::stream::Node_OfLong> node) { return call_static_method<"flattenLong", jni::ref<java::util::stream::Node_OfLong>>(node); }
	static jni::ref<java::util::stream::Node_OfDouble> flattenDouble(jni::ref<java::util::stream::Node_OfDouble> node) { return call_static_method<"flattenDouble", jni::ref<java::util::stream::Node_OfDouble>>(node); }

protected:

	Nodes(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODES
