// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/stream/Node_OfPrimitive.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_OFINT_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_OFINT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::stream { class Node_OfInt; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::stream::Node_OfInt>
{
	static constexpr fixed_string class_name = "java/util/stream/Node$OfInt";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::stream::Node_OfPrimitive>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_OFINT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_OFINT)
#define SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_OFINT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/util/function/Consumer.h>
#include <scapix/java_api/java/util/function/IntFunction.h>
#include <scapix/java_api/java/util/stream/StreamShape.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::stream::Node_OfInt : public jni::object_base<"java/util/stream/Node$OfInt",
	java::lang::Object,
	java::util::stream::Node_OfPrimitive>
{
public:

	void forEach(jni::ref<java::util::function::Consumer> consumer) { return call_method<"forEach", void>(consumer); }
	void copyInto(jni::ref<jni::array<java::lang::Integer>> boxed, jint offset) { return call_method<"copyInto", void>(boxed, offset); }
	jni::ref<java::util::stream::Node_OfInt> truncate(jlong from, jlong p2, jni::ref<java::util::function::IntFunction> to) { return call_method<"truncate", jni::ref<java::util::stream::Node_OfInt>>(from, p2, to); }
	jni::ref<jni::array<jint>> newArray(jint count) { return call_method<"newArray", jni::ref<jni::array<jint>>>(count); }
	jni::ref<java::util::stream::StreamShape> getShape() { return call_method<"getShape", jni::ref<java::util::stream::StreamShape>>(); }

protected:

	Node_OfInt(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_STREAM_NODE_OFINT
