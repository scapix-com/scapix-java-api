// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_NAME_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_NAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::jar { class Attributes_Name; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::jar::Attributes_Name>
{
	static constexpr fixed_string class_name = "java/util/jar/Attributes$Name";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_NAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_NAME)
#define SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_NAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::jar::Attributes_Name : public jni::object_base<"java/util/jar/Attributes$Name",
	java::lang::Object>
{
public:

	static jni::ref<java::util::jar::Attributes_Name> MANIFEST_VERSION() { return get_static_field<"MANIFEST_VERSION", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> SIGNATURE_VERSION() { return get_static_field<"SIGNATURE_VERSION", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> CONTENT_TYPE() { return get_static_field<"CONTENT_TYPE", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> CLASS_PATH() { return get_static_field<"CLASS_PATH", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> MAIN_CLASS() { return get_static_field<"MAIN_CLASS", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> SEALED() { return get_static_field<"SEALED", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> EXTENSION_LIST() { return get_static_field<"EXTENSION_LIST", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> EXTENSION_NAME() { return get_static_field<"EXTENSION_NAME", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> EXTENSION_INSTALLATION() { return get_static_field<"EXTENSION_INSTALLATION", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> IMPLEMENTATION_TITLE() { return get_static_field<"IMPLEMENTATION_TITLE", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> IMPLEMENTATION_VERSION() { return get_static_field<"IMPLEMENTATION_VERSION", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> IMPLEMENTATION_VENDOR() { return get_static_field<"IMPLEMENTATION_VENDOR", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> IMPLEMENTATION_VENDOR_ID() { return get_static_field<"IMPLEMENTATION_VENDOR_ID", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> IMPLEMENTATION_URL() { return get_static_field<"IMPLEMENTATION_URL", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> SPECIFICATION_TITLE() { return get_static_field<"SPECIFICATION_TITLE", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> SPECIFICATION_VERSION() { return get_static_field<"SPECIFICATION_VERSION", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> SPECIFICATION_VENDOR() { return get_static_field<"SPECIFICATION_VENDOR", jni::ref<java::util::jar::Attributes_Name>>(); }
	static jni::ref<java::util::jar::Attributes_Name> MULTI_RELEASE() { return get_static_field<"MULTI_RELEASE", jni::ref<java::util::jar::Attributes_Name>>(); }

	static jni::ref<java::util::jar::Attributes_Name> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	Attributes_Name(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_JAR_ATTRIBUTES_NAME
