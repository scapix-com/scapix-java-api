// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/Reader.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_INPUTSTREAMREADER_FWD
#define SCAPIX_JAVA_API_JAVA_IO_INPUTSTREAMREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class InputStreamReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::InputStreamReader>
{
	static constexpr fixed_string class_name = "java/io/InputStreamReader";
	using base_classes = std::tuple<scapix::java_api::java::io::Reader>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_INPUTSTREAMREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_INPUTSTREAMREADER)
#define SCAPIX_JAVA_API_JAVA_IO_INPUTSTREAMREADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/CharBuffer.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#include <scapix/java_api/java/nio/charset/CharsetDecoder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::InputStreamReader : public jni::object_base<"java/io/InputStreamReader",
	java::io::Reader>
{
public:

	static jni::ref<java::io::InputStreamReader> new_object(jni::ref<java::io::InputStream> in) { return base_::new_object(in); }
	static jni::ref<java::io::InputStreamReader> new_object(jni::ref<java::io::InputStream> in, jni::ref<java::lang::String> charsetName) { return base_::new_object(in, charsetName); }
	static jni::ref<java::io::InputStreamReader> new_object(jni::ref<java::io::InputStream> in, jni::ref<java::nio::charset::Charset> cs) { return base_::new_object(in, cs); }
	static jni::ref<java::io::InputStreamReader> new_object(jni::ref<java::io::InputStream> in, jni::ref<java::nio::charset::CharsetDecoder> dec) { return base_::new_object(in, dec); }
	jni::ref<java::lang::String> getEncoding() { return call_method<"getEncoding", jni::ref<java::lang::String>>(); }
	jint read(jni::ref<java::nio::CharBuffer> target) { return call_method<"read", jint>(target); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jchar>> cbuf, jint off, jint len) { return call_method<"read", jint>(cbuf, off, len); }
	jboolean ready() { return call_method<"ready", jboolean>(); }
	void close() { return call_method<"close", void>(); }

protected:

	InputStreamReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_INPUTSTREAMREADER
