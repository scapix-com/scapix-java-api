// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/invoke/AbstractValidatingLambdaMetafactory.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_INVOKE_INNERCLASSLAMBDAMETAFACTORY_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_INNERCLASSLAMBDAMETAFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::invoke { class InnerClassLambdaMetafactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::invoke::InnerClassLambdaMetafactory>
{
	static constexpr fixed_string class_name = "java/lang/invoke/InnerClassLambdaMetafactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::invoke::AbstractValidatingLambdaMetafactory>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_INNERCLASSLAMBDAMETAFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_INVOKE_INNERCLASSLAMBDAMETAFACTORY)
#define SCAPIX_JAVA_API_JAVA_LANG_INVOKE_INNERCLASSLAMBDAMETAFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodHandle.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::invoke::InnerClassLambdaMetafactory : public jni::object_base<"java/lang/invoke/InnerClassLambdaMetafactory",
	java::lang::invoke::AbstractValidatingLambdaMetafactory>
{
public:

	static jni::ref<java::lang::invoke::InnerClassLambdaMetafactory> new_object(jni::ref<java::lang::invoke::MethodHandles_Lookup> caller, jni::ref<java::lang::invoke::MethodType> factoryType, jni::ref<java::lang::String> interfaceMethodName, jni::ref<java::lang::invoke::MethodType> interfaceMethodType, jni::ref<java::lang::invoke::MethodHandle> implementation, jni::ref<java::lang::invoke::MethodType> dynamicMethodType, jboolean isSerializable, jni::ref<jni::array<java::lang::Class>> altInterfaces, jni::ref<jni::array<java::lang::invoke::MethodType>> altMethods) { return base_::new_object(caller, factoryType, interfaceMethodName, interfaceMethodType, implementation, dynamicMethodType, isSerializable, altInterfaces, altMethods); }

protected:

	InnerClassLambdaMetafactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INVOKE_INNERCLASSLAMBDAMETAFACTORY
