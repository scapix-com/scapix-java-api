// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRINGLATIN1_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGLATIN1_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class StringLatin1; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::StringLatin1>
{
	static constexpr fixed_string class_name = "java/lang/StringLatin1";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGLATIN1_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRINGLATIN1)
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGLATIN1

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::StringLatin1 : public jni::object_base<"java/lang/StringLatin1",
	java::lang::Object>
{
public:

	static jchar charAt(jni::ref<jni::array<jbyte>> value, jint index) { return call_static_method<"charAt", jchar>(value, index); }
	static jboolean canEncode(jint cp) { return call_static_method<"canEncode", jboolean>(cp); }
	static jint length(jni::ref<jni::array<jbyte>> value) { return call_static_method<"length", jint>(value); }
	static jint codePointAt(jni::ref<jni::array<jbyte>> value, jint index, jint end) { return call_static_method<"codePointAt", jint>(value, index, end); }
	static jint codePointBefore(jni::ref<jni::array<jbyte>> value, jint index) { return call_static_method<"codePointBefore", jint>(value, index); }
	static jint codePointCount(jni::ref<jni::array<jbyte>> value, jint beginIndex, jint endIndex) { return call_static_method<"codePointCount", jint>(value, beginIndex, endIndex); }
	static jni::ref<jni::array<jchar>> toChars(jni::ref<jni::array<jbyte>> value) { return call_static_method<"toChars", jni::ref<jni::array<jchar>>>(value); }
	static jni::ref<jni::array<jbyte>> inflate(jni::ref<jni::array<jbyte>> value, jint off, jint len) { return call_static_method<"inflate", jni::ref<jni::array<jbyte>>>(value, off, len); }
	static void getChars(jni::ref<jni::array<jbyte>> value, jint srcBegin, jint srcEnd, jni::ref<jni::array<jchar>> dst, jint dstBegin) { return call_static_method<"getChars", void>(value, srcBegin, srcEnd, dst, dstBegin); }
	static void getBytes(jni::ref<jni::array<jbyte>> value, jint srcBegin, jint srcEnd, jni::ref<jni::array<jbyte>> dst, jint dstBegin) { return call_static_method<"getBytes", void>(value, srcBegin, srcEnd, dst, dstBegin); }
	static jboolean equals(jni::ref<jni::array<jbyte>> value, jni::ref<jni::array<jbyte>> other) { return call_static_method<"equals", jboolean>(value, other); }
	static jint compareTo(jni::ref<jni::array<jbyte>> value, jni::ref<jni::array<jbyte>> other) { return call_static_method<"compareTo", jint>(value, other); }
	static jint compareTo(jni::ref<jni::array<jbyte>> value, jni::ref<jni::array<jbyte>> other, jint len1, jint len2) { return call_static_method<"compareTo", jint>(value, other, len1, len2); }
	static jint compareToUTF16(jni::ref<jni::array<jbyte>> value, jni::ref<jni::array<jbyte>> other) { return call_static_method<"compareToUTF16", jint>(value, other); }
	static jint compareToUTF16(jni::ref<jni::array<jbyte>> value, jni::ref<jni::array<jbyte>> other, jint len1, jint len2) { return call_static_method<"compareToUTF16", jint>(value, other, len1, len2); }
	static jint compareToCI(jni::ref<jni::array<jbyte>> value, jni::ref<jni::array<jbyte>> other) { return call_static_method<"compareToCI", jint>(value, other); }
	static jint compareToCI_UTF16(jni::ref<jni::array<jbyte>> value, jni::ref<jni::array<jbyte>> other) { return call_static_method<"compareToCI_UTF16", jint>(value, other); }
	static jint hashCode(jni::ref<jni::array<jbyte>> value) { return call_static_method<"hashCode", jint>(value); }
	static jint indexOf(jni::ref<jni::array<jbyte>> value, jint ch, jint fromIndex) { return call_static_method<"indexOf", jint>(value, ch, fromIndex); }
	static jint indexOf(jni::ref<jni::array<jbyte>> value, jni::ref<jni::array<jbyte>> str) { return call_static_method<"indexOf", jint>(value, str); }
	static jint indexOf(jni::ref<jni::array<jbyte>> value, jint valueCount, jni::ref<jni::array<jbyte>> str, jint strCount, jint fromIndex) { return call_static_method<"indexOf", jint>(value, valueCount, str, strCount, fromIndex); }
	static jint lastIndexOf(jni::ref<jni::array<jbyte>> src, jint srcCount, jni::ref<jni::array<jbyte>> tgt, jint tgtCount, jint fromIndex) { return call_static_method<"lastIndexOf", jint>(src, srcCount, tgt, tgtCount, fromIndex); }
	static jint lastIndexOf(jni::ref<jni::array<jbyte>> value, jint ch, jint fromIndex) { return call_static_method<"lastIndexOf", jint>(value, ch, fromIndex); }
	static jni::ref<java::lang::String> replace(jni::ref<jni::array<jbyte>> value, jchar oldChar, jchar newChar) { return call_static_method<"replace", jni::ref<java::lang::String>>(value, oldChar, newChar); }
	static jni::ref<java::lang::String> replace(jni::ref<jni::array<jbyte>> value, jint valLen, jni::ref<jni::array<jbyte>> targ, jint targLen, jni::ref<jni::array<jbyte>> repl, jint replLen) { return call_static_method<"replace", jni::ref<java::lang::String>>(value, valLen, targ, targLen, repl, replLen); }
	static jboolean regionMatchesCI(jni::ref<jni::array<jbyte>> value, jint toffset, jni::ref<jni::array<jbyte>> other, jint ooffset, jint len) { return call_static_method<"regionMatchesCI", jboolean>(value, toffset, other, ooffset, len); }
	static jboolean regionMatchesCI_UTF16(jni::ref<jni::array<jbyte>> value, jint toffset, jni::ref<jni::array<jbyte>> other, jint ooffset, jint len) { return call_static_method<"regionMatchesCI_UTF16", jboolean>(value, toffset, other, ooffset, len); }
	static jni::ref<java::lang::String> toLowerCase(jni::ref<java::lang::String> str, jni::ref<jni::array<jbyte>> value, jni::ref<java::util::Locale> locale) { return call_static_method<"toLowerCase", jni::ref<java::lang::String>>(str, value, locale); }
	static jni::ref<java::lang::String> toUpperCase(jni::ref<java::lang::String> str, jni::ref<jni::array<jbyte>> value, jni::ref<java::util::Locale> locale) { return call_static_method<"toUpperCase", jni::ref<java::lang::String>>(str, value, locale); }
	static jni::ref<java::lang::String> trim(jni::ref<jni::array<jbyte>> value) { return call_static_method<"trim", jni::ref<java::lang::String>>(value); }
	static jint indexOfNonWhitespace(jni::ref<jni::array<jbyte>> value) { return call_static_method<"indexOfNonWhitespace", jint>(value); }
	static jint lastIndexOfNonWhitespace(jni::ref<jni::array<jbyte>> value) { return call_static_method<"lastIndexOfNonWhitespace", jint>(value); }
	static jni::ref<java::lang::String> strip(jni::ref<jni::array<jbyte>> value) { return call_static_method<"strip", jni::ref<java::lang::String>>(value); }
	static jni::ref<java::lang::String> stripLeading(jni::ref<jni::array<jbyte>> value) { return call_static_method<"stripLeading", jni::ref<java::lang::String>>(value); }
	static jni::ref<java::lang::String> stripTrailing(jni::ref<jni::array<jbyte>> value) { return call_static_method<"stripTrailing", jni::ref<java::lang::String>>(value); }
	static void putChar(jni::ref<jni::array<jbyte>> val, jint index, jint c) { return call_static_method<"putChar", void>(val, index, c); }
	static jchar getChar(jni::ref<jni::array<jbyte>> val, jint index) { return call_static_method<"getChar", jchar>(val, index); }
	static jni::ref<jni::array<jbyte>> toBytes(jni::ref<jni::array<jint>> val, jint off, jint len) { return call_static_method<"toBytes", jni::ref<jni::array<jbyte>>>(val, off, len); }
	static jni::ref<jni::array<jbyte>> toBytes(jchar c) { return call_static_method<"toBytes", jni::ref<jni::array<jbyte>>>(c); }
	static jni::ref<java::lang::String> newString(jni::ref<jni::array<jbyte>> val, jint index, jint len) { return call_static_method<"newString", jni::ref<java::lang::String>>(val, index, len); }
	static void fillNull(jni::ref<jni::array<jbyte>> val, jint index, jint end) { return call_static_method<"fillNull", void>(val, index, end); }
	static void inflate(jni::ref<jni::array<jbyte>> src, jint srcOff, jni::ref<jni::array<jchar>> dst, jint dstOff, jint len) { return call_static_method<"inflate", void>(src, srcOff, dst, dstOff, len); }
	static void inflate(jni::ref<jni::array<jbyte>> src, jint srcOff, jni::ref<jni::array<jbyte>> dst, jint dstOff, jint len) { return call_static_method<"inflate", void>(src, srcOff, dst, dstOff, len); }

protected:

	StringLatin1(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGLATIN1
