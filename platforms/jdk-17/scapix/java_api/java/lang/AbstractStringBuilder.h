// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/CharSequence.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_ABSTRACTSTRINGBUILDER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_ABSTRACTSTRINGBUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class AbstractStringBuilder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::AbstractStringBuilder>
{
	static constexpr fixed_string class_name = "java/lang/AbstractStringBuilder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::Appendable, scapix::java_api::java::lang::CharSequence>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_ABSTRACTSTRINGBUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_ABSTRACTSTRINGBUILDER)
#define SCAPIX_JAVA_API_JAVA_LANG_ABSTRACTSTRINGBUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/util/stream/IntStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::AbstractStringBuilder : public jni::object_base<"java/lang/AbstractStringBuilder",
	java::lang::Object,
	java::lang::Appendable,
	java::lang::CharSequence>
{
public:

	jint length() { return call_method<"length", jint>(); }
	jint capacity() { return call_method<"capacity", jint>(); }
	void ensureCapacity(jint minimumCapacity) { return call_method<"ensureCapacity", void>(minimumCapacity); }
	void trimToSize() { return call_method<"trimToSize", void>(); }
	void setLength(jint newLength) { return call_method<"setLength", void>(newLength); }
	jchar charAt(jint index) { return call_method<"charAt", jchar>(index); }
	jint codePointAt(jint index) { return call_method<"codePointAt", jint>(index); }
	jint codePointBefore(jint index) { return call_method<"codePointBefore", jint>(index); }
	jint codePointCount(jint beginIndex, jint endIndex) { return call_method<"codePointCount", jint>(beginIndex, endIndex); }
	jint offsetByCodePoints(jint index, jint codePointOffset) { return call_method<"offsetByCodePoints", jint>(index, codePointOffset); }
	void getChars(jint srcBegin, jint srcEnd, jni::ref<jni::array<jchar>> dst, jint dstBegin) { return call_method<"getChars", void>(srcBegin, srcEnd, dst, dstBegin); }
	void setCharAt(jint index, jchar ch) { return call_method<"setCharAt", void>(index, ch); }
	jni::ref<java::lang::AbstractStringBuilder> append(jni::ref<java::lang::Object> obj) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(obj); }
	jni::ref<java::lang::AbstractStringBuilder> append(jni::ref<java::lang::String> str) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(str); }
	jni::ref<java::lang::AbstractStringBuilder> append(jni::ref<java::lang::StringBuffer> sb) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(sb); }
	jni::ref<java::lang::AbstractStringBuilder> append(jni::ref<java::lang::CharSequence> s) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(s); }
	jni::ref<java::lang::AbstractStringBuilder> append(jni::ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(s, start, end); }
	jni::ref<java::lang::AbstractStringBuilder> append(jni::ref<jni::array<jchar>> str) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(str); }
	jni::ref<java::lang::AbstractStringBuilder> append(jni::ref<jni::array<jchar>> str, jint offset, jint len) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(str, offset, len); }
	jni::ref<java::lang::AbstractStringBuilder> append(jboolean b) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(b); }
	jni::ref<java::lang::AbstractStringBuilder> append(jchar c) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(c); }
	jni::ref<java::lang::AbstractStringBuilder> append(jint i) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(i); }
	jni::ref<java::lang::AbstractStringBuilder> append(jlong l) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(l); }
	jni::ref<java::lang::AbstractStringBuilder> append(jfloat f) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(f); }
	jni::ref<java::lang::AbstractStringBuilder> append(jdouble d) { return call_method<"append", jni::ref<java::lang::AbstractStringBuilder>>(d); }
	jni::ref<java::lang::AbstractStringBuilder> delete_(jint start, jint end) { return call_method<"delete", jni::ref<java::lang::AbstractStringBuilder>>(start, end); }
	jni::ref<java::lang::AbstractStringBuilder> appendCodePoint(jint codePoint) { return call_method<"appendCodePoint", jni::ref<java::lang::AbstractStringBuilder>>(codePoint); }
	jni::ref<java::lang::AbstractStringBuilder> deleteCharAt(jint index) { return call_method<"deleteCharAt", jni::ref<java::lang::AbstractStringBuilder>>(index); }
	jni::ref<java::lang::AbstractStringBuilder> replace(jint start, jint end, jni::ref<java::lang::String> str) { return call_method<"replace", jni::ref<java::lang::AbstractStringBuilder>>(start, end, str); }
	jni::ref<java::lang::String> substring(jint start) { return call_method<"substring", jni::ref<java::lang::String>>(start); }
	jni::ref<java::lang::CharSequence> subSequence(jint start, jint end) { return call_method<"subSequence", jni::ref<java::lang::CharSequence>>(start, end); }
	jni::ref<java::lang::String> substring(jint start, jint end) { return call_method<"substring", jni::ref<java::lang::String>>(start, end); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint index, jni::ref<jni::array<jchar>> str, jint offset, jint len) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(index, str, offset, len); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jni::ref<java::lang::Object> obj) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, obj); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jni::ref<java::lang::String> str) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, str); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jni::ref<jni::array<jchar>> str) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, str); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint dstOffset, jni::ref<java::lang::CharSequence> s) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(dstOffset, s); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint dstOffset, jni::ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(dstOffset, s, start, end); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jboolean b) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, b); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jchar c) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, c); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jint i) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, i); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jlong l) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, l); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jfloat f) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, f); }
	jni::ref<java::lang::AbstractStringBuilder> insert(jint offset, jdouble d) { return call_method<"insert", jni::ref<java::lang::AbstractStringBuilder>>(offset, d); }
	jint indexOf(jni::ref<java::lang::String> str) { return call_method<"indexOf", jint>(str); }
	jint indexOf(jni::ref<java::lang::String> str, jint fromIndex) { return call_method<"indexOf", jint>(str, fromIndex); }
	jint lastIndexOf(jni::ref<java::lang::String> str) { return call_method<"lastIndexOf", jint>(str); }
	jint lastIndexOf(jni::ref<java::lang::String> str, jint fromIndex) { return call_method<"lastIndexOf", jint>(str, fromIndex); }
	jni::ref<java::lang::AbstractStringBuilder> reverse() { return call_method<"reverse", jni::ref<java::lang::AbstractStringBuilder>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::stream::IntStream> chars() { return call_method<"chars", jni::ref<java::util::stream::IntStream>>(); }
	jni::ref<java::util::stream::IntStream> codePoints() { return call_method<"codePoints", jni::ref<java::util::stream::IntStream>>(); }

protected:

	AbstractStringBuilder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_ABSTRACTSTRINGBUILDER
