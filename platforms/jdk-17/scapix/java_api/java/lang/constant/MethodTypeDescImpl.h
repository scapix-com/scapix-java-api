// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/constant/MethodTypeDesc.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESCIMPL_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESCIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::constant { class MethodTypeDescImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::constant::MethodTypeDescImpl>
{
	static constexpr fixed_string class_name = "java/lang/constant/MethodTypeDescImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::constant::MethodTypeDesc>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESCIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESCIMPL)
#define SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESCIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::lang::constant::MethodTypeDescImpl : public jni::object_base<"java/lang/constant/MethodTypeDescImpl",
	java::lang::Object,
	java::lang::constant::MethodTypeDesc>
{
public:

	jni::ref<java::lang::constant::ClassDesc> returnType() { return call_method<"returnType", jni::ref<java::lang::constant::ClassDesc>>(); }
	jint parameterCount() { return call_method<"parameterCount", jint>(); }
	jni::ref<java::lang::constant::ClassDesc> parameterType(jint index) { return call_method<"parameterType", jni::ref<java::lang::constant::ClassDesc>>(index); }
	jni::ref<java::util::List> parameterList() { return call_method<"parameterList", jni::ref<java::util::List>>(); }
	jni::ref<jni::array<java::lang::constant::ClassDesc>> parameterArray() { return call_method<"parameterArray", jni::ref<jni::array<java::lang::constant::ClassDesc>>>(); }
	jni::ref<java::lang::constant::MethodTypeDesc> changeReturnType(jni::ref<java::lang::constant::ClassDesc> returnType) { return call_method<"changeReturnType", jni::ref<java::lang::constant::MethodTypeDesc>>(returnType); }
	jni::ref<java::lang::constant::MethodTypeDesc> changeParameterType(jint index, jni::ref<java::lang::constant::ClassDesc> paramType) { return call_method<"changeParameterType", jni::ref<java::lang::constant::MethodTypeDesc>>(index, paramType); }
	jni::ref<java::lang::constant::MethodTypeDesc> dropParameterTypes(jint start, jint end) { return call_method<"dropParameterTypes", jni::ref<java::lang::constant::MethodTypeDesc>>(start, end); }
	jni::ref<java::lang::constant::MethodTypeDesc> insertParameterTypes(jint pos, jni::ref<jni::array<java::lang::constant::ClassDesc>> paramTypes) { return call_method<"insertParameterTypes", jni::ref<java::lang::constant::MethodTypeDesc>>(pos, paramTypes); }
	jni::ref<java::lang::invoke::MethodType> resolveConstantDesc(jni::ref<java::lang::invoke::MethodHandles_Lookup> lookup) { return call_method<"resolveConstantDesc", jni::ref<java::lang::invoke::MethodType>>(lookup); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	MethodTypeDescImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESCIMPL
