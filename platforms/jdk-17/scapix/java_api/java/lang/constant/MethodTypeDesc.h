// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/constant/ConstantDesc.h>
#include <scapix/java_api/java/lang/invoke/TypeDescriptor_OfMethod.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESC_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESC_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::constant { class MethodTypeDesc; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::constant::MethodTypeDesc>
{
	static constexpr fixed_string class_name = "java/lang/constant/MethodTypeDesc";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::constant::ConstantDesc, scapix::java_api::java::lang::invoke::TypeDescriptor_OfMethod>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESC_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESC)
#define SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESC

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/constant/ClassDesc.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::constant::MethodTypeDesc : public jni::object_base<"java/lang/constant/MethodTypeDesc",
	java::lang::Object,
	java::lang::constant::ConstantDesc,
	java::lang::invoke::TypeDescriptor_OfMethod>
{
public:

	static jni::ref<java::lang::constant::MethodTypeDesc> ofDescriptor(jni::ref<java::lang::String> descriptor) { return call_static_method<"ofDescriptor", jni::ref<java::lang::constant::MethodTypeDesc>>(descriptor); }
	static jni::ref<java::lang::constant::MethodTypeDesc> of(jni::ref<java::lang::constant::ClassDesc> returnDesc, jni::ref<jni::array<java::lang::constant::ClassDesc>> paramDescs) { return call_static_method<"of", jni::ref<java::lang::constant::MethodTypeDesc>>(returnDesc, paramDescs); }
	jni::ref<java::lang::constant::ClassDesc> returnType() { return call_method<"returnType", jni::ref<java::lang::constant::ClassDesc>>(); }
	jint parameterCount() { return call_method<"parameterCount", jint>(); }
	jni::ref<java::lang::constant::ClassDesc> parameterType(jint p1) { return call_method<"parameterType", jni::ref<java::lang::constant::ClassDesc>>(p1); }
	jni::ref<java::util::List> parameterList() { return call_method<"parameterList", jni::ref<java::util::List>>(); }
	jni::ref<jni::array<java::lang::constant::ClassDesc>> parameterArray() { return call_method<"parameterArray", jni::ref<jni::array<java::lang::constant::ClassDesc>>>(); }
	jni::ref<java::lang::constant::MethodTypeDesc> changeReturnType(jni::ref<java::lang::constant::ClassDesc> p1) { return call_method<"changeReturnType", jni::ref<java::lang::constant::MethodTypeDesc>>(p1); }
	jni::ref<java::lang::constant::MethodTypeDesc> changeParameterType(jint p1, jni::ref<java::lang::constant::ClassDesc> p2) { return call_method<"changeParameterType", jni::ref<java::lang::constant::MethodTypeDesc>>(p1, p2); }
	jni::ref<java::lang::constant::MethodTypeDesc> dropParameterTypes(jint p1, jint p2) { return call_method<"dropParameterTypes", jni::ref<java::lang::constant::MethodTypeDesc>>(p1, p2); }
	jni::ref<java::lang::constant::MethodTypeDesc> insertParameterTypes(jint p1, jni::ref<jni::array<java::lang::constant::ClassDesc>> p2) { return call_method<"insertParameterTypes", jni::ref<java::lang::constant::MethodTypeDesc>>(p1, p2); }
	jni::ref<java::lang::String> descriptorString() { return call_method<"descriptorString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> displayDescriptor() { return call_method<"displayDescriptor", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> p1) { return call_method<"equals", jboolean>(p1); }

protected:

	MethodTypeDesc(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CONSTANT_METHODTYPEDESC
