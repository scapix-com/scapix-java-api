// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>
#include <scapix/java_api/java/lang/constant/Constable.h>
#include <scapix/java_api/java/lang/constant/ConstantDesc.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_FLOAT_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_FLOAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Float; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Float>
{
	static constexpr fixed_string class_name = "java/lang/Float";
	using base_classes = std::tuple<scapix::java_api::java::lang::Number, scapix::java_api::java::lang::Comparable, scapix::java_api::java::lang::constant::Constable, scapix::java_api::java::lang::constant::ConstantDesc>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_FLOAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_FLOAT)
#define SCAPIX_JAVA_API_JAVA_LANG_FLOAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/invoke/MethodHandles_Lookup.h>
#include <scapix/java_api/java/util/Optional.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Float : public jni::object_base<"java/lang/Float",
	java::lang::Number,
	java::lang::Comparable,
	java::lang::constant::Constable,
	java::lang::constant::ConstantDesc>
{
public:

	static jfloat POSITIVE_INFINITY() { return get_static_field<"POSITIVE_INFINITY", jfloat>(); }
	static jfloat NEGATIVE_INFINITY() { return get_static_field<"NEGATIVE_INFINITY", jfloat>(); }
	static jfloat NaN() { return get_static_field<"NaN", jfloat>(); }
	static jfloat MAX_VALUE() { return get_static_field<"MAX_VALUE", jfloat>(); }
	static jfloat MIN_NORMAL() { return get_static_field<"MIN_NORMAL", jfloat>(); }
	static jfloat MIN_VALUE() { return get_static_field<"MIN_VALUE", jfloat>(); }
	static jint MAX_EXPONENT() { return get_static_field<"MAX_EXPONENT", jint>(); }
	static jint MIN_EXPONENT() { return get_static_field<"MIN_EXPONENT", jint>(); }
	static jint SIZE() { return get_static_field<"SIZE", jint>(); }
	static jint BYTES() { return get_static_field<"BYTES", jint>(); }
	static jni::ref<java::lang::Class> TYPE() { return get_static_field<"TYPE", jni::ref<java::lang::Class>>(); }

	static jni::ref<java::lang::String> toString(jfloat f) { return call_static_method<"toString", jni::ref<java::lang::String>>(f); }
	static jni::ref<java::lang::String> toHexString(jfloat f) { return call_static_method<"toHexString", jni::ref<java::lang::String>>(f); }
	static jni::ref<java::lang::Float> valueOf(jni::ref<java::lang::String> s) { return call_static_method<"valueOf", jni::ref<java::lang::Float>>(s); }
	static jni::ref<java::lang::Float> valueOf(jfloat f) { return call_static_method<"valueOf", jni::ref<java::lang::Float>>(f); }
	static jfloat parseFloat(jni::ref<java::lang::String> s) { return call_static_method<"parseFloat", jfloat>(s); }
	static jboolean isNaN(jfloat v) { return call_static_method<"isNaN", jboolean>(v); }
	static jboolean isInfinite(jfloat v) { return call_static_method<"isInfinite", jboolean>(v); }
	static jboolean isFinite(jfloat f) { return call_static_method<"isFinite", jboolean>(f); }
	static jni::ref<java::lang::Float> new_object(jfloat value) { return base_::new_object(value); }
	static jni::ref<java::lang::Float> new_object(jdouble value) { return base_::new_object(value); }
	static jni::ref<java::lang::Float> new_object(jni::ref<java::lang::String> s) { return base_::new_object(s); }
	jboolean isNaN() { return call_method<"isNaN", jboolean>(); }
	jboolean isInfinite() { return call_method<"isInfinite", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jbyte byteValue() { return call_method<"byteValue", jbyte>(); }
	jshort shortValue() { return call_method<"shortValue", jshort>(); }
	jint intValue() { return call_method<"intValue", jint>(); }
	jlong longValue() { return call_method<"longValue", jlong>(); }
	jfloat floatValue() { return call_method<"floatValue", jfloat>(); }
	jdouble doubleValue() { return call_method<"doubleValue", jdouble>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	static jint hashCode(jfloat value) { return call_static_method<"hashCode", jint>(value); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	static jint floatToIntBits(jfloat value) { return call_static_method<"floatToIntBits", jint>(value); }
	static jint floatToRawIntBits(jfloat p1) { return call_static_method<"floatToRawIntBits", jint>(p1); }
	static jfloat intBitsToFloat(jint p1) { return call_static_method<"intBitsToFloat", jfloat>(p1); }
	jint compareTo(jni::ref<java::lang::Float> anotherFloat) { return call_method<"compareTo", jint>(anotherFloat); }
	static jint compare(jfloat f1, jfloat f2) { return call_static_method<"compare", jint>(f1, f2); }
	static jfloat sum(jfloat a, jfloat b) { return call_static_method<"sum", jfloat>(a, b); }
	static jfloat max(jfloat a, jfloat b) { return call_static_method<"max", jfloat>(a, b); }
	static jfloat min(jfloat a, jfloat b) { return call_static_method<"min", jfloat>(a, b); }
	jni::ref<java::util::Optional> describeConstable() { return call_method<"describeConstable", jni::ref<java::util::Optional>>(); }
	jni::ref<java::lang::Float> resolveConstantDesc(jni::ref<java::lang::invoke::MethodHandles_Lookup> lookup) { return call_method<"resolveConstantDesc", jni::ref<java::lang::Float>>(lookup); }

protected:

	Float(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_FLOAT
