// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ARRAY_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ARRAY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang::reflect { class Array; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::reflect::Array>
{
	static constexpr fixed_string class_name = "java/lang/reflect/Array";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ARRAY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ARRAY)
#define SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ARRAY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::reflect::Array : public jni::object_base<"java/lang/reflect/Array",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::Object> newInstance(jni::ref<java::lang::Class> componentType, jint length) { return call_static_method<"newInstance", jni::ref<java::lang::Object>>(componentType, length); }
	static jni::ref<java::lang::Object> newInstance(jni::ref<java::lang::Class> componentType, jni::ref<jni::array<jint>> dimensions) { return call_static_method<"newInstance", jni::ref<java::lang::Object>>(componentType, dimensions); }
	static jint getLength(jni::ref<java::lang::Object> p1) { return call_static_method<"getLength", jint>(p1); }
	static jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"get", jni::ref<java::lang::Object>>(p1, p2); }
	static jboolean getBoolean(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getBoolean", jboolean>(p1, p2); }
	static jbyte getByte(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getByte", jbyte>(p1, p2); }
	static jchar getChar(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getChar", jchar>(p1, p2); }
	static jshort getShort(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getShort", jshort>(p1, p2); }
	static jint getInt(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getInt", jint>(p1, p2); }
	static jlong getLong(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getLong", jlong>(p1, p2); }
	static jfloat getFloat(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getFloat", jfloat>(p1, p2); }
	static jdouble getDouble(jni::ref<java::lang::Object> p1, jint p2) { return call_static_method<"getDouble", jdouble>(p1, p2); }
	static void set(jni::ref<java::lang::Object> p1, jint p2, jni::ref<java::lang::Object> p3) { return call_static_method<"set", void>(p1, p2, p3); }
	static void setBoolean(jni::ref<java::lang::Object> p1, jint p2, jboolean p3) { return call_static_method<"setBoolean", void>(p1, p2, p3); }
	static void setByte(jni::ref<java::lang::Object> p1, jint p2, jbyte p3) { return call_static_method<"setByte", void>(p1, p2, p3); }
	static void setChar(jni::ref<java::lang::Object> p1, jint p2, jchar p3) { return call_static_method<"setChar", void>(p1, p2, p3); }
	static void setShort(jni::ref<java::lang::Object> p1, jint p2, jshort p3) { return call_static_method<"setShort", void>(p1, p2, p3); }
	static void setInt(jni::ref<java::lang::Object> p1, jint p2, jint p3) { return call_static_method<"setInt", void>(p1, p2, p3); }
	static void setLong(jni::ref<java::lang::Object> p1, jint p2, jlong p3) { return call_static_method<"setLong", void>(p1, p2, p3); }
	static void setFloat(jni::ref<java::lang::Object> p1, jint p2, jfloat p3) { return call_static_method<"setFloat", void>(p1, p2, p3); }
	static void setDouble(jni::ref<java::lang::Object> p1, jint p2, jdouble p3) { return call_static_method<"setDouble", void>(p1, p2, p3); }

protected:

	Array(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_REFLECT_ARRAY
