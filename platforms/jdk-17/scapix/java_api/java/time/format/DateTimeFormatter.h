// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTER_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::format { class DateTimeFormatter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::format::DateTimeFormatter>
{
	static constexpr fixed_string class_name = "java/time/format/DateTimeFormatter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTER)
#define SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/text/Format.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/time/ZoneId.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/format/DecimalStyle.h>
#include <scapix/java_api/java/time/format/FormatStyle.h>
#include <scapix/java_api/java/time/format/ResolverStyle.h>
#include <scapix/java_api/java/time/temporal/TemporalAccessor.h>
#include <scapix/java_api/java/time/temporal/TemporalField.h>
#include <scapix/java_api/java/time/temporal/TemporalQuery.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::time::format::DateTimeFormatter : public jni::object_base<"java/time/format/DateTimeFormatter",
	java::lang::Object>
{
public:

	static jni::ref<java::time::format::DateTimeFormatter> ISO_LOCAL_DATE() { return get_static_field<"ISO_LOCAL_DATE", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_OFFSET_DATE() { return get_static_field<"ISO_OFFSET_DATE", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_DATE() { return get_static_field<"ISO_DATE", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_LOCAL_TIME() { return get_static_field<"ISO_LOCAL_TIME", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_OFFSET_TIME() { return get_static_field<"ISO_OFFSET_TIME", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_TIME() { return get_static_field<"ISO_TIME", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_LOCAL_DATE_TIME() { return get_static_field<"ISO_LOCAL_DATE_TIME", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_OFFSET_DATE_TIME() { return get_static_field<"ISO_OFFSET_DATE_TIME", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_ZONED_DATE_TIME() { return get_static_field<"ISO_ZONED_DATE_TIME", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_DATE_TIME() { return get_static_field<"ISO_DATE_TIME", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_ORDINAL_DATE() { return get_static_field<"ISO_ORDINAL_DATE", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_WEEK_DATE() { return get_static_field<"ISO_WEEK_DATE", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> ISO_INSTANT() { return get_static_field<"ISO_INSTANT", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> BASIC_ISO_DATE() { return get_static_field<"BASIC_ISO_DATE", jni::ref<java::time::format::DateTimeFormatter>>(); }
	static jni::ref<java::time::format::DateTimeFormatter> RFC_1123_DATE_TIME() { return get_static_field<"RFC_1123_DATE_TIME", jni::ref<java::time::format::DateTimeFormatter>>(); }

	static jni::ref<java::time::format::DateTimeFormatter> ofPattern(jni::ref<java::lang::String> pattern) { return call_static_method<"ofPattern", jni::ref<java::time::format::DateTimeFormatter>>(pattern); }
	static jni::ref<java::time::format::DateTimeFormatter> ofPattern(jni::ref<java::lang::String> pattern, jni::ref<java::util::Locale> locale) { return call_static_method<"ofPattern", jni::ref<java::time::format::DateTimeFormatter>>(pattern, locale); }
	static jni::ref<java::time::format::DateTimeFormatter> ofLocalizedDate(jni::ref<java::time::format::FormatStyle> dateStyle) { return call_static_method<"ofLocalizedDate", jni::ref<java::time::format::DateTimeFormatter>>(dateStyle); }
	static jni::ref<java::time::format::DateTimeFormatter> ofLocalizedTime(jni::ref<java::time::format::FormatStyle> timeStyle) { return call_static_method<"ofLocalizedTime", jni::ref<java::time::format::DateTimeFormatter>>(timeStyle); }
	static jni::ref<java::time::format::DateTimeFormatter> ofLocalizedDateTime(jni::ref<java::time::format::FormatStyle> dateTimeStyle) { return call_static_method<"ofLocalizedDateTime", jni::ref<java::time::format::DateTimeFormatter>>(dateTimeStyle); }
	static jni::ref<java::time::format::DateTimeFormatter> ofLocalizedDateTime(jni::ref<java::time::format::FormatStyle> dateStyle, jni::ref<java::time::format::FormatStyle> timeStyle) { return call_static_method<"ofLocalizedDateTime", jni::ref<java::time::format::DateTimeFormatter>>(dateStyle, timeStyle); }
	static jni::ref<java::time::temporal::TemporalQuery> parsedExcessDays() { return call_static_method<"parsedExcessDays", jni::ref<java::time::temporal::TemporalQuery>>(); }
	static jni::ref<java::time::temporal::TemporalQuery> parsedLeapSecond() { return call_static_method<"parsedLeapSecond", jni::ref<java::time::temporal::TemporalQuery>>(); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	jni::ref<java::time::format::DateTimeFormatter> withLocale(jni::ref<java::util::Locale> locale) { return call_method<"withLocale", jni::ref<java::time::format::DateTimeFormatter>>(locale); }
	jni::ref<java::time::format::DateTimeFormatter> localizedBy(jni::ref<java::util::Locale> locale) { return call_method<"localizedBy", jni::ref<java::time::format::DateTimeFormatter>>(locale); }
	jni::ref<java::time::format::DecimalStyle> getDecimalStyle() { return call_method<"getDecimalStyle", jni::ref<java::time::format::DecimalStyle>>(); }
	jni::ref<java::time::format::DateTimeFormatter> withDecimalStyle(jni::ref<java::time::format::DecimalStyle> decimalStyle) { return call_method<"withDecimalStyle", jni::ref<java::time::format::DateTimeFormatter>>(decimalStyle); }
	jni::ref<java::time::chrono::Chronology> getChronology() { return call_method<"getChronology", jni::ref<java::time::chrono::Chronology>>(); }
	jni::ref<java::time::format::DateTimeFormatter> withChronology(jni::ref<java::time::chrono::Chronology> chrono) { return call_method<"withChronology", jni::ref<java::time::format::DateTimeFormatter>>(chrono); }
	jni::ref<java::time::ZoneId> getZone() { return call_method<"getZone", jni::ref<java::time::ZoneId>>(); }
	jni::ref<java::time::format::DateTimeFormatter> withZone(jni::ref<java::time::ZoneId> zone) { return call_method<"withZone", jni::ref<java::time::format::DateTimeFormatter>>(zone); }
	jni::ref<java::time::format::ResolverStyle> getResolverStyle() { return call_method<"getResolverStyle", jni::ref<java::time::format::ResolverStyle>>(); }
	jni::ref<java::time::format::DateTimeFormatter> withResolverStyle(jni::ref<java::time::format::ResolverStyle> resolverStyle) { return call_method<"withResolverStyle", jni::ref<java::time::format::DateTimeFormatter>>(resolverStyle); }
	jni::ref<java::util::Set> getResolverFields() { return call_method<"getResolverFields", jni::ref<java::util::Set>>(); }
	jni::ref<java::time::format::DateTimeFormatter> withResolverFields(jni::ref<jni::array<java::time::temporal::TemporalField>> resolverFields) { return call_method<"withResolverFields", jni::ref<java::time::format::DateTimeFormatter>>(resolverFields); }
	jni::ref<java::time::format::DateTimeFormatter> withResolverFields(jni::ref<java::util::Set> resolverFields) { return call_method<"withResolverFields", jni::ref<java::time::format::DateTimeFormatter>>(resolverFields); }
	jni::ref<java::lang::String> format(jni::ref<java::time::temporal::TemporalAccessor> temporal) { return call_method<"format", jni::ref<java::lang::String>>(temporal); }
	void formatTo(jni::ref<java::time::temporal::TemporalAccessor> temporal, jni::ref<java::lang::Appendable> appendable) { return call_method<"formatTo", void>(temporal, appendable); }
	jni::ref<java::time::temporal::TemporalAccessor> parse(jni::ref<java::lang::CharSequence> text) { return call_method<"parse", jni::ref<java::time::temporal::TemporalAccessor>>(text); }
	jni::ref<java::time::temporal::TemporalAccessor> parse(jni::ref<java::lang::CharSequence> text, jni::ref<java::text::ParsePosition> position) { return call_method<"parse", jni::ref<java::time::temporal::TemporalAccessor>>(text, position); }
	jni::ref<java::lang::Object> parse(jni::ref<java::lang::CharSequence> text, jni::ref<java::time::temporal::TemporalQuery> query) { return call_method<"parse", jni::ref<java::lang::Object>>(text, query); }
	jni::ref<java::time::temporal::TemporalAccessor> parseBest(jni::ref<java::lang::CharSequence> text, jni::ref<jni::array<java::time::temporal::TemporalQuery>> queries) { return call_method<"parseBest", jni::ref<java::time::temporal::TemporalAccessor>>(text, queries); }
	jni::ref<java::time::temporal::TemporalAccessor> parseUnresolved(jni::ref<java::lang::CharSequence> text, jni::ref<java::text::ParsePosition> position) { return call_method<"parseUnresolved", jni::ref<java::time::temporal::TemporalAccessor>>(text, position); }
	jni::ref<java::text::Format> toFormat() { return call_method<"toFormat", jni::ref<java::text::Format>>(); }
	jni::ref<java::text::Format> toFormat(jni::ref<java::time::temporal::TemporalQuery> parseQuery) { return call_method<"toFormat", jni::ref<java::text::Format>>(parseQuery); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	DateTimeFormatter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_FORMAT_DATETIMEFORMATTER
