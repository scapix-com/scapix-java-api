// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/time/chrono/ChronoPeriod.h>
#include <scapix/java_api/java/io/Serializable.h>

#ifndef SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOPERIODIMPL_FWD
#define SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOPERIODIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::time::chrono { class ChronoPeriodImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::time::chrono::ChronoPeriodImpl>
{
	static constexpr fixed_string class_name = "java/time/chrono/ChronoPeriodImpl";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::time::chrono::ChronoPeriod, scapix::java_api::java::io::Serializable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOPERIODIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOPERIODIMPL)
#define SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOPERIODIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/time/chrono/Chronology.h>
#include <scapix/java_api/java/time/temporal/Temporal.h>
#include <scapix/java_api/java/time/temporal/TemporalAmount.h>
#include <scapix/java_api/java/time/temporal/TemporalUnit.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::time::chrono::ChronoPeriodImpl : public jni::object_base<"java/time/chrono/ChronoPeriodImpl",
	java::lang::Object,
	java::time::chrono::ChronoPeriod,
	java::io::Serializable>
{
public:

	jlong get(jni::ref<java::time::temporal::TemporalUnit> unit) { return call_method<"get", jlong>(unit); }
	jni::ref<java::util::List> getUnits() { return call_method<"getUnits", jni::ref<java::util::List>>(); }
	jni::ref<java::time::chrono::Chronology> getChronology() { return call_method<"getChronology", jni::ref<java::time::chrono::Chronology>>(); }
	jboolean isZero() { return call_method<"isZero", jboolean>(); }
	jboolean isNegative() { return call_method<"isNegative", jboolean>(); }
	jni::ref<java::time::chrono::ChronoPeriod> plus(jni::ref<java::time::temporal::TemporalAmount> amountToAdd) { return call_method<"plus", jni::ref<java::time::chrono::ChronoPeriod>>(amountToAdd); }
	jni::ref<java::time::chrono::ChronoPeriod> minus(jni::ref<java::time::temporal::TemporalAmount> amountToSubtract) { return call_method<"minus", jni::ref<java::time::chrono::ChronoPeriod>>(amountToSubtract); }
	jni::ref<java::time::chrono::ChronoPeriod> multipliedBy(jint scalar) { return call_method<"multipliedBy", jni::ref<java::time::chrono::ChronoPeriod>>(scalar); }
	jni::ref<java::time::chrono::ChronoPeriod> normalized() { return call_method<"normalized", jni::ref<java::time::chrono::ChronoPeriod>>(); }
	jni::ref<java::time::temporal::Temporal> addTo(jni::ref<java::time::temporal::Temporal> temporal) { return call_method<"addTo", jni::ref<java::time::temporal::Temporal>>(temporal); }
	jni::ref<java::time::temporal::Temporal> subtractFrom(jni::ref<java::time::temporal::Temporal> temporal) { return call_method<"subtractFrom", jni::ref<java::time::temporal::Temporal>>(temporal); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	ChronoPeriodImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TIME_CHRONO_CHRONOPERIODIMPL
