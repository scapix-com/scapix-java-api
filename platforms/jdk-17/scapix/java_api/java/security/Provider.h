// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/util/Properties.h>

#ifndef SCAPIX_JAVA_API_JAVA_SECURITY_PROVIDER_FWD
#define SCAPIX_JAVA_API_JAVA_SECURITY_PROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::security { class Provider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::security::Provider>
{
	static constexpr fixed_string class_name = "java/security/Provider";
	using base_classes = std::tuple<scapix::java_api::java::util::Properties>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_PROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_SECURITY_PROVIDER)
#define SCAPIX_JAVA_API_JAVA_SECURITY_PROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/Provider_Service.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/function/BiConsumer.h>
#include <scapix/java_api/java/util/function/BiFunction.h>
#include <scapix/java_api/java/util/function/Function.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::security::Provider : public jni::object_base<"java/security/Provider",
	java::util::Properties>
{
public:

	using Service = Provider_Service;

	jni::ref<java::security::Provider> configure(jni::ref<java::lang::String> configArg) { return call_method<"configure", jni::ref<java::security::Provider>>(configArg); }
	jboolean isConfigured() { return call_method<"isConfigured", jboolean>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jdouble getVersion() { return call_method<"getVersion", jdouble>(); }
	jni::ref<java::lang::String> getVersionStr() { return call_method<"getVersionStr", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getInfo() { return call_method<"getInfo", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void clear() { return call_method<"clear", void>(); }
	void load(jni::ref<java::io::InputStream> inStream) { return call_method<"load", void>(inStream); }
	void putAll(jni::ref<java::util::Map> t) { return call_method<"putAll", void>(t); }
	jni::ref<java::util::Set> entrySet() { return call_method<"entrySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Set> keySet() { return call_method<"keySet", jni::ref<java::util::Set>>(); }
	jni::ref<java::util::Collection> values() { return call_method<"values", jni::ref<java::util::Collection>>(); }
	jni::ref<java::lang::Object> put(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"put", jni::ref<java::lang::Object>>(key, value); }
	jni::ref<java::lang::Object> putIfAbsent(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"putIfAbsent", jni::ref<java::lang::Object>>(key, value); }
	jni::ref<java::lang::Object> remove(jni::ref<java::lang::Object> key) { return call_method<"remove", jni::ref<java::lang::Object>>(key); }
	jboolean remove(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"remove", jboolean>(key, value); }
	jboolean replace(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> oldValue, jni::ref<java::lang::Object> newValue) { return call_method<"replace", jboolean>(key, oldValue, newValue); }
	jni::ref<java::lang::Object> replace(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value) { return call_method<"replace", jni::ref<java::lang::Object>>(key, value); }
	void replaceAll(jni::ref<java::util::function::BiFunction> function) { return call_method<"replaceAll", void>(function); }
	jni::ref<java::lang::Object> compute(jni::ref<java::lang::Object> key, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"compute", jni::ref<java::lang::Object>>(key, remappingFunction); }
	jni::ref<java::lang::Object> computeIfAbsent(jni::ref<java::lang::Object> key, jni::ref<java::util::function::Function> mappingFunction) { return call_method<"computeIfAbsent", jni::ref<java::lang::Object>>(key, mappingFunction); }
	jni::ref<java::lang::Object> computeIfPresent(jni::ref<java::lang::Object> key, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"computeIfPresent", jni::ref<java::lang::Object>>(key, remappingFunction); }
	jni::ref<java::lang::Object> merge(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> value, jni::ref<java::util::function::BiFunction> remappingFunction) { return call_method<"merge", jni::ref<java::lang::Object>>(key, value, remappingFunction); }
	jni::ref<java::lang::Object> get(jni::ref<java::lang::Object> key) { return call_method<"get", jni::ref<java::lang::Object>>(key); }
	jni::ref<java::lang::Object> getOrDefault(jni::ref<java::lang::Object> key, jni::ref<java::lang::Object> defaultValue) { return call_method<"getOrDefault", jni::ref<java::lang::Object>>(key, defaultValue); }
	void forEach(jni::ref<java::util::function::BiConsumer> action) { return call_method<"forEach", void>(action); }
	jni::ref<java::util::Enumeration> keys() { return call_method<"keys", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::util::Enumeration> elements() { return call_method<"elements", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::lang::String> getProperty(jni::ref<java::lang::String> key) { return call_method<"getProperty", jni::ref<java::lang::String>>(key); }
	jni::ref<java::security::Provider_Service> getService(jni::ref<java::lang::String> type, jni::ref<java::lang::String> algorithm) { return call_method<"getService", jni::ref<java::security::Provider_Service>>(type, algorithm); }
	jni::ref<java::util::Set> getServices() { return call_method<"getServices", jni::ref<java::util::Set>>(); }

protected:

	Provider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_SECURITY_PROVIDER
