// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/DirectDoubleBufferU.h>
#include <scapix/java_api/sun/nio/ch/DirectBuffer.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_DIRECTDOUBLEBUFFERRU_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_DIRECTDOUBLEBUFFERRU_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio { class DirectDoubleBufferRU; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::DirectDoubleBufferRU>
{
	static constexpr fixed_string class_name = "java/nio/DirectDoubleBufferRU";
	using base_classes = std::tuple<scapix::java_api::java::nio::DirectDoubleBufferU, scapix::java_api::sun::nio::ch::DirectBuffer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_DIRECTDOUBLEBUFFERRU_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_DIRECTDOUBLEBUFFERRU)
#define SCAPIX_JAVA_API_JAVA_NIO_DIRECTDOUBLEBUFFERRU

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteOrder.h>
#include <scapix/java_api/java/nio/DoubleBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class java::nio::DirectDoubleBufferRU : public jni::object_base<"java/nio/DirectDoubleBufferRU",
	java::nio::DirectDoubleBufferU,
	sun::nio::ch::DirectBuffer>
{
public:

	jni::ref<java::nio::DoubleBuffer> slice() { return call_method<"slice", jni::ref<java::nio::DoubleBuffer>>(); }
	jni::ref<java::nio::DoubleBuffer> slice(jint index, jint length) { return call_method<"slice", jni::ref<java::nio::DoubleBuffer>>(index, length); }
	jni::ref<java::nio::DoubleBuffer> duplicate() { return call_method<"duplicate", jni::ref<java::nio::DoubleBuffer>>(); }
	jni::ref<java::nio::DoubleBuffer> asReadOnlyBuffer() { return call_method<"asReadOnlyBuffer", jni::ref<java::nio::DoubleBuffer>>(); }
	jni::ref<java::nio::DoubleBuffer> put(jdouble x) { return call_method<"put", jni::ref<java::nio::DoubleBuffer>>(x); }
	jni::ref<java::nio::DoubleBuffer> put(jint i, jdouble x) { return call_method<"put", jni::ref<java::nio::DoubleBuffer>>(i, x); }
	jni::ref<java::nio::DoubleBuffer> compact() { return call_method<"compact", jni::ref<java::nio::DoubleBuffer>>(); }
	jboolean isDirect() { return call_method<"isDirect", jboolean>(); }
	jboolean isReadOnly() { return call_method<"isReadOnly", jboolean>(); }
	jni::ref<java::nio::ByteOrder> order() { return call_method<"order", jni::ref<java::nio::ByteOrder>>(); }

protected:

	DirectDoubleBufferRU(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_DIRECTDOUBLEBUFFERRU
