// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_FILE_SPI_FILESYSTEMPROVIDER_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_FILE_SPI_FILESYSTEMPROVIDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::file::spi { class FileSystemProvider; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::file::spi::FileSystemProvider>
{
	static constexpr fixed_string class_name = "java/nio/file/spi/FileSystemProvider";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FILE_SPI_FILESYSTEMPROVIDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_FILE_SPI_FILESYSTEMPROVIDER)
#define SCAPIX_JAVA_API_JAVA_NIO_FILE_SPI_FILESYSTEMPROVIDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/URI.h>
#include <scapix/java_api/java/nio/channels/AsynchronousFileChannel.h>
#include <scapix/java_api/java/nio/channels/FileChannel.h>
#include <scapix/java_api/java/nio/channels/SeekableByteChannel.h>
#include <scapix/java_api/java/nio/file/AccessMode.h>
#include <scapix/java_api/java/nio/file/CopyOption.h>
#include <scapix/java_api/java/nio/file/DirectoryStream.h>
#include <scapix/java_api/java/nio/file/DirectoryStream_Filter.h>
#include <scapix/java_api/java/nio/file/FileStore.h>
#include <scapix/java_api/java/nio/file/FileSystem.h>
#include <scapix/java_api/java/nio/file/LinkOption.h>
#include <scapix/java_api/java/nio/file/OpenOption.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/nio/file/attribute/BasicFileAttributes.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttribute.h>
#include <scapix/java_api/java/nio/file/attribute/FileAttributeView.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/concurrent/ExecutorService.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::file::spi::FileSystemProvider : public jni::object_base<"java/nio/file/spi/FileSystemProvider",
	java::lang::Object>
{
public:

	static jni::ref<java::util::List> installedProviders() { return call_static_method<"installedProviders", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> getScheme() { return call_method<"getScheme", jni::ref<java::lang::String>>(); }
	jni::ref<java::nio::file::FileSystem> newFileSystem(jni::ref<java::net::URI> p1, jni::ref<java::util::Map> p2) { return call_method<"newFileSystem", jni::ref<java::nio::file::FileSystem>>(p1, p2); }
	jni::ref<java::nio::file::FileSystem> getFileSystem(jni::ref<java::net::URI> p1) { return call_method<"getFileSystem", jni::ref<java::nio::file::FileSystem>>(p1); }
	jni::ref<java::nio::file::Path> getPath(jni::ref<java::net::URI> p1) { return call_method<"getPath", jni::ref<java::nio::file::Path>>(p1); }
	jni::ref<java::nio::file::FileSystem> newFileSystem(jni::ref<java::nio::file::Path> path, jni::ref<java::util::Map> env) { return call_method<"newFileSystem", jni::ref<java::nio::file::FileSystem>>(path, env); }
	jni::ref<java::io::InputStream> newInputStream(jni::ref<java::nio::file::Path> path, jni::ref<jni::array<java::nio::file::OpenOption>> options) { return call_method<"newInputStream", jni::ref<java::io::InputStream>>(path, options); }
	jni::ref<java::io::OutputStream> newOutputStream(jni::ref<java::nio::file::Path> path, jni::ref<jni::array<java::nio::file::OpenOption>> options) { return call_method<"newOutputStream", jni::ref<java::io::OutputStream>>(path, options); }
	jni::ref<java::nio::channels::FileChannel> newFileChannel(jni::ref<java::nio::file::Path> path, jni::ref<java::util::Set> options, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_method<"newFileChannel", jni::ref<java::nio::channels::FileChannel>>(path, options, attrs); }
	jni::ref<java::nio::channels::AsynchronousFileChannel> newAsynchronousFileChannel(jni::ref<java::nio::file::Path> path, jni::ref<java::util::Set> options, jni::ref<java::util::concurrent::ExecutorService> executor, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_method<"newAsynchronousFileChannel", jni::ref<java::nio::channels::AsynchronousFileChannel>>(path, options, executor, attrs); }
	jni::ref<java::nio::channels::SeekableByteChannel> newByteChannel(jni::ref<java::nio::file::Path> p1, jni::ref<java::util::Set> p2, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> p3) { return call_method<"newByteChannel", jni::ref<java::nio::channels::SeekableByteChannel>>(p1, p2, p3); }
	jni::ref<java::nio::file::DirectoryStream> newDirectoryStream(jni::ref<java::nio::file::Path> p1, jni::ref<java::nio::file::DirectoryStream_Filter> p2) { return call_method<"newDirectoryStream", jni::ref<java::nio::file::DirectoryStream>>(p1, p2); }
	void createDirectory(jni::ref<java::nio::file::Path> p1, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> p2) { return call_method<"createDirectory", void>(p1, p2); }
	void createSymbolicLink(jni::ref<java::nio::file::Path> link, jni::ref<java::nio::file::Path> target, jni::ref<jni::array<java::nio::file::attribute::FileAttribute>> attrs) { return call_method<"createSymbolicLink", void>(link, target, attrs); }
	void createLink(jni::ref<java::nio::file::Path> link, jni::ref<java::nio::file::Path> existing) { return call_method<"createLink", void>(link, existing); }
	void delete_(jni::ref<java::nio::file::Path> p1) { return call_method<"delete", void>(p1); }
	jboolean deleteIfExists(jni::ref<java::nio::file::Path> path) { return call_method<"deleteIfExists", jboolean>(path); }
	jni::ref<java::nio::file::Path> readSymbolicLink(jni::ref<java::nio::file::Path> link) { return call_method<"readSymbolicLink", jni::ref<java::nio::file::Path>>(link); }
	void copy(jni::ref<java::nio::file::Path> p1, jni::ref<java::nio::file::Path> p2, jni::ref<jni::array<java::nio::file::CopyOption>> p3) { return call_method<"copy", void>(p1, p2, p3); }
	void move(jni::ref<java::nio::file::Path> p1, jni::ref<java::nio::file::Path> p2, jni::ref<jni::array<java::nio::file::CopyOption>> p3) { return call_method<"move", void>(p1, p2, p3); }
	jboolean isSameFile(jni::ref<java::nio::file::Path> p1, jni::ref<java::nio::file::Path> p2) { return call_method<"isSameFile", jboolean>(p1, p2); }
	jboolean isHidden(jni::ref<java::nio::file::Path> p1) { return call_method<"isHidden", jboolean>(p1); }
	jni::ref<java::nio::file::FileStore> getFileStore(jni::ref<java::nio::file::Path> p1) { return call_method<"getFileStore", jni::ref<java::nio::file::FileStore>>(p1); }
	void checkAccess(jni::ref<java::nio::file::Path> p1, jni::ref<jni::array<java::nio::file::AccessMode>> p2) { return call_method<"checkAccess", void>(p1, p2); }
	jni::ref<java::nio::file::attribute::FileAttributeView> getFileAttributeView(jni::ref<java::nio::file::Path> p1, jni::ref<java::lang::Class> p2, jni::ref<jni::array<java::nio::file::LinkOption>> p3) { return call_method<"getFileAttributeView", jni::ref<java::nio::file::attribute::FileAttributeView>>(p1, p2, p3); }
	jni::ref<java::nio::file::attribute::BasicFileAttributes> readAttributes(jni::ref<java::nio::file::Path> p1, jni::ref<java::lang::Class> p2, jni::ref<jni::array<java::nio::file::LinkOption>> p3) { return call_method<"readAttributes", jni::ref<java::nio::file::attribute::BasicFileAttributes>>(p1, p2, p3); }
	jni::ref<java::util::Map> readAttributes(jni::ref<java::nio::file::Path> p1, jni::ref<java::lang::String> p2, jni::ref<jni::array<java::nio::file::LinkOption>> p3) { return call_method<"readAttributes", jni::ref<java::util::Map>>(p1, p2, p3); }
	void setAttribute(jni::ref<java::nio::file::Path> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::Object> p3, jni::ref<jni::array<java::nio::file::LinkOption>> p4) { return call_method<"setAttribute", void>(p1, p2, p3, p4); }

protected:

	FileSystemProvider(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FILE_SPI_FILESYSTEMPROVIDER
