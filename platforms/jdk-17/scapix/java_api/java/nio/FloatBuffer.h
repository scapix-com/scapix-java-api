// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_FLOATBUFFER_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_FLOATBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio { class FloatBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::FloatBuffer>
{
	static constexpr fixed_string class_name = "java/nio/FloatBuffer";
	using base_classes = std::tuple<scapix::java_api::java::nio::Buffer, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FLOATBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_FLOATBUFFER)
#define SCAPIX_JAVA_API_JAVA_NIO_FLOATBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/ByteOrder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::FloatBuffer : public jni::object_base<"java/nio/FloatBuffer",
	java::nio::Buffer,
	java::lang::Comparable>
{
public:

	static jni::ref<java::nio::FloatBuffer> allocate(jint capacity) { return call_static_method<"allocate", jni::ref<java::nio::FloatBuffer>>(capacity); }
	static jni::ref<java::nio::FloatBuffer> wrap(jni::ref<jni::array<jfloat>> array, jint offset, jint length) { return call_static_method<"wrap", jni::ref<java::nio::FloatBuffer>>(array, offset, length); }
	static jni::ref<java::nio::FloatBuffer> wrap(jni::ref<jni::array<jfloat>> array) { return call_static_method<"wrap", jni::ref<java::nio::FloatBuffer>>(array); }
	jni::ref<java::nio::FloatBuffer> slice() { return call_method<"slice", jni::ref<java::nio::FloatBuffer>>(); }
	jni::ref<java::nio::FloatBuffer> slice(jint p1, jint p2) { return call_method<"slice", jni::ref<java::nio::FloatBuffer>>(p1, p2); }
	jni::ref<java::nio::FloatBuffer> duplicate() { return call_method<"duplicate", jni::ref<java::nio::FloatBuffer>>(); }
	jni::ref<java::nio::FloatBuffer> asReadOnlyBuffer() { return call_method<"asReadOnlyBuffer", jni::ref<java::nio::FloatBuffer>>(); }
	jfloat get() { return call_method<"get", jfloat>(); }
	jni::ref<java::nio::FloatBuffer> put(jfloat p1) { return call_method<"put", jni::ref<java::nio::FloatBuffer>>(p1); }
	jfloat get(jint p1) { return call_method<"get", jfloat>(p1); }
	jni::ref<java::nio::FloatBuffer> put(jint p1, jfloat p2) { return call_method<"put", jni::ref<java::nio::FloatBuffer>>(p1, p2); }
	jni::ref<java::nio::FloatBuffer> get(jni::ref<jni::array<jfloat>> dst, jint offset, jint length) { return call_method<"get", jni::ref<java::nio::FloatBuffer>>(dst, offset, length); }
	jni::ref<java::nio::FloatBuffer> get(jni::ref<jni::array<jfloat>> dst) { return call_method<"get", jni::ref<java::nio::FloatBuffer>>(dst); }
	jni::ref<java::nio::FloatBuffer> get(jint index, jni::ref<jni::array<jfloat>> dst, jint offset, jint length) { return call_method<"get", jni::ref<java::nio::FloatBuffer>>(index, dst, offset, length); }
	jni::ref<java::nio::FloatBuffer> get(jint index, jni::ref<jni::array<jfloat>> dst) { return call_method<"get", jni::ref<java::nio::FloatBuffer>>(index, dst); }
	jni::ref<java::nio::FloatBuffer> put(jni::ref<java::nio::FloatBuffer> src) { return call_method<"put", jni::ref<java::nio::FloatBuffer>>(src); }
	jni::ref<java::nio::FloatBuffer> put(jint index, jni::ref<java::nio::FloatBuffer> src, jint offset, jint length) { return call_method<"put", jni::ref<java::nio::FloatBuffer>>(index, src, offset, length); }
	jni::ref<java::nio::FloatBuffer> put(jni::ref<jni::array<jfloat>> src, jint offset, jint length) { return call_method<"put", jni::ref<java::nio::FloatBuffer>>(src, offset, length); }
	jni::ref<java::nio::FloatBuffer> put(jni::ref<jni::array<jfloat>> src) { return call_method<"put", jni::ref<java::nio::FloatBuffer>>(src); }
	jni::ref<java::nio::FloatBuffer> put(jint index, jni::ref<jni::array<jfloat>> src, jint offset, jint length) { return call_method<"put", jni::ref<java::nio::FloatBuffer>>(index, src, offset, length); }
	jni::ref<java::nio::FloatBuffer> put(jint index, jni::ref<jni::array<jfloat>> src) { return call_method<"put", jni::ref<java::nio::FloatBuffer>>(index, src); }
	jboolean hasArray() { return call_method<"hasArray", jboolean>(); }
	jni::ref<jni::array<jfloat>> array() { return call_method<"array", jni::ref<jni::array<jfloat>>>(); }
	jint arrayOffset() { return call_method<"arrayOffset", jint>(); }
	jni::ref<java::nio::FloatBuffer> position(jint newPosition) { return call_method<"position", jni::ref<java::nio::FloatBuffer>>(newPosition); }
	jni::ref<java::nio::FloatBuffer> limit(jint newLimit) { return call_method<"limit", jni::ref<java::nio::FloatBuffer>>(newLimit); }
	jni::ref<java::nio::FloatBuffer> mark() { return call_method<"mark", jni::ref<java::nio::FloatBuffer>>(); }
	jni::ref<java::nio::FloatBuffer> reset() { return call_method<"reset", jni::ref<java::nio::FloatBuffer>>(); }
	jni::ref<java::nio::FloatBuffer> clear() { return call_method<"clear", jni::ref<java::nio::FloatBuffer>>(); }
	jni::ref<java::nio::FloatBuffer> flip() { return call_method<"flip", jni::ref<java::nio::FloatBuffer>>(); }
	jni::ref<java::nio::FloatBuffer> rewind() { return call_method<"rewind", jni::ref<java::nio::FloatBuffer>>(); }
	jni::ref<java::nio::FloatBuffer> compact() { return call_method<"compact", jni::ref<java::nio::FloatBuffer>>(); }
	jboolean isDirect() { return call_method<"isDirect", jboolean>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> ob) { return call_method<"equals", jboolean>(ob); }
	jint compareTo(jni::ref<java::nio::FloatBuffer> that) { return call_method<"compareTo", jint>(that); }
	jint mismatch(jni::ref<java::nio::FloatBuffer> that) { return call_method<"mismatch", jint>(that); }
	jni::ref<java::nio::ByteOrder> order() { return call_method<"order", jni::ref<java::nio::ByteOrder>>(); }

protected:

	FloatBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_FLOATBUFFER
