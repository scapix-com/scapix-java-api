// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPEREFERENCE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPEREFERENCE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_ { class TypeReference; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::TypeReference>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/TypeReference";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPEREFERENCE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPEREFERENCE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPEREFERENCE

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::TypeReference : public jni::object_base<"jdk/internal/org/objectweb/asm/TypeReference",
	java::lang::Object>
{
public:

	static jint CLASS_TYPE_PARAMETER() { return get_static_field<"CLASS_TYPE_PARAMETER", jint>(); }
	static jint METHOD_TYPE_PARAMETER() { return get_static_field<"METHOD_TYPE_PARAMETER", jint>(); }
	static jint CLASS_EXTENDS() { return get_static_field<"CLASS_EXTENDS", jint>(); }
	static jint CLASS_TYPE_PARAMETER_BOUND() { return get_static_field<"CLASS_TYPE_PARAMETER_BOUND", jint>(); }
	static jint METHOD_TYPE_PARAMETER_BOUND() { return get_static_field<"METHOD_TYPE_PARAMETER_BOUND", jint>(); }
	static jint FIELD() { return get_static_field<"FIELD", jint>(); }
	static jint METHOD_RETURN() { return get_static_field<"METHOD_RETURN", jint>(); }
	static jint METHOD_RECEIVER() { return get_static_field<"METHOD_RECEIVER", jint>(); }
	static jint METHOD_FORMAL_PARAMETER() { return get_static_field<"METHOD_FORMAL_PARAMETER", jint>(); }
	static jint THROWS() { return get_static_field<"THROWS", jint>(); }
	static jint LOCAL_VARIABLE() { return get_static_field<"LOCAL_VARIABLE", jint>(); }
	static jint RESOURCE_VARIABLE() { return get_static_field<"RESOURCE_VARIABLE", jint>(); }
	static jint EXCEPTION_PARAMETER() { return get_static_field<"EXCEPTION_PARAMETER", jint>(); }
	static jint INSTANCEOF() { return get_static_field<"INSTANCEOF", jint>(); }
	static jint NEW() { return get_static_field<"NEW", jint>(); }
	static jint CONSTRUCTOR_REFERENCE() { return get_static_field<"CONSTRUCTOR_REFERENCE", jint>(); }
	static jint METHOD_REFERENCE() { return get_static_field<"METHOD_REFERENCE", jint>(); }
	static jint CAST() { return get_static_field<"CAST", jint>(); }
	static jint CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT() { return get_static_field<"CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT", jint>(); }
	static jint METHOD_INVOCATION_TYPE_ARGUMENT() { return get_static_field<"METHOD_INVOCATION_TYPE_ARGUMENT", jint>(); }
	static jint CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT() { return get_static_field<"CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT", jint>(); }
	static jint METHOD_REFERENCE_TYPE_ARGUMENT() { return get_static_field<"METHOD_REFERENCE_TYPE_ARGUMENT", jint>(); }

	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> new_object(jint typeRef) { return base_::new_object(typeRef); }
	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> newTypeReference(jint sort) { return call_static_method<"newTypeReference", jni::ref<jdk::internal::org::objectweb::asm_::TypeReference>>(sort); }
	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> newTypeParameterReference(jint sort, jint paramIndex) { return call_static_method<"newTypeParameterReference", jni::ref<jdk::internal::org::objectweb::asm_::TypeReference>>(sort, paramIndex); }
	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> newTypeParameterBoundReference(jint sort, jint paramIndex, jint boundIndex) { return call_static_method<"newTypeParameterBoundReference", jni::ref<jdk::internal::org::objectweb::asm_::TypeReference>>(sort, paramIndex, boundIndex); }
	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> newSuperTypeReference(jint itfIndex) { return call_static_method<"newSuperTypeReference", jni::ref<jdk::internal::org::objectweb::asm_::TypeReference>>(itfIndex); }
	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> newFormalParameterReference(jint paramIndex) { return call_static_method<"newFormalParameterReference", jni::ref<jdk::internal::org::objectweb::asm_::TypeReference>>(paramIndex); }
	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> newExceptionReference(jint exceptionIndex) { return call_static_method<"newExceptionReference", jni::ref<jdk::internal::org::objectweb::asm_::TypeReference>>(exceptionIndex); }
	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> newTryCatchReference(jint tryCatchBlockIndex) { return call_static_method<"newTryCatchReference", jni::ref<jdk::internal::org::objectweb::asm_::TypeReference>>(tryCatchBlockIndex); }
	static jni::ref<jdk::internal::org::objectweb::asm_::TypeReference> newTypeArgumentReference(jint sort, jint argIndex) { return call_static_method<"newTypeArgumentReference", jni::ref<jdk::internal::org::objectweb::asm_::TypeReference>>(sort, argIndex); }
	jint getSort() { return call_method<"getSort", jint>(); }
	jint getTypeParameterIndex() { return call_method<"getTypeParameterIndex", jint>(); }
	jint getTypeParameterBoundIndex() { return call_method<"getTypeParameterBoundIndex", jint>(); }
	jint getSuperTypeIndex() { return call_method<"getSuperTypeIndex", jint>(); }
	jint getFormalParameterIndex() { return call_method<"getFormalParameterIndex", jint>(); }
	jint getExceptionIndex() { return call_method<"getExceptionIndex", jint>(); }
	jint getTryCatchBlockIndex() { return call_method<"getTryCatchBlockIndex", jint>(); }
	jint getTypeArgumentIndex() { return call_method<"getTypeArgumentIndex", jint>(); }
	jint getValue() { return call_method<"getValue", jint>(); }

protected:

	TypeReference(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TYPEREFERENCE
