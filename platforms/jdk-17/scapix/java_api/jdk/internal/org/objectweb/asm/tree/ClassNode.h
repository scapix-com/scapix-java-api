// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/org/objectweb/asm/ClassVisitor.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_CLASSNODE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_CLASSNODE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::tree { class ClassNode; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::tree::ClassNode>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/tree/ClassNode";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::org::objectweb::asm_::ClassVisitor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_CLASSNODE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_CLASSNODE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_CLASSNODE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/AnnotationVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Attribute.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/FieldVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/MethodVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/ModuleVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/RecordComponentVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/TypePath.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/tree/ModuleNode.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::tree::ClassNode : public jni::object_base<"jdk/internal/org/objectweb/asm/tree/ClassNode",
	jdk::internal::org::objectweb::asm_::ClassVisitor>
{
public:

	jint version() { return get_field<"version", jint>(); }
	void version(jint v) { set_field<"version", jint>(v); }
	jint access() { return get_field<"access", jint>(); }
	void access(jint v) { set_field<"access", jint>(v); }
	jni::ref<java::lang::String> name() { return get_field<"name", jni::ref<java::lang::String>>(); }
	void name(jni::ref<java::lang::String> v) { set_field<"name", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> signature() { return get_field<"signature", jni::ref<java::lang::String>>(); }
	void signature(jni::ref<java::lang::String> v) { set_field<"signature", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> superName() { return get_field<"superName", jni::ref<java::lang::String>>(); }
	void superName(jni::ref<java::lang::String> v) { set_field<"superName", jni::ref<java::lang::String>>(v); }
	jni::ref<java::util::List> interfaces() { return get_field<"interfaces", jni::ref<java::util::List>>(); }
	void interfaces(jni::ref<java::util::List> v) { set_field<"interfaces", jni::ref<java::util::List>>(v); }
	jni::ref<java::lang::String> sourceFile() { return get_field<"sourceFile", jni::ref<java::lang::String>>(); }
	void sourceFile(jni::ref<java::lang::String> v) { set_field<"sourceFile", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> sourceDebug() { return get_field<"sourceDebug", jni::ref<java::lang::String>>(); }
	void sourceDebug(jni::ref<java::lang::String> v) { set_field<"sourceDebug", jni::ref<java::lang::String>>(v); }
	jni::ref<jdk::internal::org::objectweb::asm_::tree::ModuleNode> module() { return get_field<"module", jni::ref<jdk::internal::org::objectweb::asm_::tree::ModuleNode>>(); }
	void module(jni::ref<jdk::internal::org::objectweb::asm_::tree::ModuleNode> v) { set_field<"module", jni::ref<jdk::internal::org::objectweb::asm_::tree::ModuleNode>>(v); }
	jni::ref<java::lang::String> outerClass() { return get_field<"outerClass", jni::ref<java::lang::String>>(); }
	void outerClass(jni::ref<java::lang::String> v) { set_field<"outerClass", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> outerMethod() { return get_field<"outerMethod", jni::ref<java::lang::String>>(); }
	void outerMethod(jni::ref<java::lang::String> v) { set_field<"outerMethod", jni::ref<java::lang::String>>(v); }
	jni::ref<java::lang::String> outerMethodDesc() { return get_field<"outerMethodDesc", jni::ref<java::lang::String>>(); }
	void outerMethodDesc(jni::ref<java::lang::String> v) { set_field<"outerMethodDesc", jni::ref<java::lang::String>>(v); }
	jni::ref<java::util::List> visibleAnnotations() { return get_field<"visibleAnnotations", jni::ref<java::util::List>>(); }
	void visibleAnnotations(jni::ref<java::util::List> v) { set_field<"visibleAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> invisibleAnnotations() { return get_field<"invisibleAnnotations", jni::ref<java::util::List>>(); }
	void invisibleAnnotations(jni::ref<java::util::List> v) { set_field<"invisibleAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> visibleTypeAnnotations() { return get_field<"visibleTypeAnnotations", jni::ref<java::util::List>>(); }
	void visibleTypeAnnotations(jni::ref<java::util::List> v) { set_field<"visibleTypeAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> invisibleTypeAnnotations() { return get_field<"invisibleTypeAnnotations", jni::ref<java::util::List>>(); }
	void invisibleTypeAnnotations(jni::ref<java::util::List> v) { set_field<"invisibleTypeAnnotations", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> attrs() { return get_field<"attrs", jni::ref<java::util::List>>(); }
	void attrs(jni::ref<java::util::List> v) { set_field<"attrs", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> innerClasses() { return get_field<"innerClasses", jni::ref<java::util::List>>(); }
	void innerClasses(jni::ref<java::util::List> v) { set_field<"innerClasses", jni::ref<java::util::List>>(v); }
	jni::ref<java::lang::String> nestHostClass() { return get_field<"nestHostClass", jni::ref<java::lang::String>>(); }
	void nestHostClass(jni::ref<java::lang::String> v) { set_field<"nestHostClass", jni::ref<java::lang::String>>(v); }
	jni::ref<java::util::List> nestMembers() { return get_field<"nestMembers", jni::ref<java::util::List>>(); }
	void nestMembers(jni::ref<java::util::List> v) { set_field<"nestMembers", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> permittedSubclassesExperimental() { return get_field<"permittedSubclassesExperimental", jni::ref<java::util::List>>(); }
	void permittedSubclassesExperimental(jni::ref<java::util::List> v) { set_field<"permittedSubclassesExperimental", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> recordComponents() { return get_field<"recordComponents", jni::ref<java::util::List>>(); }
	void recordComponents(jni::ref<java::util::List> v) { set_field<"recordComponents", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> fields() { return get_field<"fields", jni::ref<java::util::List>>(); }
	void fields(jni::ref<java::util::List> v) { set_field<"fields", jni::ref<java::util::List>>(v); }
	jni::ref<java::util::List> methods() { return get_field<"methods", jni::ref<java::util::List>>(); }
	void methods(jni::ref<java::util::List> v) { set_field<"methods", jni::ref<java::util::List>>(v); }

	static jni::ref<jdk::internal::org::objectweb::asm_::tree::ClassNode> new_object() { return base_::new_object(); }
	static jni::ref<jdk::internal::org::objectweb::asm_::tree::ClassNode> new_object(jint api) { return base_::new_object(api); }
	void visit(jint version, jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> signature, jni::ref<java::lang::String> superName, jni::ref<jni::array<java::lang::String>> interfaces) { return call_method<"visit", void>(version, access, name, signature, superName, interfaces); }
	void visitSource(jni::ref<java::lang::String> file, jni::ref<java::lang::String> debug) { return call_method<"visitSource", void>(file, debug); }
	jni::ref<jdk::internal::org::objectweb::asm_::ModuleVisitor> visitModule(jni::ref<java::lang::String> name, jint access, jni::ref<java::lang::String> version) { return call_method<"visitModule", jni::ref<jdk::internal::org::objectweb::asm_::ModuleVisitor>>(name, access, version); }
	void visitNestHost(jni::ref<java::lang::String> nestHost) { return call_method<"visitNestHost", void>(nestHost); }
	void visitOuterClass(jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor) { return call_method<"visitOuterClass", void>(owner, name, descriptor); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitAnnotation(jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(descriptor, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitTypeAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitTypeAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, descriptor, visible); }
	void visitAttribute(jni::ref<jdk::internal::org::objectweb::asm_::Attribute> attribute) { return call_method<"visitAttribute", void>(attribute); }
	void visitNestMember(jni::ref<java::lang::String> nestMember) { return call_method<"visitNestMember", void>(nestMember); }
	void visitPermittedSubclassExperimental(jni::ref<java::lang::String> permittedSubclass) { return call_method<"visitPermittedSubclassExperimental", void>(permittedSubclass); }
	void visitInnerClass(jni::ref<java::lang::String> name, jni::ref<java::lang::String> outerName, jni::ref<java::lang::String> innerName, jint access) { return call_method<"visitInnerClass", void>(name, outerName, innerName, access); }
	jni::ref<jdk::internal::org::objectweb::asm_::RecordComponentVisitor> visitRecordComponent(jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature) { return call_method<"visitRecordComponent", jni::ref<jdk::internal::org::objectweb::asm_::RecordComponentVisitor>>(name, descriptor, signature); }
	jni::ref<jdk::internal::org::objectweb::asm_::FieldVisitor> visitField(jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature, jni::ref<java::lang::Object> value) { return call_method<"visitField", jni::ref<jdk::internal::org::objectweb::asm_::FieldVisitor>>(access, name, descriptor, signature, value); }
	jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> visitMethod(jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature, jni::ref<jni::array<java::lang::String>> exceptions) { return call_method<"visitMethod", jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor>>(access, name, descriptor, signature, exceptions); }
	void visitEnd() { return call_method<"visitEnd", void>(); }
	void check(jint api) { return call_method<"check", void>(api); }
	void accept(jni::ref<jdk::internal::org::objectweb::asm_::ClassVisitor> classVisitor) { return call_method<"accept", void>(classVisitor); }

protected:

	ClassNode(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_TREE_CLASSNODE
