// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_PRINTER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_PRINTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::util { class Printer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::util::Printer>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/util/Printer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_PRINTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_PRINTER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_PRINTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Attribute.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Handle.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Label.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/TypePath.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::util::Printer : public jni::object_base<"jdk/internal/org/objectweb/asm/util/Printer",
	java::lang::Object>
{
public:

	static jni::ref<jni::array<java::lang::String>> OPCODES() { return get_static_field<"OPCODES", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<jni::array<java::lang::String>> TYPES() { return get_static_field<"TYPES", jni::ref<jni::array<java::lang::String>>>(); }
	static jni::ref<jni::array<java::lang::String>> HANDLE_TAG() { return get_static_field<"HANDLE_TAG", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::util::List> text() { return get_field<"text", jni::ref<java::util::List>>(); }

	void visit(jint p1, jint p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::String> p5, jni::ref<jni::array<java::lang::String>> p6) { return call_method<"visit", void>(p1, p2, p3, p4, p5, p6); }
	void visitSource(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"visitSource", void>(p1, p2); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitModule(jni::ref<java::lang::String> name, jint access, jni::ref<java::lang::String> version) { return call_method<"visitModule", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(name, access, version); }
	void visitNestHost(jni::ref<java::lang::String> nestHost) { return call_method<"visitNestHost", void>(nestHost); }
	void visitOuterClass(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"visitOuterClass", void>(p1, p2, p3); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitClassAnnotation(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"visitClassAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(p1, p2); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitClassTypeAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitClassTypeAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(typeRef, typePath, descriptor, visible); }
	void visitClassAttribute(jni::ref<jdk::internal::org::objectweb::asm_::Attribute> p1) { return call_method<"visitClassAttribute", void>(p1); }
	void visitNestMember(jni::ref<java::lang::String> nestMember) { return call_method<"visitNestMember", void>(nestMember); }
	void visitPermittedSubclassExperimental(jni::ref<java::lang::String> permittedSubclass) { return call_method<"visitPermittedSubclassExperimental", void>(permittedSubclass); }
	void visitInnerClass(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jint p4) { return call_method<"visitInnerClass", void>(p1, p2, p3, p4); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitRecordComponent(jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature) { return call_method<"visitRecordComponent", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(name, descriptor, signature); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitField(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<java::lang::Object> p5) { return call_method<"visitField", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(p1, p2, p3, p4, p5); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitMethod(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4, jni::ref<jni::array<java::lang::String>> p5) { return call_method<"visitMethod", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(p1, p2, p3, p4, p5); }
	void visitClassEnd() { return call_method<"visitClassEnd", void>(); }
	void visitMainClass(jni::ref<java::lang::String> mainClass) { return call_method<"visitMainClass", void>(mainClass); }
	void visitPackage(jni::ref<java::lang::String> packaze) { return call_method<"visitPackage", void>(packaze); }
	void visitRequire(jni::ref<java::lang::String> module, jint access, jni::ref<java::lang::String> version) { return call_method<"visitRequire", void>(module, access, version); }
	void visitExport(jni::ref<java::lang::String> packaze, jint access, jni::ref<jni::array<java::lang::String>> modules) { return call_method<"visitExport", void>(packaze, access, modules); }
	void visitOpen(jni::ref<java::lang::String> packaze, jint access, jni::ref<jni::array<java::lang::String>> modules) { return call_method<"visitOpen", void>(packaze, access, modules); }
	void visitUse(jni::ref<java::lang::String> service) { return call_method<"visitUse", void>(service); }
	void visitProvide(jni::ref<java::lang::String> service, jni::ref<jni::array<java::lang::String>> providers) { return call_method<"visitProvide", void>(service, providers); }
	void visitModuleEnd() { return call_method<"visitModuleEnd", void>(); }
	void visit(jni::ref<java::lang::String> p1, jni::ref<java::lang::Object> p2) { return call_method<"visit", void>(p1, p2); }
	void visitEnum(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3) { return call_method<"visitEnum", void>(p1, p2, p3); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitAnnotation(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2) { return call_method<"visitAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(p1, p2); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitArray(jni::ref<java::lang::String> p1) { return call_method<"visitArray", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(p1); }
	void visitAnnotationEnd() { return call_method<"visitAnnotationEnd", void>(); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitRecordComponentAnnotation(jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitRecordComponentAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(descriptor, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitRecordComponentTypeAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitRecordComponentTypeAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(typeRef, typePath, descriptor, visible); }
	void visitRecordComponentAttribute(jni::ref<jdk::internal::org::objectweb::asm_::Attribute> attribute) { return call_method<"visitRecordComponentAttribute", void>(attribute); }
	void visitRecordComponentEnd() { return call_method<"visitRecordComponentEnd", void>(); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitFieldAnnotation(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"visitFieldAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(p1, p2); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitFieldTypeAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitFieldTypeAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(typeRef, typePath, descriptor, visible); }
	void visitFieldAttribute(jni::ref<jdk::internal::org::objectweb::asm_::Attribute> p1) { return call_method<"visitFieldAttribute", void>(p1); }
	void visitFieldEnd() { return call_method<"visitFieldEnd", void>(); }
	void visitParameter(jni::ref<java::lang::String> name, jint access) { return call_method<"visitParameter", void>(name, access); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitAnnotationDefault() { return call_method<"visitAnnotationDefault", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitMethodAnnotation(jni::ref<java::lang::String> p1, jboolean p2) { return call_method<"visitMethodAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(p1, p2); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitMethodTypeAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitMethodTypeAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(typeRef, typePath, descriptor, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitAnnotableParameterCount(jint parameterCount, jboolean visible) { return call_method<"visitAnnotableParameterCount", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(parameterCount, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitParameterAnnotation(jint p1, jni::ref<java::lang::String> p2, jboolean p3) { return call_method<"visitParameterAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(p1, p2, p3); }
	void visitMethodAttribute(jni::ref<jdk::internal::org::objectweb::asm_::Attribute> p1) { return call_method<"visitMethodAttribute", void>(p1); }
	void visitCode() { return call_method<"visitCode", void>(); }
	void visitFrame(jint p1, jint p2, jni::ref<jni::array<java::lang::Object>> p3, jint p4, jni::ref<jni::array<java::lang::Object>> p5) { return call_method<"visitFrame", void>(p1, p2, p3, p4, p5); }
	void visitInsn(jint p1) { return call_method<"visitInsn", void>(p1); }
	void visitIntInsn(jint p1, jint p2) { return call_method<"visitIntInsn", void>(p1, p2); }
	void visitVarInsn(jint p1, jint p2) { return call_method<"visitVarInsn", void>(p1, p2); }
	void visitTypeInsn(jint p1, jni::ref<java::lang::String> p2) { return call_method<"visitTypeInsn", void>(p1, p2); }
	void visitFieldInsn(jint p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<java::lang::String> p4) { return call_method<"visitFieldInsn", void>(p1, p2, p3, p4); }
	void visitMethodInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor) { return call_method<"visitMethodInsn", void>(opcode, owner, name, descriptor); }
	void visitMethodInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jboolean isInterface) { return call_method<"visitMethodInsn", void>(opcode, owner, name, descriptor, isInterface); }
	void visitInvokeDynamicInsn(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<jdk::internal::org::objectweb::asm_::Handle> p3, jni::ref<jni::array<java::lang::Object>> p4) { return call_method<"visitInvokeDynamicInsn", void>(p1, p2, p3, p4); }
	void visitJumpInsn(jint p1, jni::ref<jdk::internal::org::objectweb::asm_::Label> p2) { return call_method<"visitJumpInsn", void>(p1, p2); }
	void visitLabel(jni::ref<jdk::internal::org::objectweb::asm_::Label> p1) { return call_method<"visitLabel", void>(p1); }
	void visitLdcInsn(jni::ref<java::lang::Object> p1) { return call_method<"visitLdcInsn", void>(p1); }
	void visitIincInsn(jint p1, jint p2) { return call_method<"visitIincInsn", void>(p1, p2); }
	void visitTableSwitchInsn(jint p1, jint p2, jni::ref<jdk::internal::org::objectweb::asm_::Label> p3, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> p4) { return call_method<"visitTableSwitchInsn", void>(p1, p2, p3, p4); }
	void visitLookupSwitchInsn(jni::ref<jdk::internal::org::objectweb::asm_::Label> p1, jni::ref<jni::array<jint>> p2, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> p3) { return call_method<"visitLookupSwitchInsn", void>(p1, p2, p3); }
	void visitMultiANewArrayInsn(jni::ref<java::lang::String> p1, jint p2) { return call_method<"visitMultiANewArrayInsn", void>(p1, p2); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitInsnAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitInsnAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(typeRef, typePath, descriptor, visible); }
	void visitTryCatchBlock(jni::ref<jdk::internal::org::objectweb::asm_::Label> p1, jni::ref<jdk::internal::org::objectweb::asm_::Label> p2, jni::ref<jdk::internal::org::objectweb::asm_::Label> p3, jni::ref<java::lang::String> p4) { return call_method<"visitTryCatchBlock", void>(p1, p2, p3, p4); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitTryCatchAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitTryCatchAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(typeRef, typePath, descriptor, visible); }
	void visitLocalVariable(jni::ref<java::lang::String> p1, jni::ref<java::lang::String> p2, jni::ref<java::lang::String> p3, jni::ref<jdk::internal::org::objectweb::asm_::Label> p4, jni::ref<jdk::internal::org::objectweb::asm_::Label> p5, jint p6) { return call_method<"visitLocalVariable", void>(p1, p2, p3, p4, p5, p6); }
	jni::ref<jdk::internal::org::objectweb::asm_::util::Printer> visitLocalVariableAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> start, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> end, jni::ref<jni::array<jint>> index, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitLocalVariableAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::util::Printer>>(typeRef, typePath, start, end, index, descriptor, visible); }
	void visitLineNumber(jint p1, jni::ref<jdk::internal::org::objectweb::asm_::Label> p2) { return call_method<"visitLineNumber", void>(p1, p2); }
	void visitMaxs(jint p1, jint p2) { return call_method<"visitMaxs", void>(p1, p2); }
	void visitMethodEnd() { return call_method<"visitMethodEnd", void>(); }
	jni::ref<java::util::List> getText() { return call_method<"getText", jni::ref<java::util::List>>(); }
	void print(jni::ref<java::io::PrintWriter> printWriter) { return call_method<"print", void>(printWriter); }
	static void appendString(jni::ref<java::lang::StringBuilder> stringBuilder, jni::ref<java::lang::String> string) { return call_static_method<"appendString", void>(stringBuilder, string); }

protected:

	Printer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_PRINTER
