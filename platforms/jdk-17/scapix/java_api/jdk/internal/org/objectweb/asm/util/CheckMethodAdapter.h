// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/jdk/internal/org/objectweb/asm/MethodVisitor.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_CHECKMETHODADAPTER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_CHECKMETHODADAPTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::org::objectweb::asm_::util { class CheckMethodAdapter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::org::objectweb::asm_::util::CheckMethodAdapter>
{
	static constexpr fixed_string class_name = "jdk/internal/org/objectweb/asm/util/CheckMethodAdapter";
	using base_classes = std::tuple<scapix::java_api::jdk::internal::org::objectweb::asm_::MethodVisitor>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_CHECKMETHODADAPTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_CHECKMETHODADAPTER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_CHECKMETHODADAPTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Map.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/AnnotationVisitor.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Attribute.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Handle.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/Label.h>
#include <scapix/java_api/jdk/internal/org/objectweb/asm/TypePath.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::org::objectweb::asm_::util::CheckMethodAdapter : public jni::object_base<"jdk/internal/org/objectweb/asm/util/CheckMethodAdapter",
	jdk::internal::org::objectweb::asm_::MethodVisitor>
{
public:

	jint version() { return get_field<"version", jint>(); }
	void version(jint v) { set_field<"version", jint>(v); }

	static jni::ref<jdk::internal::org::objectweb::asm_::util::CheckMethodAdapter> new_object(jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> methodvisitor) { return base_::new_object(methodvisitor); }
	static jni::ref<jdk::internal::org::objectweb::asm_::util::CheckMethodAdapter> new_object(jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> methodVisitor, jni::ref<java::util::Map> labelInsnIndices) { return base_::new_object(methodVisitor, labelInsnIndices); }
	static jni::ref<jdk::internal::org::objectweb::asm_::util::CheckMethodAdapter> new_object(jint access, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<jdk::internal::org::objectweb::asm_::MethodVisitor> methodVisitor, jni::ref<java::util::Map> labelInsnIndices) { return base_::new_object(access, name, descriptor, methodVisitor, labelInsnIndices); }
	void visitParameter(jni::ref<java::lang::String> name, jint access) { return call_method<"visitParameter", void>(name, access); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitAnnotation(jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(descriptor, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitTypeAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitTypeAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, descriptor, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitAnnotationDefault() { return call_method<"visitAnnotationDefault", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(); }
	void visitAnnotableParameterCount(jint parameterCount, jboolean visible) { return call_method<"visitAnnotableParameterCount", void>(parameterCount, visible); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitParameterAnnotation(jint parameter, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitParameterAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(parameter, descriptor, visible); }
	void visitAttribute(jni::ref<jdk::internal::org::objectweb::asm_::Attribute> attribute) { return call_method<"visitAttribute", void>(attribute); }
	void visitCode() { return call_method<"visitCode", void>(); }
	void visitFrame(jint type, jint numLocal, jni::ref<jni::array<java::lang::Object>> local, jint numStack, jni::ref<jni::array<java::lang::Object>> stack) { return call_method<"visitFrame", void>(type, numLocal, local, numStack, stack); }
	void visitInsn(jint opcode) { return call_method<"visitInsn", void>(opcode); }
	void visitIntInsn(jint opcode, jint operand) { return call_method<"visitIntInsn", void>(opcode, operand); }
	void visitVarInsn(jint opcode, jint var) { return call_method<"visitVarInsn", void>(opcode, var); }
	void visitTypeInsn(jint opcode, jni::ref<java::lang::String> type) { return call_method<"visitTypeInsn", void>(opcode, type); }
	void visitFieldInsn(jint opcode, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor) { return call_method<"visitFieldInsn", void>(opcode, owner, name, descriptor); }
	void visitMethodInsn(jint opcodeAndSource, jni::ref<java::lang::String> owner, jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jboolean isInterface) { return call_method<"visitMethodInsn", void>(opcodeAndSource, owner, name, descriptor, isInterface); }
	void visitInvokeDynamicInsn(jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<jdk::internal::org::objectweb::asm_::Handle> bootstrapMethodHandle, jni::ref<jni::array<java::lang::Object>> bootstrapMethodArguments) { return call_method<"visitInvokeDynamicInsn", void>(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments); }
	void visitJumpInsn(jint opcode, jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"visitJumpInsn", void>(opcode, label); }
	void visitLabel(jni::ref<jdk::internal::org::objectweb::asm_::Label> label) { return call_method<"visitLabel", void>(label); }
	void visitLdcInsn(jni::ref<java::lang::Object> value) { return call_method<"visitLdcInsn", void>(value); }
	void visitIincInsn(jint var, jint increment) { return call_method<"visitIincInsn", void>(var, increment); }
	void visitTableSwitchInsn(jint min, jint max, jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"visitTableSwitchInsn", void>(min, max, dflt, labels); }
	void visitLookupSwitchInsn(jni::ref<jdk::internal::org::objectweb::asm_::Label> dflt, jni::ref<jni::array<jint>> keys, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> labels) { return call_method<"visitLookupSwitchInsn", void>(dflt, keys, labels); }
	void visitMultiANewArrayInsn(jni::ref<java::lang::String> descriptor, jint numDimensions) { return call_method<"visitMultiANewArrayInsn", void>(descriptor, numDimensions); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitInsnAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitInsnAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, descriptor, visible); }
	void visitTryCatchBlock(jni::ref<jdk::internal::org::objectweb::asm_::Label> start, jni::ref<jdk::internal::org::objectweb::asm_::Label> end, jni::ref<jdk::internal::org::objectweb::asm_::Label> handler, jni::ref<java::lang::String> type) { return call_method<"visitTryCatchBlock", void>(start, end, handler, type); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitTryCatchAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitTryCatchAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, descriptor, visible); }
	void visitLocalVariable(jni::ref<java::lang::String> name, jni::ref<java::lang::String> descriptor, jni::ref<java::lang::String> signature, jni::ref<jdk::internal::org::objectweb::asm_::Label> start, jni::ref<jdk::internal::org::objectweb::asm_::Label> end, jint index) { return call_method<"visitLocalVariable", void>(name, descriptor, signature, start, end, index); }
	jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor> visitLocalVariableAnnotation(jint typeRef, jni::ref<jdk::internal::org::objectweb::asm_::TypePath> typePath, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> start, jni::ref<jni::array<jdk::internal::org::objectweb::asm_::Label>> end, jni::ref<jni::array<jint>> index, jni::ref<java::lang::String> descriptor, jboolean visible) { return call_method<"visitLocalVariableAnnotation", jni::ref<jdk::internal::org::objectweb::asm_::AnnotationVisitor>>(typeRef, typePath, start, end, index, descriptor, visible); }
	void visitLineNumber(jint line, jni::ref<jdk::internal::org::objectweb::asm_::Label> start) { return call_method<"visitLineNumber", void>(line, start); }
	void visitMaxs(jint maxStack, jint maxLocals) { return call_method<"visitMaxs", void>(maxStack, maxLocals); }
	void visitEnd() { return call_method<"visitEnd", void>(); }

protected:

	CheckMethodAdapter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ORG_OBJECTWEB_ASM_UTIL_CHECKMETHODADAPTER
