// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_UCHARACTERPROPERTY_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_UCHARACTERPROPERTY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::icu::impl { class UCharacterProperty; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::icu::impl::UCharacterProperty>
{
	static constexpr fixed_string class_name = "jdk/internal/icu/impl/UCharacterProperty";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_UCHARACTERPROPERTY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_UCHARACTERPROPERTY)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_UCHARACTERPROPERTY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/jdk/internal/icu/impl/Trie2_16.h>
#include <scapix/java_api/jdk/internal/icu/text/UnicodeSet.h>
#include <scapix/java_api/jdk/internal/icu/util/VersionInfo.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::icu::impl::UCharacterProperty : public jni::object_base<"jdk/internal/icu/impl/UCharacterProperty",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::icu::impl::UCharacterProperty> INSTANCE() { return get_static_field<"INSTANCE", jni::ref<jdk::internal::icu::impl::UCharacterProperty>>(); }
	jni::ref<jdk::internal::icu::impl::Trie2_16> m_trie_() { return get_field<"m_trie_", jni::ref<jdk::internal::icu::impl::Trie2_16>>(); }
	void m_trie_(jni::ref<jdk::internal::icu::impl::Trie2_16> v) { set_field<"m_trie_", jni::ref<jdk::internal::icu::impl::Trie2_16>>(v); }
	jni::ref<jdk::internal::icu::util::VersionInfo> m_unicodeVersion_() { return get_field<"m_unicodeVersion_", jni::ref<jdk::internal::icu::util::VersionInfo>>(); }
	void m_unicodeVersion_(jni::ref<jdk::internal::icu::util::VersionInfo> v) { set_field<"m_unicodeVersion_", jni::ref<jdk::internal::icu::util::VersionInfo>>(v); }
	static jint TYPE_MASK() { return get_static_field<"TYPE_MASK", jint>(); }
	static jint SRC_CHAR() { return get_static_field<"SRC_CHAR", jint>(); }
	static jint SRC_PROPSVEC() { return get_static_field<"SRC_PROPSVEC", jint>(); }
	static jint SRC_BIDI() { return get_static_field<"SRC_BIDI", jint>(); }
	static jint SRC_NFC() { return get_static_field<"SRC_NFC", jint>(); }
	static jint SRC_NFKC() { return get_static_field<"SRC_NFKC", jint>(); }
	jni::ref<jni::array<jchar>> m_scriptExtensions_() { return get_field<"m_scriptExtensions_", jni::ref<jni::array<jchar>>>(); }
	void m_scriptExtensions_(jni::ref<jni::array<jchar>> v) { set_field<"m_scriptExtensions_", jni::ref<jni::array<jchar>>>(v); }
	static jint SCRIPT_X_MASK() { return get_static_field<"SCRIPT_X_MASK", jint>(); }
	static jint SCRIPT_HIGH_MASK() { return get_static_field<"SCRIPT_HIGH_MASK", jint>(); }
	static jint SCRIPT_HIGH_SHIFT() { return get_static_field<"SCRIPT_HIGH_SHIFT", jint>(); }
	static jint MAX_SCRIPT() { return get_static_field<"MAX_SCRIPT", jint>(); }
	static jint SCRIPT_LOW_MASK() { return get_static_field<"SCRIPT_LOW_MASK", jint>(); }
	static jint BIDI_PAIRED_BRACKET_TYPE() { return get_static_field<"BIDI_PAIRED_BRACKET_TYPE", jint>(); }

	jint getProperty(jint ch) { return call_method<"getProperty", jint>(ch); }
	jint getAdditional(jint codepoint, jint column) { return call_method<"getAdditional", jint>(codepoint, column); }
	jni::ref<jdk::internal::icu::util::VersionInfo> getAge(jint codepoint) { return call_method<"getAge", jni::ref<jdk::internal::icu::util::VersionInfo>>(codepoint); }
	jint getType(jint c) { return call_method<"getType", jint>(c); }
	jint getIntPropertyValue(jint c, jint which) { return call_method<"getIntPropertyValue", jint>(c, which); }
	static jint getRawSupplementary(jchar lead, jchar trail) { return call_static_method<"getRawSupplementary", jint>(lead, trail); }
	static jint getMask(jint type) { return call_static_method<"getMask", jint>(type); }
	static jint getEuropeanDigit(jint ch) { return call_static_method<"getEuropeanDigit", jint>(ch); }
	jint digit(jint c) { return call_method<"digit", jint>(c); }
	static jint mergeScriptCodeOrIndex(jint scriptX) { return call_static_method<"mergeScriptCodeOrIndex", jint>(scriptX); }
	void upropsvec_addPropertyStarts(jni::ref<jdk::internal::icu::text::UnicodeSet> set) { return call_method<"upropsvec_addPropertyStarts", void>(set); }

protected:

	UCharacterProperty(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ICU_IMPL_UCHARACTERPROPERTY
