// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEHEADER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEHEADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::jimage { class ImageHeader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::jimage::ImageHeader>
{
	static constexpr fixed_string class_name = "jdk/internal/jimage/ImageHeader";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEHEADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEHEADER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEHEADER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/jdk/internal/jimage/ImageStream.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::jimage::ImageHeader : public jni::object_base<"jdk/internal/jimage/ImageHeader",
	java::lang::Object>
{
public:

	static jint MAGIC() { return get_static_field<"MAGIC", jint>(); }
	static jint MAJOR_VERSION() { return get_static_field<"MAJOR_VERSION", jint>(); }
	static jint MINOR_VERSION() { return get_static_field<"MINOR_VERSION", jint>(); }

	static jni::ref<jdk::internal::jimage::ImageHeader> new_object(jint resourceCount, jint tableCount, jint locationsSize, jint stringsSize) { return base_::new_object(resourceCount, tableCount, locationsSize, stringsSize); }
	static jni::ref<jdk::internal::jimage::ImageHeader> new_object(jint magic, jint majorVersion, jint minorVersion, jint flags, jint resourceCount, jint tableLength, jint locationsSize, jint stringsSize) { return base_::new_object(magic, majorVersion, minorVersion, flags, resourceCount, tableLength, locationsSize, stringsSize); }
	static jint getHeaderSize() { return call_static_method<"getHeaderSize", jint>(); }
	void writeTo(jni::ref<jdk::internal::jimage::ImageStream> stream) { return call_method<"writeTo", void>(stream); }
	void writeTo(jni::ref<java::nio::ByteBuffer> buffer) { return call_method<"writeTo", void>(buffer); }
	jint getMagic() { return call_method<"getMagic", jint>(); }
	jint getMajorVersion() { return call_method<"getMajorVersion", jint>(); }
	jint getMinorVersion() { return call_method<"getMinorVersion", jint>(); }
	jint getFlags() { return call_method<"getFlags", jint>(); }
	jint getResourceCount() { return call_method<"getResourceCount", jint>(); }
	jint getTableLength() { return call_method<"getTableLength", jint>(); }
	jint getRedirectSize() { return call_method<"getRedirectSize", jint>(); }
	jint getOffsetsSize() { return call_method<"getOffsetsSize", jint>(); }
	jint getLocationsSize() { return call_method<"getLocationsSize", jint>(); }
	jint getStringsSize() { return call_method<"getStringsSize", jint>(); }
	jint getIndexSize() { return call_method<"getIndexSize", jint>(); }

protected:

	ImageHeader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_JIMAGE_IMAGEHEADER
