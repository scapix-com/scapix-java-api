// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEINFOEXTENDER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEINFOEXTENDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::module { class ModuleInfoExtender; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::module::ModuleInfoExtender>
{
	static constexpr fixed_string class_name = "jdk/internal/module/ModuleInfoExtender";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEINFOEXTENDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEINFOEXTENDER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEINFOEXTENDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Version.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/jdk/internal/module/ModuleHashes.h>
#include <scapix/java_api/jdk/internal/module/ModuleResolution.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::module::ModuleInfoExtender : public jni::object_base<"jdk/internal/module/ModuleInfoExtender",
	java::lang::Object>
{
public:

	jni::ref<jdk::internal::module::ModuleInfoExtender> packages(jni::ref<java::util::Set> packages) { return call_method<"packages", jni::ref<jdk::internal::module::ModuleInfoExtender>>(packages); }
	jni::ref<jdk::internal::module::ModuleInfoExtender> version(jni::ref<java::lang::module::ModuleDescriptor_Version> version) { return call_method<"version", jni::ref<jdk::internal::module::ModuleInfoExtender>>(version); }
	jni::ref<jdk::internal::module::ModuleInfoExtender> mainClass(jni::ref<java::lang::String> mainClass) { return call_method<"mainClass", jni::ref<jdk::internal::module::ModuleInfoExtender>>(mainClass); }
	jni::ref<jdk::internal::module::ModuleInfoExtender> targetPlatform(jni::ref<java::lang::String> targetPlatform) { return call_method<"targetPlatform", jni::ref<jdk::internal::module::ModuleInfoExtender>>(targetPlatform); }
	jni::ref<jdk::internal::module::ModuleInfoExtender> hashes(jni::ref<jdk::internal::module::ModuleHashes> hashes) { return call_method<"hashes", jni::ref<jdk::internal::module::ModuleInfoExtender>>(hashes); }
	jni::ref<jdk::internal::module::ModuleInfoExtender> moduleResolution(jni::ref<jdk::internal::module::ModuleResolution> mres) { return call_method<"moduleResolution", jni::ref<jdk::internal::module::ModuleInfoExtender>>(mres); }
	void write(jni::ref<java::io::OutputStream> out) { return call_method<"write", void>(out); }
	jni::ref<jni::array<jbyte>> toByteArray() { return call_method<"toByteArray", jni::ref<jni::array<jbyte>>>(); }
	static jni::ref<jdk::internal::module::ModuleInfoExtender> newExtender(jni::ref<java::io::InputStream> in) { return call_static_method<"newExtender", jni::ref<jdk::internal::module::ModuleInfoExtender>>(in); }

protected:

	ModuleInfoExtender(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEINFOEXTENDER
