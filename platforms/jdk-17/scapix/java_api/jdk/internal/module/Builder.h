// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_BUILDER_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_BUILDER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::module { class Builder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::module::Builder>
{
	static constexpr fixed_string class_name = "jdk/internal/module/Builder";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_BUILDER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_BUILDER)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_BUILDER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Exports.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Opens.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Provides.h>
#include <scapix/java_api/java/lang/module/ModuleDescriptor_Requires.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/java/util/Set.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class jdk::internal::module::Builder : public jni::object_base<"jdk/internal/module/Builder",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::module::ModuleDescriptor_Requires> newRequires(jni::ref<java::util::Set> mods, jni::ref<java::lang::String> mn, jni::ref<java::lang::String> compiledVersion) { return call_static_method<"newRequires", jni::ref<java::lang::module::ModuleDescriptor_Requires>>(mods, mn, compiledVersion); }
	static jni::ref<java::lang::module::ModuleDescriptor_Requires> newRequires(jni::ref<java::util::Set> mods, jni::ref<java::lang::String> mn) { return call_static_method<"newRequires", jni::ref<java::lang::module::ModuleDescriptor_Requires>>(mods, mn); }
	static jni::ref<java::lang::module::ModuleDescriptor_Exports> newExports(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> pn, jni::ref<java::util::Set> targets) { return call_static_method<"newExports", jni::ref<java::lang::module::ModuleDescriptor_Exports>>(ms, pn, targets); }
	static jni::ref<java::lang::module::ModuleDescriptor_Opens> newOpens(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> pn) { return call_static_method<"newOpens", jni::ref<java::lang::module::ModuleDescriptor_Opens>>(ms, pn); }
	static jni::ref<java::lang::module::ModuleDescriptor_Opens> newOpens(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> pn, jni::ref<java::util::Set> targets) { return call_static_method<"newOpens", jni::ref<java::lang::module::ModuleDescriptor_Opens>>(ms, pn, targets); }
	static jni::ref<java::lang::module::ModuleDescriptor_Exports> newExports(jni::ref<java::util::Set> ms, jni::ref<java::lang::String> pn) { return call_static_method<"newExports", jni::ref<java::lang::module::ModuleDescriptor_Exports>>(ms, pn); }
	static jni::ref<java::lang::module::ModuleDescriptor_Provides> newProvides(jni::ref<java::lang::String> st, jni::ref<java::util::List> pcs) { return call_static_method<"newProvides", jni::ref<java::lang::module::ModuleDescriptor_Provides>>(st, pcs); }
	jni::ref<jdk::internal::module::Builder> exports(jni::ref<jni::array<java::lang::module::ModuleDescriptor_Exports>> exports) { return call_method<"exports", jni::ref<jdk::internal::module::Builder>>(exports); }
	jni::ref<jdk::internal::module::Builder> opens(jni::ref<jni::array<java::lang::module::ModuleDescriptor_Opens>> opens) { return call_method<"opens", jni::ref<jdk::internal::module::Builder>>(opens); }
	jni::ref<jdk::internal::module::Builder> requires_(jni::ref<jni::array<java::lang::module::ModuleDescriptor_Requires>> requires_) { return call_method<"requires", jni::ref<jdk::internal::module::Builder>>(requires_); }
	jni::ref<jdk::internal::module::Builder> packages(jni::ref<java::util::Set> packages) { return call_method<"packages", jni::ref<jdk::internal::module::Builder>>(packages); }
	jni::ref<jdk::internal::module::Builder> uses(jni::ref<java::util::Set> uses) { return call_method<"uses", jni::ref<jdk::internal::module::Builder>>(uses); }
	jni::ref<jdk::internal::module::Builder> provides(jni::ref<jni::array<java::lang::module::ModuleDescriptor_Provides>> provides) { return call_method<"provides", jni::ref<jdk::internal::module::Builder>>(provides); }
	jni::ref<jdk::internal::module::Builder> version(jni::ref<java::lang::String> v) { return call_method<"version", jni::ref<jdk::internal::module::Builder>>(v); }
	jni::ref<jdk::internal::module::Builder> mainClass(jni::ref<java::lang::String> mc) { return call_method<"mainClass", jni::ref<jdk::internal::module::Builder>>(mc); }
	jni::ref<java::lang::module::ModuleDescriptor> build(jint hashCode) { return call_method<"build", jni::ref<java::lang::module::ModuleDescriptor>>(hashCode); }

protected:

	Builder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_BUILDER
