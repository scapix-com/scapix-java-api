// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/module/ModuleFinder.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATH_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::module { class ModulePath; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::module::ModulePath>
{
	static constexpr fixed_string class_name = "jdk/internal/module/ModulePath";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::lang::module::ModuleFinder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATH)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATH

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Runtime_Version.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/file/Path.h>
#include <scapix/java_api/java/util/Optional.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/jdk/internal/module/ModulePatcher.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::module::ModulePath : public jni::object_base<"jdk/internal/module/ModulePath",
	java::lang::Object,
	java::lang::module::ModuleFinder>
{
public:

	static jni::ref<java::lang::module::ModuleFinder> of(jni::ref<jdk::internal::module::ModulePatcher> patcher, jni::ref<jni::array<java::nio::file::Path>> entries) { return call_static_method<"of", jni::ref<java::lang::module::ModuleFinder>>(patcher, entries); }
	static jni::ref<java::lang::module::ModuleFinder> of(jni::ref<jni::array<java::nio::file::Path>> entries) { return call_static_method<"of", jni::ref<java::lang::module::ModuleFinder>>(entries); }
	static jni::ref<java::lang::module::ModuleFinder> of(jni::ref<java::lang::Runtime_Version> version, jboolean isLinkPhase, jni::ref<jni::array<java::nio::file::Path>> entries) { return call_static_method<"of", jni::ref<java::lang::module::ModuleFinder>>(version, isLinkPhase, entries); }
	jni::ref<java::util::Optional> find(jni::ref<java::lang::String> name) { return call_method<"find", jni::ref<java::util::Optional>>(name); }
	jni::ref<java::util::Set> findAll() { return call_method<"findAll", jni::ref<java::util::Set>>(); }

protected:

	ModulePath(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MODULE_MODULEPATH
