// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SIGNAL_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SIGNAL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::misc { class Signal; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::misc::Signal>
{
	static constexpr fixed_string class_name = "jdk/internal/misc/Signal";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SIGNAL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SIGNAL)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SIGNAL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/jdk/internal/misc/Signal_Handler.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::misc::Signal : public jni::object_base<"jdk/internal/misc/Signal",
	java::lang::Object>
{
public:

	using Handler = Signal_Handler;

	jint getNumber() { return call_method<"getNumber", jint>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<jdk::internal::misc::Signal> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	static jni::ref<jdk::internal::misc::Signal_Handler> handle(jni::ref<jdk::internal::misc::Signal> sig, jni::ref<jdk::internal::misc::Signal_Handler> handler) { return call_static_method<"handle", jni::ref<jdk::internal::misc::Signal_Handler>>(sig, handler); }
	static void raise(jni::ref<jdk::internal::misc::Signal> sig) { return call_static_method<"raise", void>(sig); }

protected:

	Signal(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SIGNAL
