// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_SCOPE_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_SCOPE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::misc { class ScopedMemoryAccess_Scope; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::misc::ScopedMemoryAccess_Scope>
{
	static constexpr fixed_string class_name = "jdk/internal/misc/ScopedMemoryAccess$Scope";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_SCOPE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_SCOPE)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_SCOPE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Thread.h>
#include <scapix/java_api/jdk/internal/misc/ScopedMemoryAccess_Scope_Handle.h>
#include <scapix/java_api/jdk/internal/misc/ScopedMemoryAccess_Scope_ScopedAccessError.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::misc::ScopedMemoryAccess_Scope : public jni::object_base<"jdk/internal/misc/ScopedMemoryAccess$Scope",
	java::lang::Object>
{
public:

	using ScopedAccessError = ScopedMemoryAccess_Scope_ScopedAccessError;
	using Handle = ScopedMemoryAccess_Scope_Handle;

	void checkValidState() { return call_method<"checkValidState", void>(); }
	jni::ref<java::lang::Thread> ownerThread() { return call_method<"ownerThread", jni::ref<java::lang::Thread>>(); }
	jboolean isImplicit() { return call_method<"isImplicit", jboolean>(); }
	jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope_Handle> acquire() { return call_method<"acquire", jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope_Handle>>(); }
	void release(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope_Handle> p1) { return call_method<"release", void>(p1); }

protected:

	ScopedMemoryAccess_Scope(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_SCOPE
