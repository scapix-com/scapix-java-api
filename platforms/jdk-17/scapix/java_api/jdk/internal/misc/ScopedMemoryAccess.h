// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::misc { class ScopedMemoryAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::misc::ScopedMemoryAccess>
{
	static constexpr fixed_string class_name = "jdk/internal/misc/ScopedMemoryAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS)
#define SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/jdk/internal/misc/ScopedMemoryAccess_Scope.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_LoadOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_StoreVectorOperation.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_Vector.h>
#include <scapix/java_api/jdk/internal/vm/vector/VectorSupport_VectorSpecies.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::misc::ScopedMemoryAccess : public jni::object_base<"jdk/internal/misc/ScopedMemoryAccess",
	java::lang::Object>
{
public:

	using Scope = ScopedMemoryAccess_Scope;

	jboolean closeScope(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope) { return call_method<"closeScope", jboolean>(scope); }
	static jni::ref<jdk::internal::misc::ScopedMemoryAccess> getScopedMemoryAccess() { return call_static_method<"getScopedMemoryAccess", jni::ref<jdk::internal::misc::ScopedMemoryAccess>>(); }
	void copyMemory(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> srcScope, jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> dstScope, jni::ref<java::lang::Object> srcBase, jlong srcOffset, jni::ref<java::lang::Object> p5, jlong destBase, jlong destOffset) { return call_method<"copyMemory", void>(srcScope, dstScope, srcBase, srcOffset, p5, destBase, destOffset); }
	void copySwapMemory(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> srcScope, jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> dstScope, jni::ref<java::lang::Object> srcBase, jlong srcOffset, jni::ref<java::lang::Object> p5, jlong destBase, jlong destOffset, jlong p8) { return call_method<"copySwapMemory", void>(srcScope, dstScope, srcBase, srcOffset, p5, destBase, destOffset, p8); }
	void setMemory(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> o, jlong offset, jlong p4, jbyte bytes) { return call_method<"setMemory", void>(scope, o, offset, p4, bytes); }
	jint vectorizedMismatch(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> aScope, jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> bScope, jni::ref<java::lang::Object> a, jlong aOffset, jni::ref<java::lang::Object> p5, jlong b, jint bOffset, jint p8) { return call_method<"vectorizedMismatch", jint>(aScope, bScope, a, aOffset, p5, b, bOffset, p8); }
	jboolean isLoaded(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jlong address, jboolean p3, jlong isSync) { return call_method<"isLoaded", jboolean>(scope, address, p3, isSync); }
	jboolean isLoadedInternal(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jlong address, jboolean p3, jlong isSync) { return call_method<"isLoadedInternal", jboolean>(scope, address, p3, isSync); }
	void load(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jlong address, jboolean p3, jlong isSync) { return call_method<"load", void>(scope, address, p3, isSync); }
	void loadInternal(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jlong address, jboolean p3, jlong isSync) { return call_method<"loadInternal", void>(scope, address, p3, isSync); }
	void unload(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jlong address, jboolean p3, jlong isSync) { return call_method<"unload", void>(scope, address, p3, isSync); }
	void unloadInternal(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jlong address, jboolean p3, jlong isSync) { return call_method<"unloadInternal", void>(scope, address, p3, isSync); }
	void force(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::io::FileDescriptor> fd, jlong address, jboolean p4, jlong isSync, jlong index) { return call_method<"force", void>(scope, fd, address, p4, isSync, index); }
	void forceInternal(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::io::FileDescriptor> fd, jlong address, jboolean p4, jlong isSync, jlong index) { return call_method<"forceInternal", void>(scope, fd, address, p4, isSync, index); }
	static jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> loadFromByteBuffer(jni::ref<java::lang::Class> vmClass, jni::ref<java::lang::Class> e, jint length, jni::ref<java::nio::ByteBuffer> bb, jint offset, jni::ref<jdk::internal::vm::vector::VectorSupport_VectorSpecies> s, jni::ref<jdk::internal::vm::vector::VectorSupport_LoadOperation> defaultImpl) { return call_static_method<"loadFromByteBuffer", jni::ref<jdk::internal::vm::vector::VectorSupport_Vector>>(vmClass, e, length, bb, offset, s, defaultImpl); }
	static void storeIntoByteBuffer(jni::ref<java::lang::Class> vmClass, jni::ref<java::lang::Class> e, jint length, jni::ref<jdk::internal::vm::vector::VectorSupport_Vector> v, jni::ref<java::nio::ByteBuffer> bb, jint offset, jni::ref<jdk::internal::vm::vector::VectorSupport_StoreVectorOperation> defaultImpl) { return call_static_method<"storeIntoByteBuffer", void>(vmClass, e, length, v, bb, offset, defaultImpl); }
	jbyte getByte(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getByte", jbyte>(scope, base, offset); }
	void putByte(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"putByte", void>(scope, base, offset, p4); }
	jbyte getByteVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getByteVolatile", jbyte>(scope, base, offset); }
	void putByteVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"putByteVolatile", void>(scope, base, offset, p4); }
	jbyte getByteAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getByteAcquire", jbyte>(scope, base, offset); }
	void putByteRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"putByteRelease", void>(scope, base, offset, p4); }
	jbyte getByteOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getByteOpaque", jbyte>(scope, base, offset); }
	void putByteOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"putByteOpaque", void>(scope, base, offset, p4); }
	jbyte getAndAddByte(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndAddByte", jbyte>(scope, base, offset, p4); }
	jbyte getAndAddByteAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndAddByteAcquire", jbyte>(scope, base, offset, p4); }
	jbyte getAndAddByteRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndAddByteRelease", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseOrByte(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseOrByte", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseOrByteAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseOrByteAcquire", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseOrByteRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseOrByteRelease", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseAndByte(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseAndByte", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseAndByteAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseAndByteAcquire", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseAndByteRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseAndByteRelease", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseXorByte(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseXorByte", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseXorByteAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseXorByteAcquire", jbyte>(scope, base, offset, p4); }
	jbyte getAndBitwiseXorByteRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jbyte p4) { return call_method<"getAndBitwiseXorByteRelease", jbyte>(scope, base, offset, p4); }
	jshort getShort(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getShort", jshort>(scope, base, offset); }
	void putShort(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"putShort", void>(scope, base, offset, p4); }
	jshort getShortUnaligned(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jboolean p4) { return call_method<"getShortUnaligned", jshort>(scope, base, offset, p4); }
	void putShortUnaligned(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4, jboolean value) { return call_method<"putShortUnaligned", void>(scope, base, offset, p4, value); }
	jshort getShortVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getShortVolatile", jshort>(scope, base, offset); }
	void putShortVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"putShortVolatile", void>(scope, base, offset, p4); }
	jshort getShortAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getShortAcquire", jshort>(scope, base, offset); }
	void putShortRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"putShortRelease", void>(scope, base, offset, p4); }
	jshort getShortOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getShortOpaque", jshort>(scope, base, offset); }
	void putShortOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"putShortOpaque", void>(scope, base, offset, p4); }
	jshort getAndAddShort(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndAddShort", jshort>(scope, base, offset, p4); }
	jshort getAndAddShortAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndAddShortAcquire", jshort>(scope, base, offset, p4); }
	jshort getAndAddShortRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndAddShortRelease", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseOrShort(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseOrShort", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseOrShortAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseOrShortAcquire", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseOrShortRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseOrShortRelease", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseAndShort(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseAndShort", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseAndShortAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseAndShortAcquire", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseAndShortRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseAndShortRelease", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseXorShort(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseXorShort", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseXorShortAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseXorShortAcquire", jshort>(scope, base, offset, p4); }
	jshort getAndBitwiseXorShortRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jshort p4) { return call_method<"getAndBitwiseXorShortRelease", jshort>(scope, base, offset, p4); }
	jchar getChar(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getChar", jchar>(scope, base, offset); }
	void putChar(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"putChar", void>(scope, base, offset, p4); }
	jchar getCharUnaligned(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jboolean p4) { return call_method<"getCharUnaligned", jchar>(scope, base, offset, p4); }
	void putCharUnaligned(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4, jboolean value) { return call_method<"putCharUnaligned", void>(scope, base, offset, p4, value); }
	jchar getCharVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getCharVolatile", jchar>(scope, base, offset); }
	void putCharVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"putCharVolatile", void>(scope, base, offset, p4); }
	jchar getCharAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getCharAcquire", jchar>(scope, base, offset); }
	void putCharRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"putCharRelease", void>(scope, base, offset, p4); }
	jchar getCharOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getCharOpaque", jchar>(scope, base, offset); }
	void putCharOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"putCharOpaque", void>(scope, base, offset, p4); }
	jchar getAndAddChar(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndAddChar", jchar>(scope, base, offset, p4); }
	jchar getAndAddCharAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndAddCharAcquire", jchar>(scope, base, offset, p4); }
	jchar getAndAddCharRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndAddCharRelease", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseOrChar(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseOrChar", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseOrCharAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseOrCharAcquire", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseOrCharRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseOrCharRelease", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseAndChar(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseAndChar", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseAndCharAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseAndCharAcquire", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseAndCharRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseAndCharRelease", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseXorChar(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseXorChar", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseXorCharAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseXorCharAcquire", jchar>(scope, base, offset, p4); }
	jchar getAndBitwiseXorCharRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jchar p4) { return call_method<"getAndBitwiseXorCharRelease", jchar>(scope, base, offset, p4); }
	jint getInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getInt", jint>(scope, base, offset); }
	void putInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"putInt", void>(scope, base, offset, p4); }
	jint getIntUnaligned(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jboolean p4) { return call_method<"getIntUnaligned", jint>(scope, base, offset, p4); }
	void putIntUnaligned(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jboolean value) { return call_method<"putIntUnaligned", void>(scope, base, offset, p4, value); }
	jint getIntVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getIntVolatile", jint>(scope, base, offset); }
	void putIntVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"putIntVolatile", void>(scope, base, offset, p4); }
	jint getIntAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getIntAcquire", jint>(scope, base, offset); }
	void putIntRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"putIntRelease", void>(scope, base, offset, p4); }
	jint getIntOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getIntOpaque", jint>(scope, base, offset); }
	void putIntOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"putIntOpaque", void>(scope, base, offset, p4); }
	jboolean compareAndSetInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jint expected) { return call_method<"compareAndSetInt", jboolean>(scope, base, offset, p4, expected); }
	jint compareAndExchangeInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jint expected) { return call_method<"compareAndExchangeInt", jint>(scope, base, offset, p4, expected); }
	jint compareAndExchangeIntAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jint expected) { return call_method<"compareAndExchangeIntAcquire", jint>(scope, base, offset, p4, expected); }
	jint compareAndExchangeIntRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jint expected) { return call_method<"compareAndExchangeIntRelease", jint>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetIntPlain(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jint expected) { return call_method<"weakCompareAndSetIntPlain", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jint expected) { return call_method<"weakCompareAndSetInt", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetIntAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jint expected) { return call_method<"weakCompareAndSetIntAcquire", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetIntRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4, jint expected) { return call_method<"weakCompareAndSetIntRelease", jboolean>(scope, base, offset, p4, expected); }
	jint getAndSetInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndSetInt", jint>(scope, base, offset, p4); }
	jint getAndSetIntAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndSetIntAcquire", jint>(scope, base, offset, p4); }
	jint getAndSetIntRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndSetIntRelease", jint>(scope, base, offset, p4); }
	jint getAndAddInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndAddInt", jint>(scope, base, offset, p4); }
	jint getAndAddIntAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndAddIntAcquire", jint>(scope, base, offset, p4); }
	jint getAndAddIntRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndAddIntRelease", jint>(scope, base, offset, p4); }
	jint getAndBitwiseOrInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseOrInt", jint>(scope, base, offset, p4); }
	jint getAndBitwiseOrIntAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseOrIntAcquire", jint>(scope, base, offset, p4); }
	jint getAndBitwiseOrIntRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseOrIntRelease", jint>(scope, base, offset, p4); }
	jint getAndBitwiseAndInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseAndInt", jint>(scope, base, offset, p4); }
	jint getAndBitwiseAndIntAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseAndIntAcquire", jint>(scope, base, offset, p4); }
	jint getAndBitwiseAndIntRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseAndIntRelease", jint>(scope, base, offset, p4); }
	jint getAndBitwiseXorInt(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseXorInt", jint>(scope, base, offset, p4); }
	jint getAndBitwiseXorIntAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseXorIntAcquire", jint>(scope, base, offset, p4); }
	jint getAndBitwiseXorIntRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jint p4) { return call_method<"getAndBitwiseXorIntRelease", jint>(scope, base, offset, p4); }
	jlong getLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getLong", jlong>(scope, base, offset); }
	void putLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"putLong", void>(scope, base, offset, p4); }
	jlong getLongUnaligned(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jboolean p4) { return call_method<"getLongUnaligned", jlong>(scope, base, offset, p4); }
	void putLongUnaligned(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jboolean value) { return call_method<"putLongUnaligned", void>(scope, base, offset, p4, value); }
	jlong getLongVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getLongVolatile", jlong>(scope, base, offset); }
	void putLongVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"putLongVolatile", void>(scope, base, offset, p4); }
	jlong getLongAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getLongAcquire", jlong>(scope, base, offset); }
	void putLongRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"putLongRelease", void>(scope, base, offset, p4); }
	jlong getLongOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getLongOpaque", jlong>(scope, base, offset); }
	void putLongOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"putLongOpaque", void>(scope, base, offset, p4); }
	jboolean compareAndSetLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jlong expected) { return call_method<"compareAndSetLong", jboolean>(scope, base, offset, p4, expected); }
	jlong compareAndExchangeLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jlong expected) { return call_method<"compareAndExchangeLong", jlong>(scope, base, offset, p4, expected); }
	jlong compareAndExchangeLongAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jlong expected) { return call_method<"compareAndExchangeLongAcquire", jlong>(scope, base, offset, p4, expected); }
	jlong compareAndExchangeLongRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jlong expected) { return call_method<"compareAndExchangeLongRelease", jlong>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetLongPlain(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jlong expected) { return call_method<"weakCompareAndSetLongPlain", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jlong expected) { return call_method<"weakCompareAndSetLong", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetLongAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jlong expected) { return call_method<"weakCompareAndSetLongAcquire", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetLongRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4, jlong expected) { return call_method<"weakCompareAndSetLongRelease", jboolean>(scope, base, offset, p4, expected); }
	jlong getAndSetLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndSetLong", jlong>(scope, base, offset, p4); }
	jlong getAndSetLongAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndSetLongAcquire", jlong>(scope, base, offset, p4); }
	jlong getAndSetLongRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndSetLongRelease", jlong>(scope, base, offset, p4); }
	jlong getAndAddLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndAddLong", jlong>(scope, base, offset, p4); }
	jlong getAndAddLongAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndAddLongAcquire", jlong>(scope, base, offset, p4); }
	jlong getAndAddLongRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndAddLongRelease", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseOrLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseOrLong", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseOrLongAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseOrLongAcquire", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseOrLongRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseOrLongRelease", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseAndLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseAndLong", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseAndLongAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseAndLongAcquire", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseAndLongRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseAndLongRelease", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseXorLong(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseXorLong", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseXorLongAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseXorLongAcquire", jlong>(scope, base, offset, p4); }
	jlong getAndBitwiseXorLongRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jlong p4) { return call_method<"getAndBitwiseXorLongRelease", jlong>(scope, base, offset, p4); }
	jfloat getFloat(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getFloat", jfloat>(scope, base, offset); }
	void putFloat(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"putFloat", void>(scope, base, offset, p4); }
	jfloat getFloatVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getFloatVolatile", jfloat>(scope, base, offset); }
	void putFloatVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"putFloatVolatile", void>(scope, base, offset, p4); }
	jfloat getFloatAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getFloatAcquire", jfloat>(scope, base, offset); }
	void putFloatRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"putFloatRelease", void>(scope, base, offset, p4); }
	jfloat getFloatOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getFloatOpaque", jfloat>(scope, base, offset); }
	void putFloatOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"putFloatOpaque", void>(scope, base, offset, p4); }
	jboolean compareAndSetFloat(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4, jfloat expected) { return call_method<"compareAndSetFloat", jboolean>(scope, base, offset, p4, expected); }
	jfloat compareAndExchangeFloat(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4, jfloat expected) { return call_method<"compareAndExchangeFloat", jfloat>(scope, base, offset, p4, expected); }
	jfloat compareAndExchangeFloatAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4, jfloat expected) { return call_method<"compareAndExchangeFloatAcquire", jfloat>(scope, base, offset, p4, expected); }
	jfloat compareAndExchangeFloatRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4, jfloat expected) { return call_method<"compareAndExchangeFloatRelease", jfloat>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetFloatPlain(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4, jfloat expected) { return call_method<"weakCompareAndSetFloatPlain", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetFloat(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4, jfloat expected) { return call_method<"weakCompareAndSetFloat", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetFloatAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4, jfloat expected) { return call_method<"weakCompareAndSetFloatAcquire", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetFloatRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4, jfloat expected) { return call_method<"weakCompareAndSetFloatRelease", jboolean>(scope, base, offset, p4, expected); }
	jfloat getAndSetFloat(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"getAndSetFloat", jfloat>(scope, base, offset, p4); }
	jfloat getAndSetFloatAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"getAndSetFloatAcquire", jfloat>(scope, base, offset, p4); }
	jfloat getAndSetFloatRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"getAndSetFloatRelease", jfloat>(scope, base, offset, p4); }
	jfloat getAndAddFloat(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"getAndAddFloat", jfloat>(scope, base, offset, p4); }
	jfloat getAndAddFloatAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"getAndAddFloatAcquire", jfloat>(scope, base, offset, p4); }
	jfloat getAndAddFloatRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jfloat p4) { return call_method<"getAndAddFloatRelease", jfloat>(scope, base, offset, p4); }
	jdouble getDouble(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getDouble", jdouble>(scope, base, offset); }
	void putDouble(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"putDouble", void>(scope, base, offset, p4); }
	jdouble getDoubleVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getDoubleVolatile", jdouble>(scope, base, offset); }
	void putDoubleVolatile(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"putDoubleVolatile", void>(scope, base, offset, p4); }
	jdouble getDoubleAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getDoubleAcquire", jdouble>(scope, base, offset); }
	void putDoubleRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"putDoubleRelease", void>(scope, base, offset, p4); }
	jdouble getDoubleOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset) { return call_method<"getDoubleOpaque", jdouble>(scope, base, offset); }
	void putDoubleOpaque(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"putDoubleOpaque", void>(scope, base, offset, p4); }
	jboolean compareAndSetDouble(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4, jdouble expected) { return call_method<"compareAndSetDouble", jboolean>(scope, base, offset, p4, expected); }
	jdouble compareAndExchangeDouble(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4, jdouble expected) { return call_method<"compareAndExchangeDouble", jdouble>(scope, base, offset, p4, expected); }
	jdouble compareAndExchangeDoubleAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4, jdouble expected) { return call_method<"compareAndExchangeDoubleAcquire", jdouble>(scope, base, offset, p4, expected); }
	jdouble compareAndExchangeDoubleRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4, jdouble expected) { return call_method<"compareAndExchangeDoubleRelease", jdouble>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetDoublePlain(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4, jdouble expected) { return call_method<"weakCompareAndSetDoublePlain", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetDouble(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4, jdouble expected) { return call_method<"weakCompareAndSetDouble", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetDoubleAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4, jdouble expected) { return call_method<"weakCompareAndSetDoubleAcquire", jboolean>(scope, base, offset, p4, expected); }
	jboolean weakCompareAndSetDoubleRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4, jdouble expected) { return call_method<"weakCompareAndSetDoubleRelease", jboolean>(scope, base, offset, p4, expected); }
	jdouble getAndSetDouble(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"getAndSetDouble", jdouble>(scope, base, offset, p4); }
	jdouble getAndSetDoubleAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"getAndSetDoubleAcquire", jdouble>(scope, base, offset, p4); }
	jdouble getAndSetDoubleRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"getAndSetDoubleRelease", jdouble>(scope, base, offset, p4); }
	jdouble getAndAddDouble(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"getAndAddDouble", jdouble>(scope, base, offset, p4); }
	jdouble getAndAddDoubleAcquire(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"getAndAddDoubleAcquire", jdouble>(scope, base, offset, p4); }
	jdouble getAndAddDoubleRelease(jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope, jni::ref<java::lang::Object> base, jlong offset, jdouble p4) { return call_method<"getAndAddDoubleRelease", jdouble>(scope, base, offset, p4); }

protected:

	ScopedMemoryAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_MISC_SCOPEDMEMORYACCESS
