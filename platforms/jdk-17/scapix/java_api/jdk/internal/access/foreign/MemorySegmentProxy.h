// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_FOREIGN_MEMORYSEGMENTPROXY_FWD
#define SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_FOREIGN_MEMORYSEGMENTPROXY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::jdk::internal::access::foreign { class MemorySegmentProxy; }

template<>
struct scapix::jni::object_traits<scapix::java_api::jdk::internal::access::foreign::MemorySegmentProxy>
{
	static constexpr fixed_string class_name = "jdk/internal/access/foreign/MemorySegmentProxy";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_FOREIGN_MEMORYSEGMENTPROXY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_FOREIGN_MEMORYSEGMENTPROXY)
#define SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_FOREIGN_MEMORYSEGMENTPROXY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/jdk/internal/misc/ScopedMemoryAccess_Scope.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class jdk::internal::access::foreign::MemorySegmentProxy : public jni::object_base<"jdk/internal/access/foreign/MemorySegmentProxy",
	java::lang::Object>
{
public:

	static jni::ref<jdk::internal::access::foreign::MemorySegmentProxy> new_object() { return base_::new_object(); }
	void checkAccess(jlong p1, jlong p2, jboolean p3) { return call_method<"checkAccess", void>(p1, p2, p3); }
	jlong unsafeGetOffset() { return call_method<"unsafeGetOffset", jlong>(); }
	jni::ref<java::lang::Object> unsafeGetBase() { return call_method<"unsafeGetBase", jni::ref<java::lang::Object>>(); }
	jboolean isSmall() { return call_method<"isSmall", jboolean>(); }
	jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope> scope() { return call_method<"scope", jni::ref<jdk::internal::misc::ScopedMemoryAccess_Scope>>(); }
	static jlong addOffsets(jlong op1, jlong p2, jni::ref<jdk::internal::access::foreign::MemorySegmentProxy> op2) { return call_static_method<"addOffsets", jlong>(op1, p2, op2); }
	static jlong multiplyOffsets(jlong op1, jlong p2, jni::ref<jdk::internal::access::foreign::MemorySegmentProxy> op2) { return call_static_method<"multiplyOffsets", jlong>(op1, p2, op2); }

protected:

	MemorySegmentProxy(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JDK_INTERNAL_ACCESS_FOREIGN_MEMORYSEGMENTPROXY
