// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/charset/CharsetEncoder.h>
#include <scapix/java_api/sun/nio/cs/ArrayEncoder.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_ENCODER_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_ENCODER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::cs { class DoubleByte_Encoder; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::cs::DoubleByte_Encoder>
{
	static constexpr fixed_string class_name = "sun/nio/cs/DoubleByte$Encoder";
	using base_classes = std::tuple<scapix::java_api::java::nio::charset::CharsetEncoder, scapix::java_api::sun::nio::cs::ArrayEncoder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_ENCODER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_ENCODER)
#define SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_ENCODER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/charset/Charset.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::nio::cs::DoubleByte_Encoder : public jni::object_base<"sun/nio/cs/DoubleByte$Encoder",
	java::nio::charset::CharsetEncoder,
	sun::nio::cs::ArrayEncoder>
{
public:

	static jni::ref<sun::nio::cs::DoubleByte_Encoder> new_object(jni::ref<java::nio::charset::Charset> cs, jni::ref<jni::array<jchar>> c2b, jni::ref<jni::array<jchar>> c2bIndex) { return base_::new_object(cs, c2b, c2bIndex); }
	static jni::ref<sun::nio::cs::DoubleByte_Encoder> new_object(jni::ref<java::nio::charset::Charset> cs, jni::ref<jni::array<jchar>> c2b, jni::ref<jni::array<jchar>> c2bIndex, jboolean isASCIICompatible) { return base_::new_object(cs, c2b, c2bIndex, isASCIICompatible); }
	static jni::ref<sun::nio::cs::DoubleByte_Encoder> new_object(jni::ref<java::nio::charset::Charset> cs, jfloat avg, jfloat max, jni::ref<jni::array<jbyte>> repl, jni::ref<jni::array<jchar>> c2b, jni::ref<jni::array<jchar>> c2bIndex, jboolean isASCIICompatible) { return base_::new_object(cs, avg, max, repl, c2b, c2bIndex, isASCIICompatible); }
	jboolean canEncode(jchar c) { return call_method<"canEncode", jboolean>(c); }
	jint encode(jni::ref<jni::array<jchar>> src, jint sp, jint len, jni::ref<jni::array<jbyte>> dst) { return call_method<"encode", jint>(src, sp, len, dst); }
	jint encodeFromLatin1(jni::ref<jni::array<jbyte>> src, jint sp, jint len, jni::ref<jni::array<jbyte>> dst) { return call_method<"encodeFromLatin1", jint>(src, sp, len, dst); }
	jint encodeFromUTF16(jni::ref<jni::array<jbyte>> src, jint sp, jint len, jni::ref<jni::array<jbyte>> dst) { return call_method<"encodeFromUTF16", jint>(src, sp, len, dst); }
	jboolean isASCIICompatible() { return call_method<"isASCIICompatible", jboolean>(); }
	jint encodeChar(jchar ch) { return call_method<"encodeChar", jint>(ch); }
	static void initC2B(jni::ref<jni::array<java::lang::String>> b2c, jni::ref<java::lang::String> b2cSB, jni::ref<java::lang::String> b2cNR, jni::ref<java::lang::String> c2bNR, jint b2Min, jint b2Max, jni::ref<jni::array<jchar>> c2b, jni::ref<jni::array<jchar>> c2bIndex) { return call_static_method<"initC2B", void>(b2c, b2cSB, b2cNR, c2bNR, b2Min, b2Max, c2b, c2bIndex); }

protected:

	DoubleByte_Encoder(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_ENCODER
