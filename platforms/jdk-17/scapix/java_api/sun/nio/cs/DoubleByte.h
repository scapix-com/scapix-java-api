// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::cs { class DoubleByte; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::cs::DoubleByte>
{
	static constexpr fixed_string class_name = "sun/nio/cs/DoubleByte";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE)
#define SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/sun/nio/cs/DoubleByte_Encoder_EUC_SIM.h>
#include <scapix/java_api/sun/nio/cs/DoubleByte_Encoder_EBCDIC.h>
#include <scapix/java_api/sun/nio/cs/DoubleByte_Encoder_DBCSONLY.h>
#include <scapix/java_api/sun/nio/cs/DoubleByte_Encoder.h>
#include <scapix/java_api/sun/nio/cs/DoubleByte_Decoder_EUC_SIM.h>
#include <scapix/java_api/sun/nio/cs/DoubleByte_Decoder_DBCSONLY.h>
#include <scapix/java_api/sun/nio/cs/DoubleByte_Decoder_EBCDIC.h>
#include <scapix/java_api/sun/nio/cs/DoubleByte_Decoder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::nio::cs::DoubleByte : public jni::object_base<"sun/nio/cs/DoubleByte",
	java::lang::Object>
{
public:

	using Encoder_EUC_SIM = DoubleByte_Encoder_EUC_SIM;
	using Encoder_EBCDIC = DoubleByte_Encoder_EBCDIC;
	using Encoder_DBCSONLY = DoubleByte_Encoder_DBCSONLY;
	using Encoder = DoubleByte_Encoder;
	using Decoder_EUC_SIM = DoubleByte_Decoder_EUC_SIM;
	using Decoder_DBCSONLY = DoubleByte_Decoder_DBCSONLY;
	using Decoder_EBCDIC = DoubleByte_Decoder_EBCDIC;
	using Decoder = DoubleByte_Decoder;

	static jni::ref<jni::array<jchar>> B2C_UNMAPPABLE() { return get_static_field<"B2C_UNMAPPABLE", jni::ref<jni::array<jchar>>>(); }

	static jni::ref<sun::nio::cs::DoubleByte> new_object() { return base_::new_object(); }

protected:

	DoubleByte(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CS_DOUBLEBYTE
