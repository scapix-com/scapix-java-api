// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/nio/channels/AsynchronousServerSocketChannel.h>
#include <scapix/java_api/sun/nio/ch/Cancellable.h>
#include <scapix/java_api/sun/nio/ch/Groupable.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSSERVERSOCKETCHANNELIMPL_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSSERVERSOCKETCHANNELIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::ch { class AsynchronousServerSocketChannelImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::ch::AsynchronousServerSocketChannelImpl>
{
	static constexpr fixed_string class_name = "sun/nio/ch/AsynchronousServerSocketChannelImpl";
	using base_classes = std::tuple<scapix::java_api::java::nio::channels::AsynchronousServerSocketChannel, scapix::java_api::sun::nio::ch::Cancellable, scapix::java_api::sun::nio::ch::Groupable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSSERVERSOCKETCHANNELIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSSERVERSOCKETCHANNELIMPL)
#define SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSSERVERSOCKETCHANNELIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/SocketAddress.h>
#include <scapix/java_api/java/net/SocketOption.h>
#include <scapix/java_api/java/nio/channels/CompletionHandler.h>
#include <scapix/java_api/java/util/Set.h>
#include <scapix/java_api/java/util/concurrent/Future.h>
#include <scapix/java_api/sun/nio/ch/PendingFuture.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::nio::ch::AsynchronousServerSocketChannelImpl : public jni::object_base<"sun/nio/ch/AsynchronousServerSocketChannelImpl",
	java::nio::channels::AsynchronousServerSocketChannel,
	sun::nio::ch::Cancellable,
	sun::nio::ch::Groupable>
{
public:

	jboolean isOpen() { return call_method<"isOpen", jboolean>(); }
	void close() { return call_method<"close", void>(); }
	jni::ref<java::util::concurrent::Future> accept() { return call_method<"accept", jni::ref<java::util::concurrent::Future>>(); }
	void accept(jni::ref<java::lang::Object> attachment, jni::ref<java::nio::channels::CompletionHandler> handler) { return call_method<"accept", void>(attachment, handler); }
	void onCancel(jni::ref<sun::nio::ch::PendingFuture> task) { return call_method<"onCancel", void>(task); }
	jni::ref<java::nio::channels::AsynchronousServerSocketChannel> bind(jni::ref<java::net::SocketAddress> local, jint backlog) { return call_method<"bind", jni::ref<java::nio::channels::AsynchronousServerSocketChannel>>(local, backlog); }
	jni::ref<java::net::SocketAddress> getLocalAddress() { return call_method<"getLocalAddress", jni::ref<java::net::SocketAddress>>(); }
	jni::ref<java::nio::channels::AsynchronousServerSocketChannel> setOption(jni::ref<java::net::SocketOption> name, jni::ref<java::lang::Object> value) { return call_method<"setOption", jni::ref<java::nio::channels::AsynchronousServerSocketChannel>>(name, value); }
	jni::ref<java::lang::Object> getOption(jni::ref<java::net::SocketOption> name) { return call_method<"getOption", jni::ref<java::lang::Object>>(name); }
	jni::ref<java::util::Set> supportedOptions() { return call_method<"supportedOptions", jni::ref<java::util::Set>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AsynchronousServerSocketChannelImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_ASYNCHRONOUSSERVERSOCKETCHANNELIMPL
