// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/nio/ch/AsynchronousFileChannelImpl.h>
#include <scapix/java_api/sun/nio/ch/Iocp_OverlappedChannel.h>
#include <scapix/java_api/sun/nio/ch/Groupable.h>

#ifndef SCAPIX_JAVA_API_SUN_NIO_CH_WINDOWSASYNCHRONOUSFILECHANNELIMPL_FWD
#define SCAPIX_JAVA_API_SUN_NIO_CH_WINDOWSASYNCHRONOUSFILECHANNELIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::nio::ch { class WindowsAsynchronousFileChannelImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::nio::ch::WindowsAsynchronousFileChannelImpl>
{
	static constexpr fixed_string class_name = "sun/nio/ch/WindowsAsynchronousFileChannelImpl";
	using base_classes = std::tuple<scapix::java_api::sun::nio::ch::AsynchronousFileChannelImpl, scapix::java_api::sun::nio::ch::Iocp_OverlappedChannel, scapix::java_api::sun::nio::ch::Groupable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_WINDOWSASYNCHRONOUSFILECHANNELIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_NIO_CH_WINDOWSASYNCHRONOUSFILECHANNELIMPL)
#define SCAPIX_JAVA_API_SUN_NIO_CH_WINDOWSASYNCHRONOUSFILECHANNELIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/nio/channels/AsynchronousFileChannel.h>
#include <scapix/java_api/java/nio/channels/FileLock.h>
#include <scapix/java_api/sun/nio/ch/AsynchronousChannelGroupImpl.h>
#include <scapix/java_api/sun/nio/ch/PendingFuture.h>
#include <scapix/java_api/sun/nio/ch/ThreadPool.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::nio::ch::WindowsAsynchronousFileChannelImpl : public jni::object_base<"sun/nio/ch/WindowsAsynchronousFileChannelImpl",
	sun::nio::ch::AsynchronousFileChannelImpl,
	sun::nio::ch::Iocp_OverlappedChannel,
	sun::nio::ch::Groupable>
{
public:

	static jni::ref<java::nio::channels::AsynchronousFileChannel> open(jni::ref<java::io::FileDescriptor> fdo, jboolean reading, jboolean writing, jni::ref<sun::nio::ch::ThreadPool> pool) { return call_static_method<"open", jni::ref<java::nio::channels::AsynchronousFileChannel>>(fdo, reading, writing, pool); }
	jni::ref<sun::nio::ch::PendingFuture> getByOverlapped(jlong overlapped) { return call_method<"getByOverlapped", jni::ref<sun::nio::ch::PendingFuture>>(overlapped); }
	void close() { return call_method<"close", void>(); }
	jni::ref<sun::nio::ch::AsynchronousChannelGroupImpl> group() { return call_method<"group", jni::ref<sun::nio::ch::AsynchronousChannelGroupImpl>>(); }
	jlong size() { return call_method<"size", jlong>(); }
	jni::ref<java::nio::channels::AsynchronousFileChannel> truncate(jlong size) { return call_method<"truncate", jni::ref<java::nio::channels::AsynchronousFileChannel>>(size); }
	void force(jboolean metaData) { return call_method<"force", void>(metaData); }
	jni::ref<java::nio::channels::FileLock> tryLock(jlong position, jlong p2, jboolean size) { return call_method<"tryLock", jni::ref<java::nio::channels::FileLock>>(position, p2, size); }

protected:

	WindowsAsynchronousFileChannelImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_NIO_CH_WINDOWSASYNCHRONOUSFILECHANNELIMPL
