// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Enum.h>

#ifndef SCAPIX_JAVA_API_SUN_INVOKE_UTIL_WRAPPER_FWD
#define SCAPIX_JAVA_API_SUN_INVOKE_UTIL_WRAPPER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::invoke::util { class Wrapper; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::invoke::util::Wrapper>
{
	static constexpr fixed_string class_name = "sun/invoke/util/Wrapper";
	using base_classes = std::tuple<scapix::java_api::java::lang::Enum>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INVOKE_UTIL_WRAPPER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_INVOKE_UTIL_WRAPPER)
#define SCAPIX_JAVA_API_SUN_INVOKE_UTIL_WRAPPER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::invoke::util::Wrapper : public jni::object_base<"sun/invoke/util/Wrapper",
	java::lang::Enum>
{
public:

	static jni::ref<sun::invoke::util::Wrapper> BOOLEAN() { return get_static_field<"BOOLEAN", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> BYTE() { return get_static_field<"BYTE", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> SHORT() { return get_static_field<"SHORT", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> CHAR() { return get_static_field<"CHAR", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> INT() { return get_static_field<"INT", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> LONG() { return get_static_field<"LONG", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> FLOAT() { return get_static_field<"FLOAT", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> DOUBLE() { return get_static_field<"DOUBLE", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> OBJECT() { return get_static_field<"OBJECT", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jni::ref<sun::invoke::util::Wrapper> VOID() { return get_static_field<"VOID", jni::ref<sun::invoke::util::Wrapper>>(); }
	static jint COUNT() { return get_static_field<"COUNT", jint>(); }

	static jni::ref<jni::array<sun::invoke::util::Wrapper>> values() { return call_static_method<"values", jni::ref<jni::array<sun::invoke::util::Wrapper>>>(); }
	static jni::ref<sun::invoke::util::Wrapper> valueOf(jni::ref<java::lang::String> name) { return call_static_method<"valueOf", jni::ref<sun::invoke::util::Wrapper>>(name); }
	jni::ref<java::lang::String> detailString() { return call_method<"detailString", jni::ref<java::lang::String>>(); }
	jint bitWidth() { return call_method<"bitWidth", jint>(); }
	jint stackSlots() { return call_method<"stackSlots", jint>(); }
	jboolean isSingleWord() { return call_method<"isSingleWord", jboolean>(); }
	jboolean isDoubleWord() { return call_method<"isDoubleWord", jboolean>(); }
	jboolean isNumeric() { return call_method<"isNumeric", jboolean>(); }
	jboolean isIntegral() { return call_method<"isIntegral", jboolean>(); }
	jboolean isSubwordOrInt() { return call_method<"isSubwordOrInt", jboolean>(); }
	jboolean isSigned() { return call_method<"isSigned", jboolean>(); }
	jboolean isUnsigned() { return call_method<"isUnsigned", jboolean>(); }
	jboolean isFloating() { return call_method<"isFloating", jboolean>(); }
	jboolean isOther() { return call_method<"isOther", jboolean>(); }
	jboolean isConvertibleFrom(jni::ref<sun::invoke::util::Wrapper> source) { return call_method<"isConvertibleFrom", jboolean>(source); }
	jni::ref<java::lang::Object> zero() { return call_method<"zero", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> zero(jni::ref<java::lang::Class> type) { return call_method<"zero", jni::ref<java::lang::Object>>(type); }
	static jni::ref<sun::invoke::util::Wrapper> forPrimitiveType(jni::ref<java::lang::Class> type) { return call_static_method<"forPrimitiveType", jni::ref<sun::invoke::util::Wrapper>>(type); }
	static jni::ref<sun::invoke::util::Wrapper> forPrimitiveType(jchar basicTypeChar) { return call_static_method<"forPrimitiveType", jni::ref<sun::invoke::util::Wrapper>>(basicTypeChar); }
	static jni::ref<sun::invoke::util::Wrapper> forWrapperType(jni::ref<java::lang::Class> type) { return call_static_method<"forWrapperType", jni::ref<sun::invoke::util::Wrapper>>(type); }
	static jni::ref<sun::invoke::util::Wrapper> forBasicType(jchar type) { return call_static_method<"forBasicType", jni::ref<sun::invoke::util::Wrapper>>(type); }
	static jni::ref<sun::invoke::util::Wrapper> forBasicType(jni::ref<java::lang::Class> type) { return call_static_method<"forBasicType", jni::ref<sun::invoke::util::Wrapper>>(type); }
	jni::ref<java::lang::Class> primitiveType() { return call_method<"primitiveType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> wrapperType() { return call_method<"wrapperType", jni::ref<java::lang::Class>>(); }
	jni::ref<java::lang::Class> wrapperType(jni::ref<java::lang::Class> exampleType) { return call_method<"wrapperType", jni::ref<java::lang::Class>>(exampleType); }
	static jni::ref<java::lang::Class> asWrapperType(jni::ref<java::lang::Class> type) { return call_static_method<"asWrapperType", jni::ref<java::lang::Class>>(type); }
	static jni::ref<java::lang::Class> asPrimitiveType(jni::ref<java::lang::Class> type) { return call_static_method<"asPrimitiveType", jni::ref<java::lang::Class>>(type); }
	static jboolean isWrapperType(jni::ref<java::lang::Class> type) { return call_static_method<"isWrapperType", jboolean>(type); }
	static jboolean isPrimitiveType(jni::ref<java::lang::Class> type) { return call_static_method<"isPrimitiveType", jboolean>(type); }
	static jchar basicTypeChar(jni::ref<java::lang::Class> type) { return call_static_method<"basicTypeChar", jchar>(type); }
	jchar basicTypeChar() { return call_method<"basicTypeChar", jchar>(); }
	jni::ref<java::lang::String> basicTypeString() { return call_method<"basicTypeString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> wrapperSimpleName() { return call_method<"wrapperSimpleName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> primitiveSimpleName() { return call_method<"primitiveSimpleName", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::Object> cast(jni::ref<java::lang::Object> x, jni::ref<java::lang::Class> type) { return call_method<"cast", jni::ref<java::lang::Object>>(x, type); }
	jni::ref<java::lang::Object> convert(jni::ref<java::lang::Object> x, jni::ref<java::lang::Class> type) { return call_method<"convert", jni::ref<java::lang::Object>>(x, type); }
	jni::ref<java::lang::Object> wrap(jni::ref<java::lang::Object> x) { return call_method<"wrap", jni::ref<java::lang::Object>>(x); }
	jni::ref<java::lang::Object> wrap(jint x) { return call_method<"wrap", jni::ref<java::lang::Object>>(x); }
	jni::ref<java::lang::Object> makeArray(jint len) { return call_method<"makeArray", jni::ref<java::lang::Object>>(len); }
	jni::ref<java::lang::Class> arrayType() { return call_method<"arrayType", jni::ref<java::lang::Class>>(); }
	void copyArrayUnboxing(jni::ref<jni::array<java::lang::Object>> values, jint vpos, jni::ref<java::lang::Object> a, jint apos, jint length) { return call_method<"copyArrayUnboxing", void>(values, vpos, a, apos, length); }
	void copyArrayBoxing(jni::ref<java::lang::Object> a, jint apos, jni::ref<jni::array<java::lang::Object>> values, jint vpos, jint length) { return call_method<"copyArrayBoxing", void>(a, apos, values, vpos, length); }

protected:

	Wrapper(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INVOKE_UTIL_WRAPPER
