// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODENAME_FWD
#define SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODENAME_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::invoke::util { class BytecodeName; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::invoke::util::BytecodeName>
{
	static constexpr fixed_string class_name = "sun/invoke/util/BytecodeName";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODENAME_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODENAME)
#define SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODENAME

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::invoke::util::BytecodeName : public jni::object_base<"sun/invoke/util/BytecodeName",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> toBytecodeName(jni::ref<java::lang::String> s) { return call_static_method<"toBytecodeName", jni::ref<java::lang::String>>(s); }
	static jni::ref<java::lang::String> toSourceName(jni::ref<java::lang::String> s) { return call_static_method<"toSourceName", jni::ref<java::lang::String>>(s); }
	static jni::ref<jni::array<java::lang::Object>> parseBytecodeName(jni::ref<java::lang::String> s) { return call_static_method<"parseBytecodeName", jni::ref<jni::array<java::lang::Object>>>(s); }
	static jni::ref<java::lang::String> unparseBytecodeName(jni::ref<jni::array<java::lang::Object>> components) { return call_static_method<"unparseBytecodeName", jni::ref<java::lang::String>>(components); }
	static jni::ref<java::lang::String> toDisplayName(jni::ref<java::lang::String> s) { return call_static_method<"toDisplayName", jni::ref<java::lang::String>>(s); }
	static jboolean isSafeBytecodeName(jni::ref<java::lang::String> s) { return call_static_method<"isSafeBytecodeName", jboolean>(s); }
	static jboolean isSafeBytecodeChar(jchar c) { return call_static_method<"isSafeBytecodeChar", jboolean>(c); }

protected:

	BytecodeName(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INVOKE_UTIL_BYTECODENAME
