// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_INVOKE_UTIL_VERIFYACCESS_FWD
#define SCAPIX_JAVA_API_SUN_INVOKE_UTIL_VERIFYACCESS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::invoke::util { class VerifyAccess; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::invoke::util::VerifyAccess>
{
	static constexpr fixed_string class_name = "sun/invoke/util/VerifyAccess";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INVOKE_UTIL_VERIFYACCESS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_INVOKE_UTIL_VERIFYACCESS)
#define SCAPIX_JAVA_API_SUN_INVOKE_UTIL_VERIFYACCESS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Module.h>
#include <scapix/java_api/java/lang/invoke/MethodType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::invoke::util::VerifyAccess : public jni::object_base<"sun/invoke/util/VerifyAccess",
	java::lang::Object>
{
public:

	static jboolean isMemberAccessible(jni::ref<java::lang::Class> refc, jni::ref<java::lang::Class> defc, jint mods, jni::ref<java::lang::Class> lookupClass, jni::ref<java::lang::Class> prevLookupClass, jint allowedModes) { return call_static_method<"isMemberAccessible", jboolean>(refc, defc, mods, lookupClass, prevLookupClass, allowedModes); }
	static jboolean isClassAccessible(jni::ref<java::lang::Class> refc, jni::ref<java::lang::Class> lookupClass, jni::ref<java::lang::Class> prevLookupClass, jint allowedModes) { return call_static_method<"isClassAccessible", jboolean>(refc, lookupClass, prevLookupClass, allowedModes); }
	static jboolean isModuleAccessible(jni::ref<java::lang::Class> refc, jni::ref<java::lang::Module> m1, jni::ref<java::lang::Module> m2) { return call_static_method<"isModuleAccessible", jboolean>(refc, m1, m2); }
	static jboolean isTypeVisible(jni::ref<java::lang::Class> type, jni::ref<java::lang::Class> refc) { return call_static_method<"isTypeVisible", jboolean>(type, refc); }
	static jboolean isTypeVisible(jni::ref<java::lang::invoke::MethodType> type, jni::ref<java::lang::Class> refc) { return call_static_method<"isTypeVisible", jboolean>(type, refc); }
	static jboolean isSameModule(jni::ref<java::lang::Class> class1, jni::ref<java::lang::Class> class2) { return call_static_method<"isSameModule", jboolean>(class1, class2); }
	static jboolean isSamePackage(jni::ref<java::lang::Class> class1, jni::ref<java::lang::Class> class2) { return call_static_method<"isSamePackage", jboolean>(class1, class2); }
	static jboolean isSamePackageMember(jni::ref<java::lang::Class> class1, jni::ref<java::lang::Class> class2) { return call_static_method<"isSamePackageMember", jboolean>(class1, class2); }
	static jboolean classLoaderIsAncestor(jni::ref<java::lang::Class> parentClass, jni::ref<java::lang::Class> childClass) { return call_static_method<"classLoaderIsAncestor", jboolean>(parentClass, childClass); }

protected:

	VerifyAccess(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_INVOKE_UTIL_VERIFYACCESS
