// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_REFLECT_MISC_REFLECTUTIL_FWD
#define SCAPIX_JAVA_API_SUN_REFLECT_MISC_REFLECTUTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::reflect::misc { class ReflectUtil; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::reflect::misc::ReflectUtil>
{
	static constexpr fixed_string class_name = "sun/reflect/misc/ReflectUtil";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_MISC_REFLECTUTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_REFLECT_MISC_REFLECTUTIL)
#define SCAPIX_JAVA_API_SUN_REFLECT_MISC_REFLECTUTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Member.h>
#include <scapix/java_api/java/lang/reflect/Method.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::reflect::misc::ReflectUtil : public jni::object_base<"sun/reflect/misc/ReflectUtil",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> PROXY_PACKAGE() { return get_static_field<"PROXY_PACKAGE", jni::ref<java::lang::String>>(); }

	static jni::ref<java::lang::Class> forName(jni::ref<java::lang::String> name) { return call_static_method<"forName", jni::ref<java::lang::Class>>(name); }
	static void ensureMemberAccess(jni::ref<java::lang::Class> currentClass, jni::ref<java::lang::Class> memberClass, jni::ref<java::lang::Object> target, jint modifiers) { return call_static_method<"ensureMemberAccess", void>(currentClass, memberClass, target, modifiers); }
	static void conservativeCheckMemberAccess(jni::ref<java::lang::reflect::Member> m) { return call_static_method<"conservativeCheckMemberAccess", void>(m); }
	static void checkPackageAccess(jni::ref<java::lang::Class> clazz) { return call_static_method<"checkPackageAccess", void>(clazz); }
	static void checkPackageAccess(jni::ref<java::lang::String> name) { return call_static_method<"checkPackageAccess", void>(name); }
	static jboolean isPackageAccessible(jni::ref<java::lang::Class> clazz) { return call_static_method<"isPackageAccessible", jboolean>(clazz); }
	static jboolean needsPackageAccessCheck(jni::ref<java::lang::ClassLoader> from, jni::ref<java::lang::ClassLoader> to) { return call_static_method<"needsPackageAccessCheck", jboolean>(from, to); }
	static void checkProxyPackageAccess(jni::ref<java::lang::Class> clazz) { return call_static_method<"checkProxyPackageAccess", void>(clazz); }
	static void checkProxyPackageAccess(jni::ref<java::lang::ClassLoader> ccl, jni::ref<jni::array<java::lang::Class>> interfaces) { return call_static_method<"checkProxyPackageAccess", void>(ccl, interfaces); }
	static jboolean isNonPublicProxyClass(jni::ref<java::lang::Class> cls) { return call_static_method<"isNonPublicProxyClass", jboolean>(cls); }
	static void checkProxyMethod(jni::ref<java::lang::Object> proxy, jni::ref<java::lang::reflect::Method> method) { return call_static_method<"checkProxyMethod", void>(proxy, method); }

protected:

	ReflectUtil(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_REFLECT_MISC_REFLECTUTIL
