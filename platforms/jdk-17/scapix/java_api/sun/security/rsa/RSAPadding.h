// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPADDING_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPADDING_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::rsa { class RSAPadding; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::rsa::RSAPadding>
{
	static constexpr fixed_string class_name = "sun/security/rsa/RSAPadding";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPADDING_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPADDING)
#define SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPADDING

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/security/SecureRandom.h>
#include <scapix/java_api/javax/crypto/spec/OAEPParameterSpec.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::rsa::RSAPadding : public jni::object_base<"sun/security/rsa/RSAPadding",
	java::lang::Object>
{
public:

	static jint PAD_BLOCKTYPE_1() { return get_static_field<"PAD_BLOCKTYPE_1", jint>(); }
	static jint PAD_BLOCKTYPE_2() { return get_static_field<"PAD_BLOCKTYPE_2", jint>(); }
	static jint PAD_NONE() { return get_static_field<"PAD_NONE", jint>(); }
	static jint PAD_OAEP_MGF1() { return get_static_field<"PAD_OAEP_MGF1", jint>(); }

	static jni::ref<sun::security::rsa::RSAPadding> getInstance(jint type, jint paddedSize) { return call_static_method<"getInstance", jni::ref<sun::security::rsa::RSAPadding>>(type, paddedSize); }
	static jni::ref<sun::security::rsa::RSAPadding> getInstance(jint type, jint paddedSize, jni::ref<java::security::SecureRandom> random) { return call_static_method<"getInstance", jni::ref<sun::security::rsa::RSAPadding>>(type, paddedSize, random); }
	static jni::ref<sun::security::rsa::RSAPadding> getInstance(jint type, jint paddedSize, jni::ref<java::security::SecureRandom> random, jni::ref<javax::crypto::spec::OAEPParameterSpec> spec) { return call_static_method<"getInstance", jni::ref<sun::security::rsa::RSAPadding>>(type, paddedSize, random, spec); }
	jint getMaxDataSize() { return call_method<"getMaxDataSize", jint>(); }
	jni::ref<jni::array<jbyte>> pad(jni::ref<jni::array<jbyte>> data) { return call_method<"pad", jni::ref<jni::array<jbyte>>>(data); }
	jni::ref<jni::array<jbyte>> pad(jni::ref<jni::array<jbyte>> data, jint ofs, jint len) { return call_method<"pad", jni::ref<jni::array<jbyte>>>(data, ofs, len); }
	jni::ref<jni::array<jbyte>> unpad(jni::ref<jni::array<jbyte>> padded) { return call_method<"unpad", jni::ref<jni::array<jbyte>>>(padded); }

protected:

	RSAPadding(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_RSA_RSAPADDING
