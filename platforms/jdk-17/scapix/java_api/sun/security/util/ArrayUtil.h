// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_UTIL_ARRAYUTIL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_ARRAYUTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::util { class ArrayUtil; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::util::ArrayUtil>
{
	static constexpr fixed_string class_name = "sun/security/util/ArrayUtil";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_ARRAYUTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_UTIL_ARRAYUTIL)
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_ARRAYUTIL

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::util::ArrayUtil : public jni::object_base<"sun/security/util/ArrayUtil",
	java::lang::Object>
{
public:

	static jni::ref<sun::security::util::ArrayUtil> new_object() { return base_::new_object(); }
	static void blockSizeCheck(jint len, jint blockSize) { return call_static_method<"blockSizeCheck", void>(len, blockSize); }
	static void nullAndBoundsCheck(jni::ref<jni::array<jbyte>> array, jint offset, jint len) { return call_static_method<"nullAndBoundsCheck", void>(array, offset, len); }
	static void reverse(jni::ref<jni::array<jbyte>> arr) { return call_static_method<"reverse", void>(arr); }

protected:

	ArrayUtil(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_ARRAYUTIL
