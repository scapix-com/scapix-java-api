// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/ByteArrayOutputStream.h>
#include <scapix/java_api/sun/security/util/DerEncoder.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DEROUTPUTSTREAM_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DEROUTPUTSTREAM_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::util { class DerOutputStream; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::util::DerOutputStream>
{
	static constexpr fixed_string class_name = "sun/security/util/DerOutputStream";
	using base_classes = std::tuple<scapix::java_api::java::io::ByteArrayOutputStream, scapix::java_api::sun::security::util::DerEncoder>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DEROUTPUTSTREAM_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DEROUTPUTSTREAM)
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DEROUTPUTSTREAM

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/lang/Integer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/math/BigInteger.h>
#include <scapix/java_api/java/util/Date.h>
#include <scapix/java_api/sun/security/util/BitArray.h>
#include <scapix/java_api/sun/security/util/DerValue.h>
#include <scapix/java_api/sun/security/util/ObjectIdentifier.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::util::DerOutputStream : public jni::object_base<"sun/security/util/DerOutputStream",
	java::io::ByteArrayOutputStream,
	sun::security::util::DerEncoder>
{
public:

	static jni::ref<sun::security::util::DerOutputStream> new_object(jint size) { return base_::new_object(size); }
	static jni::ref<sun::security::util::DerOutputStream> new_object() { return base_::new_object(); }
	void write(jbyte tag, jni::ref<jni::array<jbyte>> buf) { return call_method<"write", void>(tag, buf); }
	void write(jbyte tag, jni::ref<sun::security::util::DerOutputStream> out) { return call_method<"write", void>(tag, out); }
	void writeImplicit(jbyte tag, jni::ref<sun::security::util::DerOutputStream> value) { return call_method<"writeImplicit", void>(tag, value); }
	void putDerValue(jni::ref<sun::security::util::DerValue> val) { return call_method<"putDerValue", void>(val); }
	void putBoolean(jboolean val) { return call_method<"putBoolean", void>(val); }
	void putEnumerated(jint i) { return call_method<"putEnumerated", void>(i); }
	void putInteger(jni::ref<java::math::BigInteger> i) { return call_method<"putInteger", void>(i); }
	void putInteger(jni::ref<jni::array<jbyte>> buf) { return call_method<"putInteger", void>(buf); }
	void putInteger(jni::ref<java::lang::Integer> i) { return call_method<"putInteger", void>(i); }
	void putInteger(jint i) { return call_method<"putInteger", void>(i); }
	void putBitString(jni::ref<jni::array<jbyte>> bits) { return call_method<"putBitString", void>(bits); }
	void putUnalignedBitString(jni::ref<sun::security::util::BitArray> ba) { return call_method<"putUnalignedBitString", void>(ba); }
	void putTruncatedUnalignedBitString(jni::ref<sun::security::util::BitArray> ba) { return call_method<"putTruncatedUnalignedBitString", void>(ba); }
	void putOctetString(jni::ref<jni::array<jbyte>> octets) { return call_method<"putOctetString", void>(octets); }
	void putNull() { return call_method<"putNull", void>(); }
	void putOID(jni::ref<sun::security::util::ObjectIdentifier> oid) { return call_method<"putOID", void>(oid); }
	void putSequence(jni::ref<jni::array<sun::security::util::DerValue>> seq) { return call_method<"putSequence", void>(seq); }
	void putSet(jni::ref<jni::array<sun::security::util::DerValue>> set) { return call_method<"putSet", void>(set); }
	void putOrderedSetOf(jbyte tag, jni::ref<jni::array<sun::security::util::DerEncoder>> set) { return call_method<"putOrderedSetOf", void>(tag, set); }
	void putOrderedSet(jbyte tag, jni::ref<jni::array<sun::security::util::DerEncoder>> set) { return call_method<"putOrderedSet", void>(tag, set); }
	void putUTF8String(jni::ref<java::lang::String> s) { return call_method<"putUTF8String", void>(s); }
	void putPrintableString(jni::ref<java::lang::String> s) { return call_method<"putPrintableString", void>(s); }
	void putT61String(jni::ref<java::lang::String> s) { return call_method<"putT61String", void>(s); }
	void putIA5String(jni::ref<java::lang::String> s) { return call_method<"putIA5String", void>(s); }
	void putBMPString(jni::ref<java::lang::String> s) { return call_method<"putBMPString", void>(s); }
	void putGeneralString(jni::ref<java::lang::String> s) { return call_method<"putGeneralString", void>(s); }
	void putUTCTime(jni::ref<java::util::Date> d) { return call_method<"putUTCTime", void>(d); }
	void putGeneralizedTime(jni::ref<java::util::Date> d) { return call_method<"putGeneralizedTime", void>(d); }
	void putLength(jint len) { return call_method<"putLength", void>(len); }
	void putTag(jbyte tagClass, jboolean form, jbyte val) { return call_method<"putTag", void>(tagClass, form, val); }
	void derEncode(jni::ref<java::io::OutputStream> out) { return call_method<"derEncode", void>(out); }

protected:

	DerOutputStream(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_DEROUTPUTSTREAM
