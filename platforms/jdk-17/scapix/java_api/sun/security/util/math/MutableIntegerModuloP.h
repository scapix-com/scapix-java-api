// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/sun/security/util/math/IntegerModuloP.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_MUTABLEINTEGERMODULOP_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_MUTABLEINTEGERMODULOP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::util::math { class MutableIntegerModuloP; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::util::math::MutableIntegerModuloP>
{
	static constexpr fixed_string class_name = "sun/security/util/math/MutableIntegerModuloP";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::sun::security::util::math::IntegerModuloP>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_MUTABLEINTEGERMODULOP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_MUTABLEINTEGERMODULOP)
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_MUTABLEINTEGERMODULOP

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/sun/security/util/math/SmallValue.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::util::math::MutableIntegerModuloP : public jni::object_base<"sun/security/util/math/MutableIntegerModuloP",
	java::lang::Object,
	sun::security::util::math::IntegerModuloP>
{
public:

	void conditionalSet(jni::ref<sun::security::util::math::IntegerModuloP> p1, jint p2) { return call_method<"conditionalSet", void>(p1, p2); }
	void conditionalSwapWith(jni::ref<sun::security::util::math::MutableIntegerModuloP> p1, jint p2) { return call_method<"conditionalSwapWith", void>(p1, p2); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setValue(jni::ref<sun::security::util::math::IntegerModuloP> p1) { return call_method<"setValue", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(p1); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setValue(jni::ref<jni::array<jbyte>> p1, jint p2, jint p3, jbyte p4) { return call_method<"setValue", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(p1, p2, p3, p4); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setValue(jni::ref<java::nio::ByteBuffer> p1, jint p2, jbyte p3) { return call_method<"setValue", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(p1, p2, p3); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setSquare() { return call_method<"setSquare", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setSum(jni::ref<sun::security::util::math::IntegerModuloP> p1) { return call_method<"setSum", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(p1); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setDifference(jni::ref<sun::security::util::math::IntegerModuloP> p1) { return call_method<"setDifference", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(p1); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setProduct(jni::ref<sun::security::util::math::IntegerModuloP> p1) { return call_method<"setProduct", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(p1); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setProduct(jni::ref<sun::security::util::math::SmallValue> p1) { return call_method<"setProduct", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(p1); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setAdditiveInverse() { return call_method<"setAdditiveInverse", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(); }
	jni::ref<sun::security::util::math::MutableIntegerModuloP> setReduced() { return call_method<"setReduced", jni::ref<sun::security::util::math::MutableIntegerModuloP>>(); }

protected:

	MutableIntegerModuloP(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_MUTABLEINTEGERMODULOP
