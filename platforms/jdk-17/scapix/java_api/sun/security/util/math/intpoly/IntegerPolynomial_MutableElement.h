// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/sun/security/util/math/intpoly/IntegerPolynomial_Element.h>
#include <scapix/java_api/sun/security/util/math/MutableIntegerModuloP.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTPOLY_INTEGERPOLYNOMIAL_MUTABLEELEMENT_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTPOLY_INTEGERPOLYNOMIAL_MUTABLEELEMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::util::math::intpoly { class IntegerPolynomial_MutableElement; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>
{
	static constexpr fixed_string class_name = "sun/security/util/math/intpoly/IntegerPolynomial$MutableElement";
	using base_classes = std::tuple<scapix::java_api::sun::security::util::math::intpoly::IntegerPolynomial_Element, scapix::java_api::sun::security::util::math::MutableIntegerModuloP>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTPOLY_INTEGERPOLYNOMIAL_MUTABLEELEMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTPOLY_INTEGERPOLYNOMIAL_MUTABLEELEMENT)
#define SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTPOLY_INTEGERPOLYNOMIAL_MUTABLEELEMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/ByteBuffer.h>
#include <scapix/java_api/sun/security/util/math/IntegerModuloP.h>
#include <scapix/java_api/sun/security/util/math/SmallValue.h>
#include <scapix/java_api/sun/security/util/math/intpoly/IntegerPolynomial_ImmutableElement.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::util::math::intpoly::IntegerPolynomial_MutableElement : public jni::object_base<"sun/security/util/math/intpoly/IntegerPolynomial$MutableElement",
	sun::security::util::math::intpoly::IntegerPolynomial_Element,
	sun::security::util::math::MutableIntegerModuloP>
{
public:

	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_ImmutableElement> fixed() { return call_method<"fixed", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_ImmutableElement>>(); }
	void conditionalSet(jni::ref<sun::security::util::math::IntegerModuloP> b, jint set) { return call_method<"conditionalSet", void>(b, set); }
	void conditionalSwapWith(jni::ref<sun::security::util::math::MutableIntegerModuloP> b, jint swap) { return call_method<"conditionalSwapWith", void>(b, swap); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setValue(jni::ref<sun::security::util::math::IntegerModuloP> v) { return call_method<"setValue", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(v); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setValue(jni::ref<jni::array<jbyte>> arr, jint offset, jint length, jbyte highByte) { return call_method<"setValue", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(arr, offset, length, highByte); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setValue(jni::ref<java::nio::ByteBuffer> buf, jint length, jbyte highByte) { return call_method<"setValue", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(buf, length, highByte); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setProduct(jni::ref<sun::security::util::math::IntegerModuloP> genB) { return call_method<"setProduct", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(genB); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setProduct(jni::ref<sun::security::util::math::SmallValue> v) { return call_method<"setProduct", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(v); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setSum(jni::ref<sun::security::util::math::IntegerModuloP> genB) { return call_method<"setSum", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(genB); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setDifference(jni::ref<sun::security::util::math::IntegerModuloP> genB) { return call_method<"setDifference", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(genB); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setSquare() { return call_method<"setSquare", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setAdditiveInverse() { return call_method<"setAdditiveInverse", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(); }
	jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement> setReduced() { return call_method<"setReduced", jni::ref<sun::security::util::math::intpoly::IntegerPolynomial_MutableElement>>(); }

protected:

	IntegerPolynomial_MutableElement(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_UTIL_MATH_INTPOLY_INTEGERPOLYNOMIAL_MUTABLEELEMENT
