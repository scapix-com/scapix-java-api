// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_TOOLS_KEYSTOREUTIL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_TOOLS_KEYSTOREUTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::tools { class KeyStoreUtil; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::tools::KeyStoreUtil>
{
	static constexpr fixed_string class_name = "sun/security/tools/KeyStoreUtil";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_TOOLS_KEYSTOREUTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_TOOLS_KEYSTOREUTIL)
#define SCAPIX_JAVA_API_SUN_SECURITY_TOOLS_KEYSTOREUTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/ClassLoader.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/security/KeyStore.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#include <scapix/java_api/java/text/Collator.h>
#include <scapix/java_api/java/util/ResourceBundle.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::tools::KeyStoreUtil : public jni::object_base<"sun/security/tools/KeyStoreUtil",
	java::lang::Object>
{
public:

	static jboolean isSelfSigned(jni::ref<java::security::cert::X509Certificate> cert) { return call_static_method<"isSelfSigned", jboolean>(cert); }
	static jboolean signedBy(jni::ref<java::security::cert::X509Certificate> end, jni::ref<java::security::cert::X509Certificate> ca) { return call_static_method<"signedBy", jboolean>(end, ca); }
	static jboolean isWindowsKeyStore(jni::ref<java::lang::String> storetype) { return call_static_method<"isWindowsKeyStore", jboolean>(storetype); }
	static jni::ref<java::lang::String> niceStoreTypeName(jni::ref<java::lang::String> storetype) { return call_static_method<"niceStoreTypeName", jni::ref<java::lang::String>>(storetype); }
	static jni::ref<java::lang::String> getCacerts() { return call_static_method<"getCacerts", jni::ref<java::lang::String>>(); }
	static jni::ref<java::security::KeyStore> getCacertsKeyStore() { return call_static_method<"getCacertsKeyStore", jni::ref<java::security::KeyStore>>(); }
	static jni::ref<jni::array<jchar>> getPassWithModifier(jni::ref<java::lang::String> modifier, jni::ref<java::lang::String> arg, jni::ref<java::util::ResourceBundle> rb, jni::ref<java::text::Collator> collator) { return call_static_method<"getPassWithModifier", jni::ref<jni::array<jchar>>>(modifier, arg, rb, collator); }
	static jni::ref<jni::array<java::lang::String>> expandArgs(jni::ref<java::lang::String> tool, jni::ref<java::lang::String> file, jni::ref<java::lang::String> c1, jni::ref<java::lang::String> c2, jni::ref<jni::array<java::lang::String>> args) { return call_static_method<"expandArgs", jni::ref<jni::array<java::lang::String>>>(tool, file, c1, c2, args); }
	static void loadProviderByName(jni::ref<java::lang::String> provName, jni::ref<java::lang::String> arg) { return call_static_method<"loadProviderByName", void>(provName, arg); }
	static void loadProviderByClass(jni::ref<java::lang::String> provClass, jni::ref<java::lang::String> arg, jni::ref<java::lang::ClassLoader> cl) { return call_static_method<"loadProviderByClass", void>(provClass, arg, cl); }

protected:

	KeyStoreUtil(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_TOOLS_KEYSTOREUTIL
