// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/SecurityException.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTEXCEPTION_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTEXCEPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::x509 { class CertException; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::x509::CertException>
{
	static constexpr fixed_string class_name = "sun/security/x509/CertException";
	using base_classes = std::tuple<scapix::java_api::java::lang::SecurityException>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTEXCEPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTEXCEPTION)
#define SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTEXCEPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class sun::security::x509::CertException : public jni::object_base<"sun/security/x509/CertException",
	java::lang::SecurityException>
{
public:

	static jint verf_INVALID_SIG() { return get_static_field<"verf_INVALID_SIG", jint>(); }
	static jint verf_INVALID_REVOKED() { return get_static_field<"verf_INVALID_REVOKED", jint>(); }
	static jint verf_INVALID_NOTBEFORE() { return get_static_field<"verf_INVALID_NOTBEFORE", jint>(); }
	static jint verf_INVALID_EXPIRED() { return get_static_field<"verf_INVALID_EXPIRED", jint>(); }
	static jint verf_CA_UNTRUSTED() { return get_static_field<"verf_CA_UNTRUSTED", jint>(); }
	static jint verf_CHAIN_LENGTH() { return get_static_field<"verf_CHAIN_LENGTH", jint>(); }
	static jint verf_PARSE_ERROR() { return get_static_field<"verf_PARSE_ERROR", jint>(); }
	static jint err_CONSTRUCTION() { return get_static_field<"err_CONSTRUCTION", jint>(); }
	static jint err_INVALID_PUBLIC_KEY() { return get_static_field<"err_INVALID_PUBLIC_KEY", jint>(); }
	static jint err_INVALID_VERSION() { return get_static_field<"err_INVALID_VERSION", jint>(); }
	static jint err_INVALID_FORMAT() { return get_static_field<"err_INVALID_FORMAT", jint>(); }
	static jint err_ENCODING() { return get_static_field<"err_ENCODING", jint>(); }

	static jni::ref<sun::security::x509::CertException> new_object(jint code, jni::ref<java::lang::String> moredata) { return base_::new_object(code, moredata); }
	static jni::ref<sun::security::x509::CertException> new_object(jint code) { return base_::new_object(code); }
	jint getVerfCode() { return call_method<"getVerfCode", jint>(); }
	jni::ref<java::lang::String> getMoreData() { return call_method<"getMoreData", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getVerfDescription() { return call_method<"getVerfDescription", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getMessage() { return call_method<"getMessage", jni::ref<java::lang::String>>(); }

protected:

	CertException(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_X509_CERTEXCEPTION
