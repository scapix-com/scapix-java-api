// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/net/ssl/ExtendedSSLSession.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSESSIONIMPL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSESSIONIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ssl { class SSLSessionImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ssl::SSLSessionImpl>
{
	static constexpr fixed_string class_name = "sun/security/ssl/SSLSessionImpl";
	using base_classes = std::tuple<scapix::java_api::javax::net::ssl::ExtendedSSLSession>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSESSIONIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSESSIONIMPL)
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSESSIONIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/InetAddress.h>
#include <scapix/java_api/java/security/Principal.h>
#include <scapix/java_api/java/security/cert/Certificate.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/List.h>
#include <scapix/java_api/javax/net/ssl/SSLSessionContext.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::security::ssl::SSLSessionImpl : public jni::object_base<"sun/security/ssl/SSLSessionImpl",
	javax::net::ssl::ExtendedSSLSession>
{
public:

	jboolean isValid() { return call_method<"isValid", jboolean>(); }
	jni::ref<jni::array<jbyte>> getId() { return call_method<"getId", jni::ref<jni::array<jbyte>>>(); }
	jni::ref<javax::net::ssl::SSLSessionContext> getSessionContext() { return call_method<"getSessionContext", jni::ref<javax::net::ssl::SSLSessionContext>>(); }
	jni::ref<java::lang::String> getCipherSuite() { return call_method<"getCipherSuite", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> getProtocol() { return call_method<"getProtocol", jni::ref<java::lang::String>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jni::ref<jni::array<java::security::cert::Certificate>> getPeerCertificates() { return call_method<"getPeerCertificates", jni::ref<jni::array<java::security::cert::Certificate>>>(); }
	jni::ref<jni::array<java::security::cert::Certificate>> getLocalCertificates() { return call_method<"getLocalCertificates", jni::ref<jni::array<java::security::cert::Certificate>>>(); }
	jni::ref<jni::array<java::security::cert::X509Certificate>> getCertificateChain() { return call_method<"getCertificateChain", jni::ref<jni::array<java::security::cert::X509Certificate>>>(); }
	jni::ref<java::util::List> getStatusResponses() { return call_method<"getStatusResponses", jni::ref<java::util::List>>(); }
	jni::ref<java::security::Principal> getPeerPrincipal() { return call_method<"getPeerPrincipal", jni::ref<java::security::Principal>>(); }
	jni::ref<java::security::Principal> getLocalPrincipal() { return call_method<"getLocalPrincipal", jni::ref<java::security::Principal>>(); }
	jlong getTicketCreationTime() { return call_method<"getTicketCreationTime", jlong>(); }
	jlong getCreationTime() { return call_method<"getCreationTime", jlong>(); }
	jlong getLastAccessedTime() { return call_method<"getLastAccessedTime", jlong>(); }
	jni::ref<java::net::InetAddress> getPeerAddress() { return call_method<"getPeerAddress", jni::ref<java::net::InetAddress>>(); }
	jni::ref<java::lang::String> getPeerHost() { return call_method<"getPeerHost", jni::ref<java::lang::String>>(); }
	jint getPeerPort() { return call_method<"getPeerPort", jint>(); }
	void invalidate() { return call_method<"invalidate", void>(); }
	void putValue(jni::ref<java::lang::String> key, jni::ref<java::lang::Object> value) { return call_method<"putValue", void>(key, value); }
	jni::ref<java::lang::Object> getValue(jni::ref<java::lang::String> key) { return call_method<"getValue", jni::ref<java::lang::Object>>(key); }
	void removeValue(jni::ref<java::lang::String> key) { return call_method<"removeValue", void>(key); }
	jni::ref<jni::array<java::lang::String>> getValueNames() { return call_method<"getValueNames", jni::ref<jni::array<java::lang::String>>>(); }
	jint getPacketBufferSize() { return call_method<"getPacketBufferSize", jint>(); }
	jint getApplicationBufferSize() { return call_method<"getApplicationBufferSize", jint>(); }
	jni::ref<jni::array<java::lang::String>> getLocalSupportedSignatureAlgorithms() { return call_method<"getLocalSupportedSignatureAlgorithms", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::util::Collection> getLocalSupportedSignatureSchemes() { return call_method<"getLocalSupportedSignatureSchemes", jni::ref<java::util::Collection>>(); }
	jni::ref<jni::array<java::lang::String>> getPeerSupportedSignatureAlgorithms() { return call_method<"getPeerSupportedSignatureAlgorithms", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::util::List> getRequestedServerNames() { return call_method<"getRequestedServerNames", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SSLSessionImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSESSIONIMPL
