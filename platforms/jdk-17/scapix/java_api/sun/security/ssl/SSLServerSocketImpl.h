// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/net/ssl/SSLServerSocket.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSERVERSOCKETIMPL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSERVERSOCKETIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ssl { class SSLServerSocketImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ssl::SSLServerSocketImpl>
{
	static constexpr fixed_string class_name = "sun/security/ssl/SSLServerSocketImpl";
	using base_classes = std::tuple<scapix::java_api::javax::net::ssl::SSLServerSocket>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSERVERSOCKETIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSERVERSOCKETIMPL)
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSERVERSOCKETIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/javax/net/ssl/SSLParameters.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::security::ssl::SSLServerSocketImpl : public jni::object_base<"sun/security/ssl/SSLServerSocketImpl",
	javax::net::ssl::SSLServerSocket>
{
public:

	jni::ref<jni::array<java::lang::String>> getEnabledCipherSuites() { return call_method<"getEnabledCipherSuites", jni::ref<jni::array<java::lang::String>>>(); }
	void setEnabledCipherSuites(jni::ref<jni::array<java::lang::String>> suites) { return call_method<"setEnabledCipherSuites", void>(suites); }
	jni::ref<jni::array<java::lang::String>> getSupportedCipherSuites() { return call_method<"getSupportedCipherSuites", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getSupportedProtocols() { return call_method<"getSupportedProtocols", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<jni::array<java::lang::String>> getEnabledProtocols() { return call_method<"getEnabledProtocols", jni::ref<jni::array<java::lang::String>>>(); }
	void setEnabledProtocols(jni::ref<jni::array<java::lang::String>> protocols) { return call_method<"setEnabledProtocols", void>(protocols); }
	void setNeedClientAuth(jboolean need) { return call_method<"setNeedClientAuth", void>(need); }
	jboolean getNeedClientAuth() { return call_method<"getNeedClientAuth", jboolean>(); }
	void setWantClientAuth(jboolean want) { return call_method<"setWantClientAuth", void>(want); }
	jboolean getWantClientAuth() { return call_method<"getWantClientAuth", jboolean>(); }
	void setUseClientMode(jboolean useClientMode) { return call_method<"setUseClientMode", void>(useClientMode); }
	jboolean getUseClientMode() { return call_method<"getUseClientMode", jboolean>(); }
	void setEnableSessionCreation(jboolean flag) { return call_method<"setEnableSessionCreation", void>(flag); }
	jboolean getEnableSessionCreation() { return call_method<"getEnableSessionCreation", jboolean>(); }
	jni::ref<javax::net::ssl::SSLParameters> getSSLParameters() { return call_method<"getSSLParameters", jni::ref<javax::net::ssl::SSLParameters>>(); }
	void setSSLParameters(jni::ref<javax::net::ssl::SSLParameters> params) { return call_method<"setSSLParameters", void>(params); }
	jni::ref<java::net::Socket> accept() { return call_method<"accept", jni::ref<java::net::Socket>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	SSLServerSocketImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_SSLSERVERSOCKETIMPL
