// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/javax/net/ssl/X509ExtendedKeyManager.h>
#include <scapix/java_api/javax/net/ssl/X509KeyManager.h>

#ifndef SCAPIX_JAVA_API_SUN_SECURITY_SSL_X509KEYMANAGERIMPL_FWD
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_X509KEYMANAGERIMPL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::sun::security::ssl { class X509KeyManagerImpl; }

template<>
struct scapix::jni::object_traits<scapix::java_api::sun::security::ssl::X509KeyManagerImpl>
{
	static constexpr fixed_string class_name = "sun/security/ssl/X509KeyManagerImpl";
	using base_classes = std::tuple<scapix::java_api::javax::net::ssl::X509ExtendedKeyManager, scapix::java_api::javax::net::ssl::X509KeyManager>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_X509KEYMANAGERIMPL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_SUN_SECURITY_SSL_X509KEYMANAGERIMPL)
#define SCAPIX_JAVA_API_SUN_SECURITY_SSL_X509KEYMANAGERIMPL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/net/Socket.h>
#include <scapix/java_api/java/security/AlgorithmConstraints.h>
#include <scapix/java_api/java/security/Principal.h>
#include <scapix/java_api/java/security/PrivateKey.h>
#include <scapix/java_api/java/security/cert/X509Certificate.h>
#include <scapix/java_api/javax/net/ssl/SSLEngine.h>
#include <scapix/java_api/sun/security/ssl/X509KeyManagerImpl_CheckType.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

// private
class sun::security::ssl::X509KeyManagerImpl : public jni::object_base<"sun/security/ssl/X509KeyManagerImpl",
	javax::net::ssl::X509ExtendedKeyManager,
	javax::net::ssl::X509KeyManager>
{
public:

	jni::ref<jni::array<java::security::cert::X509Certificate>> getCertificateChain(jni::ref<java::lang::String> alias) { return call_method<"getCertificateChain", jni::ref<jni::array<java::security::cert::X509Certificate>>>(alias); }
	jni::ref<java::security::PrivateKey> getPrivateKey(jni::ref<java::lang::String> alias) { return call_method<"getPrivateKey", jni::ref<java::security::PrivateKey>>(alias); }
	jni::ref<java::lang::String> chooseClientAlias(jni::ref<jni::array<java::lang::String>> keyTypes, jni::ref<jni::array<java::security::Principal>> issuers, jni::ref<java::net::Socket> socket) { return call_method<"chooseClientAlias", jni::ref<java::lang::String>>(keyTypes, issuers, socket); }
	jni::ref<java::lang::String> chooseEngineClientAlias(jni::ref<jni::array<java::lang::String>> keyTypes, jni::ref<jni::array<java::security::Principal>> issuers, jni::ref<javax::net::ssl::SSLEngine> engine) { return call_method<"chooseEngineClientAlias", jni::ref<java::lang::String>>(keyTypes, issuers, engine); }
	jni::ref<java::lang::String> chooseServerAlias(jni::ref<java::lang::String> keyType, jni::ref<jni::array<java::security::Principal>> issuers, jni::ref<java::net::Socket> socket) { return call_method<"chooseServerAlias", jni::ref<java::lang::String>>(keyType, issuers, socket); }
	jni::ref<java::lang::String> chooseEngineServerAlias(jni::ref<java::lang::String> keyType, jni::ref<jni::array<java::security::Principal>> issuers, jni::ref<javax::net::ssl::SSLEngine> engine) { return call_method<"chooseEngineServerAlias", jni::ref<java::lang::String>>(keyType, issuers, engine); }
	jni::ref<jni::array<java::lang::String>> getClientAliases(jni::ref<java::lang::String> keyType, jni::ref<jni::array<java::security::Principal>> issuers) { return call_method<"getClientAliases", jni::ref<jni::array<java::lang::String>>>(keyType, issuers); }
	jni::ref<jni::array<java::lang::String>> getServerAliases(jni::ref<java::lang::String> keyType, jni::ref<jni::array<java::security::Principal>> issuers) { return call_method<"getServerAliases", jni::ref<jni::array<java::lang::String>>>(keyType, issuers); }
	jni::ref<jni::array<java::lang::String>> getAliases(jni::ref<java::lang::String> keyType, jni::ref<jni::array<java::security::Principal>> issuers, jni::ref<sun::security::ssl::X509KeyManagerImpl_CheckType> checkType, jni::ref<java::security::AlgorithmConstraints> constraints) { return call_method<"getAliases", jni::ref<jni::array<java::lang::String>>>(keyType, issuers, checkType, constraints); }

protected:

	X509KeyManagerImpl(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_SUN_SECURITY_SSL_X509KEYMANAGERIMPL
