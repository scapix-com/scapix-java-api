// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/junit/framework/Test.h>

#ifndef SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTSUITE_FWD
#define SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTSUITE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::junit::framework { class TestSuite; }

template<>
struct scapix::jni::object_traits<scapix::java_api::junit::framework::TestSuite>
{
	static constexpr fixed_string class_name = "junit/framework/TestSuite";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::junit::framework::Test>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTSUITE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTSUITE)
#define SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTSUITE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/reflect/Constructor.h>
#include <scapix/java_api/java/util/Enumeration.h>
#include <scapix/java_api/junit/framework/TestResult.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class junit::framework::TestSuite : public jni::object_base<"junit/framework/TestSuite",
	java::lang::Object,
	junit::framework::Test>
{
public:

	static jni::ref<junit::framework::TestSuite> new_object() { return base_::new_object(); }
	static jni::ref<junit::framework::TestSuite> new_object(jni::ref<java::lang::Class> theClass) { return base_::new_object(theClass); }
	static jni::ref<junit::framework::TestSuite> new_object(jni::ref<java::lang::Class> theClass, jni::ref<java::lang::String> name) { return base_::new_object(theClass, name); }
	static jni::ref<junit::framework::TestSuite> new_object(jni::ref<java::lang::String> name) { return base_::new_object(name); }
	static jni::ref<junit::framework::TestSuite> new_object(jni::ref<jni::array<java::lang::Class>> classes) { return base_::new_object(classes); }
	static jni::ref<junit::framework::TestSuite> new_object(jni::ref<jni::array<java::lang::Class>> classes, jni::ref<java::lang::String> name) { return base_::new_object(classes, name); }
	static jni::ref<junit::framework::Test> createTest(jni::ref<java::lang::Class> theClass, jni::ref<java::lang::String> name) { return call_static_method<"createTest", jni::ref<junit::framework::Test>>(theClass, name); }
	static jni::ref<java::lang::reflect::Constructor> getTestConstructor(jni::ref<java::lang::Class> theClass) { return call_static_method<"getTestConstructor", jni::ref<java::lang::reflect::Constructor>>(theClass); }
	static jni::ref<junit::framework::Test> warning(jni::ref<java::lang::String> message) { return call_static_method<"warning", jni::ref<junit::framework::Test>>(message); }
	void addTest(jni::ref<junit::framework::Test> test) { return call_method<"addTest", void>(test); }
	void addTestSuite(jni::ref<java::lang::Class> testClass) { return call_method<"addTestSuite", void>(testClass); }
	jint countTestCases() { return call_method<"countTestCases", jint>(); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	void run(jni::ref<junit::framework::TestResult> result) { return call_method<"run", void>(result); }
	void runTest(jni::ref<junit::framework::Test> test, jni::ref<junit::framework::TestResult> result) { return call_method<"runTest", void>(test, result); }
	void setName(jni::ref<java::lang::String> name) { return call_method<"setName", void>(name); }
	jni::ref<junit::framework::Test> testAt(jint index) { return call_method<"testAt", jni::ref<junit::framework::Test>>(index); }
	jint testCount() { return call_method<"testCount", jint>(); }
	jni::ref<java::util::Enumeration> tests() { return call_method<"tests", jni::ref<java::util::Enumeration>>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	TestSuite(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JUNIT_FRAMEWORK_TESTSUITE
