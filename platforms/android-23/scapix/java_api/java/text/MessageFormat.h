// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/text/Format.h>

#ifndef SCAPIX_JAVA_API_JAVA_TEXT_MESSAGEFORMAT_FWD
#define SCAPIX_JAVA_API_JAVA_TEXT_MESSAGEFORMAT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::text { class MessageFormat; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::text::MessageFormat>
{
	static constexpr fixed_string class_name = "java/text/MessageFormat";
	using base_classes = std::tuple<scapix::java_api::java::text::Format>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_MESSAGEFORMAT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_TEXT_MESSAGEFORMAT)
#define SCAPIX_JAVA_API_JAVA_TEXT_MESSAGEFORMAT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuffer.h>
#include <scapix/java_api/java/text/AttributedCharacterIterator.h>
#include <scapix/java_api/java/text/FieldPosition.h>
#include <scapix/java_api/java/text/ParsePosition.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/java/text/MessageFormat_Field.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::text::MessageFormat : public jni::object_base<"java/text/MessageFormat",
	java::text::Format>
{
public:

	using Field = MessageFormat_Field;

	static jni::ref<java::text::MessageFormat> new_object(jni::ref<java::lang::String> template_, jni::ref<java::util::Locale> locale) { return base_::new_object(template_, locale); }
	static jni::ref<java::text::MessageFormat> new_object(jni::ref<java::lang::String> template_) { return base_::new_object(template_); }
	void applyPattern(jni::ref<java::lang::String> template_) { return call_method<"applyPattern", void>(template_); }
	jni::ref<java::lang::Object> clone() { return call_method<"clone", jni::ref<java::lang::Object>>(); }
	jboolean equals(jni::ref<java::lang::Object> object) { return call_method<"equals", jboolean>(object); }
	jni::ref<java::text::AttributedCharacterIterator> formatToCharacterIterator(jni::ref<java::lang::Object> object) { return call_method<"formatToCharacterIterator", jni::ref<java::text::AttributedCharacterIterator>>(object); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<jni::array<java::lang::Object>> objects, jni::ref<java::lang::StringBuffer> buffer, jni::ref<java::text::FieldPosition> field) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(objects, buffer, field); }
	jni::ref<java::lang::StringBuffer> format(jni::ref<java::lang::Object> object, jni::ref<java::lang::StringBuffer> buffer, jni::ref<java::text::FieldPosition> field) { return call_method<"format", jni::ref<java::lang::StringBuffer>>(object, buffer, field); }
	static jni::ref<java::lang::String> format(jni::ref<java::lang::String> format, jni::ref<jni::array<java::lang::Object>> args) { return call_static_method<"format", jni::ref<java::lang::String>>(format, args); }
	jni::ref<jni::array<java::text::Format>> getFormats() { return call_method<"getFormats", jni::ref<jni::array<java::text::Format>>>(); }
	jni::ref<jni::array<java::text::Format>> getFormatsByArgumentIndex() { return call_method<"getFormatsByArgumentIndex", jni::ref<jni::array<java::text::Format>>>(); }
	void setFormatByArgumentIndex(jint argIndex, jni::ref<java::text::Format> format) { return call_method<"setFormatByArgumentIndex", void>(argIndex, format); }
	void setFormatsByArgumentIndex(jni::ref<jni::array<java::text::Format>> formats) { return call_method<"setFormatsByArgumentIndex", void>(formats); }
	jni::ref<java::util::Locale> getLocale() { return call_method<"getLocale", jni::ref<java::util::Locale>>(); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<jni::array<java::lang::Object>> parse(jni::ref<java::lang::String> string) { return call_method<"parse", jni::ref<jni::array<java::lang::Object>>>(string); }
	jni::ref<jni::array<java::lang::Object>> parse(jni::ref<java::lang::String> string, jni::ref<java::text::ParsePosition> position) { return call_method<"parse", jni::ref<jni::array<java::lang::Object>>>(string, position); }
	jni::ref<java::lang::Object> parseObject(jni::ref<java::lang::String> string, jni::ref<java::text::ParsePosition> position) { return call_method<"parseObject", jni::ref<java::lang::Object>>(string, position); }
	void setFormat(jint offset, jni::ref<java::text::Format> format) { return call_method<"setFormat", void>(offset, format); }
	void setFormats(jni::ref<jni::array<java::text::Format>> formats) { return call_method<"setFormats", void>(formats); }
	void setLocale(jni::ref<java::util::Locale> locale) { return call_method<"setLocale", void>(locale); }
	jni::ref<java::lang::String> toPattern() { return call_method<"toPattern", jni::ref<java::lang::String>>(); }

protected:

	MessageFormat(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_TEXT_MESSAGEFORMAT
