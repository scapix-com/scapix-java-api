// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/DataInput.h>
#include <scapix/java_api/java/io/DataOutput.h>
#include <scapix/java_api/java/io/Closeable.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_RANDOMACCESSFILE_FWD
#define SCAPIX_JAVA_API_JAVA_IO_RANDOMACCESSFILE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class RandomAccessFile; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::RandomAccessFile>
{
	static constexpr fixed_string class_name = "java/io/RandomAccessFile";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::DataInput, scapix::java_api::java::io::DataOutput, scapix::java_api::java::io::Closeable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_RANDOMACCESSFILE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_RANDOMACCESSFILE)
#define SCAPIX_JAVA_API_JAVA_IO_RANDOMACCESSFILE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/FileChannel.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::RandomAccessFile : public jni::object_base<"java/io/RandomAccessFile",
	java::lang::Object,
	java::io::DataInput,
	java::io::DataOutput,
	java::io::Closeable>
{
public:

	static jni::ref<java::io::RandomAccessFile> new_object(jni::ref<java::io::File> file, jni::ref<java::lang::String> mode) { return base_::new_object(file, mode); }
	static jni::ref<java::io::RandomAccessFile> new_object(jni::ref<java::lang::String> fileName, jni::ref<java::lang::String> mode) { return base_::new_object(fileName, mode); }
	void close() { return call_method<"close", void>(); }
	jni::ref<java::nio::channels::FileChannel> getChannel() { return call_method<"getChannel", jni::ref<java::nio::channels::FileChannel>>(); }
	jni::ref<java::io::FileDescriptor> getFD() { return call_method<"getFD", jni::ref<java::io::FileDescriptor>>(); }
	jlong getFilePointer() { return call_method<"getFilePointer", jlong>(); }
	jlong length() { return call_method<"length", jlong>(); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jbyte>> buffer) { return call_method<"read", jint>(buffer); }
	jint read(jni::ref<jni::array<jbyte>> buffer, jint byteOffset, jint byteCount) { return call_method<"read", jint>(buffer, byteOffset, byteCount); }
	jboolean readBoolean() { return call_method<"readBoolean", jboolean>(); }
	jbyte readByte() { return call_method<"readByte", jbyte>(); }
	jchar readChar() { return call_method<"readChar", jchar>(); }
	jdouble readDouble() { return call_method<"readDouble", jdouble>(); }
	jfloat readFloat() { return call_method<"readFloat", jfloat>(); }
	void readFully(jni::ref<jni::array<jbyte>> dst) { return call_method<"readFully", void>(dst); }
	void readFully(jni::ref<jni::array<jbyte>> dst, jint offset, jint byteCount) { return call_method<"readFully", void>(dst, offset, byteCount); }
	jint readInt() { return call_method<"readInt", jint>(); }
	jni::ref<java::lang::String> readLine() { return call_method<"readLine", jni::ref<java::lang::String>>(); }
	jlong readLong() { return call_method<"readLong", jlong>(); }
	jshort readShort() { return call_method<"readShort", jshort>(); }
	jint readUnsignedByte() { return call_method<"readUnsignedByte", jint>(); }
	jint readUnsignedShort() { return call_method<"readUnsignedShort", jint>(); }
	jni::ref<java::lang::String> readUTF() { return call_method<"readUTF", jni::ref<java::lang::String>>(); }
	void seek(jlong offset) { return call_method<"seek", void>(offset); }
	void setLength(jlong newLength) { return call_method<"setLength", void>(newLength); }
	jint skipBytes(jint count) { return call_method<"skipBytes", jint>(count); }
	void write(jni::ref<jni::array<jbyte>> buffer) { return call_method<"write", void>(buffer); }
	void write(jni::ref<jni::array<jbyte>> buffer, jint byteOffset, jint byteCount) { return call_method<"write", void>(buffer, byteOffset, byteCount); }
	void write(jint oneByte) { return call_method<"write", void>(oneByte); }
	void writeBoolean(jboolean val) { return call_method<"writeBoolean", void>(val); }
	void writeByte(jint val) { return call_method<"writeByte", void>(val); }
	void writeBytes(jni::ref<java::lang::String> str) { return call_method<"writeBytes", void>(str); }
	void writeChar(jint val) { return call_method<"writeChar", void>(val); }
	void writeChars(jni::ref<java::lang::String> str) { return call_method<"writeChars", void>(str); }
	void writeDouble(jdouble val) { return call_method<"writeDouble", void>(val); }
	void writeFloat(jfloat val) { return call_method<"writeFloat", void>(val); }
	void writeInt(jint val) { return call_method<"writeInt", void>(val); }
	void writeLong(jlong val) { return call_method<"writeLong", void>(val); }
	void writeShort(jint val) { return call_method<"writeShort", void>(val); }
	void writeUTF(jni::ref<java::lang::String> str) { return call_method<"writeUTF", void>(str); }

protected:

	RandomAccessFile(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_RANDOMACCESSFILE
