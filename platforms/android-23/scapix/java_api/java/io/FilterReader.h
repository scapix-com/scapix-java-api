// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/io/Reader.h>

#ifndef SCAPIX_JAVA_API_JAVA_IO_FILTERREADER_FWD
#define SCAPIX_JAVA_API_JAVA_IO_FILTERREADER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::io { class FilterReader; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::io::FilterReader>
{
	static constexpr fixed_string class_name = "java/io/FilterReader";
	using base_classes = std::tuple<scapix::java_api::java::io::Reader>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_FILTERREADER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_IO_FILTERREADER)
#define SCAPIX_JAVA_API_JAVA_IO_FILTERREADER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::io::FilterReader : public jni::object_base<"java/io/FilterReader",
	java::io::Reader>
{
public:

	void close() { return call_method<"close", void>(); }
	void mark(jint readlimit) { return call_method<"mark", void>(readlimit); }
	jboolean markSupported() { return call_method<"markSupported", jboolean>(); }
	jint read() { return call_method<"read", jint>(); }
	jint read(jni::ref<jni::array<jchar>> buffer, jint offset, jint count) { return call_method<"read", jint>(buffer, offset, count); }
	jboolean ready() { return call_method<"ready", jboolean>(); }
	void reset() { return call_method<"reset", void>(); }
	jlong skip(jlong charCount) { return call_method<"skip", jlong>(charCount); }

protected:

	FilterReader(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_IO_FILTERREADER
