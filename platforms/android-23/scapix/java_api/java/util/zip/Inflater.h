// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_ZIP_INFLATER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_INFLATER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::zip { class Inflater; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::zip::Inflater>
{
	static constexpr fixed_string class_name = "java/util/zip/Inflater";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_INFLATER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_ZIP_INFLATER)
#define SCAPIX_JAVA_API_JAVA_UTIL_ZIP_INFLATER

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::zip::Inflater : public jni::object_base<"java/util/zip/Inflater",
	java::lang::Object>
{
public:

	static jni::ref<java::util::zip::Inflater> new_object() { return base_::new_object(); }
	static jni::ref<java::util::zip::Inflater> new_object(jboolean noHeader) { return base_::new_object(noHeader); }
	void end() { return call_method<"end", void>(); }
	jboolean finished() { return call_method<"finished", jboolean>(); }
	jint getAdler() { return call_method<"getAdler", jint>(); }
	jlong getBytesRead() { return call_method<"getBytesRead", jlong>(); }
	jlong getBytesWritten() { return call_method<"getBytesWritten", jlong>(); }
	jint getRemaining() { return call_method<"getRemaining", jint>(); }
	jint getTotalIn() { return call_method<"getTotalIn", jint>(); }
	jint getTotalOut() { return call_method<"getTotalOut", jint>(); }
	jint inflate(jni::ref<jni::array<jbyte>> buf) { return call_method<"inflate", jint>(buf); }
	jint inflate(jni::ref<jni::array<jbyte>> buf, jint offset, jint byteCount) { return call_method<"inflate", jint>(buf, offset, byteCount); }
	jboolean needsDictionary() { return call_method<"needsDictionary", jboolean>(); }
	jboolean needsInput() { return call_method<"needsInput", jboolean>(); }
	void reset() { return call_method<"reset", void>(); }
	void setDictionary(jni::ref<jni::array<jbyte>> dictionary) { return call_method<"setDictionary", void>(dictionary); }
	void setDictionary(jni::ref<jni::array<jbyte>> dictionary, jint offset, jint byteCount) { return call_method<"setDictionary", void>(dictionary, offset, byteCount); }
	void setInput(jni::ref<jni::array<jbyte>> buf) { return call_method<"setInput", void>(buf); }
	void setInput(jni::ref<jni::array<jbyte>> buf, jint offset, jint byteCount) { return call_method<"setInput", void>(buf, offset, byteCount); }

protected:

	Inflater(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_ZIP_INFLATER
