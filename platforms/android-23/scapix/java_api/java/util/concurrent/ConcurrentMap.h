// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Map.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class ConcurrentMap; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::ConcurrentMap>
{
	static constexpr fixed_string class_name = "java/util/concurrent/ConcurrentMap";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::Map>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTMAP)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTMAP

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::ConcurrentMap : public jni::object_base<"java/util/concurrent/ConcurrentMap",
	java::lang::Object,
	java::util::Map>
{
public:

	jni::ref<java::lang::Object> putIfAbsent(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"putIfAbsent", jni::ref<java::lang::Object>>(p1, p2); }
	jboolean remove(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"remove", jboolean>(p1, p2); }
	jboolean replace(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2, jni::ref<java::lang::Object> p3) { return call_method<"replace", jboolean>(p1, p2, p3); }
	jni::ref<java::lang::Object> replace(jni::ref<java::lang::Object> p1, jni::ref<java::lang::Object> p2) { return call_method<"replace", jni::ref<java::lang::Object>>(p1, p2); }

protected:

	ConcurrentMap(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_CONCURRENTMAP
