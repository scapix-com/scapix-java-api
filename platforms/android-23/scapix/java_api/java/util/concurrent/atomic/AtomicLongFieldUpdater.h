// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGFIELDUPDATER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGFIELDUPDATER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent::atomic { class AtomicLongFieldUpdater; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::atomic::AtomicLongFieldUpdater>
{
	static constexpr fixed_string class_name = "java/util/concurrent/atomic/AtomicLongFieldUpdater";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGFIELDUPDATER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGFIELDUPDATER)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGFIELDUPDATER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::atomic::AtomicLongFieldUpdater : public jni::object_base<"java/util/concurrent/atomic/AtomicLongFieldUpdater",
	java::lang::Object>
{
public:

	static jni::ref<java::util::concurrent::atomic::AtomicLongFieldUpdater> newUpdater(jni::ref<java::lang::Class> tclass, jni::ref<java::lang::String> fieldName) { return call_static_method<"newUpdater", jni::ref<java::util::concurrent::atomic::AtomicLongFieldUpdater>>(tclass, fieldName); }
	jboolean compareAndSet(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"compareAndSet", jboolean>(p1, p2, p3); }
	jboolean weakCompareAndSet(jni::ref<java::lang::Object> p1, jlong p2, jlong p3) { return call_method<"weakCompareAndSet", jboolean>(p1, p2, p3); }
	void set(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"set", void>(p1, p2); }
	void lazySet(jni::ref<java::lang::Object> p1, jlong p2) { return call_method<"lazySet", void>(p1, p2); }
	jlong get(jni::ref<java::lang::Object> p1) { return call_method<"get", jlong>(p1); }
	jlong getAndSet(jni::ref<java::lang::Object> obj, jlong newValue) { return call_method<"getAndSet", jlong>(obj, newValue); }
	jlong getAndIncrement(jni::ref<java::lang::Object> obj) { return call_method<"getAndIncrement", jlong>(obj); }
	jlong getAndDecrement(jni::ref<java::lang::Object> obj) { return call_method<"getAndDecrement", jlong>(obj); }
	jlong getAndAdd(jni::ref<java::lang::Object> obj, jlong delta) { return call_method<"getAndAdd", jlong>(obj, delta); }
	jlong incrementAndGet(jni::ref<java::lang::Object> obj) { return call_method<"incrementAndGet", jlong>(obj); }
	jlong decrementAndGet(jni::ref<java::lang::Object> obj) { return call_method<"decrementAndGet", jlong>(obj); }
	jlong addAndGet(jni::ref<java::lang::Object> obj, jlong delta) { return call_method<"addAndGet", jlong>(obj, delta); }

protected:

	AtomicLongFieldUpdater(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONGFIELDUPDATER
