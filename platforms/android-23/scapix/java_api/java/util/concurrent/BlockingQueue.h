// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/util/Queue.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::concurrent { class BlockingQueue; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::concurrent::BlockingQueue>
{
	static constexpr fixed_string class_name = "java/util/concurrent/BlockingQueue";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::util::Queue>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE)
#define SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/util/Collection.h>
#include <scapix/java_api/java/util/concurrent/TimeUnit.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::concurrent::BlockingQueue : public jni::object_base<"java/util/concurrent/BlockingQueue",
	java::lang::Object,
	java::util::Queue>
{
public:

	jboolean add(jni::ref<java::lang::Object> p1) { return call_method<"add", jboolean>(p1); }
	jboolean offer(jni::ref<java::lang::Object> p1) { return call_method<"offer", jboolean>(p1); }
	void put(jni::ref<java::lang::Object> p1) { return call_method<"put", void>(p1); }
	jboolean offer(jni::ref<java::lang::Object> p1, jlong p2, jni::ref<java::util::concurrent::TimeUnit> p3) { return call_method<"offer", jboolean>(p1, p2, p3); }
	jni::ref<java::lang::Object> take() { return call_method<"take", jni::ref<java::lang::Object>>(); }
	jni::ref<java::lang::Object> poll(jlong p1, jni::ref<java::util::concurrent::TimeUnit> p2) { return call_method<"poll", jni::ref<java::lang::Object>>(p1, p2); }
	jint remainingCapacity() { return call_method<"remainingCapacity", jint>(); }
	jboolean remove(jni::ref<java::lang::Object> p1) { return call_method<"remove", jboolean>(p1); }
	jboolean contains(jni::ref<java::lang::Object> p1) { return call_method<"contains", jboolean>(p1); }
	jint drainTo(jni::ref<java::util::Collection> p1) { return call_method<"drainTo", jint>(p1); }
	jint drainTo(jni::ref<java::util::Collection> p1, jint p2) { return call_method<"drainTo", jint>(p1, p2); }

protected:

	BlockingQueue(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_CONCURRENT_BLOCKINGQUEUE
