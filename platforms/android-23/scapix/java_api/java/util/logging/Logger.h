// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER_FWD
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::util::logging { class Logger; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::util::logging::Logger>
{
	static constexpr fixed_string class_name = "java/util/logging/Logger";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER)
#define SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Throwable.h>
#include <scapix/java_api/java/util/ResourceBundle.h>
#include <scapix/java_api/java/util/logging/Filter.h>
#include <scapix/java_api/java/util/logging/Handler.h>
#include <scapix/java_api/java/util/logging/Level.h>
#include <scapix/java_api/java/util/logging/LogRecord.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::util::logging::Logger : public jni::object_base<"java/util/logging/Logger",
	java::lang::Object>
{
public:

	static jni::ref<java::lang::String> GLOBAL_LOGGER_NAME() { return get_static_field<"GLOBAL_LOGGER_NAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::util::logging::Logger> global() { return get_static_field<"global", jni::ref<java::util::logging::Logger>>(); }

	static jni::ref<java::util::logging::Logger> getAnonymousLogger() { return call_static_method<"getAnonymousLogger", jni::ref<java::util::logging::Logger>>(); }
	static jni::ref<java::util::logging::Logger> getAnonymousLogger(jni::ref<java::lang::String> resourceBundleName) { return call_static_method<"getAnonymousLogger", jni::ref<java::util::logging::Logger>>(resourceBundleName); }
	static jni::ref<java::util::logging::Logger> getLogger(jni::ref<java::lang::String> name) { return call_static_method<"getLogger", jni::ref<java::util::logging::Logger>>(name); }
	static jni::ref<java::util::logging::Logger> getLogger(jni::ref<java::lang::String> name, jni::ref<java::lang::String> resourceBundleName) { return call_static_method<"getLogger", jni::ref<java::util::logging::Logger>>(name, resourceBundleName); }
	static jni::ref<java::util::logging::Logger> getGlobal() { return call_static_method<"getGlobal", jni::ref<java::util::logging::Logger>>(); }
	void addHandler(jni::ref<java::util::logging::Handler> handler) { return call_method<"addHandler", void>(handler); }
	jni::ref<jni::array<java::util::logging::Handler>> getHandlers() { return call_method<"getHandlers", jni::ref<jni::array<java::util::logging::Handler>>>(); }
	void removeHandler(jni::ref<java::util::logging::Handler> handler) { return call_method<"removeHandler", void>(handler); }
	jni::ref<java::util::logging::Filter> getFilter() { return call_method<"getFilter", jni::ref<java::util::logging::Filter>>(); }
	void setFilter(jni::ref<java::util::logging::Filter> newFilter) { return call_method<"setFilter", void>(newFilter); }
	jni::ref<java::util::logging::Level> getLevel() { return call_method<"getLevel", jni::ref<java::util::logging::Level>>(); }
	void setLevel(jni::ref<java::util::logging::Level> newLevel) { return call_method<"setLevel", void>(newLevel); }
	jboolean getUseParentHandlers() { return call_method<"getUseParentHandlers", jboolean>(); }
	void setUseParentHandlers(jboolean notifyParentHandlers) { return call_method<"setUseParentHandlers", void>(notifyParentHandlers); }
	jni::ref<java::util::logging::Logger> getParent() { return call_method<"getParent", jni::ref<java::util::logging::Logger>>(); }
	void setParent(jni::ref<java::util::logging::Logger> parent) { return call_method<"setParent", void>(parent); }
	jni::ref<java::lang::String> getName() { return call_method<"getName", jni::ref<java::lang::String>>(); }
	jni::ref<java::util::ResourceBundle> getResourceBundle() { return call_method<"getResourceBundle", jni::ref<java::util::ResourceBundle>>(); }
	jni::ref<java::lang::String> getResourceBundleName() { return call_method<"getResourceBundleName", jni::ref<java::lang::String>>(); }
	jboolean isLoggable(jni::ref<java::util::logging::Level> l) { return call_method<"isLoggable", jboolean>(l); }
	void entering(jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod) { return call_method<"entering", void>(sourceClass, sourceMethod); }
	void entering(jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::Object> param) { return call_method<"entering", void>(sourceClass, sourceMethod, param); }
	void entering(jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"entering", void>(sourceClass, sourceMethod, params); }
	void exiting(jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod) { return call_method<"exiting", void>(sourceClass, sourceMethod); }
	void exiting(jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::Object> result) { return call_method<"exiting", void>(sourceClass, sourceMethod, result); }
	void throwing(jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::Throwable> thrown) { return call_method<"throwing", void>(sourceClass, sourceMethod, thrown); }
	void severe(jni::ref<java::lang::String> msg) { return call_method<"severe", void>(msg); }
	void warning(jni::ref<java::lang::String> msg) { return call_method<"warning", void>(msg); }
	void info(jni::ref<java::lang::String> msg) { return call_method<"info", void>(msg); }
	void config(jni::ref<java::lang::String> msg) { return call_method<"config", void>(msg); }
	void fine(jni::ref<java::lang::String> msg) { return call_method<"fine", void>(msg); }
	void finer(jni::ref<java::lang::String> msg) { return call_method<"finer", void>(msg); }
	void finest(jni::ref<java::lang::String> msg) { return call_method<"finest", void>(msg); }
	void log(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> msg) { return call_method<"log", void>(logLevel, msg); }
	void log(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> msg, jni::ref<java::lang::Object> param) { return call_method<"log", void>(logLevel, msg, param); }
	void log(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"log", void>(logLevel, msg, params); }
	void log(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> thrown) { return call_method<"log", void>(logLevel, msg, thrown); }
	void log(jni::ref<java::util::logging::LogRecord> record) { return call_method<"log", void>(record); }
	void logp(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::String> msg) { return call_method<"logp", void>(logLevel, sourceClass, sourceMethod, msg); }
	void logp(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::String> msg, jni::ref<java::lang::Object> param) { return call_method<"logp", void>(logLevel, sourceClass, sourceMethod, msg, param); }
	void logp(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"logp", void>(logLevel, sourceClass, sourceMethod, msg, params); }
	void logp(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> thrown) { return call_method<"logp", void>(logLevel, sourceClass, sourceMethod, msg, thrown); }
	void logrb(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::String> bundleName, jni::ref<java::lang::String> msg) { return call_method<"logrb", void>(logLevel, sourceClass, sourceMethod, bundleName, msg); }
	void logrb(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::String> bundleName, jni::ref<java::lang::String> msg, jni::ref<java::lang::Object> param) { return call_method<"logrb", void>(logLevel, sourceClass, sourceMethod, bundleName, msg, param); }
	void logrb(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::String> bundleName, jni::ref<java::lang::String> msg, jni::ref<jni::array<java::lang::Object>> params) { return call_method<"logrb", void>(logLevel, sourceClass, sourceMethod, bundleName, msg, params); }
	void logrb(jni::ref<java::util::logging::Level> logLevel, jni::ref<java::lang::String> sourceClass, jni::ref<java::lang::String> sourceMethod, jni::ref<java::lang::String> bundleName, jni::ref<java::lang::String> msg, jni::ref<java::lang::Throwable> thrown) { return call_method<"logrb", void>(logLevel, sourceClass, sourceMethod, bundleName, msg, thrown); }

protected:

	Logger(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_UTIL_LOGGING_LOGGER
