// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Number.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_INTEGER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_INTEGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Integer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Integer>
{
	static constexpr fixed_string class_name = "java/lang/Integer";
	using base_classes = std::tuple<scapix::java_api::java::lang::Number, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INTEGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_INTEGER)
#define SCAPIX_JAVA_API_JAVA_LANG_INTEGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Integer : public jni::object_base<"java/lang/Integer",
	java::lang::Number,
	java::lang::Comparable>
{
public:

	static jint MAX_VALUE() { return get_static_field<"MAX_VALUE", jint>(); }
	static jint MIN_VALUE() { return get_static_field<"MIN_VALUE", jint>(); }
	static jint SIZE() { return get_static_field<"SIZE", jint>(); }
	static jni::ref<java::lang::Class> TYPE() { return get_static_field<"TYPE", jni::ref<java::lang::Class>>(); }

	static jni::ref<java::lang::Integer> new_object(jint value) { return base_::new_object(value); }
	static jni::ref<java::lang::Integer> new_object(jni::ref<java::lang::String> string) { return base_::new_object(string); }
	jbyte byteValue() { return call_method<"byteValue", jbyte>(); }
	jint compareTo(jni::ref<java::lang::Integer> object) { return call_method<"compareTo", jint>(object); }
	static jint compare(jint lhs, jint rhs) { return call_static_method<"compare", jint>(lhs, rhs); }
	static jni::ref<java::lang::Integer> decode(jni::ref<java::lang::String> string) { return call_static_method<"decode", jni::ref<java::lang::Integer>>(string); }
	jdouble doubleValue() { return call_method<"doubleValue", jdouble>(); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jfloat floatValue() { return call_method<"floatValue", jfloat>(); }
	static jni::ref<java::lang::Integer> getInteger(jni::ref<java::lang::String> string) { return call_static_method<"getInteger", jni::ref<java::lang::Integer>>(string); }
	static jni::ref<java::lang::Integer> getInteger(jni::ref<java::lang::String> string, jint defaultValue) { return call_static_method<"getInteger", jni::ref<java::lang::Integer>>(string, defaultValue); }
	static jni::ref<java::lang::Integer> getInteger(jni::ref<java::lang::String> string, jni::ref<java::lang::Integer> defaultValue) { return call_static_method<"getInteger", jni::ref<java::lang::Integer>>(string, defaultValue); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jint intValue() { return call_method<"intValue", jint>(); }
	jlong longValue() { return call_method<"longValue", jlong>(); }
	static jint parseInt(jni::ref<java::lang::String> string) { return call_static_method<"parseInt", jint>(string); }
	static jint parseInt(jni::ref<java::lang::String> string, jint radix) { return call_static_method<"parseInt", jint>(string, radix); }
	jshort shortValue() { return call_method<"shortValue", jshort>(); }
	static jni::ref<java::lang::String> toBinaryString(jint i) { return call_static_method<"toBinaryString", jni::ref<java::lang::String>>(i); }
	static jni::ref<java::lang::String> toHexString(jint i) { return call_static_method<"toHexString", jni::ref<java::lang::String>>(i); }
	static jni::ref<java::lang::String> toOctalString(jint i) { return call_static_method<"toOctalString", jni::ref<java::lang::String>>(i); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> toString(jint i) { return call_static_method<"toString", jni::ref<java::lang::String>>(i); }
	static jni::ref<java::lang::String> toString(jint i, jint radix) { return call_static_method<"toString", jni::ref<java::lang::String>>(i, radix); }
	static jni::ref<java::lang::Integer> valueOf(jni::ref<java::lang::String> string) { return call_static_method<"valueOf", jni::ref<java::lang::Integer>>(string); }
	static jni::ref<java::lang::Integer> valueOf(jni::ref<java::lang::String> string, jint radix) { return call_static_method<"valueOf", jni::ref<java::lang::Integer>>(string, radix); }
	static jint highestOneBit(jint i) { return call_static_method<"highestOneBit", jint>(i); }
	static jint lowestOneBit(jint i) { return call_static_method<"lowestOneBit", jint>(i); }
	static jint numberOfLeadingZeros(jint i) { return call_static_method<"numberOfLeadingZeros", jint>(i); }
	static jint numberOfTrailingZeros(jint i) { return call_static_method<"numberOfTrailingZeros", jint>(i); }
	static jint bitCount(jint i) { return call_static_method<"bitCount", jint>(i); }
	static jint rotateLeft(jint i, jint distance) { return call_static_method<"rotateLeft", jint>(i, distance); }
	static jint rotateRight(jint i, jint distance) { return call_static_method<"rotateRight", jint>(i, distance); }
	static jint reverseBytes(jint i) { return call_static_method<"reverseBytes", jint>(i); }
	static jint reverse(jint i) { return call_static_method<"reverse", jint>(i); }
	static jint signum(jint i) { return call_static_method<"signum", jint>(i); }
	static jni::ref<java::lang::Integer> valueOf(jint i) { return call_static_method<"valueOf", jni::ref<java::lang::Integer>>(i); }

protected:

	Integer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_INTEGER
