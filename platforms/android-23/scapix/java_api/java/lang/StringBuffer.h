// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/AbstractStringBuilder.h>
#include <scapix/java_api/java/lang/Appendable.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/CharSequence.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRINGBUFFER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGBUFFER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class StringBuffer; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::StringBuffer>
{
	static constexpr fixed_string class_name = "java/lang/StringBuffer";
	using base_classes = std::tuple<scapix::java_api::java::lang::AbstractStringBuilder, scapix::java_api::java::lang::Appendable, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::CharSequence>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGBUFFER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRINGBUFFER)
#define SCAPIX_JAVA_API_JAVA_LANG_STRINGBUFFER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::StringBuffer : public jni::object_base<"java/lang/StringBuffer",
	java::lang::AbstractStringBuilder,
	java::lang::Appendable,
	java::io::Serializable,
	java::lang::CharSequence>
{
public:

	static jni::ref<java::lang::StringBuffer> new_object() { return base_::new_object(); }
	static jni::ref<java::lang::StringBuffer> new_object(jint capacity) { return base_::new_object(capacity); }
	static jni::ref<java::lang::StringBuffer> new_object(jni::ref<java::lang::String> string) { return base_::new_object(string); }
	static jni::ref<java::lang::StringBuffer> new_object(jni::ref<java::lang::CharSequence> cs) { return base_::new_object(cs); }
	jni::ref<java::lang::StringBuffer> append(jboolean b) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(b); }
	jni::ref<java::lang::StringBuffer> append(jchar ch) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(ch); }
	jni::ref<java::lang::StringBuffer> append(jdouble d) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(d); }
	jni::ref<java::lang::StringBuffer> append(jfloat f) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(f); }
	jni::ref<java::lang::StringBuffer> append(jint i) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(i); }
	jni::ref<java::lang::StringBuffer> append(jlong l) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(l); }
	jni::ref<java::lang::StringBuffer> append(jni::ref<java::lang::Object> obj) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(obj); }
	jni::ref<java::lang::StringBuffer> append(jni::ref<java::lang::String> string) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(string); }
	jni::ref<java::lang::StringBuffer> append(jni::ref<java::lang::StringBuffer> sb) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(sb); }
	jni::ref<java::lang::StringBuffer> append(jni::ref<jni::array<jchar>> chars) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(chars); }
	jni::ref<java::lang::StringBuffer> append(jni::ref<jni::array<jchar>> chars, jint start, jint length) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(chars, start, length); }
	jni::ref<java::lang::StringBuffer> append(jni::ref<java::lang::CharSequence> s) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(s); }
	jni::ref<java::lang::StringBuffer> append(jni::ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<"append", jni::ref<java::lang::StringBuffer>>(s, start, end); }
	jni::ref<java::lang::StringBuffer> appendCodePoint(jint codePoint) { return call_method<"appendCodePoint", jni::ref<java::lang::StringBuffer>>(codePoint); }
	jchar charAt(jint index) { return call_method<"charAt", jchar>(index); }
	jint codePointAt(jint index) { return call_method<"codePointAt", jint>(index); }
	jint codePointBefore(jint index) { return call_method<"codePointBefore", jint>(index); }
	jint codePointCount(jint beginIndex, jint endIndex) { return call_method<"codePointCount", jint>(beginIndex, endIndex); }
	jni::ref<java::lang::StringBuffer> delete_(jint start, jint end) { return call_method<"delete", jni::ref<java::lang::StringBuffer>>(start, end); }
	jni::ref<java::lang::StringBuffer> deleteCharAt(jint location) { return call_method<"deleteCharAt", jni::ref<java::lang::StringBuffer>>(location); }
	void ensureCapacity(jint min) { return call_method<"ensureCapacity", void>(min); }
	void getChars(jint start, jint end, jni::ref<jni::array<jchar>> buffer, jint idx) { return call_method<"getChars", void>(start, end, buffer, idx); }
	jint indexOf(jni::ref<java::lang::String> subString, jint start) { return call_method<"indexOf", jint>(subString, start); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jchar ch) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, ch); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jboolean b) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, b); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jint i) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, i); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jlong l) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, l); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jdouble d) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, d); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jfloat f) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, f); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jni::ref<java::lang::Object> obj) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, obj); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jni::ref<java::lang::String> string) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, string); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jni::ref<jni::array<jchar>> chars) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, chars); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jni::ref<jni::array<jchar>> chars, jint start, jint length) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, chars, start, length); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jni::ref<java::lang::CharSequence> s) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, s); }
	jni::ref<java::lang::StringBuffer> insert(jint index, jni::ref<java::lang::CharSequence> s, jint start, jint end) { return call_method<"insert", jni::ref<java::lang::StringBuffer>>(index, s, start, end); }
	jint lastIndexOf(jni::ref<java::lang::String> subString, jint start) { return call_method<"lastIndexOf", jint>(subString, start); }
	jint offsetByCodePoints(jint index, jint codePointOffset) { return call_method<"offsetByCodePoints", jint>(index, codePointOffset); }
	jni::ref<java::lang::StringBuffer> replace(jint start, jint end, jni::ref<java::lang::String> string) { return call_method<"replace", jni::ref<java::lang::StringBuffer>>(start, end, string); }
	jni::ref<java::lang::StringBuffer> reverse() { return call_method<"reverse", jni::ref<java::lang::StringBuffer>>(); }
	void setCharAt(jint index, jchar ch) { return call_method<"setCharAt", void>(index, ch); }
	void setLength(jint length) { return call_method<"setLength", void>(length); }
	jni::ref<java::lang::CharSequence> subSequence(jint start, jint end) { return call_method<"subSequence", jni::ref<java::lang::CharSequence>>(start, end); }
	jni::ref<java::lang::String> substring(jint start) { return call_method<"substring", jni::ref<java::lang::String>>(start); }
	jni::ref<java::lang::String> substring(jint start, jint end) { return call_method<"substring", jni::ref<java::lang::String>>(start, end); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	void trimToSize() { return call_method<"trimToSize", void>(); }

protected:

	StringBuffer(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRINGBUFFER
