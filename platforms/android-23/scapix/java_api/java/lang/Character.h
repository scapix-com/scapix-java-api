// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/io/Serializable.h>
#include <scapix/java_api/java/lang/Comparable.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_CHARACTER_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_CHARACTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class Character; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::Character>
{
	static constexpr fixed_string class_name = "java/lang/Character";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::io::Serializable, scapix::java_api::java::lang::Comparable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CHARACTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_CHARACTER)
#define SCAPIX_JAVA_API_JAVA_LANG_CHARACTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/Character_UnicodeBlock.h>
#include <scapix/java_api/java/lang/Character_Subset.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::Character : public jni::object_base<"java/lang/Character",
	java::lang::Object,
	java::io::Serializable,
	java::lang::Comparable>
{
public:

	using UnicodeBlock = Character_UnicodeBlock;
	using Subset = Character_Subset;

	static jbyte COMBINING_SPACING_MARK() { return get_static_field<"COMBINING_SPACING_MARK", jbyte>(); }
	static jbyte CONNECTOR_PUNCTUATION() { return get_static_field<"CONNECTOR_PUNCTUATION", jbyte>(); }
	static jbyte CONTROL() { return get_static_field<"CONTROL", jbyte>(); }
	static jbyte CURRENCY_SYMBOL() { return get_static_field<"CURRENCY_SYMBOL", jbyte>(); }
	static jbyte DASH_PUNCTUATION() { return get_static_field<"DASH_PUNCTUATION", jbyte>(); }
	static jbyte DECIMAL_DIGIT_NUMBER() { return get_static_field<"DECIMAL_DIGIT_NUMBER", jbyte>(); }
	static jbyte DIRECTIONALITY_ARABIC_NUMBER() { return get_static_field<"DIRECTIONALITY_ARABIC_NUMBER", jbyte>(); }
	static jbyte DIRECTIONALITY_BOUNDARY_NEUTRAL() { return get_static_field<"DIRECTIONALITY_BOUNDARY_NEUTRAL", jbyte>(); }
	static jbyte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR() { return get_static_field<"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", jbyte>(); }
	static jbyte DIRECTIONALITY_EUROPEAN_NUMBER() { return get_static_field<"DIRECTIONALITY_EUROPEAN_NUMBER", jbyte>(); }
	static jbyte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR() { return get_static_field<"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", jbyte>(); }
	static jbyte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR() { return get_static_field<"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", jbyte>(); }
	static jbyte DIRECTIONALITY_LEFT_TO_RIGHT() { return get_static_field<"DIRECTIONALITY_LEFT_TO_RIGHT", jbyte>(); }
	static jbyte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING() { return get_static_field<"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", jbyte>(); }
	static jbyte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE() { return get_static_field<"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", jbyte>(); }
	static jbyte DIRECTIONALITY_NONSPACING_MARK() { return get_static_field<"DIRECTIONALITY_NONSPACING_MARK", jbyte>(); }
	static jbyte DIRECTIONALITY_OTHER_NEUTRALS() { return get_static_field<"DIRECTIONALITY_OTHER_NEUTRALS", jbyte>(); }
	static jbyte DIRECTIONALITY_PARAGRAPH_SEPARATOR() { return get_static_field<"DIRECTIONALITY_PARAGRAPH_SEPARATOR", jbyte>(); }
	static jbyte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT() { return get_static_field<"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", jbyte>(); }
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT() { return get_static_field<"DIRECTIONALITY_RIGHT_TO_LEFT", jbyte>(); }
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC() { return get_static_field<"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", jbyte>(); }
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING() { return get_static_field<"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", jbyte>(); }
	static jbyte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE() { return get_static_field<"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", jbyte>(); }
	static jbyte DIRECTIONALITY_SEGMENT_SEPARATOR() { return get_static_field<"DIRECTIONALITY_SEGMENT_SEPARATOR", jbyte>(); }
	static jbyte DIRECTIONALITY_UNDEFINED() { return get_static_field<"DIRECTIONALITY_UNDEFINED", jbyte>(); }
	static jbyte DIRECTIONALITY_WHITESPACE() { return get_static_field<"DIRECTIONALITY_WHITESPACE", jbyte>(); }
	static jbyte ENCLOSING_MARK() { return get_static_field<"ENCLOSING_MARK", jbyte>(); }
	static jbyte END_PUNCTUATION() { return get_static_field<"END_PUNCTUATION", jbyte>(); }
	static jbyte FINAL_QUOTE_PUNCTUATION() { return get_static_field<"FINAL_QUOTE_PUNCTUATION", jbyte>(); }
	static jbyte FORMAT() { return get_static_field<"FORMAT", jbyte>(); }
	static jbyte INITIAL_QUOTE_PUNCTUATION() { return get_static_field<"INITIAL_QUOTE_PUNCTUATION", jbyte>(); }
	static jbyte LETTER_NUMBER() { return get_static_field<"LETTER_NUMBER", jbyte>(); }
	static jbyte LINE_SEPARATOR() { return get_static_field<"LINE_SEPARATOR", jbyte>(); }
	static jbyte LOWERCASE_LETTER() { return get_static_field<"LOWERCASE_LETTER", jbyte>(); }
	static jbyte MATH_SYMBOL() { return get_static_field<"MATH_SYMBOL", jbyte>(); }
	static jint MAX_CODE_POINT() { return get_static_field<"MAX_CODE_POINT", jint>(); }
	static jchar MAX_HIGH_SURROGATE() { return get_static_field<"MAX_HIGH_SURROGATE", jchar>(); }
	static jchar MAX_LOW_SURROGATE() { return get_static_field<"MAX_LOW_SURROGATE", jchar>(); }
	static jint MAX_RADIX() { return get_static_field<"MAX_RADIX", jint>(); }
	static jchar MAX_SURROGATE() { return get_static_field<"MAX_SURROGATE", jchar>(); }
	static jchar MAX_VALUE() { return get_static_field<"MAX_VALUE", jchar>(); }
	static jint MIN_CODE_POINT() { return get_static_field<"MIN_CODE_POINT", jint>(); }
	static jchar MIN_HIGH_SURROGATE() { return get_static_field<"MIN_HIGH_SURROGATE", jchar>(); }
	static jchar MIN_LOW_SURROGATE() { return get_static_field<"MIN_LOW_SURROGATE", jchar>(); }
	static jint MIN_RADIX() { return get_static_field<"MIN_RADIX", jint>(); }
	static jint MIN_SUPPLEMENTARY_CODE_POINT() { return get_static_field<"MIN_SUPPLEMENTARY_CODE_POINT", jint>(); }
	static jchar MIN_SURROGATE() { return get_static_field<"MIN_SURROGATE", jchar>(); }
	static jchar MIN_VALUE() { return get_static_field<"MIN_VALUE", jchar>(); }
	static jbyte MODIFIER_LETTER() { return get_static_field<"MODIFIER_LETTER", jbyte>(); }
	static jbyte MODIFIER_SYMBOL() { return get_static_field<"MODIFIER_SYMBOL", jbyte>(); }
	static jbyte NON_SPACING_MARK() { return get_static_field<"NON_SPACING_MARK", jbyte>(); }
	static jbyte OTHER_LETTER() { return get_static_field<"OTHER_LETTER", jbyte>(); }
	static jbyte OTHER_NUMBER() { return get_static_field<"OTHER_NUMBER", jbyte>(); }
	static jbyte OTHER_PUNCTUATION() { return get_static_field<"OTHER_PUNCTUATION", jbyte>(); }
	static jbyte OTHER_SYMBOL() { return get_static_field<"OTHER_SYMBOL", jbyte>(); }
	static jbyte PARAGRAPH_SEPARATOR() { return get_static_field<"PARAGRAPH_SEPARATOR", jbyte>(); }
	static jbyte PRIVATE_USE() { return get_static_field<"PRIVATE_USE", jbyte>(); }
	static jint SIZE() { return get_static_field<"SIZE", jint>(); }
	static jbyte SPACE_SEPARATOR() { return get_static_field<"SPACE_SEPARATOR", jbyte>(); }
	static jbyte START_PUNCTUATION() { return get_static_field<"START_PUNCTUATION", jbyte>(); }
	static jbyte SURROGATE() { return get_static_field<"SURROGATE", jbyte>(); }
	static jbyte TITLECASE_LETTER() { return get_static_field<"TITLECASE_LETTER", jbyte>(); }
	static jni::ref<java::lang::Class> TYPE() { return get_static_field<"TYPE", jni::ref<java::lang::Class>>(); }
	static jbyte UNASSIGNED() { return get_static_field<"UNASSIGNED", jbyte>(); }
	static jbyte UPPERCASE_LETTER() { return get_static_field<"UPPERCASE_LETTER", jbyte>(); }

	static jni::ref<java::lang::Character> new_object(jchar value) { return base_::new_object(value); }
	jchar charValue() { return call_method<"charValue", jchar>(); }
	jint compareTo(jni::ref<java::lang::Character> c) { return call_method<"compareTo", jint>(c); }
	static jint compare(jchar lhs, jchar rhs) { return call_static_method<"compare", jint>(lhs, rhs); }
	static jni::ref<java::lang::Character> valueOf(jchar c) { return call_static_method<"valueOf", jni::ref<java::lang::Character>>(c); }
	static jboolean isValidCodePoint(jint codePoint) { return call_static_method<"isValidCodePoint", jboolean>(codePoint); }
	static jboolean isSupplementaryCodePoint(jint codePoint) { return call_static_method<"isSupplementaryCodePoint", jboolean>(codePoint); }
	static jboolean isHighSurrogate(jchar ch) { return call_static_method<"isHighSurrogate", jboolean>(ch); }
	static jboolean isLowSurrogate(jchar ch) { return call_static_method<"isLowSurrogate", jboolean>(ch); }
	static jboolean isSurrogate(jchar ch) { return call_static_method<"isSurrogate", jboolean>(ch); }
	static jboolean isSurrogatePair(jchar high, jchar low) { return call_static_method<"isSurrogatePair", jboolean>(high, low); }
	static jint charCount(jint codePoint) { return call_static_method<"charCount", jint>(codePoint); }
	static jint toCodePoint(jchar high, jchar low) { return call_static_method<"toCodePoint", jint>(high, low); }
	static jint codePointAt(jni::ref<java::lang::CharSequence> seq, jint index) { return call_static_method<"codePointAt", jint>(seq, index); }
	static jint codePointAt(jni::ref<jni::array<jchar>> seq, jint index) { return call_static_method<"codePointAt", jint>(seq, index); }
	static jint codePointAt(jni::ref<jni::array<jchar>> seq, jint index, jint limit) { return call_static_method<"codePointAt", jint>(seq, index, limit); }
	static jint codePointBefore(jni::ref<java::lang::CharSequence> seq, jint index) { return call_static_method<"codePointBefore", jint>(seq, index); }
	static jint codePointBefore(jni::ref<jni::array<jchar>> seq, jint index) { return call_static_method<"codePointBefore", jint>(seq, index); }
	static jint codePointBefore(jni::ref<jni::array<jchar>> seq, jint index, jint start) { return call_static_method<"codePointBefore", jint>(seq, index, start); }
	static jint toChars(jint codePoint, jni::ref<jni::array<jchar>> dst, jint dstIndex) { return call_static_method<"toChars", jint>(codePoint, dst, dstIndex); }
	static jni::ref<jni::array<jchar>> toChars(jint codePoint) { return call_static_method<"toChars", jni::ref<jni::array<jchar>>>(codePoint); }
	static jint codePointCount(jni::ref<java::lang::CharSequence> seq, jint beginIndex, jint endIndex) { return call_static_method<"codePointCount", jint>(seq, beginIndex, endIndex); }
	static jint codePointCount(jni::ref<jni::array<jchar>> seq, jint offset, jint count) { return call_static_method<"codePointCount", jint>(seq, offset, count); }
	static jint offsetByCodePoints(jni::ref<java::lang::CharSequence> seq, jint index, jint codePointOffset) { return call_static_method<"offsetByCodePoints", jint>(seq, index, codePointOffset); }
	static jint offsetByCodePoints(jni::ref<jni::array<jchar>> seq, jint start, jint count, jint index, jint codePointOffset) { return call_static_method<"offsetByCodePoints", jint>(seq, start, count, index, codePointOffset); }
	static jint digit(jchar c, jint radix) { return call_static_method<"digit", jint>(c, radix); }
	static jint digit(jint codePoint, jint radix) { return call_static_method<"digit", jint>(codePoint, radix); }
	jboolean equals(jni::ref<java::lang::Object> object) { return call_method<"equals", jboolean>(object); }
	static jchar forDigit(jint digit, jint radix) { return call_static_method<"forDigit", jchar>(digit, radix); }
	static jni::ref<java::lang::String> getName(jint codePoint) { return call_static_method<"getName", jni::ref<java::lang::String>>(codePoint); }
	static jint getNumericValue(jchar c) { return call_static_method<"getNumericValue", jint>(c); }
	static jint getNumericValue(jint codePoint) { return call_static_method<"getNumericValue", jint>(codePoint); }
	static jint getType(jchar c) { return call_static_method<"getType", jint>(c); }
	static jint getType(jint codePoint) { return call_static_method<"getType", jint>(codePoint); }
	static jbyte getDirectionality(jchar c) { return call_static_method<"getDirectionality", jbyte>(c); }
	static jbyte getDirectionality(jint codePoint) { return call_static_method<"getDirectionality", jbyte>(codePoint); }
	static jboolean isMirrored(jchar c) { return call_static_method<"isMirrored", jboolean>(c); }
	static jboolean isMirrored(jint codePoint) { return call_static_method<"isMirrored", jboolean>(codePoint); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	static jchar highSurrogate(jint codePoint) { return call_static_method<"highSurrogate", jchar>(codePoint); }
	static jchar lowSurrogate(jint codePoint) { return call_static_method<"lowSurrogate", jchar>(codePoint); }
	static jboolean isAlphabetic(jint p1) { return call_static_method<"isAlphabetic", jboolean>(p1); }
	static jboolean isBmpCodePoint(jint codePoint) { return call_static_method<"isBmpCodePoint", jboolean>(codePoint); }
	static jboolean isDefined(jchar c) { return call_static_method<"isDefined", jboolean>(c); }
	static jboolean isDefined(jint codePoint) { return call_static_method<"isDefined", jboolean>(codePoint); }
	static jboolean isDigit(jchar c) { return call_static_method<"isDigit", jboolean>(c); }
	static jboolean isDigit(jint codePoint) { return call_static_method<"isDigit", jboolean>(codePoint); }
	static jboolean isIdentifierIgnorable(jchar c) { return call_static_method<"isIdentifierIgnorable", jboolean>(c); }
	static jboolean isIdeographic(jint p1) { return call_static_method<"isIdeographic", jboolean>(p1); }
	static jboolean isIdentifierIgnorable(jint codePoint) { return call_static_method<"isIdentifierIgnorable", jboolean>(codePoint); }
	static jboolean isISOControl(jchar c) { return call_static_method<"isISOControl", jboolean>(c); }
	static jboolean isISOControl(jint c) { return call_static_method<"isISOControl", jboolean>(c); }
	static jboolean isJavaIdentifierPart(jchar c) { return call_static_method<"isJavaIdentifierPart", jboolean>(c); }
	static jboolean isJavaIdentifierPart(jint codePoint) { return call_static_method<"isJavaIdentifierPart", jboolean>(codePoint); }
	static jboolean isJavaIdentifierStart(jchar c) { return call_static_method<"isJavaIdentifierStart", jboolean>(c); }
	static jboolean isJavaIdentifierStart(jint codePoint) { return call_static_method<"isJavaIdentifierStart", jboolean>(codePoint); }
	static jboolean isJavaLetter(jchar c) { return call_static_method<"isJavaLetter", jboolean>(c); }
	static jboolean isJavaLetterOrDigit(jchar c) { return call_static_method<"isJavaLetterOrDigit", jboolean>(c); }
	static jboolean isLetter(jchar c) { return call_static_method<"isLetter", jboolean>(c); }
	static jboolean isLetter(jint codePoint) { return call_static_method<"isLetter", jboolean>(codePoint); }
	static jboolean isLetterOrDigit(jchar c) { return call_static_method<"isLetterOrDigit", jboolean>(c); }
	static jboolean isLetterOrDigit(jint codePoint) { return call_static_method<"isLetterOrDigit", jboolean>(codePoint); }
	static jboolean isLowerCase(jchar c) { return call_static_method<"isLowerCase", jboolean>(c); }
	static jboolean isLowerCase(jint codePoint) { return call_static_method<"isLowerCase", jboolean>(codePoint); }
	static jboolean isSpace(jchar c) { return call_static_method<"isSpace", jboolean>(c); }
	static jboolean isSpaceChar(jchar c) { return call_static_method<"isSpaceChar", jboolean>(c); }
	static jboolean isSpaceChar(jint codePoint) { return call_static_method<"isSpaceChar", jboolean>(codePoint); }
	static jboolean isTitleCase(jchar c) { return call_static_method<"isTitleCase", jboolean>(c); }
	static jboolean isTitleCase(jint codePoint) { return call_static_method<"isTitleCase", jboolean>(codePoint); }
	static jboolean isUnicodeIdentifierPart(jchar c) { return call_static_method<"isUnicodeIdentifierPart", jboolean>(c); }
	static jboolean isUnicodeIdentifierPart(jint codePoint) { return call_static_method<"isUnicodeIdentifierPart", jboolean>(codePoint); }
	static jboolean isUnicodeIdentifierStart(jchar c) { return call_static_method<"isUnicodeIdentifierStart", jboolean>(c); }
	static jboolean isUnicodeIdentifierStart(jint codePoint) { return call_static_method<"isUnicodeIdentifierStart", jboolean>(codePoint); }
	static jboolean isUpperCase(jchar c) { return call_static_method<"isUpperCase", jboolean>(c); }
	static jboolean isUpperCase(jint codePoint) { return call_static_method<"isUpperCase", jboolean>(codePoint); }
	static jboolean isWhitespace(jchar c) { return call_static_method<"isWhitespace", jboolean>(c); }
	static jboolean isWhitespace(jint codePoint) { return call_static_method<"isWhitespace", jboolean>(codePoint); }
	static jchar reverseBytes(jchar c) { return call_static_method<"reverseBytes", jchar>(c); }
	static jchar toLowerCase(jchar c) { return call_static_method<"toLowerCase", jchar>(c); }
	static jint toLowerCase(jint codePoint) { return call_static_method<"toLowerCase", jint>(codePoint); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> toString(jchar value) { return call_static_method<"toString", jni::ref<java::lang::String>>(value); }
	static jchar toTitleCase(jchar c) { return call_static_method<"toTitleCase", jchar>(c); }
	static jint toTitleCase(jint codePoint) { return call_static_method<"toTitleCase", jint>(codePoint); }
	static jchar toUpperCase(jchar c) { return call_static_method<"toUpperCase", jchar>(c); }
	static jint toUpperCase(jint codePoint) { return call_static_method<"toUpperCase", jint>(codePoint); }

protected:

	Character(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_CHARACTER
