// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_LANG_STRICTMATH_FWD
#define SCAPIX_JAVA_API_JAVA_LANG_STRICTMATH_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::lang { class StrictMath; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::lang::StrictMath>
{
	static constexpr fixed_string class_name = "java/lang/StrictMath";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRICTMATH_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_LANG_STRICTMATH)
#define SCAPIX_JAVA_API_JAVA_LANG_STRICTMATH

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::lang::StrictMath : public jni::object_base<"java/lang/StrictMath",
	java::lang::Object>
{
public:

	static jdouble E() { return get_static_field<"E", jdouble>(); }
	static jdouble PI() { return get_static_field<"PI", jdouble>(); }

	static jdouble abs(jdouble d) { return call_static_method<"abs", jdouble>(d); }
	static jfloat abs(jfloat f) { return call_static_method<"abs", jfloat>(f); }
	static jint abs(jint i) { return call_static_method<"abs", jint>(i); }
	static jlong abs(jlong l) { return call_static_method<"abs", jlong>(l); }
	static jdouble acos(jdouble x) { return call_static_method<"acos", jdouble>(x); }
	static jdouble asin(jdouble x) { return call_static_method<"asin", jdouble>(x); }
	static jdouble atan(jdouble x) { return call_static_method<"atan", jdouble>(x); }
	static jdouble atan2(jdouble y, jdouble p2) { return call_static_method<"atan2", jdouble>(y, p2); }
	static jdouble cbrt(jdouble x) { return call_static_method<"cbrt", jdouble>(x); }
	static jdouble ceil(jdouble p1) { return call_static_method<"ceil", jdouble>(p1); }
	static jdouble cosh(jdouble x) { return call_static_method<"cosh", jdouble>(x); }
	static jdouble cos(jdouble p1) { return call_static_method<"cos", jdouble>(p1); }
	static jdouble exp(jdouble x) { return call_static_method<"exp", jdouble>(x); }
	static jdouble expm1(jdouble x) { return call_static_method<"expm1", jdouble>(x); }
	static jdouble floor(jdouble p1) { return call_static_method<"floor", jdouble>(p1); }
	static jdouble hypot(jdouble p1, jdouble p2) { return call_static_method<"hypot", jdouble>(p1, p2); }
	static jdouble IEEEremainder(jdouble p1, jdouble p2) { return call_static_method<"IEEEremainder", jdouble>(p1, p2); }
	static jdouble log(jdouble x) { return call_static_method<"log", jdouble>(x); }
	static jdouble log10(jdouble x) { return call_static_method<"log10", jdouble>(x); }
	static jdouble log1p(jdouble x) { return call_static_method<"log1p", jdouble>(x); }
	static jdouble max(jdouble d1, jdouble p2) { return call_static_method<"max", jdouble>(d1, p2); }
	static jfloat max(jfloat f1, jfloat f2) { return call_static_method<"max", jfloat>(f1, f2); }
	static jint max(jint i1, jint i2) { return call_static_method<"max", jint>(i1, i2); }
	static jlong max(jlong l1, jlong p2) { return call_static_method<"max", jlong>(l1, p2); }
	static jdouble min(jdouble d1, jdouble p2) { return call_static_method<"min", jdouble>(d1, p2); }
	static jfloat min(jfloat f1, jfloat f2) { return call_static_method<"min", jfloat>(f1, f2); }
	static jint min(jint i1, jint i2) { return call_static_method<"min", jint>(i1, i2); }
	static jlong min(jlong l1, jlong p2) { return call_static_method<"min", jlong>(l1, p2); }
	static jdouble pow(jdouble p1, jdouble p2) { return call_static_method<"pow", jdouble>(p1, p2); }
	static jdouble random() { return call_static_method<"random", jdouble>(); }
	static jdouble rint(jdouble p1) { return call_static_method<"rint", jdouble>(p1); }
	static jlong round(jdouble d) { return call_static_method<"round", jlong>(d); }
	static jint round(jfloat f) { return call_static_method<"round", jint>(f); }
	static jdouble signum(jdouble d) { return call_static_method<"signum", jdouble>(d); }
	static jfloat signum(jfloat f) { return call_static_method<"signum", jfloat>(f); }
	static jdouble sinh(jdouble x) { return call_static_method<"sinh", jdouble>(x); }
	static jdouble sin(jdouble p1) { return call_static_method<"sin", jdouble>(p1); }
	static jdouble sqrt(jdouble p1) { return call_static_method<"sqrt", jdouble>(p1); }
	static jdouble tan(jdouble p1) { return call_static_method<"tan", jdouble>(p1); }
	static jdouble tanh(jdouble x) { return call_static_method<"tanh", jdouble>(x); }
	static jdouble toDegrees(jdouble angrad) { return call_static_method<"toDegrees", jdouble>(angrad); }
	static jdouble toRadians(jdouble angdeg) { return call_static_method<"toRadians", jdouble>(angdeg); }
	static jdouble ulp(jdouble d) { return call_static_method<"ulp", jdouble>(d); }
	static jfloat ulp(jfloat f) { return call_static_method<"ulp", jfloat>(f); }
	static jdouble copySign(jdouble magnitude, jdouble p2) { return call_static_method<"copySign", jdouble>(magnitude, p2); }
	static jfloat copySign(jfloat magnitude, jfloat sign) { return call_static_method<"copySign", jfloat>(magnitude, sign); }
	static jint getExponent(jfloat f) { return call_static_method<"getExponent", jint>(f); }
	static jint getExponent(jdouble d) { return call_static_method<"getExponent", jint>(d); }
	static jdouble nextAfter(jdouble start, jdouble p2) { return call_static_method<"nextAfter", jdouble>(start, p2); }
	static jfloat nextAfter(jfloat start, jdouble direction) { return call_static_method<"nextAfter", jfloat>(start, direction); }
	static jdouble nextUp(jdouble d) { return call_static_method<"nextUp", jdouble>(d); }
	static jfloat nextUp(jfloat f) { return call_static_method<"nextUp", jfloat>(f); }
	static jdouble scalb(jdouble d, jint p2) { return call_static_method<"scalb", jdouble>(d, p2); }
	static jfloat scalb(jfloat d, jint scaleFactor) { return call_static_method<"scalb", jfloat>(d, scaleFactor); }

protected:

	StrictMath(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_LANG_STRICTMATH
