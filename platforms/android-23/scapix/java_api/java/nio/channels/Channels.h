// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_CHANNELS_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_CHANNELS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::channels { class Channels; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::channels::Channels>
{
	static constexpr fixed_string class_name = "java/nio/channels/Channels";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_CHANNELS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_CHANNELS)
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_CHANNELS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/io/Reader.h>
#include <scapix/java_api/java/io/Writer.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/nio/channels/ReadableByteChannel.h>
#include <scapix/java_api/java/nio/channels/WritableByteChannel.h>
#include <scapix/java_api/java/nio/charset/CharsetDecoder.h>
#include <scapix/java_api/java/nio/charset/CharsetEncoder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::channels::Channels : public jni::object_base<"java/nio/channels/Channels",
	java::lang::Object>
{
public:

	static jni::ref<java::io::InputStream> newInputStream(jni::ref<java::nio::channels::ReadableByteChannel> channel) { return call_static_method<"newInputStream", jni::ref<java::io::InputStream>>(channel); }
	static jni::ref<java::io::OutputStream> newOutputStream(jni::ref<java::nio::channels::WritableByteChannel> channel) { return call_static_method<"newOutputStream", jni::ref<java::io::OutputStream>>(channel); }
	static jni::ref<java::nio::channels::ReadableByteChannel> newChannel(jni::ref<java::io::InputStream> inputStream) { return call_static_method<"newChannel", jni::ref<java::nio::channels::ReadableByteChannel>>(inputStream); }
	static jni::ref<java::nio::channels::WritableByteChannel> newChannel(jni::ref<java::io::OutputStream> outputStream) { return call_static_method<"newChannel", jni::ref<java::nio::channels::WritableByteChannel>>(outputStream); }
	static jni::ref<java::io::Reader> newReader(jni::ref<java::nio::channels::ReadableByteChannel> channel, jni::ref<java::nio::charset::CharsetDecoder> decoder, jint minBufferCapacity) { return call_static_method<"newReader", jni::ref<java::io::Reader>>(channel, decoder, minBufferCapacity); }
	static jni::ref<java::io::Reader> newReader(jni::ref<java::nio::channels::ReadableByteChannel> channel, jni::ref<java::lang::String> charsetName) { return call_static_method<"newReader", jni::ref<java::io::Reader>>(channel, charsetName); }
	static jni::ref<java::io::Writer> newWriter(jni::ref<java::nio::channels::WritableByteChannel> channel, jni::ref<java::nio::charset::CharsetEncoder> encoder, jint minBufferCapacity) { return call_static_method<"newWriter", jni::ref<java::io::Writer>>(channel, encoder, minBufferCapacity); }
	static jni::ref<java::io::Writer> newWriter(jni::ref<java::nio::channels::WritableByteChannel> channel, jni::ref<java::lang::String> charsetName) { return call_static_method<"newWriter", jni::ref<java::io::Writer>>(channel, charsetName); }

protected:

	Channels(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_CHANNELS
