// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/nio/channels/Channel.h>
#include <scapix/java_api/java/nio/channels/InterruptibleChannel.h>

#ifndef SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ABSTRACTINTERRUPTIBLECHANNEL_FWD
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ABSTRACTINTERRUPTIBLECHANNEL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::java::nio::channels::spi { class AbstractInterruptibleChannel; }

template<>
struct scapix::jni::object_traits<scapix::java_api::java::nio::channels::spi::AbstractInterruptibleChannel>
{
	static constexpr fixed_string class_name = "java/nio/channels/spi/AbstractInterruptibleChannel";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::java::nio::channels::Channel, scapix::java_api::java::nio::channels::InterruptibleChannel>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ABSTRACTINTERRUPTIBLECHANNEL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ABSTRACTINTERRUPTIBLECHANNEL)
#define SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ABSTRACTINTERRUPTIBLECHANNEL

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class java::nio::channels::spi::AbstractInterruptibleChannel : public jni::object_base<"java/nio/channels/spi/AbstractInterruptibleChannel",
	java::lang::Object,
	java::nio::channels::Channel,
	java::nio::channels::InterruptibleChannel>
{
public:

	jboolean isOpen() { return call_method<"isOpen", jboolean>(); }
	void close() { return call_method<"close", void>(); }

protected:

	AbstractInterruptibleChannel(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_JAVA_NIO_CHANNELS_SPI_ABSTRACTINTERRUPTIBLECHANNEL
