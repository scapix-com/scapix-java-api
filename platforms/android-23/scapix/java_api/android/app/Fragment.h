// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/content/ComponentCallbacks2.h>
#include <scapix/java_api/android/view/View_OnCreateContextMenuListener.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_FRAGMENT_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class Fragment; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::Fragment>
{
	static constexpr fixed_string class_name = "android/app/Fragment";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::content::ComponentCallbacks2, scapix::java_api::android::view::View_OnCreateContextMenuListener>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_FRAGMENT)
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/animation/Animator.h>
#include <scapix/java_api/android/app/Activity.h>
#include <scapix/java_api/android/app/Fragment_SavedState.h>
#include <scapix/java_api/android/app/FragmentManager.h>
#include <scapix/java_api/android/app/LoaderManager.h>
#include <scapix/java_api/android/app/SharedElementCallback.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/content/res/Configuration.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/transition/Transition.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/ContextMenu.h>
#include <scapix/java_api/android/view/ContextMenu_ContextMenuInfo.h>
#include <scapix/java_api/android/view/LayoutInflater.h>
#include <scapix/java_api/android/view/Menu.h>
#include <scapix/java_api/android/view/MenuInflater.h>
#include <scapix/java_api/android/view/MenuItem.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/ViewGroup.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/android/app/Fragment_InstantiationException.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::Fragment : public jni::object_base<"android/app/Fragment",
	java::lang::Object,
	android::content::ComponentCallbacks2,
	android::view::View_OnCreateContextMenuListener>
{
public:

	using InstantiationException = Fragment_InstantiationException;
	using SavedState = Fragment_SavedState;

	static jni::ref<android::app::Fragment> new_object() { return base_::new_object(); }
	static jni::ref<android::app::Fragment> instantiate(jni::ref<android::content::Context> context, jni::ref<java::lang::String> fname) { return call_static_method<"instantiate", jni::ref<android::app::Fragment>>(context, fname); }
	static jni::ref<android::app::Fragment> instantiate(jni::ref<android::content::Context> context, jni::ref<java::lang::String> fname, jni::ref<android::os::Bundle> args) { return call_static_method<"instantiate", jni::ref<android::app::Fragment>>(context, fname, args); }
	jboolean equals(jni::ref<java::lang::Object> o) { return call_method<"equals", jboolean>(o); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint getId() { return call_method<"getId", jint>(); }
	jni::ref<java::lang::String> getTag() { return call_method<"getTag", jni::ref<java::lang::String>>(); }
	void setArguments(jni::ref<android::os::Bundle> args) { return call_method<"setArguments", void>(args); }
	jni::ref<android::os::Bundle> getArguments() { return call_method<"getArguments", jni::ref<android::os::Bundle>>(); }
	void setInitialSavedState(jni::ref<android::app::Fragment_SavedState> state) { return call_method<"setInitialSavedState", void>(state); }
	void setTargetFragment(jni::ref<android::app::Fragment> fragment, jint requestCode) { return call_method<"setTargetFragment", void>(fragment, requestCode); }
	jni::ref<android::app::Fragment> getTargetFragment() { return call_method<"getTargetFragment", jni::ref<android::app::Fragment>>(); }
	jint getTargetRequestCode() { return call_method<"getTargetRequestCode", jint>(); }
	jni::ref<android::content::Context> getContext() { return call_method<"getContext", jni::ref<android::content::Context>>(); }
	jni::ref<android::app::Activity> getActivity() { return call_method<"getActivity", jni::ref<android::app::Activity>>(); }
	jni::ref<java::lang::Object> getHost() { return call_method<"getHost", jni::ref<java::lang::Object>>(); }
	jni::ref<android::content::res::Resources> getResources() { return call_method<"getResources", jni::ref<android::content::res::Resources>>(); }
	jni::ref<java::lang::CharSequence> getText(jint resId) { return call_method<"getText", jni::ref<java::lang::CharSequence>>(resId); }
	jni::ref<java::lang::String> getString(jint resId) { return call_method<"getString", jni::ref<java::lang::String>>(resId); }
	jni::ref<java::lang::String> getString(jint resId, jni::ref<jni::array<java::lang::Object>> formatArgs) { return call_method<"getString", jni::ref<java::lang::String>>(resId, formatArgs); }
	jni::ref<android::app::FragmentManager> getFragmentManager() { return call_method<"getFragmentManager", jni::ref<android::app::FragmentManager>>(); }
	jni::ref<android::app::FragmentManager> getChildFragmentManager() { return call_method<"getChildFragmentManager", jni::ref<android::app::FragmentManager>>(); }
	jni::ref<android::app::Fragment> getParentFragment() { return call_method<"getParentFragment", jni::ref<android::app::Fragment>>(); }
	jboolean isAdded() { return call_method<"isAdded", jboolean>(); }
	jboolean isDetached() { return call_method<"isDetached", jboolean>(); }
	jboolean isRemoving() { return call_method<"isRemoving", jboolean>(); }
	jboolean isInLayout() { return call_method<"isInLayout", jboolean>(); }
	jboolean isResumed() { return call_method<"isResumed", jboolean>(); }
	jboolean isVisible() { return call_method<"isVisible", jboolean>(); }
	jboolean isHidden() { return call_method<"isHidden", jboolean>(); }
	void onHiddenChanged(jboolean hidden) { return call_method<"onHiddenChanged", void>(hidden); }
	void setRetainInstance(jboolean retain) { return call_method<"setRetainInstance", void>(retain); }
	jboolean getRetainInstance() { return call_method<"getRetainInstance", jboolean>(); }
	void setHasOptionsMenu(jboolean hasMenu) { return call_method<"setHasOptionsMenu", void>(hasMenu); }
	void setMenuVisibility(jboolean menuVisible) { return call_method<"setMenuVisibility", void>(menuVisible); }
	void setUserVisibleHint(jboolean isVisibleToUser) { return call_method<"setUserVisibleHint", void>(isVisibleToUser); }
	jboolean getUserVisibleHint() { return call_method<"getUserVisibleHint", jboolean>(); }
	jni::ref<android::app::LoaderManager> getLoaderManager() { return call_method<"getLoaderManager", jni::ref<android::app::LoaderManager>>(); }
	void startActivity(jni::ref<android::content::Intent> intent) { return call_method<"startActivity", void>(intent); }
	void startActivity(jni::ref<android::content::Intent> intent, jni::ref<android::os::Bundle> options) { return call_method<"startActivity", void>(intent, options); }
	void startActivityForResult(jni::ref<android::content::Intent> intent, jint requestCode) { return call_method<"startActivityForResult", void>(intent, requestCode); }
	void startActivityForResult(jni::ref<android::content::Intent> intent, jint requestCode, jni::ref<android::os::Bundle> options) { return call_method<"startActivityForResult", void>(intent, requestCode, options); }
	void onActivityResult(jint requestCode, jint resultCode, jni::ref<android::content::Intent> data) { return call_method<"onActivityResult", void>(requestCode, resultCode, data); }
	void requestPermissions(jni::ref<jni::array<java::lang::String>> permissions, jint requestCode) { return call_method<"requestPermissions", void>(permissions, requestCode); }
	void onRequestPermissionsResult(jint requestCode, jni::ref<jni::array<java::lang::String>> permissions, jni::ref<jni::array<jint>> grantResults) { return call_method<"onRequestPermissionsResult", void>(requestCode, permissions, grantResults); }
	jboolean shouldShowRequestPermissionRationale(jni::ref<java::lang::String> permission) { return call_method<"shouldShowRequestPermissionRationale", jboolean>(permission); }
	void onInflate(jni::ref<android::util::AttributeSet> attrs, jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onInflate", void>(attrs, savedInstanceState); }
	void onInflate(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onInflate", void>(context, attrs, savedInstanceState); }
	void onInflate(jni::ref<android::app::Activity> activity, jni::ref<android::util::AttributeSet> attrs, jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onInflate", void>(activity, attrs, savedInstanceState); }
	void onAttach(jni::ref<android::content::Context> context) { return call_method<"onAttach", void>(context); }
	void onAttach(jni::ref<android::app::Activity> activity) { return call_method<"onAttach", void>(activity); }
	jni::ref<android::animation::Animator> onCreateAnimator(jint transit, jboolean enter, jint nextAnim) { return call_method<"onCreateAnimator", jni::ref<android::animation::Animator>>(transit, enter, nextAnim); }
	void onCreate(jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onCreate", void>(savedInstanceState); }
	jni::ref<android::view::View> onCreateView(jni::ref<android::view::LayoutInflater> inflater, jni::ref<android::view::ViewGroup> container, jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onCreateView", jni::ref<android::view::View>>(inflater, container, savedInstanceState); }
	void onViewCreated(jni::ref<android::view::View> view, jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onViewCreated", void>(view, savedInstanceState); }
	jni::ref<android::view::View> getView() { return call_method<"getView", jni::ref<android::view::View>>(); }
	void onActivityCreated(jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onActivityCreated", void>(savedInstanceState); }
	void onViewStateRestored(jni::ref<android::os::Bundle> savedInstanceState) { return call_method<"onViewStateRestored", void>(savedInstanceState); }
	void onStart() { return call_method<"onStart", void>(); }
	void onResume() { return call_method<"onResume", void>(); }
	void onSaveInstanceState(jni::ref<android::os::Bundle> outState) { return call_method<"onSaveInstanceState", void>(outState); }
	void onConfigurationChanged(jni::ref<android::content::res::Configuration> newConfig) { return call_method<"onConfigurationChanged", void>(newConfig); }
	void onPause() { return call_method<"onPause", void>(); }
	void onStop() { return call_method<"onStop", void>(); }
	void onLowMemory() { return call_method<"onLowMemory", void>(); }
	void onTrimMemory(jint level) { return call_method<"onTrimMemory", void>(level); }
	void onDestroyView() { return call_method<"onDestroyView", void>(); }
	void onDestroy() { return call_method<"onDestroy", void>(); }
	void onDetach() { return call_method<"onDetach", void>(); }
	void onCreateOptionsMenu(jni::ref<android::view::Menu> menu, jni::ref<android::view::MenuInflater> inflater) { return call_method<"onCreateOptionsMenu", void>(menu, inflater); }
	void onPrepareOptionsMenu(jni::ref<android::view::Menu> menu) { return call_method<"onPrepareOptionsMenu", void>(menu); }
	void onDestroyOptionsMenu() { return call_method<"onDestroyOptionsMenu", void>(); }
	jboolean onOptionsItemSelected(jni::ref<android::view::MenuItem> item) { return call_method<"onOptionsItemSelected", jboolean>(item); }
	void onOptionsMenuClosed(jni::ref<android::view::Menu> menu) { return call_method<"onOptionsMenuClosed", void>(menu); }
	void onCreateContextMenu(jni::ref<android::view::ContextMenu> menu, jni::ref<android::view::View> v, jni::ref<android::view::ContextMenu_ContextMenuInfo> menuInfo) { return call_method<"onCreateContextMenu", void>(menu, v, menuInfo); }
	void registerForContextMenu(jni::ref<android::view::View> view) { return call_method<"registerForContextMenu", void>(view); }
	void unregisterForContextMenu(jni::ref<android::view::View> view) { return call_method<"unregisterForContextMenu", void>(view); }
	jboolean onContextItemSelected(jni::ref<android::view::MenuItem> item) { return call_method<"onContextItemSelected", jboolean>(item); }
	void setEnterSharedElementCallback(jni::ref<android::app::SharedElementCallback> callback) { return call_method<"setEnterSharedElementCallback", void>(callback); }
	void setExitSharedElementCallback(jni::ref<android::app::SharedElementCallback> callback) { return call_method<"setExitSharedElementCallback", void>(callback); }
	void setEnterTransition(jni::ref<android::transition::Transition> transition) { return call_method<"setEnterTransition", void>(transition); }
	jni::ref<android::transition::Transition> getEnterTransition() { return call_method<"getEnterTransition", jni::ref<android::transition::Transition>>(); }
	void setReturnTransition(jni::ref<android::transition::Transition> transition) { return call_method<"setReturnTransition", void>(transition); }
	jni::ref<android::transition::Transition> getReturnTransition() { return call_method<"getReturnTransition", jni::ref<android::transition::Transition>>(); }
	void setExitTransition(jni::ref<android::transition::Transition> transition) { return call_method<"setExitTransition", void>(transition); }
	jni::ref<android::transition::Transition> getExitTransition() { return call_method<"getExitTransition", jni::ref<android::transition::Transition>>(); }
	void setReenterTransition(jni::ref<android::transition::Transition> transition) { return call_method<"setReenterTransition", void>(transition); }
	jni::ref<android::transition::Transition> getReenterTransition() { return call_method<"getReenterTransition", jni::ref<android::transition::Transition>>(); }
	void setSharedElementEnterTransition(jni::ref<android::transition::Transition> transition) { return call_method<"setSharedElementEnterTransition", void>(transition); }
	jni::ref<android::transition::Transition> getSharedElementEnterTransition() { return call_method<"getSharedElementEnterTransition", jni::ref<android::transition::Transition>>(); }
	void setSharedElementReturnTransition(jni::ref<android::transition::Transition> transition) { return call_method<"setSharedElementReturnTransition", void>(transition); }
	jni::ref<android::transition::Transition> getSharedElementReturnTransition() { return call_method<"getSharedElementReturnTransition", jni::ref<android::transition::Transition>>(); }
	void setAllowEnterTransitionOverlap(jboolean allow) { return call_method<"setAllowEnterTransitionOverlap", void>(allow); }
	jboolean getAllowEnterTransitionOverlap() { return call_method<"getAllowEnterTransitionOverlap", jboolean>(); }
	void setAllowReturnTransitionOverlap(jboolean allow) { return call_method<"setAllowReturnTransitionOverlap", void>(allow); }
	jboolean getAllowReturnTransitionOverlap() { return call_method<"getAllowReturnTransitionOverlap", jboolean>(); }
	void dump(jni::ref<java::lang::String> prefix, jni::ref<java::io::FileDescriptor> fd, jni::ref<java::io::PrintWriter> writer, jni::ref<jni::array<java::lang::String>> args) { return call_method<"dump", void>(prefix, fd, writer, args); }

protected:

	Fragment(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENT
