// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/app/FragmentContainer.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTHOSTCALLBACK_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTHOSTCALLBACK_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class FragmentHostCallback; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::FragmentHostCallback>
{
	static constexpr fixed_string class_name = "android/app/FragmentHostCallback";
	using base_classes = std::tuple<scapix::java_api::android::app::FragmentContainer>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTHOSTCALLBACK_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTHOSTCALLBACK)
#define SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTHOSTCALLBACK

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/Fragment.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/os/Bundle.h>
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/view/LayoutInflater.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/PrintWriter.h>
#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::FragmentHostCallback : public jni::object_base<"android/app/FragmentHostCallback",
	android::app::FragmentContainer>
{
public:

	static jni::ref<android::app::FragmentHostCallback> new_object(jni::ref<android::content::Context> context, jni::ref<android::os::Handler> handler, jint windowAnimations) { return base_::new_object(context, handler, windowAnimations); }
	void onDump(jni::ref<java::lang::String> prefix, jni::ref<java::io::FileDescriptor> fd, jni::ref<java::io::PrintWriter> writer, jni::ref<jni::array<java::lang::String>> args) { return call_method<"onDump", void>(prefix, fd, writer, args); }
	jboolean onShouldSaveFragmentState(jni::ref<android::app::Fragment> fragment) { return call_method<"onShouldSaveFragmentState", jboolean>(fragment); }
	jni::ref<android::view::LayoutInflater> onGetLayoutInflater() { return call_method<"onGetLayoutInflater", jni::ref<android::view::LayoutInflater>>(); }
	jboolean onUseFragmentManagerInflaterFactory() { return call_method<"onUseFragmentManagerInflaterFactory", jboolean>(); }
	jni::ref<java::lang::Object> onGetHost() { return call_method<"onGetHost", jni::ref<java::lang::Object>>(); }
	void onInvalidateOptionsMenu() { return call_method<"onInvalidateOptionsMenu", void>(); }
	void onStartActivityFromFragment(jni::ref<android::app::Fragment> fragment, jni::ref<android::content::Intent> intent, jint requestCode, jni::ref<android::os::Bundle> options) { return call_method<"onStartActivityFromFragment", void>(fragment, intent, requestCode, options); }
	void onRequestPermissionsFromFragment(jni::ref<android::app::Fragment> fragment, jni::ref<jni::array<java::lang::String>> permissions, jint requestCode) { return call_method<"onRequestPermissionsFromFragment", void>(fragment, permissions, requestCode); }
	jboolean onHasWindowAnimations() { return call_method<"onHasWindowAnimations", jboolean>(); }
	jint onGetWindowAnimations() { return call_method<"onGetWindowAnimations", jint>(); }
	void onAttachFragment(jni::ref<android::app::Fragment> fragment) { return call_method<"onAttachFragment", void>(fragment); }
	jni::ref<android::view::View> onFindViewById(jint id) { return call_method<"onFindViewById", jni::ref<android::view::View>>(id); }
	jboolean onHasView() { return call_method<"onHasView", jboolean>(); }

protected:

	FragmentHostCallback(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_FRAGMENTHOSTCALLBACK
