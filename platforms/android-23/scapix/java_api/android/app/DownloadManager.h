// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_APP_DOWNLOADMANAGER_FWD
#define SCAPIX_JAVA_API_ANDROID_APP_DOWNLOADMANAGER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::app { class DownloadManager; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::app::DownloadManager>
{
	static constexpr fixed_string class_name = "android/app/DownloadManager";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_DOWNLOADMANAGER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_APP_DOWNLOADMANAGER)
#define SCAPIX_JAVA_API_ANDROID_APP_DOWNLOADMANAGER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/app/DownloadManager_Query.h>
#include <scapix/java_api/android/app/DownloadManager_Request.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/net/Uri.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/lang/Long.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::app::DownloadManager : public jni::object_base<"android/app/DownloadManager",
	java::lang::Object>
{
public:

	using Query = DownloadManager_Query;
	using Request = DownloadManager_Request;

	static jni::ref<java::lang::String> ACTION_DOWNLOAD_COMPLETE() { return get_static_field<"ACTION_DOWNLOAD_COMPLETE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_NOTIFICATION_CLICKED() { return get_static_field<"ACTION_NOTIFICATION_CLICKED", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> ACTION_VIEW_DOWNLOADS() { return get_static_field<"ACTION_VIEW_DOWNLOADS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_BYTES_DOWNLOADED_SO_FAR() { return get_static_field<"COLUMN_BYTES_DOWNLOADED_SO_FAR", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_DESCRIPTION() { return get_static_field<"COLUMN_DESCRIPTION", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_ID() { return get_static_field<"COLUMN_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_LAST_MODIFIED_TIMESTAMP() { return get_static_field<"COLUMN_LAST_MODIFIED_TIMESTAMP", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_LOCAL_FILENAME() { return get_static_field<"COLUMN_LOCAL_FILENAME", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_LOCAL_URI() { return get_static_field<"COLUMN_LOCAL_URI", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_MEDIAPROVIDER_URI() { return get_static_field<"COLUMN_MEDIAPROVIDER_URI", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_MEDIA_TYPE() { return get_static_field<"COLUMN_MEDIA_TYPE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_REASON() { return get_static_field<"COLUMN_REASON", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_STATUS() { return get_static_field<"COLUMN_STATUS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_TITLE() { return get_static_field<"COLUMN_TITLE", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_TOTAL_SIZE_BYTES() { return get_static_field<"COLUMN_TOTAL_SIZE_BYTES", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> COLUMN_URI() { return get_static_field<"COLUMN_URI", jni::ref<java::lang::String>>(); }
	static jint ERROR_CANNOT_RESUME() { return get_static_field<"ERROR_CANNOT_RESUME", jint>(); }
	static jint ERROR_DEVICE_NOT_FOUND() { return get_static_field<"ERROR_DEVICE_NOT_FOUND", jint>(); }
	static jint ERROR_FILE_ALREADY_EXISTS() { return get_static_field<"ERROR_FILE_ALREADY_EXISTS", jint>(); }
	static jint ERROR_FILE_ERROR() { return get_static_field<"ERROR_FILE_ERROR", jint>(); }
	static jint ERROR_HTTP_DATA_ERROR() { return get_static_field<"ERROR_HTTP_DATA_ERROR", jint>(); }
	static jint ERROR_INSUFFICIENT_SPACE() { return get_static_field<"ERROR_INSUFFICIENT_SPACE", jint>(); }
	static jint ERROR_TOO_MANY_REDIRECTS() { return get_static_field<"ERROR_TOO_MANY_REDIRECTS", jint>(); }
	static jint ERROR_UNHANDLED_HTTP_CODE() { return get_static_field<"ERROR_UNHANDLED_HTTP_CODE", jint>(); }
	static jint ERROR_UNKNOWN() { return get_static_field<"ERROR_UNKNOWN", jint>(); }
	static jni::ref<java::lang::String> EXTRA_DOWNLOAD_ID() { return get_static_field<"EXTRA_DOWNLOAD_ID", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS() { return get_static_field<"EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> INTENT_EXTRAS_SORT_BY_SIZE() { return get_static_field<"INTENT_EXTRAS_SORT_BY_SIZE", jni::ref<java::lang::String>>(); }
	static jint PAUSED_QUEUED_FOR_WIFI() { return get_static_field<"PAUSED_QUEUED_FOR_WIFI", jint>(); }
	static jint PAUSED_UNKNOWN() { return get_static_field<"PAUSED_UNKNOWN", jint>(); }
	static jint PAUSED_WAITING_FOR_NETWORK() { return get_static_field<"PAUSED_WAITING_FOR_NETWORK", jint>(); }
	static jint PAUSED_WAITING_TO_RETRY() { return get_static_field<"PAUSED_WAITING_TO_RETRY", jint>(); }
	static jint STATUS_FAILED() { return get_static_field<"STATUS_FAILED", jint>(); }
	static jint STATUS_PAUSED() { return get_static_field<"STATUS_PAUSED", jint>(); }
	static jint STATUS_PENDING() { return get_static_field<"STATUS_PENDING", jint>(); }
	static jint STATUS_RUNNING() { return get_static_field<"STATUS_RUNNING", jint>(); }
	static jint STATUS_SUCCESSFUL() { return get_static_field<"STATUS_SUCCESSFUL", jint>(); }

	jlong enqueue(jni::ref<android::app::DownloadManager_Request> request) { return call_method<"enqueue", jlong>(request); }
	jint remove(jni::ref<jni::array<jlong>> ids) { return call_method<"remove", jint>(ids); }
	jni::ref<android::database::Cursor> query(jni::ref<android::app::DownloadManager_Query> query) { return call_method<"query", jni::ref<android::database::Cursor>>(query); }
	jni::ref<android::os::ParcelFileDescriptor> openDownloadedFile(jlong id) { return call_method<"openDownloadedFile", jni::ref<android::os::ParcelFileDescriptor>>(id); }
	jni::ref<android::net::Uri> getUriForDownloadedFile(jlong id) { return call_method<"getUriForDownloadedFile", jni::ref<android::net::Uri>>(id); }
	jni::ref<java::lang::String> getMimeTypeForDownloadedFile(jlong id) { return call_method<"getMimeTypeForDownloadedFile", jni::ref<java::lang::String>>(id); }
	static jni::ref<java::lang::Long> getMaxBytesOverMobile(jni::ref<android::content::Context> context) { return call_static_method<"getMaxBytesOverMobile", jni::ref<java::lang::Long>>(context); }
	static jni::ref<java::lang::Long> getRecommendedMaxBytesOverMobile(jni::ref<android::content::Context> context) { return call_static_method<"getRecommendedMaxBytesOverMobile", jni::ref<java::lang::Long>>(context); }
	jlong addCompletedDownload(jni::ref<java::lang::String> title, jni::ref<java::lang::String> description, jboolean isMediaScannerScannable, jni::ref<java::lang::String> mimeType, jni::ref<java::lang::String> path, jlong length, jboolean p7) { return call_method<"addCompletedDownload", jlong>(title, description, isMediaScannerScannable, mimeType, path, length, p7); }

protected:

	DownloadManager(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_APP_DOWNLOADMANAGER
