// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>
#include <scapix/java_api/android/os/Parcelable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDESCRIPTION_FWD
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDESCRIPTION_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::content { class ClipDescription; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::content::ClipDescription>
{
	static constexpr fixed_string class_name = "android/content/ClipDescription";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object, scapix::java_api::android::os::Parcelable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDESCRIPTION_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDESCRIPTION)
#define SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDESCRIPTION

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/Parcelable_Creator.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::content::ClipDescription : public jni::object_base<"android/content/ClipDescription",
	java::lang::Object,
	android::os::Parcelable>
{
public:

	static jni::ref<android::os::Parcelable_Creator> CREATOR() { return get_static_field<"CREATOR", jni::ref<android::os::Parcelable_Creator>>(); }
	static jni::ref<java::lang::String> MIMETYPE_TEXT_HTML() { return get_static_field<"MIMETYPE_TEXT_HTML", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MIMETYPE_TEXT_INTENT() { return get_static_field<"MIMETYPE_TEXT_INTENT", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MIMETYPE_TEXT_PLAIN() { return get_static_field<"MIMETYPE_TEXT_PLAIN", jni::ref<java::lang::String>>(); }
	static jni::ref<java::lang::String> MIMETYPE_TEXT_URILIST() { return get_static_field<"MIMETYPE_TEXT_URILIST", jni::ref<java::lang::String>>(); }

	static jni::ref<android::content::ClipDescription> new_object(jni::ref<java::lang::CharSequence> label, jni::ref<jni::array<java::lang::String>> mimeTypes) { return base_::new_object(label, mimeTypes); }
	static jni::ref<android::content::ClipDescription> new_object(jni::ref<android::content::ClipDescription> o) { return base_::new_object(o); }
	static jboolean compareMimeTypes(jni::ref<java::lang::String> concreteType, jni::ref<java::lang::String> desiredType) { return call_static_method<"compareMimeTypes", jboolean>(concreteType, desiredType); }
	jni::ref<java::lang::CharSequence> getLabel() { return call_method<"getLabel", jni::ref<java::lang::CharSequence>>(); }
	jboolean hasMimeType(jni::ref<java::lang::String> mimeType) { return call_method<"hasMimeType", jboolean>(mimeType); }
	jni::ref<jni::array<java::lang::String>> filterMimeTypes(jni::ref<java::lang::String> mimeType) { return call_method<"filterMimeTypes", jni::ref<jni::array<java::lang::String>>>(mimeType); }
	jint getMimeTypeCount() { return call_method<"getMimeTypeCount", jint>(); }
	jni::ref<java::lang::String> getMimeType(jint index) { return call_method<"getMimeType", jni::ref<java::lang::String>>(index); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jint describeContents() { return call_method<"describeContents", jint>(); }
	void writeToParcel(jni::ref<android::os::Parcel> dest, jint flags) { return call_method<"writeToParcel", void>(dest, flags); }

protected:

	ClipDescription(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_CONTENT_CLIPDESCRIPTION
