// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYRECORD_FWD
#define SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYRECORD_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::view::accessibility { class AccessibilityRecord; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::view::accessibility::AccessibilityRecord>
{
	static constexpr fixed_string class_name = "android/view/accessibility/AccessibilityRecord";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYRECORD_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYRECORD)
#define SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYRECORD

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/view/accessibility/AccessibilityNodeInfo.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::view::accessibility::AccessibilityRecord : public jni::object_base<"android/view/accessibility/AccessibilityRecord",
	java::lang::Object>
{
public:

	void setSource(jni::ref<android::view::View> source) { return call_method<"setSource", void>(source); }
	void setSource(jni::ref<android::view::View> root, jint virtualDescendantId) { return call_method<"setSource", void>(root, virtualDescendantId); }
	jni::ref<android::view::accessibility::AccessibilityNodeInfo> getSource() { return call_method<"getSource", jni::ref<android::view::accessibility::AccessibilityNodeInfo>>(); }
	jint getWindowId() { return call_method<"getWindowId", jint>(); }
	jboolean isChecked() { return call_method<"isChecked", jboolean>(); }
	void setChecked(jboolean isChecked) { return call_method<"setChecked", void>(isChecked); }
	jboolean isEnabled() { return call_method<"isEnabled", jboolean>(); }
	void setEnabled(jboolean isEnabled) { return call_method<"setEnabled", void>(isEnabled); }
	jboolean isPassword() { return call_method<"isPassword", jboolean>(); }
	void setPassword(jboolean isPassword) { return call_method<"setPassword", void>(isPassword); }
	jboolean isFullScreen() { return call_method<"isFullScreen", jboolean>(); }
	void setFullScreen(jboolean isFullScreen) { return call_method<"setFullScreen", void>(isFullScreen); }
	jboolean isScrollable() { return call_method<"isScrollable", jboolean>(); }
	void setScrollable(jboolean scrollable) { return call_method<"setScrollable", void>(scrollable); }
	jint getItemCount() { return call_method<"getItemCount", jint>(); }
	void setItemCount(jint itemCount) { return call_method<"setItemCount", void>(itemCount); }
	jint getCurrentItemIndex() { return call_method<"getCurrentItemIndex", jint>(); }
	void setCurrentItemIndex(jint currentItemIndex) { return call_method<"setCurrentItemIndex", void>(currentItemIndex); }
	jint getFromIndex() { return call_method<"getFromIndex", jint>(); }
	void setFromIndex(jint fromIndex) { return call_method<"setFromIndex", void>(fromIndex); }
	jint getToIndex() { return call_method<"getToIndex", jint>(); }
	void setToIndex(jint toIndex) { return call_method<"setToIndex", void>(toIndex); }
	jint getScrollX() { return call_method<"getScrollX", jint>(); }
	void setScrollX(jint scrollX) { return call_method<"setScrollX", void>(scrollX); }
	jint getScrollY() { return call_method<"getScrollY", jint>(); }
	void setScrollY(jint scrollY) { return call_method<"setScrollY", void>(scrollY); }
	jint getMaxScrollX() { return call_method<"getMaxScrollX", jint>(); }
	void setMaxScrollX(jint maxScrollX) { return call_method<"setMaxScrollX", void>(maxScrollX); }
	jint getMaxScrollY() { return call_method<"getMaxScrollY", jint>(); }
	void setMaxScrollY(jint maxScrollY) { return call_method<"setMaxScrollY", void>(maxScrollY); }
	jint getAddedCount() { return call_method<"getAddedCount", jint>(); }
	void setAddedCount(jint addedCount) { return call_method<"setAddedCount", void>(addedCount); }
	jint getRemovedCount() { return call_method<"getRemovedCount", jint>(); }
	void setRemovedCount(jint removedCount) { return call_method<"setRemovedCount", void>(removedCount); }
	jni::ref<java::lang::CharSequence> getClassName() { return call_method<"getClassName", jni::ref<java::lang::CharSequence>>(); }
	void setClassName(jni::ref<java::lang::CharSequence> className) { return call_method<"setClassName", void>(className); }
	jni::ref<java::util::List> getText() { return call_method<"getText", jni::ref<java::util::List>>(); }
	jni::ref<java::lang::CharSequence> getBeforeText() { return call_method<"getBeforeText", jni::ref<java::lang::CharSequence>>(); }
	void setBeforeText(jni::ref<java::lang::CharSequence> beforeText) { return call_method<"setBeforeText", void>(beforeText); }
	jni::ref<java::lang::CharSequence> getContentDescription() { return call_method<"getContentDescription", jni::ref<java::lang::CharSequence>>(); }
	void setContentDescription(jni::ref<java::lang::CharSequence> contentDescription) { return call_method<"setContentDescription", void>(contentDescription); }
	jni::ref<android::os::Parcelable> getParcelableData() { return call_method<"getParcelableData", jni::ref<android::os::Parcelable>>(); }
	void setParcelableData(jni::ref<android::os::Parcelable> parcelableData) { return call_method<"setParcelableData", void>(parcelableData); }
	static jni::ref<android::view::accessibility::AccessibilityRecord> obtain(jni::ref<android::view::accessibility::AccessibilityRecord> record) { return call_static_method<"obtain", jni::ref<android::view::accessibility::AccessibilityRecord>>(record); }
	static jni::ref<android::view::accessibility::AccessibilityRecord> obtain() { return call_static_method<"obtain", jni::ref<android::view::accessibility::AccessibilityRecord>>(); }
	void recycle() { return call_method<"recycle", void>(); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }

protected:

	AccessibilityRecord(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_VIEW_ACCESSIBILITY_ACCESSIBILITYRECORD
