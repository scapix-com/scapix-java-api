// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELECOM_CALL_FWD
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CALL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telecom { class Call; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telecom::Call>
{
	static constexpr fixed_string class_name = "android/telecom/Call";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CALL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELECOM_CALL)
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CALL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/os/Handler.h>
#include <scapix/java_api/android/telecom/Call_Callback.h>
#include <scapix/java_api/android/telecom/Call_Details.h>
#include <scapix/java_api/android/telecom/InCallService_VideoCall.h>
#include <scapix/java_api/android/telecom/PhoneAccountHandle.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/List.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telecom::Call : public jni::object_base<"android/telecom/Call",
	java::lang::Object>
{
public:

	using Callback = Call_Callback;
	using Details = Call_Details;

	static jni::ref<java::lang::String> AVAILABLE_PHONE_ACCOUNTS() { return get_static_field<"AVAILABLE_PHONE_ACCOUNTS", jni::ref<java::lang::String>>(); }
	static jint STATE_ACTIVE() { return get_static_field<"STATE_ACTIVE", jint>(); }
	static jint STATE_CONNECTING() { return get_static_field<"STATE_CONNECTING", jint>(); }
	static jint STATE_DIALING() { return get_static_field<"STATE_DIALING", jint>(); }
	static jint STATE_DISCONNECTED() { return get_static_field<"STATE_DISCONNECTED", jint>(); }
	static jint STATE_DISCONNECTING() { return get_static_field<"STATE_DISCONNECTING", jint>(); }
	static jint STATE_HOLDING() { return get_static_field<"STATE_HOLDING", jint>(); }
	static jint STATE_NEW() { return get_static_field<"STATE_NEW", jint>(); }
	static jint STATE_RINGING() { return get_static_field<"STATE_RINGING", jint>(); }
	static jint STATE_SELECT_PHONE_ACCOUNT() { return get_static_field<"STATE_SELECT_PHONE_ACCOUNT", jint>(); }

	jni::ref<java::lang::String> getRemainingPostDialSequence() { return call_method<"getRemainingPostDialSequence", jni::ref<java::lang::String>>(); }
	void answer(jint videoState) { return call_method<"answer", void>(videoState); }
	void reject(jboolean rejectWithMessage, jni::ref<java::lang::String> textMessage) { return call_method<"reject", void>(rejectWithMessage, textMessage); }
	void disconnect() { return call_method<"disconnect", void>(); }
	void hold() { return call_method<"hold", void>(); }
	void unhold() { return call_method<"unhold", void>(); }
	void playDtmfTone(jchar digit) { return call_method<"playDtmfTone", void>(digit); }
	void stopDtmfTone() { return call_method<"stopDtmfTone", void>(); }
	void postDialContinue(jboolean proceed) { return call_method<"postDialContinue", void>(proceed); }
	void phoneAccountSelected(jni::ref<android::telecom::PhoneAccountHandle> accountHandle, jboolean setDefault) { return call_method<"phoneAccountSelected", void>(accountHandle, setDefault); }
	void conference(jni::ref<android::telecom::Call> callToConferenceWith) { return call_method<"conference", void>(callToConferenceWith); }
	void splitFromConference() { return call_method<"splitFromConference", void>(); }
	void mergeConference() { return call_method<"mergeConference", void>(); }
	void swapConference() { return call_method<"swapConference", void>(); }
	jni::ref<android::telecom::Call> getParent() { return call_method<"getParent", jni::ref<android::telecom::Call>>(); }
	jni::ref<java::util::List> getChildren() { return call_method<"getChildren", jni::ref<java::util::List>>(); }
	jni::ref<java::util::List> getConferenceableCalls() { return call_method<"getConferenceableCalls", jni::ref<java::util::List>>(); }
	jint getState() { return call_method<"getState", jint>(); }
	jni::ref<java::util::List> getCannedTextResponses() { return call_method<"getCannedTextResponses", jni::ref<java::util::List>>(); }
	jni::ref<android::telecom::InCallService_VideoCall> getVideoCall() { return call_method<"getVideoCall", jni::ref<android::telecom::InCallService_VideoCall>>(); }
	jni::ref<android::telecom::Call_Details> getDetails() { return call_method<"getDetails", jni::ref<android::telecom::Call_Details>>(); }
	void registerCallback(jni::ref<android::telecom::Call_Callback> callback) { return call_method<"registerCallback", void>(callback); }
	void registerCallback(jni::ref<android::telecom::Call_Callback> callback, jni::ref<android::os::Handler> handler) { return call_method<"registerCallback", void>(callback, handler); }
	void unregisterCallback(jni::ref<android::telecom::Call_Callback> callback) { return call_method<"unregisterCallback", void>(callback); }

protected:

	Call(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CALL
