// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/app/Service.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TELECOM_CONNECTIONSERVICE_FWD
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CONNECTIONSERVICE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::telecom { class ConnectionService; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::telecom::ConnectionService>
{
	static constexpr fixed_string class_name = "android/telecom/ConnectionService";
	using base_classes = std::tuple<scapix::java_api::android::app::Service>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CONNECTIONSERVICE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TELECOM_CONNECTIONSERVICE)
#define SCAPIX_JAVA_API_ANDROID_TELECOM_CONNECTIONSERVICE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/os/IBinder.h>
#include <scapix/java_api/android/telecom/Conference.h>
#include <scapix/java_api/android/telecom/Connection.h>
#include <scapix/java_api/android/telecom/ConnectionRequest.h>
#include <scapix/java_api/android/telecom/PhoneAccountHandle.h>
#include <scapix/java_api/android/telecom/RemoteConference.h>
#include <scapix/java_api/android/telecom/RemoteConnection.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Collection.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::telecom::ConnectionService : public jni::object_base<"android/telecom/ConnectionService",
	android::app::Service>
{
public:

	static jni::ref<java::lang::String> SERVICE_INTERFACE() { return get_static_field<"SERVICE_INTERFACE", jni::ref<java::lang::String>>(); }

	static jni::ref<android::telecom::ConnectionService> new_object() { return base_::new_object(); }
	jni::ref<android::os::IBinder> onBind(jni::ref<android::content::Intent> intent) { return call_method<"onBind", jni::ref<android::os::IBinder>>(intent); }
	jboolean onUnbind(jni::ref<android::content::Intent> intent) { return call_method<"onUnbind", jboolean>(intent); }
	jni::ref<android::telecom::RemoteConnection> createRemoteIncomingConnection(jni::ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, jni::ref<android::telecom::ConnectionRequest> request) { return call_method<"createRemoteIncomingConnection", jni::ref<android::telecom::RemoteConnection>>(connectionManagerPhoneAccount, request); }
	jni::ref<android::telecom::RemoteConnection> createRemoteOutgoingConnection(jni::ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, jni::ref<android::telecom::ConnectionRequest> request) { return call_method<"createRemoteOutgoingConnection", jni::ref<android::telecom::RemoteConnection>>(connectionManagerPhoneAccount, request); }
	void conferenceRemoteConnections(jni::ref<android::telecom::RemoteConnection> remoteConnection1, jni::ref<android::telecom::RemoteConnection> remoteConnection2) { return call_method<"conferenceRemoteConnections", void>(remoteConnection1, remoteConnection2); }
	void addConference(jni::ref<android::telecom::Conference> conference) { return call_method<"addConference", void>(conference); }
	void addExistingConnection(jni::ref<android::telecom::PhoneAccountHandle> phoneAccountHandle, jni::ref<android::telecom::Connection> connection) { return call_method<"addExistingConnection", void>(phoneAccountHandle, connection); }
	jni::ref<java::util::Collection> getAllConnections() { return call_method<"getAllConnections", jni::ref<java::util::Collection>>(); }
	jni::ref<android::telecom::Connection> onCreateIncomingConnection(jni::ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, jni::ref<android::telecom::ConnectionRequest> request) { return call_method<"onCreateIncomingConnection", jni::ref<android::telecom::Connection>>(connectionManagerPhoneAccount, request); }
	jni::ref<android::telecom::Connection> onCreateOutgoingConnection(jni::ref<android::telecom::PhoneAccountHandle> connectionManagerPhoneAccount, jni::ref<android::telecom::ConnectionRequest> request) { return call_method<"onCreateOutgoingConnection", jni::ref<android::telecom::Connection>>(connectionManagerPhoneAccount, request); }
	void onConference(jni::ref<android::telecom::Connection> connection1, jni::ref<android::telecom::Connection> connection2) { return call_method<"onConference", void>(connection1, connection2); }
	void onRemoteConferenceAdded(jni::ref<android::telecom::RemoteConference> conference) { return call_method<"onRemoteConferenceAdded", void>(conference); }
	void onRemoteExistingConnectionAdded(jni::ref<android::telecom::RemoteConnection> connection) { return call_method<"onRemoteExistingConnectionAdded", void>(connection); }

protected:

	ConnectionService(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TELECOM_CONNECTIONSERVICE
