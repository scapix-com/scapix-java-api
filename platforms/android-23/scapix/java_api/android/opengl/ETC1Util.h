// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OPENGL_ETC1UTIL_FWD
#define SCAPIX_JAVA_API_ANDROID_OPENGL_ETC1UTIL_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::opengl { class ETC1Util; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::opengl::ETC1Util>
{
	static constexpr fixed_string class_name = "android/opengl/ETC1Util";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_ETC1UTIL_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OPENGL_ETC1UTIL)
#define SCAPIX_JAVA_API_ANDROID_OPENGL_ETC1UTIL

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/opengl/ETC1Util_ETC1Texture.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/io/OutputStream.h>
#include <scapix/java_api/java/nio/Buffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::opengl::ETC1Util : public jni::object_base<"android/opengl/ETC1Util",
	java::lang::Object>
{
public:

	using ETC1Texture = ETC1Util_ETC1Texture;

	static jni::ref<android::opengl::ETC1Util> new_object() { return base_::new_object(); }
	static void loadTexture(jint target, jint level, jint border, jint fallbackFormat, jint fallbackType, jni::ref<java::io::InputStream> input) { return call_static_method<"loadTexture", void>(target, level, border, fallbackFormat, fallbackType, input); }
	static void loadTexture(jint target, jint level, jint border, jint fallbackFormat, jint fallbackType, jni::ref<android::opengl::ETC1Util_ETC1Texture> texture) { return call_static_method<"loadTexture", void>(target, level, border, fallbackFormat, fallbackType, texture); }
	static jboolean isETC1Supported() { return call_static_method<"isETC1Supported", jboolean>(); }
	static jni::ref<android::opengl::ETC1Util_ETC1Texture> createTexture(jni::ref<java::io::InputStream> input) { return call_static_method<"createTexture", jni::ref<android::opengl::ETC1Util_ETC1Texture>>(input); }
	static jni::ref<android::opengl::ETC1Util_ETC1Texture> compressTexture(jni::ref<java::nio::Buffer> input, jint width, jint height, jint pixelSize, jint stride) { return call_static_method<"compressTexture", jni::ref<android::opengl::ETC1Util_ETC1Texture>>(input, width, height, pixelSize, stride); }
	static void writeTexture(jni::ref<android::opengl::ETC1Util_ETC1Texture> texture, jni::ref<java::io::OutputStream> output) { return call_static_method<"writeTexture", void>(texture, output); }

protected:

	ETC1Util(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_ETC1UTIL
