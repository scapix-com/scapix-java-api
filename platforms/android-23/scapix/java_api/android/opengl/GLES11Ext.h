// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OPENGL_GLES11EXT_FWD
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLES11EXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::opengl { class GLES11Ext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::opengl::GLES11Ext>
{
	static constexpr fixed_string class_name = "android/opengl/GLES11Ext";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLES11EXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OPENGL_GLES11EXT)
#define SCAPIX_JAVA_API_ANDROID_OPENGL_GLES11EXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/nio/Buffer.h>
#include <scapix/java_api/java/nio/FloatBuffer.h>
#include <scapix/java_api/java/nio/IntBuffer.h>
#include <scapix/java_api/java/nio/ShortBuffer.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::opengl::GLES11Ext : public jni::object_base<"android/opengl/GLES11Ext",
	java::lang::Object>
{
public:

	static jint GL_3DC_XY_AMD() { return get_static_field<"GL_3DC_XY_AMD", jint>(); }
	static jint GL_3DC_X_AMD() { return get_static_field<"GL_3DC_X_AMD", jint>(); }
	static jint GL_ATC_RGBA_EXPLICIT_ALPHA_AMD() { return get_static_field<"GL_ATC_RGBA_EXPLICIT_ALPHA_AMD", jint>(); }
	static jint GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD() { return get_static_field<"GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD", jint>(); }
	static jint GL_ATC_RGB_AMD() { return get_static_field<"GL_ATC_RGB_AMD", jint>(); }
	static jint GL_BGRA() { return get_static_field<"GL_BGRA", jint>(); }
	static jint GL_BLEND_DST_ALPHA_OES() { return get_static_field<"GL_BLEND_DST_ALPHA_OES", jint>(); }
	static jint GL_BLEND_DST_RGB_OES() { return get_static_field<"GL_BLEND_DST_RGB_OES", jint>(); }
	static jint GL_BLEND_EQUATION_ALPHA_OES() { return get_static_field<"GL_BLEND_EQUATION_ALPHA_OES", jint>(); }
	static jint GL_BLEND_EQUATION_OES() { return get_static_field<"GL_BLEND_EQUATION_OES", jint>(); }
	static jint GL_BLEND_EQUATION_RGB_OES() { return get_static_field<"GL_BLEND_EQUATION_RGB_OES", jint>(); }
	static jint GL_BLEND_SRC_ALPHA_OES() { return get_static_field<"GL_BLEND_SRC_ALPHA_OES", jint>(); }
	static jint GL_BLEND_SRC_RGB_OES() { return get_static_field<"GL_BLEND_SRC_RGB_OES", jint>(); }
	static jint GL_BUFFER_ACCESS_OES() { return get_static_field<"GL_BUFFER_ACCESS_OES", jint>(); }
	static jint GL_BUFFER_MAPPED_OES() { return get_static_field<"GL_BUFFER_MAPPED_OES", jint>(); }
	static jint GL_BUFFER_MAP_POINTER_OES() { return get_static_field<"GL_BUFFER_MAP_POINTER_OES", jint>(); }
	static jint GL_COLOR_ATTACHMENT0_OES() { return get_static_field<"GL_COLOR_ATTACHMENT0_OES", jint>(); }
	static jint GL_CURRENT_PALETTE_MATRIX_OES() { return get_static_field<"GL_CURRENT_PALETTE_MATRIX_OES", jint>(); }
	static jint GL_DECR_WRAP_OES() { return get_static_field<"GL_DECR_WRAP_OES", jint>(); }
	static jint GL_DEPTH24_STENCIL8_OES() { return get_static_field<"GL_DEPTH24_STENCIL8_OES", jint>(); }
	static jint GL_DEPTH_ATTACHMENT_OES() { return get_static_field<"GL_DEPTH_ATTACHMENT_OES", jint>(); }
	static jint GL_DEPTH_COMPONENT16_OES() { return get_static_field<"GL_DEPTH_COMPONENT16_OES", jint>(); }
	static jint GL_DEPTH_COMPONENT24_OES() { return get_static_field<"GL_DEPTH_COMPONENT24_OES", jint>(); }
	static jint GL_DEPTH_COMPONENT32_OES() { return get_static_field<"GL_DEPTH_COMPONENT32_OES", jint>(); }
	static jint GL_DEPTH_STENCIL_OES() { return get_static_field<"GL_DEPTH_STENCIL_OES", jint>(); }
	static jint GL_ETC1_RGB8_OES() { return get_static_field<"GL_ETC1_RGB8_OES", jint>(); }
	static jint GL_FIXED_OES() { return get_static_field<"GL_FIXED_OES", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES", jint>(); }
	static jint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES() { return get_static_field<"GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES", jint>(); }
	static jint GL_FRAMEBUFFER_BINDING_OES() { return get_static_field<"GL_FRAMEBUFFER_BINDING_OES", jint>(); }
	static jint GL_FRAMEBUFFER_COMPLETE_OES() { return get_static_field<"GL_FRAMEBUFFER_COMPLETE_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES", jint>(); }
	static jint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES() { return get_static_field<"GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES", jint>(); }
	static jint GL_FRAMEBUFFER_OES() { return get_static_field<"GL_FRAMEBUFFER_OES", jint>(); }
	static jint GL_FRAMEBUFFER_UNSUPPORTED_OES() { return get_static_field<"GL_FRAMEBUFFER_UNSUPPORTED_OES", jint>(); }
	static jint GL_FUNC_ADD_OES() { return get_static_field<"GL_FUNC_ADD_OES", jint>(); }
	static jint GL_FUNC_REVERSE_SUBTRACT_OES() { return get_static_field<"GL_FUNC_REVERSE_SUBTRACT_OES", jint>(); }
	static jint GL_FUNC_SUBTRACT_OES() { return get_static_field<"GL_FUNC_SUBTRACT_OES", jint>(); }
	static jint GL_INCR_WRAP_OES() { return get_static_field<"GL_INCR_WRAP_OES", jint>(); }
	static jint GL_INVALID_FRAMEBUFFER_OPERATION_OES() { return get_static_field<"GL_INVALID_FRAMEBUFFER_OPERATION_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_POINTER_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_POINTER_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_SIZE_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_SIZE_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_STRIDE_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_STRIDE_OES", jint>(); }
	static jint GL_MATRIX_INDEX_ARRAY_TYPE_OES() { return get_static_field<"GL_MATRIX_INDEX_ARRAY_TYPE_OES", jint>(); }
	static jint GL_MATRIX_PALETTE_OES() { return get_static_field<"GL_MATRIX_PALETTE_OES", jint>(); }
	static jint GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES() { return get_static_field<"GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES", jint>(); }
	static jint GL_MAX_PALETTE_MATRICES_OES() { return get_static_field<"GL_MAX_PALETTE_MATRICES_OES", jint>(); }
	static jint GL_MAX_RENDERBUFFER_SIZE_OES() { return get_static_field<"GL_MAX_RENDERBUFFER_SIZE_OES", jint>(); }
	static jint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT() { return get_static_field<"GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT", jint>(); }
	static jint GL_MAX_VERTEX_UNITS_OES() { return get_static_field<"GL_MAX_VERTEX_UNITS_OES", jint>(); }
	static jint GL_MIRRORED_REPEAT_OES() { return get_static_field<"GL_MIRRORED_REPEAT_OES", jint>(); }
	static jint GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES() { return get_static_field<"GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES", jint>(); }
	static jint GL_NONE_OES() { return get_static_field<"GL_NONE_OES", jint>(); }
	static jint GL_NORMAL_MAP_OES() { return get_static_field<"GL_NORMAL_MAP_OES", jint>(); }
	static jint GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES() { return get_static_field<"GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES", jint>(); }
	static jint GL_REFLECTION_MAP_OES() { return get_static_field<"GL_REFLECTION_MAP_OES", jint>(); }
	static jint GL_RENDERBUFFER_ALPHA_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_ALPHA_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_BINDING_OES() { return get_static_field<"GL_RENDERBUFFER_BINDING_OES", jint>(); }
	static jint GL_RENDERBUFFER_BLUE_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_BLUE_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_DEPTH_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_DEPTH_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_GREEN_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_GREEN_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_HEIGHT_OES() { return get_static_field<"GL_RENDERBUFFER_HEIGHT_OES", jint>(); }
	static jint GL_RENDERBUFFER_INTERNAL_FORMAT_OES() { return get_static_field<"GL_RENDERBUFFER_INTERNAL_FORMAT_OES", jint>(); }
	static jint GL_RENDERBUFFER_OES() { return get_static_field<"GL_RENDERBUFFER_OES", jint>(); }
	static jint GL_RENDERBUFFER_RED_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_RED_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_STENCIL_SIZE_OES() { return get_static_field<"GL_RENDERBUFFER_STENCIL_SIZE_OES", jint>(); }
	static jint GL_RENDERBUFFER_WIDTH_OES() { return get_static_field<"GL_RENDERBUFFER_WIDTH_OES", jint>(); }
	static jint GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES() { return get_static_field<"GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES", jint>(); }
	static jint GL_RGB565_OES() { return get_static_field<"GL_RGB565_OES", jint>(); }
	static jint GL_RGB5_A1_OES() { return get_static_field<"GL_RGB5_A1_OES", jint>(); }
	static jint GL_RGB8_OES() { return get_static_field<"GL_RGB8_OES", jint>(); }
	static jint GL_RGBA4_OES() { return get_static_field<"GL_RGBA4_OES", jint>(); }
	static jint GL_RGBA8_OES() { return get_static_field<"GL_RGBA8_OES", jint>(); }
	static jint GL_SAMPLER_EXTERNAL_OES() { return get_static_field<"GL_SAMPLER_EXTERNAL_OES", jint>(); }
	static jint GL_STENCIL_ATTACHMENT_OES() { return get_static_field<"GL_STENCIL_ATTACHMENT_OES", jint>(); }
	static jint GL_STENCIL_INDEX1_OES() { return get_static_field<"GL_STENCIL_INDEX1_OES", jint>(); }
	static jint GL_STENCIL_INDEX4_OES() { return get_static_field<"GL_STENCIL_INDEX4_OES", jint>(); }
	static jint GL_STENCIL_INDEX8_OES() { return get_static_field<"GL_STENCIL_INDEX8_OES", jint>(); }
	static jint GL_TEXTURE_BINDING_CUBE_MAP_OES() { return get_static_field<"GL_TEXTURE_BINDING_CUBE_MAP_OES", jint>(); }
	static jint GL_TEXTURE_BINDING_EXTERNAL_OES() { return get_static_field<"GL_TEXTURE_BINDING_EXTERNAL_OES", jint>(); }
	static jint GL_TEXTURE_CROP_RECT_OES() { return get_static_field<"GL_TEXTURE_CROP_RECT_OES", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES() { return get_static_field<"GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES() { return get_static_field<"GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES() { return get_static_field<"GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_OES() { return get_static_field<"GL_TEXTURE_CUBE_MAP_OES", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES() { return get_static_field<"GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES() { return get_static_field<"GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES", jint>(); }
	static jint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES() { return get_static_field<"GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES", jint>(); }
	static jint GL_TEXTURE_EXTERNAL_OES() { return get_static_field<"GL_TEXTURE_EXTERNAL_OES", jint>(); }
	static jint GL_TEXTURE_GEN_MODE_OES() { return get_static_field<"GL_TEXTURE_GEN_MODE_OES", jint>(); }
	static jint GL_TEXTURE_GEN_STR_OES() { return get_static_field<"GL_TEXTURE_GEN_STR_OES", jint>(); }
	static jint GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES() { return get_static_field<"GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES", jint>(); }
	static jint GL_TEXTURE_MAX_ANISOTROPY_EXT() { return get_static_field<"GL_TEXTURE_MAX_ANISOTROPY_EXT", jint>(); }
	static jint GL_UNSIGNED_INT_24_8_OES() { return get_static_field<"GL_UNSIGNED_INT_24_8_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_BUFFER_BINDING_OES() { return get_static_field<"GL_WEIGHT_ARRAY_BUFFER_BINDING_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_OES() { return get_static_field<"GL_WEIGHT_ARRAY_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_POINTER_OES() { return get_static_field<"GL_WEIGHT_ARRAY_POINTER_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_SIZE_OES() { return get_static_field<"GL_WEIGHT_ARRAY_SIZE_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_STRIDE_OES() { return get_static_field<"GL_WEIGHT_ARRAY_STRIDE_OES", jint>(); }
	static jint GL_WEIGHT_ARRAY_TYPE_OES() { return get_static_field<"GL_WEIGHT_ARRAY_TYPE_OES", jint>(); }
	static jint GL_WRITE_ONLY_OES() { return get_static_field<"GL_WRITE_ONLY_OES", jint>(); }

	static jni::ref<android::opengl::GLES11Ext> new_object() { return base_::new_object(); }
	static void glBlendEquationSeparateOES(jint p1, jint p2) { return call_static_method<"glBlendEquationSeparateOES", void>(p1, p2); }
	static void glBlendFuncSeparateOES(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glBlendFuncSeparateOES", void>(p1, p2, p3, p4); }
	static void glBlendEquationOES(jint p1) { return call_static_method<"glBlendEquationOES", void>(p1); }
	static void glDrawTexsOES(jshort p1, jshort p2, jshort p3, jshort p4, jshort p5) { return call_static_method<"glDrawTexsOES", void>(p1, p2, p3, p4, p5); }
	static void glDrawTexiOES(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glDrawTexiOES", void>(p1, p2, p3, p4, p5); }
	static void glDrawTexxOES(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glDrawTexxOES", void>(p1, p2, p3, p4, p5); }
	static void glDrawTexsvOES(jni::ref<jni::array<jshort>> p1, jint p2) { return call_static_method<"glDrawTexsvOES", void>(p1, p2); }
	static void glDrawTexsvOES(jni::ref<java::nio::ShortBuffer> p1) { return call_static_method<"glDrawTexsvOES", void>(p1); }
	static void glDrawTexivOES(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"glDrawTexivOES", void>(p1, p2); }
	static void glDrawTexivOES(jni::ref<java::nio::IntBuffer> p1) { return call_static_method<"glDrawTexivOES", void>(p1); }
	static void glDrawTexxvOES(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"glDrawTexxvOES", void>(p1, p2); }
	static void glDrawTexxvOES(jni::ref<java::nio::IntBuffer> p1) { return call_static_method<"glDrawTexxvOES", void>(p1); }
	static void glDrawTexfOES(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) { return call_static_method<"glDrawTexfOES", void>(p1, p2, p3, p4, p5); }
	static void glDrawTexfvOES(jni::ref<jni::array<jfloat>> p1, jint p2) { return call_static_method<"glDrawTexfvOES", void>(p1, p2); }
	static void glDrawTexfvOES(jni::ref<java::nio::FloatBuffer> p1) { return call_static_method<"glDrawTexfvOES", void>(p1); }
	static void glEGLImageTargetTexture2DOES(jint p1, jni::ref<java::nio::Buffer> p2) { return call_static_method<"glEGLImageTargetTexture2DOES", void>(p1, p2); }
	static void glEGLImageTargetRenderbufferStorageOES(jint p1, jni::ref<java::nio::Buffer> p2) { return call_static_method<"glEGLImageTargetRenderbufferStorageOES", void>(p1, p2); }
	static void glAlphaFuncxOES(jint p1, jint p2) { return call_static_method<"glAlphaFuncxOES", void>(p1, p2); }
	static void glClearColorxOES(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glClearColorxOES", void>(p1, p2, p3, p4); }
	static void glClearDepthxOES(jint p1) { return call_static_method<"glClearDepthxOES", void>(p1); }
	static void glClipPlanexOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glClipPlanexOES", void>(p1, p2, p3); }
	static void glClipPlanexOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glClipPlanexOES", void>(p1, p2); }
	static void glColor4xOES(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glColor4xOES", void>(p1, p2, p3, p4); }
	static void glDepthRangexOES(jint p1, jint p2) { return call_static_method<"glDepthRangexOES", void>(p1, p2); }
	static void glFogxOES(jint p1, jint p2) { return call_static_method<"glFogxOES", void>(p1, p2); }
	static void glFogxvOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glFogxvOES", void>(p1, p2, p3); }
	static void glFogxvOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glFogxvOES", void>(p1, p2); }
	static void glFrustumxOES(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_static_method<"glFrustumxOES", void>(p1, p2, p3, p4, p5, p6); }
	static void glGetClipPlanexOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glGetClipPlanexOES", void>(p1, p2, p3); }
	static void glGetClipPlanexOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glGetClipPlanexOES", void>(p1, p2); }
	static void glGetFixedvOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glGetFixedvOES", void>(p1, p2, p3); }
	static void glGetFixedvOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glGetFixedvOES", void>(p1, p2); }
	static void glGetLightxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetLightxvOES", void>(p1, p2, p3, p4); }
	static void glGetLightxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetLightxvOES", void>(p1, p2, p3); }
	static void glGetMaterialxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetMaterialxvOES", void>(p1, p2, p3, p4); }
	static void glGetMaterialxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetMaterialxvOES", void>(p1, p2, p3); }
	static void glGetTexEnvxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetTexEnvxvOES", void>(p1, p2, p3, p4); }
	static void glGetTexEnvxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetTexEnvxvOES", void>(p1, p2, p3); }
	static void glGetTexParameterxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetTexParameterxvOES", void>(p1, p2, p3, p4); }
	static void glGetTexParameterxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetTexParameterxvOES", void>(p1, p2, p3); }
	static void glLightModelxOES(jint p1, jint p2) { return call_static_method<"glLightModelxOES", void>(p1, p2); }
	static void glLightModelxvOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glLightModelxvOES", void>(p1, p2, p3); }
	static void glLightModelxvOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glLightModelxvOES", void>(p1, p2); }
	static void glLightxOES(jint p1, jint p2, jint p3) { return call_static_method<"glLightxOES", void>(p1, p2, p3); }
	static void glLightxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glLightxvOES", void>(p1, p2, p3, p4); }
	static void glLightxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glLightxvOES", void>(p1, p2, p3); }
	static void glLineWidthxOES(jint p1) { return call_static_method<"glLineWidthxOES", void>(p1); }
	static void glLoadMatrixxOES(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"glLoadMatrixxOES", void>(p1, p2); }
	static void glLoadMatrixxOES(jni::ref<java::nio::IntBuffer> p1) { return call_static_method<"glLoadMatrixxOES", void>(p1); }
	static void glMaterialxOES(jint p1, jint p2, jint p3) { return call_static_method<"glMaterialxOES", void>(p1, p2, p3); }
	static void glMaterialxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glMaterialxvOES", void>(p1, p2, p3, p4); }
	static void glMaterialxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glMaterialxvOES", void>(p1, p2, p3); }
	static void glMultMatrixxOES(jni::ref<jni::array<jint>> p1, jint p2) { return call_static_method<"glMultMatrixxOES", void>(p1, p2); }
	static void glMultMatrixxOES(jni::ref<java::nio::IntBuffer> p1) { return call_static_method<"glMultMatrixxOES", void>(p1); }
	static void glMultiTexCoord4xOES(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glMultiTexCoord4xOES", void>(p1, p2, p3, p4, p5); }
	static void glNormal3xOES(jint p1, jint p2, jint p3) { return call_static_method<"glNormal3xOES", void>(p1, p2, p3); }
	static void glOrthoxOES(jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) { return call_static_method<"glOrthoxOES", void>(p1, p2, p3, p4, p5, p6); }
	static void glPointParameterxOES(jint p1, jint p2) { return call_static_method<"glPointParameterxOES", void>(p1, p2); }
	static void glPointParameterxvOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glPointParameterxvOES", void>(p1, p2, p3); }
	static void glPointParameterxvOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glPointParameterxvOES", void>(p1, p2); }
	static void glPointSizexOES(jint p1) { return call_static_method<"glPointSizexOES", void>(p1); }
	static void glPolygonOffsetxOES(jint p1, jint p2) { return call_static_method<"glPolygonOffsetxOES", void>(p1, p2); }
	static void glRotatexOES(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glRotatexOES", void>(p1, p2, p3, p4); }
	static void glSampleCoveragexOES(jint p1, jboolean p2) { return call_static_method<"glSampleCoveragexOES", void>(p1, p2); }
	static void glScalexOES(jint p1, jint p2, jint p3) { return call_static_method<"glScalexOES", void>(p1, p2, p3); }
	static void glTexEnvxOES(jint p1, jint p2, jint p3) { return call_static_method<"glTexEnvxOES", void>(p1, p2, p3); }
	static void glTexEnvxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glTexEnvxvOES", void>(p1, p2, p3, p4); }
	static void glTexEnvxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glTexEnvxvOES", void>(p1, p2, p3); }
	static void glTexParameterxOES(jint p1, jint p2, jint p3) { return call_static_method<"glTexParameterxOES", void>(p1, p2, p3); }
	static void glTexParameterxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glTexParameterxvOES", void>(p1, p2, p3, p4); }
	static void glTexParameterxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glTexParameterxvOES", void>(p1, p2, p3); }
	static void glTranslatexOES(jint p1, jint p2, jint p3) { return call_static_method<"glTranslatexOES", void>(p1, p2, p3); }
	static jboolean glIsRenderbufferOES(jint p1) { return call_static_method<"glIsRenderbufferOES", jboolean>(p1); }
	static void glBindRenderbufferOES(jint p1, jint p2) { return call_static_method<"glBindRenderbufferOES", void>(p1, p2); }
	static void glDeleteRenderbuffersOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glDeleteRenderbuffersOES", void>(p1, p2, p3); }
	static void glDeleteRenderbuffersOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glDeleteRenderbuffersOES", void>(p1, p2); }
	static void glGenRenderbuffersOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glGenRenderbuffersOES", void>(p1, p2, p3); }
	static void glGenRenderbuffersOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glGenRenderbuffersOES", void>(p1, p2); }
	static void glRenderbufferStorageOES(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glRenderbufferStorageOES", void>(p1, p2, p3, p4); }
	static void glGetRenderbufferParameterivOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetRenderbufferParameterivOES", void>(p1, p2, p3, p4); }
	static void glGetRenderbufferParameterivOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetRenderbufferParameterivOES", void>(p1, p2, p3); }
	static jboolean glIsFramebufferOES(jint p1) { return call_static_method<"glIsFramebufferOES", jboolean>(p1); }
	static void glBindFramebufferOES(jint p1, jint p2) { return call_static_method<"glBindFramebufferOES", void>(p1, p2); }
	static void glDeleteFramebuffersOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glDeleteFramebuffersOES", void>(p1, p2, p3); }
	static void glDeleteFramebuffersOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glDeleteFramebuffersOES", void>(p1, p2); }
	static void glGenFramebuffersOES(jint p1, jni::ref<jni::array<jint>> p2, jint p3) { return call_static_method<"glGenFramebuffersOES", void>(p1, p2, p3); }
	static void glGenFramebuffersOES(jint p1, jni::ref<java::nio::IntBuffer> p2) { return call_static_method<"glGenFramebuffersOES", void>(p1, p2); }
	static jint glCheckFramebufferStatusOES(jint p1) { return call_static_method<"glCheckFramebufferStatusOES", jint>(p1); }
	static void glFramebufferRenderbufferOES(jint p1, jint p2, jint p3, jint p4) { return call_static_method<"glFramebufferRenderbufferOES", void>(p1, p2, p3, p4); }
	static void glFramebufferTexture2DOES(jint p1, jint p2, jint p3, jint p4, jint p5) { return call_static_method<"glFramebufferTexture2DOES", void>(p1, p2, p3, p4, p5); }
	static void glGetFramebufferAttachmentParameterivOES(jint p1, jint p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"glGetFramebufferAttachmentParameterivOES", void>(p1, p2, p3, p4, p5); }
	static void glGetFramebufferAttachmentParameterivOES(jint p1, jint p2, jint p3, jni::ref<java::nio::IntBuffer> p4) { return call_static_method<"glGetFramebufferAttachmentParameterivOES", void>(p1, p2, p3, p4); }
	static void glGenerateMipmapOES(jint p1) { return call_static_method<"glGenerateMipmapOES", void>(p1); }
	static void glCurrentPaletteMatrixOES(jint p1) { return call_static_method<"glCurrentPaletteMatrixOES", void>(p1); }
	static void glLoadPaletteFromModelViewMatrixOES() { return call_static_method<"glLoadPaletteFromModelViewMatrixOES", void>(); }
	static void glMatrixIndexPointerOES(jint size, jint type, jint stride, jni::ref<java::nio::Buffer> pointer) { return call_static_method<"glMatrixIndexPointerOES", void>(size, type, stride, pointer); }
	static void glWeightPointerOES(jint size, jint type, jint stride, jni::ref<java::nio::Buffer> pointer) { return call_static_method<"glWeightPointerOES", void>(size, type, stride, pointer); }
	static void glDepthRangefOES(jfloat p1, jfloat p2) { return call_static_method<"glDepthRangefOES", void>(p1, p2); }
	static void glFrustumfOES(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_static_method<"glFrustumfOES", void>(p1, p2, p3, p4, p5, p6); }
	static void glOrthofOES(jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) { return call_static_method<"glOrthofOES", void>(p1, p2, p3, p4, p5, p6); }
	static void glClipPlanefOES(jint p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_static_method<"glClipPlanefOES", void>(p1, p2, p3); }
	static void glClipPlanefOES(jint p1, jni::ref<java::nio::FloatBuffer> p2) { return call_static_method<"glClipPlanefOES", void>(p1, p2); }
	static void glGetClipPlanefOES(jint p1, jni::ref<jni::array<jfloat>> p2, jint p3) { return call_static_method<"glGetClipPlanefOES", void>(p1, p2, p3); }
	static void glGetClipPlanefOES(jint p1, jni::ref<java::nio::FloatBuffer> p2) { return call_static_method<"glGetClipPlanefOES", void>(p1, p2); }
	static void glClearDepthfOES(jfloat p1) { return call_static_method<"glClearDepthfOES", void>(p1); }
	static void glTexGenfOES(jint p1, jint p2, jfloat p3) { return call_static_method<"glTexGenfOES", void>(p1, p2, p3); }
	static void glTexGenfvOES(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_static_method<"glTexGenfvOES", void>(p1, p2, p3, p4); }
	static void glTexGenfvOES(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_static_method<"glTexGenfvOES", void>(p1, p2, p3); }
	static void glTexGeniOES(jint p1, jint p2, jint p3) { return call_static_method<"glTexGeniOES", void>(p1, p2, p3); }
	static void glTexGenivOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glTexGenivOES", void>(p1, p2, p3, p4); }
	static void glTexGenivOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glTexGenivOES", void>(p1, p2, p3); }
	static void glTexGenxOES(jint p1, jint p2, jint p3) { return call_static_method<"glTexGenxOES", void>(p1, p2, p3); }
	static void glTexGenxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glTexGenxvOES", void>(p1, p2, p3, p4); }
	static void glTexGenxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glTexGenxvOES", void>(p1, p2, p3); }
	static void glGetTexGenfvOES(jint p1, jint p2, jni::ref<jni::array<jfloat>> p3, jint p4) { return call_static_method<"glGetTexGenfvOES", void>(p1, p2, p3, p4); }
	static void glGetTexGenfvOES(jint p1, jint p2, jni::ref<java::nio::FloatBuffer> p3) { return call_static_method<"glGetTexGenfvOES", void>(p1, p2, p3); }
	static void glGetTexGenivOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetTexGenivOES", void>(p1, p2, p3, p4); }
	static void glGetTexGenivOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetTexGenivOES", void>(p1, p2, p3); }
	static void glGetTexGenxvOES(jint p1, jint p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"glGetTexGenxvOES", void>(p1, p2, p3, p4); }
	static void glGetTexGenxvOES(jint p1, jint p2, jni::ref<java::nio::IntBuffer> p3) { return call_static_method<"glGetTexGenxvOES", void>(p1, p2, p3); }

protected:

	GLES11Ext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_GLES11EXT
