// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_OPENGL_EGL14_FWD
#define SCAPIX_JAVA_API_ANDROID_OPENGL_EGL14_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::opengl { class EGL14; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::opengl::EGL14>
{
	static constexpr fixed_string class_name = "android/opengl/EGL14";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_EGL14_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_OPENGL_EGL14)
#define SCAPIX_JAVA_API_ANDROID_OPENGL_EGL14

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/opengl/EGLConfig.h>
#include <scapix/java_api/android/opengl/EGLContext.h>
#include <scapix/java_api/android/opengl/EGLDisplay.h>
#include <scapix/java_api/android/opengl/EGLSurface.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::opengl::EGL14 : public jni::object_base<"android/opengl/EGL14",
	java::lang::Object>
{
public:

	static jint EGL_ALPHA_MASK_SIZE() { return get_static_field<"EGL_ALPHA_MASK_SIZE", jint>(); }
	static jint EGL_ALPHA_SIZE() { return get_static_field<"EGL_ALPHA_SIZE", jint>(); }
	static jint EGL_BACK_BUFFER() { return get_static_field<"EGL_BACK_BUFFER", jint>(); }
	static jint EGL_BAD_ACCESS() { return get_static_field<"EGL_BAD_ACCESS", jint>(); }
	static jint EGL_BAD_ALLOC() { return get_static_field<"EGL_BAD_ALLOC", jint>(); }
	static jint EGL_BAD_ATTRIBUTE() { return get_static_field<"EGL_BAD_ATTRIBUTE", jint>(); }
	static jint EGL_BAD_CONFIG() { return get_static_field<"EGL_BAD_CONFIG", jint>(); }
	static jint EGL_BAD_CONTEXT() { return get_static_field<"EGL_BAD_CONTEXT", jint>(); }
	static jint EGL_BAD_CURRENT_SURFACE() { return get_static_field<"EGL_BAD_CURRENT_SURFACE", jint>(); }
	static jint EGL_BAD_DISPLAY() { return get_static_field<"EGL_BAD_DISPLAY", jint>(); }
	static jint EGL_BAD_MATCH() { return get_static_field<"EGL_BAD_MATCH", jint>(); }
	static jint EGL_BAD_NATIVE_PIXMAP() { return get_static_field<"EGL_BAD_NATIVE_PIXMAP", jint>(); }
	static jint EGL_BAD_NATIVE_WINDOW() { return get_static_field<"EGL_BAD_NATIVE_WINDOW", jint>(); }
	static jint EGL_BAD_PARAMETER() { return get_static_field<"EGL_BAD_PARAMETER", jint>(); }
	static jint EGL_BAD_SURFACE() { return get_static_field<"EGL_BAD_SURFACE", jint>(); }
	static jint EGL_BIND_TO_TEXTURE_RGB() { return get_static_field<"EGL_BIND_TO_TEXTURE_RGB", jint>(); }
	static jint EGL_BIND_TO_TEXTURE_RGBA() { return get_static_field<"EGL_BIND_TO_TEXTURE_RGBA", jint>(); }
	static jint EGL_BLUE_SIZE() { return get_static_field<"EGL_BLUE_SIZE", jint>(); }
	static jint EGL_BUFFER_DESTROYED() { return get_static_field<"EGL_BUFFER_DESTROYED", jint>(); }
	static jint EGL_BUFFER_PRESERVED() { return get_static_field<"EGL_BUFFER_PRESERVED", jint>(); }
	static jint EGL_BUFFER_SIZE() { return get_static_field<"EGL_BUFFER_SIZE", jint>(); }
	static jint EGL_CLIENT_APIS() { return get_static_field<"EGL_CLIENT_APIS", jint>(); }
	static jint EGL_COLOR_BUFFER_TYPE() { return get_static_field<"EGL_COLOR_BUFFER_TYPE", jint>(); }
	static jint EGL_CONFIG_CAVEAT() { return get_static_field<"EGL_CONFIG_CAVEAT", jint>(); }
	static jint EGL_CONFIG_ID() { return get_static_field<"EGL_CONFIG_ID", jint>(); }
	static jint EGL_CONFORMANT() { return get_static_field<"EGL_CONFORMANT", jint>(); }
	static jint EGL_CONTEXT_CLIENT_TYPE() { return get_static_field<"EGL_CONTEXT_CLIENT_TYPE", jint>(); }
	static jint EGL_CONTEXT_CLIENT_VERSION() { return get_static_field<"EGL_CONTEXT_CLIENT_VERSION", jint>(); }
	static jint EGL_CONTEXT_LOST() { return get_static_field<"EGL_CONTEXT_LOST", jint>(); }
	static jint EGL_CORE_NATIVE_ENGINE() { return get_static_field<"EGL_CORE_NATIVE_ENGINE", jint>(); }
	static jint EGL_DEFAULT_DISPLAY() { return get_static_field<"EGL_DEFAULT_DISPLAY", jint>(); }
	static jint EGL_DEPTH_SIZE() { return get_static_field<"EGL_DEPTH_SIZE", jint>(); }
	static jint EGL_DISPLAY_SCALING() { return get_static_field<"EGL_DISPLAY_SCALING", jint>(); }
	static jint EGL_DRAW() { return get_static_field<"EGL_DRAW", jint>(); }
	static jint EGL_EXTENSIONS() { return get_static_field<"EGL_EXTENSIONS", jint>(); }
	static jint EGL_FALSE() { return get_static_field<"EGL_FALSE", jint>(); }
	static jint EGL_GREEN_SIZE() { return get_static_field<"EGL_GREEN_SIZE", jint>(); }
	static jint EGL_HEIGHT() { return get_static_field<"EGL_HEIGHT", jint>(); }
	static jint EGL_HORIZONTAL_RESOLUTION() { return get_static_field<"EGL_HORIZONTAL_RESOLUTION", jint>(); }
	static jint EGL_LARGEST_PBUFFER() { return get_static_field<"EGL_LARGEST_PBUFFER", jint>(); }
	static jint EGL_LEVEL() { return get_static_field<"EGL_LEVEL", jint>(); }
	static jint EGL_LUMINANCE_BUFFER() { return get_static_field<"EGL_LUMINANCE_BUFFER", jint>(); }
	static jint EGL_LUMINANCE_SIZE() { return get_static_field<"EGL_LUMINANCE_SIZE", jint>(); }
	static jint EGL_MATCH_NATIVE_PIXMAP() { return get_static_field<"EGL_MATCH_NATIVE_PIXMAP", jint>(); }
	static jint EGL_MAX_PBUFFER_HEIGHT() { return get_static_field<"EGL_MAX_PBUFFER_HEIGHT", jint>(); }
	static jint EGL_MAX_PBUFFER_PIXELS() { return get_static_field<"EGL_MAX_PBUFFER_PIXELS", jint>(); }
	static jint EGL_MAX_PBUFFER_WIDTH() { return get_static_field<"EGL_MAX_PBUFFER_WIDTH", jint>(); }
	static jint EGL_MAX_SWAP_INTERVAL() { return get_static_field<"EGL_MAX_SWAP_INTERVAL", jint>(); }
	static jint EGL_MIN_SWAP_INTERVAL() { return get_static_field<"EGL_MIN_SWAP_INTERVAL", jint>(); }
	static jint EGL_MIPMAP_LEVEL() { return get_static_field<"EGL_MIPMAP_LEVEL", jint>(); }
	static jint EGL_MIPMAP_TEXTURE() { return get_static_field<"EGL_MIPMAP_TEXTURE", jint>(); }
	static jint EGL_MULTISAMPLE_RESOLVE() { return get_static_field<"EGL_MULTISAMPLE_RESOLVE", jint>(); }
	static jint EGL_MULTISAMPLE_RESOLVE_BOX() { return get_static_field<"EGL_MULTISAMPLE_RESOLVE_BOX", jint>(); }
	static jint EGL_MULTISAMPLE_RESOLVE_BOX_BIT() { return get_static_field<"EGL_MULTISAMPLE_RESOLVE_BOX_BIT", jint>(); }
	static jint EGL_MULTISAMPLE_RESOLVE_DEFAULT() { return get_static_field<"EGL_MULTISAMPLE_RESOLVE_DEFAULT", jint>(); }
	static jint EGL_NATIVE_RENDERABLE() { return get_static_field<"EGL_NATIVE_RENDERABLE", jint>(); }
	static jint EGL_NATIVE_VISUAL_ID() { return get_static_field<"EGL_NATIVE_VISUAL_ID", jint>(); }
	static jint EGL_NATIVE_VISUAL_TYPE() { return get_static_field<"EGL_NATIVE_VISUAL_TYPE", jint>(); }
	static jint EGL_NONE() { return get_static_field<"EGL_NONE", jint>(); }
	static jint EGL_NON_CONFORMANT_CONFIG() { return get_static_field<"EGL_NON_CONFORMANT_CONFIG", jint>(); }
	static jint EGL_NOT_INITIALIZED() { return get_static_field<"EGL_NOT_INITIALIZED", jint>(); }
	static jni::ref<android::opengl::EGLContext> EGL_NO_CONTEXT() { return get_static_field<"EGL_NO_CONTEXT", jni::ref<android::opengl::EGLContext>>(); }
	static void EGL_NO_CONTEXT(jni::ref<android::opengl::EGLContext> v) { set_static_field<"EGL_NO_CONTEXT", jni::ref<android::opengl::EGLContext>>(v); }
	static jni::ref<android::opengl::EGLDisplay> EGL_NO_DISPLAY() { return get_static_field<"EGL_NO_DISPLAY", jni::ref<android::opengl::EGLDisplay>>(); }
	static void EGL_NO_DISPLAY(jni::ref<android::opengl::EGLDisplay> v) { set_static_field<"EGL_NO_DISPLAY", jni::ref<android::opengl::EGLDisplay>>(v); }
	static jni::ref<android::opengl::EGLSurface> EGL_NO_SURFACE() { return get_static_field<"EGL_NO_SURFACE", jni::ref<android::opengl::EGLSurface>>(); }
	static void EGL_NO_SURFACE(jni::ref<android::opengl::EGLSurface> v) { set_static_field<"EGL_NO_SURFACE", jni::ref<android::opengl::EGLSurface>>(v); }
	static jint EGL_NO_TEXTURE() { return get_static_field<"EGL_NO_TEXTURE", jint>(); }
	static jint EGL_OPENGL_API() { return get_static_field<"EGL_OPENGL_API", jint>(); }
	static jint EGL_OPENGL_BIT() { return get_static_field<"EGL_OPENGL_BIT", jint>(); }
	static jint EGL_OPENGL_ES2_BIT() { return get_static_field<"EGL_OPENGL_ES2_BIT", jint>(); }
	static jint EGL_OPENGL_ES_API() { return get_static_field<"EGL_OPENGL_ES_API", jint>(); }
	static jint EGL_OPENGL_ES_BIT() { return get_static_field<"EGL_OPENGL_ES_BIT", jint>(); }
	static jint EGL_OPENVG_API() { return get_static_field<"EGL_OPENVG_API", jint>(); }
	static jint EGL_OPENVG_BIT() { return get_static_field<"EGL_OPENVG_BIT", jint>(); }
	static jint EGL_OPENVG_IMAGE() { return get_static_field<"EGL_OPENVG_IMAGE", jint>(); }
	static jint EGL_PBUFFER_BIT() { return get_static_field<"EGL_PBUFFER_BIT", jint>(); }
	static jint EGL_PIXEL_ASPECT_RATIO() { return get_static_field<"EGL_PIXEL_ASPECT_RATIO", jint>(); }
	static jint EGL_PIXMAP_BIT() { return get_static_field<"EGL_PIXMAP_BIT", jint>(); }
	static jint EGL_READ() { return get_static_field<"EGL_READ", jint>(); }
	static jint EGL_RED_SIZE() { return get_static_field<"EGL_RED_SIZE", jint>(); }
	static jint EGL_RENDERABLE_TYPE() { return get_static_field<"EGL_RENDERABLE_TYPE", jint>(); }
	static jint EGL_RENDER_BUFFER() { return get_static_field<"EGL_RENDER_BUFFER", jint>(); }
	static jint EGL_RGB_BUFFER() { return get_static_field<"EGL_RGB_BUFFER", jint>(); }
	static jint EGL_SAMPLES() { return get_static_field<"EGL_SAMPLES", jint>(); }
	static jint EGL_SAMPLE_BUFFERS() { return get_static_field<"EGL_SAMPLE_BUFFERS", jint>(); }
	static jint EGL_SINGLE_BUFFER() { return get_static_field<"EGL_SINGLE_BUFFER", jint>(); }
	static jint EGL_SLOW_CONFIG() { return get_static_field<"EGL_SLOW_CONFIG", jint>(); }
	static jint EGL_STENCIL_SIZE() { return get_static_field<"EGL_STENCIL_SIZE", jint>(); }
	static jint EGL_SUCCESS() { return get_static_field<"EGL_SUCCESS", jint>(); }
	static jint EGL_SURFACE_TYPE() { return get_static_field<"EGL_SURFACE_TYPE", jint>(); }
	static jint EGL_SWAP_BEHAVIOR() { return get_static_field<"EGL_SWAP_BEHAVIOR", jint>(); }
	static jint EGL_SWAP_BEHAVIOR_PRESERVED_BIT() { return get_static_field<"EGL_SWAP_BEHAVIOR_PRESERVED_BIT", jint>(); }
	static jint EGL_TEXTURE_2D() { return get_static_field<"EGL_TEXTURE_2D", jint>(); }
	static jint EGL_TEXTURE_FORMAT() { return get_static_field<"EGL_TEXTURE_FORMAT", jint>(); }
	static jint EGL_TEXTURE_RGB() { return get_static_field<"EGL_TEXTURE_RGB", jint>(); }
	static jint EGL_TEXTURE_RGBA() { return get_static_field<"EGL_TEXTURE_RGBA", jint>(); }
	static jint EGL_TEXTURE_TARGET() { return get_static_field<"EGL_TEXTURE_TARGET", jint>(); }
	static jint EGL_TRANSPARENT_BLUE_VALUE() { return get_static_field<"EGL_TRANSPARENT_BLUE_VALUE", jint>(); }
	static jint EGL_TRANSPARENT_GREEN_VALUE() { return get_static_field<"EGL_TRANSPARENT_GREEN_VALUE", jint>(); }
	static jint EGL_TRANSPARENT_RED_VALUE() { return get_static_field<"EGL_TRANSPARENT_RED_VALUE", jint>(); }
	static jint EGL_TRANSPARENT_RGB() { return get_static_field<"EGL_TRANSPARENT_RGB", jint>(); }
	static jint EGL_TRANSPARENT_TYPE() { return get_static_field<"EGL_TRANSPARENT_TYPE", jint>(); }
	static jint EGL_TRUE() { return get_static_field<"EGL_TRUE", jint>(); }
	static jint EGL_VENDOR() { return get_static_field<"EGL_VENDOR", jint>(); }
	static jint EGL_VERSION() { return get_static_field<"EGL_VERSION", jint>(); }
	static jint EGL_VERTICAL_RESOLUTION() { return get_static_field<"EGL_VERTICAL_RESOLUTION", jint>(); }
	static jint EGL_VG_ALPHA_FORMAT() { return get_static_field<"EGL_VG_ALPHA_FORMAT", jint>(); }
	static jint EGL_VG_ALPHA_FORMAT_NONPRE() { return get_static_field<"EGL_VG_ALPHA_FORMAT_NONPRE", jint>(); }
	static jint EGL_VG_ALPHA_FORMAT_PRE() { return get_static_field<"EGL_VG_ALPHA_FORMAT_PRE", jint>(); }
	static jint EGL_VG_ALPHA_FORMAT_PRE_BIT() { return get_static_field<"EGL_VG_ALPHA_FORMAT_PRE_BIT", jint>(); }
	static jint EGL_VG_COLORSPACE() { return get_static_field<"EGL_VG_COLORSPACE", jint>(); }
	static jint EGL_VG_COLORSPACE_LINEAR() { return get_static_field<"EGL_VG_COLORSPACE_LINEAR", jint>(); }
	static jint EGL_VG_COLORSPACE_LINEAR_BIT() { return get_static_field<"EGL_VG_COLORSPACE_LINEAR_BIT", jint>(); }
	static jint EGL_VG_COLORSPACE_sRGB() { return get_static_field<"EGL_VG_COLORSPACE_sRGB", jint>(); }
	static jint EGL_WIDTH() { return get_static_field<"EGL_WIDTH", jint>(); }
	static jint EGL_WINDOW_BIT() { return get_static_field<"EGL_WINDOW_BIT", jint>(); }

	static jni::ref<android::opengl::EGL14> new_object() { return base_::new_object(); }
	static jint eglGetError() { return call_static_method<"eglGetError", jint>(); }
	static jni::ref<android::opengl::EGLDisplay> eglGetDisplay(jint p1) { return call_static_method<"eglGetDisplay", jni::ref<android::opengl::EGLDisplay>>(p1); }
	static jboolean eglInitialize(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<jni::array<jint>> p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"eglInitialize", jboolean>(p1, p2, p3, p4, p5); }
	static jboolean eglTerminate(jni::ref<android::opengl::EGLDisplay> p1) { return call_static_method<"eglTerminate", jboolean>(p1); }
	static jni::ref<java::lang::String> eglQueryString(jni::ref<android::opengl::EGLDisplay> p1, jint p2) { return call_static_method<"eglQueryString", jni::ref<java::lang::String>>(p1, p2); }
	static jboolean eglGetConfigs(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<jni::array<android::opengl::EGLConfig>> p2, jint p3, jint p4, jni::ref<jni::array<jint>> p5, jint p6) { return call_static_method<"eglGetConfigs", jboolean>(p1, p2, p3, p4, p5, p6); }
	static jboolean eglChooseConfig(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<jni::array<jint>> p2, jint p3, jni::ref<jni::array<android::opengl::EGLConfig>> p4, jint p5, jint p6, jni::ref<jni::array<jint>> p7, jint p8) { return call_static_method<"eglChooseConfig", jboolean>(p1, p2, p3, p4, p5, p6, p7, p8); }
	static jboolean eglGetConfigAttrib(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLConfig> p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"eglGetConfigAttrib", jboolean>(p1, p2, p3, p4, p5); }
	static jni::ref<android::opengl::EGLSurface> eglCreateWindowSurface(jni::ref<android::opengl::EGLDisplay> dpy, jni::ref<android::opengl::EGLConfig> config, jni::ref<java::lang::Object> win, jni::ref<jni::array<jint>> attrib_list, jint offset) { return call_static_method<"eglCreateWindowSurface", jni::ref<android::opengl::EGLSurface>>(dpy, config, win, attrib_list, offset); }
	static jni::ref<android::opengl::EGLSurface> eglCreatePbufferSurface(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLConfig> p2, jni::ref<jni::array<jint>> p3, jint p4) { return call_static_method<"eglCreatePbufferSurface", jni::ref<android::opengl::EGLSurface>>(p1, p2, p3, p4); }
	static jni::ref<android::opengl::EGLSurface> eglCreatePixmapSurface(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLConfig> p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"eglCreatePixmapSurface", jni::ref<android::opengl::EGLSurface>>(p1, p2, p3, p4, p5); }
	static jboolean eglDestroySurface(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSurface> p2) { return call_static_method<"eglDestroySurface", jboolean>(p1, p2); }
	static jboolean eglQuerySurface(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSurface> p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"eglQuerySurface", jboolean>(p1, p2, p3, p4, p5); }
	static jboolean eglBindAPI(jint p1) { return call_static_method<"eglBindAPI", jboolean>(p1); }
	static jint eglQueryAPI() { return call_static_method<"eglQueryAPI", jint>(); }
	static jboolean eglWaitClient() { return call_static_method<"eglWaitClient", jboolean>(); }
	static jboolean eglReleaseThread() { return call_static_method<"eglReleaseThread", jboolean>(); }
	static jni::ref<android::opengl::EGLSurface> eglCreatePbufferFromClientBuffer(jni::ref<android::opengl::EGLDisplay> p1, jint p2, jint p3, jni::ref<android::opengl::EGLConfig> p4, jni::ref<jni::array<jint>> p5, jint p6) { return call_static_method<"eglCreatePbufferFromClientBuffer", jni::ref<android::opengl::EGLSurface>>(p1, p2, p3, p4, p5, p6); }
	static jboolean eglSurfaceAttrib(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSurface> p2, jint p3, jint p4) { return call_static_method<"eglSurfaceAttrib", jboolean>(p1, p2, p3, p4); }
	static jboolean eglBindTexImage(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSurface> p2, jint p3) { return call_static_method<"eglBindTexImage", jboolean>(p1, p2, p3); }
	static jboolean eglReleaseTexImage(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSurface> p2, jint p3) { return call_static_method<"eglReleaseTexImage", jboolean>(p1, p2, p3); }
	static jboolean eglSwapInterval(jni::ref<android::opengl::EGLDisplay> p1, jint p2) { return call_static_method<"eglSwapInterval", jboolean>(p1, p2); }
	static jni::ref<android::opengl::EGLContext> eglCreateContext(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLConfig> p2, jni::ref<android::opengl::EGLContext> p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"eglCreateContext", jni::ref<android::opengl::EGLContext>>(p1, p2, p3, p4, p5); }
	static jboolean eglDestroyContext(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLContext> p2) { return call_static_method<"eglDestroyContext", jboolean>(p1, p2); }
	static jboolean eglMakeCurrent(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSurface> p2, jni::ref<android::opengl::EGLSurface> p3, jni::ref<android::opengl::EGLContext> p4) { return call_static_method<"eglMakeCurrent", jboolean>(p1, p2, p3, p4); }
	static jni::ref<android::opengl::EGLContext> eglGetCurrentContext() { return call_static_method<"eglGetCurrentContext", jni::ref<android::opengl::EGLContext>>(); }
	static jni::ref<android::opengl::EGLSurface> eglGetCurrentSurface(jint p1) { return call_static_method<"eglGetCurrentSurface", jni::ref<android::opengl::EGLSurface>>(p1); }
	static jni::ref<android::opengl::EGLDisplay> eglGetCurrentDisplay() { return call_static_method<"eglGetCurrentDisplay", jni::ref<android::opengl::EGLDisplay>>(); }
	static jboolean eglQueryContext(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLContext> p2, jint p3, jni::ref<jni::array<jint>> p4, jint p5) { return call_static_method<"eglQueryContext", jboolean>(p1, p2, p3, p4, p5); }
	static jboolean eglWaitGL() { return call_static_method<"eglWaitGL", jboolean>(); }
	static jboolean eglWaitNative(jint p1) { return call_static_method<"eglWaitNative", jboolean>(p1); }
	static jboolean eglSwapBuffers(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSurface> p2) { return call_static_method<"eglSwapBuffers", jboolean>(p1, p2); }
	static jboolean eglCopyBuffers(jni::ref<android::opengl::EGLDisplay> p1, jni::ref<android::opengl::EGLSurface> p2, jint p3) { return call_static_method<"eglCopyBuffers", jboolean>(p1, p2, p3); }

protected:

	EGL14(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_OPENGL_EGL14
