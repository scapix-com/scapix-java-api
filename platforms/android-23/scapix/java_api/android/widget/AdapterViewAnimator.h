// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/widget/AdapterView.h>
#include <scapix/java_api/android/widget/Advanceable.h>

#ifndef SCAPIX_JAVA_API_ANDROID_WIDGET_ADAPTERVIEWANIMATOR_FWD
#define SCAPIX_JAVA_API_ANDROID_WIDGET_ADAPTERVIEWANIMATOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::widget { class AdapterViewAnimator; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::widget::AdapterViewAnimator>
{
	static constexpr fixed_string class_name = "android/widget/AdapterViewAnimator";
	using base_classes = std::tuple<scapix::java_api::android::widget::AdapterView, scapix::java_api::android::widget::Advanceable>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_ADAPTERVIEWANIMATOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_WIDGET_ADAPTERVIEWANIMATOR)
#define SCAPIX_JAVA_API_ANDROID_WIDGET_ADAPTERVIEWANIMATOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/animation/ObjectAnimator.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/content/Intent.h>
#include <scapix/java_api/android/os/Parcelable.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/android/view/MotionEvent.h>
#include <scapix/java_api/android/view/View.h>
#include <scapix/java_api/android/widget/Adapter.h>
#include <scapix/java_api/java/lang/CharSequence.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::widget::AdapterViewAnimator : public jni::object_base<"android/widget/AdapterViewAnimator",
	android::widget::AdapterView,
	android::widget::Advanceable>
{
public:

	static jni::ref<android::widget::AdapterViewAnimator> new_object(jni::ref<android::content::Context> context) { return base_::new_object(context); }
	static jni::ref<android::widget::AdapterViewAnimator> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs) { return base_::new_object(context, attrs); }
	static jni::ref<android::widget::AdapterViewAnimator> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr) { return base_::new_object(context, attrs, defStyleAttr); }
	static jni::ref<android::widget::AdapterViewAnimator> new_object(jni::ref<android::content::Context> context, jni::ref<android::util::AttributeSet> attrs, jint defStyleAttr, jint defStyleRes) { return base_::new_object(context, attrs, defStyleAttr, defStyleRes); }
	void setDisplayedChild(jint whichChild) { return call_method<"setDisplayedChild", void>(whichChild); }
	jint getDisplayedChild() { return call_method<"getDisplayedChild", jint>(); }
	void showNext() { return call_method<"showNext", void>(); }
	void showPrevious() { return call_method<"showPrevious", void>(); }
	jboolean onTouchEvent(jni::ref<android::view::MotionEvent> ev) { return call_method<"onTouchEvent", jboolean>(ev); }
	jni::ref<android::os::Parcelable> onSaveInstanceState() { return call_method<"onSaveInstanceState", jni::ref<android::os::Parcelable>>(); }
	void onRestoreInstanceState(jni::ref<android::os::Parcelable> state) { return call_method<"onRestoreInstanceState", void>(state); }
	jni::ref<android::view::View> getCurrentView() { return call_method<"getCurrentView", jni::ref<android::view::View>>(); }
	jni::ref<android::animation::ObjectAnimator> getInAnimation() { return call_method<"getInAnimation", jni::ref<android::animation::ObjectAnimator>>(); }
	void setInAnimation(jni::ref<android::animation::ObjectAnimator> inAnimation) { return call_method<"setInAnimation", void>(inAnimation); }
	jni::ref<android::animation::ObjectAnimator> getOutAnimation() { return call_method<"getOutAnimation", jni::ref<android::animation::ObjectAnimator>>(); }
	void setOutAnimation(jni::ref<android::animation::ObjectAnimator> outAnimation) { return call_method<"setOutAnimation", void>(outAnimation); }
	void setInAnimation(jni::ref<android::content::Context> context, jint resourceID) { return call_method<"setInAnimation", void>(context, resourceID); }
	void setOutAnimation(jni::ref<android::content::Context> context, jint resourceID) { return call_method<"setOutAnimation", void>(context, resourceID); }
	void setAnimateFirstView(jboolean animate) { return call_method<"setAnimateFirstView", void>(animate); }
	jint getBaseline() { return call_method<"getBaseline", jint>(); }
	jni::ref<android::widget::Adapter> getAdapter() { return call_method<"getAdapter", jni::ref<android::widget::Adapter>>(); }
	void setAdapter(jni::ref<android::widget::Adapter> adapter) { return call_method<"setAdapter", void>(adapter); }
	void setRemoteViewsAdapter(jni::ref<android::content::Intent> intent) { return call_method<"setRemoteViewsAdapter", void>(intent); }
	void setSelection(jint position) { return call_method<"setSelection", void>(position); }
	jni::ref<android::view::View> getSelectedView() { return call_method<"getSelectedView", jni::ref<android::view::View>>(); }
	void deferNotifyDataSetChanged() { return call_method<"deferNotifyDataSetChanged", void>(); }
	jboolean onRemoteAdapterConnected() { return call_method<"onRemoteAdapterConnected", jboolean>(); }
	void onRemoteAdapterDisconnected() { return call_method<"onRemoteAdapterDisconnected", void>(); }
	void advance() { return call_method<"advance", void>(); }
	void fyiWillBeAdvancedByHostKThx() { return call_method<"fyiWillBeAdvancedByHostKThx", void>(); }
	jni::ref<java::lang::CharSequence> getAccessibilityClassName() { return call_method<"getAccessibilityClassName", jni::ref<java::lang::CharSequence>>(); }

protected:

	AdapterViewAnimator(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_WIDGET_ADAPTERVIEWANIMATOR
