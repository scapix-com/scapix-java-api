// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/content/ContextWrapper.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_FWD
#define SCAPIX_JAVA_API_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::test { class RenamingDelegatingContext; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::test::RenamingDelegatingContext>
{
	static constexpr fixed_string class_name = "android/test/RenamingDelegatingContext";
	using base_classes = std::tuple<scapix::java_api::android::content::ContextWrapper>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT)
#define SCAPIX_JAVA_API_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentProvider.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/database/DatabaseErrorHandler.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase_CursorFactory.h>
#include <scapix/java_api/java/io/File.h>
#include <scapix/java_api/java/io/FileInputStream.h>
#include <scapix/java_api/java/io/FileOutputStream.h>
#include <scapix/java_api/java/lang/Class.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::test::RenamingDelegatingContext : public jni::object_base<"android/test/RenamingDelegatingContext",
	android::content::ContextWrapper>
{
public:

	static jni::ref<android::test::RenamingDelegatingContext> new_object(jni::ref<android::content::Context> context, jni::ref<java::lang::String> filePrefix) { return base_::new_object(context, filePrefix); }
	static jni::ref<android::test::RenamingDelegatingContext> new_object(jni::ref<android::content::Context> context, jni::ref<android::content::Context> fileContext, jni::ref<java::lang::String> filePrefix) { return base_::new_object(context, fileContext, filePrefix); }
	static jni::ref<android::content::ContentProvider> providerWithRenamedContext(jni::ref<java::lang::Class> contentProvider, jni::ref<android::content::Context> c, jni::ref<java::lang::String> filePrefix) { return call_static_method<"providerWithRenamedContext", jni::ref<android::content::ContentProvider>>(contentProvider, c, filePrefix); }
	static jni::ref<android::content::ContentProvider> providerWithRenamedContext(jni::ref<java::lang::Class> contentProvider, jni::ref<android::content::Context> c, jni::ref<java::lang::String> filePrefix, jboolean allowAccessToExistingFilesAndDbs) { return call_static_method<"providerWithRenamedContext", jni::ref<android::content::ContentProvider>>(contentProvider, c, filePrefix, allowAccessToExistingFilesAndDbs); }
	void makeExistingFilesAndDbsAccessible() { return call_method<"makeExistingFilesAndDbsAccessible", void>(); }
	jni::ref<java::lang::String> getDatabasePrefix() { return call_method<"getDatabasePrefix", jni::ref<java::lang::String>>(); }
	jni::ref<android::database::sqlite::SQLiteDatabase> openOrCreateDatabase(jni::ref<java::lang::String> name, jint mode, jni::ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory) { return call_method<"openOrCreateDatabase", jni::ref<android::database::sqlite::SQLiteDatabase>>(name, mode, factory); }
	jni::ref<android::database::sqlite::SQLiteDatabase> openOrCreateDatabase(jni::ref<java::lang::String> name, jint mode, jni::ref<android::database::sqlite::SQLiteDatabase_CursorFactory> factory, jni::ref<android::database::DatabaseErrorHandler> errorHandler) { return call_method<"openOrCreateDatabase", jni::ref<android::database::sqlite::SQLiteDatabase>>(name, mode, factory, errorHandler); }
	jboolean deleteDatabase(jni::ref<java::lang::String> name) { return call_method<"deleteDatabase", jboolean>(name); }
	jni::ref<java::io::File> getDatabasePath(jni::ref<java::lang::String> name) { return call_method<"getDatabasePath", jni::ref<java::io::File>>(name); }
	jni::ref<jni::array<java::lang::String>> databaseList() { return call_method<"databaseList", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::io::FileInputStream> openFileInput(jni::ref<java::lang::String> name) { return call_method<"openFileInput", jni::ref<java::io::FileInputStream>>(name); }
	jni::ref<java::io::FileOutputStream> openFileOutput(jni::ref<java::lang::String> name, jint mode) { return call_method<"openFileOutput", jni::ref<java::io::FileOutputStream>>(name, mode); }
	jni::ref<java::io::File> getFileStreamPath(jni::ref<java::lang::String> name) { return call_method<"getFileStreamPath", jni::ref<java::io::File>>(name); }
	jboolean deleteFile(jni::ref<java::lang::String> name) { return call_method<"deleteFile", jboolean>(name); }
	jni::ref<jni::array<java::lang::String>> fileList() { return call_method<"fileList", jni::ref<jni::array<java::lang::String>>>(); }
	jni::ref<java::io::File> getCacheDir() { return call_method<"getCacheDir", jni::ref<java::io::File>>(); }

protected:

	RenamingDelegatingContext(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEST_RENAMINGDELEGATINGCONTEXT
