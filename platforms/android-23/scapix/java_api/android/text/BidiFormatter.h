// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_TEXT_BIDIFORMATTER_FWD
#define SCAPIX_JAVA_API_ANDROID_TEXT_BIDIFORMATTER_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::text { class BidiFormatter; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::text::BidiFormatter>
{
	static constexpr fixed_string class_name = "android/text/BidiFormatter";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_BIDIFORMATTER_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_TEXT_BIDIFORMATTER)
#define SCAPIX_JAVA_API_ANDROID_TEXT_BIDIFORMATTER

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/text/TextDirectionHeuristic.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/util/Locale.h>
#include <scapix/java_api/android/text/BidiFormatter_Builder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::text::BidiFormatter : public jni::object_base<"android/text/BidiFormatter",
	java::lang::Object>
{
public:

	using Builder = BidiFormatter_Builder;

	static jni::ref<android::text::BidiFormatter> getInstance() { return call_static_method<"getInstance", jni::ref<android::text::BidiFormatter>>(); }
	static jni::ref<android::text::BidiFormatter> getInstance(jboolean rtlContext) { return call_static_method<"getInstance", jni::ref<android::text::BidiFormatter>>(rtlContext); }
	static jni::ref<android::text::BidiFormatter> getInstance(jni::ref<java::util::Locale> locale) { return call_static_method<"getInstance", jni::ref<android::text::BidiFormatter>>(locale); }
	jboolean isRtlContext() { return call_method<"isRtlContext", jboolean>(); }
	jboolean getStereoReset() { return call_method<"getStereoReset", jboolean>(); }
	jboolean isRtl(jni::ref<java::lang::String> str) { return call_method<"isRtl", jboolean>(str); }
	jni::ref<java::lang::String> unicodeWrap(jni::ref<java::lang::String> str, jni::ref<android::text::TextDirectionHeuristic> heuristic, jboolean isolate) { return call_method<"unicodeWrap", jni::ref<java::lang::String>>(str, heuristic, isolate); }
	jni::ref<java::lang::String> unicodeWrap(jni::ref<java::lang::String> str, jni::ref<android::text::TextDirectionHeuristic> heuristic) { return call_method<"unicodeWrap", jni::ref<java::lang::String>>(str, heuristic); }
	jni::ref<java::lang::String> unicodeWrap(jni::ref<java::lang::String> str, jboolean isolate) { return call_method<"unicodeWrap", jni::ref<java::lang::String>>(str, isolate); }
	jni::ref<java::lang::String> unicodeWrap(jni::ref<java::lang::String> str) { return call_method<"unicodeWrap", jni::ref<java::lang::String>>(str); }

protected:

	BidiFormatter(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_TEXT_BIDIFORMATTER
