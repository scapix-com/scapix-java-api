// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_DATABASE_DATABASEUTILS_FWD
#define SCAPIX_JAVA_API_ANDROID_DATABASE_DATABASEUTILS_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::database { class DatabaseUtils; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::database::DatabaseUtils>
{
	static constexpr fixed_string class_name = "android/database/DatabaseUtils";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_DATABASEUTILS_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_DATABASE_DATABASEUTILS)
#define SCAPIX_JAVA_API_ANDROID_DATABASE_DATABASEUTILS

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/ContentValues.h>
#include <scapix/java_api/android/content/Context.h>
#include <scapix/java_api/android/database/Cursor.h>
#include <scapix/java_api/android/database/DatabaseUtils_InsertHelper.h>
#include <scapix/java_api/android/database/sqlite/SQLiteDatabase.h>
#include <scapix/java_api/android/database/sqlite/SQLiteProgram.h>
#include <scapix/java_api/android/database/sqlite/SQLiteStatement.h>
#include <scapix/java_api/android/os/Parcel.h>
#include <scapix/java_api/android/os/ParcelFileDescriptor.h>
#include <scapix/java_api/java/io/PrintStream.h>
#include <scapix/java_api/java/lang/Exception.h>
#include <scapix/java_api/java/lang/String.h>
#include <scapix/java_api/java/lang/StringBuilder.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::database::DatabaseUtils : public jni::object_base<"android/database/DatabaseUtils",
	java::lang::Object>
{
public:

	using InsertHelper = DatabaseUtils_InsertHelper;

	static jint STATEMENT_ABORT() { return get_static_field<"STATEMENT_ABORT", jint>(); }
	static jint STATEMENT_ATTACH() { return get_static_field<"STATEMENT_ATTACH", jint>(); }
	static jint STATEMENT_BEGIN() { return get_static_field<"STATEMENT_BEGIN", jint>(); }
	static jint STATEMENT_COMMIT() { return get_static_field<"STATEMENT_COMMIT", jint>(); }
	static jint STATEMENT_DDL() { return get_static_field<"STATEMENT_DDL", jint>(); }
	static jint STATEMENT_OTHER() { return get_static_field<"STATEMENT_OTHER", jint>(); }
	static jint STATEMENT_PRAGMA() { return get_static_field<"STATEMENT_PRAGMA", jint>(); }
	static jint STATEMENT_SELECT() { return get_static_field<"STATEMENT_SELECT", jint>(); }
	static jint STATEMENT_UNPREPARED() { return get_static_field<"STATEMENT_UNPREPARED", jint>(); }
	static jint STATEMENT_UPDATE() { return get_static_field<"STATEMENT_UPDATE", jint>(); }

	static jni::ref<android::database::DatabaseUtils> new_object() { return base_::new_object(); }
	static void writeExceptionToParcel(jni::ref<android::os::Parcel> reply, jni::ref<java::lang::Exception> e) { return call_static_method<"writeExceptionToParcel", void>(reply, e); }
	static void readExceptionFromParcel(jni::ref<android::os::Parcel> reply) { return call_static_method<"readExceptionFromParcel", void>(reply); }
	static void readExceptionWithFileNotFoundExceptionFromParcel(jni::ref<android::os::Parcel> reply) { return call_static_method<"readExceptionWithFileNotFoundExceptionFromParcel", void>(reply); }
	static void readExceptionWithOperationApplicationExceptionFromParcel(jni::ref<android::os::Parcel> reply) { return call_static_method<"readExceptionWithOperationApplicationExceptionFromParcel", void>(reply); }
	static void bindObjectToProgram(jni::ref<android::database::sqlite::SQLiteProgram> prog, jint index, jni::ref<java::lang::Object> value) { return call_static_method<"bindObjectToProgram", void>(prog, index, value); }
	static void appendEscapedSQLString(jni::ref<java::lang::StringBuilder> sb, jni::ref<java::lang::String> sqlString) { return call_static_method<"appendEscapedSQLString", void>(sb, sqlString); }
	static jni::ref<java::lang::String> sqlEscapeString(jni::ref<java::lang::String> value) { return call_static_method<"sqlEscapeString", jni::ref<java::lang::String>>(value); }
	static void appendValueToSql(jni::ref<java::lang::StringBuilder> sql, jni::ref<java::lang::Object> value) { return call_static_method<"appendValueToSql", void>(sql, value); }
	static jni::ref<java::lang::String> concatenateWhere(jni::ref<java::lang::String> a, jni::ref<java::lang::String> b) { return call_static_method<"concatenateWhere", jni::ref<java::lang::String>>(a, b); }
	static jni::ref<java::lang::String> getCollationKey(jni::ref<java::lang::String> name) { return call_static_method<"getCollationKey", jni::ref<java::lang::String>>(name); }
	static jni::ref<java::lang::String> getHexCollationKey(jni::ref<java::lang::String> name) { return call_static_method<"getHexCollationKey", jni::ref<java::lang::String>>(name); }
	static void dumpCursor(jni::ref<android::database::Cursor> cursor) { return call_static_method<"dumpCursor", void>(cursor); }
	static void dumpCursor(jni::ref<android::database::Cursor> cursor, jni::ref<java::io::PrintStream> stream) { return call_static_method<"dumpCursor", void>(cursor, stream); }
	static void dumpCursor(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::StringBuilder> sb) { return call_static_method<"dumpCursor", void>(cursor, sb); }
	static jni::ref<java::lang::String> dumpCursorToString(jni::ref<android::database::Cursor> cursor) { return call_static_method<"dumpCursorToString", jni::ref<java::lang::String>>(cursor); }
	static void dumpCurrentRow(jni::ref<android::database::Cursor> cursor) { return call_static_method<"dumpCurrentRow", void>(cursor); }
	static void dumpCurrentRow(jni::ref<android::database::Cursor> cursor, jni::ref<java::io::PrintStream> stream) { return call_static_method<"dumpCurrentRow", void>(cursor, stream); }
	static void dumpCurrentRow(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::StringBuilder> sb) { return call_static_method<"dumpCurrentRow", void>(cursor, sb); }
	static jni::ref<java::lang::String> dumpCurrentRowToString(jni::ref<android::database::Cursor> cursor) { return call_static_method<"dumpCurrentRowToString", jni::ref<java::lang::String>>(cursor); }
	static void cursorStringToContentValues(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::content::ContentValues> values) { return call_static_method<"cursorStringToContentValues", void>(cursor, field, values); }
	static void cursorStringToInsertHelper(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::database::DatabaseUtils_InsertHelper> inserter, jint index) { return call_static_method<"cursorStringToInsertHelper", void>(cursor, field, inserter, index); }
	static void cursorStringToContentValues(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> key) { return call_static_method<"cursorStringToContentValues", void>(cursor, field, values, key); }
	static void cursorIntToContentValues(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::content::ContentValues> values) { return call_static_method<"cursorIntToContentValues", void>(cursor, field, values); }
	static void cursorIntToContentValues(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> key) { return call_static_method<"cursorIntToContentValues", void>(cursor, field, values, key); }
	static void cursorLongToContentValues(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::content::ContentValues> values) { return call_static_method<"cursorLongToContentValues", void>(cursor, field, values); }
	static void cursorLongToContentValues(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> key) { return call_static_method<"cursorLongToContentValues", void>(cursor, field, values, key); }
	static void cursorDoubleToCursorValues(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::content::ContentValues> values) { return call_static_method<"cursorDoubleToCursorValues", void>(cursor, field, values); }
	static void cursorDoubleToContentValues(jni::ref<android::database::Cursor> cursor, jni::ref<java::lang::String> field, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> key) { return call_static_method<"cursorDoubleToContentValues", void>(cursor, field, values, key); }
	static void cursorRowToContentValues(jni::ref<android::database::Cursor> cursor, jni::ref<android::content::ContentValues> values) { return call_static_method<"cursorRowToContentValues", void>(cursor, values); }
	static jlong queryNumEntries(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<java::lang::String> table) { return call_static_method<"queryNumEntries", jlong>(db, table); }
	static jlong queryNumEntries(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<java::lang::String> table, jni::ref<java::lang::String> selection) { return call_static_method<"queryNumEntries", jlong>(db, table, selection); }
	static jlong queryNumEntries(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<java::lang::String> table, jni::ref<java::lang::String> selection, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_static_method<"queryNumEntries", jlong>(db, table, selection, selectionArgs); }
	static jlong longForQuery(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<java::lang::String> query, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_static_method<"longForQuery", jlong>(db, query, selectionArgs); }
	static jlong longForQuery(jni::ref<android::database::sqlite::SQLiteStatement> prog, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_static_method<"longForQuery", jlong>(prog, selectionArgs); }
	static jni::ref<java::lang::String> stringForQuery(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<java::lang::String> query, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_static_method<"stringForQuery", jni::ref<java::lang::String>>(db, query, selectionArgs); }
	static jni::ref<java::lang::String> stringForQuery(jni::ref<android::database::sqlite::SQLiteStatement> prog, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_static_method<"stringForQuery", jni::ref<java::lang::String>>(prog, selectionArgs); }
	static jni::ref<android::os::ParcelFileDescriptor> blobFileDescriptorForQuery(jni::ref<android::database::sqlite::SQLiteDatabase> db, jni::ref<java::lang::String> query, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_static_method<"blobFileDescriptorForQuery", jni::ref<android::os::ParcelFileDescriptor>>(db, query, selectionArgs); }
	static jni::ref<android::os::ParcelFileDescriptor> blobFileDescriptorForQuery(jni::ref<android::database::sqlite::SQLiteStatement> prog, jni::ref<jni::array<java::lang::String>> selectionArgs) { return call_static_method<"blobFileDescriptorForQuery", jni::ref<android::os::ParcelFileDescriptor>>(prog, selectionArgs); }
	static void cursorStringToContentValuesIfPresent(jni::ref<android::database::Cursor> cursor, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> column) { return call_static_method<"cursorStringToContentValuesIfPresent", void>(cursor, values, column); }
	static void cursorLongToContentValuesIfPresent(jni::ref<android::database::Cursor> cursor, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> column) { return call_static_method<"cursorLongToContentValuesIfPresent", void>(cursor, values, column); }
	static void cursorShortToContentValuesIfPresent(jni::ref<android::database::Cursor> cursor, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> column) { return call_static_method<"cursorShortToContentValuesIfPresent", void>(cursor, values, column); }
	static void cursorIntToContentValuesIfPresent(jni::ref<android::database::Cursor> cursor, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> column) { return call_static_method<"cursorIntToContentValuesIfPresent", void>(cursor, values, column); }
	static void cursorFloatToContentValuesIfPresent(jni::ref<android::database::Cursor> cursor, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> column) { return call_static_method<"cursorFloatToContentValuesIfPresent", void>(cursor, values, column); }
	static void cursorDoubleToContentValuesIfPresent(jni::ref<android::database::Cursor> cursor, jni::ref<android::content::ContentValues> values, jni::ref<java::lang::String> column) { return call_static_method<"cursorDoubleToContentValuesIfPresent", void>(cursor, values, column); }
	static void createDbFromSqlStatements(jni::ref<android::content::Context> context, jni::ref<java::lang::String> dbName, jint dbVersion, jni::ref<java::lang::String> sqlStatements) { return call_static_method<"createDbFromSqlStatements", void>(context, dbName, dbVersion, sqlStatements); }
	static jint getSqlStatementType(jni::ref<java::lang::String> sql) { return call_static_method<"getSqlStatementType", jint>(sql); }
	static jni::ref<jni::array<java::lang::String>> appendSelectionArgs(jni::ref<jni::array<java::lang::String>> originalValues, jni::ref<jni::array<java::lang::String>> newValues) { return call_static_method<"appendSelectionArgs", jni::ref<jni::array<java::lang::String>>>(originalValues, newValues); }

protected:

	DatabaseUtils(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_DATABASE_DATABASEUTILS
