// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAPFACTORY_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAPFACTORY_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class BitmapFactory; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::BitmapFactory>
{
	static constexpr fixed_string class_name = "android/graphics/BitmapFactory";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAPFACTORY_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAPFACTORY)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAPFACTORY

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/graphics/Bitmap.h>
#include <scapix/java_api/android/graphics/BitmapFactory_Options.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/util/TypedValue.h>
#include <scapix/java_api/java/io/FileDescriptor.h>
#include <scapix/java_api/java/io/InputStream.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::BitmapFactory : public jni::object_base<"android/graphics/BitmapFactory",
	java::lang::Object>
{
public:

	using Options = BitmapFactory_Options;

	static jni::ref<android::graphics::BitmapFactory> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::Bitmap> decodeFile(jni::ref<java::lang::String> pathName, jni::ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<"decodeFile", jni::ref<android::graphics::Bitmap>>(pathName, opts); }
	static jni::ref<android::graphics::Bitmap> decodeFile(jni::ref<java::lang::String> pathName) { return call_static_method<"decodeFile", jni::ref<android::graphics::Bitmap>>(pathName); }
	static jni::ref<android::graphics::Bitmap> decodeResourceStream(jni::ref<android::content::res::Resources> res, jni::ref<android::util::TypedValue> value, jni::ref<java::io::InputStream> is, jni::ref<android::graphics::Rect> pad, jni::ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<"decodeResourceStream", jni::ref<android::graphics::Bitmap>>(res, value, is, pad, opts); }
	static jni::ref<android::graphics::Bitmap> decodeResource(jni::ref<android::content::res::Resources> res, jint id, jni::ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<"decodeResource", jni::ref<android::graphics::Bitmap>>(res, id, opts); }
	static jni::ref<android::graphics::Bitmap> decodeResource(jni::ref<android::content::res::Resources> res, jint id) { return call_static_method<"decodeResource", jni::ref<android::graphics::Bitmap>>(res, id); }
	static jni::ref<android::graphics::Bitmap> decodeByteArray(jni::ref<jni::array<jbyte>> data, jint offset, jint length, jni::ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<"decodeByteArray", jni::ref<android::graphics::Bitmap>>(data, offset, length, opts); }
	static jni::ref<android::graphics::Bitmap> decodeByteArray(jni::ref<jni::array<jbyte>> data, jint offset, jint length) { return call_static_method<"decodeByteArray", jni::ref<android::graphics::Bitmap>>(data, offset, length); }
	static jni::ref<android::graphics::Bitmap> decodeStream(jni::ref<java::io::InputStream> is, jni::ref<android::graphics::Rect> outPadding, jni::ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<"decodeStream", jni::ref<android::graphics::Bitmap>>(is, outPadding, opts); }
	static jni::ref<android::graphics::Bitmap> decodeStream(jni::ref<java::io::InputStream> is) { return call_static_method<"decodeStream", jni::ref<android::graphics::Bitmap>>(is); }
	static jni::ref<android::graphics::Bitmap> decodeFileDescriptor(jni::ref<java::io::FileDescriptor> fd, jni::ref<android::graphics::Rect> outPadding, jni::ref<android::graphics::BitmapFactory_Options> opts) { return call_static_method<"decodeFileDescriptor", jni::ref<android::graphics::Bitmap>>(fd, outPadding, opts); }
	static jni::ref<android::graphics::Bitmap> decodeFileDescriptor(jni::ref<java::io::FileDescriptor> fd) { return call_static_method<"decodeFileDescriptor", jni::ref<android::graphics::Bitmap>>(fd); }

protected:

	BitmapFactory(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_BITMAPFACTORY
