// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_MATRIX_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_MATRIX_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Matrix; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Matrix>
{
	static constexpr fixed_string class_name = "android/graphics/Matrix";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_MATRIX_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_MATRIX)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_MATRIX

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/graphics/Matrix_ScaleToFit.h>
#include <scapix/java_api/android/graphics/RectF.h>
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Matrix : public jni::object_base<"android/graphics/Matrix",
	java::lang::Object>
{
public:

	using ScaleToFit = Matrix_ScaleToFit;

	static jint MPERSP_0() { return get_static_field<"MPERSP_0", jint>(); }
	static jint MPERSP_1() { return get_static_field<"MPERSP_1", jint>(); }
	static jint MPERSP_2() { return get_static_field<"MPERSP_2", jint>(); }
	static jint MSCALE_X() { return get_static_field<"MSCALE_X", jint>(); }
	static jint MSCALE_Y() { return get_static_field<"MSCALE_Y", jint>(); }
	static jint MSKEW_X() { return get_static_field<"MSKEW_X", jint>(); }
	static jint MSKEW_Y() { return get_static_field<"MSKEW_Y", jint>(); }
	static jint MTRANS_X() { return get_static_field<"MTRANS_X", jint>(); }
	static jint MTRANS_Y() { return get_static_field<"MTRANS_Y", jint>(); }

	static jni::ref<android::graphics::Matrix> new_object() { return base_::new_object(); }
	static jni::ref<android::graphics::Matrix> new_object(jni::ref<android::graphics::Matrix> src) { return base_::new_object(src); }
	jboolean isIdentity() { return call_method<"isIdentity", jboolean>(); }
	jboolean isAffine() { return call_method<"isAffine", jboolean>(); }
	jboolean rectStaysRect() { return call_method<"rectStaysRect", jboolean>(); }
	void set(jni::ref<android::graphics::Matrix> src) { return call_method<"set", void>(src); }
	jboolean equals(jni::ref<java::lang::Object> obj) { return call_method<"equals", jboolean>(obj); }
	jint hashCode() { return call_method<"hashCode", jint>(); }
	void reset() { return call_method<"reset", void>(); }
	void setTranslate(jfloat dx, jfloat dy) { return call_method<"setTranslate", void>(dx, dy); }
	void setScale(jfloat sx, jfloat sy, jfloat px, jfloat py) { return call_method<"setScale", void>(sx, sy, px, py); }
	void setScale(jfloat sx, jfloat sy) { return call_method<"setScale", void>(sx, sy); }
	void setRotate(jfloat degrees, jfloat px, jfloat py) { return call_method<"setRotate", void>(degrees, px, py); }
	void setRotate(jfloat degrees) { return call_method<"setRotate", void>(degrees); }
	void setSinCos(jfloat sinValue, jfloat cosValue, jfloat px, jfloat py) { return call_method<"setSinCos", void>(sinValue, cosValue, px, py); }
	void setSinCos(jfloat sinValue, jfloat cosValue) { return call_method<"setSinCos", void>(sinValue, cosValue); }
	void setSkew(jfloat kx, jfloat ky, jfloat px, jfloat py) { return call_method<"setSkew", void>(kx, ky, px, py); }
	void setSkew(jfloat kx, jfloat ky) { return call_method<"setSkew", void>(kx, ky); }
	jboolean setConcat(jni::ref<android::graphics::Matrix> a, jni::ref<android::graphics::Matrix> b) { return call_method<"setConcat", jboolean>(a, b); }
	jboolean preTranslate(jfloat dx, jfloat dy) { return call_method<"preTranslate", jboolean>(dx, dy); }
	jboolean preScale(jfloat sx, jfloat sy, jfloat px, jfloat py) { return call_method<"preScale", jboolean>(sx, sy, px, py); }
	jboolean preScale(jfloat sx, jfloat sy) { return call_method<"preScale", jboolean>(sx, sy); }
	jboolean preRotate(jfloat degrees, jfloat px, jfloat py) { return call_method<"preRotate", jboolean>(degrees, px, py); }
	jboolean preRotate(jfloat degrees) { return call_method<"preRotate", jboolean>(degrees); }
	jboolean preSkew(jfloat kx, jfloat ky, jfloat px, jfloat py) { return call_method<"preSkew", jboolean>(kx, ky, px, py); }
	jboolean preSkew(jfloat kx, jfloat ky) { return call_method<"preSkew", jboolean>(kx, ky); }
	jboolean preConcat(jni::ref<android::graphics::Matrix> other) { return call_method<"preConcat", jboolean>(other); }
	jboolean postTranslate(jfloat dx, jfloat dy) { return call_method<"postTranslate", jboolean>(dx, dy); }
	jboolean postScale(jfloat sx, jfloat sy, jfloat px, jfloat py) { return call_method<"postScale", jboolean>(sx, sy, px, py); }
	jboolean postScale(jfloat sx, jfloat sy) { return call_method<"postScale", jboolean>(sx, sy); }
	jboolean postRotate(jfloat degrees, jfloat px, jfloat py) { return call_method<"postRotate", jboolean>(degrees, px, py); }
	jboolean postRotate(jfloat degrees) { return call_method<"postRotate", jboolean>(degrees); }
	jboolean postSkew(jfloat kx, jfloat ky, jfloat px, jfloat py) { return call_method<"postSkew", jboolean>(kx, ky, px, py); }
	jboolean postSkew(jfloat kx, jfloat ky) { return call_method<"postSkew", jboolean>(kx, ky); }
	jboolean postConcat(jni::ref<android::graphics::Matrix> other) { return call_method<"postConcat", jboolean>(other); }
	jboolean setRectToRect(jni::ref<android::graphics::RectF> src, jni::ref<android::graphics::RectF> dst, jni::ref<android::graphics::Matrix_ScaleToFit> stf) { return call_method<"setRectToRect", jboolean>(src, dst, stf); }
	jboolean setPolyToPoly(jni::ref<jni::array<jfloat>> src, jint srcIndex, jni::ref<jni::array<jfloat>> dst, jint dstIndex, jint pointCount) { return call_method<"setPolyToPoly", jboolean>(src, srcIndex, dst, dstIndex, pointCount); }
	jboolean invert(jni::ref<android::graphics::Matrix> inverse) { return call_method<"invert", jboolean>(inverse); }
	void mapPoints(jni::ref<jni::array<jfloat>> dst, jint dstIndex, jni::ref<jni::array<jfloat>> src, jint srcIndex, jint pointCount) { return call_method<"mapPoints", void>(dst, dstIndex, src, srcIndex, pointCount); }
	void mapVectors(jni::ref<jni::array<jfloat>> dst, jint dstIndex, jni::ref<jni::array<jfloat>> src, jint srcIndex, jint vectorCount) { return call_method<"mapVectors", void>(dst, dstIndex, src, srcIndex, vectorCount); }
	void mapPoints(jni::ref<jni::array<jfloat>> dst, jni::ref<jni::array<jfloat>> src) { return call_method<"mapPoints", void>(dst, src); }
	void mapVectors(jni::ref<jni::array<jfloat>> dst, jni::ref<jni::array<jfloat>> src) { return call_method<"mapVectors", void>(dst, src); }
	void mapPoints(jni::ref<jni::array<jfloat>> pts) { return call_method<"mapPoints", void>(pts); }
	void mapVectors(jni::ref<jni::array<jfloat>> vecs) { return call_method<"mapVectors", void>(vecs); }
	jboolean mapRect(jni::ref<android::graphics::RectF> dst, jni::ref<android::graphics::RectF> src) { return call_method<"mapRect", jboolean>(dst, src); }
	jboolean mapRect(jni::ref<android::graphics::RectF> rect) { return call_method<"mapRect", jboolean>(rect); }
	jfloat mapRadius(jfloat radius) { return call_method<"mapRadius", jfloat>(radius); }
	void getValues(jni::ref<jni::array<jfloat>> values) { return call_method<"getValues", void>(values); }
	void setValues(jni::ref<jni::array<jfloat>> values) { return call_method<"setValues", void>(values); }
	jni::ref<java::lang::String> toString() { return call_method<"toString", jni::ref<java::lang::String>>(); }
	jni::ref<java::lang::String> toShortString() { return call_method<"toShortString", jni::ref<java::lang::String>>(); }

protected:

	Matrix(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_MATRIX
