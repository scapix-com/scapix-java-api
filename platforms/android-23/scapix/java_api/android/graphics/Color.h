// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/java/lang/Object.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics { class Color; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::Color>
{
	static constexpr fixed_string class_name = "android/graphics/Color";
	using base_classes = std::tuple<scapix::java_api::java::lang::Object>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/java/lang/String.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::Color : public jni::object_base<"android/graphics/Color",
	java::lang::Object>
{
public:

	static jint BLACK() { return get_static_field<"BLACK", jint>(); }
	static jint BLUE() { return get_static_field<"BLUE", jint>(); }
	static jint CYAN() { return get_static_field<"CYAN", jint>(); }
	static jint DKGRAY() { return get_static_field<"DKGRAY", jint>(); }
	static jint GRAY() { return get_static_field<"GRAY", jint>(); }
	static jint GREEN() { return get_static_field<"GREEN", jint>(); }
	static jint LTGRAY() { return get_static_field<"LTGRAY", jint>(); }
	static jint MAGENTA() { return get_static_field<"MAGENTA", jint>(); }
	static jint RED() { return get_static_field<"RED", jint>(); }
	static jint TRANSPARENT() { return get_static_field<"TRANSPARENT", jint>(); }
	static jint WHITE() { return get_static_field<"WHITE", jint>(); }
	static jint YELLOW() { return get_static_field<"YELLOW", jint>(); }

	static jni::ref<android::graphics::Color> new_object() { return base_::new_object(); }
	static jint alpha(jint color) { return call_static_method<"alpha", jint>(color); }
	static jint red(jint color) { return call_static_method<"red", jint>(color); }
	static jint green(jint color) { return call_static_method<"green", jint>(color); }
	static jint blue(jint color) { return call_static_method<"blue", jint>(color); }
	static jint rgb(jint red, jint green, jint blue) { return call_static_method<"rgb", jint>(red, green, blue); }
	static jint argb(jint alpha, jint red, jint green, jint blue) { return call_static_method<"argb", jint>(alpha, red, green, blue); }
	static jint parseColor(jni::ref<java::lang::String> colorString) { return call_static_method<"parseColor", jint>(colorString); }
	static void RGBToHSV(jint red, jint green, jint blue, jni::ref<jni::array<jfloat>> hsv) { return call_static_method<"RGBToHSV", void>(red, green, blue, hsv); }
	static void colorToHSV(jint color, jni::ref<jni::array<jfloat>> hsv) { return call_static_method<"colorToHSV", void>(color, hsv); }
	static jint HSVToColor(jni::ref<jni::array<jfloat>> hsv) { return call_static_method<"HSVToColor", jint>(hsv); }
	static jint HSVToColor(jint alpha, jni::ref<jni::array<jfloat>> hsv) { return call_static_method<"HSVToColor", jint>(alpha, hsv); }

protected:

	Color(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_COLOR
