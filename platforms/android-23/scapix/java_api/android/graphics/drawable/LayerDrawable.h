// Generated by Scapix Java API 2.0
// https://www.scapix.com

#include <scapix/java_api/android/graphics/drawable/Drawable.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_Callback.h>

#ifndef SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE_FWD
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api::android::graphics::drawable { class LayerDrawable; }

template<>
struct scapix::jni::object_traits<scapix::java_api::android::graphics::drawable::LayerDrawable>
{
	static constexpr fixed_string class_name = "android/graphics/drawable/LayerDrawable";
	using base_classes = std::tuple<scapix::java_api::android::graphics::drawable::Drawable, scapix::java_api::android::graphics::drawable::Drawable_Callback>;
};

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE_FWD

#if !defined(SCAPIX_JAVA_API_FWD) && !defined(SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE)
#define SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE

#define SCAPIX_JAVA_API_FWD
#include <scapix/java_api/android/content/res/ColorStateList.h>
#include <scapix/java_api/android/content/res/Resources.h>
#include <scapix/java_api/android/content/res/Resources_Theme.h>
#include <scapix/java_api/android/graphics/Canvas.h>
#include <scapix/java_api/android/graphics/ColorFilter.h>
#include <scapix/java_api/android/graphics/Outline.h>
#include <scapix/java_api/android/graphics/PorterDuff_Mode.h>
#include <scapix/java_api/android/graphics/Rect.h>
#include <scapix/java_api/android/graphics/drawable/Drawable_ConstantState.h>
#include <scapix/java_api/android/util/AttributeSet.h>
#include <scapix/java_api/java/lang/Runnable.h>
#include <scapix/java_api/org/xmlpull/v1/XmlPullParser.h>
#undef SCAPIX_JAVA_API_FWD

#include <scapix/jni/java_api/macros_push.h>

namespace scapix::java_api {

class android::graphics::drawable::LayerDrawable : public jni::object_base<"android/graphics/drawable/LayerDrawable",
	android::graphics::drawable::Drawable,
	android::graphics::drawable::Drawable_Callback>
{
public:

	static jint PADDING_MODE_NEST() { return get_static_field<"PADDING_MODE_NEST", jint>(); }
	static jint PADDING_MODE_STACK() { return get_static_field<"PADDING_MODE_STACK", jint>(); }

	static jni::ref<android::graphics::drawable::LayerDrawable> new_object(jni::ref<jni::array<android::graphics::drawable::Drawable>> layers) { return base_::new_object(layers); }
	void inflate(jni::ref<android::content::res::Resources> r, jni::ref<org::xmlpull::v1::XmlPullParser> parser, jni::ref<android::util::AttributeSet> attrs, jni::ref<android::content::res::Resources_Theme> theme) { return call_method<"inflate", void>(r, parser, attrs, theme); }
	void applyTheme(jni::ref<android::content::res::Resources_Theme> t) { return call_method<"applyTheme", void>(t); }
	jboolean canApplyTheme() { return call_method<"canApplyTheme", jboolean>(); }
	jint addLayer(jni::ref<android::graphics::drawable::Drawable> dr) { return call_method<"addLayer", jint>(dr); }
	jni::ref<android::graphics::drawable::Drawable> findDrawableByLayerId(jint id) { return call_method<"findDrawableByLayerId", jni::ref<android::graphics::drawable::Drawable>>(id); }
	void setId(jint index, jint id) { return call_method<"setId", void>(index, id); }
	jint getId(jint index) { return call_method<"getId", jint>(index); }
	jint getNumberOfLayers() { return call_method<"getNumberOfLayers", jint>(); }
	jboolean setDrawableByLayerId(jint id, jni::ref<android::graphics::drawable::Drawable> drawable) { return call_method<"setDrawableByLayerId", jboolean>(id, drawable); }
	jint findIndexByLayerId(jint id) { return call_method<"findIndexByLayerId", jint>(id); }
	void setDrawable(jint index, jni::ref<android::graphics::drawable::Drawable> drawable) { return call_method<"setDrawable", void>(index, drawable); }
	jni::ref<android::graphics::drawable::Drawable> getDrawable(jint index) { return call_method<"getDrawable", jni::ref<android::graphics::drawable::Drawable>>(index); }
	void setLayerSize(jint index, jint w, jint h) { return call_method<"setLayerSize", void>(index, w, h); }
	void setLayerWidth(jint index, jint w) { return call_method<"setLayerWidth", void>(index, w); }
	jint getLayerWidth(jint index) { return call_method<"getLayerWidth", jint>(index); }
	void setLayerHeight(jint index, jint h) { return call_method<"setLayerHeight", void>(index, h); }
	jint getLayerHeight(jint index) { return call_method<"getLayerHeight", jint>(index); }
	void setLayerGravity(jint index, jint gravity) { return call_method<"setLayerGravity", void>(index, gravity); }
	jint getLayerGravity(jint index) { return call_method<"getLayerGravity", jint>(index); }
	void setLayerInset(jint index, jint l, jint t, jint r, jint b) { return call_method<"setLayerInset", void>(index, l, t, r, b); }
	void setLayerInsetRelative(jint index, jint s, jint t, jint e, jint b) { return call_method<"setLayerInsetRelative", void>(index, s, t, e, b); }
	void setLayerInsetLeft(jint index, jint l) { return call_method<"setLayerInsetLeft", void>(index, l); }
	jint getLayerInsetLeft(jint index) { return call_method<"getLayerInsetLeft", jint>(index); }
	void setLayerInsetRight(jint index, jint r) { return call_method<"setLayerInsetRight", void>(index, r); }
	jint getLayerInsetRight(jint index) { return call_method<"getLayerInsetRight", jint>(index); }
	void setLayerInsetTop(jint index, jint t) { return call_method<"setLayerInsetTop", void>(index, t); }
	jint getLayerInsetTop(jint index) { return call_method<"getLayerInsetTop", jint>(index); }
	void setLayerInsetBottom(jint index, jint b) { return call_method<"setLayerInsetBottom", void>(index, b); }
	jint getLayerInsetBottom(jint index) { return call_method<"getLayerInsetBottom", jint>(index); }
	void setLayerInsetStart(jint index, jint s) { return call_method<"setLayerInsetStart", void>(index, s); }
	jint getLayerInsetStart(jint index) { return call_method<"getLayerInsetStart", jint>(index); }
	void setLayerInsetEnd(jint index, jint e) { return call_method<"setLayerInsetEnd", void>(index, e); }
	jint getLayerInsetEnd(jint index) { return call_method<"getLayerInsetEnd", jint>(index); }
	void setPaddingMode(jint mode) { return call_method<"setPaddingMode", void>(mode); }
	jint getPaddingMode() { return call_method<"getPaddingMode", jint>(); }
	void invalidateDrawable(jni::ref<android::graphics::drawable::Drawable> who) { return call_method<"invalidateDrawable", void>(who); }
	void scheduleDrawable(jni::ref<android::graphics::drawable::Drawable> who, jni::ref<java::lang::Runnable> what, jlong when) { return call_method<"scheduleDrawable", void>(who, what, when); }
	void unscheduleDrawable(jni::ref<android::graphics::drawable::Drawable> who, jni::ref<java::lang::Runnable> what) { return call_method<"unscheduleDrawable", void>(who, what); }
	void draw(jni::ref<android::graphics::Canvas> canvas) { return call_method<"draw", void>(canvas); }
	jint getChangingConfigurations() { return call_method<"getChangingConfigurations", jint>(); }
	jboolean getPadding(jni::ref<android::graphics::Rect> padding) { return call_method<"getPadding", jboolean>(padding); }
	void setPadding(jint left, jint top, jint right, jint bottom) { return call_method<"setPadding", void>(left, top, right, bottom); }
	void setPaddingRelative(jint start, jint top, jint end, jint bottom) { return call_method<"setPaddingRelative", void>(start, top, end, bottom); }
	jint getLeftPadding() { return call_method<"getLeftPadding", jint>(); }
	jint getRightPadding() { return call_method<"getRightPadding", jint>(); }
	jint getStartPadding() { return call_method<"getStartPadding", jint>(); }
	jint getEndPadding() { return call_method<"getEndPadding", jint>(); }
	jint getTopPadding() { return call_method<"getTopPadding", jint>(); }
	jint getBottomPadding() { return call_method<"getBottomPadding", jint>(); }
	void getOutline(jni::ref<android::graphics::Outline> outline) { return call_method<"getOutline", void>(outline); }
	void setHotspot(jfloat x, jfloat y) { return call_method<"setHotspot", void>(x, y); }
	void setHotspotBounds(jint left, jint top, jint right, jint bottom) { return call_method<"setHotspotBounds", void>(left, top, right, bottom); }
	void getHotspotBounds(jni::ref<android::graphics::Rect> outRect) { return call_method<"getHotspotBounds", void>(outRect); }
	jboolean setVisible(jboolean visible, jboolean restart) { return call_method<"setVisible", jboolean>(visible, restart); }
	void setDither(jboolean dither) { return call_method<"setDither", void>(dither); }
	void setAlpha(jint alpha) { return call_method<"setAlpha", void>(alpha); }
	jint getAlpha() { return call_method<"getAlpha", jint>(); }
	void setColorFilter(jni::ref<android::graphics::ColorFilter> colorFilter) { return call_method<"setColorFilter", void>(colorFilter); }
	void setTintList(jni::ref<android::content::res::ColorStateList> tint) { return call_method<"setTintList", void>(tint); }
	void setTintMode(jni::ref<android::graphics::PorterDuff_Mode> tintMode) { return call_method<"setTintMode", void>(tintMode); }
	void setOpacity(jint opacity) { return call_method<"setOpacity", void>(opacity); }
	jint getOpacity() { return call_method<"getOpacity", jint>(); }
	void setAutoMirrored(jboolean mirrored) { return call_method<"setAutoMirrored", void>(mirrored); }
	jboolean isAutoMirrored() { return call_method<"isAutoMirrored", jboolean>(); }
	jboolean isStateful() { return call_method<"isStateful", jboolean>(); }
	jint getIntrinsicWidth() { return call_method<"getIntrinsicWidth", jint>(); }
	jint getIntrinsicHeight() { return call_method<"getIntrinsicHeight", jint>(); }
	jni::ref<android::graphics::drawable::Drawable_ConstantState> getConstantState() { return call_method<"getConstantState", jni::ref<android::graphics::drawable::Drawable_ConstantState>>(); }
	jni::ref<android::graphics::drawable::Drawable> mutate() { return call_method<"mutate", jni::ref<android::graphics::drawable::Drawable>>(); }
	jboolean onLayoutDirectionChanged(jint layoutDirection) { return call_method<"onLayoutDirectionChanged", jboolean>(layoutDirection); }

protected:

	LayerDrawable(handle_type h) : base_(h) {}

};

} // namespace scapix::java_api

#include <scapix/jni/java_api/macros_pop.h>

#endif // SCAPIX_JAVA_API_ANDROID_GRAPHICS_DRAWABLE_LAYERDRAWABLE
